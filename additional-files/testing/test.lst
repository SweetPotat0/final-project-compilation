     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "abdsdsads"
    84 00000007 0900000000000000        	dq 9
    85 0000000F 6162647364736164        	db 0x61, 0x62, 0x64, 0x73, 0x64, 0x73, 0x61, 0x64
    86 00000017 73                      	db 0x73
    87 00000018 04                      	db T_symbol	; abdsdsads
    88 00000019 [0600000000000000]      	dq L_constants + 6
    89                                  
    90                                  section .bss
    91                                  free_var_0:	; location of null?
    92 00000000 ????????????????        	resq 1
    93                                  free_var_1:	; location of pair?
    94 00000008 ????????????????        	resq 1
    95                                  free_var_2:	; location of void?
    96 00000010 ????????????????        	resq 1
    97                                  free_var_3:	; location of char?
    98 00000018 ????????????????        	resq 1
    99                                  free_var_4:	; location of string?
   100 00000020 ????????????????        	resq 1
   101                                  free_var_5:	; location of symbol?
   102 00000028 ????????????????        	resq 1
   103                                  free_var_6:	; location of vector?
   104 00000030 ????????????????        	resq 1
   105                                  free_var_7:	; location of procedure?
   106 00000038 ????????????????        	resq 1
   107                                  free_var_8:	; location of real?
   108 00000040 ????????????????        	resq 1
   109                                  free_var_9:	; location of rational?
   110 00000048 ????????????????        	resq 1
   111                                  free_var_10:	; location of boolean?
   112 00000050 ????????????????        	resq 1
   113                                  free_var_11:	; location of number?
   114 00000058 ????????????????        	resq 1
   115                                  free_var_12:	; location of collection?
   116 00000060 ????????????????        	resq 1
   117                                  free_var_13:	; location of cons
   118 00000068 ????????????????        	resq 1
   119                                  free_var_14:	; location of display-sexpr
   120 00000070 ????????????????        	resq 1
   121                                  free_var_15:	; location of write-char
   122 00000078 ????????????????        	resq 1
   123                                  free_var_16:	; location of car
   124 00000080 ????????????????        	resq 1
   125                                  free_var_17:	; location of cdr
   126 00000088 ????????????????        	resq 1
   127                                  free_var_18:	; location of string-length
   128 00000090 ????????????????        	resq 1
   129                                  free_var_19:	; location of vector-length
   130 00000098 ????????????????        	resq 1
   131                                  free_var_20:	; location of real->integer
   132 000000A0 ????????????????        	resq 1
   133                                  free_var_21:	; location of exit
   134 000000A8 ????????????????        	resq 1
   135                                  free_var_22:	; location of integer->real
   136 000000B0 ????????????????        	resq 1
   137                                  free_var_23:	; location of rational->real
   138 000000B8 ????????????????        	resq 1
   139                                  free_var_24:	; location of char->integer
   140 000000C0 ????????????????        	resq 1
   141                                  free_var_25:	; location of integer->char
   142 000000C8 ????????????????        	resq 1
   143                                  free_var_26:	; location of trng
   144 000000D0 ????????????????        	resq 1
   145                                  free_var_27:	; location of zero?
   146 000000D8 ????????????????        	resq 1
   147                                  free_var_28:	; location of integer?
   148 000000E0 ????????????????        	resq 1
   149                                  free_var_29:	; location of __bin-apply
   150 000000E8 ????????????????        	resq 1
   151                                  free_var_30:	; location of __bin-add-rr
   152 000000F0 ????????????????        	resq 1
   153                                  free_var_31:	; location of __bin-sub-rr
   154 000000F8 ????????????????        	resq 1
   155                                  free_var_32:	; location of __bin-mul-rr
   156 00000100 ????????????????        	resq 1
   157                                  free_var_33:	; location of __bin-div-rr
   158 00000108 ????????????????        	resq 1
   159                                  free_var_34:	; location of __bin-add-qq
   160 00000110 ????????????????        	resq 1
   161                                  free_var_35:	; location of __bin-sub-qq
   162 00000118 ????????????????        	resq 1
   163                                  free_var_36:	; location of __bin-mul-qq
   164 00000120 ????????????????        	resq 1
   165                                  free_var_37:	; location of __bin-div-qq
   166 00000128 ????????????????        	resq 1
   167                                  free_var_38:	; location of error
   168 00000130 ????????????????        	resq 1
   169                                  free_var_39:	; location of __bin-less-than-rr
   170 00000138 ????????????????        	resq 1
   171                                  free_var_40:	; location of __bin-less-than-qq
   172 00000140 ????????????????        	resq 1
   173                                  free_var_41:	; location of __bin-equal-rr
   174 00000148 ????????????????        	resq 1
   175                                  free_var_42:	; location of __bin-equal-qq
   176 00000150 ????????????????        	resq 1
   177                                  free_var_43:	; location of quotient
   178 00000158 ????????????????        	resq 1
   179                                  free_var_44:	; location of remainder
   180 00000160 ????????????????        	resq 1
   181                                  free_var_45:	; location of set-car!
   182 00000168 ????????????????        	resq 1
   183                                  free_var_46:	; location of set-cdr!
   184 00000170 ????????????????        	resq 1
   185                                  free_var_47:	; location of string-ref
   186 00000178 ????????????????        	resq 1
   187                                  free_var_48:	; location of vector-ref
   188 00000180 ????????????????        	resq 1
   189                                  free_var_49:	; location of vector-set!
   190 00000188 ????????????????        	resq 1
   191                                  free_var_50:	; location of string-set!
   192 00000190 ????????????????        	resq 1
   193                                  free_var_51:	; location of make-vector
   194 00000198 ????????????????        	resq 1
   195                                  free_var_52:	; location of make-string
   196 000001A0 ????????????????        	resq 1
   197                                  free_var_53:	; location of numerator
   198 000001A8 ????????????????        	resq 1
   199                                  free_var_54:	; location of denominator
   200 000001B0 ????????????????        	resq 1
   201                                  free_var_55:	; location of eq?
   202 000001B8 ????????????????        	resq 1
   203                                  
   204                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   205                                  global main
   206                                  section .text
   207                                  main:
   208 00000000 C8000000                        enter 0, 0
   209                                          
   210                                  	; building closure for null?
   211 00000004 48BF-                   	mov rdi, free_var_0
   211 00000006 [0000000000000000] 
   212 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   212 00000010 [A90B000000000000] 
   213 00000018 E8640B0000              	call bind_primitive
   214                                  
   215                                  	; building closure for pair?
   216 0000001D 48BF-                   	mov rdi, free_var_1
   216 0000001F [0800000000000000] 
   217 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   217 00000029 [DF0B000000000000] 
   218 00000031 E84B0B0000              	call bind_primitive
   219                                  
   220                                  	; building closure for void?
   221 00000036 48BF-                   	mov rdi, free_var_2
   221 00000038 [1000000000000000] 
   222 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   222 00000042 [150C000000000000] 
   223 0000004A E8320B0000              	call bind_primitive
   224                                  
   225                                  	; building closure for char?
   226 0000004F 48BF-                   	mov rdi, free_var_3
   226 00000051 [1800000000000000] 
   227 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   227 0000005B [4B0C000000000000] 
   228 00000063 E8190B0000              	call bind_primitive
   229                                  
   230                                  	; building closure for string?
   231 00000068 48BF-                   	mov rdi, free_var_4
   231 0000006A [2000000000000000] 
   232 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   232 00000074 [810C000000000000] 
   233 0000007C E8000B0000              	call bind_primitive
   234                                  
   235                                  	; building closure for symbol?
   236 00000081 48BF-                   	mov rdi, free_var_5
   236 00000083 [2800000000000000] 
   237 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   237 0000008D [B70C000000000000] 
   238 00000095 E8E70A0000              	call bind_primitive
   239                                  
   240                                  	; building closure for vector?
   241 0000009A 48BF-                   	mov rdi, free_var_6
   241 0000009C [3000000000000000] 
   242 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   242 000000A6 [ED0C000000000000] 
   243 000000AE E8CE0A0000              	call bind_primitive
   244                                  
   245                                  	; building closure for procedure?
   246 000000B3 48BF-                   	mov rdi, free_var_7
   246 000000B5 [3800000000000000] 
   247 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   247 000000BF [230D000000000000] 
   248 000000C7 E8B50A0000              	call bind_primitive
   249                                  
   250                                  	; building closure for real?
   251 000000CC 48BF-                   	mov rdi, free_var_8
   251 000000CE [4000000000000000] 
   252 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   252 000000D8 [590D000000000000] 
   253 000000E0 E89C0A0000              	call bind_primitive
   254                                  
   255                                  	; building closure for rational?
   256 000000E5 48BF-                   	mov rdi, free_var_9
   256 000000E7 [4800000000000000] 
   257 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   257 000000F1 [8F0D000000000000] 
   258 000000F9 E8830A0000              	call bind_primitive
   259                                  
   260                                  	; building closure for boolean?
   261 000000FE 48BF-                   	mov rdi, free_var_10
   261 00000100 [5000000000000000] 
   262 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   262 0000010A [C50D000000000000] 
   263 00000112 E86A0A0000              	call bind_primitive
   264                                  
   265                                  	; building closure for number?
   266 00000117 48BF-                   	mov rdi, free_var_11
   266 00000119 [5800000000000000] 
   267 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   267 00000123 [FD0D000000000000] 
   268 0000012B E8510A0000              	call bind_primitive
   269                                  
   270                                  	; building closure for collection?
   271 00000130 48BF-                   	mov rdi, free_var_12
   271 00000132 [6000000000000000] 
   272 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   272 0000013C [350E000000000000] 
   273 00000144 E8380A0000              	call bind_primitive
   274                                  
   275                                  	; building closure for cons
   276 00000149 48BF-                   	mov rdi, free_var_13
   276 0000014B [6800000000000000] 
   277 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   277 00000155 [6D0E000000000000] 
   278 0000015D E81F0A0000              	call bind_primitive
   279                                  
   280                                  	; building closure for display-sexpr
   281 00000162 48BF-                   	mov rdi, free_var_14
   281 00000164 [7000000000000000] 
   282 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   282 0000016E [A10E000000000000] 
   283 00000176 E8060A0000              	call bind_primitive
   284                                  
   285                                  	; building closure for write-char
   286 0000017B 48BF-                   	mov rdi, free_var_15
   286 0000017D [7800000000000000] 
   287 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   287 00000187 [CB0E000000000000] 
   288 0000018F E8ED090000              	call bind_primitive
   289                                  
   290                                  	; building closure for car
   291 00000194 48BF-                   	mov rdi, free_var_16
   291 00000196 [8000000000000000] 
   292 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   292 000001A0 [190F000000000000] 
   293 000001A8 E8D4090000              	call bind_primitive
   294                                  
   295                                  	; building closure for cdr
   296 000001AD 48BF-                   	mov rdi, free_var_17
   296 000001AF [8800000000000000] 
   297 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   297 000001B9 [410F000000000000] 
   298 000001C1 E8BB090000              	call bind_primitive
   299                                  
   300                                  	; building closure for string-length
   301 000001C6 48BF-                   	mov rdi, free_var_18
   301 000001C8 [9000000000000000] 
   302 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   302 000001D2 [690F000000000000] 
   303 000001DA E8A2090000              	call bind_primitive
   304                                  
   305                                  	; building closure for vector-length
   306 000001DF 48BF-                   	mov rdi, free_var_19
   306 000001E1 [9800000000000000] 
   307 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   307 000001EB [960F000000000000] 
   308 000001F3 E889090000              	call bind_primitive
   309                                  
   310                                  	; building closure for real->integer
   311 000001F8 48BF-                   	mov rdi, free_var_20
   311 000001FA [A000000000000000] 
   312 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   312 00000204 [C30F000000000000] 
   313 0000020C E870090000              	call bind_primitive
   314                                  
   315                                  	; building closure for exit
   316 00000211 48BF-                   	mov rdi, free_var_21
   316 00000213 [A800000000000000] 
   317 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   317 0000021D [F60F000000000000] 
   318 00000225 E857090000              	call bind_primitive
   319                                  
   320                                  	; building closure for integer->real
   321 0000022A 48BF-                   	mov rdi, free_var_22
   321 0000022C [B000000000000000] 
   322 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   322 00000236 [1310000000000000] 
   323 0000023E E83E090000              	call bind_primitive
   324                                  
   325                                  	; building closure for rational->real
   326 00000243 48BF-                   	mov rdi, free_var_23
   326 00000245 [B800000000000000] 
   327 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   327 0000024F [5010000000000000] 
   328 00000257 E825090000              	call bind_primitive
   329                                  
   330                                  	; building closure for char->integer
   331 0000025C 48BF-                   	mov rdi, free_var_24
   331 0000025E [C000000000000000] 
   332 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   332 00000268 [8F10000000000000] 
   333 00000270 E80C090000              	call bind_primitive
   334                                  
   335                                  	; building closure for integer->char
   336 00000275 48BF-                   	mov rdi, free_var_25
   336 00000277 [C800000000000000] 
   337 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   337 00000281 [C410000000000000] 
   338 00000289 E8F3080000              	call bind_primitive
   339                                  
   340                                  	; building closure for trng
   341 0000028E 48BF-                   	mov rdi, free_var_26
   341 00000290 [D000000000000000] 
   342 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   342 0000029A [1E11000000000000] 
   343 000002A2 E8DA080000              	call bind_primitive
   344                                  
   345                                  	; building closure for zero?
   346 000002A7 48BF-                   	mov rdi, free_var_27
   346 000002A9 [D800000000000000] 
   347 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   347 000002B3 [4111000000000000] 
   348 000002BB E8C1080000              	call bind_primitive
   349                                  
   350                                  	; building closure for integer?
   351 000002C0 48BF-                   	mov rdi, free_var_28
   351 000002C2 [E000000000000000] 
   352 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   352 000002CC [9C11000000000000] 
   353 000002D4 E8A8080000              	call bind_primitive
   354                                  
   355                                  	; building closure for __bin-apply
   356 000002D9 48BF-                   	mov rdi, free_var_29
   356 000002DB [E800000000000000] 
   357 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   357 000002E5 [A90B000000000000] 
   358 000002ED E88F080000              	call bind_primitive
   359                                  
   360                                  	; building closure for __bin-add-rr
   361 000002F2 48BF-                   	mov rdi, free_var_30
   361 000002F4 [F000000000000000] 
   362 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   362 000002FE [D911000000000000] 
   363 00000306 E876080000              	call bind_primitive
   364                                  
   365                                  	; building closure for __bin-sub-rr
   366 0000030B 48BF-                   	mov rdi, free_var_31
   366 0000030D [F800000000000000] 
   367 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   367 00000317 [1D12000000000000] 
   368 0000031F E85D080000              	call bind_primitive
   369                                  
   370                                  	; building closure for __bin-mul-rr
   371 00000324 48BF-                   	mov rdi, free_var_32
   371 00000326 [0001000000000000] 
   372 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   372 00000330 [6112000000000000] 
   373 00000338 E844080000              	call bind_primitive
   374                                  
   375                                  	; building closure for __bin-div-rr
   376 0000033D 48BF-                   	mov rdi, free_var_33
   376 0000033F [0801000000000000] 
   377 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   377 00000349 [A512000000000000] 
   378 00000351 E82B080000              	call bind_primitive
   379                                  
   380                                  	; building closure for __bin-add-qq
   381 00000356 48BF-                   	mov rdi, free_var_34
   381 00000358 [1001000000000000] 
   382 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   382 00000362 [F712000000000000] 
   383 0000036A E812080000              	call bind_primitive
   384                                  
   385                                  	; building closure for __bin-sub-qq
   386 0000036F 48BF-                   	mov rdi, free_var_35
   386 00000371 [1801000000000000] 
   387 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   387 0000037B [5F13000000000000] 
   388 00000383 E8F9070000              	call bind_primitive
   389                                  
   390                                  	; building closure for __bin-mul-qq
   391 00000388 48BF-                   	mov rdi, free_var_36
   391 0000038A [2001000000000000] 
   392 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   392 00000394 [C713000000000000] 
   393 0000039C E8E0070000              	call bind_primitive
   394                                  
   395                                  	; building closure for __bin-div-qq
   396 000003A1 48BF-                   	mov rdi, free_var_37
   396 000003A3 [2801000000000000] 
   397 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   397 000003AD [1F14000000000000] 
   398 000003B5 E8C7070000              	call bind_primitive
   399                                  
   400                                  	; building closure for error
   401 000003BA 48BF-                   	mov rdi, free_var_38
   401 000003BC [3001000000000000] 
   402 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   402 000003C6 [ED14000000000000] 
   403 000003CE E8AE070000              	call bind_primitive
   404                                  
   405                                  	; building closure for __bin-less-than-rr
   406 000003D3 48BF-                   	mov rdi, free_var_39
   406 000003D5 [3801000000000000] 
   407 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   407 000003DF [8915000000000000] 
   408 000003E7 E895070000              	call bind_primitive
   409                                  
   410                                  	; building closure for __bin-less-than-qq
   411 000003EC 48BF-                   	mov rdi, free_var_40
   411 000003EE [4001000000000000] 
   412 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   412 000003F8 [E015000000000000] 
   413 00000400 E87C070000              	call bind_primitive
   414                                  
   415                                  	; building closure for __bin-equal-rr
   416 00000405 48BF-                   	mov rdi, free_var_41
   416 00000407 [4801000000000000] 
   417 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   417 00000411 [4316000000000000] 
   418 00000419 E863070000              	call bind_primitive
   419                                  
   420                                  	; building closure for __bin-equal-qq
   421 0000041E 48BF-                   	mov rdi, free_var_42
   421 00000420 [5001000000000000] 
   422 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   422 0000042A [9A16000000000000] 
   423 00000432 E84A070000              	call bind_primitive
   424                                  
   425                                  	; building closure for quotient
   426 00000437 48BF-                   	mov rdi, free_var_43
   426 00000439 [5801000000000000] 
   427 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   427 00000443 [FD16000000000000] 
   428 0000044B E831070000              	call bind_primitive
   429                                  
   430                                  	; building closure for remainder
   431 00000450 48BF-                   	mov rdi, free_var_44
   431 00000452 [6001000000000000] 
   432 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   432 0000045C [6317000000000000] 
   433 00000464 E818070000              	call bind_primitive
   434                                  
   435                                  	; building closure for set-car!
   436 00000469 48BF-                   	mov rdi, free_var_45
   436 0000046B [6801000000000000] 
   437 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   437 00000475 [C917000000000000] 
   438 0000047D E8FF060000              	call bind_primitive
   439                                  
   440                                  	; building closure for set-cdr!
   441 00000482 48BF-                   	mov rdi, free_var_46
   441 00000484 [7001000000000000] 
   442 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   442 0000048E [FF17000000000000] 
   443 00000496 E8E6060000              	call bind_primitive
   444                                  
   445                                  	; building closure for string-ref
   446 0000049B 48BF-                   	mov rdi, free_var_47
   446 0000049D [7801000000000000] 
   447 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   447 000004A7 [3518000000000000] 
   448 000004AF E8CD060000              	call bind_primitive
   449                                  
   450                                  	; building closure for vector-ref
   451 000004B4 48BF-                   	mov rdi, free_var_48
   451 000004B6 [8001000000000000] 
   452 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   452 000004C0 [A018000000000000] 
   453 000004C8 E8B4060000              	call bind_primitive
   454                                  
   455                                  	; building closure for vector-set!
   456 000004CD 48BF-                   	mov rdi, free_var_49
   456 000004CF [8801000000000000] 
   457 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   457 000004D9 [FC18000000000000] 
   458 000004E1 E89B060000              	call bind_primitive
   459                                  
   460                                  	; building closure for string-set!
   461 000004E6 48BF-                   	mov rdi, free_var_50
   461 000004E8 [9001000000000000] 
   462 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   462 000004F2 [6619000000000000] 
   463 000004FA E882060000              	call bind_primitive
   464                                  
   465                                  	; building closure for make-vector
   466 000004FF 48BF-                   	mov rdi, free_var_51
   466 00000501 [9801000000000000] 
   467 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   467 0000050B [DB19000000000000] 
   468 00000513 E869060000              	call bind_primitive
   469                                  
   470                                  	; building closure for make-string
   471 00000518 48BF-                   	mov rdi, free_var_52
   471 0000051A [A001000000000000] 
   472 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   472 00000524 [451A000000000000] 
   473 0000052C E850060000              	call bind_primitive
   474                                  
   475                                  	; building closure for numerator
   476 00000531 48BF-                   	mov rdi, free_var_53
   476 00000533 [A801000000000000] 
   477 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   477 0000053D [B71A000000000000] 
   478 00000545 E837060000              	call bind_primitive
   479                                  
   480                                  	; building closure for denominator
   481 0000054A 48BF-                   	mov rdi, free_var_54
   481 0000054C [B001000000000000] 
   482 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   482 00000556 [E41A000000000000] 
   483 0000055E E81E060000              	call bind_primitive
   484                                  
   485                                  	; building closure for eq?
   486 00000563 48BF-                   	mov rdi, free_var_55
   486 00000565 [B801000000000000] 
   487 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   487 0000056F [111B000000000000] 
   488 00000577 E805060000              	call bind_primitive
   489                                  
   490 0000057C 488D0425[18000000]      	lea rax, [24 + L_constants]
   491                                  
   492 00000584 4889C7                  	mov rdi, rax
   493 00000587 E8C4000000              	call print_sexpr_if_not_void
   494                                  
   495 0000058C 48BF-                           mov rdi, fmt_memory_usage
   495 0000058E [8000000000000000] 
   496 00000596 488B3425[07010000]              mov rsi, qword [top_of_memory]
   497 0000059E 4881EE[C0010000]                sub rsi, memory
   498 000005A5 B800000000                      mov rax, 0
   499 000005AA E8(00000000)                    call printf
   500 000005AF C9                      	leave
   501 000005B0 C3                      	ret
   502                                  
   503                                  L_error_non_closure:
   504 000005B1 488B3C25[00000000]              mov rdi, qword [stderr]
   505 000005B9 48BE-                           mov rsi, fmt_non_closure
   505 000005BB [B700000000000000] 
   506 000005C3 B800000000                      mov rax, 0
   507 000005C8 E8(00000000)                    call fprintf
   508 000005CD 48C7C0FEFFFFFF                  mov rax, -2
   509 000005D4 E8(00000000)                    call exit
   510                                  
   511                                  L_error_improper_list:
   512 000005D9 488B3C25[00000000]      	mov rdi, qword [stderr]
   513 000005E1 48BE-                   	mov rsi, fmt_error_improper_list
   513 000005E3 [DF00000000000000] 
   514 000005EB B800000000              	mov rax, 0
   515 000005F0 E8(00000000)            	call fprintf
   516 000005F5 48C7C0F9FFFFFF          	mov rax, -7
   517 000005FC E8(00000000)            	call exit
   518                                  
   519                                  L_error_incorrect_arity_simple:
   520 00000601 488B3C25[00000000]              mov rdi, qword [stderr]
   521 00000609 48BE-                           mov rsi, fmt_incorrect_arity_simple
   521 0000060B [2100000000000000] 
   522 00000613 EB12                            jmp L_error_incorrect_arity_common
   523                                  L_error_incorrect_arity_opt:
   524 00000615 488B3C25[00000000]              mov rdi, qword [stderr]
   525 0000061D 48BE-                           mov rsi, fmt_incorrect_arity_opt
   525 0000061F [4C00000000000000] 
   526                                  L_error_incorrect_arity_common:
   527 00000627 5A                              pop rdx
   528 00000628 59                              pop rcx
   529 00000629 B800000000                      mov rax, 0
   530 0000062E E8(00000000)                    call fprintf
   531 00000633 48C7C0FAFFFFFF                  mov rax, -6
   532 0000063A E8(00000000)                    call exit
   533                                  
   534                                  section .data
   535                                  fmt_incorrect_arity_simple:
   536 00000021 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   536 0000002A 74656420256C642061-
   536 00000033 7267756D656E74732C-
   536 0000003C 206275742067697665-
   536 00000045 6E20256C640A00     
   537                                  fmt_incorrect_arity_opt:
   538 0000004C 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   538 00000055 746564206174206C65-
   538 0000005E 61737420256C642061-
   538 00000067 7267756D656E74732C-
   538 00000070 206275742067697665-
   538 00000079 6E20256C640A00     
   539                                  fmt_memory_usage:
   540 00000080 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   540 00000089 6420256C6420627974-
   540 00000092 6573206F662064796E-
   540 0000009B 616D6963616C6C792D-
   540 000000A4 616C6C6F6361746564-
   540 000000AD 206D656D6F72790A0A-
   540 000000B6 00                 
   541                                  fmt_non_closure:
   542 000000B7 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   542 000000C0 7074696E6720746F20-
   542 000000C9 6170706C792061206E-
   542 000000D2 6F6E2D636C6F737572-
   542 000000DB 65210A00           
   543                                  fmt_error_improper_list:
   544 000000DF 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   544 000000E8 7267756D656E742069-
   544 000000F1 73206E6F7420612070-
   544 000000FA 726F706572206C6973-
   544 00000103 74210A00           
   545                                  
   546                                  section .bss
   547                                  memory:
   548 000001C0 <res 40000000h>         	resb gbytes(1)
   549                                  
   550                                  section .data
   551                                  top_of_memory:
   552 00000107 [C001000000000000]              dq memory
   553                                  
   554                                  section .text
   555                                  malloc:
   556 0000063F 488B0425[07010000]              mov rax, qword [top_of_memory]
   557 00000647 48013C25[07010000]              add qword [top_of_memory], rdi
   558 0000064F C3                              ret
   559                                          
   560                                  print_sexpr_if_not_void:
   561 00000650 4881FF[00000000]        	cmp rdi, sob_void
   562 00000657 7501                    	jne print_sexpr
   563 00000659 C3                      	ret
   564                                  
   565                                  section .data
   566                                  fmt_void:
   567 0000010F 233C766F69643E00        	db `#<void>\0`
   568                                  fmt_nil:
   569 00000117 282900                  	db `()\0`
   570                                  fmt_boolean_false:
   571 0000011A 236600                  	db `#f\0`
   572                                  fmt_boolean_true:
   573 0000011D 237400                  	db `#t\0`
   574                                  fmt_char_backslash:
   575 00000120 235C5C00                	db `#\\\\\0`
   576                                  fmt_char_dquote:
   577 00000124 235C2200                	db `#\\"\0`
   578                                  fmt_char_simple:
   579 00000128 235C256300              	db `#\\%c\0`
   580                                  fmt_char_null:
   581 0000012D 235C6E756C00            	db `#\\nul\0`
   582                                  fmt_char_bell:
   583 00000133 235C62656C6C00          	db `#\\bell\0`
   584                                  fmt_char_backspace:
   585 0000013A 235C6261636B737061-     	db `#\\backspace\0`
   585 00000143 636500             
   586                                  fmt_char_tab:
   587 00000146 235C74616200            	db `#\\tab\0`
   588                                  fmt_char_newline:
   589 0000014C 235C6E65776C696E65-     	db `#\\newline\0`
   589 00000155 00                 
   590                                  fmt_char_formfeed:
   591 00000156 235C7061676500          	db `#\\page\0`
   592                                  fmt_char_return:
   593 0000015D 235C72657475726E00      	db `#\\return\0`
   594                                  fmt_char_escape:
   595 00000166 235C65736300            	db `#\\esc\0`
   596                                  fmt_char_space:
   597 0000016C 235C737061636500        	db `#\\space\0`
   598                                  fmt_char_hex:
   599 00000174 235C782530325800        	db `#\\x%02X\0`
   600                                  fmt_closure:
   601 0000017C 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   601 00000185 206174203078253038-
   601 0000018E 5820656E763D307825-
   601 00000197 30385820636F64653D-
   601 000001A0 3078253038583E00   
   602                                  fmt_lparen:
   603 000001A8 2800                    	db `(\0`
   604                                  fmt_dotted_pair:
   605 000001AA 202E2000                	db ` . \0`
   606                                  fmt_rparen:
   607 000001AE 2900                    	db `)\0`
   608                                  fmt_space:
   609 000001B0 2000                    	db ` \0`
   610                                  fmt_empty_vector:
   611 000001B2 23282900                	db `#()\0`
   612                                  fmt_vector:
   613 000001B6 232800                  	db `#(\0`
   614                                  fmt_real:
   615 000001B9 256600                  	db `%f\0`
   616                                  fmt_fraction:
   617 000001BC 256C642F256C6400        	db `%ld/%ld\0`
   618                                  fmt_zero:
   619 000001C4 3000                    	db `0\0`
   620                                  fmt_int:
   621 000001C6 256C6400                	db `%ld\0`
   622                                  fmt_unknown_sexpr_error:
   623 000001CA 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   623 000001D3 6F723A20556E6B6E6F-
   623 000001DC 776E2074797065206F-
   623 000001E5 662073657870722028-
   623 000001EE 3078253032582920   
   624 000001F6 617420616464726573-     	db `at address 0x%08X\n\n\0`
   624 000001FF 73203078253038580A-
   624 00000208 0A00               
   625                                  fmt_dquote:
   626 0000020A 2200                    	db `\"\0`
   627                                  fmt_string_char:
   628 0000020C 256300                          db `%c\0`
   629                                  fmt_string_char_7:
   630 0000020F 5C6100                          db `\\a\0`
   631                                  fmt_string_char_8:
   632 00000212 5C6200                          db `\\b\0`
   633                                  fmt_string_char_9:
   634 00000215 5C7400                          db `\\t\0`
   635                                  fmt_string_char_10:
   636 00000218 5C6E00                          db `\\n\0`
   637                                  fmt_string_char_11:
   638 0000021B 5C7600                          db `\\v\0`
   639                                  fmt_string_char_12:
   640 0000021E 5C6600                          db `\\f\0`
   641                                  fmt_string_char_13:
   642 00000221 5C7200                          db `\\r\0`
   643                                  fmt_string_char_34:
   644 00000224 5C2200                          db `\\"\0`
   645                                  fmt_string_char_92:
   646 00000227 5C5C00                          db `\\\\\0`
   647                                  fmt_string_char_hex:
   648 0000022A 5C7825583B00                    db `\\x%X;\0`
   649                                  
   650                                  section .text
   651                                  
   652                                  print_sexpr:
   653                                  	ENTER
    33 0000065A C8000000            <1>  enter 0, 0
    34 0000065E 4883E4F0            <1>  and rsp, ~15
   654 00000662 8A07                    	mov al, byte [rdi]
   655 00000664 3C00                    	cmp al, T_void
   656 00000666 744D                    	je .Lvoid
   657 00000668 3C01                    	cmp al, T_nil
   658 0000066A 7458                    	je .Lnil
   659 0000066C 3C09                    	cmp al, T_boolean_false
   660 0000066E 7463                    	je .Lboolean_false
   661 00000670 3C0A                    	cmp al, T_boolean_true
   662 00000672 746E                    	je .Lboolean_true
   663 00000674 3C02                    	cmp al, T_char
   664 00000676 7479                    	je .Lchar
   665 00000678 3C04                    	cmp al, T_symbol
   666 0000067A 0F84BB010000            	je .Lsymbol
   667 00000680 3C21                    	cmp al, T_pair
   668 00000682 0F84D6010000            	je .Lpair
   669 00000688 3C22                    	cmp al, T_vector
   670 0000068A 0F8478020000            	je .Lvector
   671 00000690 3C05                    	cmp al, T_closure
   672 00000692 0F8489010000            	je .Lclosure
   673 00000698 3C12                    	cmp al, T_real
   674 0000069A 0F84F3020000            	je .Lreal
   675 000006A0 3C11                    	cmp al, T_rational
   676 000006A2 0F8419030000            	je .Lrational
   677 000006A8 3C03                    	cmp al, T_string
   678 000006AA 0F8452030000            	je .Lstring
   679                                  
   680 000006B0 E98A040000              	jmp .Lunknown_sexpr_type
   681                                  
   682                                  .Lvoid:
   683 000006B5 48BF-                   	mov rdi, fmt_void
   683 000006B7 [0F01000000000000] 
   684 000006BF E9AF040000              	jmp .Lemit
   685                                  
   686                                  .Lnil:
   687 000006C4 48BF-                   	mov rdi, fmt_nil
   687 000006C6 [1701000000000000] 
   688 000006CE E9A0040000              	jmp .Lemit
   689                                  
   690                                  .Lboolean_false:
   691 000006D3 48BF-                   	mov rdi, fmt_boolean_false
   691 000006D5 [1A01000000000000] 
   692 000006DD E991040000              	jmp .Lemit
   693                                  
   694                                  .Lboolean_true:
   695 000006E2 48BF-                   	mov rdi, fmt_boolean_true
   695 000006E4 [1D01000000000000] 
   696 000006EC E982040000              	jmp .Lemit
   697                                  
   698                                  .Lchar:
   699 000006F1 8A4701                  	mov al, byte [rdi + 1]
   700 000006F4 3C20                    	cmp al, ' '
   701 000006F6 7E28                    	jle .Lchar_whitespace
   702 000006F8 3C5C                    	cmp al, 92 		; backslash
   703 000006FA 0F847C000000            	je .Lchar_backslash
   704 00000700 3C22                    	cmp al, '"'
   705 00000702 0F8483000000            	je .Lchar_dquote
   706 00000708 4825FF000000            	and rax, 255
   707 0000070E 48BF-                   	mov rdi, fmt_char_simple
   707 00000710 [2801000000000000] 
   708 00000718 4889C6                  	mov rsi, rax
   709 0000071B E953040000              	jmp .Lemit
   710                                  
   711                                  .Lchar_whitespace:
   712 00000720 3C00                    	cmp al, 0
   713 00000722 7476                    	je .Lchar_null
   714 00000724 3C07                    	cmp al, 7
   715 00000726 0F847D000000            	je .Lchar_bell
   716 0000072C 3C08                    	cmp al, 8
   717 0000072E 0F8484000000            	je .Lchar_backspace
   718 00000734 3C09                    	cmp al, 9
   719 00000736 0F848B000000            	je .Lchar_tab
   720 0000073C 3C0A                    	cmp al, 10
   721 0000073E 0F8492000000            	je .Lchar_newline
   722 00000744 3C0C                    	cmp al, 12
   723 00000746 0F8499000000            	je .Lchar_formfeed
   724 0000074C 3C0D                    	cmp al, 13
   725 0000074E 0F84A0000000            	je .Lchar_return
   726 00000754 3C1B                    	cmp al, 27
   727 00000756 0F84A7000000            	je .Lchar_escape
   728 0000075C 4825FF000000            	and rax, 255
   729 00000762 3C20                    	cmp al, ' '
   730 00000764 0F84A8000000            	je .Lchar_space
   731 0000076A 48BF-                   	mov rdi, fmt_char_hex
   731 0000076C [7401000000000000] 
   732 00000774 4889C6                  	mov rsi, rax
   733 00000777 E9F7030000              	jmp .Lemit	
   734                                  
   735                                  .Lchar_backslash:
   736 0000077C 48BF-                   	mov rdi, fmt_char_backslash
   736 0000077E [2001000000000000] 
   737 00000786 E9E8030000              	jmp .Lemit
   738                                  
   739                                  .Lchar_dquote:
   740 0000078B 48BF-                   	mov rdi, fmt_char_dquote
   740 0000078D [2401000000000000] 
   741 00000795 E9D9030000              	jmp .Lemit
   742                                  
   743                                  .Lchar_null:
   744 0000079A 48BF-                   	mov rdi, fmt_char_null
   744 0000079C [2D01000000000000] 
   745 000007A4 E9CA030000              	jmp .Lemit
   746                                  
   747                                  .Lchar_bell:
   748 000007A9 48BF-                   	mov rdi, fmt_char_bell
   748 000007AB [3301000000000000] 
   749 000007B3 E9BB030000              	jmp .Lemit
   750                                  
   751                                  .Lchar_backspace:
   752 000007B8 48BF-                   	mov rdi, fmt_char_backspace
   752 000007BA [3A01000000000000] 
   753 000007C2 E9AC030000              	jmp .Lemit
   754                                  
   755                                  .Lchar_tab:
   756 000007C7 48BF-                   	mov rdi, fmt_char_tab
   756 000007C9 [4601000000000000] 
   757 000007D1 E99D030000              	jmp .Lemit
   758                                  
   759                                  .Lchar_newline:
   760 000007D6 48BF-                   	mov rdi, fmt_char_newline
   760 000007D8 [4C01000000000000] 
   761 000007E0 E98E030000              	jmp .Lemit
   762                                  
   763                                  .Lchar_formfeed:
   764 000007E5 48BF-                   	mov rdi, fmt_char_formfeed
   764 000007E7 [5601000000000000] 
   765 000007EF E97F030000              	jmp .Lemit
   766                                  
   767                                  .Lchar_return:
   768 000007F4 48BF-                   	mov rdi, fmt_char_return
   768 000007F6 [5D01000000000000] 
   769 000007FE E970030000              	jmp .Lemit
   770                                  
   771                                  .Lchar_escape:
   772 00000803 48BF-                   	mov rdi, fmt_char_escape
   772 00000805 [6601000000000000] 
   773 0000080D E961030000              	jmp .Lemit
   774                                  
   775                                  .Lchar_space:
   776 00000812 48BF-                   	mov rdi, fmt_char_space
   776 00000814 [6C01000000000000] 
   777 0000081C E952030000              	jmp .Lemit
   778                                  
   779                                  .Lclosure:
   780 00000821 4889FE                  	mov rsi, qword rdi
   781 00000824 48BF-                   	mov rdi, fmt_closure
   781 00000826 [7C01000000000000] 
   782 0000082E 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   783 00000832 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   784 00000836 E938030000              	jmp .Lemit
   785                                  
   786                                  .Lsymbol:
   787 0000083B 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   788 0000083F BE01000000              	mov rsi, 1		 ; size = 1 byte
   789 00000844 488B5701                	mov rdx, qword [rdi + 1] ; length
   790 00000848 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   791 0000084C 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   792 00000854 E8(00000000)            	call fwrite
   793 00000859 E921030000              	jmp .Lend
   794                                  	
   795                                  .Lpair:
   796 0000085E 57                      	push rdi
   797 0000085F 48BF-                   	mov rdi, fmt_lparen
   797 00000861 [A801000000000000] 
   798 00000869 B800000000              	mov rax, 0
   799                                          ENTER
    33 0000086E C8000000            <1>  enter 0, 0
    34 00000872 4883E4F0            <1>  and rsp, ~15
   800 00000876 E8(00000000)            	call printf
   801                                          LEAVE
    38 0000087B C9                  <1>  leave
   802 0000087C 488B3C24                	mov rdi, qword [rsp] 	; pair
   803 00000880 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   804 00000884 E8D1FDFFFF              	call print_sexpr
   805 00000889 5F                      	pop rdi 		; pair
   806 0000088A 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   807                                  .Lcdr:
   808 0000088E 8A07                    	mov al, byte [rdi]
   809 00000890 3C01                    	cmp al, T_nil
   810 00000892 7435                    	je .Lcdr_nil
   811 00000894 3C21                    	cmp al, T_pair
   812 00000896 7447                    	je .Lcdr_pair
   813 00000898 57                      	push rdi
   814 00000899 48BF-                   	mov rdi, fmt_dotted_pair
   814 0000089B [AA01000000000000] 
   815 000008A3 B800000000              	mov rax, 0
   816 000008A8 E8(00000000)            	call printf
   817 000008AD 5F                      	pop rdi
   818 000008AE E8A7FDFFFF              	call print_sexpr
   819 000008B3 48BF-                   	mov rdi, fmt_rparen
   819 000008B5 [AE01000000000000] 
   820 000008BD B800000000              	mov rax, 0
   821 000008C2 E8(00000000)            	call printf
   822                                  	LEAVE
    38 000008C7 C9                  <1>  leave
   823 000008C8 C3                      	ret
   824                                  
   825                                  .Lcdr_nil:
   826 000008C9 48BF-                   	mov rdi, fmt_rparen
   826 000008CB [AE01000000000000] 
   827 000008D3 B800000000              	mov rax, 0
   828 000008D8 E8(00000000)            	call printf
   829                                  	LEAVE
    38 000008DD C9                  <1>  leave
   830 000008DE C3                      	ret
   831                                  
   832                                  .Lcdr_pair:
   833 000008DF 57                      	push rdi
   834 000008E0 48BF-                   	mov rdi, fmt_space
   834 000008E2 [B001000000000000] 
   835 000008EA B800000000              	mov rax, 0
   836 000008EF E8(00000000)            	call printf
   837 000008F4 488B3C24                	mov rdi, qword [rsp]
   838 000008F8 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   839 000008FC E859FDFFFF              	call print_sexpr
   840 00000901 5F                      	pop rdi
   841 00000902 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   842 00000906 EB86                    	jmp .Lcdr
   843                                  
   844                                  .Lvector:
   845 00000908 488B4701                	mov rax, qword [rdi + 1] ; length
   846 0000090C 4883F800                	cmp rax, 0
   847 00000910 7472                    	je .Lvector_empty
   848 00000912 57                      	push rdi
   849 00000913 48BF-                   	mov rdi, fmt_vector
   849 00000915 [B601000000000000] 
   850 0000091D B800000000              	mov rax, 0
   851 00000922 E8(00000000)            	call printf
   852 00000927 488B3C24                	mov rdi, qword [rsp]
   853 0000092B FF7701                  	push qword [rdi + 1]
   854 0000092E 6A01                    	push 1
   855 00000930 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   856 00000934 E821FDFFFF              	call print_sexpr
   857                                  .Lvector_loop:
   858                                  	; [rsp] index
   859                                  	; [rsp + 8*1] limit
   860                                  	; [rsp + 8*2] vector
   861 00000939 488B0424                	mov rax, qword [rsp]
   862 0000093D 483B442408              	cmp rax, qword [rsp + 8*1]
   863 00000942 742D                    	je .Lvector_end
   864 00000944 48BF-                   	mov rdi, fmt_space
   864 00000946 [B001000000000000] 
   865 0000094E B800000000              	mov rax, 0
   866 00000953 E8(00000000)            	call printf
   867 00000958 488B0424                	mov rax, qword [rsp]
   868 0000095C 488B5C2410              	mov rbx, qword [rsp + 8*2]
   869 00000961 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   870 00000966 E8EFFCFFFF              	call print_sexpr
   871 0000096B 48FF0424                	inc qword [rsp]
   872 0000096F EBC8                    	jmp .Lvector_loop
   873                                  
   874                                  .Lvector_end:
   875 00000971 4883C418                	add rsp, 8*3
   876 00000975 48BF-                   	mov rdi, fmt_rparen
   876 00000977 [AE01000000000000] 
   877 0000097F E9EF010000              	jmp .Lemit	
   878                                  
   879                                  .Lvector_empty:
   880 00000984 48BF-                   	mov rdi, fmt_empty_vector
   880 00000986 [B201000000000000] 
   881 0000098E E9E0010000              	jmp .Lemit
   882                                  
   883                                  .Lreal:
   884 00000993 FF7701                  	push qword [rdi + 1]
   885 00000996 F20F100424              	movsd xmm0, qword [rsp]
   886 0000099B 4883C408                	add rsp, 8*1
   887 0000099F 48BF-                   	mov rdi, fmt_real
   887 000009A1 [B901000000000000] 
   888 000009A9 B801000000              	mov rax, 1
   889                                  	ENTER
    33 000009AE C8000000            <1>  enter 0, 0
    34 000009B2 4883E4F0            <1>  and rsp, ~15
   890 000009B6 E8(00000000)            	call printf
   891                                  	LEAVE
    38 000009BB C9                  <1>  leave
   892 000009BC E9BE010000              	jmp .Lend
   893                                  
   894                                  .Lrational:
   895 000009C1 488B7701                	mov rsi, qword [rdi + 1]
   896 000009C5 488B5709                	mov rdx, qword [rdi + 1 + 8]
   897 000009C9 4883FE00                	cmp rsi, 0
   898 000009CD 7415                    	je .Lrat_zero
   899 000009CF 4883FA01                	cmp rdx, 1
   900 000009D3 741E                    	je .Lrat_int
   901 000009D5 48BF-                   	mov rdi, fmt_fraction
   901 000009D7 [BC01000000000000] 
   902 000009DF E98F010000              	jmp .Lemit
   903                                  
   904                                  .Lrat_zero:
   905 000009E4 48BF-                   	mov rdi, fmt_zero
   905 000009E6 [C401000000000000] 
   906 000009EE E980010000              	jmp .Lemit
   907                                  
   908                                  .Lrat_int:
   909 000009F3 48BF-                   	mov rdi, fmt_int
   909 000009F5 [C601000000000000] 
   910 000009FD E971010000              	jmp .Lemit
   911                                  
   912                                  .Lstring:
   913 00000A02 488D4709                	lea rax, [rdi + 1 + 8]
   914 00000A06 50                      	push rax
   915 00000A07 FF7701                  	push qword [rdi + 1]
   916 00000A0A 48BF-                   	mov rdi, fmt_dquote
   916 00000A0C [0A02000000000000] 
   917 00000A14 B800000000              	mov rax, 0
   918                                  	ENTER
    33 00000A19 C8000000            <1>  enter 0, 0
    34 00000A1D 4883E4F0            <1>  and rsp, ~15
   919 00000A21 E8(00000000)            	call printf
   920                                  	LEAVE
    38 00000A26 C9                  <1>  leave
   921                                  .Lstring_loop:
   922                                  	; qword [rsp]: limit
   923                                  	; qword [rsp + 8*1]: char *
   924 00000A27 48833C2400              	cmp qword [rsp], 0
   925 00000A2C 0F84FD000000            	je .Lstring_end
   926 00000A32 488B442408              	mov rax, qword [rsp + 8*1]
   927 00000A37 8A00                    	mov al, byte [rax]
   928 00000A39 4825FF000000            	and rax, 255
   929 00000A3F 3C07                    	cmp al, 7
   930 00000A41 7468                            je .Lstring_char_7
   931 00000A43 3C08                            cmp al, 8
   932 00000A45 7470                            je .Lstring_char_8
   933 00000A47 3C09                            cmp al, 9
   934 00000A49 7478                            je .Lstring_char_9
   935 00000A4B 3C0A                            cmp al, 10
   936 00000A4D 0F847C000000                    je .Lstring_char_10
   937 00000A53 3C0B                            cmp al, 11
   938 00000A55 0F8480000000                    je .Lstring_char_11
   939 00000A5B 3C0C                            cmp al, 12
   940 00000A5D 0F8484000000                    je .Lstring_char_12
   941 00000A63 3C0D                            cmp al, 13
   942 00000A65 0F8488000000                    je .Lstring_char_13
   943 00000A6B 3C22                            cmp al, 34
   944 00000A6D 0F848C000000                    je .Lstring_char_34
   945 00000A73 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   947 00000A75 3C20                            cmp al, ' '
   948 00000A77 0F8CA0000000                    jl .Lstring_char_hex
   949 00000A7D 48BF-                           mov rdi, fmt_string_char
   949 00000A7F [0C02000000000000] 
   950 00000A87 4889C6                          mov rsi, rax
   951                                  .Lstring_char_emit:
   952 00000A8A B800000000                      mov rax, 0
   953                                          ENTER
    33 00000A8F C8000000            <1>  enter 0, 0
    34 00000A93 4883E4F0            <1>  and rsp, ~15
   954 00000A97 E8(00000000)                    call printf
   955                                          LEAVE
    38 00000A9C C9                  <1>  leave
   956 00000A9D 48FF0C24                        dec qword [rsp]
   957 00000AA1 48FF442408                      inc qword [rsp + 8*1]
   958 00000AA6 E97CFFFFFF                      jmp .Lstring_loop
   959                                  
   960                                  .Lstring_char_7:
   961 00000AAB 48BF-                           mov rdi, fmt_string_char_7
   961 00000AAD [0F02000000000000] 
   962 00000AB5 EBD3                            jmp .Lstring_char_emit
   963                                  
   964                                  .Lstring_char_8:
   965 00000AB7 48BF-                           mov rdi, fmt_string_char_8
   965 00000AB9 [1202000000000000] 
   966 00000AC1 EBC7                            jmp .Lstring_char_emit
   967                                          
   968                                  .Lstring_char_9:
   969 00000AC3 48BF-                           mov rdi, fmt_string_char_9
   969 00000AC5 [1502000000000000] 
   970 00000ACD EBBB                            jmp .Lstring_char_emit
   971                                  
   972                                  .Lstring_char_10:
   973 00000ACF 48BF-                           mov rdi, fmt_string_char_10
   973 00000AD1 [1802000000000000] 
   974 00000AD9 EBAF                            jmp .Lstring_char_emit
   975                                  
   976                                  .Lstring_char_11:
   977 00000ADB 48BF-                           mov rdi, fmt_string_char_11
   977 00000ADD [1B02000000000000] 
   978 00000AE5 EBA3                            jmp .Lstring_char_emit
   979                                  
   980                                  .Lstring_char_12:
   981 00000AE7 48BF-                           mov rdi, fmt_string_char_12
   981 00000AE9 [1E02000000000000] 
   982 00000AF1 EB97                            jmp .Lstring_char_emit
   983                                  
   984                                  .Lstring_char_13:
   985 00000AF3 48BF-                           mov rdi, fmt_string_char_13
   985 00000AF5 [2102000000000000] 
   986 00000AFD EB8B                            jmp .Lstring_char_emit
   987                                  
   988                                  .Lstring_char_34:
   989 00000AFF 48BF-                           mov rdi, fmt_string_char_34
   989 00000B01 [2402000000000000] 
   990 00000B09 E97CFFFFFF                      jmp .Lstring_char_emit
   991                                  
   992                                  .Lstring_char_92:
   993 00000B0E 48BF-                           mov rdi, fmt_string_char_92
   993 00000B10 [2702000000000000] 
   994 00000B18 E96DFFFFFF                      jmp .Lstring_char_emit
   995                                  
   996                                  .Lstring_char_hex:
   997 00000B1D 48BF-                           mov rdi, fmt_string_char_hex
   997 00000B1F [2A02000000000000] 
   998 00000B27 4889C6                          mov rsi, rax
   999 00000B2A E95BFFFFFF                      jmp .Lstring_char_emit        
  1000                                  
  1001                                  .Lstring_end:
  1002 00000B2F 4883C410                	add rsp, 8 * 2
  1003 00000B33 48BF-                   	mov rdi, fmt_dquote
  1003 00000B35 [0A02000000000000] 
  1004 00000B3D EB34                    	jmp .Lemit
  1005                                  
  1006                                  .Lunknown_sexpr_type:
  1007 00000B3F 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1007 00000B41 [CA01000000000000] 
  1008 00000B49 4825FF000000            	and rax, 255
  1009 00000B4F 4889C2                  	mov rdx, rax
  1010 00000B52 4889F9                  	mov rcx, rdi
  1011 00000B55 488B3C25[00000000]      	mov rdi, qword [stderr]
  1012 00000B5D B800000000              	mov rax, 0
  1013 00000B62 E8(00000000)            	call fprintf
  1014 00000B67 48C7C0FFFFFFFF          	mov rax, -1
  1015 00000B6E E8(00000000)            	call exit
  1016                                  
  1017                                  .Lemit:
  1018 00000B73 B800000000              	mov rax, 0
  1019 00000B78 E8(00000000)            	call printf
  1020 00000B7D EB00                    	jmp .Lend
  1021                                  
  1022                                  .Lend:
  1023                                  	LEAVE
    38 00000B7F C9                  <1>  leave
  1024 00000B80 C3                      	ret
  1025                                  
  1026                                  ;;; rdi: address of free variable
  1027                                  ;;; rsi: address of code-pointer
  1028                                  bind_primitive:
  1029                                          ENTER
    33 00000B81 C8000000            <1>  enter 0, 0
    34 00000B85 4883E4F0            <1>  and rsp, ~15
  1030 00000B89 57                              push rdi
  1031 00000B8A BF11000000                      mov rdi, (1 + 8 + 8)
  1032 00000B8F E8ABFAFFFF                      call malloc
  1033 00000B94 5F                              pop rdi
  1034 00000B95 C60005                          mov byte [rax], T_closure
  1035 00000B98 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1036 00000BA0 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1037 00000BA4 488907                          mov qword [rdi], rax
  1038                                          LEAVE
    38 00000BA7 C9                  <1>  leave
  1039 00000BA8 C3                              ret
  1040                                  
  1041                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1042                                  L_code_ptr_bin_apply:
  1043                                  	
  1044                                  L_code_ptr_is_null:
  1045                                          ENTER
    33 00000BA9 C8000000            <1>  enter 0, 0
    34 00000BAD 4883E4F0            <1>  and rsp, ~15
  1046 00000BB1 48837D1801                      cmp COUNT, 1
  1047 00000BB6 0F856F100000                    jne L_error_arg_count_1
  1048 00000BBC 488B4520                        mov rax, PARAM(0)
  1049 00000BC0 803801                          cmp byte [rax], T_nil
  1050 00000BC3 750C                            jne .L_false
  1051 00000BC5 48B8-                           mov rax, sob_boolean_true
  1051 00000BC7 [0300000000000000] 
  1052 00000BCF EB0A                            jmp .L_end
  1053                                  .L_false:
  1054 00000BD1 48B8-                           mov rax, sob_boolean_false
  1054 00000BD3 [0200000000000000] 
  1055                                  .L_end:
  1056                                          LEAVE
    38 00000BDB C9                  <1>  leave
  1057 00000BDC C21800                          ret AND_KILL_FRAME(1)
  1058                                  
  1059                                  L_code_ptr_is_pair:
  1060                                          ENTER
    33 00000BDF C8000000            <1>  enter 0, 0
    34 00000BE3 4883E4F0            <1>  and rsp, ~15
  1061 00000BE7 48837D1801                      cmp COUNT, 1
  1062 00000BEC 0F8539100000                    jne L_error_arg_count_1
  1063 00000BF2 488B4520                        mov rax, PARAM(0)
  1064 00000BF6 803821                          cmp byte [rax], T_pair
  1065 00000BF9 750C                            jne .L_false
  1066 00000BFB 48B8-                           mov rax, sob_boolean_true
  1066 00000BFD [0300000000000000] 
  1067 00000C05 EB0A                            jmp .L_end
  1068                                  .L_false:
  1069 00000C07 48B8-                           mov rax, sob_boolean_false
  1069 00000C09 [0200000000000000] 
  1070                                  .L_end:
  1071                                          LEAVE
    38 00000C11 C9                  <1>  leave
  1072 00000C12 C21800                          ret AND_KILL_FRAME(1)
  1073                                          
  1074                                  L_code_ptr_is_void:
  1075                                          ENTER
    33 00000C15 C8000000            <1>  enter 0, 0
    34 00000C19 4883E4F0            <1>  and rsp, ~15
  1076 00000C1D 48837D1801                      cmp COUNT, 1
  1077 00000C22 0F8503100000                    jne L_error_arg_count_1
  1078 00000C28 488B4520                        mov rax, PARAM(0)
  1079 00000C2C 803800                          cmp byte [rax], T_void
  1080 00000C2F 750C                            jne .L_false
  1081 00000C31 48B8-                           mov rax, sob_boolean_true
  1081 00000C33 [0300000000000000] 
  1082 00000C3B EB0A                            jmp .L_end
  1083                                  .L_false:
  1084 00000C3D 48B8-                           mov rax, sob_boolean_false
  1084 00000C3F [0200000000000000] 
  1085                                  .L_end:
  1086                                          LEAVE
    38 00000C47 C9                  <1>  leave
  1087 00000C48 C21800                          ret AND_KILL_FRAME(1)
  1088                                  
  1089                                  L_code_ptr_is_char:
  1090                                          ENTER
    33 00000C4B C8000000            <1>  enter 0, 0
    34 00000C4F 4883E4F0            <1>  and rsp, ~15
  1091 00000C53 48837D1801                      cmp COUNT, 1
  1092 00000C58 0F85CD0F0000                    jne L_error_arg_count_1
  1093 00000C5E 488B4520                        mov rax, PARAM(0)
  1094 00000C62 803802                          cmp byte [rax], T_char
  1095 00000C65 750C                            jne .L_false
  1096 00000C67 48B8-                           mov rax, sob_boolean_true
  1096 00000C69 [0300000000000000] 
  1097 00000C71 EB0A                            jmp .L_end
  1098                                  .L_false:
  1099 00000C73 48B8-                           mov rax, sob_boolean_false
  1099 00000C75 [0200000000000000] 
  1100                                  .L_end:
  1101                                          LEAVE
    38 00000C7D C9                  <1>  leave
  1102 00000C7E C21800                          ret AND_KILL_FRAME(1)
  1103                                  
  1104                                  L_code_ptr_is_string:
  1105                                          ENTER
    33 00000C81 C8000000            <1>  enter 0, 0
    34 00000C85 4883E4F0            <1>  and rsp, ~15
  1106 00000C89 48837D1801                      cmp COUNT, 1
  1107 00000C8E 0F85970F0000                    jne L_error_arg_count_1
  1108 00000C94 488B4520                        mov rax, PARAM(0)
  1109 00000C98 803803                          cmp byte [rax], T_string
  1110 00000C9B 750C                            jne .L_false
  1111 00000C9D 48B8-                           mov rax, sob_boolean_true
  1111 00000C9F [0300000000000000] 
  1112 00000CA7 EB0A                            jmp .L_end
  1113                                  .L_false:
  1114 00000CA9 48B8-                           mov rax, sob_boolean_false
  1114 00000CAB [0200000000000000] 
  1115                                  .L_end:
  1116                                          LEAVE
    38 00000CB3 C9                  <1>  leave
  1117 00000CB4 C21800                          ret AND_KILL_FRAME(1)
  1118                                  
  1119                                  L_code_ptr_is_symbol:
  1120                                          ENTER
    33 00000CB7 C8000000            <1>  enter 0, 0
    34 00000CBB 4883E4F0            <1>  and rsp, ~15
  1121 00000CBF 48837D1801                      cmp COUNT, 1
  1122 00000CC4 0F85610F0000                    jne L_error_arg_count_1
  1123 00000CCA 488B4520                        mov rax, PARAM(0)
  1124 00000CCE 803804                          cmp byte [rax], T_symbol
  1125 00000CD1 750C                            jne .L_false
  1126 00000CD3 48B8-                           mov rax, sob_boolean_true
  1126 00000CD5 [0300000000000000] 
  1127 00000CDD EB0A                            jmp .L_end
  1128                                  .L_false:
  1129 00000CDF 48B8-                           mov rax, sob_boolean_false
  1129 00000CE1 [0200000000000000] 
  1130                                  .L_end:
  1131                                          LEAVE
    38 00000CE9 C9                  <1>  leave
  1132 00000CEA C21800                          ret AND_KILL_FRAME(1)
  1133                                  
  1134                                  L_code_ptr_is_vector:
  1135                                          ENTER
    33 00000CED C8000000            <1>  enter 0, 0
    34 00000CF1 4883E4F0            <1>  and rsp, ~15
  1136 00000CF5 48837D1801                      cmp COUNT, 1
  1137 00000CFA 0F852B0F0000                    jne L_error_arg_count_1
  1138 00000D00 488B4520                        mov rax, PARAM(0)
  1139 00000D04 803822                          cmp byte [rax], T_vector
  1140 00000D07 750C                            jne .L_false
  1141 00000D09 48B8-                           mov rax, sob_boolean_true
  1141 00000D0B [0300000000000000] 
  1142 00000D13 EB0A                            jmp .L_end
  1143                                  .L_false:
  1144 00000D15 48B8-                           mov rax, sob_boolean_false
  1144 00000D17 [0200000000000000] 
  1145                                  .L_end:
  1146                                          LEAVE
    38 00000D1F C9                  <1>  leave
  1147 00000D20 C21800                          ret AND_KILL_FRAME(1)
  1148                                  
  1149                                  L_code_ptr_is_closure:
  1150                                          ENTER
    33 00000D23 C8000000            <1>  enter 0, 0
    34 00000D27 4883E4F0            <1>  and rsp, ~15
  1151 00000D2B 48837D1801                      cmp COUNT, 1
  1152 00000D30 0F85F50E0000                    jne L_error_arg_count_1
  1153 00000D36 488B4520                        mov rax, PARAM(0)
  1154 00000D3A 803805                          cmp byte [rax], T_closure
  1155 00000D3D 750C                            jne .L_false
  1156 00000D3F 48B8-                           mov rax, sob_boolean_true
  1156 00000D41 [0300000000000000] 
  1157 00000D49 EB0A                            jmp .L_end
  1158                                  .L_false:
  1159 00000D4B 48B8-                           mov rax, sob_boolean_false
  1159 00000D4D [0200000000000000] 
  1160                                  .L_end:
  1161                                          LEAVE
    38 00000D55 C9                  <1>  leave
  1162 00000D56 C21800                          ret AND_KILL_FRAME(1)
  1163                                  
  1164                                  L_code_ptr_is_real:
  1165                                          ENTER
    33 00000D59 C8000000            <1>  enter 0, 0
    34 00000D5D 4883E4F0            <1>  and rsp, ~15
  1166 00000D61 48837D1801                      cmp COUNT, 1
  1167 00000D66 0F85BF0E0000                    jne L_error_arg_count_1
  1168 00000D6C 488B4520                        mov rax, PARAM(0)
  1169 00000D70 803812                          cmp byte [rax], T_real
  1170 00000D73 750C                            jne .L_false
  1171 00000D75 48B8-                           mov rax, sob_boolean_true
  1171 00000D77 [0300000000000000] 
  1172 00000D7F EB0A                            jmp .L_end
  1173                                  .L_false:
  1174 00000D81 48B8-                           mov rax, sob_boolean_false
  1174 00000D83 [0200000000000000] 
  1175                                  .L_end:
  1176                                          LEAVE
    38 00000D8B C9                  <1>  leave
  1177 00000D8C C21800                          ret AND_KILL_FRAME(1)
  1178                                  
  1179                                  L_code_ptr_is_rational:
  1180                                          ENTER
    33 00000D8F C8000000            <1>  enter 0, 0
    34 00000D93 4883E4F0            <1>  and rsp, ~15
  1181 00000D97 48837D1801                      cmp COUNT, 1
  1182 00000D9C 0F85890E0000                    jne L_error_arg_count_1
  1183 00000DA2 488B4520                        mov rax, PARAM(0)
  1184 00000DA6 803811                          cmp byte [rax], T_rational
  1185 00000DA9 750C                            jne .L_false
  1186 00000DAB 48B8-                           mov rax, sob_boolean_true
  1186 00000DAD [0300000000000000] 
  1187 00000DB5 EB0A                            jmp .L_end
  1188                                  .L_false:
  1189 00000DB7 48B8-                           mov rax, sob_boolean_false
  1189 00000DB9 [0200000000000000] 
  1190                                  .L_end:
  1191                                          LEAVE
    38 00000DC1 C9                  <1>  leave
  1192 00000DC2 C21800                          ret AND_KILL_FRAME(1)
  1193                                  
  1194                                  L_code_ptr_is_boolean:
  1195                                          ENTER
    33 00000DC5 C8000000            <1>  enter 0, 0
    34 00000DC9 4883E4F0            <1>  and rsp, ~15
  1196 00000DCD 48837D1801                      cmp COUNT, 1
  1197 00000DD2 0F85530E0000                    jne L_error_arg_count_1
  1198 00000DD8 488B4520                        mov rax, PARAM(0)
  1199 00000DDC 8A18                            mov bl, byte [rax]
  1200 00000DDE 80E308                          and bl, T_boolean
  1201 00000DE1 740C                            je .L_false
  1202 00000DE3 48B8-                           mov rax, sob_boolean_true
  1202 00000DE5 [0300000000000000] 
  1203 00000DED EB0A                            jmp .L_end
  1204                                  .L_false:
  1205 00000DEF 48B8-                           mov rax, sob_boolean_false
  1205 00000DF1 [0200000000000000] 
  1206                                  .L_end:
  1207                                          LEAVE
    38 00000DF9 C9                  <1>  leave
  1208 00000DFA C21800                          ret AND_KILL_FRAME(1)
  1209                                          
  1210                                  L_code_ptr_is_number:
  1211                                          ENTER
    33 00000DFD C8000000            <1>  enter 0, 0
    34 00000E01 4883E4F0            <1>  and rsp, ~15
  1212 00000E05 48837D1801                      cmp COUNT, 1
  1213 00000E0A 0F851B0E0000                    jne L_error_arg_count_1
  1214 00000E10 488B4520                        mov rax, PARAM(0)
  1215 00000E14 8A18                            mov bl, byte [rax]
  1216 00000E16 80E310                          and bl, T_number
  1217 00000E19 740C                            je .L_false
  1218 00000E1B 48B8-                           mov rax, sob_boolean_true
  1218 00000E1D [0300000000000000] 
  1219 00000E25 EB0A                            jmp .L_end
  1220                                  .L_false:
  1221 00000E27 48B8-                           mov rax, sob_boolean_false
  1221 00000E29 [0200000000000000] 
  1222                                  .L_end:
  1223                                          LEAVE
    38 00000E31 C9                  <1>  leave
  1224 00000E32 C21800                          ret AND_KILL_FRAME(1)
  1225                                          
  1226                                  L_code_ptr_is_collection:
  1227                                          ENTER
    33 00000E35 C8000000            <1>  enter 0, 0
    34 00000E39 4883E4F0            <1>  and rsp, ~15
  1228 00000E3D 48837D1801                      cmp COUNT, 1
  1229 00000E42 0F85E30D0000                    jne L_error_arg_count_1
  1230 00000E48 488B4520                        mov rax, PARAM(0)
  1231 00000E4C 8A18                            mov bl, byte [rax]
  1232 00000E4E 80E320                          and bl, T_collection
  1233 00000E51 740C                            je .L_false
  1234 00000E53 48B8-                           mov rax, sob_boolean_true
  1234 00000E55 [0300000000000000] 
  1235 00000E5D EB0A                            jmp .L_end
  1236                                  .L_false:
  1237 00000E5F 48B8-                           mov rax, sob_boolean_false
  1237 00000E61 [0200000000000000] 
  1238                                  .L_end:
  1239                                          LEAVE
    38 00000E69 C9                  <1>  leave
  1240 00000E6A C21800                          ret AND_KILL_FRAME(1)
  1241                                  
  1242                                  L_code_ptr_cons:
  1243                                          ENTER
    33 00000E6D C8000000            <1>  enter 0, 0
    34 00000E71 4883E4F0            <1>  and rsp, ~15
  1244 00000E75 48837D1802                      cmp COUNT, 2
  1245 00000E7A 0F85D70D0000                    jne L_error_arg_count_2
  1246 00000E80 BF11000000                      mov rdi, (1 + 8 + 8)
  1247 00000E85 E8B5F7FFFF                      call malloc
  1248 00000E8A C60021                          mov byte [rax], T_pair
  1249 00000E8D 488B5D20                        mov rbx, PARAM(0)
  1250 00000E91 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1251 00000E95 488B5D28                        mov rbx, PARAM(1)
  1252 00000E99 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1253                                          LEAVE
    38 00000E9D C9                  <1>  leave
  1254 00000E9E C22000                          ret AND_KILL_FRAME(2)
  1255                                  
  1256                                  L_code_ptr_display_sexpr:
  1257                                          ENTER
    33 00000EA1 C8000000            <1>  enter 0, 0
    34 00000EA5 4883E4F0            <1>  and rsp, ~15
  1258 00000EA9 48837D1801                      cmp COUNT, 1
  1259 00000EAE 0F85770D0000                    jne L_error_arg_count_1
  1260 00000EB4 488B7D20                        mov rdi, PARAM(0)
  1261 00000EB8 E89DF7FFFF                      call print_sexpr
  1262 00000EBD 48B8-                           mov rax, sob_void
  1262 00000EBF [0000000000000000] 
  1263                                          LEAVE
    38 00000EC7 C9                  <1>  leave
  1264 00000EC8 C21800                          ret AND_KILL_FRAME(1)
  1265                                  
  1266                                  L_code_ptr_write_char:
  1267                                          ENTER
    33 00000ECB C8000000            <1>  enter 0, 0
    34 00000ECF 4883E4F0            <1>  and rsp, ~15
  1268 00000ED3 48837D1801                      cmp COUNT, 1
  1269 00000ED8 0F854D0D0000                    jne L_error_arg_count_1
  1270 00000EDE 488B4520                        mov rax, PARAM(0)
  1271                                          assert_char(rax)
    42 00000EE2 803802              <1>  cmp byte [%1], %2
    43 00000EE5 0F85F00D0000        <1>  jne L_error_incorrect_type
  1272 00000EEB 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1273 00000EEE 4825FF000000                    and rax, 255
  1274 00000EF4 48BF-                           mov rdi, fmt_char
  1274 00000EF6 [3002000000000000] 
  1275 00000EFE 4889C6                          mov rsi, rax
  1276 00000F01 B800000000                      mov rax, 0
  1277 00000F06 E8(00000000)                    call printf
  1278 00000F0B 48B8-                           mov rax, sob_void
  1278 00000F0D [0000000000000000] 
  1279                                          LEAVE
    38 00000F15 C9                  <1>  leave
  1280 00000F16 C21800                          ret AND_KILL_FRAME(1)
  1281                                  
  1282                                  L_code_ptr_car:
  1283                                          ENTER
    33 00000F19 C8000000            <1>  enter 0, 0
    34 00000F1D 4883E4F0            <1>  and rsp, ~15
  1284 00000F21 48837D1801                      cmp COUNT, 1
  1285 00000F26 0F85FF0C0000                    jne L_error_arg_count_1
  1286 00000F2C 488B4520                        mov rax, PARAM(0)
  1287                                          assert_pair(rax)
    42 00000F30 803821              <1>  cmp byte [%1], %2
    43 00000F33 0F85A20D0000        <1>  jne L_error_incorrect_type
  1288 00000F39 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1289                                          LEAVE
    38 00000F3D C9                  <1>  leave
  1290 00000F3E C21800                          ret AND_KILL_FRAME(1)
  1291                                          
  1292                                  L_code_ptr_cdr:
  1293                                          ENTER
    33 00000F41 C8000000            <1>  enter 0, 0
    34 00000F45 4883E4F0            <1>  and rsp, ~15
  1294 00000F49 48837D1801                      cmp COUNT, 1
  1295 00000F4E 0F85D70C0000                    jne L_error_arg_count_1
  1296 00000F54 488B4520                        mov rax, PARAM(0)
  1297                                          assert_pair(rax)
    42 00000F58 803821              <1>  cmp byte [%1], %2
    43 00000F5B 0F857A0D0000        <1>  jne L_error_incorrect_type
  1298 00000F61 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1299                                          LEAVE
    38 00000F65 C9                  <1>  leave
  1300 00000F66 C21800                          ret AND_KILL_FRAME(1)
  1301                                          
  1302                                  L_code_ptr_string_length:
  1303                                          ENTER
    33 00000F69 C8000000            <1>  enter 0, 0
    34 00000F6D 4883E4F0            <1>  and rsp, ~15
  1304 00000F71 48837D1801                      cmp COUNT, 1
  1305 00000F76 0F85AF0C0000                    jne L_error_arg_count_1
  1306 00000F7C 488B4520                        mov rax, PARAM(0)
  1307                                          assert_string(rax)
    42 00000F80 803803              <1>  cmp byte [%1], %2
    43 00000F83 0F85520D0000        <1>  jne L_error_incorrect_type
  1308 00000F89 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1309 00000F8D E81F0C0000                      call make_integer
  1310                                          LEAVE
    38 00000F92 C9                  <1>  leave
  1311 00000F93 C21800                          ret AND_KILL_FRAME(1)
  1312                                  
  1313                                  L_code_ptr_vector_length:
  1314                                          ENTER
    33 00000F96 C8000000            <1>  enter 0, 0
    34 00000F9A 4883E4F0            <1>  and rsp, ~15
  1315 00000F9E 48837D1801                      cmp COUNT, 1
  1316 00000FA3 0F85820C0000                    jne L_error_arg_count_1
  1317 00000FA9 488B4520                        mov rax, PARAM(0)
  1318                                          assert_vector(rax)
    42 00000FAD 803822              <1>  cmp byte [%1], %2
    43 00000FB0 0F85250D0000        <1>  jne L_error_incorrect_type
  1319 00000FB6 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1320 00000FBA E8F20B0000                      call make_integer
  1321                                          LEAVE
    38 00000FBF C9                  <1>  leave
  1322 00000FC0 C21800                          ret AND_KILL_FRAME(1)
  1323                                  
  1324                                  L_code_ptr_real_to_integer:
  1325                                          ENTER
    33 00000FC3 C8000000            <1>  enter 0, 0
    34 00000FC7 4883E4F0            <1>  and rsp, ~15
  1326 00000FCB 48837D1801                      cmp COUNT, 1
  1327 00000FD0 0F85550C0000                    jne L_error_arg_count_1
  1328 00000FD6 488B5D20                        mov rbx, PARAM(0)
  1329                                          assert_real(rbx)
    42 00000FDA 803B12              <1>  cmp byte [%1], %2
    43 00000FDD 0F85F80C0000        <1>  jne L_error_incorrect_type
  1330 00000FE3 F20F104301                      movsd xmm0, qword [rbx + 1]
  1331 00000FE8 F2480F2CF8                      cvttsd2si rdi, xmm0
  1332 00000FED E8BF0B0000                      call make_integer
  1333                                          LEAVE
    38 00000FF2 C9                  <1>  leave
  1334 00000FF3 C21800                          ret AND_KILL_FRAME(1)
  1335                                  
  1336                                  L_code_ptr_exit:
  1337                                          ENTER
    33 00000FF6 C8000000            <1>  enter 0, 0
    34 00000FFA 4883E4F0            <1>  and rsp, ~15
  1338 00000FFE 48837D1800                      cmp COUNT, 0
  1339 00001003 0F85F60B0000                    jne L_error_arg_count_0
  1340 00001009 B800000000                      mov rax, 0
  1341 0000100E E8(00000000)                    call exit
  1342                                  
  1343                                  L_code_ptr_integer_to_real:
  1344                                          ENTER
    33 00001013 C8000000            <1>  enter 0, 0
    34 00001017 4883E4F0            <1>  and rsp, ~15
  1345 0000101B 48837D1801                      cmp COUNT, 1
  1346 00001020 0F85050C0000                    jne L_error_arg_count_1
  1347 00001026 488B4520                        mov rax, PARAM(0)
  1348                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0000102A 803811              <2>  cmp byte [%1], %2
    43 0000102D 0F85A80C0000        <2>  jne L_error_incorrect_type
    48 00001033 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001038 0F859D0C0000        <1>  jne L_error_incorrect_type
  1349 0000103E FF7001                          push qword [rax + 1]
  1350 00001041 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1351 00001047 E8490B0000                      call make_real
  1352                                          LEAVE
    38 0000104C C9                  <1>  leave
  1353 0000104D C21800                          ret AND_KILL_FRAME(1)
  1354                                  
  1355                                  L_code_ptr_rational_to_real:
  1356                                          ENTER
    33 00001050 C8000000            <1>  enter 0, 0
    34 00001054 4883E4F0            <1>  and rsp, ~15
  1357 00001058 48837D1801                      cmp COUNT, 1
  1358 0000105D 0F85C80B0000                    jne L_error_arg_count_1
  1359 00001063 488B4520                        mov rax, PARAM(0)
  1360                                          assert_rational(rax)
    42 00001067 803811              <1>  cmp byte [%1], %2
    43 0000106A 0F856B0C0000        <1>  jne L_error_incorrect_type
  1361 00001070 FF7001                          push qword [rax + 1]
  1362 00001073 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1363 00001079 FF7009                          push qword [rax + 1 + 8]
  1364 0000107C F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1365 00001082 F20F5EC1                        divsd xmm0, xmm1
  1366 00001086 E80A0B0000                      call make_real
  1367                                          LEAVE
    38 0000108B C9                  <1>  leave
  1368 0000108C C21800                          ret AND_KILL_FRAME(1)
  1369                                  
  1370                                  L_code_ptr_char_to_integer:
  1371                                          ENTER
    33 0000108F C8000000            <1>  enter 0, 0
    34 00001093 4883E4F0            <1>  and rsp, ~15
  1372 00001097 48837D1801                      cmp COUNT, 1
  1373 0000109C 0F85890B0000                    jne L_error_arg_count_1
  1374 000010A2 488B4520                        mov rax, PARAM(0)
  1375                                          assert_char(rax)
    42 000010A6 803802              <1>  cmp byte [%1], %2
    43 000010A9 0F852C0C0000        <1>  jne L_error_incorrect_type
  1376 000010AF 8A4001                          mov al, byte [rax + 1]
  1377 000010B2 4825FF000000                    and rax, 255
  1378 000010B8 4889C7                          mov rdi, rax
  1379 000010BB E8F10A0000                      call make_integer
  1380                                          LEAVE
    38 000010C0 C9                  <1>  leave
  1381 000010C1 C21800                          ret AND_KILL_FRAME(1)
  1382                                  
  1383                                  L_code_ptr_integer_to_char:
  1384                                          ENTER
    33 000010C4 C8000000            <1>  enter 0, 0
    34 000010C8 4883E4F0            <1>  and rsp, ~15
  1385 000010CC 48837D1801                      cmp COUNT, 1
  1386 000010D1 0F85540B0000                    jne L_error_arg_count_1
  1387 000010D7 488B4520                        mov rax, PARAM(0)
  1388                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000010DB 803811              <2>  cmp byte [%1], %2
    43 000010DE 0F85F70B0000        <2>  jne L_error_incorrect_type
    48 000010E4 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000010E9 0F85EC0B0000        <1>  jne L_error_incorrect_type
  1389 000010EF 488B5801                        mov rbx, qword [rax + 1]
  1390 000010F3 4883FB00                        cmp rbx, 0
  1391 000010F7 0F8EDA0A0000                    jle L_error_integer_range
  1392 000010FD 4881FB00010000                  cmp rbx, 256
  1393 00001104 0F8DCD0A0000                    jge L_error_integer_range
  1394 0000110A BF02000000                      mov rdi, (1 + 1)
  1395 0000110F E82BF5FFFF                      call malloc
  1396 00001114 C60002                          mov byte [rax], T_char
  1397 00001117 885801                          mov byte [rax + 1], bl
  1398                                          LEAVE
    38 0000111A C9                  <1>  leave
  1399 0000111B C21800                          ret AND_KILL_FRAME(1)
  1400                                  
  1401                                  L_code_ptr_trng:
  1402                                          ENTER
    33 0000111E C8000000            <1>  enter 0, 0
    34 00001122 4883E4F0            <1>  and rsp, ~15
  1403 00001126 48837D1800                      cmp COUNT, 0
  1404 0000112B 0F85CE0A0000                    jne L_error_arg_count_0
  1405 00001131 480FC7F7                        rdrand rdi
  1406 00001135 48D1EF                          shr rdi, 1
  1407 00001138 E8740A0000                      call make_integer
  1408                                          LEAVE
    38 0000113D C9                  <1>  leave
  1409 0000113E C21000                          ret AND_KILL_FRAME(0)
  1410                                  
  1411                                  L_code_ptr_is_zero:
  1412                                          ENTER
    33 00001141 C8000000            <1>  enter 0, 0
    34 00001145 4883E4F0            <1>  and rsp, ~15
  1413 00001149 48837D1801                      cmp COUNT, 1
  1414 0000114E 0F85D70A0000                    jne L_error_arg_count_1
  1415 00001154 488B4520                        mov rax, PARAM(0)
  1416 00001158 803811                          cmp byte [rax], T_rational
  1417 0000115B 740A                            je .L_rational
  1418 0000115D 803812                          cmp byte [rax], T_real
  1419 00001160 740E                            je .L_real
  1420 00001162 E9740B0000                      jmp L_error_incorrect_type
  1421                                  .L_rational:
  1422 00001167 4883780100                      cmp qword [rax + 1], 0
  1423 0000116C 7420                            je .L_zero
  1424 0000116E EB12                            jmp .L_not_zero
  1425                                  .L_real:
  1426 00001170 660FEFC0                        pxor xmm0, xmm0
  1427 00001174 FF7001                          push qword [rax + 1]
  1428 00001177 F20F100C24                      movsd xmm1, qword [rsp]
  1429 0000117C 660F2EC1                        ucomisd xmm0, xmm1
  1430 00001180 740C                            je .L_zero
  1431                                  .L_not_zero:
  1432 00001182 48B8-                           mov rax, sob_boolean_false
  1432 00001184 [0200000000000000] 
  1433 0000118C EB0A                            jmp .L_end
  1434                                  .L_zero:
  1435 0000118E 48B8-                           mov rax, sob_boolean_true
  1435 00001190 [0300000000000000] 
  1436                                  .L_end:
  1437                                          LEAVE
    38 00001198 C9                  <1>  leave
  1438 00001199 C21800                          ret AND_KILL_FRAME(1)
  1439                                  
  1440                                  L_code_ptr_is_integer:
  1441                                          ENTER
    33 0000119C C8000000            <1>  enter 0, 0
    34 000011A0 4883E4F0            <1>  and rsp, ~15
  1442 000011A4 48837D1801                      cmp COUNT, 1
  1443 000011A9 0F857C0A0000                    jne L_error_arg_count_1
  1444 000011AF 488B4520                        mov rax, PARAM(0)
  1445 000011B3 803811                          cmp byte [rax], T_rational
  1446 000011B6 7513                            jne .L_false
  1447 000011B8 4883780901                      cmp qword [rax + 1 + 8], 1
  1448 000011BD 750C                            jne .L_false
  1449 000011BF 48B8-                           mov rax, sob_boolean_true
  1449 000011C1 [0300000000000000] 
  1450 000011C9 EB0A                            jmp .L_exit
  1451                                  .L_false:
  1452 000011CB 48B8-                           mov rax, sob_boolean_false
  1452 000011CD [0200000000000000] 
  1453                                  .L_exit:
  1454                                          LEAVE
    38 000011D5 C9                  <1>  leave
  1455 000011D6 C21800                          ret AND_KILL_FRAME(1)
  1456                                  
  1457                                  L_code_ptr_raw_bin_add_rr:
  1458                                          ENTER
    33 000011D9 C8000000            <1>  enter 0, 0
    34 000011DD 4883E4F0            <1>  and rsp, ~15
  1459 000011E1 48837D1802                      cmp COUNT, 2
  1460 000011E6 0F856B0A0000                    jne L_error_arg_count_2
  1461 000011EC 488B5D20                        mov rbx, PARAM(0)
  1462                                          assert_real(rbx)
    42 000011F0 803B12              <1>  cmp byte [%1], %2
    43 000011F3 0F85E20A0000        <1>  jne L_error_incorrect_type
  1463 000011F9 488B4D28                        mov rcx, PARAM(1)
  1464                                          assert_real(rcx)
    42 000011FD 803912              <1>  cmp byte [%1], %2
    43 00001200 0F85D50A0000        <1>  jne L_error_incorrect_type
  1465 00001206 F20F104301                      movsd xmm0, qword [rbx + 1]
  1466 0000120B F20F104901                      movsd xmm1, qword [rcx + 1]
  1467 00001210 F20F58C1                        addsd xmm0, xmm1
  1468 00001214 E87C090000                      call make_real
  1469                                          LEAVE
    38 00001219 C9                  <1>  leave
  1470 0000121A C22000                          ret AND_KILL_FRAME(2)
  1471                                  
  1472                                  L_code_ptr_raw_bin_sub_rr:
  1473                                          ENTER
    33 0000121D C8000000            <1>  enter 0, 0
    34 00001221 4883E4F0            <1>  and rsp, ~15
  1474 00001225 48837D1802                      cmp COUNT, 2
  1475 0000122A 0F85270A0000                    jne L_error_arg_count_2
  1476 00001230 488B5D20                        mov rbx, PARAM(0)
  1477                                          assert_real(rbx)
    42 00001234 803B12              <1>  cmp byte [%1], %2
    43 00001237 0F859E0A0000        <1>  jne L_error_incorrect_type
  1478 0000123D 488B4D28                        mov rcx, PARAM(1)
  1479                                          assert_real(rcx)
    42 00001241 803912              <1>  cmp byte [%1], %2
    43 00001244 0F85910A0000        <1>  jne L_error_incorrect_type
  1480 0000124A F20F104301                      movsd xmm0, qword [rbx + 1]
  1481 0000124F F20F104901                      movsd xmm1, qword [rcx + 1]
  1482 00001254 F20F5CC1                        subsd xmm0, xmm1
  1483 00001258 E838090000                      call make_real
  1484                                          LEAVE
    38 0000125D C9                  <1>  leave
  1485 0000125E C22000                          ret AND_KILL_FRAME(2)
  1486                                  
  1487                                  L_code_ptr_raw_bin_mul_rr:
  1488                                          ENTER
    33 00001261 C8000000            <1>  enter 0, 0
    34 00001265 4883E4F0            <1>  and rsp, ~15
  1489 00001269 48837D1802                      cmp COUNT, 2
  1490 0000126E 0F85E3090000                    jne L_error_arg_count_2
  1491 00001274 488B5D20                        mov rbx, PARAM(0)
  1492                                          assert_real(rbx)
    42 00001278 803B12              <1>  cmp byte [%1], %2
    43 0000127B 0F855A0A0000        <1>  jne L_error_incorrect_type
  1493 00001281 488B4D28                        mov rcx, PARAM(1)
  1494                                          assert_real(rcx)
    42 00001285 803912              <1>  cmp byte [%1], %2
    43 00001288 0F854D0A0000        <1>  jne L_error_incorrect_type
  1495 0000128E F20F104301                      movsd xmm0, qword [rbx + 1]
  1496 00001293 F20F104901                      movsd xmm1, qword [rcx + 1]
  1497 00001298 F20F59C1                        mulsd xmm0, xmm1
  1498 0000129C E8F4080000                      call make_real
  1499                                          LEAVE
    38 000012A1 C9                  <1>  leave
  1500 000012A2 C22000                          ret AND_KILL_FRAME(2)
  1501                                  
  1502                                  L_code_ptr_raw_bin_div_rr:
  1503                                          ENTER
    33 000012A5 C8000000            <1>  enter 0, 0
    34 000012A9 4883E4F0            <1>  and rsp, ~15
  1504 000012AD 48837D1802                      cmp COUNT, 2
  1505 000012B2 0F859F090000                    jne L_error_arg_count_2
  1506 000012B8 488B5D20                        mov rbx, PARAM(0)
  1507                                          assert_real(rbx)
    42 000012BC 803B12              <1>  cmp byte [%1], %2
    43 000012BF 0F85160A0000        <1>  jne L_error_incorrect_type
  1508 000012C5 488B4D28                        mov rcx, PARAM(1)
  1509                                          assert_real(rcx)
    42 000012C9 803912              <1>  cmp byte [%1], %2
    43 000012CC 0F85090A0000        <1>  jne L_error_incorrect_type
  1510 000012D2 F20F104301                      movsd xmm0, qword [rbx + 1]
  1511 000012D7 F20F104901                      movsd xmm1, qword [rcx + 1]
  1512 000012DC 660FEFD2                        pxor xmm2, xmm2
  1513 000012E0 660F2ECA                        ucomisd xmm1, xmm2
  1514 000012E4 0F84190A0000                    je L_error_division_by_zero
  1515 000012EA F20F5EC1                        divsd xmm0, xmm1
  1516 000012EE E8A2080000                      call make_real
  1517                                          LEAVE
    38 000012F3 C9                  <1>  leave
  1518 000012F4 C22000                          ret AND_KILL_FRAME(2)
  1519                                  
  1520                                  L_code_ptr_raw_bin_add_qq:
  1521                                          ENTER
    33 000012F7 C8000000            <1>  enter 0, 0
    34 000012FB 4883E4F0            <1>  and rsp, ~15
  1522 000012FF 48837D1802                      cmp COUNT, 2
  1523 00001304 0F854D090000                    jne L_error_arg_count_2
  1524 0000130A 4C8B4520                        mov r8, PARAM(0)
  1525                                          assert_rational(r8)
    42 0000130E 41803811            <1>  cmp byte [%1], %2
    43 00001312 0F85C3090000        <1>  jne L_error_incorrect_type
  1526 00001318 4C8B4D28                        mov r9, PARAM(1)
  1527                                          assert_rational(r9)
    42 0000131C 41803911            <1>  cmp byte [%1], %2
    43 00001320 0F85B5090000        <1>  jne L_error_incorrect_type
  1528 00001326 498B4001                        mov rax, qword [r8 + 1] ; num1
  1529 0000132A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1530 0000132E 4899                            cqo
  1531 00001330 48F7EB                          imul rbx
  1532 00001333 4889C6                          mov rsi, rax
  1533 00001336 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1534 0000133A 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1535 0000133E 4899                            cqo
  1536 00001340 48F7EB                          imul rbx
  1537 00001343 4801C6                          add rsi, rax
  1538 00001346 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1539 0000134A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1540 0000134E 4899                            cqo
  1541 00001350 48F7EB                          imul rbx
  1542 00001353 4889C7                          mov rdi, rax
  1543 00001356 E827010000                      call normalize_rational
  1544                                          LEAVE
    38 0000135B C9                  <1>  leave
  1545 0000135C C22000                          ret AND_KILL_FRAME(2)
  1546                                  
  1547                                  L_code_ptr_raw_bin_sub_qq:
  1548                                          ENTER
    33 0000135F C8000000            <1>  enter 0, 0
    34 00001363 4883E4F0            <1>  and rsp, ~15
  1549 00001367 48837D1802                      cmp COUNT, 2
  1550 0000136C 0F85E5080000                    jne L_error_arg_count_2
  1551 00001372 4C8B4520                        mov r8, PARAM(0)
  1552                                          assert_rational(r8)
    42 00001376 41803811            <1>  cmp byte [%1], %2
    43 0000137A 0F855B090000        <1>  jne L_error_incorrect_type
  1553 00001380 4C8B4D28                        mov r9, PARAM(1)
  1554                                          assert_rational(r9)
    42 00001384 41803911            <1>  cmp byte [%1], %2
    43 00001388 0F854D090000        <1>  jne L_error_incorrect_type
  1555 0000138E 498B4001                        mov rax, qword [r8 + 1] ; num1
  1556 00001392 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1557 00001396 4899                            cqo
  1558 00001398 48F7EB                          imul rbx
  1559 0000139B 4889C6                          mov rsi, rax
  1560 0000139E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1561 000013A2 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1562 000013A6 4899                            cqo
  1563 000013A8 48F7EB                          imul rbx
  1564 000013AB 4829C6                          sub rsi, rax
  1565 000013AE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1566 000013B2 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1567 000013B6 4899                            cqo
  1568 000013B8 48F7EB                          imul rbx
  1569 000013BB 4889C7                          mov rdi, rax
  1570 000013BE E8BF000000                      call normalize_rational
  1571                                          LEAVE
    38 000013C3 C9                  <1>  leave
  1572 000013C4 C22000                          ret AND_KILL_FRAME(2)
  1573                                  
  1574                                  L_code_ptr_raw_bin_mul_qq:
  1575                                          ENTER
    33 000013C7 C8000000            <1>  enter 0, 0
    34 000013CB 4883E4F0            <1>  and rsp, ~15
  1576 000013CF 48837D1802                      cmp COUNT, 2
  1577 000013D4 0F857D080000                    jne L_error_arg_count_2
  1578 000013DA 4C8B4520                        mov r8, PARAM(0)
  1579                                          assert_rational(r8)
    42 000013DE 41803811            <1>  cmp byte [%1], %2
    43 000013E2 0F85F3080000        <1>  jne L_error_incorrect_type
  1580 000013E8 4C8B4D28                        mov r9, PARAM(1)
  1581                                          assert_rational(r9)
    42 000013EC 41803911            <1>  cmp byte [%1], %2
    43 000013F0 0F85E5080000        <1>  jne L_error_incorrect_type
  1582 000013F6 498B4001                        mov rax, qword [r8 + 1] ; num1
  1583 000013FA 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1584 000013FE 4899                            cqo
  1585 00001400 48F7EB                          imul rbx
  1586 00001403 4889C6                          mov rsi, rax
  1587 00001406 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1588 0000140A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1589 0000140E 4899                            cqo
  1590 00001410 48F7EB                          imul rbx
  1591 00001413 4889C7                          mov rdi, rax
  1592 00001416 E867000000                      call normalize_rational
  1593                                          LEAVE
    38 0000141B C9                  <1>  leave
  1594 0000141C C22000                          ret AND_KILL_FRAME(2)
  1595                                          
  1596                                  L_code_ptr_raw_bin_div_qq:
  1597                                          ENTER
    33 0000141F C8000000            <1>  enter 0, 0
    34 00001423 4883E4F0            <1>  and rsp, ~15
  1598 00001427 48837D1802                      cmp COUNT, 2
  1599 0000142C 0F8525080000                    jne L_error_arg_count_2
  1600 00001432 4C8B4520                        mov r8, PARAM(0)
  1601                                          assert_rational(r8)
    42 00001436 41803811            <1>  cmp byte [%1], %2
    43 0000143A 0F859B080000        <1>  jne L_error_incorrect_type
  1602 00001440 4C8B4D28                        mov r9, PARAM(1)
  1603                                          assert_rational(r9)
    42 00001444 41803911            <1>  cmp byte [%1], %2
    43 00001448 0F858D080000        <1>  jne L_error_incorrect_type
  1604 0000144E 4983790100                      cmp qword [r9 + 1], 0
  1605 00001453 0F84AA080000                    je L_error_division_by_zero
  1606 00001459 498B4001                        mov rax, qword [r8 + 1] ; num1
  1607 0000145D 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1608 00001461 4899                            cqo
  1609 00001463 48F7EB                          imul rbx
  1610 00001466 4889C6                          mov rsi, rax
  1611 00001469 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1612 0000146D 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1613 00001471 4899                            cqo
  1614 00001473 48F7EB                          imul rbx
  1615 00001476 4889C7                          mov rdi, rax
  1616 00001479 E804000000                      call normalize_rational
  1617                                          LEAVE
    38 0000147E C9                  <1>  leave
  1618 0000147F C22000                          ret AND_KILL_FRAME(2)
  1619                                          
  1620                                  normalize_rational:
  1621 00001482 56                              push rsi
  1622 00001483 57                              push rdi
  1623 00001484 E839000000                      call gcd
  1624 00001489 4889C3                          mov rbx, rax
  1625 0000148C 58                              pop rax
  1626 0000148D 4899                            cqo
  1627 0000148F 48F7FB                          idiv rbx
  1628 00001492 4989C0                          mov r8, rax
  1629 00001495 58                              pop rax
  1630 00001496 4899                            cqo
  1631 00001498 48F7FB                          idiv rbx
  1632 0000149B 4989C1                          mov r9, rax
  1633 0000149E BF11000000                      mov rdi, (1 + 8 + 8)
  1634 000014A3 E897F1FFFF                      call malloc
  1635 000014A8 C60011                          mov byte [rax], T_rational
  1636 000014AB 4C894801                        mov qword [rax + 1], r9
  1637 000014AF 4C894009                        mov qword [rax + 1 + 8], r8
  1638 000014B3 C3                              ret
  1639                                  
  1640                                  iabs:
  1641 000014B4 4889F8                          mov rax, rdi
  1642 000014B7 4883F800                        cmp rax, 0
  1643 000014BB 7C01                            jl .Lneg
  1644 000014BD C3                              ret
  1645                                  .Lneg:
  1646 000014BE 48F7D8                          neg rax
  1647 000014C1 C3                              ret
  1648                                  
  1649                                  gcd:
  1650 000014C2 E8EDFFFFFF                      call iabs
  1651 000014C7 4889C3                          mov rbx, rax
  1652 000014CA 4889F7                          mov rdi, rsi
  1653 000014CD E8E2FFFFFF                      call iabs
  1654 000014D2 4883F800                        cmp rax, 0
  1655 000014D6 7502                            jne .L0
  1656 000014D8 4893                            xchg rax, rbx
  1657                                  .L0:
  1658 000014DA 4883FB00                        cmp rbx, 0
  1659 000014DE 740C                            je .L1
  1660 000014E0 4899                            cqo
  1661 000014E2 48F7F3                          div rbx
  1662 000014E5 4889D0                          mov rax, rdx
  1663 000014E8 4893                            xchg rax, rbx
  1664 000014EA EBEE                            jmp .L0
  1665                                  .L1:
  1666 000014EC C3                              ret
  1667                                  
  1668                                  L_code_ptr_error:
  1669                                          ENTER
    33 000014ED C8000000            <1>  enter 0, 0
    34 000014F1 4883E4F0            <1>  and rsp, ~15
  1670 000014F5 48837D1802                      cmp COUNT, 2
  1671 000014FA 0F8557070000                    jne L_error_arg_count_2
  1672 00001500 488B7520                        mov rsi, PARAM(0)
  1673                                          assert_symbol(rsi)
    42 00001504 803E04              <1>  cmp byte [%1], %2
    43 00001507 0F85CE070000        <1>  jne L_error_incorrect_type
  1674 0000150D 488B7528                        mov rsi, PARAM(1)
  1675                                          assert_string(rsi)
    42 00001511 803E03              <1>  cmp byte [%1], %2
    43 00001514 0F85C1070000        <1>  jne L_error_incorrect_type
  1676 0000151A 48BF-                           mov rdi, fmt_scheme_error_part_1
  1676 0000151C [6803000000000000] 
  1677 00001524 B800000000                      mov rax, 0
  1678 00001529 E8(00000000)                    call printf
  1679 0000152E 488B7D20                        mov rdi, PARAM(0)
  1680 00001532 E823F1FFFF                      call print_sexpr
  1681 00001537 48BF-                           mov rdi, fmt_scheme_error_part_2
  1681 00001539 [7C03000000000000] 
  1682 00001541 B800000000                      mov rax, 0
  1683 00001546 E8(00000000)                    call printf
  1684 0000154B 488B4528                        mov rax, PARAM(1)       ; sob_string
  1685 0000154F BE01000000                      mov rsi, 1              ; size = 1 byte
  1686 00001554 488B5001                        mov rdx, qword [rax + 1] ; length
  1687 00001558 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1688 0000155C 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1689 00001564 E8(00000000)                    call fwrite
  1690 00001569 48BF-                           mov rdi, fmt_scheme_error_part_3
  1690 0000156B [BE03000000000000] 
  1691 00001573 B800000000                      mov rax, 0
  1692 00001578 E8(00000000)                    call printf
  1693 0000157D 48C7C0F7FFFFFF                  mov rax, -9
  1694 00001584 E8(00000000)                    call exit
  1695                                  
  1696                                  L_code_ptr_raw_less_than_rr:
  1697                                          ENTER
    33 00001589 C8000000            <1>  enter 0, 0
    34 0000158D 4883E4F0            <1>  and rsp, ~15
  1698 00001591 48837D1802                      cmp COUNT, 2
  1699 00001596 0F85BB060000                    jne L_error_arg_count_2
  1700 0000159C 488B7520                        mov rsi, PARAM(0)
  1701                                          assert_real(rsi)
    42 000015A0 803E12              <1>  cmp byte [%1], %2
    43 000015A3 0F8532070000        <1>  jne L_error_incorrect_type
  1702 000015A9 488B7D28                        mov rdi, PARAM(1)
  1703                                          assert_real(rdi)
    42 000015AD 803F12              <1>  cmp byte [%1], %2
    43 000015B0 0F8525070000        <1>  jne L_error_incorrect_type
  1704 000015B6 F20F104601                      movsd xmm0, qword [rsi + 1]
  1705 000015BB F20F104F01                      movsd xmm1, qword [rdi + 1]
  1706 000015C0 660F2FC1                        comisd xmm0, xmm1
  1707 000015C4 730C                            jae .L_false
  1708 000015C6 48B8-                           mov rax, sob_boolean_true
  1708 000015C8 [0300000000000000] 
  1709 000015D0 EB0A                            jmp .L_exit
  1710                                  .L_false:
  1711 000015D2 48B8-                           mov rax, sob_boolean_false
  1711 000015D4 [0200000000000000] 
  1712                                  .L_exit:
  1713                                          LEAVE
    38 000015DC C9                  <1>  leave
  1714 000015DD C22000                          ret AND_KILL_FRAME(2)
  1715                                          
  1716                                  L_code_ptr_raw_less_than_qq:
  1717                                          ENTER
    33 000015E0 C8000000            <1>  enter 0, 0
    34 000015E4 4883E4F0            <1>  and rsp, ~15
  1718 000015E8 48837D1802                      cmp COUNT, 2
  1719 000015ED 0F8564060000                    jne L_error_arg_count_2
  1720 000015F3 488B7520                        mov rsi, PARAM(0)
  1721                                          assert_rational(rsi)
    42 000015F7 803E11              <1>  cmp byte [%1], %2
    43 000015FA 0F85DB060000        <1>  jne L_error_incorrect_type
  1722 00001600 488B7D28                        mov rdi, PARAM(1)
  1723                                          assert_rational(rdi)
    42 00001604 803F11              <1>  cmp byte [%1], %2
    43 00001607 0F85CE060000        <1>  jne L_error_incorrect_type
  1724 0000160D 488B4601                        mov rax, qword [rsi + 1] ; num1
  1725 00001611 4899                            cqo
  1726 00001613 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1727 00001617 4889C1                          mov rcx, rax
  1728 0000161A 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1729 0000161E 4899                            cqo
  1730 00001620 48F76E01                        imul qword [rsi + 1]          ; num2
  1731 00001624 4829C1                          sub rcx, rax
  1732 00001627 7D0C                            jge .L_false
  1733 00001629 48B8-                           mov rax, sob_boolean_true
  1733 0000162B [0300000000000000] 
  1734 00001633 EB0A                            jmp .L_exit
  1735                                  .L_false:
  1736 00001635 48B8-                           mov rax, sob_boolean_false
  1736 00001637 [0200000000000000] 
  1737                                  .L_exit:
  1738                                          LEAVE
    38 0000163F C9                  <1>  leave
  1739 00001640 C22000                          ret AND_KILL_FRAME(2)
  1740                                  
  1741                                  L_code_ptr_raw_equal_rr:
  1742                                          ENTER
    33 00001643 C8000000            <1>  enter 0, 0
    34 00001647 4883E4F0            <1>  and rsp, ~15
  1743 0000164B 48837D1802                      cmp COUNT, 2
  1744 00001650 0F8501060000                    jne L_error_arg_count_2
  1745 00001656 488B7520                        mov rsi, PARAM(0)
  1746                                          assert_real(rsi)
    42 0000165A 803E12              <1>  cmp byte [%1], %2
    43 0000165D 0F8578060000        <1>  jne L_error_incorrect_type
  1747 00001663 488B7D28                        mov rdi, PARAM(1)
  1748                                          assert_real(rdi)
    42 00001667 803F12              <1>  cmp byte [%1], %2
    43 0000166A 0F856B060000        <1>  jne L_error_incorrect_type
  1749 00001670 F20F104601                      movsd xmm0, qword [rsi + 1]
  1750 00001675 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1751 0000167A 660F2FC1                        comisd xmm0, xmm1
  1752 0000167E 750C                            jne .L_false
  1753 00001680 48B8-                           mov rax, sob_boolean_true
  1753 00001682 [0300000000000000] 
  1754 0000168A EB0A                            jmp .L_exit
  1755                                  .L_false:
  1756 0000168C 48B8-                           mov rax, sob_boolean_false
  1756 0000168E [0200000000000000] 
  1757                                  .L_exit:
  1758                                          LEAVE
    38 00001696 C9                  <1>  leave
  1759 00001697 C22000                          ret AND_KILL_FRAME(2)
  1760                                          
  1761                                  L_code_ptr_raw_equal_qq:
  1762                                          ENTER
    33 0000169A C8000000            <1>  enter 0, 0
    34 0000169E 4883E4F0            <1>  and rsp, ~15
  1763 000016A2 48837D1802                      cmp COUNT, 2
  1764 000016A7 0F85AA050000                    jne L_error_arg_count_2
  1765 000016AD 488B7520                        mov rsi, PARAM(0)
  1766                                          assert_rational(rsi)
    42 000016B1 803E11              <1>  cmp byte [%1], %2
    43 000016B4 0F8521060000        <1>  jne L_error_incorrect_type
  1767 000016BA 488B7D28                        mov rdi, PARAM(1)
  1768                                          assert_rational(rdi)
    42 000016BE 803F11              <1>  cmp byte [%1], %2
    43 000016C1 0F8514060000        <1>  jne L_error_incorrect_type
  1769 000016C7 488B4601                        mov rax, qword [rsi + 1] ; num1
  1770 000016CB 4899                            cqo
  1771 000016CD 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1772 000016D1 4889C1                          mov rcx, rax
  1773 000016D4 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1774 000016D8 4899                            cqo
  1775 000016DA 48F76F01                        imul qword [rdi + 1]          ; num2
  1776 000016DE 4829C1                          sub rcx, rax
  1777 000016E1 750C                            jne .L_false
  1778 000016E3 48B8-                           mov rax, sob_boolean_true
  1778 000016E5 [0300000000000000] 
  1779 000016ED EB0A                            jmp .L_exit
  1780                                  .L_false:
  1781 000016EF 48B8-                           mov rax, sob_boolean_false
  1781 000016F1 [0200000000000000] 
  1782                                  .L_exit:
  1783                                          LEAVE
    38 000016F9 C9                  <1>  leave
  1784 000016FA C22000                          ret AND_KILL_FRAME(2)
  1785                                  
  1786                                  L_code_ptr_quotient:
  1787                                          ENTER
    33 000016FD C8000000            <1>  enter 0, 0
    34 00001701 4883E4F0            <1>  and rsp, ~15
  1788 00001705 48837D1802                      cmp COUNT, 2
  1789 0000170A 0F8547050000                    jne L_error_arg_count_2
  1790 00001710 488B7520                        mov rsi, PARAM(0)
  1791                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001714 803E11              <2>  cmp byte [%1], %2
    43 00001717 0F85BE050000        <2>  jne L_error_incorrect_type
    48 0000171D 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001722 0F85B3050000        <1>  jne L_error_incorrect_type
  1792 00001728 488B7D28                        mov rdi, PARAM(1)
  1793                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000172C 803F11              <2>  cmp byte [%1], %2
    43 0000172F 0F85A6050000        <2>  jne L_error_incorrect_type
    48 00001735 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000173A 0F859B050000        <1>  jne L_error_incorrect_type
  1794 00001740 488B4601                        mov rax, qword [rsi + 1]
  1795 00001744 488B5F01                        mov rbx, qword [rdi + 1]
  1796 00001748 4883FB00                        cmp rbx, 0
  1797 0000174C 0F84B1050000                    je L_error_division_by_zero
  1798 00001752 4899                            cqo
  1799 00001754 48F7FB                          idiv rbx
  1800 00001757 4889C7                          mov rdi, rax
  1801 0000175A E852040000                      call make_integer
  1802                                          LEAVE
    38 0000175F C9                  <1>  leave
  1803 00001760 C22000                          ret AND_KILL_FRAME(2)
  1804                                          
  1805                                  L_code_ptr_remainder:
  1806                                          ENTER
    33 00001763 C8000000            <1>  enter 0, 0
    34 00001767 4883E4F0            <1>  and rsp, ~15
  1807 0000176B 48837D1802                      cmp COUNT, 2
  1808 00001770 0F85E1040000                    jne L_error_arg_count_2
  1809 00001776 488B7520                        mov rsi, PARAM(0)
  1810                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000177A 803E11              <2>  cmp byte [%1], %2
    43 0000177D 0F8558050000        <2>  jne L_error_incorrect_type
    48 00001783 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001788 0F854D050000        <1>  jne L_error_incorrect_type
  1811 0000178E 488B7D28                        mov rdi, PARAM(1)
  1812                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001792 803F11              <2>  cmp byte [%1], %2
    43 00001795 0F8540050000        <2>  jne L_error_incorrect_type
    48 0000179B 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017A0 0F8535050000        <1>  jne L_error_incorrect_type
  1813 000017A6 488B4601                        mov rax, qword [rsi + 1]
  1814 000017AA 488B5F01                        mov rbx, qword [rdi + 1]
  1815 000017AE 4883FB00                        cmp rbx, 0
  1816 000017B2 0F844B050000                    je L_error_division_by_zero
  1817 000017B8 4899                            cqo
  1818 000017BA 48F7FB                          idiv rbx
  1819 000017BD 4889D7                          mov rdi, rdx
  1820 000017C0 E8EC030000                      call make_integer
  1821                                          LEAVE
    38 000017C5 C9                  <1>  leave
  1822 000017C6 C22000                          ret AND_KILL_FRAME(2)
  1823                                  
  1824                                  L_code_ptr_set_car:
  1825                                          ENTER
    33 000017C9 C8000000            <1>  enter 0, 0
    34 000017CD 4883E4F0            <1>  and rsp, ~15
  1826 000017D1 48837D1802                      cmp COUNT, 2
  1827 000017D6 0F857B040000                    jne L_error_arg_count_2
  1828 000017DC 488B4520                        mov rax, PARAM(0)
  1829                                          assert_pair(rax)
    42 000017E0 803821              <1>  cmp byte [%1], %2
    43 000017E3 0F85F2040000        <1>  jne L_error_incorrect_type
  1830 000017E9 488B5D28                        mov rbx, PARAM(1)
  1831 000017ED 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1832 000017F1 48B8-                           mov rax, sob_void
  1832 000017F3 [0000000000000000] 
  1833                                          LEAVE
    38 000017FB C9                  <1>  leave
  1834 000017FC C22000                          ret AND_KILL_FRAME(2)
  1835                                  
  1836                                  L_code_ptr_set_cdr:
  1837                                          ENTER
    33 000017FF C8000000            <1>  enter 0, 0
    34 00001803 4883E4F0            <1>  and rsp, ~15
  1838 00001807 48837D1802                      cmp COUNT, 2
  1839 0000180C 0F8545040000                    jne L_error_arg_count_2
  1840 00001812 488B4520                        mov rax, PARAM(0)
  1841                                          assert_pair(rax)
    42 00001816 803821              <1>  cmp byte [%1], %2
    43 00001819 0F85BC040000        <1>  jne L_error_incorrect_type
  1842 0000181F 488B5D28                        mov rbx, PARAM(1)
  1843 00001823 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1844 00001827 48B8-                           mov rax, sob_void
  1844 00001829 [0000000000000000] 
  1845                                          LEAVE
    38 00001831 C9                  <1>  leave
  1846 00001832 C22000                          ret AND_KILL_FRAME(2)
  1847                                  
  1848                                  L_code_ptr_string_ref:
  1849                                          ENTER
    33 00001835 C8000000            <1>  enter 0, 0
    34 00001839 4883E4F0            <1>  and rsp, ~15
  1850 0000183D 48837D1802                      cmp COUNT, 2
  1851 00001842 0F850F040000                    jne L_error_arg_count_2
  1852 00001848 488B7D20                        mov rdi, PARAM(0)
  1853                                          assert_string(rdi)
    42 0000184C 803F03              <1>  cmp byte [%1], %2
    43 0000184F 0F8586040000        <1>  jne L_error_incorrect_type
  1854 00001855 488B7528                        mov rsi, PARAM(1)
  1855                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001859 803E11              <2>  cmp byte [%1], %2
    43 0000185C 0F8579040000        <2>  jne L_error_incorrect_type
    48 00001862 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001867 0F856E040000        <1>  jne L_error_incorrect_type
  1856 0000186D 488B5701                        mov rdx, qword [rdi + 1]
  1857 00001871 488B4E01                        mov rcx, qword [rsi + 1]
  1858 00001875 4839D1                          cmp rcx, rdx
  1859 00001878 0F8D59030000                    jge L_error_integer_range
  1860 0000187E 4883F900                        cmp rcx, 0
  1861 00001882 0F8C4F030000                    jl L_error_integer_range
  1862 00001888 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1863 0000188C BF02000000                      mov rdi, 2
  1864 00001891 E8A9EDFFFF                      call malloc
  1865 00001896 C60002                          mov byte [rax], T_char
  1866 00001899 885801                          mov byte [rax + 1], bl
  1867                                          LEAVE
    38 0000189C C9                  <1>  leave
  1868 0000189D C22000                          ret AND_KILL_FRAME(2)
  1869                                  
  1870                                  L_code_ptr_vector_ref:
  1871                                          ENTER
    33 000018A0 C8000000            <1>  enter 0, 0
    34 000018A4 4883E4F0            <1>  and rsp, ~15
  1872 000018A8 48837D1802                      cmp COUNT, 2
  1873 000018AD 0F85A4030000                    jne L_error_arg_count_2
  1874 000018B3 488B7D20                        mov rdi, PARAM(0)
  1875                                          assert_vector(rdi)
    42 000018B7 803F22              <1>  cmp byte [%1], %2
    43 000018BA 0F851B040000        <1>  jne L_error_incorrect_type
  1876 000018C0 488B7528                        mov rsi, PARAM(1)
  1877                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018C4 803E11              <2>  cmp byte [%1], %2
    43 000018C7 0F850E040000        <2>  jne L_error_incorrect_type
    48 000018CD 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018D2 0F8503040000        <1>  jne L_error_incorrect_type
  1878 000018D8 488B5701                        mov rdx, qword [rdi + 1]
  1879 000018DC 488B4E01                        mov rcx, qword [rsi + 1]
  1880 000018E0 4839D1                          cmp rcx, rdx
  1881 000018E3 0F8DEE020000                    jge L_error_integer_range
  1882 000018E9 4883F900                        cmp rcx, 0
  1883 000018ED 0F8CE4020000                    jl L_error_integer_range
  1884 000018F3 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1885                                          LEAVE
    38 000018F8 C9                  <1>  leave
  1886 000018F9 C22000                          ret AND_KILL_FRAME(2)
  1887                                  
  1888                                  L_code_ptr_vector_set:
  1889                                          ENTER
    33 000018FC C8000000            <1>  enter 0, 0
    34 00001900 4883E4F0            <1>  and rsp, ~15
  1890 00001904 48837D1803                      cmp COUNT, 3
  1891 00001909 0F85A0030000                    jne L_error_arg_count_3
  1892 0000190F 488B7D20                        mov rdi, PARAM(0)
  1893                                          assert_vector(rdi)
    42 00001913 803F22              <1>  cmp byte [%1], %2
    43 00001916 0F85BF030000        <1>  jne L_error_incorrect_type
  1894 0000191C 488B7528                        mov rsi, PARAM(1)
  1895                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001920 803E11              <2>  cmp byte [%1], %2
    43 00001923 0F85B2030000        <2>  jne L_error_incorrect_type
    48 00001929 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000192E 0F85A7030000        <1>  jne L_error_incorrect_type
  1896 00001934 488B5701                        mov rdx, qword [rdi + 1]
  1897 00001938 488B4E01                        mov rcx, qword [rsi + 1]
  1898 0000193C 4839D1                          cmp rcx, rdx
  1899 0000193F 0F8D92020000                    jge L_error_integer_range
  1900 00001945 4883F900                        cmp rcx, 0
  1901 00001949 0F8C88020000                    jl L_error_integer_range
  1902 0000194F 488B4530                        mov rax, PARAM(2)
  1903 00001953 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  1904 00001958 48B8-                           mov rax, sob_void
  1904 0000195A [0000000000000000] 
  1905                                          LEAVE
    38 00001962 C9                  <1>  leave
  1906 00001963 C22800                          ret AND_KILL_FRAME(3)
  1907                                  
  1908                                  L_code_ptr_string_set:
  1909                                          ENTER
    33 00001966 C8000000            <1>  enter 0, 0
    34 0000196A 4883E4F0            <1>  and rsp, ~15
  1910 0000196E 48837D1803                      cmp COUNT, 3
  1911 00001973 0F8536030000                    jne L_error_arg_count_3
  1912 00001979 488B7D20                        mov rdi, PARAM(0)
  1913                                          assert_string(rdi)
    42 0000197D 803F03              <1>  cmp byte [%1], %2
    43 00001980 0F8555030000        <1>  jne L_error_incorrect_type
  1914 00001986 488B7528                        mov rsi, PARAM(1)
  1915                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000198A 803E11              <2>  cmp byte [%1], %2
    43 0000198D 0F8548030000        <2>  jne L_error_incorrect_type
    48 00001993 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001998 0F853D030000        <1>  jne L_error_incorrect_type
  1916 0000199E 488B5701                        mov rdx, qword [rdi + 1]
  1917 000019A2 488B4E01                        mov rcx, qword [rsi + 1]
  1918 000019A6 4839D1                          cmp rcx, rdx
  1919 000019A9 0F8D28020000                    jge L_error_integer_range
  1920 000019AF 4883F900                        cmp rcx, 0
  1921 000019B3 0F8C1E020000                    jl L_error_integer_range
  1922 000019B9 488B4530                        mov rax, PARAM(2)
  1923                                          assert_char(rax)
    42 000019BD 803802              <1>  cmp byte [%1], %2
    43 000019C0 0F8515030000        <1>  jne L_error_incorrect_type
  1924 000019C6 8A4001                          mov al, byte [rax + 1]
  1925 000019C9 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  1926 000019CD 48B8-                           mov rax, sob_void
  1926 000019CF [0000000000000000] 
  1927                                          LEAVE
    38 000019D7 C9                  <1>  leave
  1928 000019D8 C22800                          ret AND_KILL_FRAME(3)
  1929                                  
  1930                                  L_code_ptr_make_vector:
  1931                                          ENTER
    33 000019DB C8000000            <1>  enter 0, 0
    34 000019DF 4883E4F0            <1>  and rsp, ~15
  1932 000019E3 48837D1802                      cmp COUNT, 2
  1933 000019E8 0F8569020000                    jne L_error_arg_count_2
  1934 000019EE 488B4D20                        mov rcx, PARAM(0)
  1935                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 000019F2 803911              <2>  cmp byte [%1], %2
    43 000019F5 0F85E0020000        <2>  jne L_error_incorrect_type
    48 000019FB 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A00 0F85D5020000        <1>  jne L_error_incorrect_type
  1936 00001A06 488B4901                        mov rcx, qword [rcx + 1]
  1937 00001A0A 4883F900                        cmp rcx, 0
  1938 00001A0E 0F8CC3010000                    jl L_error_integer_range
  1939 00001A14 488B5528                        mov rdx, PARAM(1)
  1940 00001A18 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  1941 00001A20 E81AECFFFF                      call malloc
  1942 00001A25 C60022                          mov byte [rax], T_vector
  1943 00001A28 48894801                        mov qword [rax + 1], rcx
  1944 00001A2C 41B800000000                    mov r8, 0
  1945                                  .L0:
  1946 00001A32 4939C8                          cmp r8, rcx
  1947 00001A35 740A                            je .L1
  1948 00001A37 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  1949 00001A3C 49FFC0                          inc r8
  1950 00001A3F EBF1                            jmp .L0
  1951                                  .L1:
  1952                                          LEAVE
    38 00001A41 C9                  <1>  leave
  1953 00001A42 C22000                          ret AND_KILL_FRAME(2)
  1954                                          
  1955                                  L_code_ptr_make_string:
  1956                                          ENTER
    33 00001A45 C8000000            <1>  enter 0, 0
    34 00001A49 4883E4F0            <1>  and rsp, ~15
  1957 00001A4D 48837D1802                      cmp COUNT, 2
  1958 00001A52 0F85FF010000                    jne L_error_arg_count_2
  1959 00001A58 488B4D20                        mov rcx, PARAM(0)
  1960                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001A5C 803911              <2>  cmp byte [%1], %2
    43 00001A5F 0F8576020000        <2>  jne L_error_incorrect_type
    48 00001A65 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A6A 0F856B020000        <1>  jne L_error_incorrect_type
  1961 00001A70 488B4901                        mov rcx, qword [rcx + 1]
  1962 00001A74 4883F900                        cmp rcx, 0
  1963 00001A78 0F8C59010000                    jl L_error_integer_range
  1964 00001A7E 488B5528                        mov rdx, PARAM(1)
  1965                                          assert_char(rdx)
    42 00001A82 803A02              <1>  cmp byte [%1], %2
    43 00001A85 0F8550020000        <1>  jne L_error_incorrect_type
  1966 00001A8B 8A5201                          mov dl, byte [rdx + 1]
  1967 00001A8E 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  1968 00001A92 E8A8EBFFFF                      call malloc
  1969 00001A97 C60003                          mov byte [rax], T_string
  1970 00001A9A 48894801                        mov qword [rax + 1], rcx
  1971 00001A9E 41B800000000                    mov r8, 0
  1972                                  .L0:
  1973 00001AA4 4939C8                          cmp r8, rcx
  1974 00001AA7 740A                            je .L1
  1975 00001AA9 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  1976 00001AAE 49FFC0                          inc r8
  1977 00001AB1 EBF1                            jmp .L0
  1978                                  .L1:
  1979                                          LEAVE
    38 00001AB3 C9                  <1>  leave
  1980 00001AB4 C22000                          ret AND_KILL_FRAME(2)
  1981                                  
  1982                                  L_code_ptr_numerator:
  1983                                          ENTER
    33 00001AB7 C8000000            <1>  enter 0, 0
    34 00001ABB 4883E4F0            <1>  and rsp, ~15
  1984 00001ABF 48837D1801                      cmp COUNT, 1
  1985 00001AC4 0F8561010000                    jne L_error_arg_count_1
  1986 00001ACA 488B4520                        mov rax, PARAM(0)
  1987                                          assert_rational(rax)
    42 00001ACE 803811              <1>  cmp byte [%1], %2
    43 00001AD1 0F8504020000        <1>  jne L_error_incorrect_type
  1988 00001AD7 488B7801                        mov rdi, qword [rax + 1]
  1989 00001ADB E8D1000000                      call make_integer
  1990                                          LEAVE
    38 00001AE0 C9                  <1>  leave
  1991 00001AE1 C21800                          ret AND_KILL_FRAME(1)
  1992                                          
  1993                                  L_code_ptr_denominator:
  1994                                          ENTER
    33 00001AE4 C8000000            <1>  enter 0, 0
    34 00001AE8 4883E4F0            <1>  and rsp, ~15
  1995 00001AEC 48837D1801                      cmp COUNT, 1
  1996 00001AF1 0F8534010000                    jne L_error_arg_count_1
  1997 00001AF7 488B4520                        mov rax, PARAM(0)
  1998                                          assert_rational(rax)
    42 00001AFB 803811              <1>  cmp byte [%1], %2
    43 00001AFE 0F85D7010000        <1>  jne L_error_incorrect_type
  1999 00001B04 488B7809                        mov rdi, qword [rax + 1 + 8]
  2000 00001B08 E8A4000000                      call make_integer
  2001                                          LEAVE
    38 00001B0D C9                  <1>  leave
  2002 00001B0E C21800                          ret AND_KILL_FRAME(1)
  2003                                  
  2004                                  L_code_ptr_eq:
  2005                                  	ENTER
    33 00001B11 C8000000            <1>  enter 0, 0
    34 00001B15 4883E4F0            <1>  and rsp, ~15
  2006 00001B19 48837D1802              	cmp COUNT, 2
  2007 00001B1E 0F8533010000            	jne L_error_arg_count_2
  2008 00001B24 488B7D20                	mov rdi, PARAM(0)
  2009 00001B28 488B7528                	mov rsi, PARAM(1)
  2010 00001B2C 4839F7                  	cmp rdi, rsi
  2011 00001B2F 744A                    	je .L_eq_true
  2012 00001B31 8A17                    	mov dl, byte [rdi]
  2013 00001B33 3A16                    	cmp dl, byte [rsi]
  2014 00001B35 7550                    	jne .L_eq_false
  2015 00001B37 80FA02                  	cmp dl, T_char
  2016 00001B3A 7437                    	je .L_char
  2017 00001B3C 80FA04                  	cmp dl, T_symbol
  2018 00001B3F 742A                    	je .L_symbol
  2019 00001B41 80FA12                  	cmp dl, T_real
  2020 00001B44 741D                    	je .L_real
  2021 00001B46 80FA11                  	cmp dl, T_rational
  2022 00001B49 7402                    	je .L_rational
  2023 00001B4B EB3A                    	jmp .L_eq_false
  2024                                  .L_rational:
  2025 00001B4D 488B4601                	mov rax, qword [rsi + 1]
  2026 00001B51 483B4701                	cmp rax, qword [rdi + 1]
  2027 00001B55 7530                    	jne .L_eq_false
  2028 00001B57 488B4609                	mov rax, qword [rsi + 1 + 8]
  2029 00001B5B 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2030 00001B5F 7526                    	jne .L_eq_false
  2031 00001B61 EB18                    	jmp .L_eq_true
  2032                                  .L_real:
  2033 00001B63 488B4601                	mov rax, qword [rsi + 1]
  2034 00001B67 483B4701                	cmp rax, qword [rdi + 1]
  2035                                  .L_symbol:
  2036                                  	; never reached, because symbols are static!
  2037                                  	; but I'm keeping it in case, I'll ever change
  2038                                  	; the implementation
  2039 00001B6B 488B4601                	mov rax, qword [rsi + 1]
  2040 00001B6F 483B4701                	cmp rax, qword [rdi + 1]
  2041                                  .L_char:
  2042 00001B73 8A5E01                  	mov bl, byte [rsi + 1]
  2043 00001B76 3A5F01                  	cmp bl, byte [rdi + 1]
  2044 00001B79 750C                    	jne .L_eq_false
  2045                                  .L_eq_true:
  2046 00001B7B 48B8-                   	mov rax, sob_boolean_true
  2046 00001B7D [0300000000000000] 
  2047 00001B85 EB0A                    	jmp .L_eq_exit
  2048                                  .L_eq_false:
  2049 00001B87 48B8-                   	mov rax, sob_boolean_false
  2049 00001B89 [0200000000000000] 
  2050                                  .L_eq_exit:
  2051                                  	LEAVE
    38 00001B91 C9                  <1>  leave
  2052 00001B92 C22000                  	ret AND_KILL_FRAME(2)
  2053                                  
  2054                                  make_real:
  2055                                          ENTER
    33 00001B95 C8000000            <1>  enter 0, 0
    34 00001B99 4883E4F0            <1>  and rsp, ~15
  2056 00001B9D BF09000000                      mov rdi, (1 + 8)
  2057 00001BA2 E898EAFFFF                      call malloc
  2058 00001BA7 C60012                          mov byte [rax], T_real
  2059 00001BAA F20F114001                      movsd qword [rax + 1], xmm0
  2060                                          LEAVE
    38 00001BAF C9                  <1>  leave
  2061 00001BB0 C3                              ret
  2062                                          
  2063                                  make_integer:
  2064                                          ENTER
    33 00001BB1 C8000000            <1>  enter 0, 0
    34 00001BB5 4883E4F0            <1>  and rsp, ~15
  2065 00001BB9 4889FE                          mov rsi, rdi
  2066 00001BBC BF11000000                      mov rdi, (1 + 8 + 8)
  2067 00001BC1 E879EAFFFF                      call malloc
  2068 00001BC6 C60011                          mov byte [rax], T_rational
  2069 00001BC9 48897001                        mov qword [rax + 1], rsi
  2070 00001BCD 48C7400901000000                mov qword [rax + 1 + 8], 1
  2071                                          LEAVE
    38 00001BD5 C9                  <1>  leave
  2072 00001BD6 C3                              ret
  2073                                          
  2074                                  L_error_integer_range:
  2075 00001BD7 488B3C25[00000000]              mov rdi, qword [stderr]
  2076 00001BDF 48BE-                           mov rsi, fmt_integer_range
  2076 00001BE1 [3503000000000000] 
  2077 00001BE9 B800000000                      mov rax, 0
  2078 00001BEE E8(00000000)                    call fprintf
  2079 00001BF3 48C7C0FBFFFFFF                  mov rax, -5
  2080 00001BFA E8(00000000)                    call exit
  2081                                  
  2082                                  L_error_arg_count_0:
  2083 00001BFF 488B3C25[00000000]              mov rdi, qword [stderr]
  2084 00001C07 48BE-                           mov rsi, fmt_arg_count_0
  2084 00001C09 [3302000000000000] 
  2085 00001C11 488B5518                        mov rdx, COUNT
  2086 00001C15 B800000000                      mov rax, 0
  2087 00001C1A E8(00000000)                    call fprintf
  2088 00001C1F 48C7C0FDFFFFFF                  mov rax, -3
  2089 00001C26 E8(00000000)                    call exit
  2090                                  
  2091                                  L_error_arg_count_1:
  2092 00001C2B 488B3C25[00000000]              mov rdi, qword [stderr]
  2093 00001C33 48BE-                           mov rsi, fmt_arg_count_1
  2093 00001C35 [5B02000000000000] 
  2094 00001C3D 488B5518                        mov rdx, COUNT
  2095 00001C41 B800000000                      mov rax, 0
  2096 00001C46 E8(00000000)                    call fprintf
  2097 00001C4B 48C7C0FDFFFFFF                  mov rax, -3
  2098 00001C52 E8(00000000)                    call exit
  2099                                  
  2100                                  L_error_arg_count_2:
  2101 00001C57 488B3C25[00000000]              mov rdi, qword [stderr]
  2102 00001C5F 48BE-                           mov rsi, fmt_arg_count_2
  2102 00001C61 [C102000000000000] 
  2103 00001C69 488B5518                        mov rdx, COUNT
  2104 00001C6D B800000000                      mov rax, 0
  2105 00001C72 E8(00000000)                    call fprintf
  2106 00001C77 48C7C0FDFFFFFF                  mov rax, -3
  2107 00001C7E E8(00000000)                    call exit
  2108                                  
  2109                                  L_error_arg_count_12:
  2110 00001C83 488B3C25[00000000]              mov rdi, qword [stderr]
  2111 00001C8B 48BE-                           mov rsi, fmt_arg_count_12
  2111 00001C8D [8102000000000000] 
  2112 00001C95 488B5518                        mov rdx, COUNT
  2113 00001C99 B800000000                      mov rax, 0
  2114 00001C9E E8(00000000)                    call fprintf
  2115 00001CA3 48C7C0FDFFFFFF                  mov rax, -3
  2116 00001CAA E8(00000000)                    call exit
  2117                                  
  2118                                  L_error_arg_count_3:
  2119 00001CAF 488B3C25[00000000]              mov rdi, qword [stderr]
  2120 00001CB7 48BE-                           mov rsi, fmt_arg_count_3
  2120 00001CB9 [E802000000000000] 
  2121 00001CC1 488B5518                        mov rdx, COUNT
  2122 00001CC5 B800000000                      mov rax, 0
  2123 00001CCA E8(00000000)                    call fprintf
  2124 00001CCF 48C7C0FDFFFFFF                  mov rax, -3
  2125 00001CD6 E8(00000000)                    call exit
  2126                                          
  2127                                  L_error_incorrect_type:
  2128 00001CDB 488B3C25[00000000]              mov rdi, qword [stderr]
  2129 00001CE3 48BE-                           mov rsi, fmt_type
  2129 00001CE5 [1103000000000000] 
  2130 00001CED B800000000                      mov rax, 0
  2131 00001CF2 E8(00000000)                    call fprintf
  2132 00001CF7 48C7C0FCFFFFFF                  mov rax, -4
  2133 00001CFE E8(00000000)                    call exit
  2134                                  
  2135                                  L_error_division_by_zero:
  2136 00001D03 488B3C25[00000000]              mov rdi, qword [stderr]
  2137 00001D0B 48BE-                           mov rsi, fmt_division_by_zero
  2137 00001D0D [5203000000000000] 
  2138 00001D15 B800000000                      mov rax, 0
  2139 00001D1A E8(00000000)                    call fprintf
  2140 00001D1F 48C7C0F8FFFFFF                  mov rax, -8
  2141 00001D26 E8(00000000)                    call exit
  2142                                  
  2143                                  section .data
  2144                                  fmt_char:
  2145 00000230 256300                          db `%c\0`
  2146                                  fmt_arg_count_0:
  2147 00000233 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2147 0000023C 74696E67207A65726F-
  2147 00000245 20617267756D656E74-
  2147 0000024E 732E20466F756E6420-
  2147 00000257 25640A00           
  2148                                  fmt_arg_count_1:
  2149 0000025B 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2149 00000264 74696E67206F6E6520-
  2149 0000026D 617267756D656E742E-
  2149 00000276 20466F756E64202564-
  2149 0000027F 0A00               
  2150                                  fmt_arg_count_12:
  2151 00000281 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2151 0000028A 74696E67206F6E6520-
  2151 00000293 726571756972656420-
  2151 0000029C 616E64206F6E65206F-
  2151 000002A5 7074696F6E616C2061-
  2151 000002AE 7267756D656E742E20-
  2151 000002B7 466F756E642025640A-
  2151 000002C0 00                 
  2152                                  fmt_arg_count_2:
  2153 000002C1 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2153 000002CA 74696E672074776F20-
  2153 000002D3 617267756D656E7473-
  2153 000002DC 2E20466F756E642025-
  2153 000002E5 640A00             
  2154                                  fmt_arg_count_3:
  2155 000002E8 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2155 000002F1 74696E672074687265-
  2155 000002FA 6520617267756D656E-
  2155 00000303 74732E20466F756E64-
  2155 0000030C 2025640A00         
  2156                                  fmt_type:
  2157 00000311 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2157 0000031A 696F6E207061737365-
  2157 00000323 6420696E636F727265-
  2157 0000032C 637420747970650A00 
  2158                                  fmt_integer_range:
  2159 00000335 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2159 0000033E 7265637420696E7465-
  2159 00000347 6765722072616E6765-
  2159 00000350 0A00               
  2160                                  fmt_division_by_zero:
  2161 00000352 212121204469766973-             db `!!! Division by zero\n\0`
  2161 0000035B 696F6E206279207A65-
  2161 00000364 726F0A00           
  2162                                  fmt_scheme_error_part_1:
  2163 00000368 0A2121212054686520-             db `\n!!! The procedure \0`
  2163 00000371 70726F636564757265-
  2163 0000037A 2000               
  2164                                  fmt_scheme_error_part_2:
  2165 0000037C 2061736B656420746F-             db ` asked to terminate the program\n`
  2165 00000385 207465726D696E6174-
  2165 0000038E 65207468652070726F-
  2165 00000397 6772616D0A         
  2166 0000039C 202020207769746820-             db `    with the following message:\n\n\0`
  2166 000003A5 74686520666F6C6C6F-
  2166 000003AE 77696E67206D657373-
  2166 000003B7 6167653A0A0A00     
  2167                                  fmt_scheme_error_part_3:
  2168 000003BE 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2168 000003C7 210A0A00           
