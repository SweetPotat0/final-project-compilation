     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %macro PRINT_TEST 2
    18                                          push rax
    19                                          push rbx
    20                                          push rcx
    21                                          push rdx
    22                                          push rdi
    23                                          push rsi
    24                                          mov rdi, qword [stderr]
    25                                          mov rsi, fmt_test
    26                                          mov rdx, %1
    27                                          mov rcx, %2
    28                                          mov rax, 0
    29                                          ENTER
    30                                          call fprintf
    31                                          LEAVE
    32                                          pop rsi
    33                                          pop rdi
    34                                          pop rdx
    35                                          pop rcx
    36                                          pop rbx
    37                                          pop rax
    38                                  %endmacro
    39                                  
    40                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    41                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    42                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    43                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    44                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    45                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    46                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    47                                  
    48                                  %define OLD_RDP 			qword [rbp]
    49                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    50                                  %define ENV 				qword [rbp + 8 * 2]
    51                                  %define COUNT 				qword [rbp + 8 * 3]
    52                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    53                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    54                                  
    55                                  %macro ENTER 0
    56                                  	enter 0, 0
    57                                  	and rsp, ~15
    58                                  %endmacro
    59                                  
    60                                  %macro LEAVE 0
    61                                  	leave
    62                                  %endmacro
    63                                  
    64                                  %macro assert_type 2
    65                                          cmp byte [%1], %2
    66                                          jne L_error_incorrect_type
    67                                  %endmacro
    68                                  
    69                                  %macro assert_type_integer 1
    70                                          assert_rational(%1)
    71                                          cmp qword [%1 + 1 + 8], 1
    72                                          jne L_error_incorrect_type
    73                                  %endmacro
    74                                  
    75                                  %define assert_void(reg)		assert_type reg, T_void
    76                                  %define assert_nil(reg)			assert_type reg, T_nil
    77                                  %define assert_char(reg)		assert_type reg, T_char
    78                                  %define assert_string(reg)		assert_type reg, T_string
    79                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    80                                  %define assert_closure(reg)		assert_type reg, T_closure
    81                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    82                                  %define assert_rational(reg)		assert_type reg, T_rational
    83                                  %define assert_integer(reg)		assert_type_integer reg
    84                                  %define assert_real(reg)		assert_type reg, T_real
    85                                  %define assert_pair(reg)		assert_type reg, T_pair
    86                                  %define assert_vector(reg)		assert_type reg, T_vector
    87                                  
    88                                  %define sob_void			(L_constants + 0)
    89                                  %define sob_nil				(L_constants + 1)
    90                                  %define sob_boolean_false		(L_constants + 2)
    91                                  %define sob_boolean_true		(L_constants + 3)
    92                                  %define sob_char_nul			(L_constants + 4)
    93                                  
    94                                  %define bytes(n)			(n)
    95                                  %define kbytes(n) 			(bytes(n) << 10)
    96                                  %define mbytes(n) 			(kbytes(n) << 10)
    97                                  %define gbytes(n) 			(mbytes(n) << 10)
    98                                  
    99                                  section .data
   100                                  L_constants:
   101 00000000 00                      	db T_void
   102 00000001 01                      	db T_nil
   103 00000002 09                      	db T_boolean_false
   104 00000003 0A                      	db T_boolean_true
   105 00000004 0200                    	db T_char, 0x00	; #\x0
   106 00000006 09                      	db T_boolean_false
   107 00000007 03                      	db T_string	; "whatever"
   108 00000008 0800000000000000        	dq 8
   109 00000010 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   110 00000018 04                      	db T_symbol	; whatever
   111 00000019 [0700000000000000]      	dq L_constants + 7
   112 00000021 11                      	db T_rational	; 0
   113 00000022 000000000000000001-     	dq 0, 1
   113 0000002B 00000000000000     
   114 00000032 03                      	db T_string	; "+"
   115 00000033 0100000000000000        	dq 1
   116 0000003B 2B                      	db 0x2B
   117 0000003C 04                      	db T_symbol	; +
   118 0000003D [3200000000000000]      	dq L_constants + 50
   119 00000045 03                      	db T_string	; "all arguments need ...
   120 00000046 2000000000000000        	dq 32
   121 0000004E 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   122 00000056 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   123 0000005E 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   124 00000066 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   125 0000006E 11                      	db T_rational	; 1
   126 0000006F 010000000000000001-     	dq 1, 1
   126 00000078 00000000000000     
   127 0000007F 11                      	db T_rational	; 2
   128 00000080 020000000000000001-     	dq 2, 1
   128 00000089 00000000000000     
   129 00000090 11                      	db T_rational	; 3
   130 00000091 030000000000000001-     	dq 3, 1
   130 0000009A 00000000000000     
   131 000000A1 21                      	db T_pair	; (3)
   132 000000A2 [9000000000000000]-     	dq L_constants + 144, L_constants + 1
   132 000000AA [0100000000000000] 
   133 000000B2 21                      	db T_pair	; (2 3)
   134 000000B3 [7F00000000000000]-     	dq L_constants + 127, L_constants + 161
   134 000000BB [A100000000000000] 
   135 000000C3 21                      	db T_pair	; (1 2 3)
   136 000000C4 [6E00000000000000]-     	dq L_constants + 110, L_constants + 178
   136 000000CC [B200000000000000] 
   137                                  
   138                                  section .bss
   139                                  free_var_0:	; location of null?
   140 00000000 ????????????????        	resq 1
   141                                  free_var_1:	; location of pair?
   142 00000008 ????????????????        	resq 1
   143                                  free_var_2:	; location of void?
   144 00000010 ????????????????        	resq 1
   145                                  free_var_3:	; location of char?
   146 00000018 ????????????????        	resq 1
   147                                  free_var_4:	; location of string?
   148 00000020 ????????????????        	resq 1
   149                                  free_var_5:	; location of symbol?
   150 00000028 ????????????????        	resq 1
   151                                  free_var_6:	; location of vector?
   152 00000030 ????????????????        	resq 1
   153                                  free_var_7:	; location of procedure?
   154 00000038 ????????????????        	resq 1
   155                                  free_var_8:	; location of real?
   156 00000040 ????????????????        	resq 1
   157                                  free_var_9:	; location of rational?
   158 00000048 ????????????????        	resq 1
   159                                  free_var_10:	; location of boolean?
   160 00000050 ????????????????        	resq 1
   161                                  free_var_11:	; location of number?
   162 00000058 ????????????????        	resq 1
   163                                  free_var_12:	; location of collection?
   164 00000060 ????????????????        	resq 1
   165                                  free_var_13:	; location of cons
   166 00000068 ????????????????        	resq 1
   167                                  free_var_14:	; location of display-sexpr
   168 00000070 ????????????????        	resq 1
   169                                  free_var_15:	; location of write-char
   170 00000078 ????????????????        	resq 1
   171                                  free_var_16:	; location of car
   172 00000080 ????????????????        	resq 1
   173                                  free_var_17:	; location of cdr
   174 00000088 ????????????????        	resq 1
   175                                  free_var_18:	; location of string-length
   176 00000090 ????????????????        	resq 1
   177                                  free_var_19:	; location of vector-length
   178 00000098 ????????????????        	resq 1
   179                                  free_var_20:	; location of real->integer
   180 000000A0 ????????????????        	resq 1
   181                                  free_var_21:	; location of exit
   182 000000A8 ????????????????        	resq 1
   183                                  free_var_22:	; location of integer->real
   184 000000B0 ????????????????        	resq 1
   185                                  free_var_23:	; location of rational->real
   186 000000B8 ????????????????        	resq 1
   187                                  free_var_24:	; location of char->integer
   188 000000C0 ????????????????        	resq 1
   189                                  free_var_25:	; location of integer->char
   190 000000C8 ????????????????        	resq 1
   191                                  free_var_26:	; location of trng
   192 000000D0 ????????????????        	resq 1
   193                                  free_var_27:	; location of zero?
   194 000000D8 ????????????????        	resq 1
   195                                  free_var_28:	; location of integer?
   196 000000E0 ????????????????        	resq 1
   197                                  free_var_29:	; location of __bin-apply
   198 000000E8 ????????????????        	resq 1
   199                                  free_var_30:	; location of __bin-add-rr
   200 000000F0 ????????????????        	resq 1
   201                                  free_var_31:	; location of __bin-sub-rr
   202 000000F8 ????????????????        	resq 1
   203                                  free_var_32:	; location of __bin-mul-rr
   204 00000100 ????????????????        	resq 1
   205                                  free_var_33:	; location of __bin-div-rr
   206 00000108 ????????????????        	resq 1
   207                                  free_var_34:	; location of __bin-add-qq
   208 00000110 ????????????????        	resq 1
   209                                  free_var_35:	; location of __bin-sub-qq
   210 00000118 ????????????????        	resq 1
   211                                  free_var_36:	; location of __bin-mul-qq
   212 00000120 ????????????????        	resq 1
   213                                  free_var_37:	; location of __bin-div-qq
   214 00000128 ????????????????        	resq 1
   215                                  free_var_38:	; location of error
   216 00000130 ????????????????        	resq 1
   217                                  free_var_39:	; location of __bin-less-than-rr
   218 00000138 ????????????????        	resq 1
   219                                  free_var_40:	; location of __bin-less-than-qq
   220 00000140 ????????????????        	resq 1
   221                                  free_var_41:	; location of __bin-equal-rr
   222 00000148 ????????????????        	resq 1
   223                                  free_var_42:	; location of __bin-equal-qq
   224 00000150 ????????????????        	resq 1
   225                                  free_var_43:	; location of quotient
   226 00000158 ????????????????        	resq 1
   227                                  free_var_44:	; location of remainder
   228 00000160 ????????????????        	resq 1
   229                                  free_var_45:	; location of set-car!
   230 00000168 ????????????????        	resq 1
   231                                  free_var_46:	; location of set-cdr!
   232 00000170 ????????????????        	resq 1
   233                                  free_var_47:	; location of string-ref
   234 00000178 ????????????????        	resq 1
   235                                  free_var_48:	; location of vector-ref
   236 00000180 ????????????????        	resq 1
   237                                  free_var_49:	; location of vector-set!
   238 00000188 ????????????????        	resq 1
   239                                  free_var_50:	; location of string-set!
   240 00000190 ????????????????        	resq 1
   241                                  free_var_51:	; location of make-vector
   242 00000198 ????????????????        	resq 1
   243                                  free_var_52:	; location of make-string
   244 000001A0 ????????????????        	resq 1
   245                                  free_var_53:	; location of numerator
   246 000001A8 ????????????????        	resq 1
   247                                  free_var_54:	; location of denominator
   248 000001B0 ????????????????        	resq 1
   249                                  free_var_55:	; location of eq?
   250 000001B8 ????????????????        	resq 1
   251                                  free_var_56:	; location of ormap
   252 000001C0 ????????????????        	resq 1
   253                                  free_var_57:	; location of pair?
   254 000001C8 ????????????????        	resq 1
   255                                  free_var_58:	; location of car
   256 000001D0 ????????????????        	resq 1
   257                                  free_var_59:	; location of apply
   258 000001D8 ????????????????        	resq 1
   259                                  free_var_60:	; location of map
   260 000001E0 ????????????????        	resq 1
   261                                  free_var_61:	; location of car
   262 000001E8 ????????????????        	resq 1
   263                                  free_var_62:	; location of map
   264 000001F0 ????????????????        	resq 1
   265                                  free_var_63:	; location of cdr
   266 000001F8 ????????????????        	resq 1
   267                                  free_var_64:	; location of andmap
   268 00000200 ????????????????        	resq 1
   269                                  free_var_65:	; location of null?
   270 00000208 ????????????????        	resq 1
   271                                  free_var_66:	; location of car
   272 00000210 ????????????????        	resq 1
   273                                  free_var_67:	; location of apply
   274 00000218 ????????????????        	resq 1
   275                                  free_var_68:	; location of map
   276 00000220 ????????????????        	resq 1
   277                                  free_var_69:	; location of car
   278 00000228 ????????????????        	resq 1
   279                                  free_var_70:	; location of map
   280 00000230 ????????????????        	resq 1
   281                                  free_var_71:	; location of cdr
   282 00000238 ????????????????        	resq 1
   283                                  free_var_72:	; location of map
   284 00000240 ????????????????        	resq 1
   285                                  free_var_73:	; location of null?
   286 00000248 ????????????????        	resq 1
   287                                  free_var_74:	; location of cons
   288 00000250 ????????????????        	resq 1
   289                                  free_var_75:	; location of car
   290 00000258 ????????????????        	resq 1
   291                                  free_var_76:	; location of cdr
   292 00000260 ????????????????        	resq 1
   293                                  free_var_77:	; location of null?
   294 00000268 ????????????????        	resq 1
   295                                  free_var_78:	; location of car
   296 00000270 ????????????????        	resq 1
   297                                  free_var_79:	; location of cons
   298 00000278 ????????????????        	resq 1
   299                                  free_var_80:	; location of apply
   300 00000280 ????????????????        	resq 1
   301                                  free_var_81:	; location of car
   302 00000288 ????????????????        	resq 1
   303                                  free_var_82:	; location of cdr
   304 00000290 ????????????????        	resq 1
   305                                  free_var_83:	; location of null?
   306 00000298 ????????????????        	resq 1
   307                                  free_var_84:	; location of append
   308 000002A0 ????????????????        	resq 1
   309                                  free_var_85:	; location of null?
   310 000002A8 ????????????????        	resq 1
   311                                  free_var_86:	; location of car
   312 000002B0 ????????????????        	resq 1
   313                                  free_var_87:	; location of cdr
   314 000002B8 ????????????????        	resq 1
   315                                  free_var_88:	; location of null?
   316 000002C0 ????????????????        	resq 1
   317                                  free_var_89:	; location of cons
   318 000002C8 ????????????????        	resq 1
   319                                  free_var_90:	; location of car
   320 000002D0 ????????????????        	resq 1
   321                                  free_var_91:	; location of cdr
   322 000002D8 ????????????????        	resq 1
   323                                  free_var_92:	; location of null?
   324 000002E0 ????????????????        	resq 1
   325                                  free_var_93:	; location of car
   326 000002E8 ????????????????        	resq 1
   327                                  free_var_94:	; location of cdr
   328 000002F0 ????????????????        	resq 1
   329                                  free_var_95:	; location of fold-left
   330 000002F8 ????????????????        	resq 1
   331                                  free_var_96:	; location of ormap
   332 00000300 ????????????????        	resq 1
   333                                  free_var_97:	; location of null?
   334 00000308 ????????????????        	resq 1
   335                                  free_var_98:	; location of apply
   336 00000310 ????????????????        	resq 1
   337                                  free_var_99:	; location of map
   338 00000318 ????????????????        	resq 1
   339                                  free_var_100:	; location of car
   340 00000320 ????????????????        	resq 1
   341                                  free_var_101:	; location of map
   342 00000328 ????????????????        	resq 1
   343                                  free_var_102:	; location of cdr
   344 00000330 ????????????????        	resq 1
   345                                  free_var_103:	; location of +
   346 00000338 ????????????????        	resq 1
   347                                  free_var_104:	; location of fold-left
   348 00000340 ????????????????        	resq 1
   349                                  free_var_105:	; location of rational?
   350 00000348 ????????????????        	resq 1
   351                                  free_var_106:	; location of rational?
   352 00000350 ????????????????        	resq 1
   353                                  free_var_107:	; location of __bin-add-qq
   354 00000358 ????????????????        	resq 1
   355                                  free_var_108:	; location of real?
   356 00000360 ????????????????        	resq 1
   357                                  free_var_109:	; location of __bin-add-rr
   358 00000368 ????????????????        	resq 1
   359                                  free_var_110:	; location of rational->real
   360 00000370 ????????????????        	resq 1
   361                                  free_var_111:	; location of real?
   362 00000378 ????????????????        	resq 1
   363                                  free_var_112:	; location of rational?
   364 00000380 ????????????????        	resq 1
   365                                  free_var_113:	; location of __bin-add-rr
   366 00000388 ????????????????        	resq 1
   367                                  free_var_114:	; location of rational->real
   368 00000390 ????????????????        	resq 1
   369                                  free_var_115:	; location of real?
   370 00000398 ????????????????        	resq 1
   371                                  free_var_116:	; location of __bin-add-rr
   372 000003A0 ????????????????        	resq 1
   373                                  free_var_117:	; location of error
   374 000003A8 ????????????????        	resq 1
   375                                  free_var_118:	; location of apply
   376 000003B0 ????????????????        	resq 1
   377                                  free_var_119:	; location of +
   378 000003B8 ????????????????        	resq 1
   379                                  
   380                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   381                                  global main
   382                                  section .text
   383                                  main:
   384 00000000 C8000000                        enter 0, 0
   385                                          
   386                                  	; building closure for null?
   387 00000004 48BF-                   	mov rdi, free_var_0
   387 00000006 [0000000000000000] 
   388 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   388 00000010 [0634000000000000] 
   389 00000018 E8C7320000              	call bind_primitive
   390                                  
   391                                  	; building closure for pair?
   392 0000001D 48BF-                   	mov rdi, free_var_1
   392 0000001F [0800000000000000] 
   393 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   393 00000029 [3C34000000000000] 
   394 00000031 E8AE320000              	call bind_primitive
   395                                  
   396                                  	; building closure for void?
   397 00000036 48BF-                   	mov rdi, free_var_2
   397 00000038 [1000000000000000] 
   398 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   398 00000042 [7234000000000000] 
   399 0000004A E895320000              	call bind_primitive
   400                                  
   401                                  	; building closure for char?
   402 0000004F 48BF-                   	mov rdi, free_var_3
   402 00000051 [1800000000000000] 
   403 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   403 0000005B [A834000000000000] 
   404 00000063 E87C320000              	call bind_primitive
   405                                  
   406                                  	; building closure for string?
   407 00000068 48BF-                   	mov rdi, free_var_4
   407 0000006A [2000000000000000] 
   408 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   408 00000074 [DE34000000000000] 
   409 0000007C E863320000              	call bind_primitive
   410                                  
   411                                  	; building closure for symbol?
   412 00000081 48BF-                   	mov rdi, free_var_5
   412 00000083 [2800000000000000] 
   413 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   413 0000008D [1435000000000000] 
   414 00000095 E84A320000              	call bind_primitive
   415                                  
   416                                  	; building closure for vector?
   417 0000009A 48BF-                   	mov rdi, free_var_6
   417 0000009C [3000000000000000] 
   418 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   418 000000A6 [4A35000000000000] 
   419 000000AE E831320000              	call bind_primitive
   420                                  
   421                                  	; building closure for procedure?
   422 000000B3 48BF-                   	mov rdi, free_var_7
   422 000000B5 [3800000000000000] 
   423 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   423 000000BF [8035000000000000] 
   424 000000C7 E818320000              	call bind_primitive
   425                                  
   426                                  	; building closure for real?
   427 000000CC 48BF-                   	mov rdi, free_var_8
   427 000000CE [4000000000000000] 
   428 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   428 000000D8 [B635000000000000] 
   429 000000E0 E8FF310000              	call bind_primitive
   430                                  
   431                                  	; building closure for rational?
   432 000000E5 48BF-                   	mov rdi, free_var_9
   432 000000E7 [4800000000000000] 
   433 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   433 000000F1 [EC35000000000000] 
   434 000000F9 E8E6310000              	call bind_primitive
   435                                  
   436                                  	; building closure for boolean?
   437 000000FE 48BF-                   	mov rdi, free_var_10
   437 00000100 [5000000000000000] 
   438 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   438 0000010A [2236000000000000] 
   439 00000112 E8CD310000              	call bind_primitive
   440                                  
   441                                  	; building closure for number?
   442 00000117 48BF-                   	mov rdi, free_var_11
   442 00000119 [5800000000000000] 
   443 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   443 00000123 [5A36000000000000] 
   444 0000012B E8B4310000              	call bind_primitive
   445                                  
   446                                  	; building closure for collection?
   447 00000130 48BF-                   	mov rdi, free_var_12
   447 00000132 [6000000000000000] 
   448 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   448 0000013C [9236000000000000] 
   449 00000144 E89B310000              	call bind_primitive
   450                                  
   451                                  	; building closure for cons
   452 00000149 48BF-                   	mov rdi, free_var_13
   452 0000014B [6800000000000000] 
   453 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   453 00000155 [CA36000000000000] 
   454 0000015D E882310000              	call bind_primitive
   455                                  
   456                                  	; building closure for display-sexpr
   457 00000162 48BF-                   	mov rdi, free_var_14
   457 00000164 [7000000000000000] 
   458 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   458 0000016E [FE36000000000000] 
   459 00000176 E869310000              	call bind_primitive
   460                                  
   461                                  	; building closure for write-char
   462 0000017B 48BF-                   	mov rdi, free_var_15
   462 0000017D [7800000000000000] 
   463 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   463 00000187 [2837000000000000] 
   464 0000018F E850310000              	call bind_primitive
   465                                  
   466                                  	; building closure for car
   467 00000194 48BF-                   	mov rdi, free_var_16
   467 00000196 [8000000000000000] 
   468 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   468 000001A0 [7F37000000000000] 
   469 000001A8 E837310000              	call bind_primitive
   470                                  
   471                                  	; building closure for cdr
   472 000001AD 48BF-                   	mov rdi, free_var_17
   472 000001AF [8800000000000000] 
   473 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   473 000001B9 [A737000000000000] 
   474 000001C1 E81E310000              	call bind_primitive
   475                                  
   476                                  	; building closure for string-length
   477 000001C6 48BF-                   	mov rdi, free_var_18
   477 000001C8 [9000000000000000] 
   478 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   478 000001D2 [CF37000000000000] 
   479 000001DA E805310000              	call bind_primitive
   480                                  
   481                                  	; building closure for vector-length
   482 000001DF 48BF-                   	mov rdi, free_var_19
   482 000001E1 [9800000000000000] 
   483 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   483 000001EB [FC37000000000000] 
   484 000001F3 E8EC300000              	call bind_primitive
   485                                  
   486                                  	; building closure for real->integer
   487 000001F8 48BF-                   	mov rdi, free_var_20
   487 000001FA [A000000000000000] 
   488 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   488 00000204 [2938000000000000] 
   489 0000020C E8D3300000              	call bind_primitive
   490                                  
   491                                  	; building closure for exit
   492 00000211 48BF-                   	mov rdi, free_var_21
   492 00000213 [A800000000000000] 
   493 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   493 0000021D [5C38000000000000] 
   494 00000225 E8BA300000              	call bind_primitive
   495                                  
   496                                  	; building closure for integer->real
   497 0000022A 48BF-                   	mov rdi, free_var_22
   497 0000022C [B000000000000000] 
   498 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   498 00000236 [7938000000000000] 
   499 0000023E E8A1300000              	call bind_primitive
   500                                  
   501                                  	; building closure for rational->real
   502 00000243 48BF-                   	mov rdi, free_var_23
   502 00000245 [B800000000000000] 
   503 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   503 0000024F [B638000000000000] 
   504 00000257 E888300000              	call bind_primitive
   505                                  
   506                                  	; building closure for char->integer
   507 0000025C 48BF-                   	mov rdi, free_var_24
   507 0000025E [C000000000000000] 
   508 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   508 00000268 [F538000000000000] 
   509 00000270 E86F300000              	call bind_primitive
   510                                  
   511                                  	; building closure for integer->char
   512 00000275 48BF-                   	mov rdi, free_var_25
   512 00000277 [C800000000000000] 
   513 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   513 00000281 [2A39000000000000] 
   514 00000289 E856300000              	call bind_primitive
   515                                  
   516                                  	; building closure for trng
   517 0000028E 48BF-                   	mov rdi, free_var_26
   517 00000290 [D000000000000000] 
   518 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   518 0000029A [8439000000000000] 
   519 000002A2 E83D300000              	call bind_primitive
   520                                  
   521                                  	; building closure for zero?
   522 000002A7 48BF-                   	mov rdi, free_var_27
   522 000002A9 [D800000000000000] 
   523 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   523 000002B3 [A739000000000000] 
   524 000002BB E824300000              	call bind_primitive
   525                                  
   526                                  	; building closure for integer?
   527 000002C0 48BF-                   	mov rdi, free_var_28
   527 000002C2 [E000000000000000] 
   528 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   528 000002CC [023A000000000000] 
   529 000002D4 E80B300000              	call bind_primitive
   530                                  
   531                                  	; building closure for __bin-apply
   532 000002D9 48BF-                   	mov rdi, free_var_29
   532 000002DB [E800000000000000] 
   533 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   533 000002E5 [0C33000000000000] 
   534 000002ED E8F22F0000              	call bind_primitive
   535                                  
   536                                  	; building closure for __bin-add-rr
   537 000002F2 48BF-                   	mov rdi, free_var_30
   537 000002F4 [F000000000000000] 
   538 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   538 000002FE [3F3A000000000000] 
   539 00000306 E8D92F0000              	call bind_primitive
   540                                  
   541                                  	; building closure for __bin-sub-rr
   542 0000030B 48BF-                   	mov rdi, free_var_31
   542 0000030D [F800000000000000] 
   543 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   543 00000317 [833A000000000000] 
   544 0000031F E8C02F0000              	call bind_primitive
   545                                  
   546                                  	; building closure for __bin-mul-rr
   547 00000324 48BF-                   	mov rdi, free_var_32
   547 00000326 [0001000000000000] 
   548 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   548 00000330 [C73A000000000000] 
   549 00000338 E8A72F0000              	call bind_primitive
   550                                  
   551                                  	; building closure for __bin-div-rr
   552 0000033D 48BF-                   	mov rdi, free_var_33
   552 0000033F [0801000000000000] 
   553 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   553 00000349 [0B3B000000000000] 
   554 00000351 E88E2F0000              	call bind_primitive
   555                                  
   556                                  	; building closure for __bin-add-qq
   557 00000356 48BF-                   	mov rdi, free_var_34
   557 00000358 [1001000000000000] 
   558 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   558 00000362 [5D3B000000000000] 
   559 0000036A E8752F0000              	call bind_primitive
   560                                  
   561                                  	; building closure for __bin-sub-qq
   562 0000036F 48BF-                   	mov rdi, free_var_35
   562 00000371 [1801000000000000] 
   563 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   563 0000037B [C53B000000000000] 
   564 00000383 E85C2F0000              	call bind_primitive
   565                                  
   566                                  	; building closure for __bin-mul-qq
   567 00000388 48BF-                   	mov rdi, free_var_36
   567 0000038A [2001000000000000] 
   568 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   568 00000394 [2D3C000000000000] 
   569 0000039C E8432F0000              	call bind_primitive
   570                                  
   571                                  	; building closure for __bin-div-qq
   572 000003A1 48BF-                   	mov rdi, free_var_37
   572 000003A3 [2801000000000000] 
   573 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   573 000003AD [853C000000000000] 
   574 000003B5 E82A2F0000              	call bind_primitive
   575                                  
   576                                  	; building closure for error
   577 000003BA 48BF-                   	mov rdi, free_var_38
   577 000003BC [3001000000000000] 
   578 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   578 000003C6 [533D000000000000] 
   579 000003CE E8112F0000              	call bind_primitive
   580                                  
   581                                  	; building closure for __bin-less-than-rr
   582 000003D3 48BF-                   	mov rdi, free_var_39
   582 000003D5 [3801000000000000] 
   583 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   583 000003DF [0A3E000000000000] 
   584 000003E7 E8F82E0000              	call bind_primitive
   585                                  
   586                                  	; building closure for __bin-less-than-qq
   587 000003EC 48BF-                   	mov rdi, free_var_40
   587 000003EE [4001000000000000] 
   588 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   588 000003F8 [613E000000000000] 
   589 00000400 E8DF2E0000              	call bind_primitive
   590                                  
   591                                  	; building closure for __bin-equal-rr
   592 00000405 48BF-                   	mov rdi, free_var_41
   592 00000407 [4801000000000000] 
   593 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   593 00000411 [C43E000000000000] 
   594 00000419 E8C62E0000              	call bind_primitive
   595                                  
   596                                  	; building closure for __bin-equal-qq
   597 0000041E 48BF-                   	mov rdi, free_var_42
   597 00000420 [5001000000000000] 
   598 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   598 0000042A [1B3F000000000000] 
   599 00000432 E8AD2E0000              	call bind_primitive
   600                                  
   601                                  	; building closure for quotient
   602 00000437 48BF-                   	mov rdi, free_var_43
   602 00000439 [5801000000000000] 
   603 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   603 00000443 [7E3F000000000000] 
   604 0000044B E8942E0000              	call bind_primitive
   605                                  
   606                                  	; building closure for remainder
   607 00000450 48BF-                   	mov rdi, free_var_44
   607 00000452 [6001000000000000] 
   608 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   608 0000045C [E43F000000000000] 
   609 00000464 E87B2E0000              	call bind_primitive
   610                                  
   611                                  	; building closure for set-car!
   612 00000469 48BF-                   	mov rdi, free_var_45
   612 0000046B [6801000000000000] 
   613 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   613 00000475 [4A40000000000000] 
   614 0000047D E8622E0000              	call bind_primitive
   615                                  
   616                                  	; building closure for set-cdr!
   617 00000482 48BF-                   	mov rdi, free_var_46
   617 00000484 [7001000000000000] 
   618 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   618 0000048E [8040000000000000] 
   619 00000496 E8492E0000              	call bind_primitive
   620                                  
   621                                  	; building closure for string-ref
   622 0000049B 48BF-                   	mov rdi, free_var_47
   622 0000049D [7801000000000000] 
   623 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   623 000004A7 [B640000000000000] 
   624 000004AF E8302E0000              	call bind_primitive
   625                                  
   626                                  	; building closure for vector-ref
   627 000004B4 48BF-                   	mov rdi, free_var_48
   627 000004B6 [8001000000000000] 
   628 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   628 000004C0 [2141000000000000] 
   629 000004C8 E8172E0000              	call bind_primitive
   630                                  
   631                                  	; building closure for vector-set!
   632 000004CD 48BF-                   	mov rdi, free_var_49
   632 000004CF [8801000000000000] 
   633 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   633 000004D9 [7D41000000000000] 
   634 000004E1 E8FE2D0000              	call bind_primitive
   635                                  
   636                                  	; building closure for string-set!
   637 000004E6 48BF-                   	mov rdi, free_var_50
   637 000004E8 [9001000000000000] 
   638 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   638 000004F2 [E741000000000000] 
   639 000004FA E8E52D0000              	call bind_primitive
   640                                  
   641                                  	; building closure for make-vector
   642 000004FF 48BF-                   	mov rdi, free_var_51
   642 00000501 [9801000000000000] 
   643 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   643 0000050B [5C42000000000000] 
   644 00000513 E8CC2D0000              	call bind_primitive
   645                                  
   646                                  	; building closure for make-string
   647 00000518 48BF-                   	mov rdi, free_var_52
   647 0000051A [A001000000000000] 
   648 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   648 00000524 [C642000000000000] 
   649 0000052C E8B32D0000              	call bind_primitive
   650                                  
   651                                  	; building closure for numerator
   652 00000531 48BF-                   	mov rdi, free_var_53
   652 00000533 [A801000000000000] 
   653 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   653 0000053D [3843000000000000] 
   654 00000545 E89A2D0000              	call bind_primitive
   655                                  
   656                                  	; building closure for denominator
   657 0000054A 48BF-                   	mov rdi, free_var_54
   657 0000054C [B001000000000000] 
   658 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   658 00000556 [6543000000000000] 
   659 0000055E E8812D0000              	call bind_primitive
   660                                  
   661                                  	; building closure for eq?
   662 00000563 48BF-                   	mov rdi, free_var_55
   662 00000565 [B801000000000000] 
   663 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   663 0000056F [9243000000000000] 
   664 00000577 E8682D0000              	call bind_primitive
   665                                  
   666 0000057C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   667 00000581 E8CD270000              	call malloc
   668 00000586 50                      	push rax
   669 00000587 BF00000000              	mov rdi, 8 * 0	; new rib
   670 0000058C E8C2270000              	call malloc
   671 00000591 50                      	push rax
   672 00000592 BF08000000              	mov rdi, 8 * 1	; extended env
   673 00000597 E8B7270000              	call malloc
   674 0000059C 488B7D10                	mov rdi, ENV
   675 000005A0 BE00000000              	mov rsi, 0
   676 000005A5 BA01000000              	mov rdx, 1
   677                                  .L_lambda_opt_env_loop_0156:	; ext_env[i + 1] <-- env[i]
   678 000005AA 4883FE00                	cmp rsi, 0
   679 000005AE 7410                    	je .L_lambda_opt_env_end_0156
   680 000005B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
   681 000005B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
   682 000005B8 48FFC6                  	inc rsi
   683 000005BB 48FFC2                  	inc rdx
   684 000005BE EBEA                    	jmp .L_lambda_opt_env_loop_0156
   685                                  .L_lambda_opt_env_end_0156:
   686 000005C0 5B                      	pop rbx
   687 000005C1 BE00000000              	mov rsi, 0
   688                                  .L_lambda_opt_params_loop_0156:	; copy params
   689 000005C6 4883FE00                	cmp rsi, 0
   690 000005CA 740E                    	je .L_lambda_opt_params_end_0156
   691 000005CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   692 000005D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
   693 000005D5 48FFC6                  	inc rsi
   694 000005D8 EBEC                    	jmp .L_lambda_opt_params_loop_0156
   695                                  .L_lambda_opt_params_end_0156:
   696 000005DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   697 000005DD 4889C3                  	mov rbx, rax
   698 000005E0 58                      	pop rax
   699 000005E1 C60005                  	mov byte [rax], T_closure
   700 000005E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   701 000005E8 48C74009[F5050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0156
   702 000005F0 E989040000              	jmp .L_lambda_opt_end_0156
   703                                  .L_lambda_opt_code_0156:	; lambda-simple body
   704 000005F5 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
   705 000005FA 4889FB                  	mov rbx, rdi
   706 000005FD 4883EB01                	sub rbx, 1
   707 00000601 7F46                    	jg .L_lambda_opt_arity_check_more_0156
   708                                  .L_lambda_opt_arity_check_exact_0156:	 ; if params in opt is exact
   709 00000603 4883EC08                	sub rsp, 8
   710 00000607 BE00000000              	mov rsi, 0 ; index
   711                                  .L_lambda_opt_stack_enlarge_loop_0156:	 ; stack loop enlarge start
   712 0000060C 4883FE04                	cmp rsi, 4
   713 00000610 7420                    	je .L_lambda_opt_stack_enlarge_loop_exit_0156
   714 00000612 4889F7                  	mov rdi, rsi
   715 00000615 48C1E703                	shl rdi, 3
   716 00000619 4801E7                  	add rdi, rsp
   717 0000061C 4883C708                	add rdi, 8
   718 00000620 4889FB                  	mov rbx, rdi
   719 00000623 4883EB08                	sub rbx, 8
   720 00000627 488B3F                  	mov rdi, [rdi]
   721 0000062A 48893B                  	mov [rbx], rdi
   722 0000062D 48FFC6                  	inc rsi
   723 00000630 EBDA                    	jmp .L_lambda_opt_stack_enlarge_loop_0156
   724                                  .L_lambda_opt_stack_enlarge_loop_exit_0156:	 ; end of stack enlarge loop
   725 00000632 48C7442420-             	mov qword [rsp + 4*8], sob_nil
   725 00000637 [01000000]         
   726 0000063B 48C744241002000000      	mov qword [rsp + 2*8], 2
   727 00000644 E99F000000              	jmp .L_lambda_opt_stack_adjusted_0156
   728                                  .L_lambda_opt_arity_check_more_0156:	 ; if params in opt is more
   729 00000649 48B8-                   	mov rax, sob_nil
   729 0000064B [0100000000000000] 
   730 00000653 4889DE                  	mov rsi, rbx ;index
   731 00000656 48FFCE                  	dec rsi
   732                                  .L_lambda_opt_list_create_loop_0156:	; start of list creation loop
   733 00000659 4883FEFF                	cmp rsi, -1
   734 0000065D 7422                    	je .L_lambda_opt_list_create_loop_exit_0156
   735 0000065F 488D4E04                	lea rcx, [rsi + (3 + 1)]
   736 00000663 48C1E103                	shl rcx, 3
   737 00000667 4801E1                  	add rcx, rsp
   738 0000066A 488B09                  	mov rcx, [rcx]
   739 0000066D 56                      	push rsi
   740 0000066E 53                      	push rbx
   741 0000066F 50                      	push rax
   742 00000670 51                      	push rcx
   743 00000671 6A02                    	push qword 2 ; push num of args
   744 00000673 6A01                    	push qword 1 ; push garbage
   745 00000675 E850300000              	call L_code_ptr_cons
   746 0000067A 5B                      	pop rbx
   747 0000067B 5E                      	pop rsi
   748 0000067C 48FFCE                  	dec rsi
   749 0000067F EBD8                    	jmp .L_lambda_opt_list_create_loop_0156
   750                                  .L_lambda_opt_list_create_loop_exit_0156:	; end of list creation loop
   751 00000681 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
   752 00000686 4883C302                	add rbx, 2
   753 0000068A 4889DF                  	mov rdi, rbx
   754 0000068D 48C1E703                	shl rdi,3
   755 00000691 4801E7                  	add rdi, rsp
   756 00000694 488907                  	mov [rdi], rax
   757 00000697 BE00000000              	mov rsi, 0 ;index
   758                                  .L_lambda_opt_stack_shrink_loop_0156:	; start of stack shrink loop
   759 0000069C 4883FE04                	cmp rsi, 4
   760 000006A0 742E                    	je .L_lambda_opt_stack_shrink_loop_exit_0156
   761 000006A2 BF03000000              	mov rdi, 3
   762 000006A7 4829F7                  	sub rdi, rsi; the index of the current stack member to move
   763 000006AA 4889D9                  	mov rcx, rbx
   764 000006AD 4829F1                  	sub rcx, rsi
   765 000006B0 4883E901                	sub rcx, 1; the index of the target stack place to put the member
   766 000006B4 4889FA                  	mov rdx, rdi
   767 000006B7 48C1E203                	shl rdx, 3
   768 000006BB 4801E2                  	add rdx, rsp
   769 000006BE 48C1E103                	shl rcx, 3
   770 000006C2 4801E1                  	add rcx, rsp
   771 000006C5 488B12                  	mov rdx, [rdx]
   772 000006C8 488911                  	mov [rcx], rdx
   773 000006CB 48FFC6                  	inc rsi
   774 000006CE EBCC                    	jmp .L_lambda_opt_stack_shrink_loop_0156
   775                                  .L_lambda_opt_stack_shrink_loop_exit_0156:	; end of stack shrink loop
   776 000006D0 4883EB02                	sub rbx, 2 ; rbx has number of args
   777 000006D4 4883EB02                	sub rbx, 2
   778 000006D8 48C1E303                	shl rbx, 3
   779 000006DC 4801DC                  	add rsp, rbx
   780 000006DF 48C744241002000000      	mov qword [rsp + 8 * 2], 2
   781                                  .L_lambda_opt_stack_adjusted_0156:
   782 000006E8 55                      	push rbp
   783 000006E9 4889E5                  	mov rbp, rsp
   784 000006EC 488D0425[18000000]      	lea rax, [24 + L_constants]
   785 000006F4 50                      	push rax
   786 000006F5 6A01                    	push 1
   787 000006F7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   788 000006FC E852260000              	call malloc
   789 00000701 50                      	push rax
   790 00000702 BF10000000              	mov rdi, 8 * 2	; new rib
   791 00000707 E847260000              	call malloc
   792 0000070C 50                      	push rax
   793 0000070D BF10000000              	mov rdi, 8 * 2	; extended env
   794 00000712 E83C260000              	call malloc
   795 00000717 488B7D10                	mov rdi, ENV
   796 0000071B BE00000000              	mov rsi, 0
   797 00000720 BA01000000              	mov rdx, 1
   798                                  .L_lambda_simple_env_loop_0234:	; ext_env[i + 1] <-- env[i]
   799 00000725 4883FE01                	cmp rsi, 1
   800 00000729 7410                    	je .L_lambda_simple_env_end_0234
   801 0000072B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
   802 0000072F 48890CD0                	mov qword [rax + 8 * rdx], rcx
   803 00000733 48FFC6                  	inc rsi
   804 00000736 48FFC2                  	inc rdx
   805 00000739 EBEA                    	jmp .L_lambda_simple_env_loop_0234
   806                                  .L_lambda_simple_env_end_0234:
   807 0000073B 5B                      	pop rbx
   808 0000073C BE00000000              	mov rsi, 0
   809                                  .L_lambda_simple_params_loop_0234:	; copy params
   810 00000741 4883FE02                	cmp rsi, 2
   811 00000745 740E                    	je .L_lambda_simple_params_end_0234
   812 00000747 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   813 0000074C 488914F3                	mov qword [rbx + 8 * rsi], rdx
   814 00000750 48FFC6                  	inc rsi
   815 00000753 EBEC                    	jmp .L_lambda_simple_params_loop_0234
   816                                  .L_lambda_simple_params_end_0234:
   817 00000755 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   818 00000758 4889C3                  	mov rbx, rax
   819 0000075B 58                      	pop rax
   820 0000075C C60005                  	mov byte [rax], T_closure
   821 0000075F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   822 00000763 48C74009[70070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0234
   823 0000076B E9A8020000              	jmp .L_lambda_simple_end_0234
   824                                  .L_lambda_simple_code_0234:	; lambda-simple body
   825 00000770 48837C241001            	cmp qword [rsp + 8 * 2], 1
   826 00000776 740B                    	je .L_lambda_simple_arity_check_ok_0234
   827 00000778 FF742410                	push qword [rsp + 8 * 2]
   828 0000077C 6A01                    	push 1
   829 0000077E E989250000              	jmp L_error_incorrect_arity_simple
   830                                  .L_lambda_simple_arity_check_ok_0234:
   831 00000783 C8000000                	enter 0, 0
   832 00000787 BF08000000              	mov qword rdi, 8
   833 0000078C E8C2250000              	call malloc
   834 00000791 48894520                	mov qword [rbp + 8*(4 + 0)], rax
   835 00000795 48B8-                   	mov rax, sob_void
   835 00000797 [0000000000000000] 
   836                                  
   837 0000079F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   838 000007A4 E8AA250000              	call malloc
   839 000007A9 50                      	push rax
   840 000007AA BF08000000              	mov rdi, 8 * 1	; new rib
   841 000007AF E89F250000              	call malloc
   842 000007B4 50                      	push rax
   843 000007B5 BF18000000              	mov rdi, 8 * 3	; extended env
   844 000007BA E894250000              	call malloc
   845 000007BF 488B7D10                	mov rdi, ENV
   846 000007C3 BE00000000              	mov rsi, 0
   847 000007C8 BA01000000              	mov rdx, 1
   848                                  .L_lambda_simple_env_loop_0235:	; ext_env[i + 1] <-- env[i]
   849 000007CD 4883FE02                	cmp rsi, 2
   850 000007D1 7410                    	je .L_lambda_simple_env_end_0235
   851 000007D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
   852 000007D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
   853 000007DB 48FFC6                  	inc rsi
   854 000007DE 48FFC2                  	inc rdx
   855 000007E1 EBEA                    	jmp .L_lambda_simple_env_loop_0235
   856                                  .L_lambda_simple_env_end_0235:
   857 000007E3 5B                      	pop rbx
   858 000007E4 BE00000000              	mov rsi, 0
   859                                  .L_lambda_simple_params_loop_0235:	; copy params
   860 000007E9 4883FE01                	cmp rsi, 1
   861 000007ED 740E                    	je .L_lambda_simple_params_end_0235
   862 000007EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   863 000007F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
   864 000007F8 48FFC6                  	inc rsi
   865 000007FB EBEC                    	jmp .L_lambda_simple_params_loop_0235
   866                                  .L_lambda_simple_params_end_0235:
   867 000007FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   868 00000800 4889C3                  	mov rbx, rax
   869 00000803 58                      	pop rax
   870 00000804 C60005                  	mov byte [rax], T_closure
   871 00000807 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   872 0000080B 48C74009[18080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0235
   873 00000813 E974010000              	jmp .L_lambda_simple_end_0235
   874                                  .L_lambda_simple_code_0235:	; lambda-simple body
   875 00000818 48837C241001            	cmp qword [rsp + 8 * 2], 1
   876 0000081E 740B                    	je .L_lambda_simple_arity_check_ok_0235
   877 00000820 FF742410                	push qword [rsp + 8 * 2]
   878 00000824 6A01                    	push 1
   879 00000826 E9E1240000              	jmp L_error_incorrect_arity_simple
   880                                  .L_lambda_simple_arity_check_ok_0235:
   881 0000082B C8000000                	enter 0, 0
   882 0000082F 488B4520                	mov rax, PARAM(0)
   883 00000833 50                      	push rax
   884 00000834 6A01                    	push 1
   885 00000836 488B0425[80000000]      	mov rax, qword [free_var_16]
   886                                  	assert_closure(rax)
    65 0000083E 803805              <1>  cmp byte [%1], %2
    66 00000841 0F857C3D0000        <1>  jne L_error_incorrect_type
   887 00000847 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   888 0000084B 53                      	push rbx
   889 0000084C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   890 00000850 FFD3                    	call rbx
   891 00000852 50                      	push rax
   892 00000853 6A01                    	push 1
   893 00000855 488B0425[08000000]      	mov rax, qword [free_var_1]
   894                                  	assert_closure(rax)
    65 0000085D 803805              <1>  cmp byte [%1], %2
    66 00000860 0F855D3D0000        <1>  jne L_error_incorrect_type
   895 00000866 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   896 0000086A 53                      	push rbx
   897 0000086B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   898 0000086F FFD3                    	call rbx
   899 00000871 483D[02000000]          	cmp rax, sob_boolean_false
   900 00000877 0F8403010000            	je .L_if_else_01ff
   901 0000087D 488B4520                	mov rax, PARAM(0)
   902 00000881 50                      	push rax
   903 00000882 488B0425[80000000]      	mov rax, qword [free_var_16]
   904 0000088A 50                      	push rax
   905 0000088B 6A02                    	push 2
   906 0000088D 488B0425[E0010000]      	mov rax, qword [free_var_60]
   907                                  	assert_closure(rax)
    65 00000895 803805              <1>  cmp byte [%1], %2
    66 00000898 0F85253D0000        <1>  jne L_error_incorrect_type
   908 0000089E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   909 000008A2 53                      	push rbx
   910 000008A3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   911 000008A7 FFD3                    	call rbx
   912 000008A9 50                      	push rax
   913 000008AA 488B4510                	mov rax, qword [rbp + 8*2]
   914 000008AE 488B4008                	mov rax, qword [rax + 8*1]
   915 000008B2 488B00                  	mov rax, qword [rax + 8*0]
   916 000008B5 50                      	push rax
   917 000008B6 6A02                    	push 2
   918 000008B8 488B0425[D8010000]      	mov rax, qword [free_var_59]
   919                                  	assert_closure(rax)
    65 000008C0 803805              <1>  cmp byte [%1], %2
    66 000008C3 0F85FA3C0000        <1>  jne L_error_incorrect_type
   920 000008C9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   921 000008CD 53                      	push rbx
   922 000008CE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   923 000008D2 FFD3                    	call rbx
   924 000008D4 483D[02000000]          	cmp rax, sob_boolean_false
   925 000008DA 0F859E000000            	jne .L_or_end_0045
   926 000008E0 488B4520                	mov rax, PARAM(0)
   927 000008E4 50                      	push rax
   928 000008E5 488B0425[88000000]      	mov rax, qword [free_var_17]
   929 000008ED 50                      	push rax
   930 000008EE 6A02                    	push 2
   931 000008F0 488B0425[E0010000]      	mov rax, qword [free_var_60]
   932                                  	assert_closure(rax)
    65 000008F8 803805              <1>  cmp byte [%1], %2
    66 000008FB 0F85C23C0000        <1>  jne L_error_incorrect_type
   933 00000901 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   934 00000905 53                      	push rbx
   935 00000906 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   936 0000090A FFD3                    	call rbx
   937 0000090C 50                      	push rax
   938 0000090D 6A01                    	push 1
   939 0000090F 488B4510                	mov rax, qword [rbp + 8*2]
   940 00000913 488B00                  	mov rax, qword [rax + 8*0]
   941 00000916 488B00                  	mov rax, qword [rax + 8*0]
   942 00000919 488B00                  	mov rax, qword [rax]
   943                                  	assert_closure(rax)
    65 0000091C 803805              <1>  cmp byte [%1], %2
    66 0000091F 0F859E3C0000        <1>  jne L_error_incorrect_type
   944 00000925 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   945 00000929 53                      	push rbx
   946 0000092A FF7508                  	push RET_ADDR
   947 0000092D 488B6D00                	mov rbp, OLD_RDP
   948 00000931 BE00000000              	mov rsi, 0
   949                                  .L_tc_recycle_frame_loop_03b4:	 ; start recycle frame loop
   950 00000936 4883FE04                	cmp rsi, 4
   951 0000093A 742A                    	je .L_tc_recycle_frame_done_03b4
   952 0000093C B903000000              	mov rcx, 3
   953 00000941 4829F1                  	sub rcx, rsi
   954 00000944 48C1E103                	shl rcx, 3
   955 00000948 4801E1                  	add rcx, rsp ; rcx is the index to move
   956 0000094B 4889F3                  	mov rbx, rsi
   957 0000094E 48FFC3                  	inc rbx
   958 00000951 48C1E303                	shl rbx, 3
   959 00000955 48F7DB                  	neg rbx
   960 00000958 4801EB                  	add rbx, rbp ; rbx is the index to move to
   961 0000095B 488B09                  	mov rcx, [rcx]
   962 0000095E 48890B                  	mov [rbx], rcx
   963 00000961 48FFC6                  	inc rsi
   964 00000964 EBD0                    	jmp .L_tc_recycle_frame_loop_03b4
   965                                  .L_tc_recycle_frame_done_03b4:	 ; end recycle frame loop
   966 00000966 BB04000000              	mov rbx, 4
   967 0000096B 48C1E303                	shl rbx, 3
   968 0000096F 48F7DB                  	neg rbx
   969 00000972 4801EB                  	add rbx, rbp
   970 00000975 4889DC                  	mov rsp, rbx
   971 00000978 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   972 0000097C FFE3                    	jmp rbx
   973                                  .L_or_end_0045:
   974 0000097E EB08                    	jmp .L_if_end_01ff
   975                                  	.L_if_else_01ff:
   976 00000980 488D0425[02000000]      	lea rax, [2 + L_constants]
   977                                  	.L_if_end_01ff:
   978 00000988 C9                      	leave
   979 00000989 C21800                  	ret 8 * (2 + 1)
   980                                  .L_lambda_simple_end_0235:	; new closure is in rax
   981 0000098C 50                      	push rax
   982 0000098D 488B4520                	mov rax, PARAM(0)
   983 00000991 8F00                    	pop qword [rax]
   984 00000993 48B8-                   	mov rax, sob_void
   984 00000995 [0000000000000000] 
   985                                  
   986 0000099D 488B4510                	mov rax, qword [rbp + 8*2]
   987 000009A1 488B00                  	mov rax, qword [rax + 8*0]
   988 000009A4 488B4008                	mov rax, qword [rax + 8*1]
   989 000009A8 50                      	push rax
   990 000009A9 6A01                    	push 1
   991 000009AB 488B4520                	mov rax, PARAM(0)
   992 000009AF 488B00                  	mov rax, qword [rax]
   993                                  	assert_closure(rax)
    65 000009B2 803805              <1>  cmp byte [%1], %2
    66 000009B5 0F85083C0000        <1>  jne L_error_incorrect_type
   994 000009BB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   995 000009BF 53                      	push rbx
   996 000009C0 FF7508                  	push RET_ADDR
   997 000009C3 488B6D00                	mov rbp, OLD_RDP
   998 000009C7 BE00000000              	mov rsi, 0
   999                                  .L_tc_recycle_frame_loop_03b5:	 ; start recycle frame loop
  1000 000009CC 4883FE04                	cmp rsi, 4
  1001 000009D0 742A                    	je .L_tc_recycle_frame_done_03b5
  1002 000009D2 B903000000              	mov rcx, 3
  1003 000009D7 4829F1                  	sub rcx, rsi
  1004 000009DA 48C1E103                	shl rcx, 3
  1005 000009DE 4801E1                  	add rcx, rsp ; rcx is the index to move
  1006 000009E1 4889F3                  	mov rbx, rsi
  1007 000009E4 48FFC3                  	inc rbx
  1008 000009E7 48C1E303                	shl rbx, 3
  1009 000009EB 48F7DB                  	neg rbx
  1010 000009EE 4801EB                  	add rbx, rbp ; rbx is the index to move to
  1011 000009F1 488B09                  	mov rcx, [rcx]
  1012 000009F4 48890B                  	mov [rbx], rcx
  1013 000009F7 48FFC6                  	inc rsi
  1014 000009FA EBD0                    	jmp .L_tc_recycle_frame_loop_03b5
  1015                                  .L_tc_recycle_frame_done_03b5:	 ; end recycle frame loop
  1016 000009FC BB04000000              	mov rbx, 4
  1017 00000A01 48C1E303                	shl rbx, 3
  1018 00000A05 48F7DB                  	neg rbx
  1019 00000A08 4801EB                  	add rbx, rbp
  1020 00000A0B 4889DC                  	mov rsp, rbx
  1021 00000A0E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1022 00000A12 FFE3                    	jmp rbx
  1023 00000A14 C9                      	leave
  1024 00000A15 C21800                  	ret 8 * (2 + 1)
  1025                                  .L_lambda_simple_end_0234:	; new closure is in rax
  1026                                  	assert_closure(rax)
    65 00000A18 803805              <1>  cmp byte [%1], %2
    66 00000A1B 0F85A23B0000        <1>  jne L_error_incorrect_type
  1027 00000A21 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1028 00000A25 53                      	push rbx
  1029 00000A26 FF7508                  	push RET_ADDR
  1030 00000A29 488B6D00                	mov rbp, OLD_RDP
  1031 00000A2D BE00000000              	mov rsi, 0
  1032                                  .L_tc_recycle_frame_loop_03b3:	 ; start recycle frame loop
  1033 00000A32 4883FE04                	cmp rsi, 4
  1034 00000A36 742A                    	je .L_tc_recycle_frame_done_03b3
  1035 00000A38 B903000000              	mov rcx, 3
  1036 00000A3D 4829F1                  	sub rcx, rsi
  1037 00000A40 48C1E103                	shl rcx, 3
  1038 00000A44 4801E1                  	add rcx, rsp ; rcx is the index to move
  1039 00000A47 4889F3                  	mov rbx, rsi
  1040 00000A4A 48FFC3                  	inc rbx
  1041 00000A4D 48C1E303                	shl rbx, 3
  1042 00000A51 48F7DB                  	neg rbx
  1043 00000A54 4801EB                  	add rbx, rbp ; rbx is the index to move to
  1044 00000A57 488B09                  	mov rcx, [rcx]
  1045 00000A5A 48890B                  	mov [rbx], rcx
  1046 00000A5D 48FFC6                  	inc rsi
  1047 00000A60 EBD0                    	jmp .L_tc_recycle_frame_loop_03b3
  1048                                  .L_tc_recycle_frame_done_03b3:	 ; end recycle frame loop
  1049 00000A62 BB04000000              	mov rbx, 4
  1050 00000A67 48C1E303                	shl rbx, 3
  1051 00000A6B 48F7DB                  	neg rbx
  1052 00000A6E 4801EB                  	add rbx, rbp
  1053 00000A71 4889DC                  	mov rsp, rbx
  1054 00000A74 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1055 00000A78 FFE3                    	jmp rbx
  1056 00000A7A C9                      	leave
  1057 00000A7B C22000                  	ret AND_KILL_FRAME(2)
  1058                                  .L_lambda_opt_end_0156:	; new closure is in rax
  1059 00000A7E 48890425[C0010000]      	mov qword [free_var_56], rax
  1060 00000A86 48B8-                   	mov rax, sob_void
  1060 00000A88 [0000000000000000] 
  1061                                  
  1062 00000A90 4889C7                  	mov rdi, rax
  1063 00000A93 E8CC220000              	call print_sexpr_if_not_void
  1064                                  
  1065 00000A98 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1066 00000A9D E8B1220000              	call malloc
  1067 00000AA2 50                      	push rax
  1068 00000AA3 BF00000000              	mov rdi, 8 * 0	; new rib
  1069 00000AA8 E8A6220000              	call malloc
  1070 00000AAD 50                      	push rax
  1071 00000AAE BF08000000              	mov rdi, 8 * 1	; extended env
  1072 00000AB3 E89B220000              	call malloc
  1073 00000AB8 488B7D10                	mov rdi, ENV
  1074 00000ABC BE00000000              	mov rsi, 0
  1075 00000AC1 BA01000000              	mov rdx, 1
  1076                                  .L_lambda_opt_env_loop_0157:	; ext_env[i + 1] <-- env[i]
  1077 00000AC6 4883FE00                	cmp rsi, 0
  1078 00000ACA 7410                    	je .L_lambda_opt_env_end_0157
  1079 00000ACC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1080 00000AD0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1081 00000AD4 48FFC6                  	inc rsi
  1082 00000AD7 48FFC2                  	inc rdx
  1083 00000ADA EBEA                    	jmp .L_lambda_opt_env_loop_0157
  1084                                  .L_lambda_opt_env_end_0157:
  1085 00000ADC 5B                      	pop rbx
  1086 00000ADD BE00000000              	mov rsi, 0
  1087                                  .L_lambda_opt_params_loop_0157:	; copy params
  1088 00000AE2 4883FE00                	cmp rsi, 0
  1089 00000AE6 740E                    	je .L_lambda_opt_params_end_0157
  1090 00000AE8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1091 00000AED 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1092 00000AF1 48FFC6                  	inc rsi
  1093 00000AF4 EBEC                    	jmp .L_lambda_opt_params_loop_0157
  1094                                  .L_lambda_opt_params_end_0157:
  1095 00000AF6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1096 00000AF9 4889C3                  	mov rbx, rax
  1097 00000AFC 58                      	pop rax
  1098 00000AFD C60005                  	mov byte [rax], T_closure
  1099 00000B00 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1100 00000B04 48C74009[110B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0157
  1101 00000B0C E989040000              	jmp .L_lambda_opt_end_0157
  1102                                  .L_lambda_opt_code_0157:	; lambda-simple body
  1103 00000B11 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  1104 00000B16 4889FB                  	mov rbx, rdi
  1105 00000B19 4883EB01                	sub rbx, 1
  1106 00000B1D 7F46                    	jg .L_lambda_opt_arity_check_more_0157
  1107                                  .L_lambda_opt_arity_check_exact_0157:	 ; if params in opt is exact
  1108 00000B1F 4883EC08                	sub rsp, 8
  1109 00000B23 BE00000000              	mov rsi, 0 ; index
  1110                                  .L_lambda_opt_stack_enlarge_loop_0157:	 ; stack loop enlarge start
  1111 00000B28 4883FE04                	cmp rsi, 4
  1112 00000B2C 7420                    	je .L_lambda_opt_stack_enlarge_loop_exit_0157
  1113 00000B2E 4889F7                  	mov rdi, rsi
  1114 00000B31 48C1E703                	shl rdi, 3
  1115 00000B35 4801E7                  	add rdi, rsp
  1116 00000B38 4883C708                	add rdi, 8
  1117 00000B3C 4889FB                  	mov rbx, rdi
  1118 00000B3F 4883EB08                	sub rbx, 8
  1119 00000B43 488B3F                  	mov rdi, [rdi]
  1120 00000B46 48893B                  	mov [rbx], rdi
  1121 00000B49 48FFC6                  	inc rsi
  1122 00000B4C EBDA                    	jmp .L_lambda_opt_stack_enlarge_loop_0157
  1123                                  .L_lambda_opt_stack_enlarge_loop_exit_0157:	 ; end of stack enlarge loop
  1124 00000B4E 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  1124 00000B53 [01000000]         
  1125 00000B57 48C744241002000000      	mov qword [rsp + 2*8], 2
  1126 00000B60 E99F000000              	jmp .L_lambda_opt_stack_adjusted_0157
  1127                                  .L_lambda_opt_arity_check_more_0157:	 ; if params in opt is more
  1128 00000B65 48B8-                   	mov rax, sob_nil
  1128 00000B67 [0100000000000000] 
  1129 00000B6F 4889DE                  	mov rsi, rbx ;index
  1130 00000B72 48FFCE                  	dec rsi
  1131                                  .L_lambda_opt_list_create_loop_0157:	; start of list creation loop
  1132 00000B75 4883FEFF                	cmp rsi, -1
  1133 00000B79 7422                    	je .L_lambda_opt_list_create_loop_exit_0157
  1134 00000B7B 488D4E04                	lea rcx, [rsi + (3 + 1)]
  1135 00000B7F 48C1E103                	shl rcx, 3
  1136 00000B83 4801E1                  	add rcx, rsp
  1137 00000B86 488B09                  	mov rcx, [rcx]
  1138 00000B89 56                      	push rsi
  1139 00000B8A 53                      	push rbx
  1140 00000B8B 50                      	push rax
  1141 00000B8C 51                      	push rcx
  1142 00000B8D 6A02                    	push qword 2 ; push num of args
  1143 00000B8F 6A01                    	push qword 1 ; push garbage
  1144 00000B91 E8342B0000              	call L_code_ptr_cons
  1145 00000B96 5B                      	pop rbx
  1146 00000B97 5E                      	pop rsi
  1147 00000B98 48FFCE                  	dec rsi
  1148 00000B9B EBD8                    	jmp .L_lambda_opt_list_create_loop_0157
  1149                                  .L_lambda_opt_list_create_loop_exit_0157:	; end of list creation loop
  1150 00000B9D 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  1151 00000BA2 4883C302                	add rbx, 2
  1152 00000BA6 4889DF                  	mov rdi, rbx
  1153 00000BA9 48C1E703                	shl rdi,3
  1154 00000BAD 4801E7                  	add rdi, rsp
  1155 00000BB0 488907                  	mov [rdi], rax
  1156 00000BB3 BE00000000              	mov rsi, 0 ;index
  1157                                  .L_lambda_opt_stack_shrink_loop_0157:	; start of stack shrink loop
  1158 00000BB8 4883FE04                	cmp rsi, 4
  1159 00000BBC 742E                    	je .L_lambda_opt_stack_shrink_loop_exit_0157
  1160 00000BBE BF03000000              	mov rdi, 3
  1161 00000BC3 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  1162 00000BC6 4889D9                  	mov rcx, rbx
  1163 00000BC9 4829F1                  	sub rcx, rsi
  1164 00000BCC 4883E901                	sub rcx, 1; the index of the target stack place to put the member
  1165 00000BD0 4889FA                  	mov rdx, rdi
  1166 00000BD3 48C1E203                	shl rdx, 3
  1167 00000BD7 4801E2                  	add rdx, rsp
  1168 00000BDA 48C1E103                	shl rcx, 3
  1169 00000BDE 4801E1                  	add rcx, rsp
  1170 00000BE1 488B12                  	mov rdx, [rdx]
  1171 00000BE4 488911                  	mov [rcx], rdx
  1172 00000BE7 48FFC6                  	inc rsi
  1173 00000BEA EBCC                    	jmp .L_lambda_opt_stack_shrink_loop_0157
  1174                                  .L_lambda_opt_stack_shrink_loop_exit_0157:	; end of stack shrink loop
  1175 00000BEC 4883EB02                	sub rbx, 2 ; rbx has number of args
  1176 00000BF0 4883EB02                	sub rbx, 2
  1177 00000BF4 48C1E303                	shl rbx, 3
  1178 00000BF8 4801DC                  	add rsp, rbx
  1179 00000BFB 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  1180                                  .L_lambda_opt_stack_adjusted_0157:
  1181 00000C04 55                      	push rbp
  1182 00000C05 4889E5                  	mov rbp, rsp
  1183 00000C08 488D0425[18000000]      	lea rax, [24 + L_constants]
  1184 00000C10 50                      	push rax
  1185 00000C11 6A01                    	push 1
  1186 00000C13 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1187 00000C18 E836210000              	call malloc
  1188 00000C1D 50                      	push rax
  1189 00000C1E BF10000000              	mov rdi, 8 * 2	; new rib
  1190 00000C23 E82B210000              	call malloc
  1191 00000C28 50                      	push rax
  1192 00000C29 BF10000000              	mov rdi, 8 * 2	; extended env
  1193 00000C2E E820210000              	call malloc
  1194 00000C33 488B7D10                	mov rdi, ENV
  1195 00000C37 BE00000000              	mov rsi, 0
  1196 00000C3C BA01000000              	mov rdx, 1
  1197                                  .L_lambda_simple_env_loop_0236:	; ext_env[i + 1] <-- env[i]
  1198 00000C41 4883FE01                	cmp rsi, 1
  1199 00000C45 7410                    	je .L_lambda_simple_env_end_0236
  1200 00000C47 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1201 00000C4B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1202 00000C4F 48FFC6                  	inc rsi
  1203 00000C52 48FFC2                  	inc rdx
  1204 00000C55 EBEA                    	jmp .L_lambda_simple_env_loop_0236
  1205                                  .L_lambda_simple_env_end_0236:
  1206 00000C57 5B                      	pop rbx
  1207 00000C58 BE00000000              	mov rsi, 0
  1208                                  .L_lambda_simple_params_loop_0236:	; copy params
  1209 00000C5D 4883FE02                	cmp rsi, 2
  1210 00000C61 740E                    	je .L_lambda_simple_params_end_0236
  1211 00000C63 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1212 00000C68 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1213 00000C6C 48FFC6                  	inc rsi
  1214 00000C6F EBEC                    	jmp .L_lambda_simple_params_loop_0236
  1215                                  .L_lambda_simple_params_end_0236:
  1216 00000C71 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1217 00000C74 4889C3                  	mov rbx, rax
  1218 00000C77 58                      	pop rax
  1219 00000C78 C60005                  	mov byte [rax], T_closure
  1220 00000C7B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1221 00000C7F 48C74009[8C0C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0236
  1222 00000C87 E9A8020000              	jmp .L_lambda_simple_end_0236
  1223                                  .L_lambda_simple_code_0236:	; lambda-simple body
  1224 00000C8C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1225 00000C92 740B                    	je .L_lambda_simple_arity_check_ok_0236
  1226 00000C94 FF742410                	push qword [rsp + 8 * 2]
  1227 00000C98 6A01                    	push 1
  1228 00000C9A E96D200000              	jmp L_error_incorrect_arity_simple
  1229                                  .L_lambda_simple_arity_check_ok_0236:
  1230 00000C9F C8000000                	enter 0, 0
  1231 00000CA3 BF08000000              	mov qword rdi, 8
  1232 00000CA8 E8A6200000              	call malloc
  1233 00000CAD 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  1234 00000CB1 48B8-                   	mov rax, sob_void
  1234 00000CB3 [0000000000000000] 
  1235                                  
  1236 00000CBB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1237 00000CC0 E88E200000              	call malloc
  1238 00000CC5 50                      	push rax
  1239 00000CC6 BF08000000              	mov rdi, 8 * 1	; new rib
  1240 00000CCB E883200000              	call malloc
  1241 00000CD0 50                      	push rax
  1242 00000CD1 BF18000000              	mov rdi, 8 * 3	; extended env
  1243 00000CD6 E878200000              	call malloc
  1244 00000CDB 488B7D10                	mov rdi, ENV
  1245 00000CDF BE00000000              	mov rsi, 0
  1246 00000CE4 BA01000000              	mov rdx, 1
  1247                                  .L_lambda_simple_env_loop_0237:	; ext_env[i + 1] <-- env[i]
  1248 00000CE9 4883FE02                	cmp rsi, 2
  1249 00000CED 7410                    	je .L_lambda_simple_env_end_0237
  1250 00000CEF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1251 00000CF3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1252 00000CF7 48FFC6                  	inc rsi
  1253 00000CFA 48FFC2                  	inc rdx
  1254 00000CFD EBEA                    	jmp .L_lambda_simple_env_loop_0237
  1255                                  .L_lambda_simple_env_end_0237:
  1256 00000CFF 5B                      	pop rbx
  1257 00000D00 BE00000000              	mov rsi, 0
  1258                                  .L_lambda_simple_params_loop_0237:	; copy params
  1259 00000D05 4883FE01                	cmp rsi, 1
  1260 00000D09 740E                    	je .L_lambda_simple_params_end_0237
  1261 00000D0B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1262 00000D10 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1263 00000D14 48FFC6                  	inc rsi
  1264 00000D17 EBEC                    	jmp .L_lambda_simple_params_loop_0237
  1265                                  .L_lambda_simple_params_end_0237:
  1266 00000D19 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1267 00000D1C 4889C3                  	mov rbx, rax
  1268 00000D1F 58                      	pop rax
  1269 00000D20 C60005                  	mov byte [rax], T_closure
  1270 00000D23 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1271 00000D27 48C74009[340D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0237
  1272 00000D2F E974010000              	jmp .L_lambda_simple_end_0237
  1273                                  .L_lambda_simple_code_0237:	; lambda-simple body
  1274 00000D34 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1275 00000D3A 740B                    	je .L_lambda_simple_arity_check_ok_0237
  1276 00000D3C FF742410                	push qword [rsp + 8 * 2]
  1277 00000D40 6A01                    	push 1
  1278 00000D42 E9C51F0000              	jmp L_error_incorrect_arity_simple
  1279                                  .L_lambda_simple_arity_check_ok_0237:
  1280 00000D47 C8000000                	enter 0, 0
  1281 00000D4B 488B4520                	mov rax, PARAM(0)
  1282 00000D4F 50                      	push rax
  1283 00000D50 6A01                    	push 1
  1284 00000D52 488B0425[80000000]      	mov rax, qword [free_var_16]
  1285                                  	assert_closure(rax)
    65 00000D5A 803805              <1>  cmp byte [%1], %2
    66 00000D5D 0F8560380000        <1>  jne L_error_incorrect_type
  1286 00000D63 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1287 00000D67 53                      	push rbx
  1288 00000D68 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1289 00000D6C FFD3                    	call rbx
  1290 00000D6E 50                      	push rax
  1291 00000D6F 6A01                    	push 1
  1292 00000D71 488B0425[00000000]      	mov rax, qword [free_var_0]
  1293                                  	assert_closure(rax)
    65 00000D79 803805              <1>  cmp byte [%1], %2
    66 00000D7C 0F8541380000        <1>  jne L_error_incorrect_type
  1294 00000D82 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1295 00000D86 53                      	push rbx
  1296 00000D87 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1297 00000D8B FFD3                    	call rbx
  1298 00000D8D 483D[02000000]          	cmp rax, sob_boolean_false
  1299 00000D93 0F850B010000            	jne .L_or_end_0046
  1300 00000D99 488B4520                	mov rax, PARAM(0)
  1301 00000D9D 50                      	push rax
  1302 00000D9E 488B0425[80000000]      	mov rax, qword [free_var_16]
  1303 00000DA6 50                      	push rax
  1304 00000DA7 6A02                    	push 2
  1305 00000DA9 488B0425[E0010000]      	mov rax, qword [free_var_60]
  1306                                  	assert_closure(rax)
    65 00000DB1 803805              <1>  cmp byte [%1], %2
    66 00000DB4 0F8509380000        <1>  jne L_error_incorrect_type
  1307 00000DBA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1308 00000DBE 53                      	push rbx
  1309 00000DBF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1310 00000DC3 FFD3                    	call rbx
  1311 00000DC5 50                      	push rax
  1312 00000DC6 488B4510                	mov rax, qword [rbp + 8*2]
  1313 00000DCA 488B4008                	mov rax, qword [rax + 8*1]
  1314 00000DCE 488B00                  	mov rax, qword [rax + 8*0]
  1315 00000DD1 50                      	push rax
  1316 00000DD2 6A02                    	push 2
  1317 00000DD4 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1318                                  	assert_closure(rax)
    65 00000DDC 803805              <1>  cmp byte [%1], %2
    66 00000DDF 0F85DE370000        <1>  jne L_error_incorrect_type
  1319 00000DE5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1320 00000DE9 53                      	push rbx
  1321 00000DEA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1322 00000DEE FFD3                    	call rbx
  1323 00000DF0 483D[02000000]          	cmp rax, sob_boolean_false
  1324 00000DF6 0F84A0000000            	je .L_if_else_0200
  1325 00000DFC 488B4520                	mov rax, PARAM(0)
  1326 00000E00 50                      	push rax
  1327 00000E01 488B0425[88000000]      	mov rax, qword [free_var_17]
  1328 00000E09 50                      	push rax
  1329 00000E0A 6A02                    	push 2
  1330 00000E0C 488B0425[E0010000]      	mov rax, qword [free_var_60]
  1331                                  	assert_closure(rax)
    65 00000E14 803805              <1>  cmp byte [%1], %2
    66 00000E17 0F85A6370000        <1>  jne L_error_incorrect_type
  1332 00000E1D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1333 00000E21 53                      	push rbx
  1334 00000E22 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1335 00000E26 FFD3                    	call rbx
  1336 00000E28 50                      	push rax
  1337 00000E29 6A01                    	push 1
  1338 00000E2B 488B4510                	mov rax, qword [rbp + 8*2]
  1339 00000E2F 488B00                  	mov rax, qword [rax + 8*0]
  1340 00000E32 488B00                  	mov rax, qword [rax + 8*0]
  1341 00000E35 488B00                  	mov rax, qword [rax]
  1342                                  	assert_closure(rax)
    65 00000E38 803805              <1>  cmp byte [%1], %2
    66 00000E3B 0F8582370000        <1>  jne L_error_incorrect_type
  1343 00000E41 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1344 00000E45 53                      	push rbx
  1345 00000E46 FF7508                  	push RET_ADDR
  1346 00000E49 488B6D00                	mov rbp, OLD_RDP
  1347 00000E4D BE00000000              	mov rsi, 0
  1348                                  .L_tc_recycle_frame_loop_03b7:	 ; start recycle frame loop
  1349 00000E52 4883FE04                	cmp rsi, 4
  1350 00000E56 742A                    	je .L_tc_recycle_frame_done_03b7
  1351 00000E58 B903000000              	mov rcx, 3
  1352 00000E5D 4829F1                  	sub rcx, rsi
  1353 00000E60 48C1E103                	shl rcx, 3
  1354 00000E64 4801E1                  	add rcx, rsp ; rcx is the index to move
  1355 00000E67 4889F3                  	mov rbx, rsi
  1356 00000E6A 48FFC3                  	inc rbx
  1357 00000E6D 48C1E303                	shl rbx, 3
  1358 00000E71 48F7DB                  	neg rbx
  1359 00000E74 4801EB                  	add rbx, rbp ; rbx is the index to move to
  1360 00000E77 488B09                  	mov rcx, [rcx]
  1361 00000E7A 48890B                  	mov [rbx], rcx
  1362 00000E7D 48FFC6                  	inc rsi
  1363 00000E80 EBD0                    	jmp .L_tc_recycle_frame_loop_03b7
  1364                                  .L_tc_recycle_frame_done_03b7:	 ; end recycle frame loop
  1365 00000E82 BB04000000              	mov rbx, 4
  1366 00000E87 48C1E303                	shl rbx, 3
  1367 00000E8B 48F7DB                  	neg rbx
  1368 00000E8E 4801EB                  	add rbx, rbp
  1369 00000E91 4889DC                  	mov rsp, rbx
  1370 00000E94 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1371 00000E98 FFE3                    	jmp rbx
  1372 00000E9A EB08                    	jmp .L_if_end_0200
  1373                                  	.L_if_else_0200:
  1374 00000E9C 488D0425[02000000]      	lea rax, [2 + L_constants]
  1375                                  	.L_if_end_0200:
  1376                                  .L_or_end_0046:
  1377 00000EA4 C9                      	leave
  1378 00000EA5 C21800                  	ret 8 * (2 + 1)
  1379                                  .L_lambda_simple_end_0237:	; new closure is in rax
  1380 00000EA8 50                      	push rax
  1381 00000EA9 488B4520                	mov rax, PARAM(0)
  1382 00000EAD 8F00                    	pop qword [rax]
  1383 00000EAF 48B8-                   	mov rax, sob_void
  1383 00000EB1 [0000000000000000] 
  1384                                  
  1385 00000EB9 488B4510                	mov rax, qword [rbp + 8*2]
  1386 00000EBD 488B00                  	mov rax, qword [rax + 8*0]
  1387 00000EC0 488B4008                	mov rax, qword [rax + 8*1]
  1388 00000EC4 50                      	push rax
  1389 00000EC5 6A01                    	push 1
  1390 00000EC7 488B4520                	mov rax, PARAM(0)
  1391 00000ECB 488B00                  	mov rax, qword [rax]
  1392                                  	assert_closure(rax)
    65 00000ECE 803805              <1>  cmp byte [%1], %2
    66 00000ED1 0F85EC360000        <1>  jne L_error_incorrect_type
  1393 00000ED7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1394 00000EDB 53                      	push rbx
  1395 00000EDC FF7508                  	push RET_ADDR
  1396 00000EDF 488B6D00                	mov rbp, OLD_RDP
  1397 00000EE3 BE00000000              	mov rsi, 0
  1398                                  .L_tc_recycle_frame_loop_03b8:	 ; start recycle frame loop
  1399 00000EE8 4883FE04                	cmp rsi, 4
  1400 00000EEC 742A                    	je .L_tc_recycle_frame_done_03b8
  1401 00000EEE B903000000              	mov rcx, 3
  1402 00000EF3 4829F1                  	sub rcx, rsi
  1403 00000EF6 48C1E103                	shl rcx, 3
  1404 00000EFA 4801E1                  	add rcx, rsp ; rcx is the index to move
  1405 00000EFD 4889F3                  	mov rbx, rsi
  1406 00000F00 48FFC3                  	inc rbx
  1407 00000F03 48C1E303                	shl rbx, 3
  1408 00000F07 48F7DB                  	neg rbx
  1409 00000F0A 4801EB                  	add rbx, rbp ; rbx is the index to move to
  1410 00000F0D 488B09                  	mov rcx, [rcx]
  1411 00000F10 48890B                  	mov [rbx], rcx
  1412 00000F13 48FFC6                  	inc rsi
  1413 00000F16 EBD0                    	jmp .L_tc_recycle_frame_loop_03b8
  1414                                  .L_tc_recycle_frame_done_03b8:	 ; end recycle frame loop
  1415 00000F18 BB04000000              	mov rbx, 4
  1416 00000F1D 48C1E303                	shl rbx, 3
  1417 00000F21 48F7DB                  	neg rbx
  1418 00000F24 4801EB                  	add rbx, rbp
  1419 00000F27 4889DC                  	mov rsp, rbx
  1420 00000F2A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1421 00000F2E FFE3                    	jmp rbx
  1422 00000F30 C9                      	leave
  1423 00000F31 C21800                  	ret 8 * (2 + 1)
  1424                                  .L_lambda_simple_end_0236:	; new closure is in rax
  1425                                  	assert_closure(rax)
    65 00000F34 803805              <1>  cmp byte [%1], %2
    66 00000F37 0F8586360000        <1>  jne L_error_incorrect_type
  1426 00000F3D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1427 00000F41 53                      	push rbx
  1428 00000F42 FF7508                  	push RET_ADDR
  1429 00000F45 488B6D00                	mov rbp, OLD_RDP
  1430 00000F49 BE00000000              	mov rsi, 0
  1431                                  .L_tc_recycle_frame_loop_03b6:	 ; start recycle frame loop
  1432 00000F4E 4883FE04                	cmp rsi, 4
  1433 00000F52 742A                    	je .L_tc_recycle_frame_done_03b6
  1434 00000F54 B903000000              	mov rcx, 3
  1435 00000F59 4829F1                  	sub rcx, rsi
  1436 00000F5C 48C1E103                	shl rcx, 3
  1437 00000F60 4801E1                  	add rcx, rsp ; rcx is the index to move
  1438 00000F63 4889F3                  	mov rbx, rsi
  1439 00000F66 48FFC3                  	inc rbx
  1440 00000F69 48C1E303                	shl rbx, 3
  1441 00000F6D 48F7DB                  	neg rbx
  1442 00000F70 4801EB                  	add rbx, rbp ; rbx is the index to move to
  1443 00000F73 488B09                  	mov rcx, [rcx]
  1444 00000F76 48890B                  	mov [rbx], rcx
  1445 00000F79 48FFC6                  	inc rsi
  1446 00000F7C EBD0                    	jmp .L_tc_recycle_frame_loop_03b6
  1447                                  .L_tc_recycle_frame_done_03b6:	 ; end recycle frame loop
  1448 00000F7E BB04000000              	mov rbx, 4
  1449 00000F83 48C1E303                	shl rbx, 3
  1450 00000F87 48F7DB                  	neg rbx
  1451 00000F8A 4801EB                  	add rbx, rbp
  1452 00000F8D 4889DC                  	mov rsp, rbx
  1453 00000F90 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1454 00000F94 FFE3                    	jmp rbx
  1455 00000F96 C9                      	leave
  1456 00000F97 C22000                  	ret AND_KILL_FRAME(2)
  1457                                  .L_lambda_opt_end_0157:	; new closure is in rax
  1458 00000F9A 48890425[00020000]      	mov qword [free_var_64], rax
  1459 00000FA2 48B8-                   	mov rax, sob_void
  1459 00000FA4 [0000000000000000] 
  1460                                  
  1461 00000FAC 4889C7                  	mov rdi, rax
  1462 00000FAF E8B01D0000              	call print_sexpr_if_not_void
  1463                                  
  1464 00000FB4 488D0425[18000000]      	lea rax, [24 + L_constants]
  1465 00000FBC 50                      	push rax
  1466 00000FBD 488D0425[18000000]      	lea rax, [24 + L_constants]
  1467 00000FC5 50                      	push rax
  1468 00000FC6 6A02                    	push 2
  1469 00000FC8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1470 00000FCD E8811D0000              	call malloc
  1471 00000FD2 50                      	push rax
  1472 00000FD3 BF00000000              	mov rdi, 8 * 0	; new rib
  1473 00000FD8 E8761D0000              	call malloc
  1474 00000FDD 50                      	push rax
  1475 00000FDE BF08000000              	mov rdi, 8 * 1	; extended env
  1476 00000FE3 E86B1D0000              	call malloc
  1477 00000FE8 488B7D10                	mov rdi, ENV
  1478 00000FEC BE00000000              	mov rsi, 0
  1479 00000FF1 BA01000000              	mov rdx, 1
  1480                                  .L_lambda_simple_env_loop_0238:	; ext_env[i + 1] <-- env[i]
  1481 00000FF6 4883FE00                	cmp rsi, 0
  1482 00000FFA 7410                    	je .L_lambda_simple_env_end_0238
  1483 00000FFC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1484 00001000 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1485 00001004 48FFC6                  	inc rsi
  1486 00001007 48FFC2                  	inc rdx
  1487 0000100A EBEA                    	jmp .L_lambda_simple_env_loop_0238
  1488                                  .L_lambda_simple_env_end_0238:
  1489 0000100C 5B                      	pop rbx
  1490 0000100D BE00000000              	mov rsi, 0
  1491                                  .L_lambda_simple_params_loop_0238:	; copy params
  1492 00001012 4883FE00                	cmp rsi, 0
  1493 00001016 740E                    	je .L_lambda_simple_params_end_0238
  1494 00001018 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1495 0000101D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1496 00001021 48FFC6                  	inc rsi
  1497 00001024 EBEC                    	jmp .L_lambda_simple_params_loop_0238
  1498                                  .L_lambda_simple_params_end_0238:
  1499 00001026 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1500 00001029 4889C3                  	mov rbx, rax
  1501 0000102C 58                      	pop rax
  1502 0000102D C60005                  	mov byte [rax], T_closure
  1503 00001030 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1504 00001034 48C74009[41100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0238
  1505 0000103C E95F060000              	jmp .L_lambda_simple_end_0238
  1506                                  .L_lambda_simple_code_0238:	; lambda-simple body
  1507 00001041 48837C241002            	cmp qword [rsp + 8 * 2], 2
  1508 00001047 740B                    	je .L_lambda_simple_arity_check_ok_0238
  1509 00001049 FF742410                	push qword [rsp + 8 * 2]
  1510 0000104D 6A02                    	push 2
  1511 0000104F E9B81C0000              	jmp L_error_incorrect_arity_simple
  1512                                  .L_lambda_simple_arity_check_ok_0238:
  1513 00001054 C8000000                	enter 0, 0
  1514 00001058 BF08000000              	mov qword rdi, 8
  1515 0000105D E8F11C0000              	call malloc
  1516 00001062 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  1517 00001066 48B8-                   	mov rax, sob_void
  1517 00001068 [0000000000000000] 
  1518                                  
  1519 00001070 BF08000000              	mov qword rdi, 8
  1520 00001075 E8D91C0000              	call malloc
  1521 0000107A 48894528                	mov qword [rbp + 8*(4 + 1)], rax
  1522 0000107E 48B8-                   	mov rax, sob_void
  1522 00001080 [0000000000000000] 
  1523                                  
  1524 00001088 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1525 0000108D E8C11C0000              	call malloc
  1526 00001092 50                      	push rax
  1527 00001093 BF10000000              	mov rdi, 8 * 2	; new rib
  1528 00001098 E8B61C0000              	call malloc
  1529 0000109D 50                      	push rax
  1530 0000109E BF10000000              	mov rdi, 8 * 2	; extended env
  1531 000010A3 E8AB1C0000              	call malloc
  1532 000010A8 488B7D10                	mov rdi, ENV
  1533 000010AC BE00000000              	mov rsi, 0
  1534 000010B1 BA01000000              	mov rdx, 1
  1535                                  .L_lambda_simple_env_loop_0239:	; ext_env[i + 1] <-- env[i]
  1536 000010B6 4883FE01                	cmp rsi, 1
  1537 000010BA 7410                    	je .L_lambda_simple_env_end_0239
  1538 000010BC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1539 000010C0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1540 000010C4 48FFC6                  	inc rsi
  1541 000010C7 48FFC2                  	inc rdx
  1542 000010CA EBEA                    	jmp .L_lambda_simple_env_loop_0239
  1543                                  .L_lambda_simple_env_end_0239:
  1544 000010CC 5B                      	pop rbx
  1545 000010CD BE00000000              	mov rsi, 0
  1546                                  .L_lambda_simple_params_loop_0239:	; copy params
  1547 000010D2 4883FE02                	cmp rsi, 2
  1548 000010D6 740E                    	je .L_lambda_simple_params_end_0239
  1549 000010D8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1550 000010DD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1551 000010E1 48FFC6                  	inc rsi
  1552 000010E4 EBEC                    	jmp .L_lambda_simple_params_loop_0239
  1553                                  .L_lambda_simple_params_end_0239:
  1554 000010E6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1555 000010E9 4889C3                  	mov rbx, rax
  1556 000010EC 58                      	pop rax
  1557 000010ED C60005                  	mov byte [rax], T_closure
  1558 000010F0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1559 000010F4 48C74009[01110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0239
  1560 000010FC E94B010000              	jmp .L_lambda_simple_end_0239
  1561                                  .L_lambda_simple_code_0239:	; lambda-simple body
  1562 00001101 48837C241002            	cmp qword [rsp + 8 * 2], 2
  1563 00001107 740B                    	je .L_lambda_simple_arity_check_ok_0239
  1564 00001109 FF742410                	push qword [rsp + 8 * 2]
  1565 0000110D 6A02                    	push 2
  1566 0000110F E9F81B0000              	jmp L_error_incorrect_arity_simple
  1567                                  .L_lambda_simple_arity_check_ok_0239:
  1568 00001114 C8000000                	enter 0, 0
  1569 00001118 488B4528                	mov rax, PARAM(1)
  1570 0000111C 50                      	push rax
  1571 0000111D 6A01                    	push 1
  1572 0000111F 488B0425[00000000]      	mov rax, qword [free_var_0]
  1573                                  	assert_closure(rax)
    65 00001127 803805              <1>  cmp byte [%1], %2
    66 0000112A 0F8593340000        <1>  jne L_error_incorrect_type
  1574 00001130 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1575 00001134 53                      	push rbx
  1576 00001135 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1577 00001139 FFD3                    	call rbx
  1578 0000113B 483D[02000000]          	cmp rax, sob_boolean_false
  1579 00001141 740D                    	je .L_if_else_0201
  1580 00001143 488D0425[01000000]      	lea rax, [1 + L_constants]
  1581 0000114B E9F8000000              	jmp .L_if_end_0201
  1582                                  	.L_if_else_0201:
  1583 00001150 488B4528                	mov rax, PARAM(1)
  1584 00001154 50                      	push rax
  1585 00001155 6A01                    	push 1
  1586 00001157 488B0425[88000000]      	mov rax, qword [free_var_17]
  1587                                  	assert_closure(rax)
    65 0000115F 803805              <1>  cmp byte [%1], %2
    66 00001162 0F855B340000        <1>  jne L_error_incorrect_type
  1588 00001168 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1589 0000116C 53                      	push rbx
  1590 0000116D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1591 00001171 FFD3                    	call rbx
  1592 00001173 50                      	push rax
  1593 00001174 488B4520                	mov rax, PARAM(0)
  1594 00001178 50                      	push rax
  1595 00001179 6A02                    	push 2
  1596 0000117B 488B4510                	mov rax, qword [rbp + 8*2]
  1597 0000117F 488B00                  	mov rax, qword [rax + 8*0]
  1598 00001182 488B00                  	mov rax, qword [rax + 8*0]
  1599 00001185 488B00                  	mov rax, qword [rax]
  1600                                  	assert_closure(rax)
    65 00001188 803805              <1>  cmp byte [%1], %2
    66 0000118B 0F8532340000        <1>  jne L_error_incorrect_type
  1601 00001191 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1602 00001195 53                      	push rbx
  1603 00001196 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1604 0000119A FFD3                    	call rbx
  1605 0000119C 50                      	push rax
  1606 0000119D 488B4528                	mov rax, PARAM(1)
  1607 000011A1 50                      	push rax
  1608 000011A2 6A01                    	push 1
  1609 000011A4 488B0425[80000000]      	mov rax, qword [free_var_16]
  1610                                  	assert_closure(rax)
    65 000011AC 803805              <1>  cmp byte [%1], %2
    66 000011AF 0F850E340000        <1>  jne L_error_incorrect_type
  1611 000011B5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1612 000011B9 53                      	push rbx
  1613 000011BA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1614 000011BE FFD3                    	call rbx
  1615 000011C0 50                      	push rax
  1616 000011C1 6A01                    	push 1
  1617 000011C3 488B4520                	mov rax, PARAM(0)
  1618                                  	assert_closure(rax)
    65 000011C7 803805              <1>  cmp byte [%1], %2
    66 000011CA 0F85F3330000        <1>  jne L_error_incorrect_type
  1619 000011D0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1620 000011D4 53                      	push rbx
  1621 000011D5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1622 000011D9 FFD3                    	call rbx
  1623 000011DB 50                      	push rax
  1624 000011DC 6A02                    	push 2
  1625 000011DE 488B0425[68000000]      	mov rax, qword [free_var_13]
  1626                                  	assert_closure(rax)
    65 000011E6 803805              <1>  cmp byte [%1], %2
    66 000011E9 0F85D4330000        <1>  jne L_error_incorrect_type
  1627 000011EF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1628 000011F3 53                      	push rbx
  1629 000011F4 FF7508                  	push RET_ADDR
  1630 000011F7 488B6D00                	mov rbp, OLD_RDP
  1631 000011FB BE00000000              	mov rsi, 0
  1632                                  .L_tc_recycle_frame_loop_03b9:	 ; start recycle frame loop
  1633 00001200 4883FE05                	cmp rsi, 5
  1634 00001204 742A                    	je .L_tc_recycle_frame_done_03b9
  1635 00001206 B904000000              	mov rcx, 4
  1636 0000120B 4829F1                  	sub rcx, rsi
  1637 0000120E 48C1E103                	shl rcx, 3
  1638 00001212 4801E1                  	add rcx, rsp ; rcx is the index to move
  1639 00001215 4889F3                  	mov rbx, rsi
  1640 00001218 48FFC3                  	inc rbx
  1641 0000121B 48C1E303                	shl rbx, 3
  1642 0000121F 48F7DB                  	neg rbx
  1643 00001222 4801EB                  	add rbx, rbp ; rbx is the index to move to
  1644 00001225 488B09                  	mov rcx, [rcx]
  1645 00001228 48890B                  	mov [rbx], rcx
  1646 0000122B 48FFC6                  	inc rsi
  1647 0000122E EBD0                    	jmp .L_tc_recycle_frame_loop_03b9
  1648                                  .L_tc_recycle_frame_done_03b9:	 ; end recycle frame loop
  1649 00001230 BB05000000              	mov rbx, 5
  1650 00001235 48C1E303                	shl rbx, 3
  1651 00001239 48F7DB                  	neg rbx
  1652 0000123C 4801EB                  	add rbx, rbp
  1653 0000123F 4889DC                  	mov rsp, rbx
  1654 00001242 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1655 00001246 FFE3                    	jmp rbx
  1656                                  	.L_if_end_0201:
  1657 00001248 C9                      	leave
  1658 00001249 C22000                  	ret 8 * (2 + 2)
  1659                                  .L_lambda_simple_end_0239:	; new closure is in rax
  1660 0000124C 50                      	push rax
  1661 0000124D 488B4520                	mov rax, PARAM(0)
  1662 00001251 8F00                    	pop qword [rax]
  1663 00001253 48B8-                   	mov rax, sob_void
  1663 00001255 [0000000000000000] 
  1664                                  
  1665 0000125D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1666 00001262 E8EC1A0000              	call malloc
  1667 00001267 50                      	push rax
  1668 00001268 BF10000000              	mov rdi, 8 * 2	; new rib
  1669 0000126D E8E11A0000              	call malloc
  1670 00001272 50                      	push rax
  1671 00001273 BF10000000              	mov rdi, 8 * 2	; extended env
  1672 00001278 E8D61A0000              	call malloc
  1673 0000127D 488B7D10                	mov rdi, ENV
  1674 00001281 BE00000000              	mov rsi, 0
  1675 00001286 BA01000000              	mov rdx, 1
  1676                                  .L_lambda_simple_env_loop_023a:	; ext_env[i + 1] <-- env[i]
  1677 0000128B 4883FE01                	cmp rsi, 1
  1678 0000128F 7410                    	je .L_lambda_simple_env_end_023a
  1679 00001291 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1680 00001295 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1681 00001299 48FFC6                  	inc rsi
  1682 0000129C 48FFC2                  	inc rdx
  1683 0000129F EBEA                    	jmp .L_lambda_simple_env_loop_023a
  1684                                  .L_lambda_simple_env_end_023a:
  1685 000012A1 5B                      	pop rbx
  1686 000012A2 BE00000000              	mov rsi, 0
  1687                                  .L_lambda_simple_params_loop_023a:	; copy params
  1688 000012A7 4883FE02                	cmp rsi, 2
  1689 000012AB 740E                    	je .L_lambda_simple_params_end_023a
  1690 000012AD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1691 000012B2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1692 000012B6 48FFC6                  	inc rsi
  1693 000012B9 EBEC                    	jmp .L_lambda_simple_params_loop_023a
  1694                                  .L_lambda_simple_params_end_023a:
  1695 000012BB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1696 000012BE 4889C3                  	mov rbx, rax
  1697 000012C1 58                      	pop rax
  1698 000012C2 C60005                  	mov byte [rax], T_closure
  1699 000012C5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1700 000012C9 48C74009[D6120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_023a
  1701 000012D1 E990010000              	jmp .L_lambda_simple_end_023a
  1702                                  .L_lambda_simple_code_023a:	; lambda-simple body
  1703 000012D6 48837C241002            	cmp qword [rsp + 8 * 2], 2
  1704 000012DC 740B                    	je .L_lambda_simple_arity_check_ok_023a
  1705 000012DE FF742410                	push qword [rsp + 8 * 2]
  1706 000012E2 6A02                    	push 2
  1707 000012E4 E9231A0000              	jmp L_error_incorrect_arity_simple
  1708                                  .L_lambda_simple_arity_check_ok_023a:
  1709 000012E9 C8000000                	enter 0, 0
  1710 000012ED 488B4528                	mov rax, PARAM(1)
  1711 000012F1 50                      	push rax
  1712 000012F2 6A01                    	push 1
  1713 000012F4 488B0425[80000000]      	mov rax, qword [free_var_16]
  1714                                  	assert_closure(rax)
    65 000012FC 803805              <1>  cmp byte [%1], %2
    66 000012FF 0F85BE320000        <1>  jne L_error_incorrect_type
  1715 00001305 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1716 00001309 53                      	push rbx
  1717 0000130A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1718 0000130E FFD3                    	call rbx
  1719 00001310 50                      	push rax
  1720 00001311 6A01                    	push 1
  1721 00001313 488B0425[00000000]      	mov rax, qword [free_var_0]
  1722                                  	assert_closure(rax)
    65 0000131B 803805              <1>  cmp byte [%1], %2
    66 0000131E 0F859F320000        <1>  jne L_error_incorrect_type
  1723 00001324 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1724 00001328 53                      	push rbx
  1725 00001329 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1726 0000132D FFD3                    	call rbx
  1727 0000132F 483D[02000000]          	cmp rax, sob_boolean_false
  1728 00001335 740D                    	je .L_if_else_0202
  1729 00001337 488D0425[01000000]      	lea rax, [1 + L_constants]
  1730 0000133F E91E010000              	jmp .L_if_end_0202
  1731                                  	.L_if_else_0202:
  1732 00001344 488B4528                	mov rax, PARAM(1)
  1733 00001348 50                      	push rax
  1734 00001349 488B0425[88000000]      	mov rax, qword [free_var_17]
  1735 00001351 50                      	push rax
  1736 00001352 6A02                    	push 2
  1737 00001354 488B4510                	mov rax, qword [rbp + 8*2]
  1738 00001358 488B00                  	mov rax, qword [rax + 8*0]
  1739 0000135B 488B00                  	mov rax, qword [rax + 8*0]
  1740 0000135E 488B00                  	mov rax, qword [rax]
  1741                                  	assert_closure(rax)
    65 00001361 803805              <1>  cmp byte [%1], %2
    66 00001364 0F8559320000        <1>  jne L_error_incorrect_type
  1742 0000136A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1743 0000136E 53                      	push rbx
  1744 0000136F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1745 00001373 FFD3                    	call rbx
  1746 00001375 50                      	push rax
  1747 00001376 488B4520                	mov rax, PARAM(0)
  1748 0000137A 50                      	push rax
  1749 0000137B 6A02                    	push 2
  1750 0000137D 488B4510                	mov rax, qword [rbp + 8*2]
  1751 00001381 488B00                  	mov rax, qword [rax + 8*0]
  1752 00001384 488B4008                	mov rax, qword [rax + 8*1]
  1753 00001388 488B00                  	mov rax, qword [rax]
  1754                                  	assert_closure(rax)
    65 0000138B 803805              <1>  cmp byte [%1], %2
    66 0000138E 0F852F320000        <1>  jne L_error_incorrect_type
  1755 00001394 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1756 00001398 53                      	push rbx
  1757 00001399 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1758 0000139D FFD3                    	call rbx
  1759 0000139F 50                      	push rax
  1760 000013A0 488B4528                	mov rax, PARAM(1)
  1761 000013A4 50                      	push rax
  1762 000013A5 488B0425[80000000]      	mov rax, qword [free_var_16]
  1763 000013AD 50                      	push rax
  1764 000013AE 6A02                    	push 2
  1765 000013B0 488B4510                	mov rax, qword [rbp + 8*2]
  1766 000013B4 488B00                  	mov rax, qword [rax + 8*0]
  1767 000013B7 488B00                  	mov rax, qword [rax + 8*0]
  1768 000013BA 488B00                  	mov rax, qword [rax]
  1769                                  	assert_closure(rax)
    65 000013BD 803805              <1>  cmp byte [%1], %2
    66 000013C0 0F85FD310000        <1>  jne L_error_incorrect_type
  1770 000013C6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1771 000013CA 53                      	push rbx
  1772 000013CB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1773 000013CF FFD3                    	call rbx
  1774 000013D1 50                      	push rax
  1775 000013D2 488B4520                	mov rax, PARAM(0)
  1776 000013D6 50                      	push rax
  1777 000013D7 6A02                    	push 2
  1778 000013D9 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1779                                  	assert_closure(rax)
    65 000013E1 803805              <1>  cmp byte [%1], %2
    66 000013E4 0F85D9310000        <1>  jne L_error_incorrect_type
  1780 000013EA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1781 000013EE 53                      	push rbx
  1782 000013EF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1783 000013F3 FFD3                    	call rbx
  1784 000013F5 50                      	push rax
  1785 000013F6 6A02                    	push 2
  1786 000013F8 488B0425[68000000]      	mov rax, qword [free_var_13]
  1787                                  	assert_closure(rax)
    65 00001400 803805              <1>  cmp byte [%1], %2
    66 00001403 0F85BA310000        <1>  jne L_error_incorrect_type
  1788 00001409 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1789 0000140D 53                      	push rbx
  1790 0000140E FF7508                  	push RET_ADDR
  1791 00001411 488B6D00                	mov rbp, OLD_RDP
  1792 00001415 BE00000000              	mov rsi, 0
  1793                                  .L_tc_recycle_frame_loop_03ba:	 ; start recycle frame loop
  1794 0000141A 4883FE05                	cmp rsi, 5
  1795 0000141E 742A                    	je .L_tc_recycle_frame_done_03ba
  1796 00001420 B904000000              	mov rcx, 4
  1797 00001425 4829F1                  	sub rcx, rsi
  1798 00001428 48C1E103                	shl rcx, 3
  1799 0000142C 4801E1                  	add rcx, rsp ; rcx is the index to move
  1800 0000142F 4889F3                  	mov rbx, rsi
  1801 00001432 48FFC3                  	inc rbx
  1802 00001435 48C1E303                	shl rbx, 3
  1803 00001439 48F7DB                  	neg rbx
  1804 0000143C 4801EB                  	add rbx, rbp ; rbx is the index to move to
  1805 0000143F 488B09                  	mov rcx, [rcx]
  1806 00001442 48890B                  	mov [rbx], rcx
  1807 00001445 48FFC6                  	inc rsi
  1808 00001448 EBD0                    	jmp .L_tc_recycle_frame_loop_03ba
  1809                                  .L_tc_recycle_frame_done_03ba:	 ; end recycle frame loop
  1810 0000144A BB05000000              	mov rbx, 5
  1811 0000144F 48C1E303                	shl rbx, 3
  1812 00001453 48F7DB                  	neg rbx
  1813 00001456 4801EB                  	add rbx, rbp
  1814 00001459 4889DC                  	mov rsp, rbx
  1815 0000145C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1816 00001460 FFE3                    	jmp rbx
  1817                                  	.L_if_end_0202:
  1818 00001462 C9                      	leave
  1819 00001463 C22000                  	ret 8 * (2 + 2)
  1820                                  .L_lambda_simple_end_023a:	; new closure is in rax
  1821 00001466 50                      	push rax
  1822 00001467 488B4528                	mov rax, PARAM(1)
  1823 0000146B 8F00                    	pop qword [rax]
  1824 0000146D 48B8-                   	mov rax, sob_void
  1824 0000146F [0000000000000000] 
  1825                                  
  1826 00001477 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1827 0000147C E8D2180000              	call malloc
  1828 00001481 50                      	push rax
  1829 00001482 BF10000000              	mov rdi, 8 * 2	; new rib
  1830 00001487 E8C7180000              	call malloc
  1831 0000148C 50                      	push rax
  1832 0000148D BF10000000              	mov rdi, 8 * 2	; extended env
  1833 00001492 E8BC180000              	call malloc
  1834 00001497 488B7D10                	mov rdi, ENV
  1835 0000149B BE00000000              	mov rsi, 0
  1836 000014A0 BA01000000              	mov rdx, 1
  1837                                  .L_lambda_opt_env_loop_0158:	; ext_env[i + 1] <-- env[i]
  1838 000014A5 4883FE01                	cmp rsi, 1
  1839 000014A9 7410                    	je .L_lambda_opt_env_end_0158
  1840 000014AB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1841 000014AF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1842 000014B3 48FFC6                  	inc rsi
  1843 000014B6 48FFC2                  	inc rdx
  1844 000014B9 EBEA                    	jmp .L_lambda_opt_env_loop_0158
  1845                                  .L_lambda_opt_env_end_0158:
  1846 000014BB 5B                      	pop rbx
  1847 000014BC BE00000000              	mov rsi, 0
  1848                                  .L_lambda_opt_params_loop_0158:	; copy params
  1849 000014C1 4883FE02                	cmp rsi, 2
  1850 000014C5 740E                    	je .L_lambda_opt_params_end_0158
  1851 000014C7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1852 000014CC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1853 000014D0 48FFC6                  	inc rsi
  1854 000014D3 EBEC                    	jmp .L_lambda_opt_params_loop_0158
  1855                                  .L_lambda_opt_params_end_0158:
  1856 000014D5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1857 000014D8 4889C3                  	mov rbx, rax
  1858 000014DB 58                      	pop rax
  1859 000014DC C60005                  	mov byte [rax], T_closure
  1860 000014DF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1861 000014E3 48C74009[F0140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0158
  1862 000014EB E9AC010000              	jmp .L_lambda_opt_end_0158
  1863                                  .L_lambda_opt_code_0158:	; lambda-simple body
  1864 000014F0 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  1865 000014F5 4889FB                  	mov rbx, rdi
  1866 000014F8 4883EB01                	sub rbx, 1
  1867 000014FC 7F46                    	jg .L_lambda_opt_arity_check_more_0158
  1868                                  .L_lambda_opt_arity_check_exact_0158:	 ; if params in opt is exact
  1869 000014FE 4883EC08                	sub rsp, 8
  1870 00001502 BE00000000              	mov rsi, 0 ; index
  1871                                  .L_lambda_opt_stack_enlarge_loop_0158:	 ; stack loop enlarge start
  1872 00001507 4883FE04                	cmp rsi, 4
  1873 0000150B 7420                    	je .L_lambda_opt_stack_enlarge_loop_exit_0158
  1874 0000150D 4889F7                  	mov rdi, rsi
  1875 00001510 48C1E703                	shl rdi, 3
  1876 00001514 4801E7                  	add rdi, rsp
  1877 00001517 4883C708                	add rdi, 8
  1878 0000151B 4889FB                  	mov rbx, rdi
  1879 0000151E 4883EB08                	sub rbx, 8
  1880 00001522 488B3F                  	mov rdi, [rdi]
  1881 00001525 48893B                  	mov [rbx], rdi
  1882 00001528 48FFC6                  	inc rsi
  1883 0000152B EBDA                    	jmp .L_lambda_opt_stack_enlarge_loop_0158
  1884                                  .L_lambda_opt_stack_enlarge_loop_exit_0158:	 ; end of stack enlarge loop
  1885 0000152D 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  1885 00001532 [01000000]         
  1886 00001536 48C744241002000000      	mov qword [rsp + 2*8], 2
  1887 0000153F E99F000000              	jmp .L_lambda_opt_stack_adjusted_0158
  1888                                  .L_lambda_opt_arity_check_more_0158:	 ; if params in opt is more
  1889 00001544 48B8-                   	mov rax, sob_nil
  1889 00001546 [0100000000000000] 
  1890 0000154E 4889DE                  	mov rsi, rbx ;index
  1891 00001551 48FFCE                  	dec rsi
  1892                                  .L_lambda_opt_list_create_loop_0158:	; start of list creation loop
  1893 00001554 4883FEFF                	cmp rsi, -1
  1894 00001558 7422                    	je .L_lambda_opt_list_create_loop_exit_0158
  1895 0000155A 488D4E04                	lea rcx, [rsi + (3 + 1)]
  1896 0000155E 48C1E103                	shl rcx, 3
  1897 00001562 4801E1                  	add rcx, rsp
  1898 00001565 488B09                  	mov rcx, [rcx]
  1899 00001568 56                      	push rsi
  1900 00001569 53                      	push rbx
  1901 0000156A 50                      	push rax
  1902 0000156B 51                      	push rcx
  1903 0000156C 6A02                    	push qword 2 ; push num of args
  1904 0000156E 6A01                    	push qword 1 ; push garbage
  1905 00001570 E855210000              	call L_code_ptr_cons
  1906 00001575 5B                      	pop rbx
  1907 00001576 5E                      	pop rsi
  1908 00001577 48FFCE                  	dec rsi
  1909 0000157A EBD8                    	jmp .L_lambda_opt_list_create_loop_0158
  1910                                  .L_lambda_opt_list_create_loop_exit_0158:	; end of list creation loop
  1911 0000157C 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  1912 00001581 4883C302                	add rbx, 2
  1913 00001585 4889DF                  	mov rdi, rbx
  1914 00001588 48C1E703                	shl rdi,3
  1915 0000158C 4801E7                  	add rdi, rsp
  1916 0000158F 488907                  	mov [rdi], rax
  1917 00001592 BE00000000              	mov rsi, 0 ;index
  1918                                  .L_lambda_opt_stack_shrink_loop_0158:	; start of stack shrink loop
  1919 00001597 4883FE04                	cmp rsi, 4
  1920 0000159B 742E                    	je .L_lambda_opt_stack_shrink_loop_exit_0158
  1921 0000159D BF03000000              	mov rdi, 3
  1922 000015A2 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  1923 000015A5 4889D9                  	mov rcx, rbx
  1924 000015A8 4829F1                  	sub rcx, rsi
  1925 000015AB 4883E901                	sub rcx, 1; the index of the target stack place to put the member
  1926 000015AF 4889FA                  	mov rdx, rdi
  1927 000015B2 48C1E203                	shl rdx, 3
  1928 000015B6 4801E2                  	add rdx, rsp
  1929 000015B9 48C1E103                	shl rcx, 3
  1930 000015BD 4801E1                  	add rcx, rsp
  1931 000015C0 488B12                  	mov rdx, [rdx]
  1932 000015C3 488911                  	mov [rcx], rdx
  1933 000015C6 48FFC6                  	inc rsi
  1934 000015C9 EBCC                    	jmp .L_lambda_opt_stack_shrink_loop_0158
  1935                                  .L_lambda_opt_stack_shrink_loop_exit_0158:	; end of stack shrink loop
  1936 000015CB 4883EB02                	sub rbx, 2 ; rbx has number of args
  1937 000015CF 4883EB02                	sub rbx, 2
  1938 000015D3 48C1E303                	shl rbx, 3
  1939 000015D7 4801DC                  	add rsp, rbx
  1940 000015DA 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  1941                                  .L_lambda_opt_stack_adjusted_0158:
  1942 000015E3 55                      	push rbp
  1943 000015E4 4889E5                  	mov rbp, rsp
  1944 000015E7 488B4528                	mov rax, PARAM(1)
  1945 000015EB 50                      	push rax
  1946 000015EC 6A01                    	push 1
  1947 000015EE 488B0425[00000000]      	mov rax, qword [free_var_0]
  1948                                  	assert_closure(rax)
    65 000015F6 803805              <1>  cmp byte [%1], %2
    66 000015F9 0F85C42F0000        <1>  jne L_error_incorrect_type
  1949 000015FF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1950 00001603 53                      	push rbx
  1951 00001604 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1952 00001608 FFD3                    	call rbx
  1953 0000160A 483D[02000000]          	cmp rax, sob_boolean_false
  1954 00001610 740A                    	je .L_if_else_0203
  1955 00001612 488D0425[01000000]      	lea rax, [1 + L_constants]
  1956 0000161A EB7C                    	jmp .L_if_end_0203
  1957                                  	.L_if_else_0203:
  1958 0000161C 488B4528                	mov rax, PARAM(1)
  1959 00001620 50                      	push rax
  1960 00001621 488B4520                	mov rax, PARAM(0)
  1961 00001625 50                      	push rax
  1962 00001626 6A02                    	push 2
  1963 00001628 488B4510                	mov rax, qword [rbp + 8*2]
  1964 0000162C 488B00                  	mov rax, qword [rax + 8*0]
  1965 0000162F 488B4008                	mov rax, qword [rax + 8*1]
  1966 00001633 488B00                  	mov rax, qword [rax]
  1967                                  	assert_closure(rax)
    65 00001636 803805              <1>  cmp byte [%1], %2
    66 00001639 0F85842F0000        <1>  jne L_error_incorrect_type
  1968 0000163F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1969 00001643 53                      	push rbx
  1970 00001644 FF7508                  	push RET_ADDR
  1971 00001647 488B6D00                	mov rbp, OLD_RDP
  1972 0000164B BE00000000              	mov rsi, 0
  1973                                  .L_tc_recycle_frame_loop_03bb:	 ; start recycle frame loop
  1974 00001650 4883FE05                	cmp rsi, 5
  1975 00001654 742A                    	je .L_tc_recycle_frame_done_03bb
  1976 00001656 B904000000              	mov rcx, 4
  1977 0000165B 4829F1                  	sub rcx, rsi
  1978 0000165E 48C1E103                	shl rcx, 3
  1979 00001662 4801E1                  	add rcx, rsp ; rcx is the index to move
  1980 00001665 4889F3                  	mov rbx, rsi
  1981 00001668 48FFC3                  	inc rbx
  1982 0000166B 48C1E303                	shl rbx, 3
  1983 0000166F 48F7DB                  	neg rbx
  1984 00001672 4801EB                  	add rbx, rbp ; rbx is the index to move to
  1985 00001675 488B09                  	mov rcx, [rcx]
  1986 00001678 48890B                  	mov [rbx], rcx
  1987 0000167B 48FFC6                  	inc rsi
  1988 0000167E EBD0                    	jmp .L_tc_recycle_frame_loop_03bb
  1989                                  .L_tc_recycle_frame_done_03bb:	 ; end recycle frame loop
  1990 00001680 BB05000000              	mov rbx, 5
  1991 00001685 48C1E303                	shl rbx, 3
  1992 00001689 48F7DB                  	neg rbx
  1993 0000168C 4801EB                  	add rbx, rbp
  1994 0000168F 4889DC                  	mov rsp, rbx
  1995 00001692 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1996 00001696 FFE3                    	jmp rbx
  1997                                  	.L_if_end_0203:
  1998 00001698 C9                      	leave
  1999 00001699 C22000                  	ret AND_KILL_FRAME(2)
  2000                                  .L_lambda_opt_end_0158:	; new closure is in rax
  2001 0000169C C9                      	leave
  2002 0000169D C22000                  	ret 8 * (2 + 2)
  2003                                  .L_lambda_simple_end_0238:	; new closure is in rax
  2004                                  	assert_closure(rax)
    65 000016A0 803805              <1>  cmp byte [%1], %2
    66 000016A3 0F851A2F0000        <1>  jne L_error_incorrect_type
  2005 000016A9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2006 000016AD 53                      	push rbx
  2007 000016AE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2008 000016B2 FFD3                    	call rbx
  2009 000016B4 48890425[E0010000]      	mov qword [free_var_60], rax
  2010 000016BC 48B8-                   	mov rax, sob_void
  2010 000016BE [0000000000000000] 
  2011                                  
  2012 000016C6 4889C7                  	mov rdi, rax
  2013 000016C9 E896160000              	call print_sexpr_if_not_void
  2014                                  
  2015 000016CE 488D0425[18000000]      	lea rax, [24 + L_constants]
  2016 000016D6 50                      	push rax
  2017 000016D7 488D0425[18000000]      	lea rax, [24 + L_constants]
  2018 000016DF 50                      	push rax
  2019 000016E0 6A02                    	push 2
  2020 000016E2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2021 000016E7 E867160000              	call malloc
  2022 000016EC 50                      	push rax
  2023 000016ED BF00000000              	mov rdi, 8 * 0	; new rib
  2024 000016F2 E85C160000              	call malloc
  2025 000016F7 50                      	push rax
  2026 000016F8 BF08000000              	mov rdi, 8 * 1	; extended env
  2027 000016FD E851160000              	call malloc
  2028 00001702 488B7D10                	mov rdi, ENV
  2029 00001706 BE00000000              	mov rsi, 0
  2030 0000170B BA01000000              	mov rdx, 1
  2031                                  .L_lambda_simple_env_loop_023b:	; ext_env[i + 1] <-- env[i]
  2032 00001710 4883FE00                	cmp rsi, 0
  2033 00001714 7410                    	je .L_lambda_simple_env_end_023b
  2034 00001716 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2035 0000171A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2036 0000171E 48FFC6                  	inc rsi
  2037 00001721 48FFC2                  	inc rdx
  2038 00001724 EBEA                    	jmp .L_lambda_simple_env_loop_023b
  2039                                  .L_lambda_simple_env_end_023b:
  2040 00001726 5B                      	pop rbx
  2041 00001727 BE00000000              	mov rsi, 0
  2042                                  .L_lambda_simple_params_loop_023b:	; copy params
  2043 0000172C 4883FE00                	cmp rsi, 0
  2044 00001730 740E                    	je .L_lambda_simple_params_end_023b
  2045 00001732 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2046 00001737 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2047 0000173B 48FFC6                  	inc rsi
  2048 0000173E EBEC                    	jmp .L_lambda_simple_params_loop_023b
  2049                                  .L_lambda_simple_params_end_023b:
  2050 00001740 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2051 00001743 4889C3                  	mov rbx, rax
  2052 00001746 58                      	pop rax
  2053 00001747 C60005                  	mov byte [rax], T_closure
  2054 0000174A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2055 0000174E 48C74009[5B170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_023b
  2056 00001756 E923060000              	jmp .L_lambda_simple_end_023b
  2057                                  .L_lambda_simple_code_023b:	; lambda-simple body
  2058 0000175B 48837C241002            	cmp qword [rsp + 8 * 2], 2
  2059 00001761 740B                    	je .L_lambda_simple_arity_check_ok_023b
  2060 00001763 FF742410                	push qword [rsp + 8 * 2]
  2061 00001767 6A02                    	push 2
  2062 00001769 E99E150000              	jmp L_error_incorrect_arity_simple
  2063                                  .L_lambda_simple_arity_check_ok_023b:
  2064 0000176E C8000000                	enter 0, 0
  2065 00001772 BF08000000              	mov qword rdi, 8
  2066 00001777 E8D7150000              	call malloc
  2067 0000177C 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  2068 00001780 48B8-                   	mov rax, sob_void
  2068 00001782 [0000000000000000] 
  2069                                  
  2070 0000178A BF08000000              	mov qword rdi, 8
  2071 0000178F E8BF150000              	call malloc
  2072 00001794 48894528                	mov qword [rbp + 8*(4 + 1)], rax
  2073 00001798 48B8-                   	mov rax, sob_void
  2073 0000179A [0000000000000000] 
  2074                                  
  2075 000017A2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2076 000017A7 E8A7150000              	call malloc
  2077 000017AC 50                      	push rax
  2078 000017AD BF10000000              	mov rdi, 8 * 2	; new rib
  2079 000017B2 E89C150000              	call malloc
  2080 000017B7 50                      	push rax
  2081 000017B8 BF10000000              	mov rdi, 8 * 2	; extended env
  2082 000017BD E891150000              	call malloc
  2083 000017C2 488B7D10                	mov rdi, ENV
  2084 000017C6 BE00000000              	mov rsi, 0
  2085 000017CB BA01000000              	mov rdx, 1
  2086                                  .L_lambda_simple_env_loop_023c:	; ext_env[i + 1] <-- env[i]
  2087 000017D0 4883FE01                	cmp rsi, 1
  2088 000017D4 7410                    	je .L_lambda_simple_env_end_023c
  2089 000017D6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2090 000017DA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2091 000017DE 48FFC6                  	inc rsi
  2092 000017E1 48FFC2                  	inc rdx
  2093 000017E4 EBEA                    	jmp .L_lambda_simple_env_loop_023c
  2094                                  .L_lambda_simple_env_end_023c:
  2095 000017E6 5B                      	pop rbx
  2096 000017E7 BE00000000              	mov rsi, 0
  2097                                  .L_lambda_simple_params_loop_023c:	; copy params
  2098 000017EC 4883FE02                	cmp rsi, 2
  2099 000017F0 740E                    	je .L_lambda_simple_params_end_023c
  2100 000017F2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2101 000017F7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2102 000017FB 48FFC6                  	inc rsi
  2103 000017FE EBEC                    	jmp .L_lambda_simple_params_loop_023c
  2104                                  .L_lambda_simple_params_end_023c:
  2105 00001800 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2106 00001803 4889C3                  	mov rbx, rax
  2107 00001806 58                      	pop rax
  2108 00001807 C60005                  	mov byte [rax], T_closure
  2109 0000180A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2110 0000180E 48C74009[1B180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_023c
  2111 00001816 E932010000              	jmp .L_lambda_simple_end_023c
  2112                                  .L_lambda_simple_code_023c:	; lambda-simple body
  2113 0000181B 48837C241002            	cmp qword [rsp + 8 * 2], 2
  2114 00001821 740B                    	je .L_lambda_simple_arity_check_ok_023c
  2115 00001823 FF742410                	push qword [rsp + 8 * 2]
  2116 00001827 6A02                    	push 2
  2117 00001829 E9DE140000              	jmp L_error_incorrect_arity_simple
  2118                                  .L_lambda_simple_arity_check_ok_023c:
  2119 0000182E C8000000                	enter 0, 0
  2120 00001832 488B4528                	mov rax, PARAM(1)
  2121 00001836 50                      	push rax
  2122 00001837 6A01                    	push 1
  2123 00001839 488B0425[00000000]      	mov rax, qword [free_var_0]
  2124                                  	assert_closure(rax)
    65 00001841 803805              <1>  cmp byte [%1], %2
    66 00001844 0F85792D0000        <1>  jne L_error_incorrect_type
  2125 0000184A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2126 0000184E 53                      	push rbx
  2127 0000184F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2128 00001853 FFD3                    	call rbx
  2129 00001855 483D[02000000]          	cmp rax, sob_boolean_false
  2130 0000185B 7409                    	je .L_if_else_0204
  2131 0000185D 488B4520                	mov rax, PARAM(0)
  2132 00001861 E9E3000000              	jmp .L_if_end_0204
  2133                                  	.L_if_else_0204:
  2134 00001866 488B4528                	mov rax, PARAM(1)
  2135 0000186A 50                      	push rax
  2136 0000186B 6A01                    	push 1
  2137 0000186D 488B0425[88000000]      	mov rax, qword [free_var_17]
  2138                                  	assert_closure(rax)
    65 00001875 803805              <1>  cmp byte [%1], %2
    66 00001878 0F85452D0000        <1>  jne L_error_incorrect_type
  2139 0000187E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2140 00001882 53                      	push rbx
  2141 00001883 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2142 00001887 FFD3                    	call rbx
  2143 00001889 50                      	push rax
  2144 0000188A 488B4528                	mov rax, PARAM(1)
  2145 0000188E 50                      	push rax
  2146 0000188F 6A01                    	push 1
  2147 00001891 488B0425[80000000]      	mov rax, qword [free_var_16]
  2148                                  	assert_closure(rax)
    65 00001899 803805              <1>  cmp byte [%1], %2
    66 0000189C 0F85212D0000        <1>  jne L_error_incorrect_type
  2149 000018A2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2150 000018A6 53                      	push rbx
  2151 000018A7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2152 000018AB FFD3                    	call rbx
  2153 000018AD 50                      	push rax
  2154 000018AE 6A02                    	push 2
  2155 000018B0 488B4510                	mov rax, qword [rbp + 8*2]
  2156 000018B4 488B00                  	mov rax, qword [rax + 8*0]
  2157 000018B7 488B00                  	mov rax, qword [rax + 8*0]
  2158 000018BA 488B00                  	mov rax, qword [rax]
  2159                                  	assert_closure(rax)
    65 000018BD 803805              <1>  cmp byte [%1], %2
    66 000018C0 0F85FD2C0000        <1>  jne L_error_incorrect_type
  2160 000018C6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2161 000018CA 53                      	push rbx
  2162 000018CB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2163 000018CF FFD3                    	call rbx
  2164 000018D1 50                      	push rax
  2165 000018D2 488B4520                	mov rax, PARAM(0)
  2166 000018D6 50                      	push rax
  2167 000018D7 6A02                    	push 2
  2168 000018D9 488B4510                	mov rax, qword [rbp + 8*2]
  2169 000018DD 488B00                  	mov rax, qword [rax + 8*0]
  2170 000018E0 488B4008                	mov rax, qword [rax + 8*1]
  2171 000018E4 488B00                  	mov rax, qword [rax]
  2172                                  	assert_closure(rax)
    65 000018E7 803805              <1>  cmp byte [%1], %2
    66 000018EA 0F85D32C0000        <1>  jne L_error_incorrect_type
  2173 000018F0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2174 000018F4 53                      	push rbx
  2175 000018F5 FF7508                  	push RET_ADDR
  2176 000018F8 488B6D00                	mov rbp, OLD_RDP
  2177 000018FC BE00000000              	mov rsi, 0
  2178                                  .L_tc_recycle_frame_loop_03bc:	 ; start recycle frame loop
  2179 00001901 4883FE05                	cmp rsi, 5
  2180 00001905 742A                    	je .L_tc_recycle_frame_done_03bc
  2181 00001907 B904000000              	mov rcx, 4
  2182 0000190C 4829F1                  	sub rcx, rsi
  2183 0000190F 48C1E103                	shl rcx, 3
  2184 00001913 4801E1                  	add rcx, rsp ; rcx is the index to move
  2185 00001916 4889F3                  	mov rbx, rsi
  2186 00001919 48FFC3                  	inc rbx
  2187 0000191C 48C1E303                	shl rbx, 3
  2188 00001920 48F7DB                  	neg rbx
  2189 00001923 4801EB                  	add rbx, rbp ; rbx is the index to move to
  2190 00001926 488B09                  	mov rcx, [rcx]
  2191 00001929 48890B                  	mov [rbx], rcx
  2192 0000192C 48FFC6                  	inc rsi
  2193 0000192F EBD0                    	jmp .L_tc_recycle_frame_loop_03bc
  2194                                  .L_tc_recycle_frame_done_03bc:	 ; end recycle frame loop
  2195 00001931 BB05000000              	mov rbx, 5
  2196 00001936 48C1E303                	shl rbx, 3
  2197 0000193A 48F7DB                  	neg rbx
  2198 0000193D 4801EB                  	add rbx, rbp
  2199 00001940 4889DC                  	mov rsp, rbx
  2200 00001943 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2201 00001947 FFE3                    	jmp rbx
  2202                                  	.L_if_end_0204:
  2203 00001949 C9                      	leave
  2204 0000194A C22000                  	ret 8 * (2 + 2)
  2205                                  .L_lambda_simple_end_023c:	; new closure is in rax
  2206 0000194D 50                      	push rax
  2207 0000194E 488B4520                	mov rax, PARAM(0)
  2208 00001952 8F00                    	pop qword [rax]
  2209 00001954 48B8-                   	mov rax, sob_void
  2209 00001956 [0000000000000000] 
  2210                                  
  2211 0000195E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2212 00001963 E8EB130000              	call malloc
  2213 00001968 50                      	push rax
  2214 00001969 BF10000000              	mov rdi, 8 * 2	; new rib
  2215 0000196E E8E0130000              	call malloc
  2216 00001973 50                      	push rax
  2217 00001974 BF10000000              	mov rdi, 8 * 2	; extended env
  2218 00001979 E8D5130000              	call malloc
  2219 0000197E 488B7D10                	mov rdi, ENV
  2220 00001982 BE00000000              	mov rsi, 0
  2221 00001987 BA01000000              	mov rdx, 1
  2222                                  .L_lambda_simple_env_loop_023d:	; ext_env[i + 1] <-- env[i]
  2223 0000198C 4883FE01                	cmp rsi, 1
  2224 00001990 7410                    	je .L_lambda_simple_env_end_023d
  2225 00001992 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2226 00001996 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2227 0000199A 48FFC6                  	inc rsi
  2228 0000199D 48FFC2                  	inc rdx
  2229 000019A0 EBEA                    	jmp .L_lambda_simple_env_loop_023d
  2230                                  .L_lambda_simple_env_end_023d:
  2231 000019A2 5B                      	pop rbx
  2232 000019A3 BE00000000              	mov rsi, 0
  2233                                  .L_lambda_simple_params_loop_023d:	; copy params
  2234 000019A8 4883FE02                	cmp rsi, 2
  2235 000019AC 740E                    	je .L_lambda_simple_params_end_023d
  2236 000019AE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2237 000019B3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2238 000019B7 48FFC6                  	inc rsi
  2239 000019BA EBEC                    	jmp .L_lambda_simple_params_loop_023d
  2240                                  .L_lambda_simple_params_end_023d:
  2241 000019BC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2242 000019BF 4889C3                  	mov rbx, rax
  2243 000019C2 58                      	pop rax
  2244 000019C3 C60005                  	mov byte [rax], T_closure
  2245 000019C6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2246 000019CA 48C74009[D7190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_023d
  2247 000019D2 E92D010000              	jmp .L_lambda_simple_end_023d
  2248                                  .L_lambda_simple_code_023d:	; lambda-simple body
  2249 000019D7 48837C241002            	cmp qword [rsp + 8 * 2], 2
  2250 000019DD 740B                    	je .L_lambda_simple_arity_check_ok_023d
  2251 000019DF FF742410                	push qword [rsp + 8 * 2]
  2252 000019E3 6A02                    	push 2
  2253 000019E5 E922130000              	jmp L_error_incorrect_arity_simple
  2254                                  .L_lambda_simple_arity_check_ok_023d:
  2255 000019EA C8000000                	enter 0, 0
  2256 000019EE 488B4520                	mov rax, PARAM(0)
  2257 000019F2 50                      	push rax
  2258 000019F3 6A01                    	push 1
  2259 000019F5 488B0425[00000000]      	mov rax, qword [free_var_0]
  2260                                  	assert_closure(rax)
    65 000019FD 803805              <1>  cmp byte [%1], %2
    66 00001A00 0F85BD2B0000        <1>  jne L_error_incorrect_type
  2261 00001A06 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2262 00001A0A 53                      	push rbx
  2263 00001A0B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2264 00001A0F FFD3                    	call rbx
  2265 00001A11 483D[02000000]          	cmp rax, sob_boolean_false
  2266 00001A17 7409                    	je .L_if_else_0205
  2267 00001A19 488B4528                	mov rax, PARAM(1)
  2268 00001A1D E9DE000000              	jmp .L_if_end_0205
  2269                                  	.L_if_else_0205:
  2270 00001A22 488B4528                	mov rax, PARAM(1)
  2271 00001A26 50                      	push rax
  2272 00001A27 488B4520                	mov rax, PARAM(0)
  2273 00001A2B 50                      	push rax
  2274 00001A2C 6A01                    	push 1
  2275 00001A2E 488B0425[88000000]      	mov rax, qword [free_var_17]
  2276                                  	assert_closure(rax)
    65 00001A36 803805              <1>  cmp byte [%1], %2
    66 00001A39 0F85842B0000        <1>  jne L_error_incorrect_type
  2277 00001A3F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2278 00001A43 53                      	push rbx
  2279 00001A44 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2280 00001A48 FFD3                    	call rbx
  2281 00001A4A 50                      	push rax
  2282 00001A4B 6A02                    	push 2
  2283 00001A4D 488B4510                	mov rax, qword [rbp + 8*2]
  2284 00001A51 488B00                  	mov rax, qword [rax + 8*0]
  2285 00001A54 488B4008                	mov rax, qword [rax + 8*1]
  2286 00001A58 488B00                  	mov rax, qword [rax]
  2287                                  	assert_closure(rax)
    65 00001A5B 803805              <1>  cmp byte [%1], %2
    66 00001A5E 0F855F2B0000        <1>  jne L_error_incorrect_type
  2288 00001A64 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2289 00001A68 53                      	push rbx
  2290 00001A69 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2291 00001A6D FFD3                    	call rbx
  2292 00001A6F 50                      	push rax
  2293 00001A70 488B4520                	mov rax, PARAM(0)
  2294 00001A74 50                      	push rax
  2295 00001A75 6A01                    	push 1
  2296 00001A77 488B0425[80000000]      	mov rax, qword [free_var_16]
  2297                                  	assert_closure(rax)
    65 00001A7F 803805              <1>  cmp byte [%1], %2
    66 00001A82 0F853B2B0000        <1>  jne L_error_incorrect_type
  2298 00001A88 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2299 00001A8C 53                      	push rbx
  2300 00001A8D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2301 00001A91 FFD3                    	call rbx
  2302 00001A93 50                      	push rax
  2303 00001A94 6A02                    	push 2
  2304 00001A96 488B0425[68000000]      	mov rax, qword [free_var_13]
  2305                                  	assert_closure(rax)
    65 00001A9E 803805              <1>  cmp byte [%1], %2
    66 00001AA1 0F851C2B0000        <1>  jne L_error_incorrect_type
  2306 00001AA7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2307 00001AAB 53                      	push rbx
  2308 00001AAC FF7508                  	push RET_ADDR
  2309 00001AAF 488B6D00                	mov rbp, OLD_RDP
  2310 00001AB3 BE00000000              	mov rsi, 0
  2311                                  .L_tc_recycle_frame_loop_03bd:	 ; start recycle frame loop
  2312 00001AB8 4883FE05                	cmp rsi, 5
  2313 00001ABC 742A                    	je .L_tc_recycle_frame_done_03bd
  2314 00001ABE B904000000              	mov rcx, 4
  2315 00001AC3 4829F1                  	sub rcx, rsi
  2316 00001AC6 48C1E103                	shl rcx, 3
  2317 00001ACA 4801E1                  	add rcx, rsp ; rcx is the index to move
  2318 00001ACD 4889F3                  	mov rbx, rsi
  2319 00001AD0 48FFC3                  	inc rbx
  2320 00001AD3 48C1E303                	shl rbx, 3
  2321 00001AD7 48F7DB                  	neg rbx
  2322 00001ADA 4801EB                  	add rbx, rbp ; rbx is the index to move to
  2323 00001ADD 488B09                  	mov rcx, [rcx]
  2324 00001AE0 48890B                  	mov [rbx], rcx
  2325 00001AE3 48FFC6                  	inc rsi
  2326 00001AE6 EBD0                    	jmp .L_tc_recycle_frame_loop_03bd
  2327                                  .L_tc_recycle_frame_done_03bd:	 ; end recycle frame loop
  2328 00001AE8 BB05000000              	mov rbx, 5
  2329 00001AED 48C1E303                	shl rbx, 3
  2330 00001AF1 48F7DB                  	neg rbx
  2331 00001AF4 4801EB                  	add rbx, rbp
  2332 00001AF7 4889DC                  	mov rsp, rbx
  2333 00001AFA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2334 00001AFE FFE3                    	jmp rbx
  2335                                  	.L_if_end_0205:
  2336 00001B00 C9                      	leave
  2337 00001B01 C22000                  	ret 8 * (2 + 2)
  2338                                  .L_lambda_simple_end_023d:	; new closure is in rax
  2339 00001B04 50                      	push rax
  2340 00001B05 488B4528                	mov rax, PARAM(1)
  2341 00001B09 8F00                    	pop qword [rax]
  2342 00001B0B 48B8-                   	mov rax, sob_void
  2342 00001B0D [0000000000000000] 
  2343                                  
  2344 00001B15 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2345 00001B1A E834120000              	call malloc
  2346 00001B1F 50                      	push rax
  2347 00001B20 BF10000000              	mov rdi, 8 * 2	; new rib
  2348 00001B25 E829120000              	call malloc
  2349 00001B2A 50                      	push rax
  2350 00001B2B BF10000000              	mov rdi, 8 * 2	; extended env
  2351 00001B30 E81E120000              	call malloc
  2352 00001B35 488B7D10                	mov rdi, ENV
  2353 00001B39 BE00000000              	mov rsi, 0
  2354 00001B3E BA01000000              	mov rdx, 1
  2355                                  .L_lambda_opt_env_loop_0159:	; ext_env[i + 1] <-- env[i]
  2356 00001B43 4883FE01                	cmp rsi, 1
  2357 00001B47 7410                    	je .L_lambda_opt_env_end_0159
  2358 00001B49 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2359 00001B4D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2360 00001B51 48FFC6                  	inc rsi
  2361 00001B54 48FFC2                  	inc rdx
  2362 00001B57 EBEA                    	jmp .L_lambda_opt_env_loop_0159
  2363                                  .L_lambda_opt_env_end_0159:
  2364 00001B59 5B                      	pop rbx
  2365 00001B5A BE00000000              	mov rsi, 0
  2366                                  .L_lambda_opt_params_loop_0159:	; copy params
  2367 00001B5F 4883FE02                	cmp rsi, 2
  2368 00001B63 740E                    	je .L_lambda_opt_params_end_0159
  2369 00001B65 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2370 00001B6A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2371 00001B6E 48FFC6                  	inc rsi
  2372 00001B71 EBEC                    	jmp .L_lambda_opt_params_loop_0159
  2373                                  .L_lambda_opt_params_end_0159:
  2374 00001B73 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2375 00001B76 4889C3                  	mov rbx, rax
  2376 00001B79 58                      	pop rax
  2377 00001B7A C60005                  	mov byte [rax], T_closure
  2378 00001B7D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2379 00001B81 48C74009[8E1B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0159
  2380 00001B89 E9EC010000              	jmp .L_lambda_opt_end_0159
  2381                                  .L_lambda_opt_code_0159:	; lambda-simple body
  2382 00001B8E 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  2383 00001B93 4889FB                  	mov rbx, rdi
  2384 00001B96 4883EB00                	sub rbx, 0
  2385 00001B9A 7F46                    	jg .L_lambda_opt_arity_check_more_0159
  2386                                  .L_lambda_opt_arity_check_exact_0159:	 ; if params in opt is exact
  2387 00001B9C 4883EC08                	sub rsp, 8
  2388 00001BA0 BE00000000              	mov rsi, 0 ; index
  2389                                  .L_lambda_opt_stack_enlarge_loop_0159:	 ; stack loop enlarge start
  2390 00001BA5 4883FE03                	cmp rsi, 3
  2391 00001BA9 7420                    	je .L_lambda_opt_stack_enlarge_loop_exit_0159
  2392 00001BAB 4889F7                  	mov rdi, rsi
  2393 00001BAE 48C1E703                	shl rdi, 3
  2394 00001BB2 4801E7                  	add rdi, rsp
  2395 00001BB5 4883C708                	add rdi, 8
  2396 00001BB9 4889FB                  	mov rbx, rdi
  2397 00001BBC 4883EB08                	sub rbx, 8
  2398 00001BC0 488B3F                  	mov rdi, [rdi]
  2399 00001BC3 48893B                  	mov [rbx], rdi
  2400 00001BC6 48FFC6                  	inc rsi
  2401 00001BC9 EBDA                    	jmp .L_lambda_opt_stack_enlarge_loop_0159
  2402                                  .L_lambda_opt_stack_enlarge_loop_exit_0159:	 ; end of stack enlarge loop
  2403 00001BCB 48C7442418-             	mov qword [rsp + 3*8], sob_nil
  2403 00001BD0 [01000000]         
  2404 00001BD4 48C744241001000000      	mov qword [rsp + 2*8], 1
  2405 00001BDD E99F000000              	jmp .L_lambda_opt_stack_adjusted_0159
  2406                                  .L_lambda_opt_arity_check_more_0159:	 ; if params in opt is more
  2407 00001BE2 48B8-                   	mov rax, sob_nil
  2407 00001BE4 [0100000000000000] 
  2408 00001BEC 4889DE                  	mov rsi, rbx ;index
  2409 00001BEF 48FFCE                  	dec rsi
  2410                                  .L_lambda_opt_list_create_loop_0159:	; start of list creation loop
  2411 00001BF2 4883FEFF                	cmp rsi, -1
  2412 00001BF6 7422                    	je .L_lambda_opt_list_create_loop_exit_0159
  2413 00001BF8 488D4E03                	lea rcx, [rsi + (3 + 0)]
  2414 00001BFC 48C1E103                	shl rcx, 3
  2415 00001C00 4801E1                  	add rcx, rsp
  2416 00001C03 488B09                  	mov rcx, [rcx]
  2417 00001C06 56                      	push rsi
  2418 00001C07 53                      	push rbx
  2419 00001C08 50                      	push rax
  2420 00001C09 51                      	push rcx
  2421 00001C0A 6A02                    	push qword 2 ; push num of args
  2422 00001C0C 6A01                    	push qword 1 ; push garbage
  2423 00001C0E E8B71A0000              	call L_code_ptr_cons
  2424 00001C13 5B                      	pop rbx
  2425 00001C14 5E                      	pop rsi
  2426 00001C15 48FFCE                  	dec rsi
  2427 00001C18 EBD8                    	jmp .L_lambda_opt_list_create_loop_0159
  2428                                  .L_lambda_opt_list_create_loop_exit_0159:	; end of list creation loop
  2429 00001C1A 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  2430 00001C1F 4883C302                	add rbx, 2
  2431 00001C23 4889DF                  	mov rdi, rbx
  2432 00001C26 48C1E703                	shl rdi,3
  2433 00001C2A 4801E7                  	add rdi, rsp
  2434 00001C2D 488907                  	mov [rdi], rax
  2435 00001C30 BE00000000              	mov rsi, 0 ;index
  2436                                  .L_lambda_opt_stack_shrink_loop_0159:	; start of stack shrink loop
  2437 00001C35 4883FE03                	cmp rsi, 3
  2438 00001C39 742E                    	je .L_lambda_opt_stack_shrink_loop_exit_0159
  2439 00001C3B BF02000000              	mov rdi, 2
  2440 00001C40 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  2441 00001C43 4889D9                  	mov rcx, rbx
  2442 00001C46 4829F1                  	sub rcx, rsi
  2443 00001C49 4883E901                	sub rcx, 1; the index of the target stack place to put the member
  2444 00001C4D 4889FA                  	mov rdx, rdi
  2445 00001C50 48C1E203                	shl rdx, 3
  2446 00001C54 4801E2                  	add rdx, rsp
  2447 00001C57 48C1E103                	shl rcx, 3
  2448 00001C5B 4801E1                  	add rcx, rsp
  2449 00001C5E 488B12                  	mov rdx, [rdx]
  2450 00001C61 488911                  	mov [rcx], rdx
  2451 00001C64 48FFC6                  	inc rsi
  2452 00001C67 EBCC                    	jmp .L_lambda_opt_stack_shrink_loop_0159
  2453                                  .L_lambda_opt_stack_shrink_loop_exit_0159:	; end of stack shrink loop
  2454 00001C69 4883EB02                	sub rbx, 2 ; rbx has number of args
  2455 00001C6D 4883EB01                	sub rbx, 1
  2456 00001C71 48C1E303                	shl rbx, 3
  2457 00001C75 4801DC                  	add rsp, rbx
  2458 00001C78 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  2459                                  .L_lambda_opt_stack_adjusted_0159:
  2460 00001C81 55                      	push rbp
  2461 00001C82 4889E5                  	mov rbp, rsp
  2462 00001C85 488B4520                	mov rax, PARAM(0)
  2463 00001C89 50                      	push rax
  2464 00001C8A 6A01                    	push 1
  2465 00001C8C 488B0425[00000000]      	mov rax, qword [free_var_0]
  2466                                  	assert_closure(rax)
    65 00001C94 803805              <1>  cmp byte [%1], %2
    66 00001C97 0F8526290000        <1>  jne L_error_incorrect_type
  2467 00001C9D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2468 00001CA1 53                      	push rbx
  2469 00001CA2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2470 00001CA6 FFD3                    	call rbx
  2471 00001CA8 483D[02000000]          	cmp rax, sob_boolean_false
  2472 00001CAE 740D                    	je .L_if_else_0206
  2473 00001CB0 488D0425[01000000]      	lea rax, [1 + L_constants]
  2474 00001CB8 E9B9000000              	jmp .L_if_end_0206
  2475                                  	.L_if_else_0206:
  2476 00001CBD 488B4520                	mov rax, PARAM(0)
  2477 00001CC1 50                      	push rax
  2478 00001CC2 6A01                    	push 1
  2479 00001CC4 488B0425[88000000]      	mov rax, qword [free_var_17]
  2480                                  	assert_closure(rax)
    65 00001CCC 803805              <1>  cmp byte [%1], %2
    66 00001CCF 0F85EE280000        <1>  jne L_error_incorrect_type
  2481 00001CD5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2482 00001CD9 53                      	push rbx
  2483 00001CDA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2484 00001CDE FFD3                    	call rbx
  2485 00001CE0 50                      	push rax
  2486 00001CE1 488B4520                	mov rax, PARAM(0)
  2487 00001CE5 50                      	push rax
  2488 00001CE6 6A01                    	push 1
  2489 00001CE8 488B0425[80000000]      	mov rax, qword [free_var_16]
  2490                                  	assert_closure(rax)
    65 00001CF0 803805              <1>  cmp byte [%1], %2
    66 00001CF3 0F85CA280000        <1>  jne L_error_incorrect_type
  2491 00001CF9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2492 00001CFD 53                      	push rbx
  2493 00001CFE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2494 00001D02 FFD3                    	call rbx
  2495 00001D04 50                      	push rax
  2496 00001D05 6A02                    	push 2
  2497 00001D07 488B4510                	mov rax, qword [rbp + 8*2]
  2498 00001D0B 488B00                  	mov rax, qword [rax + 8*0]
  2499 00001D0E 488B00                  	mov rax, qword [rax + 8*0]
  2500 00001D11 488B00                  	mov rax, qword [rax]
  2501                                  	assert_closure(rax)
    65 00001D14 803805              <1>  cmp byte [%1], %2
    66 00001D17 0F85A6280000        <1>  jne L_error_incorrect_type
  2502 00001D1D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2503 00001D21 53                      	push rbx
  2504 00001D22 FF7508                  	push RET_ADDR
  2505 00001D25 488B6D00                	mov rbp, OLD_RDP
  2506 00001D29 BE00000000              	mov rsi, 0
  2507                                  .L_tc_recycle_frame_loop_03be:	 ; start recycle frame loop
  2508 00001D2E 4883FE05                	cmp rsi, 5
  2509 00001D32 742A                    	je .L_tc_recycle_frame_done_03be
  2510 00001D34 B904000000              	mov rcx, 4
  2511 00001D39 4829F1                  	sub rcx, rsi
  2512 00001D3C 48C1E103                	shl rcx, 3
  2513 00001D40 4801E1                  	add rcx, rsp ; rcx is the index to move
  2514 00001D43 4889F3                  	mov rbx, rsi
  2515 00001D46 48FFC3                  	inc rbx
  2516 00001D49 48C1E303                	shl rbx, 3
  2517 00001D4D 48F7DB                  	neg rbx
  2518 00001D50 4801EB                  	add rbx, rbp ; rbx is the index to move to
  2519 00001D53 488B09                  	mov rcx, [rcx]
  2520 00001D56 48890B                  	mov [rbx], rcx
  2521 00001D59 48FFC6                  	inc rsi
  2522 00001D5C EBD0                    	jmp .L_tc_recycle_frame_loop_03be
  2523                                  .L_tc_recycle_frame_done_03be:	 ; end recycle frame loop
  2524 00001D5E BB05000000              	mov rbx, 5
  2525 00001D63 48C1E303                	shl rbx, 3
  2526 00001D67 48F7DB                  	neg rbx
  2527 00001D6A 4801EB                  	add rbx, rbp
  2528 00001D6D 4889DC                  	mov rsp, rbx
  2529 00001D70 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2530 00001D74 FFE3                    	jmp rbx
  2531                                  	.L_if_end_0206:
  2532 00001D76 C9                      	leave
  2533 00001D77 C21800                  	ret AND_KILL_FRAME(1)
  2534                                  .L_lambda_opt_end_0159:	; new closure is in rax
  2535 00001D7A C9                      	leave
  2536 00001D7B C22000                  	ret 8 * (2 + 2)
  2537                                  .L_lambda_simple_end_023b:	; new closure is in rax
  2538                                  	assert_closure(rax)
    65 00001D7E 803805              <1>  cmp byte [%1], %2
    66 00001D81 0F853C280000        <1>  jne L_error_incorrect_type
  2539 00001D87 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2540 00001D8B 53                      	push rbx
  2541 00001D8C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2542 00001D90 FFD3                    	call rbx
  2543 00001D92 48890425[A0020000]      	mov qword [free_var_84], rax
  2544 00001D9A 48B8-                   	mov rax, sob_void
  2544 00001D9C [0000000000000000] 
  2545                                  
  2546 00001DA4 4889C7                  	mov rdi, rax
  2547 00001DA7 E8B80F0000              	call print_sexpr_if_not_void
  2548                                  
  2549 00001DAC 488D0425[18000000]      	lea rax, [24 + L_constants]
  2550 00001DB4 50                      	push rax
  2551 00001DB5 6A01                    	push 1
  2552 00001DB7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2553 00001DBC E8920F0000              	call malloc
  2554 00001DC1 50                      	push rax
  2555 00001DC2 BF00000000              	mov rdi, 8 * 0	; new rib
  2556 00001DC7 E8870F0000              	call malloc
  2557 00001DCC 50                      	push rax
  2558 00001DCD BF08000000              	mov rdi, 8 * 1	; extended env
  2559 00001DD2 E87C0F0000              	call malloc
  2560 00001DD7 488B7D10                	mov rdi, ENV
  2561 00001DDB BE00000000              	mov rsi, 0
  2562 00001DE0 BA01000000              	mov rdx, 1
  2563                                  .L_lambda_simple_env_loop_023e:	; ext_env[i + 1] <-- env[i]
  2564 00001DE5 4883FE00                	cmp rsi, 0
  2565 00001DE9 7410                    	je .L_lambda_simple_env_end_023e
  2566 00001DEB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2567 00001DEF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2568 00001DF3 48FFC6                  	inc rsi
  2569 00001DF6 48FFC2                  	inc rdx
  2570 00001DF9 EBEA                    	jmp .L_lambda_simple_env_loop_023e
  2571                                  .L_lambda_simple_env_end_023e:
  2572 00001DFB 5B                      	pop rbx
  2573 00001DFC BE00000000              	mov rsi, 0
  2574                                  .L_lambda_simple_params_loop_023e:	; copy params
  2575 00001E01 4883FE00                	cmp rsi, 0
  2576 00001E05 740E                    	je .L_lambda_simple_params_end_023e
  2577 00001E07 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2578 00001E0C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2579 00001E10 48FFC6                  	inc rsi
  2580 00001E13 EBEC                    	jmp .L_lambda_simple_params_loop_023e
  2581                                  .L_lambda_simple_params_end_023e:
  2582 00001E15 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2583 00001E18 4889C3                  	mov rbx, rax
  2584 00001E1B 58                      	pop rax
  2585 00001E1C C60005                  	mov byte [rax], T_closure
  2586 00001E1F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2587 00001E23 48C74009[301E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_023e
  2588 00001E2B E902040000              	jmp .L_lambda_simple_end_023e
  2589                                  .L_lambda_simple_code_023e:	; lambda-simple body
  2590 00001E30 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2591 00001E36 740B                    	je .L_lambda_simple_arity_check_ok_023e
  2592 00001E38 FF742410                	push qword [rsp + 8 * 2]
  2593 00001E3C 6A01                    	push 1
  2594 00001E3E E9C90E0000              	jmp L_error_incorrect_arity_simple
  2595                                  .L_lambda_simple_arity_check_ok_023e:
  2596 00001E43 C8000000                	enter 0, 0
  2597 00001E47 BF08000000              	mov qword rdi, 8
  2598 00001E4C E8020F0000              	call malloc
  2599 00001E51 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  2600 00001E55 48B8-                   	mov rax, sob_void
  2600 00001E57 [0000000000000000] 
  2601                                  
  2602 00001E5F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2603 00001E64 E8EA0E0000              	call malloc
  2604 00001E69 50                      	push rax
  2605 00001E6A BF08000000              	mov rdi, 8 * 1	; new rib
  2606 00001E6F E8DF0E0000              	call malloc
  2607 00001E74 50                      	push rax
  2608 00001E75 BF10000000              	mov rdi, 8 * 2	; extended env
  2609 00001E7A E8D40E0000              	call malloc
  2610 00001E7F 488B7D10                	mov rdi, ENV
  2611 00001E83 BE00000000              	mov rsi, 0
  2612 00001E88 BA01000000              	mov rdx, 1
  2613                                  .L_lambda_simple_env_loop_023f:	; ext_env[i + 1] <-- env[i]
  2614 00001E8D 4883FE01                	cmp rsi, 1
  2615 00001E91 7410                    	je .L_lambda_simple_env_end_023f
  2616 00001E93 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2617 00001E97 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2618 00001E9B 48FFC6                  	inc rsi
  2619 00001E9E 48FFC2                  	inc rdx
  2620 00001EA1 EBEA                    	jmp .L_lambda_simple_env_loop_023f
  2621                                  .L_lambda_simple_env_end_023f:
  2622 00001EA3 5B                      	pop rbx
  2623 00001EA4 BE00000000              	mov rsi, 0
  2624                                  .L_lambda_simple_params_loop_023f:	; copy params
  2625 00001EA9 4883FE01                	cmp rsi, 1
  2626 00001EAD 740E                    	je .L_lambda_simple_params_end_023f
  2627 00001EAF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2628 00001EB4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2629 00001EB8 48FFC6                  	inc rsi
  2630 00001EBB EBEC                    	jmp .L_lambda_simple_params_loop_023f
  2631                                  .L_lambda_simple_params_end_023f:
  2632 00001EBD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2633 00001EC0 4889C3                  	mov rbx, rax
  2634 00001EC3 58                      	pop rax
  2635 00001EC4 C60005                  	mov byte [rax], T_closure
  2636 00001EC7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2637 00001ECB 48C74009[D81E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_023f
  2638 00001ED3 E951010000              	jmp .L_lambda_simple_end_023f
  2639                                  .L_lambda_simple_code_023f:	; lambda-simple body
  2640 00001ED8 48837C241003            	cmp qword [rsp + 8 * 2], 3
  2641 00001EDE 740B                    	je .L_lambda_simple_arity_check_ok_023f
  2642 00001EE0 FF742410                	push qword [rsp + 8 * 2]
  2643 00001EE4 6A03                    	push 3
  2644 00001EE6 E9210E0000              	jmp L_error_incorrect_arity_simple
  2645                                  .L_lambda_simple_arity_check_ok_023f:
  2646 00001EEB C8000000                	enter 0, 0
  2647 00001EEF 488B4530                	mov rax, PARAM(2)
  2648 00001EF3 50                      	push rax
  2649 00001EF4 488B0425[00000000]      	mov rax, qword [free_var_0]
  2650 00001EFC 50                      	push rax
  2651 00001EFD 6A02                    	push 2
  2652 00001EFF 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2653                                  	assert_closure(rax)
    65 00001F07 803805              <1>  cmp byte [%1], %2
    66 00001F0A 0F85B3260000        <1>  jne L_error_incorrect_type
  2654 00001F10 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2655 00001F14 53                      	push rbx
  2656 00001F15 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2657 00001F19 FFD3                    	call rbx
  2658 00001F1B 483D[02000000]          	cmp rax, sob_boolean_false
  2659 00001F21 7409                    	je .L_if_else_0207
  2660 00001F23 488B4528                	mov rax, PARAM(1)
  2661 00001F27 E9F9000000              	jmp .L_if_end_0207
  2662                                  	.L_if_else_0207:
  2663 00001F2C 488B4530                	mov rax, PARAM(2)
  2664 00001F30 50                      	push rax
  2665 00001F31 488B0425[88000000]      	mov rax, qword [free_var_17]
  2666 00001F39 50                      	push rax
  2667 00001F3A 6A02                    	push 2
  2668 00001F3C 488B0425[E0010000]      	mov rax, qword [free_var_60]
  2669                                  	assert_closure(rax)
    65 00001F44 803805              <1>  cmp byte [%1], %2
    66 00001F47 0F8576260000        <1>  jne L_error_incorrect_type
  2670 00001F4D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2671 00001F51 53                      	push rbx
  2672 00001F52 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2673 00001F56 FFD3                    	call rbx
  2674 00001F58 50                      	push rax
  2675 00001F59 488B4530                	mov rax, PARAM(2)
  2676 00001F5D 50                      	push rax
  2677 00001F5E 488B0425[80000000]      	mov rax, qword [free_var_16]
  2678 00001F66 50                      	push rax
  2679 00001F67 6A02                    	push 2
  2680 00001F69 488B0425[E0010000]      	mov rax, qword [free_var_60]
  2681                                  	assert_closure(rax)
    65 00001F71 803805              <1>  cmp byte [%1], %2
    66 00001F74 0F8549260000        <1>  jne L_error_incorrect_type
  2682 00001F7A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2683 00001F7E 53                      	push rbx
  2684 00001F7F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2685 00001F83 FFD3                    	call rbx
  2686 00001F85 50                      	push rax
  2687 00001F86 488B4528                	mov rax, PARAM(1)
  2688 00001F8A 50                      	push rax
  2689 00001F8B 488B4520                	mov rax, PARAM(0)
  2690 00001F8F 50                      	push rax
  2691 00001F90 6A03                    	push 3
  2692 00001F92 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2693                                  	assert_closure(rax)
    65 00001F9A 803805              <1>  cmp byte [%1], %2
    66 00001F9D 0F8520260000        <1>  jne L_error_incorrect_type
  2694 00001FA3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2695 00001FA7 53                      	push rbx
  2696 00001FA8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2697 00001FAC FFD3                    	call rbx
  2698 00001FAE 50                      	push rax
  2699 00001FAF 488B4520                	mov rax, PARAM(0)
  2700 00001FB3 50                      	push rax
  2701 00001FB4 6A03                    	push 3
  2702 00001FB6 488B4510                	mov rax, qword [rbp + 8*2]
  2703 00001FBA 488B00                  	mov rax, qword [rax + 8*0]
  2704 00001FBD 488B00                  	mov rax, qword [rax + 8*0]
  2705 00001FC0 488B00                  	mov rax, qword [rax]
  2706                                  	assert_closure(rax)
    65 00001FC3 803805              <1>  cmp byte [%1], %2
    66 00001FC6 0F85F7250000        <1>  jne L_error_incorrect_type
  2707 00001FCC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2708 00001FD0 53                      	push rbx
  2709 00001FD1 FF7508                  	push RET_ADDR
  2710 00001FD4 488B6D00                	mov rbp, OLD_RDP
  2711 00001FD8 BE00000000              	mov rsi, 0
  2712                                  .L_tc_recycle_frame_loop_03bf:	 ; start recycle frame loop
  2713 00001FDD 4883FE06                	cmp rsi, 6
  2714 00001FE1 742A                    	je .L_tc_recycle_frame_done_03bf
  2715 00001FE3 B905000000              	mov rcx, 5
  2716 00001FE8 4829F1                  	sub rcx, rsi
  2717 00001FEB 48C1E103                	shl rcx, 3
  2718 00001FEF 4801E1                  	add rcx, rsp ; rcx is the index to move
  2719 00001FF2 4889F3                  	mov rbx, rsi
  2720 00001FF5 48FFC3                  	inc rbx
  2721 00001FF8 48C1E303                	shl rbx, 3
  2722 00001FFC 48F7DB                  	neg rbx
  2723 00001FFF 4801EB                  	add rbx, rbp ; rbx is the index to move to
  2724 00002002 488B09                  	mov rcx, [rcx]
  2725 00002005 48890B                  	mov [rbx], rcx
  2726 00002008 48FFC6                  	inc rsi
  2727 0000200B EBD0                    	jmp .L_tc_recycle_frame_loop_03bf
  2728                                  .L_tc_recycle_frame_done_03bf:	 ; end recycle frame loop
  2729 0000200D BB06000000              	mov rbx, 6
  2730 00002012 48C1E303                	shl rbx, 3
  2731 00002016 48F7DB                  	neg rbx
  2732 00002019 4801EB                  	add rbx, rbp
  2733 0000201C 4889DC                  	mov rsp, rbx
  2734 0000201F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2735 00002023 FFE3                    	jmp rbx
  2736                                  	.L_if_end_0207:
  2737 00002025 C9                      	leave
  2738 00002026 C22800                  	ret 8 * (2 + 3)
  2739                                  .L_lambda_simple_end_023f:	; new closure is in rax
  2740 00002029 50                      	push rax
  2741 0000202A 488B4520                	mov rax, PARAM(0)
  2742 0000202E 8F00                    	pop qword [rax]
  2743 00002030 48B8-                   	mov rax, sob_void
  2743 00002032 [0000000000000000] 
  2744                                  
  2745 0000203A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2746 0000203F E80F0D0000              	call malloc
  2747 00002044 50                      	push rax
  2748 00002045 BF08000000              	mov rdi, 8 * 1	; new rib
  2749 0000204A E8040D0000              	call malloc
  2750 0000204F 50                      	push rax
  2751 00002050 BF10000000              	mov rdi, 8 * 2	; extended env
  2752 00002055 E8F90C0000              	call malloc
  2753 0000205A 488B7D10                	mov rdi, ENV
  2754 0000205E BE00000000              	mov rsi, 0
  2755 00002063 BA01000000              	mov rdx, 1
  2756                                  .L_lambda_opt_env_loop_015a:	; ext_env[i + 1] <-- env[i]
  2757 00002068 4883FE01                	cmp rsi, 1
  2758 0000206C 7410                    	je .L_lambda_opt_env_end_015a
  2759 0000206E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2760 00002072 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2761 00002076 48FFC6                  	inc rsi
  2762 00002079 48FFC2                  	inc rdx
  2763 0000207C EBEA                    	jmp .L_lambda_opt_env_loop_015a
  2764                                  .L_lambda_opt_env_end_015a:
  2765 0000207E 5B                      	pop rbx
  2766 0000207F BE00000000              	mov rsi, 0
  2767                                  .L_lambda_opt_params_loop_015a:	; copy params
  2768 00002084 4883FE01                	cmp rsi, 1
  2769 00002088 740E                    	je .L_lambda_opt_params_end_015a
  2770 0000208A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2771 0000208F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2772 00002093 48FFC6                  	inc rsi
  2773 00002096 EBEC                    	jmp .L_lambda_opt_params_loop_015a
  2774                                  .L_lambda_opt_params_end_015a:
  2775 00002098 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2776 0000209B 4889C3                  	mov rbx, rax
  2777 0000209E 58                      	pop rax
  2778 0000209F C60005                  	mov byte [rax], T_closure
  2779 000020A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2780 000020A6 48C74009[B3200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_015a
  2781 000020AE E97B010000              	jmp .L_lambda_opt_end_015a
  2782                                  .L_lambda_opt_code_015a:	; lambda-simple body
  2783 000020B3 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  2784 000020B8 4889FB                  	mov rbx, rdi
  2785 000020BB 4883EB02                	sub rbx, 2
  2786 000020BF 7F46                    	jg .L_lambda_opt_arity_check_more_015a
  2787                                  .L_lambda_opt_arity_check_exact_015a:	 ; if params in opt is exact
  2788 000020C1 4883EC08                	sub rsp, 8
  2789 000020C5 BE00000000              	mov rsi, 0 ; index
  2790                                  .L_lambda_opt_stack_enlarge_loop_015a:	 ; stack loop enlarge start
  2791 000020CA 4883FE05                	cmp rsi, 5
  2792 000020CE 7420                    	je .L_lambda_opt_stack_enlarge_loop_exit_015a
  2793 000020D0 4889F7                  	mov rdi, rsi
  2794 000020D3 48C1E703                	shl rdi, 3
  2795 000020D7 4801E7                  	add rdi, rsp
  2796 000020DA 4883C708                	add rdi, 8
  2797 000020DE 4889FB                  	mov rbx, rdi
  2798 000020E1 4883EB08                	sub rbx, 8
  2799 000020E5 488B3F                  	mov rdi, [rdi]
  2800 000020E8 48893B                  	mov [rbx], rdi
  2801 000020EB 48FFC6                  	inc rsi
  2802 000020EE EBDA                    	jmp .L_lambda_opt_stack_enlarge_loop_015a
  2803                                  .L_lambda_opt_stack_enlarge_loop_exit_015a:	 ; end of stack enlarge loop
  2804 000020F0 48C7442428-             	mov qword [rsp + 5*8], sob_nil
  2804 000020F5 [01000000]         
  2805 000020F9 48C744241003000000      	mov qword [rsp + 2*8], 3
  2806 00002102 E99F000000              	jmp .L_lambda_opt_stack_adjusted_015a
  2807                                  .L_lambda_opt_arity_check_more_015a:	 ; if params in opt is more
  2808 00002107 48B8-                   	mov rax, sob_nil
  2808 00002109 [0100000000000000] 
  2809 00002111 4889DE                  	mov rsi, rbx ;index
  2810 00002114 48FFCE                  	dec rsi
  2811                                  .L_lambda_opt_list_create_loop_015a:	; start of list creation loop
  2812 00002117 4883FEFF                	cmp rsi, -1
  2813 0000211B 7422                    	je .L_lambda_opt_list_create_loop_exit_015a
  2814 0000211D 488D4E05                	lea rcx, [rsi + (3 + 2)]
  2815 00002121 48C1E103                	shl rcx, 3
  2816 00002125 4801E1                  	add rcx, rsp
  2817 00002128 488B09                  	mov rcx, [rcx]
  2818 0000212B 56                      	push rsi
  2819 0000212C 53                      	push rbx
  2820 0000212D 50                      	push rax
  2821 0000212E 51                      	push rcx
  2822 0000212F 6A02                    	push qword 2 ; push num of args
  2823 00002131 6A01                    	push qword 1 ; push garbage
  2824 00002133 E892150000              	call L_code_ptr_cons
  2825 00002138 5B                      	pop rbx
  2826 00002139 5E                      	pop rsi
  2827 0000213A 48FFCE                  	dec rsi
  2828 0000213D EBD8                    	jmp .L_lambda_opt_list_create_loop_015a
  2829                                  .L_lambda_opt_list_create_loop_exit_015a:	; end of list creation loop
  2830 0000213F 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  2831 00002144 4883C302                	add rbx, 2
  2832 00002148 4889DF                  	mov rdi, rbx
  2833 0000214B 48C1E703                	shl rdi,3
  2834 0000214F 4801E7                  	add rdi, rsp
  2835 00002152 488907                  	mov [rdi], rax
  2836 00002155 BE00000000              	mov rsi, 0 ;index
  2837                                  .L_lambda_opt_stack_shrink_loop_015a:	; start of stack shrink loop
  2838 0000215A 4883FE05                	cmp rsi, 5
  2839 0000215E 742E                    	je .L_lambda_opt_stack_shrink_loop_exit_015a
  2840 00002160 BF04000000              	mov rdi, 4
  2841 00002165 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  2842 00002168 4889D9                  	mov rcx, rbx
  2843 0000216B 4829F1                  	sub rcx, rsi
  2844 0000216E 4883E901                	sub rcx, 1; the index of the target stack place to put the member
  2845 00002172 4889FA                  	mov rdx, rdi
  2846 00002175 48C1E203                	shl rdx, 3
  2847 00002179 4801E2                  	add rdx, rsp
  2848 0000217C 48C1E103                	shl rcx, 3
  2849 00002180 4801E1                  	add rcx, rsp
  2850 00002183 488B12                  	mov rdx, [rdx]
  2851 00002186 488911                  	mov [rcx], rdx
  2852 00002189 48FFC6                  	inc rsi
  2853 0000218C EBCC                    	jmp .L_lambda_opt_stack_shrink_loop_015a
  2854                                  .L_lambda_opt_stack_shrink_loop_exit_015a:	; end of stack shrink loop
  2855 0000218E 4883EB02                	sub rbx, 2 ; rbx has number of args
  2856 00002192 4883EB03                	sub rbx, 3
  2857 00002196 48C1E303                	shl rbx, 3
  2858 0000219A 4801DC                  	add rsp, rbx
  2859 0000219D 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  2860                                  .L_lambda_opt_stack_adjusted_015a:
  2861 000021A6 55                      	push rbp
  2862 000021A7 4889E5                  	mov rbp, rsp
  2863 000021AA 488B4530                	mov rax, PARAM(2)
  2864 000021AE 50                      	push rax
  2865 000021AF 488B4528                	mov rax, PARAM(1)
  2866 000021B3 50                      	push rax
  2867 000021B4 488B4520                	mov rax, PARAM(0)
  2868 000021B8 50                      	push rax
  2869 000021B9 6A03                    	push 3
  2870 000021BB 488B4510                	mov rax, qword [rbp + 8*2]
  2871 000021BF 488B00                  	mov rax, qword [rax + 8*0]
  2872 000021C2 488B00                  	mov rax, qword [rax + 8*0]
  2873 000021C5 488B00                  	mov rax, qword [rax]
  2874                                  	assert_closure(rax)
    65 000021C8 803805              <1>  cmp byte [%1], %2
    66 000021CB 0F85F2230000        <1>  jne L_error_incorrect_type
  2875 000021D1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2876 000021D5 53                      	push rbx
  2877 000021D6 FF7508                  	push RET_ADDR
  2878 000021D9 488B6D00                	mov rbp, OLD_RDP
  2879 000021DD BE00000000              	mov rsi, 0
  2880                                  .L_tc_recycle_frame_loop_03c0:	 ; start recycle frame loop
  2881 000021E2 4883FE06                	cmp rsi, 6
  2882 000021E6 742A                    	je .L_tc_recycle_frame_done_03c0
  2883 000021E8 B905000000              	mov rcx, 5
  2884 000021ED 4829F1                  	sub rcx, rsi
  2885 000021F0 48C1E103                	shl rcx, 3
  2886 000021F4 4801E1                  	add rcx, rsp ; rcx is the index to move
  2887 000021F7 4889F3                  	mov rbx, rsi
  2888 000021FA 48FFC3                  	inc rbx
  2889 000021FD 48C1E303                	shl rbx, 3
  2890 00002201 48F7DB                  	neg rbx
  2891 00002204 4801EB                  	add rbx, rbp ; rbx is the index to move to
  2892 00002207 488B09                  	mov rcx, [rcx]
  2893 0000220A 48890B                  	mov [rbx], rcx
  2894 0000220D 48FFC6                  	inc rsi
  2895 00002210 EBD0                    	jmp .L_tc_recycle_frame_loop_03c0
  2896                                  .L_tc_recycle_frame_done_03c0:	 ; end recycle frame loop
  2897 00002212 BB06000000              	mov rbx, 6
  2898 00002217 48C1E303                	shl rbx, 3
  2899 0000221B 48F7DB                  	neg rbx
  2900 0000221E 4801EB                  	add rbx, rbp
  2901 00002221 4889DC                  	mov rsp, rbx
  2902 00002224 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2903 00002228 FFE3                    	jmp rbx
  2904 0000222A C9                      	leave
  2905 0000222B C22800                  	ret AND_KILL_FRAME(3)
  2906                                  .L_lambda_opt_end_015a:	; new closure is in rax
  2907 0000222E C9                      	leave
  2908 0000222F C21800                  	ret 8 * (2 + 1)
  2909                                  .L_lambda_simple_end_023e:	; new closure is in rax
  2910                                  	assert_closure(rax)
    65 00002232 803805              <1>  cmp byte [%1], %2
    66 00002235 0F8588230000        <1>  jne L_error_incorrect_type
  2911 0000223B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2912 0000223F 53                      	push rbx
  2913 00002240 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2914 00002244 FFD3                    	call rbx
  2915 00002246 48890425[F8020000]      	mov qword [free_var_95], rax
  2916 0000224E 48B8-                   	mov rax, sob_void
  2916 00002250 [0000000000000000] 
  2917                                  
  2918 00002258 4889C7                  	mov rdi, rax
  2919 0000225B E8040B0000              	call print_sexpr_if_not_void
  2920                                  
  2921 00002260 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2922 00002265 E8E90A0000              	call malloc
  2923 0000226A 50                      	push rax
  2924 0000226B BF00000000              	mov rdi, 8 * 0	; new rib
  2925 00002270 E8DE0A0000              	call malloc
  2926 00002275 50                      	push rax
  2927 00002276 BF08000000              	mov rdi, 8 * 1	; extended env
  2928 0000227B E8D30A0000              	call malloc
  2929 00002280 488B7D10                	mov rdi, ENV
  2930 00002284 BE00000000              	mov rsi, 0
  2931 00002289 BA01000000              	mov rdx, 1
  2932                                  .L_lambda_simple_env_loop_0240:	; ext_env[i + 1] <-- env[i]
  2933 0000228E 4883FE00                	cmp rsi, 0
  2934 00002292 7410                    	je .L_lambda_simple_env_end_0240
  2935 00002294 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2936 00002298 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2937 0000229C 48FFC6                  	inc rsi
  2938 0000229F 48FFC2                  	inc rdx
  2939 000022A2 EBEA                    	jmp .L_lambda_simple_env_loop_0240
  2940                                  .L_lambda_simple_env_end_0240:
  2941 000022A4 5B                      	pop rbx
  2942 000022A5 BE00000000              	mov rsi, 0
  2943                                  .L_lambda_simple_params_loop_0240:	; copy params
  2944 000022AA 4883FE00                	cmp rsi, 0
  2945 000022AE 740E                    	je .L_lambda_simple_params_end_0240
  2946 000022B0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2947 000022B5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2948 000022B9 48FFC6                  	inc rsi
  2949 000022BC EBEC                    	jmp .L_lambda_simple_params_loop_0240
  2950                                  .L_lambda_simple_params_end_0240:
  2951 000022BE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2952 000022C1 4889C3                  	mov rbx, rax
  2953 000022C4 58                      	pop rax
  2954 000022C5 C60005                  	mov byte [rax], T_closure
  2955 000022C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2956 000022CC 48C74009[D9220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0240
  2957 000022D4 E999000000              	jmp .L_lambda_simple_end_0240
  2958                                  .L_lambda_simple_code_0240:	; lambda-simple body
  2959 000022D9 48837C241000            	cmp qword [rsp + 8 * 2], 0
  2960 000022DF 740B                    	je .L_lambda_simple_arity_check_ok_0240
  2961 000022E1 FF742410                	push qword [rsp + 8 * 2]
  2962 000022E5 6A00                    	push 0
  2963 000022E7 E9200A0000              	jmp L_error_incorrect_arity_simple
  2964                                  .L_lambda_simple_arity_check_ok_0240:
  2965 000022EC C8000000                	enter 0, 0
  2966 000022F0 488D0425[45000000]      	lea rax, [69 + L_constants]
  2967 000022F8 50                      	push rax
  2968 000022F9 488D0425[3C000000]      	lea rax, [60 + L_constants]
  2969 00002301 50                      	push rax
  2970 00002302 6A02                    	push 2
  2971 00002304 488B0425[30010000]      	mov rax, qword [free_var_38]
  2972                                  	assert_closure(rax)
    65 0000230C 803805              <1>  cmp byte [%1], %2
    66 0000230F 0F85AE220000        <1>  jne L_error_incorrect_type
  2973 00002315 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2974 00002319 53                      	push rbx
  2975 0000231A FF7508                  	push RET_ADDR
  2976 0000231D 488B6D00                	mov rbp, OLD_RDP
  2977 00002321 BE00000000              	mov rsi, 0
  2978                                  .L_tc_recycle_frame_loop_03c1:	 ; start recycle frame loop
  2979 00002326 4883FE05                	cmp rsi, 5
  2980 0000232A 742A                    	je .L_tc_recycle_frame_done_03c1
  2981 0000232C B904000000              	mov rcx, 4
  2982 00002331 4829F1                  	sub rcx, rsi
  2983 00002334 48C1E103                	shl rcx, 3
  2984 00002338 4801E1                  	add rcx, rsp ; rcx is the index to move
  2985 0000233B 4889F3                  	mov rbx, rsi
  2986 0000233E 48FFC3                  	inc rbx
  2987 00002341 48C1E303                	shl rbx, 3
  2988 00002345 48F7DB                  	neg rbx
  2989 00002348 4801EB                  	add rbx, rbp ; rbx is the index to move to
  2990 0000234B 488B09                  	mov rcx, [rcx]
  2991 0000234E 48890B                  	mov [rbx], rcx
  2992 00002351 48FFC6                  	inc rsi
  2993 00002354 EBD0                    	jmp .L_tc_recycle_frame_loop_03c1
  2994                                  .L_tc_recycle_frame_done_03c1:	 ; end recycle frame loop
  2995 00002356 BB05000000              	mov rbx, 5
  2996 0000235B 48C1E303                	shl rbx, 3
  2997 0000235F 48F7DB                  	neg rbx
  2998 00002362 4801EB                  	add rbx, rbp
  2999 00002365 4889DC                  	mov rsp, rbx
  3000 00002368 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3001 0000236C FFE3                    	jmp rbx
  3002 0000236E C9                      	leave
  3003 0000236F C21000                  	ret 8 * (2 + 0)
  3004                                  .L_lambda_simple_end_0240:	; new closure is in rax
  3005 00002372 50                      	push rax
  3006 00002373 6A01                    	push 1
  3007 00002375 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3008 0000237A E8D4090000              	call malloc
  3009 0000237F 50                      	push rax
  3010 00002380 BF00000000              	mov rdi, 8 * 0	; new rib
  3011 00002385 E8C9090000              	call malloc
  3012 0000238A 50                      	push rax
  3013 0000238B BF08000000              	mov rdi, 8 * 1	; extended env
  3014 00002390 E8BE090000              	call malloc
  3015 00002395 488B7D10                	mov rdi, ENV
  3016 00002399 BE00000000              	mov rsi, 0
  3017 0000239E BA01000000              	mov rdx, 1
  3018                                  .L_lambda_simple_env_loop_0241:	; ext_env[i + 1] <-- env[i]
  3019 000023A3 4883FE00                	cmp rsi, 0
  3020 000023A7 7410                    	je .L_lambda_simple_env_end_0241
  3021 000023A9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3022 000023AD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3023 000023B1 48FFC6                  	inc rsi
  3024 000023B4 48FFC2                  	inc rdx
  3025 000023B7 EBEA                    	jmp .L_lambda_simple_env_loop_0241
  3026                                  .L_lambda_simple_env_end_0241:
  3027 000023B9 5B                      	pop rbx
  3028 000023BA BE00000000              	mov rsi, 0
  3029                                  .L_lambda_simple_params_loop_0241:	; copy params
  3030 000023BF 4883FE00                	cmp rsi, 0
  3031 000023C3 740E                    	je .L_lambda_simple_params_end_0241
  3032 000023C5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3033 000023CA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3034 000023CE 48FFC6                  	inc rsi
  3035 000023D1 EBEC                    	jmp .L_lambda_simple_params_loop_0241
  3036                                  .L_lambda_simple_params_end_0241:
  3037 000023D3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3038 000023D6 4889C3                  	mov rbx, rax
  3039 000023D9 58                      	pop rax
  3040 000023DA C60005                  	mov byte [rax], T_closure
  3041 000023DD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3042 000023E1 48C74009[EE230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0241
  3043 000023E9 E928080000              	jmp .L_lambda_simple_end_0241
  3044                                  .L_lambda_simple_code_0241:	; lambda-simple body
  3045 000023EE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3046 000023F4 740B                    	je .L_lambda_simple_arity_check_ok_0241
  3047 000023F6 FF742410                	push qword [rsp + 8 * 2]
  3048 000023FA 6A01                    	push 1
  3049 000023FC E90B090000              	jmp L_error_incorrect_arity_simple
  3050                                  .L_lambda_simple_arity_check_ok_0241:
  3051 00002401 C8000000                	enter 0, 0
  3052 00002405 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3053 0000240A E844090000              	call malloc
  3054 0000240F 50                      	push rax
  3055 00002410 BF08000000              	mov rdi, 8 * 1	; new rib
  3056 00002415 E839090000              	call malloc
  3057 0000241A 50                      	push rax
  3058 0000241B BF10000000              	mov rdi, 8 * 2	; extended env
  3059 00002420 E82E090000              	call malloc
  3060 00002425 488B7D10                	mov rdi, ENV
  3061 00002429 BE00000000              	mov rsi, 0
  3062 0000242E BA01000000              	mov rdx, 1
  3063                                  .L_lambda_simple_env_loop_0242:	; ext_env[i + 1] <-- env[i]
  3064 00002433 4883FE01                	cmp rsi, 1
  3065 00002437 7410                    	je .L_lambda_simple_env_end_0242
  3066 00002439 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3067 0000243D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3068 00002441 48FFC6                  	inc rsi
  3069 00002444 48FFC2                  	inc rdx
  3070 00002447 EBEA                    	jmp .L_lambda_simple_env_loop_0242
  3071                                  .L_lambda_simple_env_end_0242:
  3072 00002449 5B                      	pop rbx
  3073 0000244A BE00000000              	mov rsi, 0
  3074                                  .L_lambda_simple_params_loop_0242:	; copy params
  3075 0000244F 4883FE01                	cmp rsi, 1
  3076 00002453 740E                    	je .L_lambda_simple_params_end_0242
  3077 00002455 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3078 0000245A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3079 0000245E 48FFC6                  	inc rsi
  3080 00002461 EBEC                    	jmp .L_lambda_simple_params_loop_0242
  3081                                  .L_lambda_simple_params_end_0242:
  3082 00002463 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3083 00002466 4889C3                  	mov rbx, rax
  3084 00002469 58                      	pop rax
  3085 0000246A C60005                  	mov byte [rax], T_closure
  3086 0000246D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3087 00002471 48C74009[7E240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0242
  3088 00002479 E9A2040000              	jmp .L_lambda_simple_end_0242
  3089                                  .L_lambda_simple_code_0242:	; lambda-simple body
  3090 0000247E 48837C241002            	cmp qword [rsp + 8 * 2], 2
  3091 00002484 740B                    	je .L_lambda_simple_arity_check_ok_0242
  3092 00002486 FF742410                	push qword [rsp + 8 * 2]
  3093 0000248A 6A02                    	push 2
  3094 0000248C E97B080000              	jmp L_error_incorrect_arity_simple
  3095                                  .L_lambda_simple_arity_check_ok_0242:
  3096 00002491 C8000000                	enter 0, 0
  3097 00002495 488B4520                	mov rax, PARAM(0)
  3098 00002499 50                      	push rax
  3099 0000249A 6A01                    	push 1
  3100 0000249C 488B0425[48000000]      	mov rax, qword [free_var_9]
  3101                                  	assert_closure(rax)
    65 000024A4 803805              <1>  cmp byte [%1], %2
    66 000024A7 0F8516210000        <1>  jne L_error_incorrect_type
  3102 000024AD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3103 000024B1 53                      	push rbx
  3104 000024B2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3105 000024B6 FFD3                    	call rbx
  3106 000024B8 483D[02000000]          	cmp rax, sob_boolean_false
  3107 000024BE 0F84DF010000            	je .L_if_else_0208
  3108 000024C4 488B4528                	mov rax, PARAM(1)
  3109 000024C8 50                      	push rax
  3110 000024C9 6A01                    	push 1
  3111 000024CB 488B0425[48000000]      	mov rax, qword [free_var_9]
  3112                                  	assert_closure(rax)
    65 000024D3 803805              <1>  cmp byte [%1], %2
    66 000024D6 0F85E7200000        <1>  jne L_error_incorrect_type
  3113 000024DC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3114 000024E0 53                      	push rbx
  3115 000024E1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3116 000024E5 FFD3                    	call rbx
  3117 000024E7 483D[02000000]          	cmp rax, sob_boolean_false
  3118 000024ED 747B                    	je .L_if_else_0209
  3119 000024EF 488B4528                	mov rax, PARAM(1)
  3120 000024F3 50                      	push rax
  3121 000024F4 488B4520                	mov rax, PARAM(0)
  3122 000024F8 50                      	push rax
  3123 000024F9 6A02                    	push 2
  3124 000024FB 488B0425[10010000]      	mov rax, qword [free_var_34]
  3125                                  	assert_closure(rax)
    65 00002503 803805              <1>  cmp byte [%1], %2
    66 00002506 0F85B7200000        <1>  jne L_error_incorrect_type
  3126 0000250C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3127 00002510 53                      	push rbx
  3128 00002511 FF7508                  	push RET_ADDR
  3129 00002514 488B6D00                	mov rbp, OLD_RDP
  3130 00002518 BE00000000              	mov rsi, 0
  3131                                  .L_tc_recycle_frame_loop_03c3:	 ; start recycle frame loop
  3132 0000251D 4883FE05                	cmp rsi, 5
  3133 00002521 742A                    	je .L_tc_recycle_frame_done_03c3
  3134 00002523 B904000000              	mov rcx, 4
  3135 00002528 4829F1                  	sub rcx, rsi
  3136 0000252B 48C1E103                	shl rcx, 3
  3137 0000252F 4801E1                  	add rcx, rsp ; rcx is the index to move
  3138 00002532 4889F3                  	mov rbx, rsi
  3139 00002535 48FFC3                  	inc rbx
  3140 00002538 48C1E303                	shl rbx, 3
  3141 0000253C 48F7DB                  	neg rbx
  3142 0000253F 4801EB                  	add rbx, rbp ; rbx is the index to move to
  3143 00002542 488B09                  	mov rcx, [rcx]
  3144 00002545 48890B                  	mov [rbx], rcx
  3145 00002548 48FFC6                  	inc rsi
  3146 0000254B EBD0                    	jmp .L_tc_recycle_frame_loop_03c3
  3147                                  .L_tc_recycle_frame_done_03c3:	 ; end recycle frame loop
  3148 0000254D BB05000000              	mov rbx, 5
  3149 00002552 48C1E303                	shl rbx, 3
  3150 00002556 48F7DB                  	neg rbx
  3151 00002559 4801EB                  	add rbx, rbp
  3152 0000255C 4889DC                  	mov rsp, rbx
  3153 0000255F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3154 00002563 FFE3                    	jmp rbx
  3155 00002565 E934010000              	jmp .L_if_end_0209
  3156                                  	.L_if_else_0209:
  3157 0000256A 488B4528                	mov rax, PARAM(1)
  3158 0000256E 50                      	push rax
  3159 0000256F 6A01                    	push 1
  3160 00002571 488B0425[40000000]      	mov rax, qword [free_var_8]
  3161                                  	assert_closure(rax)
    65 00002579 803805              <1>  cmp byte [%1], %2
    66 0000257C 0F8541200000        <1>  jne L_error_incorrect_type
  3162 00002582 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3163 00002586 53                      	push rbx
  3164 00002587 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3165 0000258B FFD3                    	call rbx
  3166 0000258D 483D[02000000]          	cmp rax, sob_boolean_false
  3167 00002593 0F8497000000            	je .L_if_else_020a
  3168 00002599 488B4528                	mov rax, PARAM(1)
  3169 0000259D 50                      	push rax
  3170 0000259E 488B4520                	mov rax, PARAM(0)
  3171 000025A2 50                      	push rax
  3172 000025A3 6A01                    	push 1
  3173 000025A5 488B0425[B8000000]      	mov rax, qword [free_var_23]
  3174                                  	assert_closure(rax)
    65 000025AD 803805              <1>  cmp byte [%1], %2
    66 000025B0 0F850D200000        <1>  jne L_error_incorrect_type
  3175 000025B6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3176 000025BA 53                      	push rbx
  3177 000025BB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3178 000025BF FFD3                    	call rbx
  3179 000025C1 50                      	push rax
  3180 000025C2 6A02                    	push 2
  3181 000025C4 488B0425[F0000000]      	mov rax, qword [free_var_30]
  3182                                  	assert_closure(rax)
    65 000025CC 803805              <1>  cmp byte [%1], %2
    66 000025CF 0F85EE1F0000        <1>  jne L_error_incorrect_type
  3183 000025D5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3184 000025D9 53                      	push rbx
  3185 000025DA FF7508                  	push RET_ADDR
  3186 000025DD 488B6D00                	mov rbp, OLD_RDP
  3187 000025E1 BE00000000              	mov rsi, 0
  3188                                  .L_tc_recycle_frame_loop_03c4:	 ; start recycle frame loop
  3189 000025E6 4883FE05                	cmp rsi, 5
  3190 000025EA 742A                    	je .L_tc_recycle_frame_done_03c4
  3191 000025EC B904000000              	mov rcx, 4
  3192 000025F1 4829F1                  	sub rcx, rsi
  3193 000025F4 48C1E103                	shl rcx, 3
  3194 000025F8 4801E1                  	add rcx, rsp ; rcx is the index to move
  3195 000025FB 4889F3                  	mov rbx, rsi
  3196 000025FE 48FFC3                  	inc rbx
  3197 00002601 48C1E303                	shl rbx, 3
  3198 00002605 48F7DB                  	neg rbx
  3199 00002608 4801EB                  	add rbx, rbp ; rbx is the index to move to
  3200 0000260B 488B09                  	mov rcx, [rcx]
  3201 0000260E 48890B                  	mov [rbx], rcx
  3202 00002611 48FFC6                  	inc rsi
  3203 00002614 EBD0                    	jmp .L_tc_recycle_frame_loop_03c4
  3204                                  .L_tc_recycle_frame_done_03c4:	 ; end recycle frame loop
  3205 00002616 BB05000000              	mov rbx, 5
  3206 0000261B 48C1E303                	shl rbx, 3
  3207 0000261F 48F7DB                  	neg rbx
  3208 00002622 4801EB                  	add rbx, rbp
  3209 00002625 4889DC                  	mov rsp, rbx
  3210 00002628 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3211 0000262C FFE3                    	jmp rbx
  3212 0000262E EB6E                    	jmp .L_if_end_020a
  3213                                  	.L_if_else_020a:
  3214 00002630 6A00                    	push 0
  3215 00002632 488B4510                	mov rax, qword [rbp + 8*2]
  3216 00002636 488B00                  	mov rax, qword [rax + 8*0]
  3217 00002639 488B00                  	mov rax, qword [rax + 8*0]
  3218                                  	assert_closure(rax)
    65 0000263C 803805              <1>  cmp byte [%1], %2
    66 0000263F 0F857E1F0000        <1>  jne L_error_incorrect_type
  3219 00002645 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3220 00002649 53                      	push rbx
  3221 0000264A FF7508                  	push RET_ADDR
  3222 0000264D 488B6D00                	mov rbp, OLD_RDP
  3223 00002651 BE00000000              	mov rsi, 0
  3224                                  .L_tc_recycle_frame_loop_03c5:	 ; start recycle frame loop
  3225 00002656 4883FE03                	cmp rsi, 3
  3226 0000265A 742A                    	je .L_tc_recycle_frame_done_03c5
  3227 0000265C B902000000              	mov rcx, 2
  3228 00002661 4829F1                  	sub rcx, rsi
  3229 00002664 48C1E103                	shl rcx, 3
  3230 00002668 4801E1                  	add rcx, rsp ; rcx is the index to move
  3231 0000266B 4889F3                  	mov rbx, rsi
  3232 0000266E 48FFC3                  	inc rbx
  3233 00002671 48C1E303                	shl rbx, 3
  3234 00002675 48F7DB                  	neg rbx
  3235 00002678 4801EB                  	add rbx, rbp ; rbx is the index to move to
  3236 0000267B 488B09                  	mov rcx, [rcx]
  3237 0000267E 48890B                  	mov [rbx], rcx
  3238 00002681 48FFC6                  	inc rsi
  3239 00002684 EBD0                    	jmp .L_tc_recycle_frame_loop_03c5
  3240                                  .L_tc_recycle_frame_done_03c5:	 ; end recycle frame loop
  3241 00002686 BB03000000              	mov rbx, 3
  3242 0000268B 48C1E303                	shl rbx, 3
  3243 0000268F 48F7DB                  	neg rbx
  3244 00002692 4801EB                  	add rbx, rbp
  3245 00002695 4889DC                  	mov rsp, rbx
  3246 00002698 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3247 0000269C FFE3                    	jmp rbx
  3248                                  	.L_if_end_020a:
  3249                                  	.L_if_end_0209:
  3250 0000269E E979020000              	jmp .L_if_end_0208
  3251                                  	.L_if_else_0208:
  3252 000026A3 488B4520                	mov rax, PARAM(0)
  3253 000026A7 50                      	push rax
  3254 000026A8 6A01                    	push 1
  3255 000026AA 488B0425[40000000]      	mov rax, qword [free_var_8]
  3256                                  	assert_closure(rax)
    65 000026B2 803805              <1>  cmp byte [%1], %2
    66 000026B5 0F85081F0000        <1>  jne L_error_incorrect_type
  3257 000026BB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3258 000026BF 53                      	push rbx
  3259 000026C0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3260 000026C4 FFD3                    	call rbx
  3261 000026C6 483D[02000000]          	cmp rax, sob_boolean_false
  3262 000026CC 0F84DC010000            	je .L_if_else_020b
  3263 000026D2 488B4528                	mov rax, PARAM(1)
  3264 000026D6 50                      	push rax
  3265 000026D7 6A01                    	push 1
  3266 000026D9 488B0425[48000000]      	mov rax, qword [free_var_9]
  3267                                  	assert_closure(rax)
    65 000026E1 803805              <1>  cmp byte [%1], %2
    66 000026E4 0F85D91E0000        <1>  jne L_error_incorrect_type
  3268 000026EA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3269 000026EE 53                      	push rbx
  3270 000026EF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3271 000026F3 FFD3                    	call rbx
  3272 000026F5 483D[02000000]          	cmp rax, sob_boolean_false
  3273 000026FB 0F849A000000            	je .L_if_else_020c
  3274 00002701 488B4528                	mov rax, PARAM(1)
  3275 00002705 50                      	push rax
  3276 00002706 6A01                    	push 1
  3277 00002708 488B0425[B8000000]      	mov rax, qword [free_var_23]
  3278                                  	assert_closure(rax)
    65 00002710 803805              <1>  cmp byte [%1], %2
    66 00002713 0F85AA1E0000        <1>  jne L_error_incorrect_type
  3279 00002719 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3280 0000271D 53                      	push rbx
  3281 0000271E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3282 00002722 FFD3                    	call rbx
  3283 00002724 50                      	push rax
  3284 00002725 488B4520                	mov rax, PARAM(0)
  3285 00002729 50                      	push rax
  3286 0000272A 6A02                    	push 2
  3287 0000272C 488B0425[F0000000]      	mov rax, qword [free_var_30]
  3288                                  	assert_closure(rax)
    65 00002734 803805              <1>  cmp byte [%1], %2
    66 00002737 0F85861E0000        <1>  jne L_error_incorrect_type
  3289 0000273D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3290 00002741 53                      	push rbx
  3291 00002742 FF7508                  	push RET_ADDR
  3292 00002745 488B6D00                	mov rbp, OLD_RDP
  3293 00002749 BE00000000              	mov rsi, 0
  3294                                  .L_tc_recycle_frame_loop_03c6:	 ; start recycle frame loop
  3295 0000274E 4883FE05                	cmp rsi, 5
  3296 00002752 742A                    	je .L_tc_recycle_frame_done_03c6
  3297 00002754 B904000000              	mov rcx, 4
  3298 00002759 4829F1                  	sub rcx, rsi
  3299 0000275C 48C1E103                	shl rcx, 3
  3300 00002760 4801E1                  	add rcx, rsp ; rcx is the index to move
  3301 00002763 4889F3                  	mov rbx, rsi
  3302 00002766 48FFC3                  	inc rbx
  3303 00002769 48C1E303                	shl rbx, 3
  3304 0000276D 48F7DB                  	neg rbx
  3305 00002770 4801EB                  	add rbx, rbp ; rbx is the index to move to
  3306 00002773 488B09                  	mov rcx, [rcx]
  3307 00002776 48890B                  	mov [rbx], rcx
  3308 00002779 48FFC6                  	inc rsi
  3309 0000277C EBD0                    	jmp .L_tc_recycle_frame_loop_03c6
  3310                                  .L_tc_recycle_frame_done_03c6:	 ; end recycle frame loop
  3311 0000277E BB05000000              	mov rbx, 5
  3312 00002783 48C1E303                	shl rbx, 3
  3313 00002787 48F7DB                  	neg rbx
  3314 0000278A 4801EB                  	add rbx, rbp
  3315 0000278D 4889DC                  	mov rsp, rbx
  3316 00002790 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3317 00002794 FFE3                    	jmp rbx
  3318 00002796 E911010000              	jmp .L_if_end_020c
  3319                                  	.L_if_else_020c:
  3320 0000279B 488B4528                	mov rax, PARAM(1)
  3321 0000279F 50                      	push rax
  3322 000027A0 6A01                    	push 1
  3323 000027A2 488B0425[40000000]      	mov rax, qword [free_var_8]
  3324                                  	assert_closure(rax)
    65 000027AA 803805              <1>  cmp byte [%1], %2
    66 000027AD 0F85101E0000        <1>  jne L_error_incorrect_type
  3325 000027B3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3326 000027B7 53                      	push rbx
  3327 000027B8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3328 000027BC FFD3                    	call rbx
  3329 000027BE 483D[02000000]          	cmp rax, sob_boolean_false
  3330 000027C4 7478                    	je .L_if_else_020d
  3331 000027C6 488B4528                	mov rax, PARAM(1)
  3332 000027CA 50                      	push rax
  3333 000027CB 488B4520                	mov rax, PARAM(0)
  3334 000027CF 50                      	push rax
  3335 000027D0 6A02                    	push 2
  3336 000027D2 488B0425[F0000000]      	mov rax, qword [free_var_30]
  3337                                  	assert_closure(rax)
    65 000027DA 803805              <1>  cmp byte [%1], %2
    66 000027DD 0F85E01D0000        <1>  jne L_error_incorrect_type
  3338 000027E3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3339 000027E7 53                      	push rbx
  3340 000027E8 FF7508                  	push RET_ADDR
  3341 000027EB 488B6D00                	mov rbp, OLD_RDP
  3342 000027EF BE00000000              	mov rsi, 0
  3343                                  .L_tc_recycle_frame_loop_03c7:	 ; start recycle frame loop
  3344 000027F4 4883FE05                	cmp rsi, 5
  3345 000027F8 742A                    	je .L_tc_recycle_frame_done_03c7
  3346 000027FA B904000000              	mov rcx, 4
  3347 000027FF 4829F1                  	sub rcx, rsi
  3348 00002802 48C1E103                	shl rcx, 3
  3349 00002806 4801E1                  	add rcx, rsp ; rcx is the index to move
  3350 00002809 4889F3                  	mov rbx, rsi
  3351 0000280C 48FFC3                  	inc rbx
  3352 0000280F 48C1E303                	shl rbx, 3
  3353 00002813 48F7DB                  	neg rbx
  3354 00002816 4801EB                  	add rbx, rbp ; rbx is the index to move to
  3355 00002819 488B09                  	mov rcx, [rcx]
  3356 0000281C 48890B                  	mov [rbx], rcx
  3357 0000281F 48FFC6                  	inc rsi
  3358 00002822 EBD0                    	jmp .L_tc_recycle_frame_loop_03c7
  3359                                  .L_tc_recycle_frame_done_03c7:	 ; end recycle frame loop
  3360 00002824 BB05000000              	mov rbx, 5
  3361 00002829 48C1E303                	shl rbx, 3
  3362 0000282D 48F7DB                  	neg rbx
  3363 00002830 4801EB                  	add rbx, rbp
  3364 00002833 4889DC                  	mov rsp, rbx
  3365 00002836 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3366 0000283A FFE3                    	jmp rbx
  3367 0000283C EB6E                    	jmp .L_if_end_020d
  3368                                  	.L_if_else_020d:
  3369 0000283E 6A00                    	push 0
  3370 00002840 488B4510                	mov rax, qword [rbp + 8*2]
  3371 00002844 488B00                  	mov rax, qword [rax + 8*0]
  3372 00002847 488B00                  	mov rax, qword [rax + 8*0]
  3373                                  	assert_closure(rax)
    65 0000284A 803805              <1>  cmp byte [%1], %2
    66 0000284D 0F85701D0000        <1>  jne L_error_incorrect_type
  3374 00002853 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3375 00002857 53                      	push rbx
  3376 00002858 FF7508                  	push RET_ADDR
  3377 0000285B 488B6D00                	mov rbp, OLD_RDP
  3378 0000285F BE00000000              	mov rsi, 0
  3379                                  .L_tc_recycle_frame_loop_03c8:	 ; start recycle frame loop
  3380 00002864 4883FE03                	cmp rsi, 3
  3381 00002868 742A                    	je .L_tc_recycle_frame_done_03c8
  3382 0000286A B902000000              	mov rcx, 2
  3383 0000286F 4829F1                  	sub rcx, rsi
  3384 00002872 48C1E103                	shl rcx, 3
  3385 00002876 4801E1                  	add rcx, rsp ; rcx is the index to move
  3386 00002879 4889F3                  	mov rbx, rsi
  3387 0000287C 48FFC3                  	inc rbx
  3388 0000287F 48C1E303                	shl rbx, 3
  3389 00002883 48F7DB                  	neg rbx
  3390 00002886 4801EB                  	add rbx, rbp ; rbx is the index to move to
  3391 00002889 488B09                  	mov rcx, [rcx]
  3392 0000288C 48890B                  	mov [rbx], rcx
  3393 0000288F 48FFC6                  	inc rsi
  3394 00002892 EBD0                    	jmp .L_tc_recycle_frame_loop_03c8
  3395                                  .L_tc_recycle_frame_done_03c8:	 ; end recycle frame loop
  3396 00002894 BB03000000              	mov rbx, 3
  3397 00002899 48C1E303                	shl rbx, 3
  3398 0000289D 48F7DB                  	neg rbx
  3399 000028A0 4801EB                  	add rbx, rbp
  3400 000028A3 4889DC                  	mov rsp, rbx
  3401 000028A6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3402 000028AA FFE3                    	jmp rbx
  3403                                  	.L_if_end_020d:
  3404                                  	.L_if_end_020c:
  3405 000028AC EB6E                    	jmp .L_if_end_020b
  3406                                  	.L_if_else_020b:
  3407 000028AE 6A00                    	push 0
  3408 000028B0 488B4510                	mov rax, qword [rbp + 8*2]
  3409 000028B4 488B00                  	mov rax, qword [rax + 8*0]
  3410 000028B7 488B00                  	mov rax, qword [rax + 8*0]
  3411                                  	assert_closure(rax)
    65 000028BA 803805              <1>  cmp byte [%1], %2
    66 000028BD 0F85001D0000        <1>  jne L_error_incorrect_type
  3412 000028C3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3413 000028C7 53                      	push rbx
  3414 000028C8 FF7508                  	push RET_ADDR
  3415 000028CB 488B6D00                	mov rbp, OLD_RDP
  3416 000028CF BE00000000              	mov rsi, 0
  3417                                  .L_tc_recycle_frame_loop_03c9:	 ; start recycle frame loop
  3418 000028D4 4883FE03                	cmp rsi, 3
  3419 000028D8 742A                    	je .L_tc_recycle_frame_done_03c9
  3420 000028DA B902000000              	mov rcx, 2
  3421 000028DF 4829F1                  	sub rcx, rsi
  3422 000028E2 48C1E103                	shl rcx, 3
  3423 000028E6 4801E1                  	add rcx, rsp ; rcx is the index to move
  3424 000028E9 4889F3                  	mov rbx, rsi
  3425 000028EC 48FFC3                  	inc rbx
  3426 000028EF 48C1E303                	shl rbx, 3
  3427 000028F3 48F7DB                  	neg rbx
  3428 000028F6 4801EB                  	add rbx, rbp ; rbx is the index to move to
  3429 000028F9 488B09                  	mov rcx, [rcx]
  3430 000028FC 48890B                  	mov [rbx], rcx
  3431 000028FF 48FFC6                  	inc rsi
  3432 00002902 EBD0                    	jmp .L_tc_recycle_frame_loop_03c9
  3433                                  .L_tc_recycle_frame_done_03c9:	 ; end recycle frame loop
  3434 00002904 BB03000000              	mov rbx, 3
  3435 00002909 48C1E303                	shl rbx, 3
  3436 0000290D 48F7DB                  	neg rbx
  3437 00002910 4801EB                  	add rbx, rbp
  3438 00002913 4889DC                  	mov rsp, rbx
  3439 00002916 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3440 0000291A FFE3                    	jmp rbx
  3441                                  	.L_if_end_020b:
  3442                                  	.L_if_end_0208:
  3443 0000291C C9                      	leave
  3444 0000291D C22000                  	ret 8 * (2 + 2)
  3445                                  .L_lambda_simple_end_0242:	; new closure is in rax
  3446 00002920 50                      	push rax
  3447 00002921 6A01                    	push 1
  3448 00002923 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3449 00002928 E826040000              	call malloc
  3450 0000292D 50                      	push rax
  3451 0000292E BF08000000              	mov rdi, 8 * 1	; new rib
  3452 00002933 E81B040000              	call malloc
  3453 00002938 50                      	push rax
  3454 00002939 BF10000000              	mov rdi, 8 * 2	; extended env
  3455 0000293E E810040000              	call malloc
  3456 00002943 488B7D10                	mov rdi, ENV
  3457 00002947 BE00000000              	mov rsi, 0
  3458 0000294C BA01000000              	mov rdx, 1
  3459                                  .L_lambda_simple_env_loop_0243:	; ext_env[i + 1] <-- env[i]
  3460 00002951 4883FE01                	cmp rsi, 1
  3461 00002955 7410                    	je .L_lambda_simple_env_end_0243
  3462 00002957 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3463 0000295B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3464 0000295F 48FFC6                  	inc rsi
  3465 00002962 48FFC2                  	inc rdx
  3466 00002965 EBEA                    	jmp .L_lambda_simple_env_loop_0243
  3467                                  .L_lambda_simple_env_end_0243:
  3468 00002967 5B                      	pop rbx
  3469 00002968 BE00000000              	mov rsi, 0
  3470                                  .L_lambda_simple_params_loop_0243:	; copy params
  3471 0000296D 4883FE01                	cmp rsi, 1
  3472 00002971 740E                    	je .L_lambda_simple_params_end_0243
  3473 00002973 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3474 00002978 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3475 0000297C 48FFC6                  	inc rsi
  3476 0000297F EBEC                    	jmp .L_lambda_simple_params_loop_0243
  3477                                  .L_lambda_simple_params_end_0243:
  3478 00002981 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3479 00002984 4889C3                  	mov rbx, rax
  3480 00002987 58                      	pop rax
  3481 00002988 C60005                  	mov byte [rax], T_closure
  3482 0000298B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3483 0000298F 48C74009[9C290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0243
  3484 00002997 E914020000              	jmp .L_lambda_simple_end_0243
  3485                                  .L_lambda_simple_code_0243:	; lambda-simple body
  3486 0000299C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3487 000029A2 740B                    	je .L_lambda_simple_arity_check_ok_0243
  3488 000029A4 FF742410                	push qword [rsp + 8 * 2]
  3489 000029A8 6A01                    	push 1
  3490 000029AA E95D030000              	jmp L_error_incorrect_arity_simple
  3491                                  .L_lambda_simple_arity_check_ok_0243:
  3492 000029AF C8000000                	enter 0, 0
  3493 000029B3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3494 000029B8 E896030000              	call malloc
  3495 000029BD 50                      	push rax
  3496 000029BE BF08000000              	mov rdi, 8 * 1	; new rib
  3497 000029C3 E88B030000              	call malloc
  3498 000029C8 50                      	push rax
  3499 000029C9 BF18000000              	mov rdi, 8 * 3	; extended env
  3500 000029CE E880030000              	call malloc
  3501 000029D3 488B7D10                	mov rdi, ENV
  3502 000029D7 BE00000000              	mov rsi, 0
  3503 000029DC BA01000000              	mov rdx, 1
  3504                                  .L_lambda_opt_env_loop_015b:	; ext_env[i + 1] <-- env[i]
  3505 000029E1 4883FE02                	cmp rsi, 2
  3506 000029E5 7410                    	je .L_lambda_opt_env_end_015b
  3507 000029E7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3508 000029EB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3509 000029EF 48FFC6                  	inc rsi
  3510 000029F2 48FFC2                  	inc rdx
  3511 000029F5 EBEA                    	jmp .L_lambda_opt_env_loop_015b
  3512                                  .L_lambda_opt_env_end_015b:
  3513 000029F7 5B                      	pop rbx
  3514 000029F8 BE00000000              	mov rsi, 0
  3515                                  .L_lambda_opt_params_loop_015b:	; copy params
  3516 000029FD 4883FE01                	cmp rsi, 1
  3517 00002A01 740E                    	je .L_lambda_opt_params_end_015b
  3518 00002A03 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3519 00002A08 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3520 00002A0C 48FFC6                  	inc rsi
  3521 00002A0F EBEC                    	jmp .L_lambda_opt_params_loop_015b
  3522                                  .L_lambda_opt_params_end_015b:
  3523 00002A11 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3524 00002A14 4889C3                  	mov rbx, rax
  3525 00002A17 58                      	pop rax
  3526 00002A18 C60005                  	mov byte [rax], T_closure
  3527 00002A1B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3528 00002A1F 48C74009[2C2A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_015b
  3529 00002A27 E980010000              	jmp .L_lambda_opt_end_015b
  3530                                  .L_lambda_opt_code_015b:	; lambda-simple body
  3531 00002A2C 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  3532 00002A31 4889FB                  	mov rbx, rdi
  3533 00002A34 4883EB00                	sub rbx, 0
  3534 00002A38 7F46                    	jg .L_lambda_opt_arity_check_more_015b
  3535                                  .L_lambda_opt_arity_check_exact_015b:	 ; if params in opt is exact
  3536 00002A3A 4883EC08                	sub rsp, 8
  3537 00002A3E BE00000000              	mov rsi, 0 ; index
  3538                                  .L_lambda_opt_stack_enlarge_loop_015b:	 ; stack loop enlarge start
  3539 00002A43 4883FE03                	cmp rsi, 3
  3540 00002A47 7420                    	je .L_lambda_opt_stack_enlarge_loop_exit_015b
  3541 00002A49 4889F7                  	mov rdi, rsi
  3542 00002A4C 48C1E703                	shl rdi, 3
  3543 00002A50 4801E7                  	add rdi, rsp
  3544 00002A53 4883C708                	add rdi, 8
  3545 00002A57 4889FB                  	mov rbx, rdi
  3546 00002A5A 4883EB08                	sub rbx, 8
  3547 00002A5E 488B3F                  	mov rdi, [rdi]
  3548 00002A61 48893B                  	mov [rbx], rdi
  3549 00002A64 48FFC6                  	inc rsi
  3550 00002A67 EBDA                    	jmp .L_lambda_opt_stack_enlarge_loop_015b
  3551                                  .L_lambda_opt_stack_enlarge_loop_exit_015b:	 ; end of stack enlarge loop
  3552 00002A69 48C7442418-             	mov qword [rsp + 3*8], sob_nil
  3552 00002A6E [01000000]         
  3553 00002A72 48C744241001000000      	mov qword [rsp + 2*8], 1
  3554 00002A7B E99F000000              	jmp .L_lambda_opt_stack_adjusted_015b
  3555                                  .L_lambda_opt_arity_check_more_015b:	 ; if params in opt is more
  3556 00002A80 48B8-                   	mov rax, sob_nil
  3556 00002A82 [0100000000000000] 
  3557 00002A8A 4889DE                  	mov rsi, rbx ;index
  3558 00002A8D 48FFCE                  	dec rsi
  3559                                  .L_lambda_opt_list_create_loop_015b:	; start of list creation loop
  3560 00002A90 4883FEFF                	cmp rsi, -1
  3561 00002A94 7422                    	je .L_lambda_opt_list_create_loop_exit_015b
  3562 00002A96 488D4E03                	lea rcx, [rsi + (3 + 0)]
  3563 00002A9A 48C1E103                	shl rcx, 3
  3564 00002A9E 4801E1                  	add rcx, rsp
  3565 00002AA1 488B09                  	mov rcx, [rcx]
  3566 00002AA4 56                      	push rsi
  3567 00002AA5 53                      	push rbx
  3568 00002AA6 50                      	push rax
  3569 00002AA7 51                      	push rcx
  3570 00002AA8 6A02                    	push qword 2 ; push num of args
  3571 00002AAA 6A01                    	push qword 1 ; push garbage
  3572 00002AAC E8190C0000              	call L_code_ptr_cons
  3573 00002AB1 5B                      	pop rbx
  3574 00002AB2 5E                      	pop rsi
  3575 00002AB3 48FFCE                  	dec rsi
  3576 00002AB6 EBD8                    	jmp .L_lambda_opt_list_create_loop_015b
  3577                                  .L_lambda_opt_list_create_loop_exit_015b:	; end of list creation loop
  3578 00002AB8 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  3579 00002ABD 4883C302                	add rbx, 2
  3580 00002AC1 4889DF                  	mov rdi, rbx
  3581 00002AC4 48C1E703                	shl rdi,3
  3582 00002AC8 4801E7                  	add rdi, rsp
  3583 00002ACB 488907                  	mov [rdi], rax
  3584 00002ACE BE00000000              	mov rsi, 0 ;index
  3585                                  .L_lambda_opt_stack_shrink_loop_015b:	; start of stack shrink loop
  3586 00002AD3 4883FE03                	cmp rsi, 3
  3587 00002AD7 742E                    	je .L_lambda_opt_stack_shrink_loop_exit_015b
  3588 00002AD9 BF02000000              	mov rdi, 2
  3589 00002ADE 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  3590 00002AE1 4889D9                  	mov rcx, rbx
  3591 00002AE4 4829F1                  	sub rcx, rsi
  3592 00002AE7 4883E901                	sub rcx, 1; the index of the target stack place to put the member
  3593 00002AEB 4889FA                  	mov rdx, rdi
  3594 00002AEE 48C1E203                	shl rdx, 3
  3595 00002AF2 4801E2                  	add rdx, rsp
  3596 00002AF5 48C1E103                	shl rcx, 3
  3597 00002AF9 4801E1                  	add rcx, rsp
  3598 00002AFC 488B12                  	mov rdx, [rdx]
  3599 00002AFF 488911                  	mov [rcx], rdx
  3600 00002B02 48FFC6                  	inc rsi
  3601 00002B05 EBCC                    	jmp .L_lambda_opt_stack_shrink_loop_015b
  3602                                  .L_lambda_opt_stack_shrink_loop_exit_015b:	; end of stack shrink loop
  3603 00002B07 4883EB02                	sub rbx, 2 ; rbx has number of args
  3604 00002B0B 4883EB01                	sub rbx, 1
  3605 00002B0F 48C1E303                	shl rbx, 3
  3606 00002B13 4801DC                  	add rsp, rbx
  3607 00002B16 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  3608                                  .L_lambda_opt_stack_adjusted_015b:
  3609 00002B1F 55                      	push rbp
  3610 00002B20 4889E5                  	mov rbp, rsp
  3611 00002B23 488B4520                	mov rax, PARAM(0)
  3612 00002B27 50                      	push rax
  3613 00002B28 488D0425[21000000]      	lea rax, [33 + L_constants]
  3614 00002B30 50                      	push rax
  3615 00002B31 488B4510                	mov rax, qword [rbp + 8*2]
  3616 00002B35 488B00                  	mov rax, qword [rax + 8*0]
  3617 00002B38 488B00                  	mov rax, qword [rax + 8*0]
  3618 00002B3B 50                      	push rax
  3619 00002B3C 6A03                    	push 3
  3620 00002B3E 488B0425[F8020000]      	mov rax, qword [free_var_95]
  3621                                  	assert_closure(rax)
    65 00002B46 803805              <1>  cmp byte [%1], %2
    66 00002B49 0F85741A0000        <1>  jne L_error_incorrect_type
  3622 00002B4F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3623 00002B53 53                      	push rbx
  3624 00002B54 FF7508                  	push RET_ADDR
  3625 00002B57 488B6D00                	mov rbp, OLD_RDP
  3626 00002B5B BE00000000              	mov rsi, 0
  3627                                  .L_tc_recycle_frame_loop_03ca:	 ; start recycle frame loop
  3628 00002B60 4883FE06                	cmp rsi, 6
  3629 00002B64 742A                    	je .L_tc_recycle_frame_done_03ca
  3630 00002B66 B905000000              	mov rcx, 5
  3631 00002B6B 4829F1                  	sub rcx, rsi
  3632 00002B6E 48C1E103                	shl rcx, 3
  3633 00002B72 4801E1                  	add rcx, rsp ; rcx is the index to move
  3634 00002B75 4889F3                  	mov rbx, rsi
  3635 00002B78 48FFC3                  	inc rbx
  3636 00002B7B 48C1E303                	shl rbx, 3
  3637 00002B7F 48F7DB                  	neg rbx
  3638 00002B82 4801EB                  	add rbx, rbp ; rbx is the index to move to
  3639 00002B85 488B09                  	mov rcx, [rcx]
  3640 00002B88 48890B                  	mov [rbx], rcx
  3641 00002B8B 48FFC6                  	inc rsi
  3642 00002B8E EBD0                    	jmp .L_tc_recycle_frame_loop_03ca
  3643                                  .L_tc_recycle_frame_done_03ca:	 ; end recycle frame loop
  3644 00002B90 BB06000000              	mov rbx, 6
  3645 00002B95 48C1E303                	shl rbx, 3
  3646 00002B99 48F7DB                  	neg rbx
  3647 00002B9C 4801EB                  	add rbx, rbp
  3648 00002B9F 4889DC                  	mov rsp, rbx
  3649 00002BA2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3650 00002BA6 FFE3                    	jmp rbx
  3651 00002BA8 C9                      	leave
  3652 00002BA9 C21800                  	ret AND_KILL_FRAME(1)
  3653                                  .L_lambda_opt_end_015b:	; new closure is in rax
  3654 00002BAC C9                      	leave
  3655 00002BAD C21800                  	ret 8 * (2 + 1)
  3656                                  .L_lambda_simple_end_0243:	; new closure is in rax
  3657                                  	assert_closure(rax)
    65 00002BB0 803805              <1>  cmp byte [%1], %2
    66 00002BB3 0F850A1A0000        <1>  jne L_error_incorrect_type
  3658 00002BB9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3659 00002BBD 53                      	push rbx
  3660 00002BBE FF7508                  	push RET_ADDR
  3661 00002BC1 488B6D00                	mov rbp, OLD_RDP
  3662 00002BC5 BE00000000              	mov rsi, 0
  3663                                  .L_tc_recycle_frame_loop_03c2:	 ; start recycle frame loop
  3664 00002BCA 4883FE04                	cmp rsi, 4
  3665 00002BCE 742A                    	je .L_tc_recycle_frame_done_03c2
  3666 00002BD0 B903000000              	mov rcx, 3
  3667 00002BD5 4829F1                  	sub rcx, rsi
  3668 00002BD8 48C1E103                	shl rcx, 3
  3669 00002BDC 4801E1                  	add rcx, rsp ; rcx is the index to move
  3670 00002BDF 4889F3                  	mov rbx, rsi
  3671 00002BE2 48FFC3                  	inc rbx
  3672 00002BE5 48C1E303                	shl rbx, 3
  3673 00002BE9 48F7DB                  	neg rbx
  3674 00002BEC 4801EB                  	add rbx, rbp ; rbx is the index to move to
  3675 00002BEF 488B09                  	mov rcx, [rcx]
  3676 00002BF2 48890B                  	mov [rbx], rcx
  3677 00002BF5 48FFC6                  	inc rsi
  3678 00002BF8 EBD0                    	jmp .L_tc_recycle_frame_loop_03c2
  3679                                  .L_tc_recycle_frame_done_03c2:	 ; end recycle frame loop
  3680 00002BFA BB04000000              	mov rbx, 4
  3681 00002BFF 48C1E303                	shl rbx, 3
  3682 00002C03 48F7DB                  	neg rbx
  3683 00002C06 4801EB                  	add rbx, rbp
  3684 00002C09 4889DC                  	mov rsp, rbx
  3685 00002C0C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3686 00002C10 FFE3                    	jmp rbx
  3687 00002C12 C9                      	leave
  3688 00002C13 C21800                  	ret 8 * (2 + 1)
  3689                                  .L_lambda_simple_end_0241:	; new closure is in rax
  3690                                  	assert_closure(rax)
    65 00002C16 803805              <1>  cmp byte [%1], %2
    66 00002C19 0F85A4190000        <1>  jne L_error_incorrect_type
  3691 00002C1F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3692 00002C23 53                      	push rbx
  3693 00002C24 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3694 00002C28 FFD3                    	call rbx
  3695 00002C2A 48890425[38030000]      	mov qword [free_var_103], rax
  3696 00002C32 48B8-                   	mov rax, sob_void
  3696 00002C34 [0000000000000000] 
  3697                                  
  3698 00002C3C 4889C7                  	mov rdi, rax
  3699 00002C3F E820010000              	call print_sexpr_if_not_void
  3700                                  
  3701 00002C44 488D0425[C3000000]      	lea rax, [195 + L_constants]
  3702 00002C4C 50                      	push rax
  3703 00002C4D 488B0425[38030000]      	mov rax, qword [free_var_103]
  3704 00002C55 50                      	push rax
  3705 00002C56 6A02                    	push 2
  3706 00002C58 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3707                                  	assert_closure(rax)
    65 00002C60 803805              <1>  cmp byte [%1], %2
    66 00002C63 0F855A190000        <1>  jne L_error_incorrect_type
  3708 00002C69 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3709 00002C6D 53                      	push rbx
  3710 00002C6E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3711 00002C72 FFD3                    	call rbx
  3712                                  
  3713 00002C74 4889C7                  	mov rdi, rax
  3714 00002C77 E8E8000000              	call print_sexpr_if_not_void
  3715                                  
  3716 00002C7C 48BF-                           mov rdi, fmt_memory_usage
  3716 00002C7E [3301000000000000] 
  3717 00002C86 488B3425[CE010000]              mov rsi, qword [top_of_memory]
  3718 00002C8E 4881EE[C0030000]                sub rsi, memory
  3719 00002C95 B800000000                      mov rax, 0
  3720                                  	ENTER
    56 00002C9A C8000000            <1>  enter 0, 0
    57 00002C9E 4883E4F0            <1>  and rsp, ~15
  3721 00002CA2 E8(00000000)                    call printf
  3722                                  	LEAVE
    61 00002CA7 C9                  <1>  leave
  3723 00002CA8 C9                      	leave
  3724 00002CA9 C3                      	ret
  3725                                  
  3726                                  L_error_non_closure:
  3727 00002CAA 488B3C25[00000000]              mov rdi, qword [stderr]
  3728 00002CB2 48BE-                           mov rsi, fmt_non_closure
  3728 00002CB4 [6A01000000000000] 
  3729 00002CBC B800000000                      mov rax, 0
  3730                                  	ENTER
    56 00002CC1 C8000000            <1>  enter 0, 0
    57 00002CC5 4883E4F0            <1>  and rsp, ~15
  3731 00002CC9 E8(00000000)                    call fprintf
  3732                                  	LEAVE
    61 00002CCE C9                  <1>  leave
  3733 00002CCF 48C7C0FEFFFFFF                  mov rax, -2
  3734 00002CD6 E8(00000000)                    call exit
  3735                                  
  3736                                  L_error_improper_list:
  3737 00002CDB 488B3C25[00000000]      	mov rdi, qword [stderr]
  3738 00002CE3 48BE-                   	mov rsi, fmt_error_improper_list
  3738 00002CE5 [9201000000000000] 
  3739 00002CED B800000000              	mov rax, 0
  3740                                  	ENTER
    56 00002CF2 C8000000            <1>  enter 0, 0
    57 00002CF6 4883E4F0            <1>  and rsp, ~15
  3741 00002CFA E8(00000000)            	call fprintf
  3742                                  	LEAVE
    61 00002CFF C9                  <1>  leave
  3743 00002D00 48C7C0F9FFFFFF          	mov rax, -7
  3744 00002D07 E8(00000000)            	call exit
  3745                                  
  3746                                  L_error_incorrect_arity_simple:
  3747 00002D0C 488B3C25[00000000]              mov rdi, qword [stderr]
  3748 00002D14 48BE-                           mov rsi, fmt_incorrect_arity_simple
  3748 00002D16 [D400000000000000] 
  3749 00002D1E EB12                            jmp L_error_incorrect_arity_common
  3750                                  L_error_incorrect_arity_opt:
  3751 00002D20 488B3C25[00000000]              mov rdi, qword [stderr]
  3752 00002D28 48BE-                           mov rsi, fmt_incorrect_arity_opt
  3752 00002D2A [FF00000000000000] 
  3753                                  L_error_incorrect_arity_common:
  3754 00002D32 5A                              pop rdx
  3755 00002D33 59                              pop rcx
  3756 00002D34 B800000000                      mov rax, 0
  3757                                  	ENTER
    56 00002D39 C8000000            <1>  enter 0, 0
    57 00002D3D 4883E4F0            <1>  and rsp, ~15
  3758 00002D41 E8(00000000)                    call fprintf
  3759                                  	LEAVE
    61 00002D46 C9                  <1>  leave
  3760 00002D47 48C7C0FAFFFFFF                  mov rax, -6
  3761 00002D4E E8(00000000)                    call exit
  3762                                  
  3763                                  section .data
  3764                                  fmt_incorrect_arity_simple:
  3765 000000D4 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  3765 000000DD 74656420256C642061-
  3765 000000E6 7267756D656E74732C-
  3765 000000EF 206275742067697665-
  3765 000000F8 6E20256C640A00     
  3766                                  fmt_incorrect_arity_opt:
  3767 000000FF 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  3767 00000108 746564206174206C65-
  3767 00000111 61737420256C642061-
  3767 0000011A 7267756D656E74732C-
  3767 00000123 206275742067697665-
  3767 0000012C 6E20256C640A00     
  3768                                  fmt_memory_usage:
  3769 00000133 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  3769 0000013C 6420256C6420627974-
  3769 00000145 6573206F662064796E-
  3769 0000014E 616D6963616C6C792D-
  3769 00000157 616C6C6F6361746564-
  3769 00000160 206D656D6F72790A0A-
  3769 00000169 00                 
  3770                                  fmt_non_closure:
  3771 0000016A 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  3771 00000173 7074696E6720746F20-
  3771 0000017C 6170706C792061206E-
  3771 00000185 6F6E2D636C6F737572-
  3771 0000018E 65210A00           
  3772                                  fmt_error_improper_list:
  3773 00000192 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  3773 0000019B 7267756D656E742069-
  3773 000001A4 73206E6F7420612070-
  3773 000001AD 726F706572206C6973-
  3773 000001B6 74210A00           
  3774                                  fmt_test:
  3775 000001BA 746573742068657265-             db `test here %d at %d\n\0`
  3775 000001C3 202564206174202564-
  3775 000001CC 0A00               
  3776                                  
  3777                                  section .bss
  3778                                  memory:
  3779 000003C0 <res 40000000h>         	resb gbytes(1)
  3780                                  
  3781                                  section .data
  3782                                  top_of_memory:
  3783 000001CE [C003000000000000]              dq memory
  3784                                  
  3785                                  section .text
  3786                                  malloc:
  3787 00002D53 488B0425[CE010000]              mov rax, qword [top_of_memory]
  3788 00002D5B 48013C25[CE010000]              add qword [top_of_memory], rdi
  3789 00002D63 C3                              ret
  3790                                          
  3791                                  print_sexpr_if_not_void:
  3792 00002D64 4881FF[00000000]        	cmp rdi, sob_void
  3793 00002D6B 7501                    	jne print_sexpr
  3794 00002D6D C3                      	ret
  3795                                  
  3796                                  section .data
  3797                                  fmt_void:
  3798 000001D6 233C766F69643E00        	db `#<void>\0`
  3799                                  fmt_nil:
  3800 000001DE 282900                  	db `()\0`
  3801                                  fmt_boolean_false:
  3802 000001E1 236600                  	db `#f\0`
  3803                                  fmt_boolean_true:
  3804 000001E4 237400                  	db `#t\0`
  3805                                  fmt_char_backslash:
  3806 000001E7 235C5C00                	db `#\\\\\0`
  3807                                  fmt_char_dquote:
  3808 000001EB 235C2200                	db `#\\"\0`
  3809                                  fmt_char_simple:
  3810 000001EF 235C256300              	db `#\\%c\0`
  3811                                  fmt_char_null:
  3812 000001F4 235C6E756C00            	db `#\\nul\0`
  3813                                  fmt_char_bell:
  3814 000001FA 235C62656C6C00          	db `#\\bell\0`
  3815                                  fmt_char_backspace:
  3816 00000201 235C6261636B737061-     	db `#\\backspace\0`
  3816 0000020A 636500             
  3817                                  fmt_char_tab:
  3818 0000020D 235C74616200            	db `#\\tab\0`
  3819                                  fmt_char_newline:
  3820 00000213 235C6E65776C696E65-     	db `#\\newline\0`
  3820 0000021C 00                 
  3821                                  fmt_char_formfeed:
  3822 0000021D 235C7061676500          	db `#\\page\0`
  3823                                  fmt_char_return:
  3824 00000224 235C72657475726E00      	db `#\\return\0`
  3825                                  fmt_char_escape:
  3826 0000022D 235C65736300            	db `#\\esc\0`
  3827                                  fmt_char_space:
  3828 00000233 235C737061636500        	db `#\\space\0`
  3829                                  fmt_char_hex:
  3830 0000023B 235C782530325800        	db `#\\x%02X\0`
  3831                                  fmt_closure:
  3832 00000243 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  3832 0000024C 206174203078253038-
  3832 00000255 5820656E763D307825-
  3832 0000025E 30385820636F64653D-
  3832 00000267 3078253038583E00   
  3833                                  fmt_lparen:
  3834 0000026F 2800                    	db `(\0`
  3835                                  fmt_dotted_pair:
  3836 00000271 202E2000                	db ` . \0`
  3837                                  fmt_rparen:
  3838 00000275 2900                    	db `)\0`
  3839                                  fmt_space:
  3840 00000277 2000                    	db ` \0`
  3841                                  fmt_empty_vector:
  3842 00000279 23282900                	db `#()\0`
  3843                                  fmt_vector:
  3844 0000027D 232800                  	db `#(\0`
  3845                                  fmt_real:
  3846 00000280 256600                  	db `%f\0`
  3847                                  fmt_fraction:
  3848 00000283 256C642F256C6400        	db `%ld/%ld\0`
  3849                                  fmt_zero:
  3850 0000028B 3000                    	db `0\0`
  3851                                  fmt_int:
  3852 0000028D 256C6400                	db `%ld\0`
  3853                                  fmt_unknown_sexpr_error:
  3854 00000291 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
  3854 0000029A 6F723A20556E6B6E6F-
  3854 000002A3 776E2074797065206F-
  3854 000002AC 662073657870722028-
  3854 000002B5 3078253032582920   
  3855 000002BD 617420616464726573-     	db `at address 0x%08X\n\n\0`
  3855 000002C6 73203078253038580A-
  3855 000002CF 0A00               
  3856                                  fmt_dquote:
  3857 000002D1 2200                    	db `\"\0`
  3858                                  fmt_string_char:
  3859 000002D3 256300                          db `%c\0`
  3860                                  fmt_string_char_7:
  3861 000002D6 5C6100                          db `\\a\0`
  3862                                  fmt_string_char_8:
  3863 000002D9 5C6200                          db `\\b\0`
  3864                                  fmt_string_char_9:
  3865 000002DC 5C7400                          db `\\t\0`
  3866                                  fmt_string_char_10:
  3867 000002DF 5C6E00                          db `\\n\0`
  3868                                  fmt_string_char_11:
  3869 000002E2 5C7600                          db `\\v\0`
  3870                                  fmt_string_char_12:
  3871 000002E5 5C6600                          db `\\f\0`
  3872                                  fmt_string_char_13:
  3873 000002E8 5C7200                          db `\\r\0`
  3874                                  fmt_string_char_34:
  3875 000002EB 5C2200                          db `\\"\0`
  3876                                  fmt_string_char_92:
  3877 000002EE 5C5C00                          db `\\\\\0`
  3878                                  fmt_string_char_hex:
  3879 000002F1 5C7825583B00                    db `\\x%X;\0`
  3880                                  
  3881                                  section .text
  3882                                  
  3883                                  print_sexpr:
  3884                                  	ENTER
    56 00002D6E C8000000            <1>  enter 0, 0
    57 00002D72 4883E4F0            <1>  and rsp, ~15
  3885 00002D76 8A07                    	mov al, byte [rdi]
  3886 00002D78 3C00                    	cmp al, T_void
  3887 00002D7A 744D                    	je .Lvoid
  3888 00002D7C 3C01                    	cmp al, T_nil
  3889 00002D7E 7458                    	je .Lnil
  3890 00002D80 3C09                    	cmp al, T_boolean_false
  3891 00002D82 7463                    	je .Lboolean_false
  3892 00002D84 3C0A                    	cmp al, T_boolean_true
  3893 00002D86 746E                    	je .Lboolean_true
  3894 00002D88 3C02                    	cmp al, T_char
  3895 00002D8A 7479                    	je .Lchar
  3896 00002D8C 3C04                    	cmp al, T_symbol
  3897 00002D8E 0F84BB010000            	je .Lsymbol
  3898 00002D94 3C21                    	cmp al, T_pair
  3899 00002D96 0F84D6010000            	je .Lpair
  3900 00002D9C 3C22                    	cmp al, T_vector
  3901 00002D9E 0F849F020000            	je .Lvector
  3902 00002DA4 3C05                    	cmp al, T_closure
  3903 00002DA6 0F8489010000            	je .Lclosure
  3904 00002DAC 3C12                    	cmp al, T_real
  3905 00002DAE 0F8430030000            	je .Lreal
  3906 00002DB4 3C11                    	cmp al, T_rational
  3907 00002DB6 0F8456030000            	je .Lrational
  3908 00002DBC 3C03                    	cmp al, T_string
  3909 00002DBE 0F848F030000            	je .Lstring
  3910                                  
  3911 00002DC4 E9C7040000              	jmp .Lunknown_sexpr_type
  3912                                  
  3913                                  .Lvoid:
  3914 00002DC9 48BF-                   	mov rdi, fmt_void
  3914 00002DCB [D601000000000000] 
  3915 00002DD3 E9F5040000              	jmp .Lemit
  3916                                  
  3917                                  .Lnil:
  3918 00002DD8 48BF-                   	mov rdi, fmt_nil
  3918 00002DDA [DE01000000000000] 
  3919 00002DE2 E9E6040000              	jmp .Lemit
  3920                                  
  3921                                  .Lboolean_false:
  3922 00002DE7 48BF-                   	mov rdi, fmt_boolean_false
  3922 00002DE9 [E101000000000000] 
  3923 00002DF1 E9D7040000              	jmp .Lemit
  3924                                  
  3925                                  .Lboolean_true:
  3926 00002DF6 48BF-                   	mov rdi, fmt_boolean_true
  3926 00002DF8 [E401000000000000] 
  3927 00002E00 E9C8040000              	jmp .Lemit
  3928                                  
  3929                                  .Lchar:
  3930 00002E05 8A4701                  	mov al, byte [rdi + 1]
  3931 00002E08 3C20                    	cmp al, ' '
  3932 00002E0A 7E28                    	jle .Lchar_whitespace
  3933 00002E0C 3C5C                    	cmp al, 92 		; backslash
  3934 00002E0E 0F847C000000            	je .Lchar_backslash
  3935 00002E14 3C22                    	cmp al, '"'
  3936 00002E16 0F8483000000            	je .Lchar_dquote
  3937 00002E1C 4825FF000000            	and rax, 255
  3938 00002E22 48BF-                   	mov rdi, fmt_char_simple
  3938 00002E24 [EF01000000000000] 
  3939 00002E2C 4889C6                  	mov rsi, rax
  3940 00002E2F E999040000              	jmp .Lemit
  3941                                  
  3942                                  .Lchar_whitespace:
  3943 00002E34 3C00                    	cmp al, 0
  3944 00002E36 7476                    	je .Lchar_null
  3945 00002E38 3C07                    	cmp al, 7
  3946 00002E3A 0F847D000000            	je .Lchar_bell
  3947 00002E40 3C08                    	cmp al, 8
  3948 00002E42 0F8484000000            	je .Lchar_backspace
  3949 00002E48 3C09                    	cmp al, 9
  3950 00002E4A 0F848B000000            	je .Lchar_tab
  3951 00002E50 3C0A                    	cmp al, 10
  3952 00002E52 0F8492000000            	je .Lchar_newline
  3953 00002E58 3C0C                    	cmp al, 12
  3954 00002E5A 0F8499000000            	je .Lchar_formfeed
  3955 00002E60 3C0D                    	cmp al, 13
  3956 00002E62 0F84A0000000            	je .Lchar_return
  3957 00002E68 3C1B                    	cmp al, 27
  3958 00002E6A 0F84A7000000            	je .Lchar_escape
  3959 00002E70 4825FF000000            	and rax, 255
  3960 00002E76 3C20                    	cmp al, ' '
  3961 00002E78 0F84A8000000            	je .Lchar_space
  3962 00002E7E 48BF-                   	mov rdi, fmt_char_hex
  3962 00002E80 [3B02000000000000] 
  3963 00002E88 4889C6                  	mov rsi, rax
  3964 00002E8B E93D040000              	jmp .Lemit	
  3965                                  
  3966                                  .Lchar_backslash:
  3967 00002E90 48BF-                   	mov rdi, fmt_char_backslash
  3967 00002E92 [E701000000000000] 
  3968 00002E9A E92E040000              	jmp .Lemit
  3969                                  
  3970                                  .Lchar_dquote:
  3971 00002E9F 48BF-                   	mov rdi, fmt_char_dquote
  3971 00002EA1 [EB01000000000000] 
  3972 00002EA9 E91F040000              	jmp .Lemit
  3973                                  
  3974                                  .Lchar_null:
  3975 00002EAE 48BF-                   	mov rdi, fmt_char_null
  3975 00002EB0 [F401000000000000] 
  3976 00002EB8 E910040000              	jmp .Lemit
  3977                                  
  3978                                  .Lchar_bell:
  3979 00002EBD 48BF-                   	mov rdi, fmt_char_bell
  3979 00002EBF [FA01000000000000] 
  3980 00002EC7 E901040000              	jmp .Lemit
  3981                                  
  3982                                  .Lchar_backspace:
  3983 00002ECC 48BF-                   	mov rdi, fmt_char_backspace
  3983 00002ECE [0102000000000000] 
  3984 00002ED6 E9F2030000              	jmp .Lemit
  3985                                  
  3986                                  .Lchar_tab:
  3987 00002EDB 48BF-                   	mov rdi, fmt_char_tab
  3987 00002EDD [0D02000000000000] 
  3988 00002EE5 E9E3030000              	jmp .Lemit
  3989                                  
  3990                                  .Lchar_newline:
  3991 00002EEA 48BF-                   	mov rdi, fmt_char_newline
  3991 00002EEC [1302000000000000] 
  3992 00002EF4 E9D4030000              	jmp .Lemit
  3993                                  
  3994                                  .Lchar_formfeed:
  3995 00002EF9 48BF-                   	mov rdi, fmt_char_formfeed
  3995 00002EFB [1D02000000000000] 
  3996 00002F03 E9C5030000              	jmp .Lemit
  3997                                  
  3998                                  .Lchar_return:
  3999 00002F08 48BF-                   	mov rdi, fmt_char_return
  3999 00002F0A [2402000000000000] 
  4000 00002F12 E9B6030000              	jmp .Lemit
  4001                                  
  4002                                  .Lchar_escape:
  4003 00002F17 48BF-                   	mov rdi, fmt_char_escape
  4003 00002F19 [2D02000000000000] 
  4004 00002F21 E9A7030000              	jmp .Lemit
  4005                                  
  4006                                  .Lchar_space:
  4007 00002F26 48BF-                   	mov rdi, fmt_char_space
  4007 00002F28 [3302000000000000] 
  4008 00002F30 E998030000              	jmp .Lemit
  4009                                  
  4010                                  .Lclosure:
  4011 00002F35 4889FE                  	mov rsi, qword rdi
  4012 00002F38 48BF-                   	mov rdi, fmt_closure
  4012 00002F3A [4302000000000000] 
  4013 00002F42 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  4014 00002F46 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  4015 00002F4A E97E030000              	jmp .Lemit
  4016                                  
  4017                                  .Lsymbol:
  4018 00002F4F 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  4019 00002F53 BE01000000              	mov rsi, 1		 ; size = 1 byte
  4020 00002F58 488B5701                	mov rdx, qword [rdi + 1] ; length
  4021 00002F5C 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  4022 00002F60 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  4023 00002F68 E8(00000000)            	call fwrite
  4024 00002F6D E970030000              	jmp .Lend
  4025                                  	
  4026                                  .Lpair:
  4027 00002F72 57                      	push rdi
  4028 00002F73 48BF-                   	mov rdi, fmt_lparen
  4028 00002F75 [6F02000000000000] 
  4029 00002F7D B800000000              	mov rax, 0
  4030                                          ENTER
    56 00002F82 C8000000            <1>  enter 0, 0
    57 00002F86 4883E4F0            <1>  and rsp, ~15
  4031 00002F8A E8(00000000)            	call printf
  4032                                          LEAVE
    61 00002F8F C9                  <1>  leave
  4033 00002F90 488B3C24                	mov rdi, qword [rsp] 	; pair
  4034 00002F94 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  4035 00002F98 E8D1FDFFFF              	call print_sexpr
  4036 00002F9D 5F                      	pop rdi 		; pair
  4037 00002F9E 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  4038                                  .Lcdr:
  4039 00002FA2 8A07                    	mov al, byte [rdi]
  4040 00002FA4 3C01                    	cmp al, T_nil
  4041 00002FA6 7447                    	je .Lcdr_nil
  4042 00002FA8 3C21                    	cmp al, T_pair
  4043 00002FAA 7462                    	je .Lcdr_pair
  4044 00002FAC 57                      	push rdi
  4045 00002FAD 48BF-                   	mov rdi, fmt_dotted_pair
  4045 00002FAF [7102000000000000] 
  4046 00002FB7 B800000000              	mov rax, 0
  4047                                  	ENTER
    56 00002FBC C8000000            <1>  enter 0, 0
    57 00002FC0 4883E4F0            <1>  and rsp, ~15
  4048 00002FC4 E8(00000000)            	call printf
  4049                                  	LEAVE
    61 00002FC9 C9                  <1>  leave
  4050 00002FCA 5F                      	pop rdi
  4051 00002FCB E89EFDFFFF              	call print_sexpr
  4052 00002FD0 48BF-                   	mov rdi, fmt_rparen
  4052 00002FD2 [7502000000000000] 
  4053 00002FDA B800000000              	mov rax, 0
  4054                                  	ENTER
    56 00002FDF C8000000            <1>  enter 0, 0
    57 00002FE3 4883E4F0            <1>  and rsp, ~15
  4055 00002FE7 E8(00000000)            	call printf
  4056                                  	LEAVE
    61 00002FEC C9                  <1>  leave
  4057                                  	LEAVE
    61 00002FED C9                  <1>  leave
  4058 00002FEE C3                      	ret
  4059                                  
  4060                                  .Lcdr_nil:
  4061 00002FEF 48BF-                   	mov rdi, fmt_rparen
  4061 00002FF1 [7502000000000000] 
  4062 00002FF9 B800000000              	mov rax, 0
  4063                                  	ENTER
    56 00002FFE C8000000            <1>  enter 0, 0
    57 00003002 4883E4F0            <1>  and rsp, ~15
  4064 00003006 E8(00000000)            	call printf
  4065                                  	LEAVE
    61 0000300B C9                  <1>  leave
  4066                                  	LEAVE
    61 0000300C C9                  <1>  leave
  4067 0000300D C3                      	ret
  4068                                  
  4069                                  .Lcdr_pair:
  4070 0000300E 57                      	push rdi
  4071 0000300F 48BF-                   	mov rdi, fmt_space
  4071 00003011 [7702000000000000] 
  4072 00003019 B800000000              	mov rax, 0
  4073                                  	ENTER
    56 0000301E C8000000            <1>  enter 0, 0
    57 00003022 4883E4F0            <1>  and rsp, ~15
  4074 00003026 E8(00000000)            	call printf
  4075                                  	LEAVE
    61 0000302B C9                  <1>  leave
  4076 0000302C 488B3C24                	mov rdi, qword [rsp]
  4077 00003030 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  4078 00003034 E835FDFFFF              	call print_sexpr
  4079 00003039 5F                      	pop rdi
  4080 0000303A 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  4081 0000303E E95FFFFFFF              	jmp .Lcdr
  4082                                  
  4083                                  .Lvector:
  4084 00003043 488B4701                	mov rax, qword [rdi + 1] ; length
  4085 00003047 4883F800                	cmp rax, 0
  4086 0000304B 0F8484000000            	je .Lvector_empty
  4087 00003051 57                      	push rdi
  4088 00003052 48BF-                   	mov rdi, fmt_vector
  4088 00003054 [7D02000000000000] 
  4089 0000305C B800000000              	mov rax, 0
  4090                                  	ENTER
    56 00003061 C8000000            <1>  enter 0, 0
    57 00003065 4883E4F0            <1>  and rsp, ~15
  4091 00003069 E8(00000000)            	call printf
  4092                                  	LEAVE
    61 0000306E C9                  <1>  leave
  4093 0000306F 488B3C24                	mov rdi, qword [rsp]
  4094 00003073 FF7701                  	push qword [rdi + 1]
  4095 00003076 6A01                    	push 1
  4096 00003078 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  4097 0000307C E8EDFCFFFF              	call print_sexpr
  4098                                  .Lvector_loop:
  4099                                  	; [rsp] index
  4100                                  	; [rsp + 8*1] limit
  4101                                  	; [rsp + 8*2] vector
  4102 00003081 488B0424                	mov rax, qword [rsp]
  4103 00003085 483B442408              	cmp rax, qword [rsp + 8*1]
  4104 0000308A 7436                    	je .Lvector_end
  4105 0000308C 48BF-                   	mov rdi, fmt_space
  4105 0000308E [7702000000000000] 
  4106 00003096 B800000000              	mov rax, 0
  4107                                  	ENTER
    56 0000309B C8000000            <1>  enter 0, 0
    57 0000309F 4883E4F0            <1>  and rsp, ~15
  4108 000030A3 E8(00000000)            	call printf
  4109                                  	LEAVE
    61 000030A8 C9                  <1>  leave
  4110 000030A9 488B0424                	mov rax, qword [rsp]
  4111 000030AD 488B5C2410              	mov rbx, qword [rsp + 8*2]
  4112 000030B2 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  4113 000030B7 E8B2FCFFFF              	call print_sexpr
  4114 000030BC 48FF0424                	inc qword [rsp]
  4115 000030C0 EBBF                    	jmp .Lvector_loop
  4116                                  
  4117                                  .Lvector_end:
  4118 000030C2 4883C418                	add rsp, 8*3
  4119 000030C6 48BF-                   	mov rdi, fmt_rparen
  4119 000030C8 [7502000000000000] 
  4120 000030D0 E9F8010000              	jmp .Lemit	
  4121                                  
  4122                                  .Lvector_empty:
  4123 000030D5 48BF-                   	mov rdi, fmt_empty_vector
  4123 000030D7 [7902000000000000] 
  4124 000030DF E9E9010000              	jmp .Lemit
  4125                                  
  4126                                  .Lreal:
  4127 000030E4 FF7701                  	push qword [rdi + 1]
  4128 000030E7 F20F100424              	movsd xmm0, qword [rsp]
  4129 000030EC 4883C408                	add rsp, 8*1
  4130 000030F0 48BF-                   	mov rdi, fmt_real
  4130 000030F2 [8002000000000000] 
  4131 000030FA B801000000              	mov rax, 1
  4132                                  	ENTER
    56 000030FF C8000000            <1>  enter 0, 0
    57 00003103 4883E4F0            <1>  and rsp, ~15
  4133 00003107 E8(00000000)            	call printf
  4134                                  	LEAVE
    61 0000310C C9                  <1>  leave
  4135 0000310D E9D0010000              	jmp .Lend
  4136                                  
  4137                                  .Lrational:
  4138 00003112 488B7701                	mov rsi, qword [rdi + 1]
  4139 00003116 488B5709                	mov rdx, qword [rdi + 1 + 8]
  4140 0000311A 4883FE00                	cmp rsi, 0
  4141 0000311E 7415                    	je .Lrat_zero
  4142 00003120 4883FA01                	cmp rdx, 1
  4143 00003124 741E                    	je .Lrat_int
  4144 00003126 48BF-                   	mov rdi, fmt_fraction
  4144 00003128 [8302000000000000] 
  4145 00003130 E998010000              	jmp .Lemit
  4146                                  
  4147                                  .Lrat_zero:
  4148 00003135 48BF-                   	mov rdi, fmt_zero
  4148 00003137 [8B02000000000000] 
  4149 0000313F E989010000              	jmp .Lemit
  4150                                  
  4151                                  .Lrat_int:
  4152 00003144 48BF-                   	mov rdi, fmt_int
  4152 00003146 [8D02000000000000] 
  4153 0000314E E97A010000              	jmp .Lemit
  4154                                  
  4155                                  .Lstring:
  4156 00003153 488D4709                	lea rax, [rdi + 1 + 8]
  4157 00003157 50                      	push rax
  4158 00003158 FF7701                  	push qword [rdi + 1]
  4159 0000315B 48BF-                   	mov rdi, fmt_dquote
  4159 0000315D [D102000000000000] 
  4160 00003165 B800000000              	mov rax, 0
  4161                                  	ENTER
    56 0000316A C8000000            <1>  enter 0, 0
    57 0000316E 4883E4F0            <1>  and rsp, ~15
  4162 00003172 E8(00000000)            	call printf
  4163                                  	LEAVE
    61 00003177 C9                  <1>  leave
  4164                                  .Lstring_loop:
  4165                                  	; qword [rsp]: limit
  4166                                  	; qword [rsp + 8*1]: char *
  4167 00003178 48833C2400              	cmp qword [rsp], 0
  4168 0000317D 0F84FD000000            	je .Lstring_end
  4169 00003183 488B442408              	mov rax, qword [rsp + 8*1]
  4170 00003188 8A00                    	mov al, byte [rax]
  4171 0000318A 4825FF000000            	and rax, 255
  4172 00003190 3C07                    	cmp al, 7
  4173 00003192 7468                            je .Lstring_char_7
  4174 00003194 3C08                            cmp al, 8
  4175 00003196 7470                            je .Lstring_char_8
  4176 00003198 3C09                            cmp al, 9
  4177 0000319A 7478                            je .Lstring_char_9
  4178 0000319C 3C0A                            cmp al, 10
  4179 0000319E 0F847C000000                    je .Lstring_char_10
  4180 000031A4 3C0B                            cmp al, 11
  4181 000031A6 0F8480000000                    je .Lstring_char_11
  4182 000031AC 3C0C                            cmp al, 12
  4183 000031AE 0F8484000000                    je .Lstring_char_12
  4184 000031B4 3C0D                            cmp al, 13
  4185 000031B6 0F8488000000                    je .Lstring_char_13
  4186 000031BC 3C22                            cmp al, 34
  4187 000031BE 0F848C000000                    je .Lstring_char_34
  4188 000031C4 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  4190 000031C6 3C20                            cmp al, ' '
  4191 000031C8 0F8CA0000000                    jl .Lstring_char_hex
  4192 000031CE 48BF-                           mov rdi, fmt_string_char
  4192 000031D0 [D302000000000000] 
  4193 000031D8 4889C6                          mov rsi, rax
  4194                                  .Lstring_char_emit:
  4195 000031DB B800000000                      mov rax, 0
  4196                                          ENTER
    56 000031E0 C8000000            <1>  enter 0, 0
    57 000031E4 4883E4F0            <1>  and rsp, ~15
  4197 000031E8 E8(00000000)                    call printf
  4198                                          LEAVE
    61 000031ED C9                  <1>  leave
  4199 000031EE 48FF0C24                        dec qword [rsp]
  4200 000031F2 48FF442408                      inc qword [rsp + 8*1]
  4201 000031F7 E97CFFFFFF                      jmp .Lstring_loop
  4202                                  
  4203                                  .Lstring_char_7:
  4204 000031FC 48BF-                           mov rdi, fmt_string_char_7
  4204 000031FE [D602000000000000] 
  4205 00003206 EBD3                            jmp .Lstring_char_emit
  4206                                  
  4207                                  .Lstring_char_8:
  4208 00003208 48BF-                           mov rdi, fmt_string_char_8
  4208 0000320A [D902000000000000] 
  4209 00003212 EBC7                            jmp .Lstring_char_emit
  4210                                          
  4211                                  .Lstring_char_9:
  4212 00003214 48BF-                           mov rdi, fmt_string_char_9
  4212 00003216 [DC02000000000000] 
  4213 0000321E EBBB                            jmp .Lstring_char_emit
  4214                                  
  4215                                  .Lstring_char_10:
  4216 00003220 48BF-                           mov rdi, fmt_string_char_10
  4216 00003222 [DF02000000000000] 
  4217 0000322A EBAF                            jmp .Lstring_char_emit
  4218                                  
  4219                                  .Lstring_char_11:
  4220 0000322C 48BF-                           mov rdi, fmt_string_char_11
  4220 0000322E [E202000000000000] 
  4221 00003236 EBA3                            jmp .Lstring_char_emit
  4222                                  
  4223                                  .Lstring_char_12:
  4224 00003238 48BF-                           mov rdi, fmt_string_char_12
  4224 0000323A [E502000000000000] 
  4225 00003242 EB97                            jmp .Lstring_char_emit
  4226                                  
  4227                                  .Lstring_char_13:
  4228 00003244 48BF-                           mov rdi, fmt_string_char_13
  4228 00003246 [E802000000000000] 
  4229 0000324E EB8B                            jmp .Lstring_char_emit
  4230                                  
  4231                                  .Lstring_char_34:
  4232 00003250 48BF-                           mov rdi, fmt_string_char_34
  4232 00003252 [EB02000000000000] 
  4233 0000325A E97CFFFFFF                      jmp .Lstring_char_emit
  4234                                  
  4235                                  .Lstring_char_92:
  4236 0000325F 48BF-                           mov rdi, fmt_string_char_92
  4236 00003261 [EE02000000000000] 
  4237 00003269 E96DFFFFFF                      jmp .Lstring_char_emit
  4238                                  
  4239                                  .Lstring_char_hex:
  4240 0000326E 48BF-                           mov rdi, fmt_string_char_hex
  4240 00003270 [F102000000000000] 
  4241 00003278 4889C6                          mov rsi, rax
  4242 0000327B E95BFFFFFF                      jmp .Lstring_char_emit        
  4243                                  
  4244                                  .Lstring_end:
  4245 00003280 4883C410                	add rsp, 8 * 2
  4246 00003284 48BF-                   	mov rdi, fmt_dquote
  4246 00003286 [D102000000000000] 
  4247 0000328E EB3D                    	jmp .Lemit
  4248                                  
  4249                                  .Lunknown_sexpr_type:
  4250 00003290 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  4250 00003292 [9102000000000000] 
  4251 0000329A 4825FF000000            	and rax, 255
  4252 000032A0 4889C2                  	mov rdx, rax
  4253 000032A3 4889F9                  	mov rcx, rdi
  4254 000032A6 488B3C25[00000000]      	mov rdi, qword [stderr]
  4255 000032AE B800000000              	mov rax, 0
  4256                                  	ENTER
    56 000032B3 C8000000            <1>  enter 0, 0
    57 000032B7 4883E4F0            <1>  and rsp, ~15
  4257 000032BB E8(00000000)            	call fprintf
  4258                                  	LEAVE
    61 000032C0 C9                  <1>  leave
  4259 000032C1 48C7C0FFFFFFFF          	mov rax, -1
  4260 000032C8 E8(00000000)            	call exit
  4261                                  
  4262                                  .Lemit:
  4263 000032CD B800000000              	mov rax, 0
  4264                                  	ENTER
    56 000032D2 C8000000            <1>  enter 0, 0
    57 000032D6 4883E4F0            <1>  and rsp, ~15
  4265 000032DA E8(00000000)            	call printf
  4266                                  	LEAVE
    61 000032DF C9                  <1>  leave
  4267 000032E0 EB00                    	jmp .Lend
  4268                                  
  4269                                  .Lend:
  4270                                  	LEAVE
    61 000032E2 C9                  <1>  leave
  4271 000032E3 C3                      	ret
  4272                                  
  4273                                  ;;; rdi: address of free variable
  4274                                  ;;; rsi: address of code-pointer
  4275                                  bind_primitive:
  4276                                          ENTER
    56 000032E4 C8000000            <1>  enter 0, 0
    57 000032E8 4883E4F0            <1>  and rsp, ~15
  4277 000032EC 57                              push rdi
  4278 000032ED BF11000000                      mov rdi, (1 + 8 + 8)
  4279 000032F2 E85CFAFFFF                      call malloc
  4280 000032F7 5F                              pop rdi
  4281 000032F8 C60005                          mov byte [rax], T_closure
  4282 000032FB 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  4283 00003303 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  4284 00003307 488907                          mov qword [rdi], rax
  4285                                          LEAVE
    61 0000330A C9                  <1>  leave
  4286 0000330B C3                              ret
  4287                                  
  4288                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  4289                                  L_code_ptr_bin_apply:
  4290 0000330C C8000000                        enter 0,0
  4291                                          ; loop over the list and push all its members
  4292 00003310 BE00000000                      mov rsi, 0
  4293 00003315 488B5D18                        mov rbx, COUNT
  4294 00003319 48FFCB                          dec rbx
  4295 0000331C 4883C304                        add rbx, 4
  4296 00003320 48C1E303                        shl rbx, 3
  4297 00003324 4801EB                          add rbx, rbp
  4298 00003327 488B1B                          mov rbx, [rbx] ; rbx = [rbp + 8 * (4 + (COUNT-1))]
  4299                                  L_bin_apply_list_loop_start: ; start pushing list to stack
  4300 0000332A 803B01                          cmp byte [rbx], T_nil
  4301 0000332D 740C                            je L_bin_apply_list_loop_end
  4302 0000332F 48FFC6                          inc rsi
  4303 00003332 FF7301                          push SOB_PAIR_CAR(rbx)
  4304 00003335 488B5B09                        mov rbx, SOB_PAIR_CDR(rbx)
  4305 00003339 EBEF                            jmp L_bin_apply_list_loop_start
  4306                                  L_bin_apply_list_loop_end: ; end pushing list to stack
  4307                                          ; flip the list on the stack
  4308 0000333B BB00000000                      mov rbx, 0 ; index
  4309                                  L_bin_apply_list_flip_start:
  4310 00003340 4889F1                          mov rcx, rsi
  4311 00003343 48FFC9                          dec rcx
  4312 00003346 4829D9                          sub rcx, rbx ; rcx is the higher 
  4313 00003349 4829D9                          sub rcx, rbx
  4314 0000334C 4883F900                        cmp rcx, 0
  4315 00003350 7E27                            jle L_bin_apply_list_flip_end
  4316 00003352 4801D9                          add rcx, rbx ; rcx is the relative higher. rbx is the relative lower
  4317 00003355 4889DF                          mov rdi, rbx
  4318 00003358 48C1E703                        shl rdi, 3
  4319 0000335C 4801E7                          add rdi, rsp ; rdi is the absolute higher
  4320 0000335F 488B07                          mov rax, [rdi] ; rdi = [rsp + 8*rsi] ->  rax is the absolute higher value
  4321 00003362 48C1E103                        shl rcx, 3
  4322 00003366 4801E1                          add rcx, rsp ; rcx = rsp + 8*(length-1-index) -> rcx is the absolute lower
  4323 00003369 53                              push rbx ; save rbx
  4324 0000336A 488B19                          mov rbx, [rcx]
  4325 0000336D 48891F                          mov [rdi], rbx ; [rsp + 8*rsi] = [rsp + 8*(length-1-index)]
  4326 00003370 488901                          mov [rcx], rax ; [rsp + 8*(length-1-index)] = [rsp + 8*rsi]
  4327 00003373 5B                              pop rbx ; restore rbx
  4328 00003374 48FFC3                          inc rbx
  4329 00003377 EBC7                            jmp L_bin_apply_list_flip_start
  4330                                  L_bin_apply_list_flip_end:
  4331                                          ; push all the rest of the arguments
  4332 00003379 488B4D18                        mov rcx, COUNT
  4333 0000337D 4883E902                        sub rcx, 2
  4334                                  L_bin_apply_args_loop_start: ; start pushing the rest of args
  4335 00003381 4883F900                        cmp rcx, 0
  4336 00003385 741A                            je L_bin_apply_args_loop_end
  4337 00003387 48FFC6                          inc rsi ; for counting number of args
  4338 0000338A 4889CB                          mov rbx, rcx
  4339 0000338D 4883C304                        add rbx, 4
  4340 00003391 48C1E303                        shl rbx, 3
  4341 00003395 4801EB                          add rbx, rbp
  4342 00003398 488B1B                          mov rbx, [rbx] ; rbx = [rbp + 8 * (4 + rcx)]
  4343 0000339B 53                              push rbx
  4344 0000339C 48FFC9                          dec rcx
  4345 0000339F EBE0                            jmp L_bin_apply_args_loop_start
  4346                                  L_bin_apply_args_loop_end:
  4347                                          ; push number of arguments
  4348 000033A1 56                              push rsi
  4349                                          ; push lex env
  4350 000033A2 488B4520                        mov rax, PARAM(0)
  4351 000033A6 FF7001                          push SOB_CLOSURE_ENV(rax)
  4352                                          ; push ret add
  4353 000033A9 FF7508                          push RET_ADDR
  4354                                          ; fix the stack
  4355                                          ; loop over the stack and move it to the top of the previos stack
  4356 000033AC 4889F2                          mov rdx, rsi
  4357                                  
  4358 000033AF 488B7D18                        mov rdi, COUNT 
  4359 000033B3 4883C704                        add rdi, 4 ; rdi = COUNT + 3 + 1 = COUNT + (num_of_args, lex, ret, OLD_RDP)
  4360                                  
  4361 000033B7 488B6D00                        mov rbp, OLD_RDP
  4362 000033BB BE00000000                      mov rsi, 0
  4363                                  L_bin_apply_fix_stack_start:
  4364 000033C0 4889D1                          mov rcx, rdx
  4365 000033C3 4883C103                        add rcx, 3
  4366 000033C7 4839CE                          cmp rsi, rcx
  4367 000033CA 7429                            je L_bin_apply_fix_stack_end
  4368 000033CC 4889D3                          mov rbx, rdx 
  4369 000033CF 4883C302                        add rbx, 2 
  4370 000033D3 4829F3                          sub rbx, rsi 
  4371 000033D6 4889D9                          mov rcx, rbx 
  4372 000033D9 48C1E103                        shl rcx, 3
  4373 000033DD 4801E1                          add rcx, rsp ; rcx is the index to move.
  4374 000033E0 4801FB                          add rbx, rdi
  4375 000033E3 48C1E303                        shl rbx, 3
  4376 000033E7 4801E3                          add rbx, rsp ; rbx is the index to move to.
  4377 000033EA 488B09                          mov rcx, [rcx]
  4378 000033ED 48890B                          mov [rbx], rcx
  4379 000033F0 48FFC6                          inc rsi
  4380 000033F3 EBCB                            jmp L_bin_apply_fix_stack_start
  4381                                  L_bin_apply_fix_stack_end:
  4382                                          ; fix rsp
  4383 000033F5 4889FB                          mov rbx, rdi
  4384 000033F8 48C1E303                        shl rbx, 3				
  4385 000033FC 4801DC                          add rsp, rbx
  4386 000033FF 488B5809                        mov rbx, SOB_CLOSURE_CODE(rax)
  4387 00003403 FFE3                            jmp rbx
  4388                                          LEAVE
    61 00003405 C9                  <1>  leave
  4389                                  	
  4390                                  L_code_ptr_is_null:
  4391                                          ENTER
    56 00003406 C8000000            <1>  enter 0, 0
    57 0000340A 4883E4F0            <1>  and rsp, ~15
  4392 0000340E 48837D1801                      cmp COUNT, 1
  4393 00003413 0F85A5100000                    jne L_error_arg_count_1
  4394 00003419 488B4520                        mov rax, PARAM(0)
  4395 0000341D 803801                          cmp byte [rax], T_nil
  4396 00003420 750C                            jne .L_false
  4397 00003422 48B8-                           mov rax, sob_boolean_true
  4397 00003424 [0300000000000000] 
  4398 0000342C EB0A                            jmp .L_end
  4399                                  .L_false:
  4400 0000342E 48B8-                           mov rax, sob_boolean_false
  4400 00003430 [0200000000000000] 
  4401                                  .L_end:
  4402                                          LEAVE
    61 00003438 C9                  <1>  leave
  4403 00003439 C21800                          ret AND_KILL_FRAME(1)
  4404                                  
  4405                                  L_code_ptr_is_pair:
  4406                                          ENTER
    56 0000343C C8000000            <1>  enter 0, 0
    57 00003440 4883E4F0            <1>  and rsp, ~15
  4407 00003444 48837D1801                      cmp COUNT, 1
  4408 00003449 0F856F100000                    jne L_error_arg_count_1
  4409 0000344F 488B4520                        mov rax, PARAM(0)
  4410 00003453 803821                          cmp byte [rax], T_pair
  4411 00003456 750C                            jne .L_false
  4412 00003458 48B8-                           mov rax, sob_boolean_true
  4412 0000345A [0300000000000000] 
  4413 00003462 EB0A                            jmp .L_end
  4414                                  .L_false:
  4415 00003464 48B8-                           mov rax, sob_boolean_false
  4415 00003466 [0200000000000000] 
  4416                                  .L_end:
  4417                                          LEAVE
    61 0000346E C9                  <1>  leave
  4418 0000346F C21800                          ret AND_KILL_FRAME(1)
  4419                                          
  4420                                  L_code_ptr_is_void:
  4421                                          ENTER
    56 00003472 C8000000            <1>  enter 0, 0
    57 00003476 4883E4F0            <1>  and rsp, ~15
  4422 0000347A 48837D1801                      cmp COUNT, 1
  4423 0000347F 0F8539100000                    jne L_error_arg_count_1
  4424 00003485 488B4520                        mov rax, PARAM(0)
  4425 00003489 803800                          cmp byte [rax], T_void
  4426 0000348C 750C                            jne .L_false
  4427 0000348E 48B8-                           mov rax, sob_boolean_true
  4427 00003490 [0300000000000000] 
  4428 00003498 EB0A                            jmp .L_end
  4429                                  .L_false:
  4430 0000349A 48B8-                           mov rax, sob_boolean_false
  4430 0000349C [0200000000000000] 
  4431                                  .L_end:
  4432                                          LEAVE
    61 000034A4 C9                  <1>  leave
  4433 000034A5 C21800                          ret AND_KILL_FRAME(1)
  4434                                  
  4435                                  L_code_ptr_is_char:
  4436                                          ENTER
    56 000034A8 C8000000            <1>  enter 0, 0
    57 000034AC 4883E4F0            <1>  and rsp, ~15
  4437 000034B0 48837D1801                      cmp COUNT, 1
  4438 000034B5 0F8503100000                    jne L_error_arg_count_1
  4439 000034BB 488B4520                        mov rax, PARAM(0)
  4440 000034BF 803802                          cmp byte [rax], T_char
  4441 000034C2 750C                            jne .L_false
  4442 000034C4 48B8-                           mov rax, sob_boolean_true
  4442 000034C6 [0300000000000000] 
  4443 000034CE EB0A                            jmp .L_end
  4444                                  .L_false:
  4445 000034D0 48B8-                           mov rax, sob_boolean_false
  4445 000034D2 [0200000000000000] 
  4446                                  .L_end:
  4447                                          LEAVE
    61 000034DA C9                  <1>  leave
  4448 000034DB C21800                          ret AND_KILL_FRAME(1)
  4449                                  
  4450                                  L_code_ptr_is_string:
  4451                                          ENTER
    56 000034DE C8000000            <1>  enter 0, 0
    57 000034E2 4883E4F0            <1>  and rsp, ~15
  4452 000034E6 48837D1801                      cmp COUNT, 1
  4453 000034EB 0F85CD0F0000                    jne L_error_arg_count_1
  4454 000034F1 488B4520                        mov rax, PARAM(0)
  4455 000034F5 803803                          cmp byte [rax], T_string
  4456 000034F8 750C                            jne .L_false
  4457 000034FA 48B8-                           mov rax, sob_boolean_true
  4457 000034FC [0300000000000000] 
  4458 00003504 EB0A                            jmp .L_end
  4459                                  .L_false:
  4460 00003506 48B8-                           mov rax, sob_boolean_false
  4460 00003508 [0200000000000000] 
  4461                                  .L_end:
  4462                                          LEAVE
    61 00003510 C9                  <1>  leave
  4463 00003511 C21800                          ret AND_KILL_FRAME(1)
  4464                                  
  4465                                  L_code_ptr_is_symbol:
  4466                                          ENTER
    56 00003514 C8000000            <1>  enter 0, 0
    57 00003518 4883E4F0            <1>  and rsp, ~15
  4467 0000351C 48837D1801                      cmp COUNT, 1
  4468 00003521 0F85970F0000                    jne L_error_arg_count_1
  4469 00003527 488B4520                        mov rax, PARAM(0)
  4470 0000352B 803804                          cmp byte [rax], T_symbol
  4471 0000352E 750C                            jne .L_false
  4472 00003530 48B8-                           mov rax, sob_boolean_true
  4472 00003532 [0300000000000000] 
  4473 0000353A EB0A                            jmp .L_end
  4474                                  .L_false:
  4475 0000353C 48B8-                           mov rax, sob_boolean_false
  4475 0000353E [0200000000000000] 
  4476                                  .L_end:
  4477                                          LEAVE
    61 00003546 C9                  <1>  leave
  4478 00003547 C21800                          ret AND_KILL_FRAME(1)
  4479                                  
  4480                                  L_code_ptr_is_vector:
  4481                                          ENTER
    56 0000354A C8000000            <1>  enter 0, 0
    57 0000354E 4883E4F0            <1>  and rsp, ~15
  4482 00003552 48837D1801                      cmp COUNT, 1
  4483 00003557 0F85610F0000                    jne L_error_arg_count_1
  4484 0000355D 488B4520                        mov rax, PARAM(0)
  4485 00003561 803822                          cmp byte [rax], T_vector
  4486 00003564 750C                            jne .L_false
  4487 00003566 48B8-                           mov rax, sob_boolean_true
  4487 00003568 [0300000000000000] 
  4488 00003570 EB0A                            jmp .L_end
  4489                                  .L_false:
  4490 00003572 48B8-                           mov rax, sob_boolean_false
  4490 00003574 [0200000000000000] 
  4491                                  .L_end:
  4492                                          LEAVE
    61 0000357C C9                  <1>  leave
  4493 0000357D C21800                          ret AND_KILL_FRAME(1)
  4494                                  
  4495                                  L_code_ptr_is_closure:
  4496                                          ENTER
    56 00003580 C8000000            <1>  enter 0, 0
    57 00003584 4883E4F0            <1>  and rsp, ~15
  4497 00003588 48837D1801                      cmp COUNT, 1
  4498 0000358D 0F852B0F0000                    jne L_error_arg_count_1
  4499 00003593 488B4520                        mov rax, PARAM(0)
  4500 00003597 803805                          cmp byte [rax], T_closure
  4501 0000359A 750C                            jne .L_false
  4502 0000359C 48B8-                           mov rax, sob_boolean_true
  4502 0000359E [0300000000000000] 
  4503 000035A6 EB0A                            jmp .L_end
  4504                                  .L_false:
  4505 000035A8 48B8-                           mov rax, sob_boolean_false
  4505 000035AA [0200000000000000] 
  4506                                  .L_end:
  4507                                          LEAVE
    61 000035B2 C9                  <1>  leave
  4508 000035B3 C21800                          ret AND_KILL_FRAME(1)
  4509                                  
  4510                                  L_code_ptr_is_real:
  4511                                          ENTER
    56 000035B6 C8000000            <1>  enter 0, 0
    57 000035BA 4883E4F0            <1>  and rsp, ~15
  4512 000035BE 48837D1801                      cmp COUNT, 1
  4513 000035C3 0F85F50E0000                    jne L_error_arg_count_1
  4514 000035C9 488B4520                        mov rax, PARAM(0)
  4515 000035CD 803812                          cmp byte [rax], T_real
  4516 000035D0 750C                            jne .L_false
  4517 000035D2 48B8-                           mov rax, sob_boolean_true
  4517 000035D4 [0300000000000000] 
  4518 000035DC EB0A                            jmp .L_end
  4519                                  .L_false:
  4520 000035DE 48B8-                           mov rax, sob_boolean_false
  4520 000035E0 [0200000000000000] 
  4521                                  .L_end:
  4522                                          LEAVE
    61 000035E8 C9                  <1>  leave
  4523 000035E9 C21800                          ret AND_KILL_FRAME(1)
  4524                                  
  4525                                  L_code_ptr_is_rational:
  4526                                          ENTER
    56 000035EC C8000000            <1>  enter 0, 0
    57 000035F0 4883E4F0            <1>  and rsp, ~15
  4527 000035F4 48837D1801                      cmp COUNT, 1
  4528 000035F9 0F85BF0E0000                    jne L_error_arg_count_1
  4529 000035FF 488B4520                        mov rax, PARAM(0)
  4530 00003603 803811                          cmp byte [rax], T_rational
  4531 00003606 750C                            jne .L_false
  4532 00003608 48B8-                           mov rax, sob_boolean_true
  4532 0000360A [0300000000000000] 
  4533 00003612 EB0A                            jmp .L_end
  4534                                  .L_false:
  4535 00003614 48B8-                           mov rax, sob_boolean_false
  4535 00003616 [0200000000000000] 
  4536                                  .L_end:
  4537                                          LEAVE
    61 0000361E C9                  <1>  leave
  4538 0000361F C21800                          ret AND_KILL_FRAME(1)
  4539                                  
  4540                                  L_code_ptr_is_boolean:
  4541                                          ENTER
    56 00003622 C8000000            <1>  enter 0, 0
    57 00003626 4883E4F0            <1>  and rsp, ~15
  4542 0000362A 48837D1801                      cmp COUNT, 1
  4543 0000362F 0F85890E0000                    jne L_error_arg_count_1
  4544 00003635 488B4520                        mov rax, PARAM(0)
  4545 00003639 8A18                            mov bl, byte [rax]
  4546 0000363B 80E308                          and bl, T_boolean
  4547 0000363E 740C                            je .L_false
  4548 00003640 48B8-                           mov rax, sob_boolean_true
  4548 00003642 [0300000000000000] 
  4549 0000364A EB0A                            jmp .L_end
  4550                                  .L_false:
  4551 0000364C 48B8-                           mov rax, sob_boolean_false
  4551 0000364E [0200000000000000] 
  4552                                  .L_end:
  4553                                          LEAVE
    61 00003656 C9                  <1>  leave
  4554 00003657 C21800                          ret AND_KILL_FRAME(1)
  4555                                          
  4556                                  L_code_ptr_is_number:
  4557                                          ENTER
    56 0000365A C8000000            <1>  enter 0, 0
    57 0000365E 4883E4F0            <1>  and rsp, ~15
  4558 00003662 48837D1801                      cmp COUNT, 1
  4559 00003667 0F85510E0000                    jne L_error_arg_count_1
  4560 0000366D 488B4520                        mov rax, PARAM(0)
  4561 00003671 8A18                            mov bl, byte [rax]
  4562 00003673 80E310                          and bl, T_number
  4563 00003676 740C                            je .L_false
  4564 00003678 48B8-                           mov rax, sob_boolean_true
  4564 0000367A [0300000000000000] 
  4565 00003682 EB0A                            jmp .L_end
  4566                                  .L_false:
  4567 00003684 48B8-                           mov rax, sob_boolean_false
  4567 00003686 [0200000000000000] 
  4568                                  .L_end:
  4569                                          LEAVE
    61 0000368E C9                  <1>  leave
  4570 0000368F C21800                          ret AND_KILL_FRAME(1)
  4571                                          
  4572                                  L_code_ptr_is_collection:
  4573                                          ENTER
    56 00003692 C8000000            <1>  enter 0, 0
    57 00003696 4883E4F0            <1>  and rsp, ~15
  4574 0000369A 48837D1801                      cmp COUNT, 1
  4575 0000369F 0F85190E0000                    jne L_error_arg_count_1
  4576 000036A5 488B4520                        mov rax, PARAM(0)
  4577 000036A9 8A18                            mov bl, byte [rax]
  4578 000036AB 80E320                          and bl, T_collection
  4579 000036AE 740C                            je .L_false
  4580 000036B0 48B8-                           mov rax, sob_boolean_true
  4580 000036B2 [0300000000000000] 
  4581 000036BA EB0A                            jmp .L_end
  4582                                  .L_false:
  4583 000036BC 48B8-                           mov rax, sob_boolean_false
  4583 000036BE [0200000000000000] 
  4584                                  .L_end:
  4585                                          LEAVE
    61 000036C6 C9                  <1>  leave
  4586 000036C7 C21800                          ret AND_KILL_FRAME(1)
  4587                                  
  4588                                  L_code_ptr_cons:
  4589                                          ENTER
    56 000036CA C8000000            <1>  enter 0, 0
    57 000036CE 4883E4F0            <1>  and rsp, ~15
  4590 000036D2 48837D1802                      cmp COUNT, 2
  4591 000036D7 0F85160E0000                    jne L_error_arg_count_2
  4592 000036DD BF11000000                      mov rdi, (1 + 8 + 8)
  4593 000036E2 E86CF6FFFF                      call malloc
  4594 000036E7 C60021                          mov byte [rax], T_pair
  4595 000036EA 488B5D20                        mov rbx, PARAM(0)
  4596 000036EE 48895801                        mov SOB_PAIR_CAR(rax), rbx
  4597 000036F2 488B5D28                        mov rbx, PARAM(1)
  4598 000036F6 48895809                        mov SOB_PAIR_CDR(rax), rbx
  4599                                          LEAVE
    61 000036FA C9                  <1>  leave
  4600 000036FB C22000                          ret AND_KILL_FRAME(2)
  4601                                  
  4602                                  L_code_ptr_display_sexpr:
  4603                                          ENTER
    56 000036FE C8000000            <1>  enter 0, 0
    57 00003702 4883E4F0            <1>  and rsp, ~15
  4604 00003706 48837D1801                      cmp COUNT, 1
  4605 0000370B 0F85AD0D0000                    jne L_error_arg_count_1
  4606 00003711 488B7D20                        mov rdi, PARAM(0)
  4607 00003715 E854F6FFFF                      call print_sexpr
  4608 0000371A 48B8-                           mov rax, sob_void
  4608 0000371C [0000000000000000] 
  4609                                          LEAVE
    61 00003724 C9                  <1>  leave
  4610 00003725 C21800                          ret AND_KILL_FRAME(1)
  4611                                  
  4612                                  L_code_ptr_write_char:
  4613                                          ENTER
    56 00003728 C8000000            <1>  enter 0, 0
    57 0000372C 4883E4F0            <1>  and rsp, ~15
  4614 00003730 48837D1801                      cmp COUNT, 1
  4615 00003735 0F85830D0000                    jne L_error_arg_count_1
  4616 0000373B 488B4520                        mov rax, PARAM(0)
  4617                                          assert_char(rax)
    65 0000373F 803802              <1>  cmp byte [%1], %2
    66 00003742 0F857B0E0000        <1>  jne L_error_incorrect_type
  4618 00003748 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  4619 0000374B 4825FF000000                    and rax, 255
  4620 00003751 48BF-                           mov rdi, fmt_char
  4620 00003753 [F702000000000000] 
  4621 0000375B 4889C6                          mov rsi, rax
  4622 0000375E B800000000                      mov rax, 0
  4623                                  	ENTER
    56 00003763 C8000000            <1>  enter 0, 0
    57 00003767 4883E4F0            <1>  and rsp, ~15
  4624 0000376B E8(00000000)                    call printf
  4625                                  	LEAVE
    61 00003770 C9                  <1>  leave
  4626 00003771 48B8-                           mov rax, sob_void
  4626 00003773 [0000000000000000] 
  4627                                          LEAVE
    61 0000377B C9                  <1>  leave
  4628 0000377C C21800                          ret AND_KILL_FRAME(1)
  4629                                  
  4630                                  L_code_ptr_car:
  4631                                          ENTER
    56 0000377F C8000000            <1>  enter 0, 0
    57 00003783 4883E4F0            <1>  and rsp, ~15
  4632 00003787 48837D1801                      cmp COUNT, 1
  4633 0000378C 0F852C0D0000                    jne L_error_arg_count_1
  4634 00003792 488B4520                        mov rax, PARAM(0)
  4635                                          assert_pair(rax)
    65 00003796 803821              <1>  cmp byte [%1], %2
    66 00003799 0F85240E0000        <1>  jne L_error_incorrect_type
  4636 0000379F 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  4637                                          LEAVE
    61 000037A3 C9                  <1>  leave
  4638 000037A4 C21800                          ret AND_KILL_FRAME(1)
  4639                                          
  4640                                  L_code_ptr_cdr:
  4641                                          ENTER
    56 000037A7 C8000000            <1>  enter 0, 0
    57 000037AB 4883E4F0            <1>  and rsp, ~15
  4642 000037AF 48837D1801                      cmp COUNT, 1
  4643 000037B4 0F85040D0000                    jne L_error_arg_count_1
  4644 000037BA 488B4520                        mov rax, PARAM(0)
  4645                                          assert_pair(rax)
    65 000037BE 803821              <1>  cmp byte [%1], %2
    66 000037C1 0F85FC0D0000        <1>  jne L_error_incorrect_type
  4646 000037C7 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  4647                                          LEAVE
    61 000037CB C9                  <1>  leave
  4648 000037CC C21800                          ret AND_KILL_FRAME(1)
  4649                                          
  4650                                  L_code_ptr_string_length:
  4651                                          ENTER
    56 000037CF C8000000            <1>  enter 0, 0
    57 000037D3 4883E4F0            <1>  and rsp, ~15
  4652 000037D7 48837D1801                      cmp COUNT, 1
  4653 000037DC 0F85DC0C0000                    jne L_error_arg_count_1
  4654 000037E2 488B4520                        mov rax, PARAM(0)
  4655                                          assert_string(rax)
    65 000037E6 803803              <1>  cmp byte [%1], %2
    66 000037E9 0F85D40D0000        <1>  jne L_error_incorrect_type
  4656 000037EF 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  4657 000037F3 E83A0C0000                      call make_integer
  4658                                          LEAVE
    61 000037F8 C9                  <1>  leave
  4659 000037F9 C21800                          ret AND_KILL_FRAME(1)
  4660                                  
  4661                                  L_code_ptr_vector_length:
  4662                                          ENTER
    56 000037FC C8000000            <1>  enter 0, 0
    57 00003800 4883E4F0            <1>  and rsp, ~15
  4663 00003804 48837D1801                      cmp COUNT, 1
  4664 00003809 0F85AF0C0000                    jne L_error_arg_count_1
  4665 0000380F 488B4520                        mov rax, PARAM(0)
  4666                                          assert_vector(rax)
    65 00003813 803822              <1>  cmp byte [%1], %2
    66 00003816 0F85A70D0000        <1>  jne L_error_incorrect_type
  4667 0000381C 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  4668 00003820 E80D0C0000                      call make_integer
  4669                                          LEAVE
    61 00003825 C9                  <1>  leave
  4670 00003826 C21800                          ret AND_KILL_FRAME(1)
  4671                                  
  4672                                  L_code_ptr_real_to_integer:
  4673                                          ENTER
    56 00003829 C8000000            <1>  enter 0, 0
    57 0000382D 4883E4F0            <1>  and rsp, ~15
  4674 00003831 48837D1801                      cmp COUNT, 1
  4675 00003836 0F85820C0000                    jne L_error_arg_count_1
  4676 0000383C 488B5D20                        mov rbx, PARAM(0)
  4677                                          assert_real(rbx)
    65 00003840 803B12              <1>  cmp byte [%1], %2
    66 00003843 0F857A0D0000        <1>  jne L_error_incorrect_type
  4678 00003849 F20F104301                      movsd xmm0, qword [rbx + 1]
  4679 0000384E F2480F2CF8                      cvttsd2si rdi, xmm0
  4680 00003853 E8DA0B0000                      call make_integer
  4681                                          LEAVE
    61 00003858 C9                  <1>  leave
  4682 00003859 C21800                          ret AND_KILL_FRAME(1)
  4683                                  
  4684                                  L_code_ptr_exit:
  4685                                          ENTER
    56 0000385C C8000000            <1>  enter 0, 0
    57 00003860 4883E4F0            <1>  and rsp, ~15
  4686 00003864 48837D1800                      cmp COUNT, 0
  4687 00003869 0F851A0C0000                    jne L_error_arg_count_0
  4688 0000386F B800000000                      mov rax, 0
  4689 00003874 E8(00000000)                    call exit
  4690                                  
  4691                                  L_code_ptr_integer_to_real:
  4692                                          ENTER
    56 00003879 C8000000            <1>  enter 0, 0
    57 0000387D 4883E4F0            <1>  and rsp, ~15
  4693 00003881 48837D1801                      cmp COUNT, 1
  4694 00003886 0F85320C0000                    jne L_error_arg_count_1
  4695 0000388C 488B4520                        mov rax, PARAM(0)
  4696                                          assert_integer(rax)
    70                              <1>  assert_rational(%1)
    65 00003890 803811              <2>  cmp byte [%1], %2
    66 00003893 0F852A0D0000        <2>  jne L_error_incorrect_type
    71 00003899 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    72 0000389E 0F851F0D0000        <1>  jne L_error_incorrect_type
  4697 000038A4 FF7001                          push qword [rax + 1]
  4698 000038A7 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  4699 000038AD E8640B0000                      call make_real
  4700                                          LEAVE
    61 000038B2 C9                  <1>  leave
  4701 000038B3 C21800                          ret AND_KILL_FRAME(1)
  4702                                  
  4703                                  L_code_ptr_rational_to_real:
  4704                                          ENTER
    56 000038B6 C8000000            <1>  enter 0, 0
    57 000038BA 4883E4F0            <1>  and rsp, ~15
  4705 000038BE 48837D1801                      cmp COUNT, 1
  4706 000038C3 0F85F50B0000                    jne L_error_arg_count_1
  4707 000038C9 488B4520                        mov rax, PARAM(0)
  4708                                          assert_rational(rax)
    65 000038CD 803811              <1>  cmp byte [%1], %2
    66 000038D0 0F85ED0C0000        <1>  jne L_error_incorrect_type
  4709 000038D6 FF7001                          push qword [rax + 1]
  4710 000038D9 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  4711 000038DF FF7009                          push qword [rax + 1 + 8]
  4712 000038E2 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  4713 000038E8 F20F5EC1                        divsd xmm0, xmm1
  4714 000038EC E8250B0000                      call make_real
  4715                                          LEAVE
    61 000038F1 C9                  <1>  leave
  4716 000038F2 C21800                          ret AND_KILL_FRAME(1)
  4717                                  
  4718                                  L_code_ptr_char_to_integer:
  4719                                          ENTER
    56 000038F5 C8000000            <1>  enter 0, 0
    57 000038F9 4883E4F0            <1>  and rsp, ~15
  4720 000038FD 48837D1801                      cmp COUNT, 1
  4721 00003902 0F85B60B0000                    jne L_error_arg_count_1
  4722 00003908 488B4520                        mov rax, PARAM(0)
  4723                                          assert_char(rax)
    65 0000390C 803802              <1>  cmp byte [%1], %2
    66 0000390F 0F85AE0C0000        <1>  jne L_error_incorrect_type
  4724 00003915 8A4001                          mov al, byte [rax + 1]
  4725 00003918 4825FF000000                    and rax, 255
  4726 0000391E 4889C7                          mov rdi, rax
  4727 00003921 E80C0B0000                      call make_integer
  4728                                          LEAVE
    61 00003926 C9                  <1>  leave
  4729 00003927 C21800                          ret AND_KILL_FRAME(1)
  4730                                  
  4731                                  L_code_ptr_integer_to_char:
  4732                                          ENTER
    56 0000392A C8000000            <1>  enter 0, 0
    57 0000392E 4883E4F0            <1>  and rsp, ~15
  4733 00003932 48837D1801                      cmp COUNT, 1
  4734 00003937 0F85810B0000                    jne L_error_arg_count_1
  4735 0000393D 488B4520                        mov rax, PARAM(0)
  4736                                          assert_integer(rax)
    70                              <1>  assert_rational(%1)
    65 00003941 803811              <2>  cmp byte [%1], %2
    66 00003944 0F85790C0000        <2>  jne L_error_incorrect_type
    71 0000394A 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    72 0000394F 0F856E0C0000        <1>  jne L_error_incorrect_type
  4737 00003955 488B5801                        mov rbx, qword [rax + 1]
  4738 00003959 4883FB00                        cmp rbx, 0
  4739 0000395D 0F8EF50A0000                    jle L_error_integer_range
  4740 00003963 4881FB00010000                  cmp rbx, 256
  4741 0000396A 0F8DE80A0000                    jge L_error_integer_range
  4742 00003970 BF02000000                      mov rdi, (1 + 1)
  4743 00003975 E8D9F3FFFF                      call malloc
  4744 0000397A C60002                          mov byte [rax], T_char
  4745 0000397D 885801                          mov byte [rax + 1], bl
  4746                                          LEAVE
    61 00003980 C9                  <1>  leave
  4747 00003981 C21800                          ret AND_KILL_FRAME(1)
  4748                                  
  4749                                  L_code_ptr_trng:
  4750                                          ENTER
    56 00003984 C8000000            <1>  enter 0, 0
    57 00003988 4883E4F0            <1>  and rsp, ~15
  4751 0000398C 48837D1800                      cmp COUNT, 0
  4752 00003991 0F85F20A0000                    jne L_error_arg_count_0
  4753 00003997 480FC7F7                        rdrand rdi
  4754 0000399B 48D1EF                          shr rdi, 1
  4755 0000399E E88F0A0000                      call make_integer
  4756                                          LEAVE
    61 000039A3 C9                  <1>  leave
  4757 000039A4 C21000                          ret AND_KILL_FRAME(0)
  4758                                  
  4759                                  L_code_ptr_is_zero:
  4760                                          ENTER
    56 000039A7 C8000000            <1>  enter 0, 0
    57 000039AB 4883E4F0            <1>  and rsp, ~15
  4761 000039AF 48837D1801                      cmp COUNT, 1
  4762 000039B4 0F85040B0000                    jne L_error_arg_count_1
  4763 000039BA 488B4520                        mov rax, PARAM(0)
  4764 000039BE 803811                          cmp byte [rax], T_rational
  4765 000039C1 740A                            je .L_rational
  4766 000039C3 803812                          cmp byte [rax], T_real
  4767 000039C6 740E                            je .L_real
  4768 000039C8 E9F60B0000                      jmp L_error_incorrect_type
  4769                                  .L_rational:
  4770 000039CD 4883780100                      cmp qword [rax + 1], 0
  4771 000039D2 7420                            je .L_zero
  4772 000039D4 EB12                            jmp .L_not_zero
  4773                                  .L_real:
  4774 000039D6 660FEFC0                        pxor xmm0, xmm0
  4775 000039DA FF7001                          push qword [rax + 1]
  4776 000039DD F20F100C24                      movsd xmm1, qword [rsp]
  4777 000039E2 660F2EC1                        ucomisd xmm0, xmm1
  4778 000039E6 740C                            je .L_zero
  4779                                  .L_not_zero:
  4780 000039E8 48B8-                           mov rax, sob_boolean_false
  4780 000039EA [0200000000000000] 
  4781 000039F2 EB0A                            jmp .L_end
  4782                                  .L_zero:
  4783 000039F4 48B8-                           mov rax, sob_boolean_true
  4783 000039F6 [0300000000000000] 
  4784                                  .L_end:
  4785                                          LEAVE
    61 000039FE C9                  <1>  leave
  4786 000039FF C21800                          ret AND_KILL_FRAME(1)
  4787                                  
  4788                                  L_code_ptr_is_integer:
  4789                                          ENTER
    56 00003A02 C8000000            <1>  enter 0, 0
    57 00003A06 4883E4F0            <1>  and rsp, ~15
  4790 00003A0A 48837D1801                      cmp COUNT, 1
  4791 00003A0F 0F85A90A0000                    jne L_error_arg_count_1
  4792 00003A15 488B4520                        mov rax, PARAM(0)
  4793 00003A19 803811                          cmp byte [rax], T_rational
  4794 00003A1C 7513                            jne .L_false
  4795 00003A1E 4883780901                      cmp qword [rax + 1 + 8], 1
  4796 00003A23 750C                            jne .L_false
  4797 00003A25 48B8-                           mov rax, sob_boolean_true
  4797 00003A27 [0300000000000000] 
  4798 00003A2F EB0A                            jmp .L_exit
  4799                                  .L_false:
  4800 00003A31 48B8-                           mov rax, sob_boolean_false
  4800 00003A33 [0200000000000000] 
  4801                                  .L_exit:
  4802                                          LEAVE
    61 00003A3B C9                  <1>  leave
  4803 00003A3C C21800                          ret AND_KILL_FRAME(1)
  4804                                  
  4805                                  L_code_ptr_raw_bin_add_rr:
  4806                                          ENTER
    56 00003A3F C8000000            <1>  enter 0, 0
    57 00003A43 4883E4F0            <1>  and rsp, ~15
  4807 00003A47 48837D1802                      cmp COUNT, 2
  4808 00003A4C 0F85A10A0000                    jne L_error_arg_count_2
  4809 00003A52 488B5D20                        mov rbx, PARAM(0)
  4810                                          assert_real(rbx)
    65 00003A56 803B12              <1>  cmp byte [%1], %2
    66 00003A59 0F85640B0000        <1>  jne L_error_incorrect_type
  4811 00003A5F 488B4D28                        mov rcx, PARAM(1)
  4812                                          assert_real(rcx)
    65 00003A63 803912              <1>  cmp byte [%1], %2
    66 00003A66 0F85570B0000        <1>  jne L_error_incorrect_type
  4813 00003A6C F20F104301                      movsd xmm0, qword [rbx + 1]
  4814 00003A71 F20F104901                      movsd xmm1, qword [rcx + 1]
  4815 00003A76 F20F58C1                        addsd xmm0, xmm1
  4816 00003A7A E897090000                      call make_real
  4817                                          LEAVE
    61 00003A7F C9                  <1>  leave
  4818 00003A80 C22000                          ret AND_KILL_FRAME(2)
  4819                                  
  4820                                  L_code_ptr_raw_bin_sub_rr:
  4821                                          ENTER
    56 00003A83 C8000000            <1>  enter 0, 0
    57 00003A87 4883E4F0            <1>  and rsp, ~15
  4822 00003A8B 48837D1802                      cmp COUNT, 2
  4823 00003A90 0F855D0A0000                    jne L_error_arg_count_2
  4824 00003A96 488B5D20                        mov rbx, PARAM(0)
  4825                                          assert_real(rbx)
    65 00003A9A 803B12              <1>  cmp byte [%1], %2
    66 00003A9D 0F85200B0000        <1>  jne L_error_incorrect_type
  4826 00003AA3 488B4D28                        mov rcx, PARAM(1)
  4827                                          assert_real(rcx)
    65 00003AA7 803912              <1>  cmp byte [%1], %2
    66 00003AAA 0F85130B0000        <1>  jne L_error_incorrect_type
  4828 00003AB0 F20F104301                      movsd xmm0, qword [rbx + 1]
  4829 00003AB5 F20F104901                      movsd xmm1, qword [rcx + 1]
  4830 00003ABA F20F5CC1                        subsd xmm0, xmm1
  4831 00003ABE E853090000                      call make_real
  4832                                          LEAVE
    61 00003AC3 C9                  <1>  leave
  4833 00003AC4 C22000                          ret AND_KILL_FRAME(2)
  4834                                  
  4835                                  L_code_ptr_raw_bin_mul_rr:
  4836                                          ENTER
    56 00003AC7 C8000000            <1>  enter 0, 0
    57 00003ACB 4883E4F0            <1>  and rsp, ~15
  4837 00003ACF 48837D1802                      cmp COUNT, 2
  4838 00003AD4 0F85190A0000                    jne L_error_arg_count_2
  4839 00003ADA 488B5D20                        mov rbx, PARAM(0)
  4840                                          assert_real(rbx)
    65 00003ADE 803B12              <1>  cmp byte [%1], %2
    66 00003AE1 0F85DC0A0000        <1>  jne L_error_incorrect_type
  4841 00003AE7 488B4D28                        mov rcx, PARAM(1)
  4842                                          assert_real(rcx)
    65 00003AEB 803912              <1>  cmp byte [%1], %2
    66 00003AEE 0F85CF0A0000        <1>  jne L_error_incorrect_type
  4843 00003AF4 F20F104301                      movsd xmm0, qword [rbx + 1]
  4844 00003AF9 F20F104901                      movsd xmm1, qword [rcx + 1]
  4845 00003AFE F20F59C1                        mulsd xmm0, xmm1
  4846 00003B02 E80F090000                      call make_real
  4847                                          LEAVE
    61 00003B07 C9                  <1>  leave
  4848 00003B08 C22000                          ret AND_KILL_FRAME(2)
  4849                                  
  4850                                  L_code_ptr_raw_bin_div_rr:
  4851                                          ENTER
    56 00003B0B C8000000            <1>  enter 0, 0
    57 00003B0F 4883E4F0            <1>  and rsp, ~15
  4852 00003B13 48837D1802                      cmp COUNT, 2
  4853 00003B18 0F85D5090000                    jne L_error_arg_count_2
  4854 00003B1E 488B5D20                        mov rbx, PARAM(0)
  4855                                          assert_real(rbx)
    65 00003B22 803B12              <1>  cmp byte [%1], %2
    66 00003B25 0F85980A0000        <1>  jne L_error_incorrect_type
  4856 00003B2B 488B4D28                        mov rcx, PARAM(1)
  4857                                          assert_real(rcx)
    65 00003B2F 803912              <1>  cmp byte [%1], %2
    66 00003B32 0F858B0A0000        <1>  jne L_error_incorrect_type
  4858 00003B38 F20F104301                      movsd xmm0, qword [rbx + 1]
  4859 00003B3D F20F104901                      movsd xmm1, qword [rcx + 1]
  4860 00003B42 660FEFD2                        pxor xmm2, xmm2
  4861 00003B46 660F2ECA                        ucomisd xmm1, xmm2
  4862 00003B4A 0F84A40A0000                    je L_error_division_by_zero
  4863 00003B50 F20F5EC1                        divsd xmm0, xmm1
  4864 00003B54 E8BD080000                      call make_real
  4865                                          LEAVE
    61 00003B59 C9                  <1>  leave
  4866 00003B5A C22000                          ret AND_KILL_FRAME(2)
  4867                                  
  4868                                  L_code_ptr_raw_bin_add_qq:
  4869                                          ENTER
    56 00003B5D C8000000            <1>  enter 0, 0
    57 00003B61 4883E4F0            <1>  and rsp, ~15
  4870 00003B65 48837D1802                      cmp COUNT, 2
  4871 00003B6A 0F8583090000                    jne L_error_arg_count_2
  4872 00003B70 4C8B4520                        mov r8, PARAM(0)
  4873                                          assert_rational(r8)
    65 00003B74 41803811            <1>  cmp byte [%1], %2
    66 00003B78 0F85450A0000        <1>  jne L_error_incorrect_type
  4874 00003B7E 4C8B4D28                        mov r9, PARAM(1)
  4875                                          assert_rational(r9)
    65 00003B82 41803911            <1>  cmp byte [%1], %2
    66 00003B86 0F85370A0000        <1>  jne L_error_incorrect_type
  4876 00003B8C 498B4001                        mov rax, qword [r8 + 1] ; num1
  4877 00003B90 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  4878 00003B94 4899                            cqo
  4879 00003B96 48F7EB                          imul rbx
  4880 00003B99 4889C6                          mov rsi, rax
  4881 00003B9C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4882 00003BA0 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  4883 00003BA4 4899                            cqo
  4884 00003BA6 48F7EB                          imul rbx
  4885 00003BA9 4801C6                          add rsi, rax
  4886 00003BAC 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4887 00003BB0 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  4888 00003BB4 4899                            cqo
  4889 00003BB6 48F7EB                          imul rbx
  4890 00003BB9 4889C7                          mov rdi, rax
  4891 00003BBC E827010000                      call normalize_rational
  4892                                          LEAVE
    61 00003BC1 C9                  <1>  leave
  4893 00003BC2 C22000                          ret AND_KILL_FRAME(2)
  4894                                  
  4895                                  L_code_ptr_raw_bin_sub_qq:
  4896                                          ENTER
    56 00003BC5 C8000000            <1>  enter 0, 0
    57 00003BC9 4883E4F0            <1>  and rsp, ~15
  4897 00003BCD 48837D1802                      cmp COUNT, 2
  4898 00003BD2 0F851B090000                    jne L_error_arg_count_2
  4899 00003BD8 4C8B4520                        mov r8, PARAM(0)
  4900                                          assert_rational(r8)
    65 00003BDC 41803811            <1>  cmp byte [%1], %2
    66 00003BE0 0F85DD090000        <1>  jne L_error_incorrect_type
  4901 00003BE6 4C8B4D28                        mov r9, PARAM(1)
  4902                                          assert_rational(r9)
    65 00003BEA 41803911            <1>  cmp byte [%1], %2
    66 00003BEE 0F85CF090000        <1>  jne L_error_incorrect_type
  4903 00003BF4 498B4001                        mov rax, qword [r8 + 1] ; num1
  4904 00003BF8 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  4905 00003BFC 4899                            cqo
  4906 00003BFE 48F7EB                          imul rbx
  4907 00003C01 4889C6                          mov rsi, rax
  4908 00003C04 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4909 00003C08 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  4910 00003C0C 4899                            cqo
  4911 00003C0E 48F7EB                          imul rbx
  4912 00003C11 4829C6                          sub rsi, rax
  4913 00003C14 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4914 00003C18 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  4915 00003C1C 4899                            cqo
  4916 00003C1E 48F7EB                          imul rbx
  4917 00003C21 4889C7                          mov rdi, rax
  4918 00003C24 E8BF000000                      call normalize_rational
  4919                                          LEAVE
    61 00003C29 C9                  <1>  leave
  4920 00003C2A C22000                          ret AND_KILL_FRAME(2)
  4921                                  
  4922                                  L_code_ptr_raw_bin_mul_qq:
  4923                                          ENTER
    56 00003C2D C8000000            <1>  enter 0, 0
    57 00003C31 4883E4F0            <1>  and rsp, ~15
  4924 00003C35 48837D1802                      cmp COUNT, 2
  4925 00003C3A 0F85B3080000                    jne L_error_arg_count_2
  4926 00003C40 4C8B4520                        mov r8, PARAM(0)
  4927                                          assert_rational(r8)
    65 00003C44 41803811            <1>  cmp byte [%1], %2
    66 00003C48 0F8575090000        <1>  jne L_error_incorrect_type
  4928 00003C4E 4C8B4D28                        mov r9, PARAM(1)
  4929                                          assert_rational(r9)
    65 00003C52 41803911            <1>  cmp byte [%1], %2
    66 00003C56 0F8567090000        <1>  jne L_error_incorrect_type
  4930 00003C5C 498B4001                        mov rax, qword [r8 + 1] ; num1
  4931 00003C60 498B5901                        mov rbx, qword [r9 + 1] ; num2
  4932 00003C64 4899                            cqo
  4933 00003C66 48F7EB                          imul rbx
  4934 00003C69 4889C6                          mov rsi, rax
  4935 00003C6C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4936 00003C70 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  4937 00003C74 4899                            cqo
  4938 00003C76 48F7EB                          imul rbx
  4939 00003C79 4889C7                          mov rdi, rax
  4940 00003C7C E867000000                      call normalize_rational
  4941                                          LEAVE
    61 00003C81 C9                  <1>  leave
  4942 00003C82 C22000                          ret AND_KILL_FRAME(2)
  4943                                          
  4944                                  L_code_ptr_raw_bin_div_qq:
  4945                                          ENTER
    56 00003C85 C8000000            <1>  enter 0, 0
    57 00003C89 4883E4F0            <1>  and rsp, ~15
  4946 00003C8D 48837D1802                      cmp COUNT, 2
  4947 00003C92 0F855B080000                    jne L_error_arg_count_2
  4948 00003C98 4C8B4520                        mov r8, PARAM(0)
  4949                                          assert_rational(r8)
    65 00003C9C 41803811            <1>  cmp byte [%1], %2
    66 00003CA0 0F851D090000        <1>  jne L_error_incorrect_type
  4950 00003CA6 4C8B4D28                        mov r9, PARAM(1)
  4951                                          assert_rational(r9)
    65 00003CAA 41803911            <1>  cmp byte [%1], %2
    66 00003CAE 0F850F090000        <1>  jne L_error_incorrect_type
  4952 00003CB4 4983790100                      cmp qword [r9 + 1], 0
  4953 00003CB9 0F8435090000                    je L_error_division_by_zero
  4954 00003CBF 498B4001                        mov rax, qword [r8 + 1] ; num1
  4955 00003CC3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  4956 00003CC7 4899                            cqo
  4957 00003CC9 48F7EB                          imul rbx
  4958 00003CCC 4889C6                          mov rsi, rax
  4959 00003CCF 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4960 00003CD3 498B5901                        mov rbx, qword [r9 + 1] ; num2
  4961 00003CD7 4899                            cqo
  4962 00003CD9 48F7EB                          imul rbx
  4963 00003CDC 4889C7                          mov rdi, rax
  4964 00003CDF E804000000                      call normalize_rational
  4965                                          LEAVE
    61 00003CE4 C9                  <1>  leave
  4966 00003CE5 C22000                          ret AND_KILL_FRAME(2)
  4967                                          
  4968                                  normalize_rational:
  4969 00003CE8 56                              push rsi
  4970 00003CE9 57                              push rdi
  4971 00003CEA E839000000                      call gcd
  4972 00003CEF 4889C3                          mov rbx, rax
  4973 00003CF2 58                              pop rax
  4974 00003CF3 4899                            cqo
  4975 00003CF5 48F7FB                          idiv rbx
  4976 00003CF8 4989C0                          mov r8, rax
  4977 00003CFB 58                              pop rax
  4978 00003CFC 4899                            cqo
  4979 00003CFE 48F7FB                          idiv rbx
  4980 00003D01 4989C1                          mov r9, rax
  4981 00003D04 BF11000000                      mov rdi, (1 + 8 + 8)
  4982 00003D09 E845F0FFFF                      call malloc
  4983 00003D0E C60011                          mov byte [rax], T_rational
  4984 00003D11 4C894801                        mov qword [rax + 1], r9
  4985 00003D15 4C894009                        mov qword [rax + 1 + 8], r8
  4986 00003D19 C3                              ret
  4987                                  
  4988                                  iabs:
  4989 00003D1A 4889F8                          mov rax, rdi
  4990 00003D1D 4883F800                        cmp rax, 0
  4991 00003D21 7C01                            jl .Lneg
  4992 00003D23 C3                              ret
  4993                                  .Lneg:
  4994 00003D24 48F7D8                          neg rax
  4995 00003D27 C3                              ret
  4996                                  
  4997                                  gcd:
  4998 00003D28 E8EDFFFFFF                      call iabs
  4999 00003D2D 4889C3                          mov rbx, rax
  5000 00003D30 4889F7                          mov rdi, rsi
  5001 00003D33 E8E2FFFFFF                      call iabs
  5002 00003D38 4883F800                        cmp rax, 0
  5003 00003D3C 7502                            jne .L0
  5004 00003D3E 4893                            xchg rax, rbx
  5005                                  .L0:
  5006 00003D40 4883FB00                        cmp rbx, 0
  5007 00003D44 740C                            je .L1
  5008 00003D46 4899                            cqo
  5009 00003D48 48F7F3                          div rbx
  5010 00003D4B 4889D0                          mov rax, rdx
  5011 00003D4E 4893                            xchg rax, rbx
  5012 00003D50 EBEE                            jmp .L0
  5013                                  .L1:
  5014 00003D52 C3                              ret
  5015                                  
  5016                                  L_code_ptr_error:
  5017                                          ENTER
    56 00003D53 C8000000            <1>  enter 0, 0
    57 00003D57 4883E4F0            <1>  and rsp, ~15
  5018 00003D5B 48837D1802                      cmp COUNT, 2
  5019 00003D60 0F858D070000                    jne L_error_arg_count_2
  5020 00003D66 488B7520                        mov rsi, PARAM(0)
  5021                                          assert_symbol(rsi)
    65 00003D6A 803E04              <1>  cmp byte [%1], %2
    66 00003D6D 0F8550080000        <1>  jne L_error_incorrect_type
  5022 00003D73 488B7528                        mov rsi, PARAM(1)
  5023                                          assert_string(rsi)
    65 00003D77 803E03              <1>  cmp byte [%1], %2
    66 00003D7A 0F8543080000        <1>  jne L_error_incorrect_type
  5024 00003D80 48BF-                           mov rdi, fmt_scheme_error_part_1
  5024 00003D82 [6704000000000000] 
  5025 00003D8A B800000000                      mov rax, 0
  5026                                  	ENTER
    56 00003D8F C8000000            <1>  enter 0, 0
    57 00003D93 4883E4F0            <1>  and rsp, ~15
  5027 00003D97 E8(00000000)                    call printf
  5028                                  	LEAVE
    61 00003D9C C9                  <1>  leave
  5029 00003D9D 488B7D20                        mov rdi, PARAM(0)
  5030 00003DA1 E8C8EFFFFF                      call print_sexpr
  5031 00003DA6 48BF-                           mov rdi, fmt_scheme_error_part_2
  5031 00003DA8 [7B04000000000000] 
  5032 00003DB0 B800000000                      mov rax, 0
  5033                                  	ENTER
    56 00003DB5 C8000000            <1>  enter 0, 0
    57 00003DB9 4883E4F0            <1>  and rsp, ~15
  5034 00003DBD E8(00000000)                    call printf
  5035                                  	LEAVE
    61 00003DC2 C9                  <1>  leave
  5036 00003DC3 488B4528                        mov rax, PARAM(1)       ; sob_string
  5037 00003DC7 BE01000000                      mov rsi, 1              ; size = 1 byte
  5038 00003DCC 488B5001                        mov rdx, qword [rax + 1] ; length
  5039 00003DD0 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  5040 00003DD4 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  5041 00003DDC E8(00000000)                    call fwrite
  5042 00003DE1 48BF-                           mov rdi, fmt_scheme_error_part_3
  5042 00003DE3 [BD04000000000000] 
  5043 00003DEB B800000000                      mov rax, 0
  5044                                  	ENTER
    56 00003DF0 C8000000            <1>  enter 0, 0
    57 00003DF4 4883E4F0            <1>  and rsp, ~15
  5045 00003DF8 E8(00000000)                    call printf
  5046                                  	LEAVE
    61 00003DFD C9                  <1>  leave
  5047 00003DFE 48C7C0F7FFFFFF                  mov rax, -9
  5048 00003E05 E8(00000000)                    call exit
  5049                                  
  5050                                  L_code_ptr_raw_less_than_rr:
  5051                                          ENTER
    56 00003E0A C8000000            <1>  enter 0, 0
    57 00003E0E 4883E4F0            <1>  and rsp, ~15
  5052 00003E12 48837D1802                      cmp COUNT, 2
  5053 00003E17 0F85D6060000                    jne L_error_arg_count_2
  5054 00003E1D 488B7520                        mov rsi, PARAM(0)
  5055                                          assert_real(rsi)
    65 00003E21 803E12              <1>  cmp byte [%1], %2
    66 00003E24 0F8599070000        <1>  jne L_error_incorrect_type
  5056 00003E2A 488B7D28                        mov rdi, PARAM(1)
  5057                                          assert_real(rdi)
    65 00003E2E 803F12              <1>  cmp byte [%1], %2
    66 00003E31 0F858C070000        <1>  jne L_error_incorrect_type
  5058 00003E37 F20F104601                      movsd xmm0, qword [rsi + 1]
  5059 00003E3C F20F104F01                      movsd xmm1, qword [rdi + 1]
  5060 00003E41 660F2FC1                        comisd xmm0, xmm1
  5061 00003E45 730C                            jae .L_false
  5062 00003E47 48B8-                           mov rax, sob_boolean_true
  5062 00003E49 [0300000000000000] 
  5063 00003E51 EB0A                            jmp .L_exit
  5064                                  .L_false:
  5065 00003E53 48B8-                           mov rax, sob_boolean_false
  5065 00003E55 [0200000000000000] 
  5066                                  .L_exit:
  5067                                          LEAVE
    61 00003E5D C9                  <1>  leave
  5068 00003E5E C22000                          ret AND_KILL_FRAME(2)
  5069                                          
  5070                                  L_code_ptr_raw_less_than_qq:
  5071                                          ENTER
    56 00003E61 C8000000            <1>  enter 0, 0
    57 00003E65 4883E4F0            <1>  and rsp, ~15
  5072 00003E69 48837D1802                      cmp COUNT, 2
  5073 00003E6E 0F857F060000                    jne L_error_arg_count_2
  5074 00003E74 488B7520                        mov rsi, PARAM(0)
  5075                                          assert_rational(rsi)
    65 00003E78 803E11              <1>  cmp byte [%1], %2
    66 00003E7B 0F8542070000        <1>  jne L_error_incorrect_type
  5076 00003E81 488B7D28                        mov rdi, PARAM(1)
  5077                                          assert_rational(rdi)
    65 00003E85 803F11              <1>  cmp byte [%1], %2
    66 00003E88 0F8535070000        <1>  jne L_error_incorrect_type
  5078 00003E8E 488B4601                        mov rax, qword [rsi + 1] ; num1
  5079 00003E92 4899                            cqo
  5080 00003E94 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  5081 00003E98 4889C1                          mov rcx, rax
  5082 00003E9B 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  5083 00003E9F 4899                            cqo
  5084 00003EA1 48F76F01                        imul qword [rdi + 1]          ; num2
  5085 00003EA5 4829C1                          sub rcx, rax
  5086 00003EA8 7D0C                            jge .L_false
  5087 00003EAA 48B8-                           mov rax, sob_boolean_true
  5087 00003EAC [0300000000000000] 
  5088 00003EB4 EB0A                            jmp .L_exit
  5089                                  .L_false:
  5090 00003EB6 48B8-                           mov rax, sob_boolean_false
  5090 00003EB8 [0200000000000000] 
  5091                                  .L_exit:
  5092                                          LEAVE
    61 00003EC0 C9                  <1>  leave
  5093 00003EC1 C22000                          ret AND_KILL_FRAME(2)
  5094                                  
  5095                                  L_code_ptr_raw_equal_rr:
  5096                                          ENTER
    56 00003EC4 C8000000            <1>  enter 0, 0
    57 00003EC8 4883E4F0            <1>  and rsp, ~15
  5097 00003ECC 48837D1802                      cmp COUNT, 2
  5098 00003ED1 0F851C060000                    jne L_error_arg_count_2
  5099 00003ED7 488B7520                        mov rsi, PARAM(0)
  5100                                          assert_real(rsi)
    65 00003EDB 803E12              <1>  cmp byte [%1], %2
    66 00003EDE 0F85DF060000        <1>  jne L_error_incorrect_type
  5101 00003EE4 488B7D28                        mov rdi, PARAM(1)
  5102                                          assert_real(rdi)
    65 00003EE8 803F12              <1>  cmp byte [%1], %2
    66 00003EEB 0F85D2060000        <1>  jne L_error_incorrect_type
  5103 00003EF1 F20F104601                      movsd xmm0, qword [rsi + 1]
  5104 00003EF6 F20F104F01                      movsd xmm1, qword [rdi + 1]
  5105 00003EFB 660F2FC1                        comisd xmm0, xmm1
  5106 00003EFF 750C                            jne .L_false
  5107 00003F01 48B8-                           mov rax, sob_boolean_true
  5107 00003F03 [0300000000000000] 
  5108 00003F0B EB0A                            jmp .L_exit
  5109                                  .L_false:
  5110 00003F0D 48B8-                           mov rax, sob_boolean_false
  5110 00003F0F [0200000000000000] 
  5111                                  .L_exit:
  5112                                          LEAVE
    61 00003F17 C9                  <1>  leave
  5113 00003F18 C22000                          ret AND_KILL_FRAME(2)
  5114                                          
  5115                                  L_code_ptr_raw_equal_qq:
  5116                                          ENTER
    56 00003F1B C8000000            <1>  enter 0, 0
    57 00003F1F 4883E4F0            <1>  and rsp, ~15
  5117 00003F23 48837D1802                      cmp COUNT, 2
  5118 00003F28 0F85C5050000                    jne L_error_arg_count_2
  5119 00003F2E 488B7520                        mov rsi, PARAM(0)
  5120                                          assert_rational(rsi)
    65 00003F32 803E11              <1>  cmp byte [%1], %2
    66 00003F35 0F8588060000        <1>  jne L_error_incorrect_type
  5121 00003F3B 488B7D28                        mov rdi, PARAM(1)
  5122                                          assert_rational(rdi)
    65 00003F3F 803F11              <1>  cmp byte [%1], %2
    66 00003F42 0F857B060000        <1>  jne L_error_incorrect_type
  5123 00003F48 488B4601                        mov rax, qword [rsi + 1] ; num1
  5124 00003F4C 4899                            cqo
  5125 00003F4E 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  5126 00003F52 4889C1                          mov rcx, rax
  5127 00003F55 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  5128 00003F59 4899                            cqo
  5129 00003F5B 48F76F01                        imul qword [rdi + 1]          ; num2
  5130 00003F5F 4829C1                          sub rcx, rax
  5131 00003F62 750C                            jne .L_false
  5132 00003F64 48B8-                           mov rax, sob_boolean_true
  5132 00003F66 [0300000000000000] 
  5133 00003F6E EB0A                            jmp .L_exit
  5134                                  .L_false:
  5135 00003F70 48B8-                           mov rax, sob_boolean_false
  5135 00003F72 [0200000000000000] 
  5136                                  .L_exit:
  5137                                          LEAVE
    61 00003F7A C9                  <1>  leave
  5138 00003F7B C22000                          ret AND_KILL_FRAME(2)
  5139                                  
  5140                                  L_code_ptr_quotient:
  5141                                          ENTER
    56 00003F7E C8000000            <1>  enter 0, 0
    57 00003F82 4883E4F0            <1>  and rsp, ~15
  5142 00003F86 48837D1802                      cmp COUNT, 2
  5143 00003F8B 0F8562050000                    jne L_error_arg_count_2
  5144 00003F91 488B7520                        mov rsi, PARAM(0)
  5145                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00003F95 803E11              <2>  cmp byte [%1], %2
    66 00003F98 0F8525060000        <2>  jne L_error_incorrect_type
    71 00003F9E 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00003FA3 0F851A060000        <1>  jne L_error_incorrect_type
  5146 00003FA9 488B7D28                        mov rdi, PARAM(1)
  5147                                          assert_integer(rdi)
    70                              <1>  assert_rational(%1)
    65 00003FAD 803F11              <2>  cmp byte [%1], %2
    66 00003FB0 0F850D060000        <2>  jne L_error_incorrect_type
    71 00003FB6 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00003FBB 0F8502060000        <1>  jne L_error_incorrect_type
  5148 00003FC1 488B4601                        mov rax, qword [rsi + 1]
  5149 00003FC5 488B5F01                        mov rbx, qword [rdi + 1]
  5150 00003FC9 4883FB00                        cmp rbx, 0
  5151 00003FCD 0F8421060000                    je L_error_division_by_zero
  5152 00003FD3 4899                            cqo
  5153 00003FD5 48F7FB                          idiv rbx
  5154 00003FD8 4889C7                          mov rdi, rax
  5155 00003FDB E852040000                      call make_integer
  5156                                          LEAVE
    61 00003FE0 C9                  <1>  leave
  5157 00003FE1 C22000                          ret AND_KILL_FRAME(2)
  5158                                          
  5159                                  L_code_ptr_remainder:
  5160                                          ENTER
    56 00003FE4 C8000000            <1>  enter 0, 0
    57 00003FE8 4883E4F0            <1>  and rsp, ~15
  5161 00003FEC 48837D1802                      cmp COUNT, 2
  5162 00003FF1 0F85FC040000                    jne L_error_arg_count_2
  5163 00003FF7 488B7520                        mov rsi, PARAM(0)
  5164                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00003FFB 803E11              <2>  cmp byte [%1], %2
    66 00003FFE 0F85BF050000        <2>  jne L_error_incorrect_type
    71 00004004 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00004009 0F85B4050000        <1>  jne L_error_incorrect_type
  5165 0000400F 488B7D28                        mov rdi, PARAM(1)
  5166                                          assert_integer(rdi)
    70                              <1>  assert_rational(%1)
    65 00004013 803F11              <2>  cmp byte [%1], %2
    66 00004016 0F85A7050000        <2>  jne L_error_incorrect_type
    71 0000401C 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00004021 0F859C050000        <1>  jne L_error_incorrect_type
  5167 00004027 488B4601                        mov rax, qword [rsi + 1]
  5168 0000402B 488B5F01                        mov rbx, qword [rdi + 1]
  5169 0000402F 4883FB00                        cmp rbx, 0
  5170 00004033 0F84BB050000                    je L_error_division_by_zero
  5171 00004039 4899                            cqo
  5172 0000403B 48F7FB                          idiv rbx
  5173 0000403E 4889D7                          mov rdi, rdx
  5174 00004041 E8EC030000                      call make_integer
  5175                                          LEAVE
    61 00004046 C9                  <1>  leave
  5176 00004047 C22000                          ret AND_KILL_FRAME(2)
  5177                                  
  5178                                  L_code_ptr_set_car:
  5179                                          ENTER
    56 0000404A C8000000            <1>  enter 0, 0
    57 0000404E 4883E4F0            <1>  and rsp, ~15
  5180 00004052 48837D1802                      cmp COUNT, 2
  5181 00004057 0F8596040000                    jne L_error_arg_count_2
  5182 0000405D 488B4520                        mov rax, PARAM(0)
  5183                                          assert_pair(rax)
    65 00004061 803821              <1>  cmp byte [%1], %2
    66 00004064 0F8559050000        <1>  jne L_error_incorrect_type
  5184 0000406A 488B5D28                        mov rbx, PARAM(1)
  5185 0000406E 48895801                        mov SOB_PAIR_CAR(rax), rbx
  5186 00004072 48B8-                           mov rax, sob_void
  5186 00004074 [0000000000000000] 
  5187                                          LEAVE
    61 0000407C C9                  <1>  leave
  5188 0000407D C22000                          ret AND_KILL_FRAME(2)
  5189                                  
  5190                                  L_code_ptr_set_cdr:
  5191                                          ENTER
    56 00004080 C8000000            <1>  enter 0, 0
    57 00004084 4883E4F0            <1>  and rsp, ~15
  5192 00004088 48837D1802                      cmp COUNT, 2
  5193 0000408D 0F8560040000                    jne L_error_arg_count_2
  5194 00004093 488B4520                        mov rax, PARAM(0)
  5195                                          assert_pair(rax)
    65 00004097 803821              <1>  cmp byte [%1], %2
    66 0000409A 0F8523050000        <1>  jne L_error_incorrect_type
  5196 000040A0 488B5D28                        mov rbx, PARAM(1)
  5197 000040A4 48895809                        mov SOB_PAIR_CDR(rax), rbx
  5198 000040A8 48B8-                           mov rax, sob_void
  5198 000040AA [0000000000000000] 
  5199                                          LEAVE
    61 000040B2 C9                  <1>  leave
  5200 000040B3 C22000                          ret AND_KILL_FRAME(2)
  5201                                  
  5202                                  L_code_ptr_string_ref:
  5203                                          ENTER
    56 000040B6 C8000000            <1>  enter 0, 0
    57 000040BA 4883E4F0            <1>  and rsp, ~15
  5204 000040BE 48837D1802                      cmp COUNT, 2
  5205 000040C3 0F852A040000                    jne L_error_arg_count_2
  5206 000040C9 488B7D20                        mov rdi, PARAM(0)
  5207                                          assert_string(rdi)
    65 000040CD 803F03              <1>  cmp byte [%1], %2
    66 000040D0 0F85ED040000        <1>  jne L_error_incorrect_type
  5208 000040D6 488B7528                        mov rsi, PARAM(1)
  5209                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 000040DA 803E11              <2>  cmp byte [%1], %2
    66 000040DD 0F85E0040000        <2>  jne L_error_incorrect_type
    71 000040E3 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 000040E8 0F85D5040000        <1>  jne L_error_incorrect_type
  5210 000040EE 488B5701                        mov rdx, qword [rdi + 1]
  5211 000040F2 488B4E01                        mov rcx, qword [rsi + 1]
  5212 000040F6 4839D1                          cmp rcx, rdx
  5213 000040F9 0F8D59030000                    jge L_error_integer_range
  5214 000040FF 4883F900                        cmp rcx, 0
  5215 00004103 0F8C4F030000                    jl L_error_integer_range
  5216 00004109 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  5217 0000410D BF02000000                      mov rdi, 2
  5218 00004112 E83CECFFFF                      call malloc
  5219 00004117 C60002                          mov byte [rax], T_char
  5220 0000411A 885801                          mov byte [rax + 1], bl
  5221                                          LEAVE
    61 0000411D C9                  <1>  leave
  5222 0000411E C22000                          ret AND_KILL_FRAME(2)
  5223                                  
  5224                                  L_code_ptr_vector_ref:
  5225                                          ENTER
    56 00004121 C8000000            <1>  enter 0, 0
    57 00004125 4883E4F0            <1>  and rsp, ~15
  5226 00004129 48837D1802                      cmp COUNT, 2
  5227 0000412E 0F85BF030000                    jne L_error_arg_count_2
  5228 00004134 488B7D20                        mov rdi, PARAM(0)
  5229                                          assert_vector(rdi)
    65 00004138 803F22              <1>  cmp byte [%1], %2
    66 0000413B 0F8582040000        <1>  jne L_error_incorrect_type
  5230 00004141 488B7528                        mov rsi, PARAM(1)
  5231                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00004145 803E11              <2>  cmp byte [%1], %2
    66 00004148 0F8575040000        <2>  jne L_error_incorrect_type
    71 0000414E 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00004153 0F856A040000        <1>  jne L_error_incorrect_type
  5232 00004159 488B5701                        mov rdx, qword [rdi + 1]
  5233 0000415D 488B4E01                        mov rcx, qword [rsi + 1]
  5234 00004161 4839D1                          cmp rcx, rdx
  5235 00004164 0F8DEE020000                    jge L_error_integer_range
  5236 0000416A 4883F900                        cmp rcx, 0
  5237 0000416E 0F8CE4020000                    jl L_error_integer_range
  5238 00004174 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  5239                                          LEAVE
    61 00004179 C9                  <1>  leave
  5240 0000417A C22000                          ret AND_KILL_FRAME(2)
  5241                                  
  5242                                  L_code_ptr_vector_set:
  5243                                          ENTER
    56 0000417D C8000000            <1>  enter 0, 0
    57 00004181 4883E4F0            <1>  and rsp, ~15
  5244 00004185 48837D1803                      cmp COUNT, 3
  5245 0000418A 0F85CD030000                    jne L_error_arg_count_3
  5246 00004190 488B7D20                        mov rdi, PARAM(0)
  5247                                          assert_vector(rdi)
    65 00004194 803F22              <1>  cmp byte [%1], %2
    66 00004197 0F8526040000        <1>  jne L_error_incorrect_type
  5248 0000419D 488B7528                        mov rsi, PARAM(1)
  5249                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 000041A1 803E11              <2>  cmp byte [%1], %2
    66 000041A4 0F8519040000        <2>  jne L_error_incorrect_type
    71 000041AA 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 000041AF 0F850E040000        <1>  jne L_error_incorrect_type
  5250 000041B5 488B5701                        mov rdx, qword [rdi + 1]
  5251 000041B9 488B4E01                        mov rcx, qword [rsi + 1]
  5252 000041BD 4839D1                          cmp rcx, rdx
  5253 000041C0 0F8D92020000                    jge L_error_integer_range
  5254 000041C6 4883F900                        cmp rcx, 0
  5255 000041CA 0F8C88020000                    jl L_error_integer_range
  5256 000041D0 488B4530                        mov rax, PARAM(2)
  5257 000041D4 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  5258 000041D9 48B8-                           mov rax, sob_void
  5258 000041DB [0000000000000000] 
  5259                                          LEAVE
    61 000041E3 C9                  <1>  leave
  5260 000041E4 C22800                          ret AND_KILL_FRAME(3)
  5261                                  
  5262                                  L_code_ptr_string_set:
  5263                                          ENTER
    56 000041E7 C8000000            <1>  enter 0, 0
    57 000041EB 4883E4F0            <1>  and rsp, ~15
  5264 000041EF 48837D1803                      cmp COUNT, 3
  5265 000041F4 0F8563030000                    jne L_error_arg_count_3
  5266 000041FA 488B7D20                        mov rdi, PARAM(0)
  5267                                          assert_string(rdi)
    65 000041FE 803F03              <1>  cmp byte [%1], %2
    66 00004201 0F85BC030000        <1>  jne L_error_incorrect_type
  5268 00004207 488B7528                        mov rsi, PARAM(1)
  5269                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 0000420B 803E11              <2>  cmp byte [%1], %2
    66 0000420E 0F85AF030000        <2>  jne L_error_incorrect_type
    71 00004214 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00004219 0F85A4030000        <1>  jne L_error_incorrect_type
  5270 0000421F 488B5701                        mov rdx, qword [rdi + 1]
  5271 00004223 488B4E01                        mov rcx, qword [rsi + 1]
  5272 00004227 4839D1                          cmp rcx, rdx
  5273 0000422A 0F8D28020000                    jge L_error_integer_range
  5274 00004230 4883F900                        cmp rcx, 0
  5275 00004234 0F8C1E020000                    jl L_error_integer_range
  5276 0000423A 488B4530                        mov rax, PARAM(2)
  5277                                          assert_char(rax)
    65 0000423E 803802              <1>  cmp byte [%1], %2
    66 00004241 0F857C030000        <1>  jne L_error_incorrect_type
  5278 00004247 8A4001                          mov al, byte [rax + 1]
  5279 0000424A 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  5280 0000424E 48B8-                           mov rax, sob_void
  5280 00004250 [0000000000000000] 
  5281                                          LEAVE
    61 00004258 C9                  <1>  leave
  5282 00004259 C22800                          ret AND_KILL_FRAME(3)
  5283                                  
  5284                                  L_code_ptr_make_vector:
  5285                                          ENTER
    56 0000425C C8000000            <1>  enter 0, 0
    57 00004260 4883E4F0            <1>  and rsp, ~15
  5286 00004264 48837D1802                      cmp COUNT, 2
  5287 00004269 0F8584020000                    jne L_error_arg_count_2
  5288 0000426F 488B4D20                        mov rcx, PARAM(0)
  5289                                          assert_integer(rcx)
    70                              <1>  assert_rational(%1)
    65 00004273 803911              <2>  cmp byte [%1], %2
    66 00004276 0F8547030000        <2>  jne L_error_incorrect_type
    71 0000427C 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00004281 0F853C030000        <1>  jne L_error_incorrect_type
  5290 00004287 488B4901                        mov rcx, qword [rcx + 1]
  5291 0000428B 4883F900                        cmp rcx, 0
  5292 0000428F 0F8CC3010000                    jl L_error_integer_range
  5293 00004295 488B5528                        mov rdx, PARAM(1)
  5294 00004299 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  5295 000042A1 E8ADEAFFFF                      call malloc
  5296 000042A6 C60022                          mov byte [rax], T_vector
  5297 000042A9 48894801                        mov qword [rax + 1], rcx
  5298 000042AD 41B800000000                    mov r8, 0
  5299                                  .L0:
  5300 000042B3 4939C8                          cmp r8, rcx
  5301 000042B6 740A                            je .L1
  5302 000042B8 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  5303 000042BD 49FFC0                          inc r8
  5304 000042C0 EBF1                            jmp .L0
  5305                                  .L1:
  5306                                          LEAVE
    61 000042C2 C9                  <1>  leave
  5307 000042C3 C22000                          ret AND_KILL_FRAME(2)
  5308                                          
  5309                                  L_code_ptr_make_string:
  5310                                          ENTER
    56 000042C6 C8000000            <1>  enter 0, 0
    57 000042CA 4883E4F0            <1>  and rsp, ~15
  5311 000042CE 48837D1802                      cmp COUNT, 2
  5312 000042D3 0F851A020000                    jne L_error_arg_count_2
  5313 000042D9 488B4D20                        mov rcx, PARAM(0)
  5314                                          assert_integer(rcx)
    70                              <1>  assert_rational(%1)
    65 000042DD 803911              <2>  cmp byte [%1], %2
    66 000042E0 0F85DD020000        <2>  jne L_error_incorrect_type
    71 000042E6 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    72 000042EB 0F85D2020000        <1>  jne L_error_incorrect_type
  5315 000042F1 488B4901                        mov rcx, qword [rcx + 1]
  5316 000042F5 4883F900                        cmp rcx, 0
  5317 000042F9 0F8C59010000                    jl L_error_integer_range
  5318 000042FF 488B5528                        mov rdx, PARAM(1)
  5319                                          assert_char(rdx)
    65 00004303 803A02              <1>  cmp byte [%1], %2
    66 00004306 0F85B7020000        <1>  jne L_error_incorrect_type
  5320 0000430C 8A5201                          mov dl, byte [rdx + 1]
  5321 0000430F 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  5322 00004313 E83BEAFFFF                      call malloc
  5323 00004318 C60003                          mov byte [rax], T_string
  5324 0000431B 48894801                        mov qword [rax + 1], rcx
  5325 0000431F 41B800000000                    mov r8, 0
  5326                                  .L0:
  5327 00004325 4939C8                          cmp r8, rcx
  5328 00004328 740A                            je .L1
  5329 0000432A 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  5330 0000432F 49FFC0                          inc r8
  5331 00004332 EBF1                            jmp .L0
  5332                                  .L1:
  5333                                          LEAVE
    61 00004334 C9                  <1>  leave
  5334 00004335 C22000                          ret AND_KILL_FRAME(2)
  5335                                  
  5336                                  L_code_ptr_numerator:
  5337                                          ENTER
    56 00004338 C8000000            <1>  enter 0, 0
    57 0000433C 4883E4F0            <1>  and rsp, ~15
  5338 00004340 48837D1801                      cmp COUNT, 1
  5339 00004345 0F8573010000                    jne L_error_arg_count_1
  5340 0000434B 488B4520                        mov rax, PARAM(0)
  5341                                          assert_rational(rax)
    65 0000434F 803811              <1>  cmp byte [%1], %2
    66 00004352 0F856B020000        <1>  jne L_error_incorrect_type
  5342 00004358 488B7801                        mov rdi, qword [rax + 1]
  5343 0000435C E8D1000000                      call make_integer
  5344                                          LEAVE
    61 00004361 C9                  <1>  leave
  5345 00004362 C21800                          ret AND_KILL_FRAME(1)
  5346                                          
  5347                                  L_code_ptr_denominator:
  5348                                          ENTER
    56 00004365 C8000000            <1>  enter 0, 0
    57 00004369 4883E4F0            <1>  and rsp, ~15
  5349 0000436D 48837D1801                      cmp COUNT, 1
  5350 00004372 0F8546010000                    jne L_error_arg_count_1
  5351 00004378 488B4520                        mov rax, PARAM(0)
  5352                                          assert_rational(rax)
    65 0000437C 803811              <1>  cmp byte [%1], %2
    66 0000437F 0F853E020000        <1>  jne L_error_incorrect_type
  5353 00004385 488B7809                        mov rdi, qword [rax + 1 + 8]
  5354 00004389 E8A4000000                      call make_integer
  5355                                          LEAVE
    61 0000438E C9                  <1>  leave
  5356 0000438F C21800                          ret AND_KILL_FRAME(1)
  5357                                  
  5358                                  L_code_ptr_eq:
  5359                                  	ENTER
    56 00004392 C8000000            <1>  enter 0, 0
    57 00004396 4883E4F0            <1>  and rsp, ~15
  5360 0000439A 48837D1802              	cmp COUNT, 2
  5361 0000439F 0F854E010000            	jne L_error_arg_count_2
  5362 000043A5 488B7D20                	mov rdi, PARAM(0)
  5363 000043A9 488B7528                	mov rsi, PARAM(1)
  5364 000043AD 4839F7                  	cmp rdi, rsi
  5365 000043B0 744A                    	je .L_eq_true
  5366 000043B2 8A17                    	mov dl, byte [rdi]
  5367 000043B4 3A16                    	cmp dl, byte [rsi]
  5368 000043B6 7550                    	jne .L_eq_false
  5369 000043B8 80FA02                  	cmp dl, T_char
  5370 000043BB 7437                    	je .L_char
  5371 000043BD 80FA04                  	cmp dl, T_symbol
  5372 000043C0 742A                    	je .L_symbol
  5373 000043C2 80FA12                  	cmp dl, T_real
  5374 000043C5 741D                    	je .L_real
  5375 000043C7 80FA11                  	cmp dl, T_rational
  5376 000043CA 7402                    	je .L_rational
  5377 000043CC EB3A                    	jmp .L_eq_false
  5378                                  .L_rational:
  5379 000043CE 488B4601                	mov rax, qword [rsi + 1]
  5380 000043D2 483B4701                	cmp rax, qword [rdi + 1]
  5381 000043D6 7530                    	jne .L_eq_false
  5382 000043D8 488B4609                	mov rax, qword [rsi + 1 + 8]
  5383 000043DC 483B4709                	cmp rax, qword [rdi + 1 + 8]
  5384 000043E0 7526                    	jne .L_eq_false
  5385 000043E2 EB18                    	jmp .L_eq_true
  5386                                  .L_real:
  5387 000043E4 488B4601                	mov rax, qword [rsi + 1]
  5388 000043E8 483B4701                	cmp rax, qword [rdi + 1]
  5389                                  .L_symbol:
  5390                                  	; never reached, because symbols are static!
  5391                                  	; but I'm keeping it in case, I'll ever change
  5392                                  	; the implementation
  5393 000043EC 488B4601                	mov rax, qword [rsi + 1]
  5394 000043F0 483B4701                	cmp rax, qword [rdi + 1]
  5395                                  .L_char:
  5396 000043F4 8A5E01                  	mov bl, byte [rsi + 1]
  5397 000043F7 3A5F01                  	cmp bl, byte [rdi + 1]
  5398 000043FA 750C                    	jne .L_eq_false
  5399                                  .L_eq_true:
  5400 000043FC 48B8-                   	mov rax, sob_boolean_true
  5400 000043FE [0300000000000000] 
  5401 00004406 EB0A                    	jmp .L_eq_exit
  5402                                  .L_eq_false:
  5403 00004408 48B8-                   	mov rax, sob_boolean_false
  5403 0000440A [0200000000000000] 
  5404                                  .L_eq_exit:
  5405                                  	LEAVE
    61 00004412 C9                  <1>  leave
  5406 00004413 C22000                  	ret AND_KILL_FRAME(2)
  5407                                  
  5408                                  make_real:
  5409                                          ENTER
    56 00004416 C8000000            <1>  enter 0, 0
    57 0000441A 4883E4F0            <1>  and rsp, ~15
  5410 0000441E BF09000000                      mov rdi, (1 + 8)
  5411 00004423 E82BE9FFFF                      call malloc
  5412 00004428 C60012                          mov byte [rax], T_real
  5413 0000442B F20F114001                      movsd qword [rax + 1], xmm0
  5414                                          LEAVE
    61 00004430 C9                  <1>  leave
  5415 00004431 C3                              ret
  5416                                          
  5417                                  make_integer:
  5418                                          ENTER
    56 00004432 C8000000            <1>  enter 0, 0
    57 00004436 4883E4F0            <1>  and rsp, ~15
  5419 0000443A 4889FE                          mov rsi, rdi
  5420 0000443D BF11000000                      mov rdi, (1 + 8 + 8)
  5421 00004442 E80CE9FFFF                      call malloc
  5422 00004447 C60011                          mov byte [rax], T_rational
  5423 0000444A 48897001                        mov qword [rax + 1], rsi
  5424 0000444E 48C7400901000000                mov qword [rax + 1 + 8], 1
  5425                                          LEAVE
    61 00004456 C9                  <1>  leave
  5426 00004457 C3                              ret
  5427                                          
  5428                                  L_error_integer_range:
  5429 00004458 488B3C25[00000000]              mov rdi, qword [stderr]
  5430 00004460 48BE-                           mov rsi, fmt_integer_range
  5430 00004462 [3404000000000000] 
  5431 0000446A B800000000                      mov rax, 0
  5432                                  	ENTER
    56 0000446F C8000000            <1>  enter 0, 0
    57 00004473 4883E4F0            <1>  and rsp, ~15
  5433 00004477 E8(00000000)                    call fprintf
  5434                                  	LEAVE
    61 0000447C C9                  <1>  leave
  5435 0000447D 48C7C0FBFFFFFF                  mov rax, -5
  5436 00004484 E8(00000000)                    call exit
  5437                                  
  5438                                  L_error_arg_count_0:
  5439 00004489 488B3C25[00000000]              mov rdi, qword [stderr]
  5440 00004491 48BE-                           mov rsi, fmt_arg_count_0
  5440 00004493 [FA02000000000000] 
  5441 0000449B 488B5518                        mov rdx, COUNT
  5442 0000449F B800000000                      mov rax, 0
  5443                                  	ENTER
    56 000044A4 C8000000            <1>  enter 0, 0
    57 000044A8 4883E4F0            <1>  and rsp, ~15
  5444 000044AC E8(00000000)                    call fprintf
  5445                                  	LEAVE
    61 000044B1 C9                  <1>  leave
  5446 000044B2 48C7C0FDFFFFFF                  mov rax, -3
  5447 000044B9 E8(00000000)                    call exit
  5448                                  
  5449                                  L_error_arg_count_1:
  5450 000044BE 488B3C25[00000000]              mov rdi, qword [stderr]
  5451 000044C6 48BE-                           mov rsi, fmt_arg_count_1
  5451 000044C8 [2203000000000000] 
  5452 000044D0 488B5518                        mov rdx, COUNT
  5453 000044D4 B800000000                      mov rax, 0
  5454                                  	ENTER
    56 000044D9 C8000000            <1>  enter 0, 0
    57 000044DD 4883E4F0            <1>  and rsp, ~15
  5455 000044E1 E8(00000000)                    call fprintf
  5456                                  	LEAVE
    61 000044E6 C9                  <1>  leave
  5457 000044E7 48C7C0FDFFFFFF                  mov rax, -3
  5458 000044EE E8(00000000)                    call exit
  5459                                  
  5460                                  L_error_arg_count_2:
  5461 000044F3 488B3C25[00000000]              mov rdi, qword [stderr]
  5462 000044FB 48BE-                           mov rsi, fmt_arg_count_2
  5462 000044FD [8803000000000000] 
  5463 00004505 488B5518                        mov rdx, COUNT
  5464 00004509 B800000000                      mov rax, 0
  5465                                  	ENTER
    56 0000450E C8000000            <1>  enter 0, 0
    57 00004512 4883E4F0            <1>  and rsp, ~15
  5466 00004516 E8(00000000)                    call fprintf
  5467                                  	LEAVE
    61 0000451B C9                  <1>  leave
  5468 0000451C 48C7C0FDFFFFFF                  mov rax, -3
  5469 00004523 E8(00000000)                    call exit
  5470                                  
  5471                                  L_error_arg_count_12:
  5472 00004528 488B3C25[00000000]              mov rdi, qword [stderr]
  5473 00004530 48BE-                           mov rsi, fmt_arg_count_12
  5473 00004532 [4803000000000000] 
  5474 0000453A 488B5518                        mov rdx, COUNT
  5475 0000453E B800000000                      mov rax, 0
  5476                                  	ENTER
    56 00004543 C8000000            <1>  enter 0, 0
    57 00004547 4883E4F0            <1>  and rsp, ~15
  5477 0000454B E8(00000000)                    call fprintf
  5478                                  	LEAVE
    61 00004550 C9                  <1>  leave
  5479 00004551 48C7C0FDFFFFFF                  mov rax, -3
  5480 00004558 E8(00000000)                    call exit
  5481                                  
  5482                                  L_error_arg_count_3:
  5483 0000455D 488B3C25[00000000]              mov rdi, qword [stderr]
  5484 00004565 48BE-                           mov rsi, fmt_arg_count_3
  5484 00004567 [AF03000000000000] 
  5485 0000456F 488B5518                        mov rdx, COUNT
  5486 00004573 B800000000                      mov rax, 0
  5487                                  	ENTER
    56 00004578 C8000000            <1>  enter 0, 0
    57 0000457C 4883E4F0            <1>  and rsp, ~15
  5488 00004580 E8(00000000)                    call fprintf
  5489                                  	LEAVE
    61 00004585 C9                  <1>  leave
  5490 00004586 48C7C0FDFFFFFF                  mov rax, -3
  5491 0000458D E8(00000000)                    call exit
  5492                                  
  5493                                  L_error_arg_apply_no_list:
  5494 00004592 488B3C25[00000000]              mov rdi, qword [stderr]
  5495 0000459A 48BE-                           mov rsi, fmt_arg_apply_no_list
  5495 0000459C [D803000000000000] 
  5496 000045A4 B800000000                      mov rax, 0
  5497                                  	ENTER
    56 000045A9 C8000000            <1>  enter 0, 0
    57 000045AD 4883E4F0            <1>  and rsp, ~15
  5498 000045B1 E8(00000000)                    call fprintf
  5499                                  	LEAVE
    61 000045B6 C9                  <1>  leave
  5500 000045B7 48C7C0FCFFFFFF                  mov rax, -4
  5501 000045BE E8(00000000)                    call exit  
  5502                                  
  5503                                  L_error_incorrect_type:
  5504 000045C3 488B3C25[00000000]              mov rdi, qword [stderr]
  5505 000045CB 48BE-                           mov rsi, fmt_type
  5505 000045CD [1004000000000000] 
  5506 000045D5 B800000000                      mov rax, 0
  5507                                  	ENTER
    56 000045DA C8000000            <1>  enter 0, 0
    57 000045DE 4883E4F0            <1>  and rsp, ~15
  5508 000045E2 E8(00000000)                    call fprintf
  5509                                  	LEAVE
    61 000045E7 C9                  <1>  leave
  5510 000045E8 48C7C0FCFFFFFF                  mov rax, -4
  5511 000045EF E8(00000000)                    call exit
  5512                                  
  5513                                  L_error_division_by_zero:
  5514 000045F4 488B3C25[00000000]              mov rdi, qword [stderr]
  5515 000045FC 48BE-                           mov rsi, fmt_division_by_zero
  5515 000045FE [5104000000000000] 
  5516 00004606 B800000000                      mov rax, 0
  5517                                  	ENTER
    56 0000460B C8000000            <1>  enter 0, 0
    57 0000460F 4883E4F0            <1>  and rsp, ~15
  5518 00004613 E8(00000000)                    call fprintf
  5519                                  	LEAVE
    61 00004618 C9                  <1>  leave
  5520 00004619 48C7C0F8FFFFFF                  mov rax, -8
  5521 00004620 E8(00000000)                    call exit
  5522                                  
  5523                                  section .data
  5524                                  fmt_char:
  5525 000002F7 256300                          db `%c\0`
  5526                                  fmt_arg_count_0:
  5527 000002FA 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  5527 00000303 74696E67207A65726F-
  5527 0000030C 20617267756D656E74-
  5527 00000315 732E20466F756E6420-
  5527 0000031E 25640A00           
  5528                                  fmt_arg_count_1:
  5529 00000322 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  5529 0000032B 74696E67206F6E6520-
  5529 00000334 617267756D656E742E-
  5529 0000033D 20466F756E64202564-
  5529 00000346 0A00               
  5530                                  fmt_arg_count_12:
  5531 00000348 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  5531 00000351 74696E67206F6E6520-
  5531 0000035A 726571756972656420-
  5531 00000363 616E64206F6E65206F-
  5531 0000036C 7074696F6E616C2061-
  5531 00000375 7267756D656E742E20-
  5531 0000037E 466F756E642025640A-
  5531 00000387 00                 
  5532                                  fmt_arg_count_2:
  5533 00000388 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  5533 00000391 74696E672074776F20-
  5533 0000039A 617267756D656E7473-
  5533 000003A3 2E20466F756E642025-
  5533 000003AC 640A00             
  5534                                  fmt_arg_count_3:
  5535 000003AF 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  5535 000003B8 74696E672074687265-
  5535 000003C1 6520617267756D656E-
  5535 000003CA 74732E20466F756E64-
  5535 000003D3 2025640A00         
  5536                                  fmt_arg_apply_no_list:
  5537 000003D8 21212120546865206C-             db `!!! The last argument in apply should be a proper list\n\0`
  5537 000003E1 61737420617267756D-
  5537 000003EA 656E7420696E206170-
  5537 000003F3 706C792073686F756C-
  5537 000003FC 642062652061207072-
  5537 00000405 6F706572206C697374-
  5537 0000040E 0A00               
  5538                                  fmt_type:
  5539 00000410 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  5539 00000419 696F6E207061737365-
  5539 00000422 6420696E636F727265-
  5539 0000042B 637420747970650A00 
  5540                                  fmt_integer_range:
  5541 00000434 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  5541 0000043D 7265637420696E7465-
  5541 00000446 6765722072616E6765-
  5541 0000044F 0A00               
  5542                                  fmt_division_by_zero:
  5543 00000451 212121204469766973-             db `!!! Division by zero\n\0`
  5543 0000045A 696F6E206279207A65-
  5543 00000463 726F0A00           
  5544                                  fmt_scheme_error_part_1:
  5545 00000467 0A2121212054686520-             db `\n!!! The procedure \0`
  5545 00000470 70726F636564757265-
  5545 00000479 2000               
  5546                                  fmt_scheme_error_part_2:
  5547 0000047B 2061736B656420746F-             db ` asked to terminate the program\n`
  5547 00000484 207465726D696E6174-
  5547 0000048D 65207468652070726F-
  5547 00000496 6772616D0A         
  5548 0000049B 202020207769746820-             db `    with the following message:\n\n\0`
  5548 000004A4 74686520666F6C6C6F-
  5548 000004AD 77696E67206D657373-
  5548 000004B6 6167653A0A0A00     
  5549                                  fmt_scheme_error_part_3:
  5550 000004BD 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  5550 000004C6 210A0A00           
