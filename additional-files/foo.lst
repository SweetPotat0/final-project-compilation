     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "whatever"
    84 00000007 0800000000000000        	dq 8
    85 0000000F 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
    86 00000017 04                      	db T_symbol	; whatever
    87 00000018 [0600000000000000]      	dq L_constants + 6
    88 00000020 11                      	db T_rational	; 0
    89 00000021 000000000000000001-     	dq 0, 1
    89 0000002A 00000000000000     
    90 00000031 03                      	db T_string	; "+"
    91 00000032 0100000000000000        	dq 1
    92 0000003A 2B                      	db 0x2B
    93 0000003B 04                      	db T_symbol	; +
    94 0000003C [3100000000000000]      	dq L_constants + 49
    95 00000044 03                      	db T_string	; "all arguments need ...
    96 00000045 2000000000000000        	dq 32
    97 0000004D 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
    98 00000055 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
    99 0000005D 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   100 00000065 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   101 0000006D 03                      	db T_string	; "-"
   102 0000006E 0100000000000000        	dq 1
   103 00000076 2D                      	db 0x2D
   104 00000077 04                      	db T_symbol	; -
   105 00000078 [6D00000000000000]      	dq L_constants + 109
   106 00000080 11                      	db T_rational	; 1
   107 00000081 010000000000000001-     	dq 1, 1
   107 0000008A 00000000000000     
   108 00000091 03                      	db T_string	; "*"
   109 00000092 0100000000000000        	dq 1
   110 0000009A 2A                      	db 0x2A
   111 0000009B 04                      	db T_symbol	; *
   112 0000009C [9100000000000000]      	dq L_constants + 145
   113 000000A4 03                      	db T_string	; "/"
   114 000000A5 0100000000000000        	dq 1
   115 000000AD 2F                      	db 0x2F
   116 000000AE 04                      	db T_symbol	; /
   117 000000AF [A400000000000000]      	dq L_constants + 164
   118 000000B7 03                      	db T_string	; "generic-comparator"
   119 000000B8 1200000000000000        	dq 18
   120 000000C0 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   121 000000C8 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   122 000000D0 6F72                    	db 0x6F, 0x72
   123 000000D2 04                      	db T_symbol	; generic-comparator
   124 000000D3 [B700000000000000]      	dq L_constants + 183
   125 000000DB 03                      	db T_string	; "all the arguments m...
   126 000000DC 2100000000000000        	dq 33
   127 000000E4 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   128 000000EC 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   129 000000F4 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   130 000000FC 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   131 00000104 73                      	db 0x73
   132 00000105 03                      	db T_string	; "make-list"
   133 00000106 0900000000000000        	dq 9
   134 0000010E 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   135 00000116 74                      	db 0x74
   136 00000117 04                      	db T_symbol	; make-list
   137 00000118 [0501000000000000]      	dq L_constants + 261
   138 00000120 03                      	db T_string	; "Usage: (make-list l...
   139 00000121 2D00000000000000        	dq 45
   140 00000129 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   141 00000131 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   142 00000139 74206C656E677468        	db 0x74, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   143 00000141 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   144 00000149 616C2D696E69742D        	db 0x61, 0x6C, 0x2D, 0x69, 0x6E, 0x69, 0x74, 0x2D
   145 00000151 6368617229              	db 0x63, 0x68, 0x61, 0x72, 0x29
   146 00000156 0241                    	db T_char, 0x41	; #\A
   147 00000158 025A                    	db T_char, 0x5A	; #\Z
   148 0000015A 0261                    	db T_char, 0x61	; #\a
   149 0000015C 027A                    	db T_char, 0x7A	; #\z
   150 0000015E 03                      	db T_string	; "make-vector"
   151 0000015F 0B00000000000000        	dq 11
   152 00000167 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   153 0000016F 746F72                  	db 0x74, 0x6F, 0x72
   154 00000172 04                      	db T_symbol	; make-vector
   155 00000173 [5E01000000000000]      	dq L_constants + 350
   156 0000017B 03                      	db T_string	; "Usage: (make-vector...
   157 0000017C 2B00000000000000        	dq 43
   158 00000184 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   159 0000018C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   160 00000194 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   161 0000019C 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   162 000001A4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   163 000001AC 6C7429                  	db 0x6C, 0x74, 0x29
   164 000001AF 03                      	db T_string	; "make-string"
   165 000001B0 0B00000000000000        	dq 11
   166 000001B8 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   167 000001C0 696E67                  	db 0x69, 0x6E, 0x67
   168 000001C3 04                      	db T_symbol	; make-string
   169 000001C4 [AF01000000000000]      	dq L_constants + 431
   170 000001CC 03                      	db T_string	; "Usage: (make-string...
   171 000001CD 2B00000000000000        	dq 43
   172 000001D5 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   173 000001DD 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   174 000001E5 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   175 000001ED 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   176 000001F5 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   177 000001FD 6C7429                  	db 0x6C, 0x74, 0x29
   178 00000200 11                      	db T_rational	; 2
   179 00000201 020000000000000001-     	dq 2, 1
   179 0000020A 00000000000000     
   180 00000211 11                      	db T_rational	; 10
   181 00000212 0A0000000000000001-     	dq 10, 1
   181 0000021B 00000000000000     
   182                                  
   183                                  section .bss
   184                                  free_var_0:	; location of null?
   185 00000000 ????????????????        	resq 1
   186                                  free_var_1:	; location of pair?
   187 00000008 ????????????????        	resq 1
   188                                  free_var_2:	; location of void?
   189 00000010 ????????????????        	resq 1
   190                                  free_var_3:	; location of char?
   191 00000018 ????????????????        	resq 1
   192                                  free_var_4:	; location of string?
   193 00000020 ????????????????        	resq 1
   194                                  free_var_5:	; location of symbol?
   195 00000028 ????????????????        	resq 1
   196                                  free_var_6:	; location of vector?
   197 00000030 ????????????????        	resq 1
   198                                  free_var_7:	; location of procedure?
   199 00000038 ????????????????        	resq 1
   200                                  free_var_8:	; location of real?
   201 00000040 ????????????????        	resq 1
   202                                  free_var_9:	; location of rational?
   203 00000048 ????????????????        	resq 1
   204                                  free_var_10:	; location of boolean?
   205 00000050 ????????????????        	resq 1
   206                                  free_var_11:	; location of number?
   207 00000058 ????????????????        	resq 1
   208                                  free_var_12:	; location of collection?
   209 00000060 ????????????????        	resq 1
   210                                  free_var_13:	; location of cons
   211 00000068 ????????????????        	resq 1
   212                                  free_var_14:	; location of display-sexpr
   213 00000070 ????????????????        	resq 1
   214                                  free_var_15:	; location of write-char
   215 00000078 ????????????????        	resq 1
   216                                  free_var_16:	; location of car
   217 00000080 ????????????????        	resq 1
   218                                  free_var_17:	; location of cdr
   219 00000088 ????????????????        	resq 1
   220                                  free_var_18:	; location of string-length
   221 00000090 ????????????????        	resq 1
   222                                  free_var_19:	; location of vector-length
   223 00000098 ????????????????        	resq 1
   224                                  free_var_20:	; location of real->integer
   225 000000A0 ????????????????        	resq 1
   226                                  free_var_21:	; location of exit
   227 000000A8 ????????????????        	resq 1
   228                                  free_var_22:	; location of integer->real
   229 000000B0 ????????????????        	resq 1
   230                                  free_var_23:	; location of rational->real
   231 000000B8 ????????????????        	resq 1
   232                                  free_var_24:	; location of char->integer
   233 000000C0 ????????????????        	resq 1
   234                                  free_var_25:	; location of integer->char
   235 000000C8 ????????????????        	resq 1
   236                                  free_var_26:	; location of trng
   237 000000D0 ????????????????        	resq 1
   238                                  free_var_27:	; location of zero?
   239 000000D8 ????????????????        	resq 1
   240                                  free_var_28:	; location of integer?
   241 000000E0 ????????????????        	resq 1
   242                                  free_var_29:	; location of __bin-apply
   243 000000E8 ????????????????        	resq 1
   244                                  free_var_30:	; location of __bin-add-rr
   245 000000F0 ????????????????        	resq 1
   246                                  free_var_31:	; location of __bin-sub-rr
   247 000000F8 ????????????????        	resq 1
   248                                  free_var_32:	; location of __bin-mul-rr
   249 00000100 ????????????????        	resq 1
   250                                  free_var_33:	; location of __bin-div-rr
   251 00000108 ????????????????        	resq 1
   252                                  free_var_34:	; location of __bin-add-qq
   253 00000110 ????????????????        	resq 1
   254                                  free_var_35:	; location of __bin-sub-qq
   255 00000118 ????????????????        	resq 1
   256                                  free_var_36:	; location of __bin-mul-qq
   257 00000120 ????????????????        	resq 1
   258                                  free_var_37:	; location of __bin-div-qq
   259 00000128 ????????????????        	resq 1
   260                                  free_var_38:	; location of error
   261 00000130 ????????????????        	resq 1
   262                                  free_var_39:	; location of __bin-less-than-rr
   263 00000138 ????????????????        	resq 1
   264                                  free_var_40:	; location of __bin-less-than-qq
   265 00000140 ????????????????        	resq 1
   266                                  free_var_41:	; location of __bin-equal-rr
   267 00000148 ????????????????        	resq 1
   268                                  free_var_42:	; location of __bin-equal-qq
   269 00000150 ????????????????        	resq 1
   270                                  free_var_43:	; location of quotient
   271 00000158 ????????????????        	resq 1
   272                                  free_var_44:	; location of remainder
   273 00000160 ????????????????        	resq 1
   274                                  free_var_45:	; location of set-car!
   275 00000168 ????????????????        	resq 1
   276                                  free_var_46:	; location of set-cdr!
   277 00000170 ????????????????        	resq 1
   278                                  free_var_47:	; location of string-ref
   279 00000178 ????????????????        	resq 1
   280                                  free_var_48:	; location of vector-ref
   281 00000180 ????????????????        	resq 1
   282                                  free_var_49:	; location of vector-set!
   283 00000188 ????????????????        	resq 1
   284                                  free_var_50:	; location of string-set!
   285 00000190 ????????????????        	resq 1
   286                                  free_var_51:	; location of make-vector
   287 00000198 ????????????????        	resq 1
   288                                  free_var_52:	; location of make-string
   289 000001A0 ????????????????        	resq 1
   290                                  free_var_53:	; location of numerator
   291 000001A8 ????????????????        	resq 1
   292                                  free_var_54:	; location of denominator
   293 000001B0 ????????????????        	resq 1
   294                                  free_var_55:	; location of eq?
   295 000001B8 ????????????????        	resq 1
   296                                  free_var_56:	; location of caar
   297 000001C0 ????????????????        	resq 1
   298                                  free_var_57:	; location of cadr
   299 000001C8 ????????????????        	resq 1
   300                                  free_var_58:	; location of cdar
   301 000001D0 ????????????????        	resq 1
   302                                  free_var_59:	; location of cddr
   303 000001D8 ????????????????        	resq 1
   304                                  free_var_60:	; location of caaar
   305 000001E0 ????????????????        	resq 1
   306                                  free_var_61:	; location of caadr
   307 000001E8 ????????????????        	resq 1
   308                                  free_var_62:	; location of cadar
   309 000001F0 ????????????????        	resq 1
   310                                  free_var_63:	; location of caddr
   311 000001F8 ????????????????        	resq 1
   312                                  free_var_64:	; location of cdaar
   313 00000200 ????????????????        	resq 1
   314                                  free_var_65:	; location of cdadr
   315 00000208 ????????????????        	resq 1
   316                                  free_var_66:	; location of cddar
   317 00000210 ????????????????        	resq 1
   318                                  free_var_67:	; location of cdddr
   319 00000218 ????????????????        	resq 1
   320                                  free_var_68:	; location of caaaar
   321 00000220 ????????????????        	resq 1
   322                                  free_var_69:	; location of caaadr
   323 00000228 ????????????????        	resq 1
   324                                  free_var_70:	; location of caadar
   325 00000230 ????????????????        	resq 1
   326                                  free_var_71:	; location of caaddr
   327 00000238 ????????????????        	resq 1
   328                                  free_var_72:	; location of cadaar
   329 00000240 ????????????????        	resq 1
   330                                  free_var_73:	; location of cadadr
   331 00000248 ????????????????        	resq 1
   332                                  free_var_74:	; location of caddar
   333 00000250 ????????????????        	resq 1
   334                                  free_var_75:	; location of cadddr
   335 00000258 ????????????????        	resq 1
   336                                  free_var_76:	; location of cdaaar
   337 00000260 ????????????????        	resq 1
   338                                  free_var_77:	; location of cdaadr
   339 00000268 ????????????????        	resq 1
   340                                  free_var_78:	; location of cdadar
   341 00000270 ????????????????        	resq 1
   342                                  free_var_79:	; location of cdaddr
   343 00000278 ????????????????        	resq 1
   344                                  free_var_80:	; location of cddaar
   345 00000280 ????????????????        	resq 1
   346                                  free_var_81:	; location of cddadr
   347 00000288 ????????????????        	resq 1
   348                                  free_var_82:	; location of cdddar
   349 00000290 ????????????????        	resq 1
   350                                  free_var_83:	; location of cddddr
   351 00000298 ????????????????        	resq 1
   352                                  free_var_84:	; location of list?
   353 000002A0 ????????????????        	resq 1
   354                                  free_var_85:	; location of list
   355 000002A8 ????????????????        	resq 1
   356                                  free_var_86:	; location of not
   357 000002B0 ????????????????        	resq 1
   358                                  free_var_87:	; location of fraction?
   359 000002B8 ????????????????        	resq 1
   360                                  free_var_88:	; location of list*
   361 000002C0 ????????????????        	resq 1
   362                                  free_var_89:	; location of apply
   363 000002C8 ????????????????        	resq 1
   364                                  free_var_90:	; location of ormap
   365 000002D0 ????????????????        	resq 1
   366                                  free_var_91:	; location of map
   367 000002D8 ????????????????        	resq 1
   368                                  free_var_92:	; location of andmap
   369 000002E0 ????????????????        	resq 1
   370                                  free_var_93:	; location of reverse
   371 000002E8 ????????????????        	resq 1
   372                                  free_var_94:	; location of append
   373 000002F0 ????????????????        	resq 1
   374                                  free_var_95:	; location of fold-left
   375 000002F8 ????????????????        	resq 1
   376                                  free_var_96:	; location of fold-right
   377 00000300 ????????????????        	resq 1
   378                                  free_var_97:	; location of +
   379 00000308 ????????????????        	resq 1
   380                                  free_var_98:	; location of -
   381 00000310 ????????????????        	resq 1
   382                                  free_var_99:	; location of *
   383 00000318 ????????????????        	resq 1
   384                                  free_var_100:	; location of /
   385 00000320 ????????????????        	resq 1
   386                                  free_var_101:	; location of fact
   387 00000328 ????????????????        	resq 1
   388                                  free_var_102:	; location of <
   389 00000330 ????????????????        	resq 1
   390                                  free_var_103:	; location of <=
   391 00000338 ????????????????        	resq 1
   392                                  free_var_104:	; location of >
   393 00000340 ????????????????        	resq 1
   394                                  free_var_105:	; location of >=
   395 00000348 ????????????????        	resq 1
   396                                  free_var_106:	; location of =
   397 00000350 ????????????????        	resq 1
   398                                  free_var_107:	; location of make-list
   399 00000358 ????????????????        	resq 1
   400                                  free_var_108:	; location of char<?
   401 00000360 ????????????????        	resq 1
   402                                  free_var_109:	; location of char<=?
   403 00000368 ????????????????        	resq 1
   404                                  free_var_110:	; location of char=?
   405 00000370 ????????????????        	resq 1
   406                                  free_var_111:	; location of char>?
   407 00000378 ????????????????        	resq 1
   408                                  free_var_112:	; location of char>=?
   409 00000380 ????????????????        	resq 1
   410                                  free_var_113:	; location of char-downcase
   411 00000388 ????????????????        	resq 1
   412                                  free_var_114:	; location of char-upcase
   413 00000390 ????????????????        	resq 1
   414                                  free_var_115:	; location of char-ci<?
   415 00000398 ????????????????        	resq 1
   416                                  free_var_116:	; location of char-ci<=?
   417 000003A0 ????????????????        	resq 1
   418                                  free_var_117:	; location of char-ci=?
   419 000003A8 ????????????????        	resq 1
   420                                  free_var_118:	; location of char-ci>?
   421 000003B0 ????????????????        	resq 1
   422                                  free_var_119:	; location of char-ci>=?
   423 000003B8 ????????????????        	resq 1
   424                                  free_var_120:	; location of string-downcase
   425 000003C0 ????????????????        	resq 1
   426                                  free_var_121:	; location of string-upcase
   427 000003C8 ????????????????        	resq 1
   428                                  free_var_122:	; location of list->string
   429 000003D0 ????????????????        	resq 1
   430                                  free_var_123:	; location of string->list
   431 000003D8 ????????????????        	resq 1
   432                                  free_var_124:	; location of string<?
   433 000003E0 ????????????????        	resq 1
   434                                  free_var_125:	; location of string<=?
   435 000003E8 ????????????????        	resq 1
   436                                  free_var_126:	; location of string=?
   437 000003F0 ????????????????        	resq 1
   438                                  free_var_127:	; location of string>=?
   439 000003F8 ????????????????        	resq 1
   440                                  free_var_128:	; location of string>?
   441 00000400 ????????????????        	resq 1
   442                                  free_var_129:	; location of string-ci<?
   443 00000408 ????????????????        	resq 1
   444                                  free_var_130:	; location of string-ci<=?
   445 00000410 ????????????????        	resq 1
   446                                  free_var_131:	; location of string-ci=?
   447 00000418 ????????????????        	resq 1
   448                                  free_var_132:	; location of string-ci>=?
   449 00000420 ????????????????        	resq 1
   450                                  free_var_133:	; location of string-ci>?
   451 00000428 ????????????????        	resq 1
   452                                  free_var_134:	; location of length
   453 00000430 ????????????????        	resq 1
   454                                  free_var_135:	; location of list->vector
   455 00000438 ????????????????        	resq 1
   456                                  free_var_136:	; location of vector
   457 00000440 ????????????????        	resq 1
   458                                  free_var_137:	; location of vector->list
   459 00000448 ????????????????        	resq 1
   460                                  free_var_138:	; location of random
   461 00000450 ????????????????        	resq 1
   462                                  free_var_139:	; location of positive?
   463 00000458 ????????????????        	resq 1
   464                                  free_var_140:	; location of negative?
   465 00000460 ????????????????        	resq 1
   466                                  free_var_141:	; location of even?
   467 00000468 ????????????????        	resq 1
   468                                  free_var_142:	; location of odd?
   469 00000470 ????????????????        	resq 1
   470                                  free_var_143:	; location of abs
   471 00000478 ????????????????        	resq 1
   472                                  free_var_144:	; location of equal?
   473 00000480 ????????????????        	resq 1
   474                                  free_var_145:	; location of assoc
   475 00000488 ????????????????        	resq 1
   476                                  
   477                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   478                                  global main
   479                                  section .text
   480                                  main:
   481 00000000 C8000000                        enter 0, 0
   482                                          
   483                                  	; building closure for null?
   484 00000004 48BF-                   	mov rdi, free_var_0
   484 00000006 [0000000000000000] 
   485 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   485 00000010 [772F010000000000] 
   486 00000018 E8282E0100              	call bind_primitive
   487                                  
   488                                  	; building closure for pair?
   489 0000001D 48BF-                   	mov rdi, free_var_1
   489 0000001F [0800000000000000] 
   490 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   490 00000029 [AD2F010000000000] 
   491 00000031 E80F2E0100              	call bind_primitive
   492                                  
   493                                  	; building closure for void?
   494 00000036 48BF-                   	mov rdi, free_var_2
   494 00000038 [1000000000000000] 
   495 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   495 00000042 [E32F010000000000] 
   496 0000004A E8F62D0100              	call bind_primitive
   497                                  
   498                                  	; building closure for char?
   499 0000004F 48BF-                   	mov rdi, free_var_3
   499 00000051 [1800000000000000] 
   500 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   500 0000005B [1930010000000000] 
   501 00000063 E8DD2D0100              	call bind_primitive
   502                                  
   503                                  	; building closure for string?
   504 00000068 48BF-                   	mov rdi, free_var_4
   504 0000006A [2000000000000000] 
   505 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   505 00000074 [4F30010000000000] 
   506 0000007C E8C42D0100              	call bind_primitive
   507                                  
   508                                  	; building closure for symbol?
   509 00000081 48BF-                   	mov rdi, free_var_5
   509 00000083 [2800000000000000] 
   510 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   510 0000008D [8530010000000000] 
   511 00000095 E8AB2D0100              	call bind_primitive
   512                                  
   513                                  	; building closure for vector?
   514 0000009A 48BF-                   	mov rdi, free_var_6
   514 0000009C [3000000000000000] 
   515 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   515 000000A6 [BB30010000000000] 
   516 000000AE E8922D0100              	call bind_primitive
   517                                  
   518                                  	; building closure for procedure?
   519 000000B3 48BF-                   	mov rdi, free_var_7
   519 000000B5 [3800000000000000] 
   520 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   520 000000BF [F130010000000000] 
   521 000000C7 E8792D0100              	call bind_primitive
   522                                  
   523                                  	; building closure for real?
   524 000000CC 48BF-                   	mov rdi, free_var_8
   524 000000CE [4000000000000000] 
   525 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   525 000000D8 [2731010000000000] 
   526 000000E0 E8602D0100              	call bind_primitive
   527                                  
   528                                  	; building closure for rational?
   529 000000E5 48BF-                   	mov rdi, free_var_9
   529 000000E7 [4800000000000000] 
   530 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   530 000000F1 [5D31010000000000] 
   531 000000F9 E8472D0100              	call bind_primitive
   532                                  
   533                                  	; building closure for boolean?
   534 000000FE 48BF-                   	mov rdi, free_var_10
   534 00000100 [5000000000000000] 
   535 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   535 0000010A [9331010000000000] 
   536 00000112 E82E2D0100              	call bind_primitive
   537                                  
   538                                  	; building closure for number?
   539 00000117 48BF-                   	mov rdi, free_var_11
   539 00000119 [5800000000000000] 
   540 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   540 00000123 [CB31010000000000] 
   541 0000012B E8152D0100              	call bind_primitive
   542                                  
   543                                  	; building closure for collection?
   544 00000130 48BF-                   	mov rdi, free_var_12
   544 00000132 [6000000000000000] 
   545 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   545 0000013C [0332010000000000] 
   546 00000144 E8FC2C0100              	call bind_primitive
   547                                  
   548                                  	; building closure for cons
   549 00000149 48BF-                   	mov rdi, free_var_13
   549 0000014B [6800000000000000] 
   550 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   550 00000155 [3B32010000000000] 
   551 0000015D E8E32C0100              	call bind_primitive
   552                                  
   553                                  	; building closure for display-sexpr
   554 00000162 48BF-                   	mov rdi, free_var_14
   554 00000164 [7000000000000000] 
   555 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   555 0000016E [6F32010000000000] 
   556 00000176 E8CA2C0100              	call bind_primitive
   557                                  
   558                                  	; building closure for write-char
   559 0000017B 48BF-                   	mov rdi, free_var_15
   559 0000017D [7800000000000000] 
   560 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   560 00000187 [9932010000000000] 
   561 0000018F E8B12C0100              	call bind_primitive
   562                                  
   563                                  	; building closure for car
   564 00000194 48BF-                   	mov rdi, free_var_16
   564 00000196 [8000000000000000] 
   565 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   565 000001A0 [F032010000000000] 
   566 000001A8 E8982C0100              	call bind_primitive
   567                                  
   568                                  	; building closure for cdr
   569 000001AD 48BF-                   	mov rdi, free_var_17
   569 000001AF [8800000000000000] 
   570 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   570 000001B9 [1833010000000000] 
   571 000001C1 E87F2C0100              	call bind_primitive
   572                                  
   573                                  	; building closure for string-length
   574 000001C6 48BF-                   	mov rdi, free_var_18
   574 000001C8 [9000000000000000] 
   575 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   575 000001D2 [4033010000000000] 
   576 000001DA E8662C0100              	call bind_primitive
   577                                  
   578                                  	; building closure for vector-length
   579 000001DF 48BF-                   	mov rdi, free_var_19
   579 000001E1 [9800000000000000] 
   580 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   580 000001EB [6D33010000000000] 
   581 000001F3 E84D2C0100              	call bind_primitive
   582                                  
   583                                  	; building closure for real->integer
   584 000001F8 48BF-                   	mov rdi, free_var_20
   584 000001FA [A000000000000000] 
   585 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   585 00000204 [9A33010000000000] 
   586 0000020C E8342C0100              	call bind_primitive
   587                                  
   588                                  	; building closure for exit
   589 00000211 48BF-                   	mov rdi, free_var_21
   589 00000213 [A800000000000000] 
   590 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   590 0000021D [CD33010000000000] 
   591 00000225 E81B2C0100              	call bind_primitive
   592                                  
   593                                  	; building closure for integer->real
   594 0000022A 48BF-                   	mov rdi, free_var_22
   594 0000022C [B000000000000000] 
   595 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   595 00000236 [EA33010000000000] 
   596 0000023E E8022C0100              	call bind_primitive
   597                                  
   598                                  	; building closure for rational->real
   599 00000243 48BF-                   	mov rdi, free_var_23
   599 00000245 [B800000000000000] 
   600 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   600 0000024F [2734010000000000] 
   601 00000257 E8E92B0100              	call bind_primitive
   602                                  
   603                                  	; building closure for char->integer
   604 0000025C 48BF-                   	mov rdi, free_var_24
   604 0000025E [C000000000000000] 
   605 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   605 00000268 [6634010000000000] 
   606 00000270 E8D02B0100              	call bind_primitive
   607                                  
   608                                  	; building closure for integer->char
   609 00000275 48BF-                   	mov rdi, free_var_25
   609 00000277 [C800000000000000] 
   610 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   610 00000281 [9B34010000000000] 
   611 00000289 E8B72B0100              	call bind_primitive
   612                                  
   613                                  	; building closure for trng
   614 0000028E 48BF-                   	mov rdi, free_var_26
   614 00000290 [D000000000000000] 
   615 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   615 0000029A [F534010000000000] 
   616 000002A2 E89E2B0100              	call bind_primitive
   617                                  
   618                                  	; building closure for zero?
   619 000002A7 48BF-                   	mov rdi, free_var_27
   619 000002A9 [D800000000000000] 
   620 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   620 000002B3 [1835010000000000] 
   621 000002BB E8852B0100              	call bind_primitive
   622                                  
   623                                  	; building closure for integer?
   624 000002C0 48BF-                   	mov rdi, free_var_28
   624 000002C2 [E000000000000000] 
   625 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   625 000002CC [7335010000000000] 
   626 000002D4 E86C2B0100              	call bind_primitive
   627                                  
   628                                  	; building closure for __bin-apply
   629 000002D9 48BF-                   	mov rdi, free_var_29
   629 000002DB [E800000000000000] 
   630 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   630 000002E5 [6D2E010000000000] 
   631 000002ED E8532B0100              	call bind_primitive
   632                                  
   633                                  	; building closure for __bin-add-rr
   634 000002F2 48BF-                   	mov rdi, free_var_30
   634 000002F4 [F000000000000000] 
   635 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   635 000002FE [B035010000000000] 
   636 00000306 E83A2B0100              	call bind_primitive
   637                                  
   638                                  	; building closure for __bin-sub-rr
   639 0000030B 48BF-                   	mov rdi, free_var_31
   639 0000030D [F800000000000000] 
   640 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   640 00000317 [F435010000000000] 
   641 0000031F E8212B0100              	call bind_primitive
   642                                  
   643                                  	; building closure for __bin-mul-rr
   644 00000324 48BF-                   	mov rdi, free_var_32
   644 00000326 [0001000000000000] 
   645 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   645 00000330 [3836010000000000] 
   646 00000338 E8082B0100              	call bind_primitive
   647                                  
   648                                  	; building closure for __bin-div-rr
   649 0000033D 48BF-                   	mov rdi, free_var_33
   649 0000033F [0801000000000000] 
   650 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   650 00000349 [7C36010000000000] 
   651 00000351 E8EF2A0100              	call bind_primitive
   652                                  
   653                                  	; building closure for __bin-add-qq
   654 00000356 48BF-                   	mov rdi, free_var_34
   654 00000358 [1001000000000000] 
   655 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   655 00000362 [CE36010000000000] 
   656 0000036A E8D62A0100              	call bind_primitive
   657                                  
   658                                  	; building closure for __bin-sub-qq
   659 0000036F 48BF-                   	mov rdi, free_var_35
   659 00000371 [1801000000000000] 
   660 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   660 0000037B [3637010000000000] 
   661 00000383 E8BD2A0100              	call bind_primitive
   662                                  
   663                                  	; building closure for __bin-mul-qq
   664 00000388 48BF-                   	mov rdi, free_var_36
   664 0000038A [2001000000000000] 
   665 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   665 00000394 [9E37010000000000] 
   666 0000039C E8A42A0100              	call bind_primitive
   667                                  
   668                                  	; building closure for __bin-div-qq
   669 000003A1 48BF-                   	mov rdi, free_var_37
   669 000003A3 [2801000000000000] 
   670 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   670 000003AD [F637010000000000] 
   671 000003B5 E88B2A0100              	call bind_primitive
   672                                  
   673                                  	; building closure for error
   674 000003BA 48BF-                   	mov rdi, free_var_38
   674 000003BC [3001000000000000] 
   675 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   675 000003C6 [C438010000000000] 
   676 000003CE E8722A0100              	call bind_primitive
   677                                  
   678                                  	; building closure for __bin-less-than-rr
   679 000003D3 48BF-                   	mov rdi, free_var_39
   679 000003D5 [3801000000000000] 
   680 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   680 000003DF [7B39010000000000] 
   681 000003E7 E8592A0100              	call bind_primitive
   682                                  
   683                                  	; building closure for __bin-less-than-qq
   684 000003EC 48BF-                   	mov rdi, free_var_40
   684 000003EE [4001000000000000] 
   685 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   685 000003F8 [D239010000000000] 
   686 00000400 E8402A0100              	call bind_primitive
   687                                  
   688                                  	; building closure for __bin-equal-rr
   689 00000405 48BF-                   	mov rdi, free_var_41
   689 00000407 [4801000000000000] 
   690 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   690 00000411 [353A010000000000] 
   691 00000419 E8272A0100              	call bind_primitive
   692                                  
   693                                  	; building closure for __bin-equal-qq
   694 0000041E 48BF-                   	mov rdi, free_var_42
   694 00000420 [5001000000000000] 
   695 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   695 0000042A [8C3A010000000000] 
   696 00000432 E80E2A0100              	call bind_primitive
   697                                  
   698                                  	; building closure for quotient
   699 00000437 48BF-                   	mov rdi, free_var_43
   699 00000439 [5801000000000000] 
   700 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   700 00000443 [EF3A010000000000] 
   701 0000044B E8F5290100              	call bind_primitive
   702                                  
   703                                  	; building closure for remainder
   704 00000450 48BF-                   	mov rdi, free_var_44
   704 00000452 [6001000000000000] 
   705 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   705 0000045C [553B010000000000] 
   706 00000464 E8DC290100              	call bind_primitive
   707                                  
   708                                  	; building closure for set-car!
   709 00000469 48BF-                   	mov rdi, free_var_45
   709 0000046B [6801000000000000] 
   710 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   710 00000475 [BB3B010000000000] 
   711 0000047D E8C3290100              	call bind_primitive
   712                                  
   713                                  	; building closure for set-cdr!
   714 00000482 48BF-                   	mov rdi, free_var_46
   714 00000484 [7001000000000000] 
   715 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   715 0000048E [F13B010000000000] 
   716 00000496 E8AA290100              	call bind_primitive
   717                                  
   718                                  	; building closure for string-ref
   719 0000049B 48BF-                   	mov rdi, free_var_47
   719 0000049D [7801000000000000] 
   720 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   720 000004A7 [273C010000000000] 
   721 000004AF E891290100              	call bind_primitive
   722                                  
   723                                  	; building closure for vector-ref
   724 000004B4 48BF-                   	mov rdi, free_var_48
   724 000004B6 [8001000000000000] 
   725 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   725 000004C0 [923C010000000000] 
   726 000004C8 E878290100              	call bind_primitive
   727                                  
   728                                  	; building closure for vector-set!
   729 000004CD 48BF-                   	mov rdi, free_var_49
   729 000004CF [8801000000000000] 
   730 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   730 000004D9 [EE3C010000000000] 
   731 000004E1 E85F290100              	call bind_primitive
   732                                  
   733                                  	; building closure for string-set!
   734 000004E6 48BF-                   	mov rdi, free_var_50
   734 000004E8 [9001000000000000] 
   735 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   735 000004F2 [583D010000000000] 
   736 000004FA E846290100              	call bind_primitive
   737                                  
   738                                  	; building closure for make-vector
   739 000004FF 48BF-                   	mov rdi, free_var_51
   739 00000501 [9801000000000000] 
   740 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   740 0000050B [CD3D010000000000] 
   741 00000513 E82D290100              	call bind_primitive
   742                                  
   743                                  	; building closure for make-string
   744 00000518 48BF-                   	mov rdi, free_var_52
   744 0000051A [A001000000000000] 
   745 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   745 00000524 [373E010000000000] 
   746 0000052C E814290100              	call bind_primitive
   747                                  
   748                                  	; building closure for numerator
   749 00000531 48BF-                   	mov rdi, free_var_53
   749 00000533 [A801000000000000] 
   750 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   750 0000053D [A93E010000000000] 
   751 00000545 E8FB280100              	call bind_primitive
   752                                  
   753                                  	; building closure for denominator
   754 0000054A 48BF-                   	mov rdi, free_var_54
   754 0000054C [B001000000000000] 
   755 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   755 00000556 [D63E010000000000] 
   756 0000055E E8E2280100              	call bind_primitive
   757                                  
   758                                  	; building closure for eq?
   759 00000563 48BF-                   	mov rdi, free_var_55
   759 00000565 [B801000000000000] 
   760 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   760 0000056F [033F010000000000] 
   761 00000577 E8C9280100              	call bind_primitive
   762                                  
   763 0000057C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   764 00000581 E82E230100              	call malloc
   765 00000586 50                      	push rax
   766 00000587 BF00000000              	mov rdi, 8 * 0	; new rib
   767 0000058C E823230100              	call malloc
   768 00000591 50                      	push rax
   769 00000592 BF08000000              	mov rdi, 8 * 1	; extended env
   770 00000597 E818230100              	call malloc
   771 0000059C 488B7D10                	mov rdi, ENV
   772 000005A0 BE00000000              	mov rsi, 0
   773 000005A5 BA01000000              	mov rdx, 1
   774                                  .L_lambda_simple_env_loop_4f29:	; ext_env[i + 1] <-- env[i]
   775 000005AA 4883FE00                	cmp rsi, 0
   776 000005AE 7410                    	je .L_lambda_simple_env_end_4f29
   777 000005B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
   778 000005B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
   779 000005B8 48FFC6                  	inc rsi
   780 000005BB 48FFC2                  	inc rdx
   781 000005BE EBEA                    	jmp .L_lambda_simple_env_loop_4f29
   782                                  .L_lambda_simple_env_end_4f29:
   783 000005C0 5B                      	pop rbx
   784 000005C1 BE00000000              	mov rsi, 0
   785                                  .L_lambda_simple_params_loop_4f29:	; copy params
   786 000005C6 4883FE00                	cmp rsi, 0
   787 000005CA 740E                    	je .L_lambda_simple_params_end_4f29
   788 000005CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   789 000005D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
   790 000005D5 48FFC6                  	inc rsi
   791 000005D8 EBEC                    	jmp .L_lambda_simple_params_loop_4f29
   792                                  .L_lambda_simple_params_end_4f29:
   793 000005DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   794 000005DD 4889C3                  	mov rbx, rax
   795 000005E0 58                      	pop rax
   796 000005E1 C60005                  	mov byte [rax], T_closure
   797 000005E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   798 000005E8 48C74009[F5050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f29
   799 000005F0 E9B7000000              	jmp .L_lambda_simple_end_4f29
   800                                  .L_lambda_simple_code_4f29:	; lambda-simple body
   801 000005F5 48837C241001            	cmp qword [rsp + 8 * 2], 1
   802 000005FB 740B                    	je .L_lambda_simple_arity_check_ok_4f29
   803 000005FD FF742410                	push qword [rsp + 8 * 2]
   804 00000601 6A01                    	push 1
   805 00000603 E965220100              	jmp L_error_incorrect_arity_simple
   806                                  .L_lambda_simple_arity_check_ok_4f29:
   807 00000608 C8000000                	enter 0, 0
   808 0000060C 488B4520                	mov rax, PARAM(0)
   809 00000610 50                      	push rax
   810 00000611 6A01                    	push 1
   811 00000613 488B0425[80000000]      	mov rax, qword [free_var_16]
   812                                  	assert_closure(rax)
    42 0000061B 803805              <1>  cmp byte [%1], %2
    43 0000061E 0F85103B0100        <1>  jne L_error_incorrect_type
   813 00000624 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   814 00000628 53                      	push rbx
   815 00000629 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   816 0000062D FFD3                    	call rbx
   817 0000062F 50                      	push rax
   818 00000630 6A01                    	push 1
   819 00000632 488B0425[80000000]      	mov rax, qword [free_var_16]
   820                                  	assert_closure(rax)
    42 0000063A 803805              <1>  cmp byte [%1], %2
    43 0000063D 0F85F13A0100        <1>  jne L_error_incorrect_type
   821 00000643 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   822 00000647 53                      	push rbx
   823 00000648 FF7508                  	push RET_ADDR
   824 0000064B 488B7D18                	mov rdi, COUNT
   825 0000064F 4883C703                	add rdi, 3
   826 00000653 48C1E703                	shl rdi, 3
   827 00000657 4801EF                  	add rdi, rbp
   828 0000065A 488B6D00                	mov rbp, OLD_RDP
   829 0000065E BE00000000              	mov rsi, 0
   830                                  .L_tc_recycle_frame_loop_5c9d:	 ; start recycle frame loop
   831 00000663 4883FE04                	cmp rsi, 4
   832 00000667 7427                    	je .L_tc_recycle_frame_done_5c9d
   833 00000669 B903000000              	mov rcx, 3
   834 0000066E 4829F1                  	sub rcx, rsi
   835 00000671 48C1E103                	shl rcx, 3
   836 00000675 4801E1                  	add rcx, rsp ; rcx is the address to move
   837 00000678 4889F3                  	mov rbx, rsi
   838 0000067B 48C1E303                	shl rbx, 3
   839 0000067F 48F7DB                  	neg rbx
   840 00000682 4801FB                  	add rbx, rdi ;rbx is the address to move to
   841 00000685 488B09                  	mov rcx, [rcx]
   842 00000688 48890B                  	mov [rbx], rcx
   843 0000068B 48FFC6                  	inc rsi
   844 0000068E EBD3                    	jmp .L_tc_recycle_frame_loop_5c9d
   845                                  .L_tc_recycle_frame_done_5c9d:	 ; end recycle frame loop
   846 00000690 BB03000000              	mov rbx, 3
   847 00000695 48C1E303                	shl rbx, 3
   848 00000699 48F7DB                  	neg rbx
   849 0000069C 4801FB                  	add rbx, rdi
   850 0000069F 4889DC                  	mov rsp, rbx
   851 000006A2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   852 000006A6 FFE3                    	jmp rbx
   853 000006A8 C9                      	leave
   854 000006A9 C21800                  	ret 8 * (2 + 1)
   855                                  .L_lambda_simple_end_4f29:	; new closure is in rax
   856 000006AC 48890425[C0010000]      	mov qword [free_var_56], rax
   857 000006B4 48B8-                   	mov rax, sob_void
   857 000006B6 [0000000000000000] 
   858                                  
   859 000006BE 4889C7                  	mov rdi, rax
   860 000006C1 E8FF210100              	call print_sexpr_if_not_void
   861                                  
   862 000006C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   863 000006CB E8E4210100              	call malloc
   864 000006D0 50                      	push rax
   865 000006D1 BF00000000              	mov rdi, 8 * 0	; new rib
   866 000006D6 E8D9210100              	call malloc
   867 000006DB 50                      	push rax
   868 000006DC BF08000000              	mov rdi, 8 * 1	; extended env
   869 000006E1 E8CE210100              	call malloc
   870 000006E6 488B7D10                	mov rdi, ENV
   871 000006EA BE00000000              	mov rsi, 0
   872 000006EF BA01000000              	mov rdx, 1
   873                                  .L_lambda_simple_env_loop_4f2a:	; ext_env[i + 1] <-- env[i]
   874 000006F4 4883FE00                	cmp rsi, 0
   875 000006F8 7410                    	je .L_lambda_simple_env_end_4f2a
   876 000006FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
   877 000006FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
   878 00000702 48FFC6                  	inc rsi
   879 00000705 48FFC2                  	inc rdx
   880 00000708 EBEA                    	jmp .L_lambda_simple_env_loop_4f2a
   881                                  .L_lambda_simple_env_end_4f2a:
   882 0000070A 5B                      	pop rbx
   883 0000070B BE00000000              	mov rsi, 0
   884                                  .L_lambda_simple_params_loop_4f2a:	; copy params
   885 00000710 4883FE00                	cmp rsi, 0
   886 00000714 740E                    	je .L_lambda_simple_params_end_4f2a
   887 00000716 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   888 0000071B 488914F3                	mov qword [rbx + 8 * rsi], rdx
   889 0000071F 48FFC6                  	inc rsi
   890 00000722 EBEC                    	jmp .L_lambda_simple_params_loop_4f2a
   891                                  .L_lambda_simple_params_end_4f2a:
   892 00000724 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   893 00000727 4889C3                  	mov rbx, rax
   894 0000072A 58                      	pop rax
   895 0000072B C60005                  	mov byte [rax], T_closure
   896 0000072E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   897 00000732 48C74009[3F070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f2a
   898 0000073A E9B7000000              	jmp .L_lambda_simple_end_4f2a
   899                                  .L_lambda_simple_code_4f2a:	; lambda-simple body
   900 0000073F 48837C241001            	cmp qword [rsp + 8 * 2], 1
   901 00000745 740B                    	je .L_lambda_simple_arity_check_ok_4f2a
   902 00000747 FF742410                	push qword [rsp + 8 * 2]
   903 0000074B 6A01                    	push 1
   904 0000074D E91B210100              	jmp L_error_incorrect_arity_simple
   905                                  .L_lambda_simple_arity_check_ok_4f2a:
   906 00000752 C8000000                	enter 0, 0
   907 00000756 488B4520                	mov rax, PARAM(0)
   908 0000075A 50                      	push rax
   909 0000075B 6A01                    	push 1
   910 0000075D 488B0425[88000000]      	mov rax, qword [free_var_17]
   911                                  	assert_closure(rax)
    42 00000765 803805              <1>  cmp byte [%1], %2
    43 00000768 0F85C6390100        <1>  jne L_error_incorrect_type
   912 0000076E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   913 00000772 53                      	push rbx
   914 00000773 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   915 00000777 FFD3                    	call rbx
   916 00000779 50                      	push rax
   917 0000077A 6A01                    	push 1
   918 0000077C 488B0425[80000000]      	mov rax, qword [free_var_16]
   919                                  	assert_closure(rax)
    42 00000784 803805              <1>  cmp byte [%1], %2
    43 00000787 0F85A7390100        <1>  jne L_error_incorrect_type
   920 0000078D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   921 00000791 53                      	push rbx
   922 00000792 FF7508                  	push RET_ADDR
   923 00000795 488B7D18                	mov rdi, COUNT
   924 00000799 4883C703                	add rdi, 3
   925 0000079D 48C1E703                	shl rdi, 3
   926 000007A1 4801EF                  	add rdi, rbp
   927 000007A4 488B6D00                	mov rbp, OLD_RDP
   928 000007A8 BE00000000              	mov rsi, 0
   929                                  .L_tc_recycle_frame_loop_5c9e:	 ; start recycle frame loop
   930 000007AD 4883FE04                	cmp rsi, 4
   931 000007B1 7427                    	je .L_tc_recycle_frame_done_5c9e
   932 000007B3 B903000000              	mov rcx, 3
   933 000007B8 4829F1                  	sub rcx, rsi
   934 000007BB 48C1E103                	shl rcx, 3
   935 000007BF 4801E1                  	add rcx, rsp ; rcx is the address to move
   936 000007C2 4889F3                  	mov rbx, rsi
   937 000007C5 48C1E303                	shl rbx, 3
   938 000007C9 48F7DB                  	neg rbx
   939 000007CC 4801FB                  	add rbx, rdi ;rbx is the address to move to
   940 000007CF 488B09                  	mov rcx, [rcx]
   941 000007D2 48890B                  	mov [rbx], rcx
   942 000007D5 48FFC6                  	inc rsi
   943 000007D8 EBD3                    	jmp .L_tc_recycle_frame_loop_5c9e
   944                                  .L_tc_recycle_frame_done_5c9e:	 ; end recycle frame loop
   945 000007DA BB03000000              	mov rbx, 3
   946 000007DF 48C1E303                	shl rbx, 3
   947 000007E3 48F7DB                  	neg rbx
   948 000007E6 4801FB                  	add rbx, rdi
   949 000007E9 4889DC                  	mov rsp, rbx
   950 000007EC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   951 000007F0 FFE3                    	jmp rbx
   952 000007F2 C9                      	leave
   953 000007F3 C21800                  	ret 8 * (2 + 1)
   954                                  .L_lambda_simple_end_4f2a:	; new closure is in rax
   955 000007F6 48890425[C8010000]      	mov qword [free_var_57], rax
   956 000007FE 48B8-                   	mov rax, sob_void
   956 00000800 [0000000000000000] 
   957                                  
   958 00000808 4889C7                  	mov rdi, rax
   959 0000080B E8B5200100              	call print_sexpr_if_not_void
   960                                  
   961 00000810 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   962 00000815 E89A200100              	call malloc
   963 0000081A 50                      	push rax
   964 0000081B BF00000000              	mov rdi, 8 * 0	; new rib
   965 00000820 E88F200100              	call malloc
   966 00000825 50                      	push rax
   967 00000826 BF08000000              	mov rdi, 8 * 1	; extended env
   968 0000082B E884200100              	call malloc
   969 00000830 488B7D10                	mov rdi, ENV
   970 00000834 BE00000000              	mov rsi, 0
   971 00000839 BA01000000              	mov rdx, 1
   972                                  .L_lambda_simple_env_loop_4f2b:	; ext_env[i + 1] <-- env[i]
   973 0000083E 4883FE00                	cmp rsi, 0
   974 00000842 7410                    	je .L_lambda_simple_env_end_4f2b
   975 00000844 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
   976 00000848 48890CD0                	mov qword [rax + 8 * rdx], rcx
   977 0000084C 48FFC6                  	inc rsi
   978 0000084F 48FFC2                  	inc rdx
   979 00000852 EBEA                    	jmp .L_lambda_simple_env_loop_4f2b
   980                                  .L_lambda_simple_env_end_4f2b:
   981 00000854 5B                      	pop rbx
   982 00000855 BE00000000              	mov rsi, 0
   983                                  .L_lambda_simple_params_loop_4f2b:	; copy params
   984 0000085A 4883FE00                	cmp rsi, 0
   985 0000085E 740E                    	je .L_lambda_simple_params_end_4f2b
   986 00000860 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   987 00000865 488914F3                	mov qword [rbx + 8 * rsi], rdx
   988 00000869 48FFC6                  	inc rsi
   989 0000086C EBEC                    	jmp .L_lambda_simple_params_loop_4f2b
   990                                  .L_lambda_simple_params_end_4f2b:
   991 0000086E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   992 00000871 4889C3                  	mov rbx, rax
   993 00000874 58                      	pop rax
   994 00000875 C60005                  	mov byte [rax], T_closure
   995 00000878 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   996 0000087C 48C74009[89080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f2b
   997 00000884 E9B7000000              	jmp .L_lambda_simple_end_4f2b
   998                                  .L_lambda_simple_code_4f2b:	; lambda-simple body
   999 00000889 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1000 0000088F 740B                    	je .L_lambda_simple_arity_check_ok_4f2b
  1001 00000891 FF742410                	push qword [rsp + 8 * 2]
  1002 00000895 6A01                    	push 1
  1003 00000897 E9D11F0100              	jmp L_error_incorrect_arity_simple
  1004                                  .L_lambda_simple_arity_check_ok_4f2b:
  1005 0000089C C8000000                	enter 0, 0
  1006 000008A0 488B4520                	mov rax, PARAM(0)
  1007 000008A4 50                      	push rax
  1008 000008A5 6A01                    	push 1
  1009 000008A7 488B0425[80000000]      	mov rax, qword [free_var_16]
  1010                                  	assert_closure(rax)
    42 000008AF 803805              <1>  cmp byte [%1], %2
    43 000008B2 0F857C380100        <1>  jne L_error_incorrect_type
  1011 000008B8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1012 000008BC 53                      	push rbx
  1013 000008BD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1014 000008C1 FFD3                    	call rbx
  1015 000008C3 50                      	push rax
  1016 000008C4 6A01                    	push 1
  1017 000008C6 488B0425[88000000]      	mov rax, qword [free_var_17]
  1018                                  	assert_closure(rax)
    42 000008CE 803805              <1>  cmp byte [%1], %2
    43 000008D1 0F855D380100        <1>  jne L_error_incorrect_type
  1019 000008D7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1020 000008DB 53                      	push rbx
  1021 000008DC FF7508                  	push RET_ADDR
  1022 000008DF 488B7D18                	mov rdi, COUNT
  1023 000008E3 4883C703                	add rdi, 3
  1024 000008E7 48C1E703                	shl rdi, 3
  1025 000008EB 4801EF                  	add rdi, rbp
  1026 000008EE 488B6D00                	mov rbp, OLD_RDP
  1027 000008F2 BE00000000              	mov rsi, 0
  1028                                  .L_tc_recycle_frame_loop_5c9f:	 ; start recycle frame loop
  1029 000008F7 4883FE04                	cmp rsi, 4
  1030 000008FB 7427                    	je .L_tc_recycle_frame_done_5c9f
  1031 000008FD B903000000              	mov rcx, 3
  1032 00000902 4829F1                  	sub rcx, rsi
  1033 00000905 48C1E103                	shl rcx, 3
  1034 00000909 4801E1                  	add rcx, rsp ; rcx is the address to move
  1035 0000090C 4889F3                  	mov rbx, rsi
  1036 0000090F 48C1E303                	shl rbx, 3
  1037 00000913 48F7DB                  	neg rbx
  1038 00000916 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1039 00000919 488B09                  	mov rcx, [rcx]
  1040 0000091C 48890B                  	mov [rbx], rcx
  1041 0000091F 48FFC6                  	inc rsi
  1042 00000922 EBD3                    	jmp .L_tc_recycle_frame_loop_5c9f
  1043                                  .L_tc_recycle_frame_done_5c9f:	 ; end recycle frame loop
  1044 00000924 BB03000000              	mov rbx, 3
  1045 00000929 48C1E303                	shl rbx, 3
  1046 0000092D 48F7DB                  	neg rbx
  1047 00000930 4801FB                  	add rbx, rdi
  1048 00000933 4889DC                  	mov rsp, rbx
  1049 00000936 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1050 0000093A FFE3                    	jmp rbx
  1051 0000093C C9                      	leave
  1052 0000093D C21800                  	ret 8 * (2 + 1)
  1053                                  .L_lambda_simple_end_4f2b:	; new closure is in rax
  1054 00000940 48890425[D0010000]      	mov qword [free_var_58], rax
  1055 00000948 48B8-                   	mov rax, sob_void
  1055 0000094A [0000000000000000] 
  1056                                  
  1057 00000952 4889C7                  	mov rdi, rax
  1058 00000955 E86B1F0100              	call print_sexpr_if_not_void
  1059                                  
  1060 0000095A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1061 0000095F E8501F0100              	call malloc
  1062 00000964 50                      	push rax
  1063 00000965 BF00000000              	mov rdi, 8 * 0	; new rib
  1064 0000096A E8451F0100              	call malloc
  1065 0000096F 50                      	push rax
  1066 00000970 BF08000000              	mov rdi, 8 * 1	; extended env
  1067 00000975 E83A1F0100              	call malloc
  1068 0000097A 488B7D10                	mov rdi, ENV
  1069 0000097E BE00000000              	mov rsi, 0
  1070 00000983 BA01000000              	mov rdx, 1
  1071                                  .L_lambda_simple_env_loop_4f2c:	; ext_env[i + 1] <-- env[i]
  1072 00000988 4883FE00                	cmp rsi, 0
  1073 0000098C 7410                    	je .L_lambda_simple_env_end_4f2c
  1074 0000098E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  1075 00000992 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1076 00000996 48FFC6                  	inc rsi
  1077 00000999 48FFC2                  	inc rdx
  1078 0000099C EBEA                    	jmp .L_lambda_simple_env_loop_4f2c
  1079                                  .L_lambda_simple_env_end_4f2c:
  1080 0000099E 5B                      	pop rbx
  1081 0000099F BE00000000              	mov rsi, 0
  1082                                  .L_lambda_simple_params_loop_4f2c:	; copy params
  1083 000009A4 4883FE00                	cmp rsi, 0
  1084 000009A8 740E                    	je .L_lambda_simple_params_end_4f2c
  1085 000009AA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1086 000009AF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1087 000009B3 48FFC6                  	inc rsi
  1088 000009B6 EBEC                    	jmp .L_lambda_simple_params_loop_4f2c
  1089                                  .L_lambda_simple_params_end_4f2c:
  1090 000009B8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1091 000009BB 4889C3                  	mov rbx, rax
  1092 000009BE 58                      	pop rax
  1093 000009BF C60005                  	mov byte [rax], T_closure
  1094 000009C2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1095 000009C6 48C74009[D3090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f2c
  1096 000009CE E9B7000000              	jmp .L_lambda_simple_end_4f2c
  1097                                  .L_lambda_simple_code_4f2c:	; lambda-simple body
  1098 000009D3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1099 000009D9 740B                    	je .L_lambda_simple_arity_check_ok_4f2c
  1100 000009DB FF742410                	push qword [rsp + 8 * 2]
  1101 000009DF 6A01                    	push 1
  1102 000009E1 E9871E0100              	jmp L_error_incorrect_arity_simple
  1103                                  .L_lambda_simple_arity_check_ok_4f2c:
  1104 000009E6 C8000000                	enter 0, 0
  1105 000009EA 488B4520                	mov rax, PARAM(0)
  1106 000009EE 50                      	push rax
  1107 000009EF 6A01                    	push 1
  1108 000009F1 488B0425[88000000]      	mov rax, qword [free_var_17]
  1109                                  	assert_closure(rax)
    42 000009F9 803805              <1>  cmp byte [%1], %2
    43 000009FC 0F8532370100        <1>  jne L_error_incorrect_type
  1110 00000A02 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1111 00000A06 53                      	push rbx
  1112 00000A07 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1113 00000A0B FFD3                    	call rbx
  1114 00000A0D 50                      	push rax
  1115 00000A0E 6A01                    	push 1
  1116 00000A10 488B0425[88000000]      	mov rax, qword [free_var_17]
  1117                                  	assert_closure(rax)
    42 00000A18 803805              <1>  cmp byte [%1], %2
    43 00000A1B 0F8513370100        <1>  jne L_error_incorrect_type
  1118 00000A21 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1119 00000A25 53                      	push rbx
  1120 00000A26 FF7508                  	push RET_ADDR
  1121 00000A29 488B7D18                	mov rdi, COUNT
  1122 00000A2D 4883C703                	add rdi, 3
  1123 00000A31 48C1E703                	shl rdi, 3
  1124 00000A35 4801EF                  	add rdi, rbp
  1125 00000A38 488B6D00                	mov rbp, OLD_RDP
  1126 00000A3C BE00000000              	mov rsi, 0
  1127                                  .L_tc_recycle_frame_loop_5ca0:	 ; start recycle frame loop
  1128 00000A41 4883FE04                	cmp rsi, 4
  1129 00000A45 7427                    	je .L_tc_recycle_frame_done_5ca0
  1130 00000A47 B903000000              	mov rcx, 3
  1131 00000A4C 4829F1                  	sub rcx, rsi
  1132 00000A4F 48C1E103                	shl rcx, 3
  1133 00000A53 4801E1                  	add rcx, rsp ; rcx is the address to move
  1134 00000A56 4889F3                  	mov rbx, rsi
  1135 00000A59 48C1E303                	shl rbx, 3
  1136 00000A5D 48F7DB                  	neg rbx
  1137 00000A60 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1138 00000A63 488B09                  	mov rcx, [rcx]
  1139 00000A66 48890B                  	mov [rbx], rcx
  1140 00000A69 48FFC6                  	inc rsi
  1141 00000A6C EBD3                    	jmp .L_tc_recycle_frame_loop_5ca0
  1142                                  .L_tc_recycle_frame_done_5ca0:	 ; end recycle frame loop
  1143 00000A6E BB03000000              	mov rbx, 3
  1144 00000A73 48C1E303                	shl rbx, 3
  1145 00000A77 48F7DB                  	neg rbx
  1146 00000A7A 4801FB                  	add rbx, rdi
  1147 00000A7D 4889DC                  	mov rsp, rbx
  1148 00000A80 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1149 00000A84 FFE3                    	jmp rbx
  1150 00000A86 C9                      	leave
  1151 00000A87 C21800                  	ret 8 * (2 + 1)
  1152                                  .L_lambda_simple_end_4f2c:	; new closure is in rax
  1153 00000A8A 48890425[D8010000]      	mov qword [free_var_59], rax
  1154 00000A92 48B8-                   	mov rax, sob_void
  1154 00000A94 [0000000000000000] 
  1155                                  
  1156 00000A9C 4889C7                  	mov rdi, rax
  1157 00000A9F E8211E0100              	call print_sexpr_if_not_void
  1158                                  
  1159 00000AA4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1160 00000AA9 E8061E0100              	call malloc
  1161 00000AAE 50                      	push rax
  1162 00000AAF BF00000000              	mov rdi, 8 * 0	; new rib
  1163 00000AB4 E8FB1D0100              	call malloc
  1164 00000AB9 50                      	push rax
  1165 00000ABA BF08000000              	mov rdi, 8 * 1	; extended env
  1166 00000ABF E8F01D0100              	call malloc
  1167 00000AC4 488B7D10                	mov rdi, ENV
  1168 00000AC8 BE00000000              	mov rsi, 0
  1169 00000ACD BA01000000              	mov rdx, 1
  1170                                  .L_lambda_simple_env_loop_4f2d:	; ext_env[i + 1] <-- env[i]
  1171 00000AD2 4883FE00                	cmp rsi, 0
  1172 00000AD6 7410                    	je .L_lambda_simple_env_end_4f2d
  1173 00000AD8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  1174 00000ADC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1175 00000AE0 48FFC6                  	inc rsi
  1176 00000AE3 48FFC2                  	inc rdx
  1177 00000AE6 EBEA                    	jmp .L_lambda_simple_env_loop_4f2d
  1178                                  .L_lambda_simple_env_end_4f2d:
  1179 00000AE8 5B                      	pop rbx
  1180 00000AE9 BE00000000              	mov rsi, 0
  1181                                  .L_lambda_simple_params_loop_4f2d:	; copy params
  1182 00000AEE 4883FE00                	cmp rsi, 0
  1183 00000AF2 740E                    	je .L_lambda_simple_params_end_4f2d
  1184 00000AF4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1185 00000AF9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1186 00000AFD 48FFC6                  	inc rsi
  1187 00000B00 EBEC                    	jmp .L_lambda_simple_params_loop_4f2d
  1188                                  .L_lambda_simple_params_end_4f2d:
  1189 00000B02 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1190 00000B05 4889C3                  	mov rbx, rax
  1191 00000B08 58                      	pop rax
  1192 00000B09 C60005                  	mov byte [rax], T_closure
  1193 00000B0C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1194 00000B10 48C74009[1D0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f2d
  1195 00000B18 E9B7000000              	jmp .L_lambda_simple_end_4f2d
  1196                                  .L_lambda_simple_code_4f2d:	; lambda-simple body
  1197 00000B1D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1198 00000B23 740B                    	je .L_lambda_simple_arity_check_ok_4f2d
  1199 00000B25 FF742410                	push qword [rsp + 8 * 2]
  1200 00000B29 6A01                    	push 1
  1201 00000B2B E93D1D0100              	jmp L_error_incorrect_arity_simple
  1202                                  .L_lambda_simple_arity_check_ok_4f2d:
  1203 00000B30 C8000000                	enter 0, 0
  1204 00000B34 488B4520                	mov rax, PARAM(0)
  1205 00000B38 50                      	push rax
  1206 00000B39 6A01                    	push 1
  1207 00000B3B 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1208                                  	assert_closure(rax)
    42 00000B43 803805              <1>  cmp byte [%1], %2
    43 00000B46 0F85E8350100        <1>  jne L_error_incorrect_type
  1209 00000B4C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1210 00000B50 53                      	push rbx
  1211 00000B51 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1212 00000B55 FFD3                    	call rbx
  1213 00000B57 50                      	push rax
  1214 00000B58 6A01                    	push 1
  1215 00000B5A 488B0425[80000000]      	mov rax, qword [free_var_16]
  1216                                  	assert_closure(rax)
    42 00000B62 803805              <1>  cmp byte [%1], %2
    43 00000B65 0F85C9350100        <1>  jne L_error_incorrect_type
  1217 00000B6B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1218 00000B6F 53                      	push rbx
  1219 00000B70 FF7508                  	push RET_ADDR
  1220 00000B73 488B7D18                	mov rdi, COUNT
  1221 00000B77 4883C703                	add rdi, 3
  1222 00000B7B 48C1E703                	shl rdi, 3
  1223 00000B7F 4801EF                  	add rdi, rbp
  1224 00000B82 488B6D00                	mov rbp, OLD_RDP
  1225 00000B86 BE00000000              	mov rsi, 0
  1226                                  .L_tc_recycle_frame_loop_5ca1:	 ; start recycle frame loop
  1227 00000B8B 4883FE04                	cmp rsi, 4
  1228 00000B8F 7427                    	je .L_tc_recycle_frame_done_5ca1
  1229 00000B91 B903000000              	mov rcx, 3
  1230 00000B96 4829F1                  	sub rcx, rsi
  1231 00000B99 48C1E103                	shl rcx, 3
  1232 00000B9D 4801E1                  	add rcx, rsp ; rcx is the address to move
  1233 00000BA0 4889F3                  	mov rbx, rsi
  1234 00000BA3 48C1E303                	shl rbx, 3
  1235 00000BA7 48F7DB                  	neg rbx
  1236 00000BAA 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1237 00000BAD 488B09                  	mov rcx, [rcx]
  1238 00000BB0 48890B                  	mov [rbx], rcx
  1239 00000BB3 48FFC6                  	inc rsi
  1240 00000BB6 EBD3                    	jmp .L_tc_recycle_frame_loop_5ca1
  1241                                  .L_tc_recycle_frame_done_5ca1:	 ; end recycle frame loop
  1242 00000BB8 BB03000000              	mov rbx, 3
  1243 00000BBD 48C1E303                	shl rbx, 3
  1244 00000BC1 48F7DB                  	neg rbx
  1245 00000BC4 4801FB                  	add rbx, rdi
  1246 00000BC7 4889DC                  	mov rsp, rbx
  1247 00000BCA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1248 00000BCE FFE3                    	jmp rbx
  1249 00000BD0 C9                      	leave
  1250 00000BD1 C21800                  	ret 8 * (2 + 1)
  1251                                  .L_lambda_simple_end_4f2d:	; new closure is in rax
  1252 00000BD4 48890425[E0010000]      	mov qword [free_var_60], rax
  1253 00000BDC 48B8-                   	mov rax, sob_void
  1253 00000BDE [0000000000000000] 
  1254                                  
  1255 00000BE6 4889C7                  	mov rdi, rax
  1256 00000BE9 E8D71C0100              	call print_sexpr_if_not_void
  1257                                  
  1258 00000BEE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1259 00000BF3 E8BC1C0100              	call malloc
  1260 00000BF8 50                      	push rax
  1261 00000BF9 BF00000000              	mov rdi, 8 * 0	; new rib
  1262 00000BFE E8B11C0100              	call malloc
  1263 00000C03 50                      	push rax
  1264 00000C04 BF08000000              	mov rdi, 8 * 1	; extended env
  1265 00000C09 E8A61C0100              	call malloc
  1266 00000C0E 488B7D10                	mov rdi, ENV
  1267 00000C12 BE00000000              	mov rsi, 0
  1268 00000C17 BA01000000              	mov rdx, 1
  1269                                  .L_lambda_simple_env_loop_4f2e:	; ext_env[i + 1] <-- env[i]
  1270 00000C1C 4883FE00                	cmp rsi, 0
  1271 00000C20 7410                    	je .L_lambda_simple_env_end_4f2e
  1272 00000C22 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  1273 00000C26 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1274 00000C2A 48FFC6                  	inc rsi
  1275 00000C2D 48FFC2                  	inc rdx
  1276 00000C30 EBEA                    	jmp .L_lambda_simple_env_loop_4f2e
  1277                                  .L_lambda_simple_env_end_4f2e:
  1278 00000C32 5B                      	pop rbx
  1279 00000C33 BE00000000              	mov rsi, 0
  1280                                  .L_lambda_simple_params_loop_4f2e:	; copy params
  1281 00000C38 4883FE00                	cmp rsi, 0
  1282 00000C3C 740E                    	je .L_lambda_simple_params_end_4f2e
  1283 00000C3E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1284 00000C43 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1285 00000C47 48FFC6                  	inc rsi
  1286 00000C4A EBEC                    	jmp .L_lambda_simple_params_loop_4f2e
  1287                                  .L_lambda_simple_params_end_4f2e:
  1288 00000C4C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1289 00000C4F 4889C3                  	mov rbx, rax
  1290 00000C52 58                      	pop rax
  1291 00000C53 C60005                  	mov byte [rax], T_closure
  1292 00000C56 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1293 00000C5A 48C74009[670C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f2e
  1294 00000C62 E9B7000000              	jmp .L_lambda_simple_end_4f2e
  1295                                  .L_lambda_simple_code_4f2e:	; lambda-simple body
  1296 00000C67 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1297 00000C6D 740B                    	je .L_lambda_simple_arity_check_ok_4f2e
  1298 00000C6F FF742410                	push qword [rsp + 8 * 2]
  1299 00000C73 6A01                    	push 1
  1300 00000C75 E9F31B0100              	jmp L_error_incorrect_arity_simple
  1301                                  .L_lambda_simple_arity_check_ok_4f2e:
  1302 00000C7A C8000000                	enter 0, 0
  1303 00000C7E 488B4520                	mov rax, PARAM(0)
  1304 00000C82 50                      	push rax
  1305 00000C83 6A01                    	push 1
  1306 00000C85 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1307                                  	assert_closure(rax)
    42 00000C8D 803805              <1>  cmp byte [%1], %2
    43 00000C90 0F859E340100        <1>  jne L_error_incorrect_type
  1308 00000C96 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1309 00000C9A 53                      	push rbx
  1310 00000C9B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1311 00000C9F FFD3                    	call rbx
  1312 00000CA1 50                      	push rax
  1313 00000CA2 6A01                    	push 1
  1314 00000CA4 488B0425[80000000]      	mov rax, qword [free_var_16]
  1315                                  	assert_closure(rax)
    42 00000CAC 803805              <1>  cmp byte [%1], %2
    43 00000CAF 0F857F340100        <1>  jne L_error_incorrect_type
  1316 00000CB5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1317 00000CB9 53                      	push rbx
  1318 00000CBA FF7508                  	push RET_ADDR
  1319 00000CBD 488B7D18                	mov rdi, COUNT
  1320 00000CC1 4883C703                	add rdi, 3
  1321 00000CC5 48C1E703                	shl rdi, 3
  1322 00000CC9 4801EF                  	add rdi, rbp
  1323 00000CCC 488B6D00                	mov rbp, OLD_RDP
  1324 00000CD0 BE00000000              	mov rsi, 0
  1325                                  .L_tc_recycle_frame_loop_5ca2:	 ; start recycle frame loop
  1326 00000CD5 4883FE04                	cmp rsi, 4
  1327 00000CD9 7427                    	je .L_tc_recycle_frame_done_5ca2
  1328 00000CDB B903000000              	mov rcx, 3
  1329 00000CE0 4829F1                  	sub rcx, rsi
  1330 00000CE3 48C1E103                	shl rcx, 3
  1331 00000CE7 4801E1                  	add rcx, rsp ; rcx is the address to move
  1332 00000CEA 4889F3                  	mov rbx, rsi
  1333 00000CED 48C1E303                	shl rbx, 3
  1334 00000CF1 48F7DB                  	neg rbx
  1335 00000CF4 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1336 00000CF7 488B09                  	mov rcx, [rcx]
  1337 00000CFA 48890B                  	mov [rbx], rcx
  1338 00000CFD 48FFC6                  	inc rsi
  1339 00000D00 EBD3                    	jmp .L_tc_recycle_frame_loop_5ca2
  1340                                  .L_tc_recycle_frame_done_5ca2:	 ; end recycle frame loop
  1341 00000D02 BB03000000              	mov rbx, 3
  1342 00000D07 48C1E303                	shl rbx, 3
  1343 00000D0B 48F7DB                  	neg rbx
  1344 00000D0E 4801FB                  	add rbx, rdi
  1345 00000D11 4889DC                  	mov rsp, rbx
  1346 00000D14 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1347 00000D18 FFE3                    	jmp rbx
  1348 00000D1A C9                      	leave
  1349 00000D1B C21800                  	ret 8 * (2 + 1)
  1350                                  .L_lambda_simple_end_4f2e:	; new closure is in rax
  1351 00000D1E 48890425[E8010000]      	mov qword [free_var_61], rax
  1352 00000D26 48B8-                   	mov rax, sob_void
  1352 00000D28 [0000000000000000] 
  1353                                  
  1354 00000D30 4889C7                  	mov rdi, rax
  1355 00000D33 E88D1B0100              	call print_sexpr_if_not_void
  1356                                  
  1357 00000D38 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1358 00000D3D E8721B0100              	call malloc
  1359 00000D42 50                      	push rax
  1360 00000D43 BF00000000              	mov rdi, 8 * 0	; new rib
  1361 00000D48 E8671B0100              	call malloc
  1362 00000D4D 50                      	push rax
  1363 00000D4E BF08000000              	mov rdi, 8 * 1	; extended env
  1364 00000D53 E85C1B0100              	call malloc
  1365 00000D58 488B7D10                	mov rdi, ENV
  1366 00000D5C BE00000000              	mov rsi, 0
  1367 00000D61 BA01000000              	mov rdx, 1
  1368                                  .L_lambda_simple_env_loop_4f2f:	; ext_env[i + 1] <-- env[i]
  1369 00000D66 4883FE00                	cmp rsi, 0
  1370 00000D6A 7410                    	je .L_lambda_simple_env_end_4f2f
  1371 00000D6C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  1372 00000D70 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1373 00000D74 48FFC6                  	inc rsi
  1374 00000D77 48FFC2                  	inc rdx
  1375 00000D7A EBEA                    	jmp .L_lambda_simple_env_loop_4f2f
  1376                                  .L_lambda_simple_env_end_4f2f:
  1377 00000D7C 5B                      	pop rbx
  1378 00000D7D BE00000000              	mov rsi, 0
  1379                                  .L_lambda_simple_params_loop_4f2f:	; copy params
  1380 00000D82 4883FE00                	cmp rsi, 0
  1381 00000D86 740E                    	je .L_lambda_simple_params_end_4f2f
  1382 00000D88 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1383 00000D8D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1384 00000D91 48FFC6                  	inc rsi
  1385 00000D94 EBEC                    	jmp .L_lambda_simple_params_loop_4f2f
  1386                                  .L_lambda_simple_params_end_4f2f:
  1387 00000D96 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1388 00000D99 4889C3                  	mov rbx, rax
  1389 00000D9C 58                      	pop rax
  1390 00000D9D C60005                  	mov byte [rax], T_closure
  1391 00000DA0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1392 00000DA4 48C74009[B10D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f2f
  1393 00000DAC E9B7000000              	jmp .L_lambda_simple_end_4f2f
  1394                                  .L_lambda_simple_code_4f2f:	; lambda-simple body
  1395 00000DB1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1396 00000DB7 740B                    	je .L_lambda_simple_arity_check_ok_4f2f
  1397 00000DB9 FF742410                	push qword [rsp + 8 * 2]
  1398 00000DBD 6A01                    	push 1
  1399 00000DBF E9A91A0100              	jmp L_error_incorrect_arity_simple
  1400                                  .L_lambda_simple_arity_check_ok_4f2f:
  1401 00000DC4 C8000000                	enter 0, 0
  1402 00000DC8 488B4520                	mov rax, PARAM(0)
  1403 00000DCC 50                      	push rax
  1404 00000DCD 6A01                    	push 1
  1405 00000DCF 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1406                                  	assert_closure(rax)
    42 00000DD7 803805              <1>  cmp byte [%1], %2
    43 00000DDA 0F8554330100        <1>  jne L_error_incorrect_type
  1407 00000DE0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1408 00000DE4 53                      	push rbx
  1409 00000DE5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1410 00000DE9 FFD3                    	call rbx
  1411 00000DEB 50                      	push rax
  1412 00000DEC 6A01                    	push 1
  1413 00000DEE 488B0425[80000000]      	mov rax, qword [free_var_16]
  1414                                  	assert_closure(rax)
    42 00000DF6 803805              <1>  cmp byte [%1], %2
    43 00000DF9 0F8535330100        <1>  jne L_error_incorrect_type
  1415 00000DFF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1416 00000E03 53                      	push rbx
  1417 00000E04 FF7508                  	push RET_ADDR
  1418 00000E07 488B7D18                	mov rdi, COUNT
  1419 00000E0B 4883C703                	add rdi, 3
  1420 00000E0F 48C1E703                	shl rdi, 3
  1421 00000E13 4801EF                  	add rdi, rbp
  1422 00000E16 488B6D00                	mov rbp, OLD_RDP
  1423 00000E1A BE00000000              	mov rsi, 0
  1424                                  .L_tc_recycle_frame_loop_5ca3:	 ; start recycle frame loop
  1425 00000E1F 4883FE04                	cmp rsi, 4
  1426 00000E23 7427                    	je .L_tc_recycle_frame_done_5ca3
  1427 00000E25 B903000000              	mov rcx, 3
  1428 00000E2A 4829F1                  	sub rcx, rsi
  1429 00000E2D 48C1E103                	shl rcx, 3
  1430 00000E31 4801E1                  	add rcx, rsp ; rcx is the address to move
  1431 00000E34 4889F3                  	mov rbx, rsi
  1432 00000E37 48C1E303                	shl rbx, 3
  1433 00000E3B 48F7DB                  	neg rbx
  1434 00000E3E 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1435 00000E41 488B09                  	mov rcx, [rcx]
  1436 00000E44 48890B                  	mov [rbx], rcx
  1437 00000E47 48FFC6                  	inc rsi
  1438 00000E4A EBD3                    	jmp .L_tc_recycle_frame_loop_5ca3
  1439                                  .L_tc_recycle_frame_done_5ca3:	 ; end recycle frame loop
  1440 00000E4C BB03000000              	mov rbx, 3
  1441 00000E51 48C1E303                	shl rbx, 3
  1442 00000E55 48F7DB                  	neg rbx
  1443 00000E58 4801FB                  	add rbx, rdi
  1444 00000E5B 4889DC                  	mov rsp, rbx
  1445 00000E5E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1446 00000E62 FFE3                    	jmp rbx
  1447 00000E64 C9                      	leave
  1448 00000E65 C21800                  	ret 8 * (2 + 1)
  1449                                  .L_lambda_simple_end_4f2f:	; new closure is in rax
  1450 00000E68 48890425[F0010000]      	mov qword [free_var_62], rax
  1451 00000E70 48B8-                   	mov rax, sob_void
  1451 00000E72 [0000000000000000] 
  1452                                  
  1453 00000E7A 4889C7                  	mov rdi, rax
  1454 00000E7D E8431A0100              	call print_sexpr_if_not_void
  1455                                  
  1456 00000E82 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1457 00000E87 E8281A0100              	call malloc
  1458 00000E8C 50                      	push rax
  1459 00000E8D BF00000000              	mov rdi, 8 * 0	; new rib
  1460 00000E92 E81D1A0100              	call malloc
  1461 00000E97 50                      	push rax
  1462 00000E98 BF08000000              	mov rdi, 8 * 1	; extended env
  1463 00000E9D E8121A0100              	call malloc
  1464 00000EA2 488B7D10                	mov rdi, ENV
  1465 00000EA6 BE00000000              	mov rsi, 0
  1466 00000EAB BA01000000              	mov rdx, 1
  1467                                  .L_lambda_simple_env_loop_4f30:	; ext_env[i + 1] <-- env[i]
  1468 00000EB0 4883FE00                	cmp rsi, 0
  1469 00000EB4 7410                    	je .L_lambda_simple_env_end_4f30
  1470 00000EB6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  1471 00000EBA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1472 00000EBE 48FFC6                  	inc rsi
  1473 00000EC1 48FFC2                  	inc rdx
  1474 00000EC4 EBEA                    	jmp .L_lambda_simple_env_loop_4f30
  1475                                  .L_lambda_simple_env_end_4f30:
  1476 00000EC6 5B                      	pop rbx
  1477 00000EC7 BE00000000              	mov rsi, 0
  1478                                  .L_lambda_simple_params_loop_4f30:	; copy params
  1479 00000ECC 4883FE00                	cmp rsi, 0
  1480 00000ED0 740E                    	je .L_lambda_simple_params_end_4f30
  1481 00000ED2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1482 00000ED7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1483 00000EDB 48FFC6                  	inc rsi
  1484 00000EDE EBEC                    	jmp .L_lambda_simple_params_loop_4f30
  1485                                  .L_lambda_simple_params_end_4f30:
  1486 00000EE0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1487 00000EE3 4889C3                  	mov rbx, rax
  1488 00000EE6 58                      	pop rax
  1489 00000EE7 C60005                  	mov byte [rax], T_closure
  1490 00000EEA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1491 00000EEE 48C74009[FB0E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f30
  1492 00000EF6 E9B7000000              	jmp .L_lambda_simple_end_4f30
  1493                                  .L_lambda_simple_code_4f30:	; lambda-simple body
  1494 00000EFB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1495 00000F01 740B                    	je .L_lambda_simple_arity_check_ok_4f30
  1496 00000F03 FF742410                	push qword [rsp + 8 * 2]
  1497 00000F07 6A01                    	push 1
  1498 00000F09 E95F190100              	jmp L_error_incorrect_arity_simple
  1499                                  .L_lambda_simple_arity_check_ok_4f30:
  1500 00000F0E C8000000                	enter 0, 0
  1501 00000F12 488B4520                	mov rax, PARAM(0)
  1502 00000F16 50                      	push rax
  1503 00000F17 6A01                    	push 1
  1504 00000F19 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1505                                  	assert_closure(rax)
    42 00000F21 803805              <1>  cmp byte [%1], %2
    43 00000F24 0F850A320100        <1>  jne L_error_incorrect_type
  1506 00000F2A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1507 00000F2E 53                      	push rbx
  1508 00000F2F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1509 00000F33 FFD3                    	call rbx
  1510 00000F35 50                      	push rax
  1511 00000F36 6A01                    	push 1
  1512 00000F38 488B0425[80000000]      	mov rax, qword [free_var_16]
  1513                                  	assert_closure(rax)
    42 00000F40 803805              <1>  cmp byte [%1], %2
    43 00000F43 0F85EB310100        <1>  jne L_error_incorrect_type
  1514 00000F49 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1515 00000F4D 53                      	push rbx
  1516 00000F4E FF7508                  	push RET_ADDR
  1517 00000F51 488B7D18                	mov rdi, COUNT
  1518 00000F55 4883C703                	add rdi, 3
  1519 00000F59 48C1E703                	shl rdi, 3
  1520 00000F5D 4801EF                  	add rdi, rbp
  1521 00000F60 488B6D00                	mov rbp, OLD_RDP
  1522 00000F64 BE00000000              	mov rsi, 0
  1523                                  .L_tc_recycle_frame_loop_5ca4:	 ; start recycle frame loop
  1524 00000F69 4883FE04                	cmp rsi, 4
  1525 00000F6D 7427                    	je .L_tc_recycle_frame_done_5ca4
  1526 00000F6F B903000000              	mov rcx, 3
  1527 00000F74 4829F1                  	sub rcx, rsi
  1528 00000F77 48C1E103                	shl rcx, 3
  1529 00000F7B 4801E1                  	add rcx, rsp ; rcx is the address to move
  1530 00000F7E 4889F3                  	mov rbx, rsi
  1531 00000F81 48C1E303                	shl rbx, 3
  1532 00000F85 48F7DB                  	neg rbx
  1533 00000F88 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1534 00000F8B 488B09                  	mov rcx, [rcx]
  1535 00000F8E 48890B                  	mov [rbx], rcx
  1536 00000F91 48FFC6                  	inc rsi
  1537 00000F94 EBD3                    	jmp .L_tc_recycle_frame_loop_5ca4
  1538                                  .L_tc_recycle_frame_done_5ca4:	 ; end recycle frame loop
  1539 00000F96 BB03000000              	mov rbx, 3
  1540 00000F9B 48C1E303                	shl rbx, 3
  1541 00000F9F 48F7DB                  	neg rbx
  1542 00000FA2 4801FB                  	add rbx, rdi
  1543 00000FA5 4889DC                  	mov rsp, rbx
  1544 00000FA8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1545 00000FAC FFE3                    	jmp rbx
  1546 00000FAE C9                      	leave
  1547 00000FAF C21800                  	ret 8 * (2 + 1)
  1548                                  .L_lambda_simple_end_4f30:	; new closure is in rax
  1549 00000FB2 48890425[F8010000]      	mov qword [free_var_63], rax
  1550 00000FBA 48B8-                   	mov rax, sob_void
  1550 00000FBC [0000000000000000] 
  1551                                  
  1552 00000FC4 4889C7                  	mov rdi, rax
  1553 00000FC7 E8F9180100              	call print_sexpr_if_not_void
  1554                                  
  1555 00000FCC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1556 00000FD1 E8DE180100              	call malloc
  1557 00000FD6 50                      	push rax
  1558 00000FD7 BF00000000              	mov rdi, 8 * 0	; new rib
  1559 00000FDC E8D3180100              	call malloc
  1560 00000FE1 50                      	push rax
  1561 00000FE2 BF08000000              	mov rdi, 8 * 1	; extended env
  1562 00000FE7 E8C8180100              	call malloc
  1563 00000FEC 488B7D10                	mov rdi, ENV
  1564 00000FF0 BE00000000              	mov rsi, 0
  1565 00000FF5 BA01000000              	mov rdx, 1
  1566                                  .L_lambda_simple_env_loop_4f31:	; ext_env[i + 1] <-- env[i]
  1567 00000FFA 4883FE00                	cmp rsi, 0
  1568 00000FFE 7410                    	je .L_lambda_simple_env_end_4f31
  1569 00001000 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  1570 00001004 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1571 00001008 48FFC6                  	inc rsi
  1572 0000100B 48FFC2                  	inc rdx
  1573 0000100E EBEA                    	jmp .L_lambda_simple_env_loop_4f31
  1574                                  .L_lambda_simple_env_end_4f31:
  1575 00001010 5B                      	pop rbx
  1576 00001011 BE00000000              	mov rsi, 0
  1577                                  .L_lambda_simple_params_loop_4f31:	; copy params
  1578 00001016 4883FE00                	cmp rsi, 0
  1579 0000101A 740E                    	je .L_lambda_simple_params_end_4f31
  1580 0000101C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1581 00001021 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1582 00001025 48FFC6                  	inc rsi
  1583 00001028 EBEC                    	jmp .L_lambda_simple_params_loop_4f31
  1584                                  .L_lambda_simple_params_end_4f31:
  1585 0000102A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1586 0000102D 4889C3                  	mov rbx, rax
  1587 00001030 58                      	pop rax
  1588 00001031 C60005                  	mov byte [rax], T_closure
  1589 00001034 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1590 00001038 48C74009[45100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f31
  1591 00001040 E9B7000000              	jmp .L_lambda_simple_end_4f31
  1592                                  .L_lambda_simple_code_4f31:	; lambda-simple body
  1593 00001045 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1594 0000104B 740B                    	je .L_lambda_simple_arity_check_ok_4f31
  1595 0000104D FF742410                	push qword [rsp + 8 * 2]
  1596 00001051 6A01                    	push 1
  1597 00001053 E915180100              	jmp L_error_incorrect_arity_simple
  1598                                  .L_lambda_simple_arity_check_ok_4f31:
  1599 00001058 C8000000                	enter 0, 0
  1600 0000105C 488B4520                	mov rax, PARAM(0)
  1601 00001060 50                      	push rax
  1602 00001061 6A01                    	push 1
  1603 00001063 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1604                                  	assert_closure(rax)
    42 0000106B 803805              <1>  cmp byte [%1], %2
    43 0000106E 0F85C0300100        <1>  jne L_error_incorrect_type
  1605 00001074 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1606 00001078 53                      	push rbx
  1607 00001079 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1608 0000107D FFD3                    	call rbx
  1609 0000107F 50                      	push rax
  1610 00001080 6A01                    	push 1
  1611 00001082 488B0425[88000000]      	mov rax, qword [free_var_17]
  1612                                  	assert_closure(rax)
    42 0000108A 803805              <1>  cmp byte [%1], %2
    43 0000108D 0F85A1300100        <1>  jne L_error_incorrect_type
  1613 00001093 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1614 00001097 53                      	push rbx
  1615 00001098 FF7508                  	push RET_ADDR
  1616 0000109B 488B7D18                	mov rdi, COUNT
  1617 0000109F 4883C703                	add rdi, 3
  1618 000010A3 48C1E703                	shl rdi, 3
  1619 000010A7 4801EF                  	add rdi, rbp
  1620 000010AA 488B6D00                	mov rbp, OLD_RDP
  1621 000010AE BE00000000              	mov rsi, 0
  1622                                  .L_tc_recycle_frame_loop_5ca5:	 ; start recycle frame loop
  1623 000010B3 4883FE04                	cmp rsi, 4
  1624 000010B7 7427                    	je .L_tc_recycle_frame_done_5ca5
  1625 000010B9 B903000000              	mov rcx, 3
  1626 000010BE 4829F1                  	sub rcx, rsi
  1627 000010C1 48C1E103                	shl rcx, 3
  1628 000010C5 4801E1                  	add rcx, rsp ; rcx is the address to move
  1629 000010C8 4889F3                  	mov rbx, rsi
  1630 000010CB 48C1E303                	shl rbx, 3
  1631 000010CF 48F7DB                  	neg rbx
  1632 000010D2 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1633 000010D5 488B09                  	mov rcx, [rcx]
  1634 000010D8 48890B                  	mov [rbx], rcx
  1635 000010DB 48FFC6                  	inc rsi
  1636 000010DE EBD3                    	jmp .L_tc_recycle_frame_loop_5ca5
  1637                                  .L_tc_recycle_frame_done_5ca5:	 ; end recycle frame loop
  1638 000010E0 BB03000000              	mov rbx, 3
  1639 000010E5 48C1E303                	shl rbx, 3
  1640 000010E9 48F7DB                  	neg rbx
  1641 000010EC 4801FB                  	add rbx, rdi
  1642 000010EF 4889DC                  	mov rsp, rbx
  1643 000010F2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1644 000010F6 FFE3                    	jmp rbx
  1645 000010F8 C9                      	leave
  1646 000010F9 C21800                  	ret 8 * (2 + 1)
  1647                                  .L_lambda_simple_end_4f31:	; new closure is in rax
  1648 000010FC 48890425[00020000]      	mov qword [free_var_64], rax
  1649 00001104 48B8-                   	mov rax, sob_void
  1649 00001106 [0000000000000000] 
  1650                                  
  1651 0000110E 4889C7                  	mov rdi, rax
  1652 00001111 E8AF170100              	call print_sexpr_if_not_void
  1653                                  
  1654 00001116 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1655 0000111B E894170100              	call malloc
  1656 00001120 50                      	push rax
  1657 00001121 BF00000000              	mov rdi, 8 * 0	; new rib
  1658 00001126 E889170100              	call malloc
  1659 0000112B 50                      	push rax
  1660 0000112C BF08000000              	mov rdi, 8 * 1	; extended env
  1661 00001131 E87E170100              	call malloc
  1662 00001136 488B7D10                	mov rdi, ENV
  1663 0000113A BE00000000              	mov rsi, 0
  1664 0000113F BA01000000              	mov rdx, 1
  1665                                  .L_lambda_simple_env_loop_4f32:	; ext_env[i + 1] <-- env[i]
  1666 00001144 4883FE00                	cmp rsi, 0
  1667 00001148 7410                    	je .L_lambda_simple_env_end_4f32
  1668 0000114A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  1669 0000114E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1670 00001152 48FFC6                  	inc rsi
  1671 00001155 48FFC2                  	inc rdx
  1672 00001158 EBEA                    	jmp .L_lambda_simple_env_loop_4f32
  1673                                  .L_lambda_simple_env_end_4f32:
  1674 0000115A 5B                      	pop rbx
  1675 0000115B BE00000000              	mov rsi, 0
  1676                                  .L_lambda_simple_params_loop_4f32:	; copy params
  1677 00001160 4883FE00                	cmp rsi, 0
  1678 00001164 740E                    	je .L_lambda_simple_params_end_4f32
  1679 00001166 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1680 0000116B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1681 0000116F 48FFC6                  	inc rsi
  1682 00001172 EBEC                    	jmp .L_lambda_simple_params_loop_4f32
  1683                                  .L_lambda_simple_params_end_4f32:
  1684 00001174 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1685 00001177 4889C3                  	mov rbx, rax
  1686 0000117A 58                      	pop rax
  1687 0000117B C60005                  	mov byte [rax], T_closure
  1688 0000117E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1689 00001182 48C74009[8F110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f32
  1690 0000118A E9B7000000              	jmp .L_lambda_simple_end_4f32
  1691                                  .L_lambda_simple_code_4f32:	; lambda-simple body
  1692 0000118F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1693 00001195 740B                    	je .L_lambda_simple_arity_check_ok_4f32
  1694 00001197 FF742410                	push qword [rsp + 8 * 2]
  1695 0000119B 6A01                    	push 1
  1696 0000119D E9CB160100              	jmp L_error_incorrect_arity_simple
  1697                                  .L_lambda_simple_arity_check_ok_4f32:
  1698 000011A2 C8000000                	enter 0, 0
  1699 000011A6 488B4520                	mov rax, PARAM(0)
  1700 000011AA 50                      	push rax
  1701 000011AB 6A01                    	push 1
  1702 000011AD 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1703                                  	assert_closure(rax)
    42 000011B5 803805              <1>  cmp byte [%1], %2
    43 000011B8 0F85762F0100        <1>  jne L_error_incorrect_type
  1704 000011BE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1705 000011C2 53                      	push rbx
  1706 000011C3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1707 000011C7 FFD3                    	call rbx
  1708 000011C9 50                      	push rax
  1709 000011CA 6A01                    	push 1
  1710 000011CC 488B0425[88000000]      	mov rax, qword [free_var_17]
  1711                                  	assert_closure(rax)
    42 000011D4 803805              <1>  cmp byte [%1], %2
    43 000011D7 0F85572F0100        <1>  jne L_error_incorrect_type
  1712 000011DD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1713 000011E1 53                      	push rbx
  1714 000011E2 FF7508                  	push RET_ADDR
  1715 000011E5 488B7D18                	mov rdi, COUNT
  1716 000011E9 4883C703                	add rdi, 3
  1717 000011ED 48C1E703                	shl rdi, 3
  1718 000011F1 4801EF                  	add rdi, rbp
  1719 000011F4 488B6D00                	mov rbp, OLD_RDP
  1720 000011F8 BE00000000              	mov rsi, 0
  1721                                  .L_tc_recycle_frame_loop_5ca6:	 ; start recycle frame loop
  1722 000011FD 4883FE04                	cmp rsi, 4
  1723 00001201 7427                    	je .L_tc_recycle_frame_done_5ca6
  1724 00001203 B903000000              	mov rcx, 3
  1725 00001208 4829F1                  	sub rcx, rsi
  1726 0000120B 48C1E103                	shl rcx, 3
  1727 0000120F 4801E1                  	add rcx, rsp ; rcx is the address to move
  1728 00001212 4889F3                  	mov rbx, rsi
  1729 00001215 48C1E303                	shl rbx, 3
  1730 00001219 48F7DB                  	neg rbx
  1731 0000121C 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1732 0000121F 488B09                  	mov rcx, [rcx]
  1733 00001222 48890B                  	mov [rbx], rcx
  1734 00001225 48FFC6                  	inc rsi
  1735 00001228 EBD3                    	jmp .L_tc_recycle_frame_loop_5ca6
  1736                                  .L_tc_recycle_frame_done_5ca6:	 ; end recycle frame loop
  1737 0000122A BB03000000              	mov rbx, 3
  1738 0000122F 48C1E303                	shl rbx, 3
  1739 00001233 48F7DB                  	neg rbx
  1740 00001236 4801FB                  	add rbx, rdi
  1741 00001239 4889DC                  	mov rsp, rbx
  1742 0000123C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1743 00001240 FFE3                    	jmp rbx
  1744 00001242 C9                      	leave
  1745 00001243 C21800                  	ret 8 * (2 + 1)
  1746                                  .L_lambda_simple_end_4f32:	; new closure is in rax
  1747 00001246 48890425[08020000]      	mov qword [free_var_65], rax
  1748 0000124E 48B8-                   	mov rax, sob_void
  1748 00001250 [0000000000000000] 
  1749                                  
  1750 00001258 4889C7                  	mov rdi, rax
  1751 0000125B E865160100              	call print_sexpr_if_not_void
  1752                                  
  1753 00001260 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1754 00001265 E84A160100              	call malloc
  1755 0000126A 50                      	push rax
  1756 0000126B BF00000000              	mov rdi, 8 * 0	; new rib
  1757 00001270 E83F160100              	call malloc
  1758 00001275 50                      	push rax
  1759 00001276 BF08000000              	mov rdi, 8 * 1	; extended env
  1760 0000127B E834160100              	call malloc
  1761 00001280 488B7D10                	mov rdi, ENV
  1762 00001284 BE00000000              	mov rsi, 0
  1763 00001289 BA01000000              	mov rdx, 1
  1764                                  .L_lambda_simple_env_loop_4f33:	; ext_env[i + 1] <-- env[i]
  1765 0000128E 4883FE00                	cmp rsi, 0
  1766 00001292 7410                    	je .L_lambda_simple_env_end_4f33
  1767 00001294 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  1768 00001298 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1769 0000129C 48FFC6                  	inc rsi
  1770 0000129F 48FFC2                  	inc rdx
  1771 000012A2 EBEA                    	jmp .L_lambda_simple_env_loop_4f33
  1772                                  .L_lambda_simple_env_end_4f33:
  1773 000012A4 5B                      	pop rbx
  1774 000012A5 BE00000000              	mov rsi, 0
  1775                                  .L_lambda_simple_params_loop_4f33:	; copy params
  1776 000012AA 4883FE00                	cmp rsi, 0
  1777 000012AE 740E                    	je .L_lambda_simple_params_end_4f33
  1778 000012B0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1779 000012B5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1780 000012B9 48FFC6                  	inc rsi
  1781 000012BC EBEC                    	jmp .L_lambda_simple_params_loop_4f33
  1782                                  .L_lambda_simple_params_end_4f33:
  1783 000012BE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1784 000012C1 4889C3                  	mov rbx, rax
  1785 000012C4 58                      	pop rax
  1786 000012C5 C60005                  	mov byte [rax], T_closure
  1787 000012C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1788 000012CC 48C74009[D9120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f33
  1789 000012D4 E9B7000000              	jmp .L_lambda_simple_end_4f33
  1790                                  .L_lambda_simple_code_4f33:	; lambda-simple body
  1791 000012D9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1792 000012DF 740B                    	je .L_lambda_simple_arity_check_ok_4f33
  1793 000012E1 FF742410                	push qword [rsp + 8 * 2]
  1794 000012E5 6A01                    	push 1
  1795 000012E7 E981150100              	jmp L_error_incorrect_arity_simple
  1796                                  .L_lambda_simple_arity_check_ok_4f33:
  1797 000012EC C8000000                	enter 0, 0
  1798 000012F0 488B4520                	mov rax, PARAM(0)
  1799 000012F4 50                      	push rax
  1800 000012F5 6A01                    	push 1
  1801 000012F7 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1802                                  	assert_closure(rax)
    42 000012FF 803805              <1>  cmp byte [%1], %2
    43 00001302 0F852C2E0100        <1>  jne L_error_incorrect_type
  1803 00001308 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1804 0000130C 53                      	push rbx
  1805 0000130D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1806 00001311 FFD3                    	call rbx
  1807 00001313 50                      	push rax
  1808 00001314 6A01                    	push 1
  1809 00001316 488B0425[88000000]      	mov rax, qword [free_var_17]
  1810                                  	assert_closure(rax)
    42 0000131E 803805              <1>  cmp byte [%1], %2
    43 00001321 0F850D2E0100        <1>  jne L_error_incorrect_type
  1811 00001327 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1812 0000132B 53                      	push rbx
  1813 0000132C FF7508                  	push RET_ADDR
  1814 0000132F 488B7D18                	mov rdi, COUNT
  1815 00001333 4883C703                	add rdi, 3
  1816 00001337 48C1E703                	shl rdi, 3
  1817 0000133B 4801EF                  	add rdi, rbp
  1818 0000133E 488B6D00                	mov rbp, OLD_RDP
  1819 00001342 BE00000000              	mov rsi, 0
  1820                                  .L_tc_recycle_frame_loop_5ca7:	 ; start recycle frame loop
  1821 00001347 4883FE04                	cmp rsi, 4
  1822 0000134B 7427                    	je .L_tc_recycle_frame_done_5ca7
  1823 0000134D B903000000              	mov rcx, 3
  1824 00001352 4829F1                  	sub rcx, rsi
  1825 00001355 48C1E103                	shl rcx, 3
  1826 00001359 4801E1                  	add rcx, rsp ; rcx is the address to move
  1827 0000135C 4889F3                  	mov rbx, rsi
  1828 0000135F 48C1E303                	shl rbx, 3
  1829 00001363 48F7DB                  	neg rbx
  1830 00001366 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1831 00001369 488B09                  	mov rcx, [rcx]
  1832 0000136C 48890B                  	mov [rbx], rcx
  1833 0000136F 48FFC6                  	inc rsi
  1834 00001372 EBD3                    	jmp .L_tc_recycle_frame_loop_5ca7
  1835                                  .L_tc_recycle_frame_done_5ca7:	 ; end recycle frame loop
  1836 00001374 BB03000000              	mov rbx, 3
  1837 00001379 48C1E303                	shl rbx, 3
  1838 0000137D 48F7DB                  	neg rbx
  1839 00001380 4801FB                  	add rbx, rdi
  1840 00001383 4889DC                  	mov rsp, rbx
  1841 00001386 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1842 0000138A FFE3                    	jmp rbx
  1843 0000138C C9                      	leave
  1844 0000138D C21800                  	ret 8 * (2 + 1)
  1845                                  .L_lambda_simple_end_4f33:	; new closure is in rax
  1846 00001390 48890425[10020000]      	mov qword [free_var_66], rax
  1847 00001398 48B8-                   	mov rax, sob_void
  1847 0000139A [0000000000000000] 
  1848                                  
  1849 000013A2 4889C7                  	mov rdi, rax
  1850 000013A5 E81B150100              	call print_sexpr_if_not_void
  1851                                  
  1852 000013AA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1853 000013AF E800150100              	call malloc
  1854 000013B4 50                      	push rax
  1855 000013B5 BF00000000              	mov rdi, 8 * 0	; new rib
  1856 000013BA E8F5140100              	call malloc
  1857 000013BF 50                      	push rax
  1858 000013C0 BF08000000              	mov rdi, 8 * 1	; extended env
  1859 000013C5 E8EA140100              	call malloc
  1860 000013CA 488B7D10                	mov rdi, ENV
  1861 000013CE BE00000000              	mov rsi, 0
  1862 000013D3 BA01000000              	mov rdx, 1
  1863                                  .L_lambda_simple_env_loop_4f34:	; ext_env[i + 1] <-- env[i]
  1864 000013D8 4883FE00                	cmp rsi, 0
  1865 000013DC 7410                    	je .L_lambda_simple_env_end_4f34
  1866 000013DE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  1867 000013E2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1868 000013E6 48FFC6                  	inc rsi
  1869 000013E9 48FFC2                  	inc rdx
  1870 000013EC EBEA                    	jmp .L_lambda_simple_env_loop_4f34
  1871                                  .L_lambda_simple_env_end_4f34:
  1872 000013EE 5B                      	pop rbx
  1873 000013EF BE00000000              	mov rsi, 0
  1874                                  .L_lambda_simple_params_loop_4f34:	; copy params
  1875 000013F4 4883FE00                	cmp rsi, 0
  1876 000013F8 740E                    	je .L_lambda_simple_params_end_4f34
  1877 000013FA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1878 000013FF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1879 00001403 48FFC6                  	inc rsi
  1880 00001406 EBEC                    	jmp .L_lambda_simple_params_loop_4f34
  1881                                  .L_lambda_simple_params_end_4f34:
  1882 00001408 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1883 0000140B 4889C3                  	mov rbx, rax
  1884 0000140E 58                      	pop rax
  1885 0000140F C60005                  	mov byte [rax], T_closure
  1886 00001412 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1887 00001416 48C74009[23140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f34
  1888 0000141E E9B7000000              	jmp .L_lambda_simple_end_4f34
  1889                                  .L_lambda_simple_code_4f34:	; lambda-simple body
  1890 00001423 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1891 00001429 740B                    	je .L_lambda_simple_arity_check_ok_4f34
  1892 0000142B FF742410                	push qword [rsp + 8 * 2]
  1893 0000142F 6A01                    	push 1
  1894 00001431 E937140100              	jmp L_error_incorrect_arity_simple
  1895                                  .L_lambda_simple_arity_check_ok_4f34:
  1896 00001436 C8000000                	enter 0, 0
  1897 0000143A 488B4520                	mov rax, PARAM(0)
  1898 0000143E 50                      	push rax
  1899 0000143F 6A01                    	push 1
  1900 00001441 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1901                                  	assert_closure(rax)
    42 00001449 803805              <1>  cmp byte [%1], %2
    43 0000144C 0F85E22C0100        <1>  jne L_error_incorrect_type
  1902 00001452 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1903 00001456 53                      	push rbx
  1904 00001457 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1905 0000145B FFD3                    	call rbx
  1906 0000145D 50                      	push rax
  1907 0000145E 6A01                    	push 1
  1908 00001460 488B0425[88000000]      	mov rax, qword [free_var_17]
  1909                                  	assert_closure(rax)
    42 00001468 803805              <1>  cmp byte [%1], %2
    43 0000146B 0F85C32C0100        <1>  jne L_error_incorrect_type
  1910 00001471 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1911 00001475 53                      	push rbx
  1912 00001476 FF7508                  	push RET_ADDR
  1913 00001479 488B7D18                	mov rdi, COUNT
  1914 0000147D 4883C703                	add rdi, 3
  1915 00001481 48C1E703                	shl rdi, 3
  1916 00001485 4801EF                  	add rdi, rbp
  1917 00001488 488B6D00                	mov rbp, OLD_RDP
  1918 0000148C BE00000000              	mov rsi, 0
  1919                                  .L_tc_recycle_frame_loop_5ca8:	 ; start recycle frame loop
  1920 00001491 4883FE04                	cmp rsi, 4
  1921 00001495 7427                    	je .L_tc_recycle_frame_done_5ca8
  1922 00001497 B903000000              	mov rcx, 3
  1923 0000149C 4829F1                  	sub rcx, rsi
  1924 0000149F 48C1E103                	shl rcx, 3
  1925 000014A3 4801E1                  	add rcx, rsp ; rcx is the address to move
  1926 000014A6 4889F3                  	mov rbx, rsi
  1927 000014A9 48C1E303                	shl rbx, 3
  1928 000014AD 48F7DB                  	neg rbx
  1929 000014B0 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1930 000014B3 488B09                  	mov rcx, [rcx]
  1931 000014B6 48890B                  	mov [rbx], rcx
  1932 000014B9 48FFC6                  	inc rsi
  1933 000014BC EBD3                    	jmp .L_tc_recycle_frame_loop_5ca8
  1934                                  .L_tc_recycle_frame_done_5ca8:	 ; end recycle frame loop
  1935 000014BE BB03000000              	mov rbx, 3
  1936 000014C3 48C1E303                	shl rbx, 3
  1937 000014C7 48F7DB                  	neg rbx
  1938 000014CA 4801FB                  	add rbx, rdi
  1939 000014CD 4889DC                  	mov rsp, rbx
  1940 000014D0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1941 000014D4 FFE3                    	jmp rbx
  1942 000014D6 C9                      	leave
  1943 000014D7 C21800                  	ret 8 * (2 + 1)
  1944                                  .L_lambda_simple_end_4f34:	; new closure is in rax
  1945 000014DA 48890425[18020000]      	mov qword [free_var_67], rax
  1946 000014E2 48B8-                   	mov rax, sob_void
  1946 000014E4 [0000000000000000] 
  1947                                  
  1948 000014EC 4889C7                  	mov rdi, rax
  1949 000014EF E8D1130100              	call print_sexpr_if_not_void
  1950                                  
  1951 000014F4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1952 000014F9 E8B6130100              	call malloc
  1953 000014FE 50                      	push rax
  1954 000014FF BF00000000              	mov rdi, 8 * 0	; new rib
  1955 00001504 E8AB130100              	call malloc
  1956 00001509 50                      	push rax
  1957 0000150A BF08000000              	mov rdi, 8 * 1	; extended env
  1958 0000150F E8A0130100              	call malloc
  1959 00001514 488B7D10                	mov rdi, ENV
  1960 00001518 BE00000000              	mov rsi, 0
  1961 0000151D BA01000000              	mov rdx, 1
  1962                                  .L_lambda_simple_env_loop_4f35:	; ext_env[i + 1] <-- env[i]
  1963 00001522 4883FE00                	cmp rsi, 0
  1964 00001526 7410                    	je .L_lambda_simple_env_end_4f35
  1965 00001528 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  1966 0000152C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1967 00001530 48FFC6                  	inc rsi
  1968 00001533 48FFC2                  	inc rdx
  1969 00001536 EBEA                    	jmp .L_lambda_simple_env_loop_4f35
  1970                                  .L_lambda_simple_env_end_4f35:
  1971 00001538 5B                      	pop rbx
  1972 00001539 BE00000000              	mov rsi, 0
  1973                                  .L_lambda_simple_params_loop_4f35:	; copy params
  1974 0000153E 4883FE00                	cmp rsi, 0
  1975 00001542 740E                    	je .L_lambda_simple_params_end_4f35
  1976 00001544 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1977 00001549 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1978 0000154D 48FFC6                  	inc rsi
  1979 00001550 EBEC                    	jmp .L_lambda_simple_params_loop_4f35
  1980                                  .L_lambda_simple_params_end_4f35:
  1981 00001552 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1982 00001555 4889C3                  	mov rbx, rax
  1983 00001558 58                      	pop rax
  1984 00001559 C60005                  	mov byte [rax], T_closure
  1985 0000155C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1986 00001560 48C74009[6D150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f35
  1987 00001568 E9B7000000              	jmp .L_lambda_simple_end_4f35
  1988                                  .L_lambda_simple_code_4f35:	; lambda-simple body
  1989 0000156D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1990 00001573 740B                    	je .L_lambda_simple_arity_check_ok_4f35
  1991 00001575 FF742410                	push qword [rsp + 8 * 2]
  1992 00001579 6A01                    	push 1
  1993 0000157B E9ED120100              	jmp L_error_incorrect_arity_simple
  1994                                  .L_lambda_simple_arity_check_ok_4f35:
  1995 00001580 C8000000                	enter 0, 0
  1996 00001584 488B4520                	mov rax, PARAM(0)
  1997 00001588 50                      	push rax
  1998 00001589 6A01                    	push 1
  1999 0000158B 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2000                                  	assert_closure(rax)
    42 00001593 803805              <1>  cmp byte [%1], %2
    43 00001596 0F85982B0100        <1>  jne L_error_incorrect_type
  2001 0000159C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2002 000015A0 53                      	push rbx
  2003 000015A1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2004 000015A5 FFD3                    	call rbx
  2005 000015A7 50                      	push rax
  2006 000015A8 6A01                    	push 1
  2007 000015AA 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2008                                  	assert_closure(rax)
    42 000015B2 803805              <1>  cmp byte [%1], %2
    43 000015B5 0F85792B0100        <1>  jne L_error_incorrect_type
  2009 000015BB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2010 000015BF 53                      	push rbx
  2011 000015C0 FF7508                  	push RET_ADDR
  2012 000015C3 488B7D18                	mov rdi, COUNT
  2013 000015C7 4883C703                	add rdi, 3
  2014 000015CB 48C1E703                	shl rdi, 3
  2015 000015CF 4801EF                  	add rdi, rbp
  2016 000015D2 488B6D00                	mov rbp, OLD_RDP
  2017 000015D6 BE00000000              	mov rsi, 0
  2018                                  .L_tc_recycle_frame_loop_5ca9:	 ; start recycle frame loop
  2019 000015DB 4883FE04                	cmp rsi, 4
  2020 000015DF 7427                    	je .L_tc_recycle_frame_done_5ca9
  2021 000015E1 B903000000              	mov rcx, 3
  2022 000015E6 4829F1                  	sub rcx, rsi
  2023 000015E9 48C1E103                	shl rcx, 3
  2024 000015ED 4801E1                  	add rcx, rsp ; rcx is the address to move
  2025 000015F0 4889F3                  	mov rbx, rsi
  2026 000015F3 48C1E303                	shl rbx, 3
  2027 000015F7 48F7DB                  	neg rbx
  2028 000015FA 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2029 000015FD 488B09                  	mov rcx, [rcx]
  2030 00001600 48890B                  	mov [rbx], rcx
  2031 00001603 48FFC6                  	inc rsi
  2032 00001606 EBD3                    	jmp .L_tc_recycle_frame_loop_5ca9
  2033                                  .L_tc_recycle_frame_done_5ca9:	 ; end recycle frame loop
  2034 00001608 BB03000000              	mov rbx, 3
  2035 0000160D 48C1E303                	shl rbx, 3
  2036 00001611 48F7DB                  	neg rbx
  2037 00001614 4801FB                  	add rbx, rdi
  2038 00001617 4889DC                  	mov rsp, rbx
  2039 0000161A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2040 0000161E FFE3                    	jmp rbx
  2041 00001620 C9                      	leave
  2042 00001621 C21800                  	ret 8 * (2 + 1)
  2043                                  .L_lambda_simple_end_4f35:	; new closure is in rax
  2044 00001624 48890425[20020000]      	mov qword [free_var_68], rax
  2045 0000162C 48B8-                   	mov rax, sob_void
  2045 0000162E [0000000000000000] 
  2046                                  
  2047 00001636 4889C7                  	mov rdi, rax
  2048 00001639 E887120100              	call print_sexpr_if_not_void
  2049                                  
  2050 0000163E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2051 00001643 E86C120100              	call malloc
  2052 00001648 50                      	push rax
  2053 00001649 BF00000000              	mov rdi, 8 * 0	; new rib
  2054 0000164E E861120100              	call malloc
  2055 00001653 50                      	push rax
  2056 00001654 BF08000000              	mov rdi, 8 * 1	; extended env
  2057 00001659 E856120100              	call malloc
  2058 0000165E 488B7D10                	mov rdi, ENV
  2059 00001662 BE00000000              	mov rsi, 0
  2060 00001667 BA01000000              	mov rdx, 1
  2061                                  .L_lambda_simple_env_loop_4f36:	; ext_env[i + 1] <-- env[i]
  2062 0000166C 4883FE00                	cmp rsi, 0
  2063 00001670 7410                    	je .L_lambda_simple_env_end_4f36
  2064 00001672 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  2065 00001676 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2066 0000167A 48FFC6                  	inc rsi
  2067 0000167D 48FFC2                  	inc rdx
  2068 00001680 EBEA                    	jmp .L_lambda_simple_env_loop_4f36
  2069                                  .L_lambda_simple_env_end_4f36:
  2070 00001682 5B                      	pop rbx
  2071 00001683 BE00000000              	mov rsi, 0
  2072                                  .L_lambda_simple_params_loop_4f36:	; copy params
  2073 00001688 4883FE00                	cmp rsi, 0
  2074 0000168C 740E                    	je .L_lambda_simple_params_end_4f36
  2075 0000168E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2076 00001693 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2077 00001697 48FFC6                  	inc rsi
  2078 0000169A EBEC                    	jmp .L_lambda_simple_params_loop_4f36
  2079                                  .L_lambda_simple_params_end_4f36:
  2080 0000169C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2081 0000169F 4889C3                  	mov rbx, rax
  2082 000016A2 58                      	pop rax
  2083 000016A3 C60005                  	mov byte [rax], T_closure
  2084 000016A6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2085 000016AA 48C74009[B7160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f36
  2086 000016B2 E9B7000000              	jmp .L_lambda_simple_end_4f36
  2087                                  .L_lambda_simple_code_4f36:	; lambda-simple body
  2088 000016B7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2089 000016BD 740B                    	je .L_lambda_simple_arity_check_ok_4f36
  2090 000016BF FF742410                	push qword [rsp + 8 * 2]
  2091 000016C3 6A01                    	push 1
  2092 000016C5 E9A3110100              	jmp L_error_incorrect_arity_simple
  2093                                  .L_lambda_simple_arity_check_ok_4f36:
  2094 000016CA C8000000                	enter 0, 0
  2095 000016CE 488B4520                	mov rax, PARAM(0)
  2096 000016D2 50                      	push rax
  2097 000016D3 6A01                    	push 1
  2098 000016D5 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2099                                  	assert_closure(rax)
    42 000016DD 803805              <1>  cmp byte [%1], %2
    43 000016E0 0F854E2A0100        <1>  jne L_error_incorrect_type
  2100 000016E6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2101 000016EA 53                      	push rbx
  2102 000016EB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2103 000016EF FFD3                    	call rbx
  2104 000016F1 50                      	push rax
  2105 000016F2 6A01                    	push 1
  2106 000016F4 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2107                                  	assert_closure(rax)
    42 000016FC 803805              <1>  cmp byte [%1], %2
    43 000016FF 0F852F2A0100        <1>  jne L_error_incorrect_type
  2108 00001705 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2109 00001709 53                      	push rbx
  2110 0000170A FF7508                  	push RET_ADDR
  2111 0000170D 488B7D18                	mov rdi, COUNT
  2112 00001711 4883C703                	add rdi, 3
  2113 00001715 48C1E703                	shl rdi, 3
  2114 00001719 4801EF                  	add rdi, rbp
  2115 0000171C 488B6D00                	mov rbp, OLD_RDP
  2116 00001720 BE00000000              	mov rsi, 0
  2117                                  .L_tc_recycle_frame_loop_5caa:	 ; start recycle frame loop
  2118 00001725 4883FE04                	cmp rsi, 4
  2119 00001729 7427                    	je .L_tc_recycle_frame_done_5caa
  2120 0000172B B903000000              	mov rcx, 3
  2121 00001730 4829F1                  	sub rcx, rsi
  2122 00001733 48C1E103                	shl rcx, 3
  2123 00001737 4801E1                  	add rcx, rsp ; rcx is the address to move
  2124 0000173A 4889F3                  	mov rbx, rsi
  2125 0000173D 48C1E303                	shl rbx, 3
  2126 00001741 48F7DB                  	neg rbx
  2127 00001744 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2128 00001747 488B09                  	mov rcx, [rcx]
  2129 0000174A 48890B                  	mov [rbx], rcx
  2130 0000174D 48FFC6                  	inc rsi
  2131 00001750 EBD3                    	jmp .L_tc_recycle_frame_loop_5caa
  2132                                  .L_tc_recycle_frame_done_5caa:	 ; end recycle frame loop
  2133 00001752 BB03000000              	mov rbx, 3
  2134 00001757 48C1E303                	shl rbx, 3
  2135 0000175B 48F7DB                  	neg rbx
  2136 0000175E 4801FB                  	add rbx, rdi
  2137 00001761 4889DC                  	mov rsp, rbx
  2138 00001764 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2139 00001768 FFE3                    	jmp rbx
  2140 0000176A C9                      	leave
  2141 0000176B C21800                  	ret 8 * (2 + 1)
  2142                                  .L_lambda_simple_end_4f36:	; new closure is in rax
  2143 0000176E 48890425[28020000]      	mov qword [free_var_69], rax
  2144 00001776 48B8-                   	mov rax, sob_void
  2144 00001778 [0000000000000000] 
  2145                                  
  2146 00001780 4889C7                  	mov rdi, rax
  2147 00001783 E83D110100              	call print_sexpr_if_not_void
  2148                                  
  2149 00001788 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2150 0000178D E822110100              	call malloc
  2151 00001792 50                      	push rax
  2152 00001793 BF00000000              	mov rdi, 8 * 0	; new rib
  2153 00001798 E817110100              	call malloc
  2154 0000179D 50                      	push rax
  2155 0000179E BF08000000              	mov rdi, 8 * 1	; extended env
  2156 000017A3 E80C110100              	call malloc
  2157 000017A8 488B7D10                	mov rdi, ENV
  2158 000017AC BE00000000              	mov rsi, 0
  2159 000017B1 BA01000000              	mov rdx, 1
  2160                                  .L_lambda_simple_env_loop_4f37:	; ext_env[i + 1] <-- env[i]
  2161 000017B6 4883FE00                	cmp rsi, 0
  2162 000017BA 7410                    	je .L_lambda_simple_env_end_4f37
  2163 000017BC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  2164 000017C0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2165 000017C4 48FFC6                  	inc rsi
  2166 000017C7 48FFC2                  	inc rdx
  2167 000017CA EBEA                    	jmp .L_lambda_simple_env_loop_4f37
  2168                                  .L_lambda_simple_env_end_4f37:
  2169 000017CC 5B                      	pop rbx
  2170 000017CD BE00000000              	mov rsi, 0
  2171                                  .L_lambda_simple_params_loop_4f37:	; copy params
  2172 000017D2 4883FE00                	cmp rsi, 0
  2173 000017D6 740E                    	je .L_lambda_simple_params_end_4f37
  2174 000017D8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2175 000017DD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2176 000017E1 48FFC6                  	inc rsi
  2177 000017E4 EBEC                    	jmp .L_lambda_simple_params_loop_4f37
  2178                                  .L_lambda_simple_params_end_4f37:
  2179 000017E6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2180 000017E9 4889C3                  	mov rbx, rax
  2181 000017EC 58                      	pop rax
  2182 000017ED C60005                  	mov byte [rax], T_closure
  2183 000017F0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2184 000017F4 48C74009[01180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f37
  2185 000017FC E9B7000000              	jmp .L_lambda_simple_end_4f37
  2186                                  .L_lambda_simple_code_4f37:	; lambda-simple body
  2187 00001801 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2188 00001807 740B                    	je .L_lambda_simple_arity_check_ok_4f37
  2189 00001809 FF742410                	push qword [rsp + 8 * 2]
  2190 0000180D 6A01                    	push 1
  2191 0000180F E959100100              	jmp L_error_incorrect_arity_simple
  2192                                  .L_lambda_simple_arity_check_ok_4f37:
  2193 00001814 C8000000                	enter 0, 0
  2194 00001818 488B4520                	mov rax, PARAM(0)
  2195 0000181C 50                      	push rax
  2196 0000181D 6A01                    	push 1
  2197 0000181F 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2198                                  	assert_closure(rax)
    42 00001827 803805              <1>  cmp byte [%1], %2
    43 0000182A 0F8504290100        <1>  jne L_error_incorrect_type
  2199 00001830 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2200 00001834 53                      	push rbx
  2201 00001835 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2202 00001839 FFD3                    	call rbx
  2203 0000183B 50                      	push rax
  2204 0000183C 6A01                    	push 1
  2205 0000183E 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2206                                  	assert_closure(rax)
    42 00001846 803805              <1>  cmp byte [%1], %2
    43 00001849 0F85E5280100        <1>  jne L_error_incorrect_type
  2207 0000184F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2208 00001853 53                      	push rbx
  2209 00001854 FF7508                  	push RET_ADDR
  2210 00001857 488B7D18                	mov rdi, COUNT
  2211 0000185B 4883C703                	add rdi, 3
  2212 0000185F 48C1E703                	shl rdi, 3
  2213 00001863 4801EF                  	add rdi, rbp
  2214 00001866 488B6D00                	mov rbp, OLD_RDP
  2215 0000186A BE00000000              	mov rsi, 0
  2216                                  .L_tc_recycle_frame_loop_5cab:	 ; start recycle frame loop
  2217 0000186F 4883FE04                	cmp rsi, 4
  2218 00001873 7427                    	je .L_tc_recycle_frame_done_5cab
  2219 00001875 B903000000              	mov rcx, 3
  2220 0000187A 4829F1                  	sub rcx, rsi
  2221 0000187D 48C1E103                	shl rcx, 3
  2222 00001881 4801E1                  	add rcx, rsp ; rcx is the address to move
  2223 00001884 4889F3                  	mov rbx, rsi
  2224 00001887 48C1E303                	shl rbx, 3
  2225 0000188B 48F7DB                  	neg rbx
  2226 0000188E 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2227 00001891 488B09                  	mov rcx, [rcx]
  2228 00001894 48890B                  	mov [rbx], rcx
  2229 00001897 48FFC6                  	inc rsi
  2230 0000189A EBD3                    	jmp .L_tc_recycle_frame_loop_5cab
  2231                                  .L_tc_recycle_frame_done_5cab:	 ; end recycle frame loop
  2232 0000189C BB03000000              	mov rbx, 3
  2233 000018A1 48C1E303                	shl rbx, 3
  2234 000018A5 48F7DB                  	neg rbx
  2235 000018A8 4801FB                  	add rbx, rdi
  2236 000018AB 4889DC                  	mov rsp, rbx
  2237 000018AE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2238 000018B2 FFE3                    	jmp rbx
  2239 000018B4 C9                      	leave
  2240 000018B5 C21800                  	ret 8 * (2 + 1)
  2241                                  .L_lambda_simple_end_4f37:	; new closure is in rax
  2242 000018B8 48890425[30020000]      	mov qword [free_var_70], rax
  2243 000018C0 48B8-                   	mov rax, sob_void
  2243 000018C2 [0000000000000000] 
  2244                                  
  2245 000018CA 4889C7                  	mov rdi, rax
  2246 000018CD E8F30F0100              	call print_sexpr_if_not_void
  2247                                  
  2248 000018D2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2249 000018D7 E8D80F0100              	call malloc
  2250 000018DC 50                      	push rax
  2251 000018DD BF00000000              	mov rdi, 8 * 0	; new rib
  2252 000018E2 E8CD0F0100              	call malloc
  2253 000018E7 50                      	push rax
  2254 000018E8 BF08000000              	mov rdi, 8 * 1	; extended env
  2255 000018ED E8C20F0100              	call malloc
  2256 000018F2 488B7D10                	mov rdi, ENV
  2257 000018F6 BE00000000              	mov rsi, 0
  2258 000018FB BA01000000              	mov rdx, 1
  2259                                  .L_lambda_simple_env_loop_4f38:	; ext_env[i + 1] <-- env[i]
  2260 00001900 4883FE00                	cmp rsi, 0
  2261 00001904 7410                    	je .L_lambda_simple_env_end_4f38
  2262 00001906 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  2263 0000190A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2264 0000190E 48FFC6                  	inc rsi
  2265 00001911 48FFC2                  	inc rdx
  2266 00001914 EBEA                    	jmp .L_lambda_simple_env_loop_4f38
  2267                                  .L_lambda_simple_env_end_4f38:
  2268 00001916 5B                      	pop rbx
  2269 00001917 BE00000000              	mov rsi, 0
  2270                                  .L_lambda_simple_params_loop_4f38:	; copy params
  2271 0000191C 4883FE00                	cmp rsi, 0
  2272 00001920 740E                    	je .L_lambda_simple_params_end_4f38
  2273 00001922 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2274 00001927 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2275 0000192B 48FFC6                  	inc rsi
  2276 0000192E EBEC                    	jmp .L_lambda_simple_params_loop_4f38
  2277                                  .L_lambda_simple_params_end_4f38:
  2278 00001930 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2279 00001933 4889C3                  	mov rbx, rax
  2280 00001936 58                      	pop rax
  2281 00001937 C60005                  	mov byte [rax], T_closure
  2282 0000193A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2283 0000193E 48C74009[4B190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f38
  2284 00001946 E9B7000000              	jmp .L_lambda_simple_end_4f38
  2285                                  .L_lambda_simple_code_4f38:	; lambda-simple body
  2286 0000194B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2287 00001951 740B                    	je .L_lambda_simple_arity_check_ok_4f38
  2288 00001953 FF742410                	push qword [rsp + 8 * 2]
  2289 00001957 6A01                    	push 1
  2290 00001959 E90F0F0100              	jmp L_error_incorrect_arity_simple
  2291                                  .L_lambda_simple_arity_check_ok_4f38:
  2292 0000195E C8000000                	enter 0, 0
  2293 00001962 488B4520                	mov rax, PARAM(0)
  2294 00001966 50                      	push rax
  2295 00001967 6A01                    	push 1
  2296 00001969 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2297                                  	assert_closure(rax)
    42 00001971 803805              <1>  cmp byte [%1], %2
    43 00001974 0F85BA270100        <1>  jne L_error_incorrect_type
  2298 0000197A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2299 0000197E 53                      	push rbx
  2300 0000197F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2301 00001983 FFD3                    	call rbx
  2302 00001985 50                      	push rax
  2303 00001986 6A01                    	push 1
  2304 00001988 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2305                                  	assert_closure(rax)
    42 00001990 803805              <1>  cmp byte [%1], %2
    43 00001993 0F859B270100        <1>  jne L_error_incorrect_type
  2306 00001999 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2307 0000199D 53                      	push rbx
  2308 0000199E FF7508                  	push RET_ADDR
  2309 000019A1 488B7D18                	mov rdi, COUNT
  2310 000019A5 4883C703                	add rdi, 3
  2311 000019A9 48C1E703                	shl rdi, 3
  2312 000019AD 4801EF                  	add rdi, rbp
  2313 000019B0 488B6D00                	mov rbp, OLD_RDP
  2314 000019B4 BE00000000              	mov rsi, 0
  2315                                  .L_tc_recycle_frame_loop_5cac:	 ; start recycle frame loop
  2316 000019B9 4883FE04                	cmp rsi, 4
  2317 000019BD 7427                    	je .L_tc_recycle_frame_done_5cac
  2318 000019BF B903000000              	mov rcx, 3
  2319 000019C4 4829F1                  	sub rcx, rsi
  2320 000019C7 48C1E103                	shl rcx, 3
  2321 000019CB 4801E1                  	add rcx, rsp ; rcx is the address to move
  2322 000019CE 4889F3                  	mov rbx, rsi
  2323 000019D1 48C1E303                	shl rbx, 3
  2324 000019D5 48F7DB                  	neg rbx
  2325 000019D8 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2326 000019DB 488B09                  	mov rcx, [rcx]
  2327 000019DE 48890B                  	mov [rbx], rcx
  2328 000019E1 48FFC6                  	inc rsi
  2329 000019E4 EBD3                    	jmp .L_tc_recycle_frame_loop_5cac
  2330                                  .L_tc_recycle_frame_done_5cac:	 ; end recycle frame loop
  2331 000019E6 BB03000000              	mov rbx, 3
  2332 000019EB 48C1E303                	shl rbx, 3
  2333 000019EF 48F7DB                  	neg rbx
  2334 000019F2 4801FB                  	add rbx, rdi
  2335 000019F5 4889DC                  	mov rsp, rbx
  2336 000019F8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2337 000019FC FFE3                    	jmp rbx
  2338 000019FE C9                      	leave
  2339 000019FF C21800                  	ret 8 * (2 + 1)
  2340                                  .L_lambda_simple_end_4f38:	; new closure is in rax
  2341 00001A02 48890425[38020000]      	mov qword [free_var_71], rax
  2342 00001A0A 48B8-                   	mov rax, sob_void
  2342 00001A0C [0000000000000000] 
  2343                                  
  2344 00001A14 4889C7                  	mov rdi, rax
  2345 00001A17 E8A90E0100              	call print_sexpr_if_not_void
  2346                                  
  2347 00001A1C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2348 00001A21 E88E0E0100              	call malloc
  2349 00001A26 50                      	push rax
  2350 00001A27 BF00000000              	mov rdi, 8 * 0	; new rib
  2351 00001A2C E8830E0100              	call malloc
  2352 00001A31 50                      	push rax
  2353 00001A32 BF08000000              	mov rdi, 8 * 1	; extended env
  2354 00001A37 E8780E0100              	call malloc
  2355 00001A3C 488B7D10                	mov rdi, ENV
  2356 00001A40 BE00000000              	mov rsi, 0
  2357 00001A45 BA01000000              	mov rdx, 1
  2358                                  .L_lambda_simple_env_loop_4f39:	; ext_env[i + 1] <-- env[i]
  2359 00001A4A 4883FE00                	cmp rsi, 0
  2360 00001A4E 7410                    	je .L_lambda_simple_env_end_4f39
  2361 00001A50 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  2362 00001A54 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2363 00001A58 48FFC6                  	inc rsi
  2364 00001A5B 48FFC2                  	inc rdx
  2365 00001A5E EBEA                    	jmp .L_lambda_simple_env_loop_4f39
  2366                                  .L_lambda_simple_env_end_4f39:
  2367 00001A60 5B                      	pop rbx
  2368 00001A61 BE00000000              	mov rsi, 0
  2369                                  .L_lambda_simple_params_loop_4f39:	; copy params
  2370 00001A66 4883FE00                	cmp rsi, 0
  2371 00001A6A 740E                    	je .L_lambda_simple_params_end_4f39
  2372 00001A6C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2373 00001A71 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2374 00001A75 48FFC6                  	inc rsi
  2375 00001A78 EBEC                    	jmp .L_lambda_simple_params_loop_4f39
  2376                                  .L_lambda_simple_params_end_4f39:
  2377 00001A7A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2378 00001A7D 4889C3                  	mov rbx, rax
  2379 00001A80 58                      	pop rax
  2380 00001A81 C60005                  	mov byte [rax], T_closure
  2381 00001A84 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2382 00001A88 48C74009[951A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f39
  2383 00001A90 E9B7000000              	jmp .L_lambda_simple_end_4f39
  2384                                  .L_lambda_simple_code_4f39:	; lambda-simple body
  2385 00001A95 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2386 00001A9B 740B                    	je .L_lambda_simple_arity_check_ok_4f39
  2387 00001A9D FF742410                	push qword [rsp + 8 * 2]
  2388 00001AA1 6A01                    	push 1
  2389 00001AA3 E9C50D0100              	jmp L_error_incorrect_arity_simple
  2390                                  .L_lambda_simple_arity_check_ok_4f39:
  2391 00001AA8 C8000000                	enter 0, 0
  2392 00001AAC 488B4520                	mov rax, PARAM(0)
  2393 00001AB0 50                      	push rax
  2394 00001AB1 6A01                    	push 1
  2395 00001AB3 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2396                                  	assert_closure(rax)
    42 00001ABB 803805              <1>  cmp byte [%1], %2
    43 00001ABE 0F8570260100        <1>  jne L_error_incorrect_type
  2397 00001AC4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2398 00001AC8 53                      	push rbx
  2399 00001AC9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2400 00001ACD FFD3                    	call rbx
  2401 00001ACF 50                      	push rax
  2402 00001AD0 6A01                    	push 1
  2403 00001AD2 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2404                                  	assert_closure(rax)
    42 00001ADA 803805              <1>  cmp byte [%1], %2
    43 00001ADD 0F8551260100        <1>  jne L_error_incorrect_type
  2405 00001AE3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2406 00001AE7 53                      	push rbx
  2407 00001AE8 FF7508                  	push RET_ADDR
  2408 00001AEB 488B7D18                	mov rdi, COUNT
  2409 00001AEF 4883C703                	add rdi, 3
  2410 00001AF3 48C1E703                	shl rdi, 3
  2411 00001AF7 4801EF                  	add rdi, rbp
  2412 00001AFA 488B6D00                	mov rbp, OLD_RDP
  2413 00001AFE BE00000000              	mov rsi, 0
  2414                                  .L_tc_recycle_frame_loop_5cad:	 ; start recycle frame loop
  2415 00001B03 4883FE04                	cmp rsi, 4
  2416 00001B07 7427                    	je .L_tc_recycle_frame_done_5cad
  2417 00001B09 B903000000              	mov rcx, 3
  2418 00001B0E 4829F1                  	sub rcx, rsi
  2419 00001B11 48C1E103                	shl rcx, 3
  2420 00001B15 4801E1                  	add rcx, rsp ; rcx is the address to move
  2421 00001B18 4889F3                  	mov rbx, rsi
  2422 00001B1B 48C1E303                	shl rbx, 3
  2423 00001B1F 48F7DB                  	neg rbx
  2424 00001B22 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2425 00001B25 488B09                  	mov rcx, [rcx]
  2426 00001B28 48890B                  	mov [rbx], rcx
  2427 00001B2B 48FFC6                  	inc rsi
  2428 00001B2E EBD3                    	jmp .L_tc_recycle_frame_loop_5cad
  2429                                  .L_tc_recycle_frame_done_5cad:	 ; end recycle frame loop
  2430 00001B30 BB03000000              	mov rbx, 3
  2431 00001B35 48C1E303                	shl rbx, 3
  2432 00001B39 48F7DB                  	neg rbx
  2433 00001B3C 4801FB                  	add rbx, rdi
  2434 00001B3F 4889DC                  	mov rsp, rbx
  2435 00001B42 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2436 00001B46 FFE3                    	jmp rbx
  2437 00001B48 C9                      	leave
  2438 00001B49 C21800                  	ret 8 * (2 + 1)
  2439                                  .L_lambda_simple_end_4f39:	; new closure is in rax
  2440 00001B4C 48890425[40020000]      	mov qword [free_var_72], rax
  2441 00001B54 48B8-                   	mov rax, sob_void
  2441 00001B56 [0000000000000000] 
  2442                                  
  2443 00001B5E 4889C7                  	mov rdi, rax
  2444 00001B61 E85F0D0100              	call print_sexpr_if_not_void
  2445                                  
  2446 00001B66 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2447 00001B6B E8440D0100              	call malloc
  2448 00001B70 50                      	push rax
  2449 00001B71 BF00000000              	mov rdi, 8 * 0	; new rib
  2450 00001B76 E8390D0100              	call malloc
  2451 00001B7B 50                      	push rax
  2452 00001B7C BF08000000              	mov rdi, 8 * 1	; extended env
  2453 00001B81 E82E0D0100              	call malloc
  2454 00001B86 488B7D10                	mov rdi, ENV
  2455 00001B8A BE00000000              	mov rsi, 0
  2456 00001B8F BA01000000              	mov rdx, 1
  2457                                  .L_lambda_simple_env_loop_4f3a:	; ext_env[i + 1] <-- env[i]
  2458 00001B94 4883FE00                	cmp rsi, 0
  2459 00001B98 7410                    	je .L_lambda_simple_env_end_4f3a
  2460 00001B9A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  2461 00001B9E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2462 00001BA2 48FFC6                  	inc rsi
  2463 00001BA5 48FFC2                  	inc rdx
  2464 00001BA8 EBEA                    	jmp .L_lambda_simple_env_loop_4f3a
  2465                                  .L_lambda_simple_env_end_4f3a:
  2466 00001BAA 5B                      	pop rbx
  2467 00001BAB BE00000000              	mov rsi, 0
  2468                                  .L_lambda_simple_params_loop_4f3a:	; copy params
  2469 00001BB0 4883FE00                	cmp rsi, 0
  2470 00001BB4 740E                    	je .L_lambda_simple_params_end_4f3a
  2471 00001BB6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2472 00001BBB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2473 00001BBF 48FFC6                  	inc rsi
  2474 00001BC2 EBEC                    	jmp .L_lambda_simple_params_loop_4f3a
  2475                                  .L_lambda_simple_params_end_4f3a:
  2476 00001BC4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2477 00001BC7 4889C3                  	mov rbx, rax
  2478 00001BCA 58                      	pop rax
  2479 00001BCB C60005                  	mov byte [rax], T_closure
  2480 00001BCE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2481 00001BD2 48C74009[DF1B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f3a
  2482 00001BDA E9B7000000              	jmp .L_lambda_simple_end_4f3a
  2483                                  .L_lambda_simple_code_4f3a:	; lambda-simple body
  2484 00001BDF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2485 00001BE5 740B                    	je .L_lambda_simple_arity_check_ok_4f3a
  2486 00001BE7 FF742410                	push qword [rsp + 8 * 2]
  2487 00001BEB 6A01                    	push 1
  2488 00001BED E97B0C0100              	jmp L_error_incorrect_arity_simple
  2489                                  .L_lambda_simple_arity_check_ok_4f3a:
  2490 00001BF2 C8000000                	enter 0, 0
  2491 00001BF6 488B4520                	mov rax, PARAM(0)
  2492 00001BFA 50                      	push rax
  2493 00001BFB 6A01                    	push 1
  2494 00001BFD 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2495                                  	assert_closure(rax)
    42 00001C05 803805              <1>  cmp byte [%1], %2
    43 00001C08 0F8526250100        <1>  jne L_error_incorrect_type
  2496 00001C0E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2497 00001C12 53                      	push rbx
  2498 00001C13 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2499 00001C17 FFD3                    	call rbx
  2500 00001C19 50                      	push rax
  2501 00001C1A 6A01                    	push 1
  2502 00001C1C 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2503                                  	assert_closure(rax)
    42 00001C24 803805              <1>  cmp byte [%1], %2
    43 00001C27 0F8507250100        <1>  jne L_error_incorrect_type
  2504 00001C2D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2505 00001C31 53                      	push rbx
  2506 00001C32 FF7508                  	push RET_ADDR
  2507 00001C35 488B7D18                	mov rdi, COUNT
  2508 00001C39 4883C703                	add rdi, 3
  2509 00001C3D 48C1E703                	shl rdi, 3
  2510 00001C41 4801EF                  	add rdi, rbp
  2511 00001C44 488B6D00                	mov rbp, OLD_RDP
  2512 00001C48 BE00000000              	mov rsi, 0
  2513                                  .L_tc_recycle_frame_loop_5cae:	 ; start recycle frame loop
  2514 00001C4D 4883FE04                	cmp rsi, 4
  2515 00001C51 7427                    	je .L_tc_recycle_frame_done_5cae
  2516 00001C53 B903000000              	mov rcx, 3
  2517 00001C58 4829F1                  	sub rcx, rsi
  2518 00001C5B 48C1E103                	shl rcx, 3
  2519 00001C5F 4801E1                  	add rcx, rsp ; rcx is the address to move
  2520 00001C62 4889F3                  	mov rbx, rsi
  2521 00001C65 48C1E303                	shl rbx, 3
  2522 00001C69 48F7DB                  	neg rbx
  2523 00001C6C 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2524 00001C6F 488B09                  	mov rcx, [rcx]
  2525 00001C72 48890B                  	mov [rbx], rcx
  2526 00001C75 48FFC6                  	inc rsi
  2527 00001C78 EBD3                    	jmp .L_tc_recycle_frame_loop_5cae
  2528                                  .L_tc_recycle_frame_done_5cae:	 ; end recycle frame loop
  2529 00001C7A BB03000000              	mov rbx, 3
  2530 00001C7F 48C1E303                	shl rbx, 3
  2531 00001C83 48F7DB                  	neg rbx
  2532 00001C86 4801FB                  	add rbx, rdi
  2533 00001C89 4889DC                  	mov rsp, rbx
  2534 00001C8C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2535 00001C90 FFE3                    	jmp rbx
  2536 00001C92 C9                      	leave
  2537 00001C93 C21800                  	ret 8 * (2 + 1)
  2538                                  .L_lambda_simple_end_4f3a:	; new closure is in rax
  2539 00001C96 48890425[48020000]      	mov qword [free_var_73], rax
  2540 00001C9E 48B8-                   	mov rax, sob_void
  2540 00001CA0 [0000000000000000] 
  2541                                  
  2542 00001CA8 4889C7                  	mov rdi, rax
  2543 00001CAB E8150C0100              	call print_sexpr_if_not_void
  2544                                  
  2545 00001CB0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2546 00001CB5 E8FA0B0100              	call malloc
  2547 00001CBA 50                      	push rax
  2548 00001CBB BF00000000              	mov rdi, 8 * 0	; new rib
  2549 00001CC0 E8EF0B0100              	call malloc
  2550 00001CC5 50                      	push rax
  2551 00001CC6 BF08000000              	mov rdi, 8 * 1	; extended env
  2552 00001CCB E8E40B0100              	call malloc
  2553 00001CD0 488B7D10                	mov rdi, ENV
  2554 00001CD4 BE00000000              	mov rsi, 0
  2555 00001CD9 BA01000000              	mov rdx, 1
  2556                                  .L_lambda_simple_env_loop_4f3b:	; ext_env[i + 1] <-- env[i]
  2557 00001CDE 4883FE00                	cmp rsi, 0
  2558 00001CE2 7410                    	je .L_lambda_simple_env_end_4f3b
  2559 00001CE4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  2560 00001CE8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2561 00001CEC 48FFC6                  	inc rsi
  2562 00001CEF 48FFC2                  	inc rdx
  2563 00001CF2 EBEA                    	jmp .L_lambda_simple_env_loop_4f3b
  2564                                  .L_lambda_simple_env_end_4f3b:
  2565 00001CF4 5B                      	pop rbx
  2566 00001CF5 BE00000000              	mov rsi, 0
  2567                                  .L_lambda_simple_params_loop_4f3b:	; copy params
  2568 00001CFA 4883FE00                	cmp rsi, 0
  2569 00001CFE 740E                    	je .L_lambda_simple_params_end_4f3b
  2570 00001D00 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2571 00001D05 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2572 00001D09 48FFC6                  	inc rsi
  2573 00001D0C EBEC                    	jmp .L_lambda_simple_params_loop_4f3b
  2574                                  .L_lambda_simple_params_end_4f3b:
  2575 00001D0E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2576 00001D11 4889C3                  	mov rbx, rax
  2577 00001D14 58                      	pop rax
  2578 00001D15 C60005                  	mov byte [rax], T_closure
  2579 00001D18 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2580 00001D1C 48C74009[291D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f3b
  2581 00001D24 E9B7000000              	jmp .L_lambda_simple_end_4f3b
  2582                                  .L_lambda_simple_code_4f3b:	; lambda-simple body
  2583 00001D29 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2584 00001D2F 740B                    	je .L_lambda_simple_arity_check_ok_4f3b
  2585 00001D31 FF742410                	push qword [rsp + 8 * 2]
  2586 00001D35 6A01                    	push 1
  2587 00001D37 E9310B0100              	jmp L_error_incorrect_arity_simple
  2588                                  .L_lambda_simple_arity_check_ok_4f3b:
  2589 00001D3C C8000000                	enter 0, 0
  2590 00001D40 488B4520                	mov rax, PARAM(0)
  2591 00001D44 50                      	push rax
  2592 00001D45 6A01                    	push 1
  2593 00001D47 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2594                                  	assert_closure(rax)
    42 00001D4F 803805              <1>  cmp byte [%1], %2
    43 00001D52 0F85DC230100        <1>  jne L_error_incorrect_type
  2595 00001D58 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2596 00001D5C 53                      	push rbx
  2597 00001D5D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2598 00001D61 FFD3                    	call rbx
  2599 00001D63 50                      	push rax
  2600 00001D64 6A01                    	push 1
  2601 00001D66 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2602                                  	assert_closure(rax)
    42 00001D6E 803805              <1>  cmp byte [%1], %2
    43 00001D71 0F85BD230100        <1>  jne L_error_incorrect_type
  2603 00001D77 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2604 00001D7B 53                      	push rbx
  2605 00001D7C FF7508                  	push RET_ADDR
  2606 00001D7F 488B7D18                	mov rdi, COUNT
  2607 00001D83 4883C703                	add rdi, 3
  2608 00001D87 48C1E703                	shl rdi, 3
  2609 00001D8B 4801EF                  	add rdi, rbp
  2610 00001D8E 488B6D00                	mov rbp, OLD_RDP
  2611 00001D92 BE00000000              	mov rsi, 0
  2612                                  .L_tc_recycle_frame_loop_5caf:	 ; start recycle frame loop
  2613 00001D97 4883FE04                	cmp rsi, 4
  2614 00001D9B 7427                    	je .L_tc_recycle_frame_done_5caf
  2615 00001D9D B903000000              	mov rcx, 3
  2616 00001DA2 4829F1                  	sub rcx, rsi
  2617 00001DA5 48C1E103                	shl rcx, 3
  2618 00001DA9 4801E1                  	add rcx, rsp ; rcx is the address to move
  2619 00001DAC 4889F3                  	mov rbx, rsi
  2620 00001DAF 48C1E303                	shl rbx, 3
  2621 00001DB3 48F7DB                  	neg rbx
  2622 00001DB6 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2623 00001DB9 488B09                  	mov rcx, [rcx]
  2624 00001DBC 48890B                  	mov [rbx], rcx
  2625 00001DBF 48FFC6                  	inc rsi
  2626 00001DC2 EBD3                    	jmp .L_tc_recycle_frame_loop_5caf
  2627                                  .L_tc_recycle_frame_done_5caf:	 ; end recycle frame loop
  2628 00001DC4 BB03000000              	mov rbx, 3
  2629 00001DC9 48C1E303                	shl rbx, 3
  2630 00001DCD 48F7DB                  	neg rbx
  2631 00001DD0 4801FB                  	add rbx, rdi
  2632 00001DD3 4889DC                  	mov rsp, rbx
  2633 00001DD6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2634 00001DDA FFE3                    	jmp rbx
  2635 00001DDC C9                      	leave
  2636 00001DDD C21800                  	ret 8 * (2 + 1)
  2637                                  .L_lambda_simple_end_4f3b:	; new closure is in rax
  2638 00001DE0 48890425[50020000]      	mov qword [free_var_74], rax
  2639 00001DE8 48B8-                   	mov rax, sob_void
  2639 00001DEA [0000000000000000] 
  2640                                  
  2641 00001DF2 4889C7                  	mov rdi, rax
  2642 00001DF5 E8CB0A0100              	call print_sexpr_if_not_void
  2643                                  
  2644 00001DFA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2645 00001DFF E8B00A0100              	call malloc
  2646 00001E04 50                      	push rax
  2647 00001E05 BF00000000              	mov rdi, 8 * 0	; new rib
  2648 00001E0A E8A50A0100              	call malloc
  2649 00001E0F 50                      	push rax
  2650 00001E10 BF08000000              	mov rdi, 8 * 1	; extended env
  2651 00001E15 E89A0A0100              	call malloc
  2652 00001E1A 488B7D10                	mov rdi, ENV
  2653 00001E1E BE00000000              	mov rsi, 0
  2654 00001E23 BA01000000              	mov rdx, 1
  2655                                  .L_lambda_simple_env_loop_4f3c:	; ext_env[i + 1] <-- env[i]
  2656 00001E28 4883FE00                	cmp rsi, 0
  2657 00001E2C 7410                    	je .L_lambda_simple_env_end_4f3c
  2658 00001E2E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  2659 00001E32 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2660 00001E36 48FFC6                  	inc rsi
  2661 00001E39 48FFC2                  	inc rdx
  2662 00001E3C EBEA                    	jmp .L_lambda_simple_env_loop_4f3c
  2663                                  .L_lambda_simple_env_end_4f3c:
  2664 00001E3E 5B                      	pop rbx
  2665 00001E3F BE00000000              	mov rsi, 0
  2666                                  .L_lambda_simple_params_loop_4f3c:	; copy params
  2667 00001E44 4883FE00                	cmp rsi, 0
  2668 00001E48 740E                    	je .L_lambda_simple_params_end_4f3c
  2669 00001E4A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2670 00001E4F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2671 00001E53 48FFC6                  	inc rsi
  2672 00001E56 EBEC                    	jmp .L_lambda_simple_params_loop_4f3c
  2673                                  .L_lambda_simple_params_end_4f3c:
  2674 00001E58 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2675 00001E5B 4889C3                  	mov rbx, rax
  2676 00001E5E 58                      	pop rax
  2677 00001E5F C60005                  	mov byte [rax], T_closure
  2678 00001E62 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2679 00001E66 48C74009[731E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f3c
  2680 00001E6E E9B7000000              	jmp .L_lambda_simple_end_4f3c
  2681                                  .L_lambda_simple_code_4f3c:	; lambda-simple body
  2682 00001E73 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2683 00001E79 740B                    	je .L_lambda_simple_arity_check_ok_4f3c
  2684 00001E7B FF742410                	push qword [rsp + 8 * 2]
  2685 00001E7F 6A01                    	push 1
  2686 00001E81 E9E7090100              	jmp L_error_incorrect_arity_simple
  2687                                  .L_lambda_simple_arity_check_ok_4f3c:
  2688 00001E86 C8000000                	enter 0, 0
  2689 00001E8A 488B4520                	mov rax, PARAM(0)
  2690 00001E8E 50                      	push rax
  2691 00001E8F 6A01                    	push 1
  2692 00001E91 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2693                                  	assert_closure(rax)
    42 00001E99 803805              <1>  cmp byte [%1], %2
    43 00001E9C 0F8592220100        <1>  jne L_error_incorrect_type
  2694 00001EA2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2695 00001EA6 53                      	push rbx
  2696 00001EA7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2697 00001EAB FFD3                    	call rbx
  2698 00001EAD 50                      	push rax
  2699 00001EAE 6A01                    	push 1
  2700 00001EB0 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2701                                  	assert_closure(rax)
    42 00001EB8 803805              <1>  cmp byte [%1], %2
    43 00001EBB 0F8573220100        <1>  jne L_error_incorrect_type
  2702 00001EC1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2703 00001EC5 53                      	push rbx
  2704 00001EC6 FF7508                  	push RET_ADDR
  2705 00001EC9 488B7D18                	mov rdi, COUNT
  2706 00001ECD 4883C703                	add rdi, 3
  2707 00001ED1 48C1E703                	shl rdi, 3
  2708 00001ED5 4801EF                  	add rdi, rbp
  2709 00001ED8 488B6D00                	mov rbp, OLD_RDP
  2710 00001EDC BE00000000              	mov rsi, 0
  2711                                  .L_tc_recycle_frame_loop_5cb0:	 ; start recycle frame loop
  2712 00001EE1 4883FE04                	cmp rsi, 4
  2713 00001EE5 7427                    	je .L_tc_recycle_frame_done_5cb0
  2714 00001EE7 B903000000              	mov rcx, 3
  2715 00001EEC 4829F1                  	sub rcx, rsi
  2716 00001EEF 48C1E103                	shl rcx, 3
  2717 00001EF3 4801E1                  	add rcx, rsp ; rcx is the address to move
  2718 00001EF6 4889F3                  	mov rbx, rsi
  2719 00001EF9 48C1E303                	shl rbx, 3
  2720 00001EFD 48F7DB                  	neg rbx
  2721 00001F00 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2722 00001F03 488B09                  	mov rcx, [rcx]
  2723 00001F06 48890B                  	mov [rbx], rcx
  2724 00001F09 48FFC6                  	inc rsi
  2725 00001F0C EBD3                    	jmp .L_tc_recycle_frame_loop_5cb0
  2726                                  .L_tc_recycle_frame_done_5cb0:	 ; end recycle frame loop
  2727 00001F0E BB03000000              	mov rbx, 3
  2728 00001F13 48C1E303                	shl rbx, 3
  2729 00001F17 48F7DB                  	neg rbx
  2730 00001F1A 4801FB                  	add rbx, rdi
  2731 00001F1D 4889DC                  	mov rsp, rbx
  2732 00001F20 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2733 00001F24 FFE3                    	jmp rbx
  2734 00001F26 C9                      	leave
  2735 00001F27 C21800                  	ret 8 * (2 + 1)
  2736                                  .L_lambda_simple_end_4f3c:	; new closure is in rax
  2737 00001F2A 48890425[58020000]      	mov qword [free_var_75], rax
  2738 00001F32 48B8-                   	mov rax, sob_void
  2738 00001F34 [0000000000000000] 
  2739                                  
  2740 00001F3C 4889C7                  	mov rdi, rax
  2741 00001F3F E881090100              	call print_sexpr_if_not_void
  2742                                  
  2743 00001F44 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2744 00001F49 E866090100              	call malloc
  2745 00001F4E 50                      	push rax
  2746 00001F4F BF00000000              	mov rdi, 8 * 0	; new rib
  2747 00001F54 E85B090100              	call malloc
  2748 00001F59 50                      	push rax
  2749 00001F5A BF08000000              	mov rdi, 8 * 1	; extended env
  2750 00001F5F E850090100              	call malloc
  2751 00001F64 488B7D10                	mov rdi, ENV
  2752 00001F68 BE00000000              	mov rsi, 0
  2753 00001F6D BA01000000              	mov rdx, 1
  2754                                  .L_lambda_simple_env_loop_4f3d:	; ext_env[i + 1] <-- env[i]
  2755 00001F72 4883FE00                	cmp rsi, 0
  2756 00001F76 7410                    	je .L_lambda_simple_env_end_4f3d
  2757 00001F78 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  2758 00001F7C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2759 00001F80 48FFC6                  	inc rsi
  2760 00001F83 48FFC2                  	inc rdx
  2761 00001F86 EBEA                    	jmp .L_lambda_simple_env_loop_4f3d
  2762                                  .L_lambda_simple_env_end_4f3d:
  2763 00001F88 5B                      	pop rbx
  2764 00001F89 BE00000000              	mov rsi, 0
  2765                                  .L_lambda_simple_params_loop_4f3d:	; copy params
  2766 00001F8E 4883FE00                	cmp rsi, 0
  2767 00001F92 740E                    	je .L_lambda_simple_params_end_4f3d
  2768 00001F94 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2769 00001F99 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2770 00001F9D 48FFC6                  	inc rsi
  2771 00001FA0 EBEC                    	jmp .L_lambda_simple_params_loop_4f3d
  2772                                  .L_lambda_simple_params_end_4f3d:
  2773 00001FA2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2774 00001FA5 4889C3                  	mov rbx, rax
  2775 00001FA8 58                      	pop rax
  2776 00001FA9 C60005                  	mov byte [rax], T_closure
  2777 00001FAC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2778 00001FB0 48C74009[BD1F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f3d
  2779 00001FB8 E9B7000000              	jmp .L_lambda_simple_end_4f3d
  2780                                  .L_lambda_simple_code_4f3d:	; lambda-simple body
  2781 00001FBD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2782 00001FC3 740B                    	je .L_lambda_simple_arity_check_ok_4f3d
  2783 00001FC5 FF742410                	push qword [rsp + 8 * 2]
  2784 00001FC9 6A01                    	push 1
  2785 00001FCB E99D080100              	jmp L_error_incorrect_arity_simple
  2786                                  .L_lambda_simple_arity_check_ok_4f3d:
  2787 00001FD0 C8000000                	enter 0, 0
  2788 00001FD4 488B4520                	mov rax, PARAM(0)
  2789 00001FD8 50                      	push rax
  2790 00001FD9 6A01                    	push 1
  2791 00001FDB 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2792                                  	assert_closure(rax)
    42 00001FE3 803805              <1>  cmp byte [%1], %2
    43 00001FE6 0F8548210100        <1>  jne L_error_incorrect_type
  2793 00001FEC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2794 00001FF0 53                      	push rbx
  2795 00001FF1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2796 00001FF5 FFD3                    	call rbx
  2797 00001FF7 50                      	push rax
  2798 00001FF8 6A01                    	push 1
  2799 00001FFA 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2800                                  	assert_closure(rax)
    42 00002002 803805              <1>  cmp byte [%1], %2
    43 00002005 0F8529210100        <1>  jne L_error_incorrect_type
  2801 0000200B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2802 0000200F 53                      	push rbx
  2803 00002010 FF7508                  	push RET_ADDR
  2804 00002013 488B7D18                	mov rdi, COUNT
  2805 00002017 4883C703                	add rdi, 3
  2806 0000201B 48C1E703                	shl rdi, 3
  2807 0000201F 4801EF                  	add rdi, rbp
  2808 00002022 488B6D00                	mov rbp, OLD_RDP
  2809 00002026 BE00000000              	mov rsi, 0
  2810                                  .L_tc_recycle_frame_loop_5cb1:	 ; start recycle frame loop
  2811 0000202B 4883FE04                	cmp rsi, 4
  2812 0000202F 7427                    	je .L_tc_recycle_frame_done_5cb1
  2813 00002031 B903000000              	mov rcx, 3
  2814 00002036 4829F1                  	sub rcx, rsi
  2815 00002039 48C1E103                	shl rcx, 3
  2816 0000203D 4801E1                  	add rcx, rsp ; rcx is the address to move
  2817 00002040 4889F3                  	mov rbx, rsi
  2818 00002043 48C1E303                	shl rbx, 3
  2819 00002047 48F7DB                  	neg rbx
  2820 0000204A 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2821 0000204D 488B09                  	mov rcx, [rcx]
  2822 00002050 48890B                  	mov [rbx], rcx
  2823 00002053 48FFC6                  	inc rsi
  2824 00002056 EBD3                    	jmp .L_tc_recycle_frame_loop_5cb1
  2825                                  .L_tc_recycle_frame_done_5cb1:	 ; end recycle frame loop
  2826 00002058 BB03000000              	mov rbx, 3
  2827 0000205D 48C1E303                	shl rbx, 3
  2828 00002061 48F7DB                  	neg rbx
  2829 00002064 4801FB                  	add rbx, rdi
  2830 00002067 4889DC                  	mov rsp, rbx
  2831 0000206A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2832 0000206E FFE3                    	jmp rbx
  2833 00002070 C9                      	leave
  2834 00002071 C21800                  	ret 8 * (2 + 1)
  2835                                  .L_lambda_simple_end_4f3d:	; new closure is in rax
  2836 00002074 48890425[60020000]      	mov qword [free_var_76], rax
  2837 0000207C 48B8-                   	mov rax, sob_void
  2837 0000207E [0000000000000000] 
  2838                                  
  2839 00002086 4889C7                  	mov rdi, rax
  2840 00002089 E837080100              	call print_sexpr_if_not_void
  2841                                  
  2842 0000208E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2843 00002093 E81C080100              	call malloc
  2844 00002098 50                      	push rax
  2845 00002099 BF00000000              	mov rdi, 8 * 0	; new rib
  2846 0000209E E811080100              	call malloc
  2847 000020A3 50                      	push rax
  2848 000020A4 BF08000000              	mov rdi, 8 * 1	; extended env
  2849 000020A9 E806080100              	call malloc
  2850 000020AE 488B7D10                	mov rdi, ENV
  2851 000020B2 BE00000000              	mov rsi, 0
  2852 000020B7 BA01000000              	mov rdx, 1
  2853                                  .L_lambda_simple_env_loop_4f3e:	; ext_env[i + 1] <-- env[i]
  2854 000020BC 4883FE00                	cmp rsi, 0
  2855 000020C0 7410                    	je .L_lambda_simple_env_end_4f3e
  2856 000020C2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  2857 000020C6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2858 000020CA 48FFC6                  	inc rsi
  2859 000020CD 48FFC2                  	inc rdx
  2860 000020D0 EBEA                    	jmp .L_lambda_simple_env_loop_4f3e
  2861                                  .L_lambda_simple_env_end_4f3e:
  2862 000020D2 5B                      	pop rbx
  2863 000020D3 BE00000000              	mov rsi, 0
  2864                                  .L_lambda_simple_params_loop_4f3e:	; copy params
  2865 000020D8 4883FE00                	cmp rsi, 0
  2866 000020DC 740E                    	je .L_lambda_simple_params_end_4f3e
  2867 000020DE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2868 000020E3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2869 000020E7 48FFC6                  	inc rsi
  2870 000020EA EBEC                    	jmp .L_lambda_simple_params_loop_4f3e
  2871                                  .L_lambda_simple_params_end_4f3e:
  2872 000020EC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2873 000020EF 4889C3                  	mov rbx, rax
  2874 000020F2 58                      	pop rax
  2875 000020F3 C60005                  	mov byte [rax], T_closure
  2876 000020F6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2877 000020FA 48C74009[07210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f3e
  2878 00002102 E9B7000000              	jmp .L_lambda_simple_end_4f3e
  2879                                  .L_lambda_simple_code_4f3e:	; lambda-simple body
  2880 00002107 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2881 0000210D 740B                    	je .L_lambda_simple_arity_check_ok_4f3e
  2882 0000210F FF742410                	push qword [rsp + 8 * 2]
  2883 00002113 6A01                    	push 1
  2884 00002115 E953070100              	jmp L_error_incorrect_arity_simple
  2885                                  .L_lambda_simple_arity_check_ok_4f3e:
  2886 0000211A C8000000                	enter 0, 0
  2887 0000211E 488B4520                	mov rax, PARAM(0)
  2888 00002122 50                      	push rax
  2889 00002123 6A01                    	push 1
  2890 00002125 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2891                                  	assert_closure(rax)
    42 0000212D 803805              <1>  cmp byte [%1], %2
    43 00002130 0F85FE1F0100        <1>  jne L_error_incorrect_type
  2892 00002136 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2893 0000213A 53                      	push rbx
  2894 0000213B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2895 0000213F FFD3                    	call rbx
  2896 00002141 50                      	push rax
  2897 00002142 6A01                    	push 1
  2898 00002144 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2899                                  	assert_closure(rax)
    42 0000214C 803805              <1>  cmp byte [%1], %2
    43 0000214F 0F85DF1F0100        <1>  jne L_error_incorrect_type
  2900 00002155 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2901 00002159 53                      	push rbx
  2902 0000215A FF7508                  	push RET_ADDR
  2903 0000215D 488B7D18                	mov rdi, COUNT
  2904 00002161 4883C703                	add rdi, 3
  2905 00002165 48C1E703                	shl rdi, 3
  2906 00002169 4801EF                  	add rdi, rbp
  2907 0000216C 488B6D00                	mov rbp, OLD_RDP
  2908 00002170 BE00000000              	mov rsi, 0
  2909                                  .L_tc_recycle_frame_loop_5cb2:	 ; start recycle frame loop
  2910 00002175 4883FE04                	cmp rsi, 4
  2911 00002179 7427                    	je .L_tc_recycle_frame_done_5cb2
  2912 0000217B B903000000              	mov rcx, 3
  2913 00002180 4829F1                  	sub rcx, rsi
  2914 00002183 48C1E103                	shl rcx, 3
  2915 00002187 4801E1                  	add rcx, rsp ; rcx is the address to move
  2916 0000218A 4889F3                  	mov rbx, rsi
  2917 0000218D 48C1E303                	shl rbx, 3
  2918 00002191 48F7DB                  	neg rbx
  2919 00002194 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2920 00002197 488B09                  	mov rcx, [rcx]
  2921 0000219A 48890B                  	mov [rbx], rcx
  2922 0000219D 48FFC6                  	inc rsi
  2923 000021A0 EBD3                    	jmp .L_tc_recycle_frame_loop_5cb2
  2924                                  .L_tc_recycle_frame_done_5cb2:	 ; end recycle frame loop
  2925 000021A2 BB03000000              	mov rbx, 3
  2926 000021A7 48C1E303                	shl rbx, 3
  2927 000021AB 48F7DB                  	neg rbx
  2928 000021AE 4801FB                  	add rbx, rdi
  2929 000021B1 4889DC                  	mov rsp, rbx
  2930 000021B4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2931 000021B8 FFE3                    	jmp rbx
  2932 000021BA C9                      	leave
  2933 000021BB C21800                  	ret 8 * (2 + 1)
  2934                                  .L_lambda_simple_end_4f3e:	; new closure is in rax
  2935 000021BE 48890425[68020000]      	mov qword [free_var_77], rax
  2936 000021C6 48B8-                   	mov rax, sob_void
  2936 000021C8 [0000000000000000] 
  2937                                  
  2938 000021D0 4889C7                  	mov rdi, rax
  2939 000021D3 E8ED060100              	call print_sexpr_if_not_void
  2940                                  
  2941 000021D8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2942 000021DD E8D2060100              	call malloc
  2943 000021E2 50                      	push rax
  2944 000021E3 BF00000000              	mov rdi, 8 * 0	; new rib
  2945 000021E8 E8C7060100              	call malloc
  2946 000021ED 50                      	push rax
  2947 000021EE BF08000000              	mov rdi, 8 * 1	; extended env
  2948 000021F3 E8BC060100              	call malloc
  2949 000021F8 488B7D10                	mov rdi, ENV
  2950 000021FC BE00000000              	mov rsi, 0
  2951 00002201 BA01000000              	mov rdx, 1
  2952                                  .L_lambda_simple_env_loop_4f3f:	; ext_env[i + 1] <-- env[i]
  2953 00002206 4883FE00                	cmp rsi, 0
  2954 0000220A 7410                    	je .L_lambda_simple_env_end_4f3f
  2955 0000220C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  2956 00002210 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2957 00002214 48FFC6                  	inc rsi
  2958 00002217 48FFC2                  	inc rdx
  2959 0000221A EBEA                    	jmp .L_lambda_simple_env_loop_4f3f
  2960                                  .L_lambda_simple_env_end_4f3f:
  2961 0000221C 5B                      	pop rbx
  2962 0000221D BE00000000              	mov rsi, 0
  2963                                  .L_lambda_simple_params_loop_4f3f:	; copy params
  2964 00002222 4883FE00                	cmp rsi, 0
  2965 00002226 740E                    	je .L_lambda_simple_params_end_4f3f
  2966 00002228 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2967 0000222D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2968 00002231 48FFC6                  	inc rsi
  2969 00002234 EBEC                    	jmp .L_lambda_simple_params_loop_4f3f
  2970                                  .L_lambda_simple_params_end_4f3f:
  2971 00002236 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2972 00002239 4889C3                  	mov rbx, rax
  2973 0000223C 58                      	pop rax
  2974 0000223D C60005                  	mov byte [rax], T_closure
  2975 00002240 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2976 00002244 48C74009[51220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f3f
  2977 0000224C E9B7000000              	jmp .L_lambda_simple_end_4f3f
  2978                                  .L_lambda_simple_code_4f3f:	; lambda-simple body
  2979 00002251 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2980 00002257 740B                    	je .L_lambda_simple_arity_check_ok_4f3f
  2981 00002259 FF742410                	push qword [rsp + 8 * 2]
  2982 0000225D 6A01                    	push 1
  2983 0000225F E909060100              	jmp L_error_incorrect_arity_simple
  2984                                  .L_lambda_simple_arity_check_ok_4f3f:
  2985 00002264 C8000000                	enter 0, 0
  2986 00002268 488B4520                	mov rax, PARAM(0)
  2987 0000226C 50                      	push rax
  2988 0000226D 6A01                    	push 1
  2989 0000226F 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2990                                  	assert_closure(rax)
    42 00002277 803805              <1>  cmp byte [%1], %2
    43 0000227A 0F85B41E0100        <1>  jne L_error_incorrect_type
  2991 00002280 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2992 00002284 53                      	push rbx
  2993 00002285 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2994 00002289 FFD3                    	call rbx
  2995 0000228B 50                      	push rax
  2996 0000228C 6A01                    	push 1
  2997 0000228E 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2998                                  	assert_closure(rax)
    42 00002296 803805              <1>  cmp byte [%1], %2
    43 00002299 0F85951E0100        <1>  jne L_error_incorrect_type
  2999 0000229F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3000 000022A3 53                      	push rbx
  3001 000022A4 FF7508                  	push RET_ADDR
  3002 000022A7 488B7D18                	mov rdi, COUNT
  3003 000022AB 4883C703                	add rdi, 3
  3004 000022AF 48C1E703                	shl rdi, 3
  3005 000022B3 4801EF                  	add rdi, rbp
  3006 000022B6 488B6D00                	mov rbp, OLD_RDP
  3007 000022BA BE00000000              	mov rsi, 0
  3008                                  .L_tc_recycle_frame_loop_5cb3:	 ; start recycle frame loop
  3009 000022BF 4883FE04                	cmp rsi, 4
  3010 000022C3 7427                    	je .L_tc_recycle_frame_done_5cb3
  3011 000022C5 B903000000              	mov rcx, 3
  3012 000022CA 4829F1                  	sub rcx, rsi
  3013 000022CD 48C1E103                	shl rcx, 3
  3014 000022D1 4801E1                  	add rcx, rsp ; rcx is the address to move
  3015 000022D4 4889F3                  	mov rbx, rsi
  3016 000022D7 48C1E303                	shl rbx, 3
  3017 000022DB 48F7DB                  	neg rbx
  3018 000022DE 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3019 000022E1 488B09                  	mov rcx, [rcx]
  3020 000022E4 48890B                  	mov [rbx], rcx
  3021 000022E7 48FFC6                  	inc rsi
  3022 000022EA EBD3                    	jmp .L_tc_recycle_frame_loop_5cb3
  3023                                  .L_tc_recycle_frame_done_5cb3:	 ; end recycle frame loop
  3024 000022EC BB03000000              	mov rbx, 3
  3025 000022F1 48C1E303                	shl rbx, 3
  3026 000022F5 48F7DB                  	neg rbx
  3027 000022F8 4801FB                  	add rbx, rdi
  3028 000022FB 4889DC                  	mov rsp, rbx
  3029 000022FE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3030 00002302 FFE3                    	jmp rbx
  3031 00002304 C9                      	leave
  3032 00002305 C21800                  	ret 8 * (2 + 1)
  3033                                  .L_lambda_simple_end_4f3f:	; new closure is in rax
  3034 00002308 48890425[70020000]      	mov qword [free_var_78], rax
  3035 00002310 48B8-                   	mov rax, sob_void
  3035 00002312 [0000000000000000] 
  3036                                  
  3037 0000231A 4889C7                  	mov rdi, rax
  3038 0000231D E8A3050100              	call print_sexpr_if_not_void
  3039                                  
  3040 00002322 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3041 00002327 E888050100              	call malloc
  3042 0000232C 50                      	push rax
  3043 0000232D BF00000000              	mov rdi, 8 * 0	; new rib
  3044 00002332 E87D050100              	call malloc
  3045 00002337 50                      	push rax
  3046 00002338 BF08000000              	mov rdi, 8 * 1	; extended env
  3047 0000233D E872050100              	call malloc
  3048 00002342 488B7D10                	mov rdi, ENV
  3049 00002346 BE00000000              	mov rsi, 0
  3050 0000234B BA01000000              	mov rdx, 1
  3051                                  .L_lambda_simple_env_loop_4f40:	; ext_env[i + 1] <-- env[i]
  3052 00002350 4883FE00                	cmp rsi, 0
  3053 00002354 7410                    	je .L_lambda_simple_env_end_4f40
  3054 00002356 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  3055 0000235A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3056 0000235E 48FFC6                  	inc rsi
  3057 00002361 48FFC2                  	inc rdx
  3058 00002364 EBEA                    	jmp .L_lambda_simple_env_loop_4f40
  3059                                  .L_lambda_simple_env_end_4f40:
  3060 00002366 5B                      	pop rbx
  3061 00002367 BE00000000              	mov rsi, 0
  3062                                  .L_lambda_simple_params_loop_4f40:	; copy params
  3063 0000236C 4883FE00                	cmp rsi, 0
  3064 00002370 740E                    	je .L_lambda_simple_params_end_4f40
  3065 00002372 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3066 00002377 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3067 0000237B 48FFC6                  	inc rsi
  3068 0000237E EBEC                    	jmp .L_lambda_simple_params_loop_4f40
  3069                                  .L_lambda_simple_params_end_4f40:
  3070 00002380 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3071 00002383 4889C3                  	mov rbx, rax
  3072 00002386 58                      	pop rax
  3073 00002387 C60005                  	mov byte [rax], T_closure
  3074 0000238A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3075 0000238E 48C74009[9B230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f40
  3076 00002396 E9B7000000              	jmp .L_lambda_simple_end_4f40
  3077                                  .L_lambda_simple_code_4f40:	; lambda-simple body
  3078 0000239B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3079 000023A1 740B                    	je .L_lambda_simple_arity_check_ok_4f40
  3080 000023A3 FF742410                	push qword [rsp + 8 * 2]
  3081 000023A7 6A01                    	push 1
  3082 000023A9 E9BF040100              	jmp L_error_incorrect_arity_simple
  3083                                  .L_lambda_simple_arity_check_ok_4f40:
  3084 000023AE C8000000                	enter 0, 0
  3085 000023B2 488B4520                	mov rax, PARAM(0)
  3086 000023B6 50                      	push rax
  3087 000023B7 6A01                    	push 1
  3088 000023B9 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3089                                  	assert_closure(rax)
    42 000023C1 803805              <1>  cmp byte [%1], %2
    43 000023C4 0F856A1D0100        <1>  jne L_error_incorrect_type
  3090 000023CA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3091 000023CE 53                      	push rbx
  3092 000023CF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3093 000023D3 FFD3                    	call rbx
  3094 000023D5 50                      	push rax
  3095 000023D6 6A01                    	push 1
  3096 000023D8 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3097                                  	assert_closure(rax)
    42 000023E0 803805              <1>  cmp byte [%1], %2
    43 000023E3 0F854B1D0100        <1>  jne L_error_incorrect_type
  3098 000023E9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3099 000023ED 53                      	push rbx
  3100 000023EE FF7508                  	push RET_ADDR
  3101 000023F1 488B7D18                	mov rdi, COUNT
  3102 000023F5 4883C703                	add rdi, 3
  3103 000023F9 48C1E703                	shl rdi, 3
  3104 000023FD 4801EF                  	add rdi, rbp
  3105 00002400 488B6D00                	mov rbp, OLD_RDP
  3106 00002404 BE00000000              	mov rsi, 0
  3107                                  .L_tc_recycle_frame_loop_5cb4:	 ; start recycle frame loop
  3108 00002409 4883FE04                	cmp rsi, 4
  3109 0000240D 7427                    	je .L_tc_recycle_frame_done_5cb4
  3110 0000240F B903000000              	mov rcx, 3
  3111 00002414 4829F1                  	sub rcx, rsi
  3112 00002417 48C1E103                	shl rcx, 3
  3113 0000241B 4801E1                  	add rcx, rsp ; rcx is the address to move
  3114 0000241E 4889F3                  	mov rbx, rsi
  3115 00002421 48C1E303                	shl rbx, 3
  3116 00002425 48F7DB                  	neg rbx
  3117 00002428 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3118 0000242B 488B09                  	mov rcx, [rcx]
  3119 0000242E 48890B                  	mov [rbx], rcx
  3120 00002431 48FFC6                  	inc rsi
  3121 00002434 EBD3                    	jmp .L_tc_recycle_frame_loop_5cb4
  3122                                  .L_tc_recycle_frame_done_5cb4:	 ; end recycle frame loop
  3123 00002436 BB03000000              	mov rbx, 3
  3124 0000243B 48C1E303                	shl rbx, 3
  3125 0000243F 48F7DB                  	neg rbx
  3126 00002442 4801FB                  	add rbx, rdi
  3127 00002445 4889DC                  	mov rsp, rbx
  3128 00002448 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3129 0000244C FFE3                    	jmp rbx
  3130 0000244E C9                      	leave
  3131 0000244F C21800                  	ret 8 * (2 + 1)
  3132                                  .L_lambda_simple_end_4f40:	; new closure is in rax
  3133 00002452 48890425[78020000]      	mov qword [free_var_79], rax
  3134 0000245A 48B8-                   	mov rax, sob_void
  3134 0000245C [0000000000000000] 
  3135                                  
  3136 00002464 4889C7                  	mov rdi, rax
  3137 00002467 E859040100              	call print_sexpr_if_not_void
  3138                                  
  3139 0000246C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3140 00002471 E83E040100              	call malloc
  3141 00002476 50                      	push rax
  3142 00002477 BF00000000              	mov rdi, 8 * 0	; new rib
  3143 0000247C E833040100              	call malloc
  3144 00002481 50                      	push rax
  3145 00002482 BF08000000              	mov rdi, 8 * 1	; extended env
  3146 00002487 E828040100              	call malloc
  3147 0000248C 488B7D10                	mov rdi, ENV
  3148 00002490 BE00000000              	mov rsi, 0
  3149 00002495 BA01000000              	mov rdx, 1
  3150                                  .L_lambda_simple_env_loop_4f41:	; ext_env[i + 1] <-- env[i]
  3151 0000249A 4883FE00                	cmp rsi, 0
  3152 0000249E 7410                    	je .L_lambda_simple_env_end_4f41
  3153 000024A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  3154 000024A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3155 000024A8 48FFC6                  	inc rsi
  3156 000024AB 48FFC2                  	inc rdx
  3157 000024AE EBEA                    	jmp .L_lambda_simple_env_loop_4f41
  3158                                  .L_lambda_simple_env_end_4f41:
  3159 000024B0 5B                      	pop rbx
  3160 000024B1 BE00000000              	mov rsi, 0
  3161                                  .L_lambda_simple_params_loop_4f41:	; copy params
  3162 000024B6 4883FE00                	cmp rsi, 0
  3163 000024BA 740E                    	je .L_lambda_simple_params_end_4f41
  3164 000024BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3165 000024C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3166 000024C5 48FFC6                  	inc rsi
  3167 000024C8 EBEC                    	jmp .L_lambda_simple_params_loop_4f41
  3168                                  .L_lambda_simple_params_end_4f41:
  3169 000024CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3170 000024CD 4889C3                  	mov rbx, rax
  3171 000024D0 58                      	pop rax
  3172 000024D1 C60005                  	mov byte [rax], T_closure
  3173 000024D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3174 000024D8 48C74009[E5240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f41
  3175 000024E0 E9B7000000              	jmp .L_lambda_simple_end_4f41
  3176                                  .L_lambda_simple_code_4f41:	; lambda-simple body
  3177 000024E5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3178 000024EB 740B                    	je .L_lambda_simple_arity_check_ok_4f41
  3179 000024ED FF742410                	push qword [rsp + 8 * 2]
  3180 000024F1 6A01                    	push 1
  3181 000024F3 E975030100              	jmp L_error_incorrect_arity_simple
  3182                                  .L_lambda_simple_arity_check_ok_4f41:
  3183 000024F8 C8000000                	enter 0, 0
  3184 000024FC 488B4520                	mov rax, PARAM(0)
  3185 00002500 50                      	push rax
  3186 00002501 6A01                    	push 1
  3187 00002503 488B0425[C0010000]      	mov rax, qword [free_var_56]
  3188                                  	assert_closure(rax)
    42 0000250B 803805              <1>  cmp byte [%1], %2
    43 0000250E 0F85201C0100        <1>  jne L_error_incorrect_type
  3189 00002514 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3190 00002518 53                      	push rbx
  3191 00002519 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3192 0000251D FFD3                    	call rbx
  3193 0000251F 50                      	push rax
  3194 00002520 6A01                    	push 1
  3195 00002522 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3196                                  	assert_closure(rax)
    42 0000252A 803805              <1>  cmp byte [%1], %2
    43 0000252D 0F85011C0100        <1>  jne L_error_incorrect_type
  3197 00002533 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3198 00002537 53                      	push rbx
  3199 00002538 FF7508                  	push RET_ADDR
  3200 0000253B 488B7D18                	mov rdi, COUNT
  3201 0000253F 4883C703                	add rdi, 3
  3202 00002543 48C1E703                	shl rdi, 3
  3203 00002547 4801EF                  	add rdi, rbp
  3204 0000254A 488B6D00                	mov rbp, OLD_RDP
  3205 0000254E BE00000000              	mov rsi, 0
  3206                                  .L_tc_recycle_frame_loop_5cb5:	 ; start recycle frame loop
  3207 00002553 4883FE04                	cmp rsi, 4
  3208 00002557 7427                    	je .L_tc_recycle_frame_done_5cb5
  3209 00002559 B903000000              	mov rcx, 3
  3210 0000255E 4829F1                  	sub rcx, rsi
  3211 00002561 48C1E103                	shl rcx, 3
  3212 00002565 4801E1                  	add rcx, rsp ; rcx is the address to move
  3213 00002568 4889F3                  	mov rbx, rsi
  3214 0000256B 48C1E303                	shl rbx, 3
  3215 0000256F 48F7DB                  	neg rbx
  3216 00002572 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3217 00002575 488B09                  	mov rcx, [rcx]
  3218 00002578 48890B                  	mov [rbx], rcx
  3219 0000257B 48FFC6                  	inc rsi
  3220 0000257E EBD3                    	jmp .L_tc_recycle_frame_loop_5cb5
  3221                                  .L_tc_recycle_frame_done_5cb5:	 ; end recycle frame loop
  3222 00002580 BB03000000              	mov rbx, 3
  3223 00002585 48C1E303                	shl rbx, 3
  3224 00002589 48F7DB                  	neg rbx
  3225 0000258C 4801FB                  	add rbx, rdi
  3226 0000258F 4889DC                  	mov rsp, rbx
  3227 00002592 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3228 00002596 FFE3                    	jmp rbx
  3229 00002598 C9                      	leave
  3230 00002599 C21800                  	ret 8 * (2 + 1)
  3231                                  .L_lambda_simple_end_4f41:	; new closure is in rax
  3232 0000259C 48890425[80020000]      	mov qword [free_var_80], rax
  3233 000025A4 48B8-                   	mov rax, sob_void
  3233 000025A6 [0000000000000000] 
  3234                                  
  3235 000025AE 4889C7                  	mov rdi, rax
  3236 000025B1 E80F030100              	call print_sexpr_if_not_void
  3237                                  
  3238 000025B6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3239 000025BB E8F4020100              	call malloc
  3240 000025C0 50                      	push rax
  3241 000025C1 BF00000000              	mov rdi, 8 * 0	; new rib
  3242 000025C6 E8E9020100              	call malloc
  3243 000025CB 50                      	push rax
  3244 000025CC BF08000000              	mov rdi, 8 * 1	; extended env
  3245 000025D1 E8DE020100              	call malloc
  3246 000025D6 488B7D10                	mov rdi, ENV
  3247 000025DA BE00000000              	mov rsi, 0
  3248 000025DF BA01000000              	mov rdx, 1
  3249                                  .L_lambda_simple_env_loop_4f42:	; ext_env[i + 1] <-- env[i]
  3250 000025E4 4883FE00                	cmp rsi, 0
  3251 000025E8 7410                    	je .L_lambda_simple_env_end_4f42
  3252 000025EA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  3253 000025EE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3254 000025F2 48FFC6                  	inc rsi
  3255 000025F5 48FFC2                  	inc rdx
  3256 000025F8 EBEA                    	jmp .L_lambda_simple_env_loop_4f42
  3257                                  .L_lambda_simple_env_end_4f42:
  3258 000025FA 5B                      	pop rbx
  3259 000025FB BE00000000              	mov rsi, 0
  3260                                  .L_lambda_simple_params_loop_4f42:	; copy params
  3261 00002600 4883FE00                	cmp rsi, 0
  3262 00002604 740E                    	je .L_lambda_simple_params_end_4f42
  3263 00002606 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3264 0000260B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3265 0000260F 48FFC6                  	inc rsi
  3266 00002612 EBEC                    	jmp .L_lambda_simple_params_loop_4f42
  3267                                  .L_lambda_simple_params_end_4f42:
  3268 00002614 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3269 00002617 4889C3                  	mov rbx, rax
  3270 0000261A 58                      	pop rax
  3271 0000261B C60005                  	mov byte [rax], T_closure
  3272 0000261E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3273 00002622 48C74009[2F260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f42
  3274 0000262A E9B7000000              	jmp .L_lambda_simple_end_4f42
  3275                                  .L_lambda_simple_code_4f42:	; lambda-simple body
  3276 0000262F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3277 00002635 740B                    	je .L_lambda_simple_arity_check_ok_4f42
  3278 00002637 FF742410                	push qword [rsp + 8 * 2]
  3279 0000263B 6A01                    	push 1
  3280 0000263D E92B020100              	jmp L_error_incorrect_arity_simple
  3281                                  .L_lambda_simple_arity_check_ok_4f42:
  3282 00002642 C8000000                	enter 0, 0
  3283 00002646 488B4520                	mov rax, PARAM(0)
  3284 0000264A 50                      	push rax
  3285 0000264B 6A01                    	push 1
  3286 0000264D 488B0425[C8010000]      	mov rax, qword [free_var_57]
  3287                                  	assert_closure(rax)
    42 00002655 803805              <1>  cmp byte [%1], %2
    43 00002658 0F85D61A0100        <1>  jne L_error_incorrect_type
  3288 0000265E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3289 00002662 53                      	push rbx
  3290 00002663 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3291 00002667 FFD3                    	call rbx
  3292 00002669 50                      	push rax
  3293 0000266A 6A01                    	push 1
  3294 0000266C 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3295                                  	assert_closure(rax)
    42 00002674 803805              <1>  cmp byte [%1], %2
    43 00002677 0F85B71A0100        <1>  jne L_error_incorrect_type
  3296 0000267D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3297 00002681 53                      	push rbx
  3298 00002682 FF7508                  	push RET_ADDR
  3299 00002685 488B7D18                	mov rdi, COUNT
  3300 00002689 4883C703                	add rdi, 3
  3301 0000268D 48C1E703                	shl rdi, 3
  3302 00002691 4801EF                  	add rdi, rbp
  3303 00002694 488B6D00                	mov rbp, OLD_RDP
  3304 00002698 BE00000000              	mov rsi, 0
  3305                                  .L_tc_recycle_frame_loop_5cb6:	 ; start recycle frame loop
  3306 0000269D 4883FE04                	cmp rsi, 4
  3307 000026A1 7427                    	je .L_tc_recycle_frame_done_5cb6
  3308 000026A3 B903000000              	mov rcx, 3
  3309 000026A8 4829F1                  	sub rcx, rsi
  3310 000026AB 48C1E103                	shl rcx, 3
  3311 000026AF 4801E1                  	add rcx, rsp ; rcx is the address to move
  3312 000026B2 4889F3                  	mov rbx, rsi
  3313 000026B5 48C1E303                	shl rbx, 3
  3314 000026B9 48F7DB                  	neg rbx
  3315 000026BC 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3316 000026BF 488B09                  	mov rcx, [rcx]
  3317 000026C2 48890B                  	mov [rbx], rcx
  3318 000026C5 48FFC6                  	inc rsi
  3319 000026C8 EBD3                    	jmp .L_tc_recycle_frame_loop_5cb6
  3320                                  .L_tc_recycle_frame_done_5cb6:	 ; end recycle frame loop
  3321 000026CA BB03000000              	mov rbx, 3
  3322 000026CF 48C1E303                	shl rbx, 3
  3323 000026D3 48F7DB                  	neg rbx
  3324 000026D6 4801FB                  	add rbx, rdi
  3325 000026D9 4889DC                  	mov rsp, rbx
  3326 000026DC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3327 000026E0 FFE3                    	jmp rbx
  3328 000026E2 C9                      	leave
  3329 000026E3 C21800                  	ret 8 * (2 + 1)
  3330                                  .L_lambda_simple_end_4f42:	; new closure is in rax
  3331 000026E6 48890425[88020000]      	mov qword [free_var_81], rax
  3332 000026EE 48B8-                   	mov rax, sob_void
  3332 000026F0 [0000000000000000] 
  3333                                  
  3334 000026F8 4889C7                  	mov rdi, rax
  3335 000026FB E8C5010100              	call print_sexpr_if_not_void
  3336                                  
  3337 00002700 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3338 00002705 E8AA010100              	call malloc
  3339 0000270A 50                      	push rax
  3340 0000270B BF00000000              	mov rdi, 8 * 0	; new rib
  3341 00002710 E89F010100              	call malloc
  3342 00002715 50                      	push rax
  3343 00002716 BF08000000              	mov rdi, 8 * 1	; extended env
  3344 0000271B E894010100              	call malloc
  3345 00002720 488B7D10                	mov rdi, ENV
  3346 00002724 BE00000000              	mov rsi, 0
  3347 00002729 BA01000000              	mov rdx, 1
  3348                                  .L_lambda_simple_env_loop_4f43:	; ext_env[i + 1] <-- env[i]
  3349 0000272E 4883FE00                	cmp rsi, 0
  3350 00002732 7410                    	je .L_lambda_simple_env_end_4f43
  3351 00002734 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  3352 00002738 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3353 0000273C 48FFC6                  	inc rsi
  3354 0000273F 48FFC2                  	inc rdx
  3355 00002742 EBEA                    	jmp .L_lambda_simple_env_loop_4f43
  3356                                  .L_lambda_simple_env_end_4f43:
  3357 00002744 5B                      	pop rbx
  3358 00002745 BE00000000              	mov rsi, 0
  3359                                  .L_lambda_simple_params_loop_4f43:	; copy params
  3360 0000274A 4883FE00                	cmp rsi, 0
  3361 0000274E 740E                    	je .L_lambda_simple_params_end_4f43
  3362 00002750 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3363 00002755 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3364 00002759 48FFC6                  	inc rsi
  3365 0000275C EBEC                    	jmp .L_lambda_simple_params_loop_4f43
  3366                                  .L_lambda_simple_params_end_4f43:
  3367 0000275E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3368 00002761 4889C3                  	mov rbx, rax
  3369 00002764 58                      	pop rax
  3370 00002765 C60005                  	mov byte [rax], T_closure
  3371 00002768 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3372 0000276C 48C74009[79270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f43
  3373 00002774 E9B7000000              	jmp .L_lambda_simple_end_4f43
  3374                                  .L_lambda_simple_code_4f43:	; lambda-simple body
  3375 00002779 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3376 0000277F 740B                    	je .L_lambda_simple_arity_check_ok_4f43
  3377 00002781 FF742410                	push qword [rsp + 8 * 2]
  3378 00002785 6A01                    	push 1
  3379 00002787 E9E1000100              	jmp L_error_incorrect_arity_simple
  3380                                  .L_lambda_simple_arity_check_ok_4f43:
  3381 0000278C C8000000                	enter 0, 0
  3382 00002790 488B4520                	mov rax, PARAM(0)
  3383 00002794 50                      	push rax
  3384 00002795 6A01                    	push 1
  3385 00002797 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3386                                  	assert_closure(rax)
    42 0000279F 803805              <1>  cmp byte [%1], %2
    43 000027A2 0F858C190100        <1>  jne L_error_incorrect_type
  3387 000027A8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3388 000027AC 53                      	push rbx
  3389 000027AD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3390 000027B1 FFD3                    	call rbx
  3391 000027B3 50                      	push rax
  3392 000027B4 6A01                    	push 1
  3393 000027B6 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3394                                  	assert_closure(rax)
    42 000027BE 803805              <1>  cmp byte [%1], %2
    43 000027C1 0F856D190100        <1>  jne L_error_incorrect_type
  3395 000027C7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3396 000027CB 53                      	push rbx
  3397 000027CC FF7508                  	push RET_ADDR
  3398 000027CF 488B7D18                	mov rdi, COUNT
  3399 000027D3 4883C703                	add rdi, 3
  3400 000027D7 48C1E703                	shl rdi, 3
  3401 000027DB 4801EF                  	add rdi, rbp
  3402 000027DE 488B6D00                	mov rbp, OLD_RDP
  3403 000027E2 BE00000000              	mov rsi, 0
  3404                                  .L_tc_recycle_frame_loop_5cb7:	 ; start recycle frame loop
  3405 000027E7 4883FE04                	cmp rsi, 4
  3406 000027EB 7427                    	je .L_tc_recycle_frame_done_5cb7
  3407 000027ED B903000000              	mov rcx, 3
  3408 000027F2 4829F1                  	sub rcx, rsi
  3409 000027F5 48C1E103                	shl rcx, 3
  3410 000027F9 4801E1                  	add rcx, rsp ; rcx is the address to move
  3411 000027FC 4889F3                  	mov rbx, rsi
  3412 000027FF 48C1E303                	shl rbx, 3
  3413 00002803 48F7DB                  	neg rbx
  3414 00002806 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3415 00002809 488B09                  	mov rcx, [rcx]
  3416 0000280C 48890B                  	mov [rbx], rcx
  3417 0000280F 48FFC6                  	inc rsi
  3418 00002812 EBD3                    	jmp .L_tc_recycle_frame_loop_5cb7
  3419                                  .L_tc_recycle_frame_done_5cb7:	 ; end recycle frame loop
  3420 00002814 BB03000000              	mov rbx, 3
  3421 00002819 48C1E303                	shl rbx, 3
  3422 0000281D 48F7DB                  	neg rbx
  3423 00002820 4801FB                  	add rbx, rdi
  3424 00002823 4889DC                  	mov rsp, rbx
  3425 00002826 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3426 0000282A FFE3                    	jmp rbx
  3427 0000282C C9                      	leave
  3428 0000282D C21800                  	ret 8 * (2 + 1)
  3429                                  .L_lambda_simple_end_4f43:	; new closure is in rax
  3430 00002830 48890425[90020000]      	mov qword [free_var_82], rax
  3431 00002838 48B8-                   	mov rax, sob_void
  3431 0000283A [0000000000000000] 
  3432                                  
  3433 00002842 4889C7                  	mov rdi, rax
  3434 00002845 E87B000100              	call print_sexpr_if_not_void
  3435                                  
  3436 0000284A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3437 0000284F E860000100              	call malloc
  3438 00002854 50                      	push rax
  3439 00002855 BF00000000              	mov rdi, 8 * 0	; new rib
  3440 0000285A E855000100              	call malloc
  3441 0000285F 50                      	push rax
  3442 00002860 BF08000000              	mov rdi, 8 * 1	; extended env
  3443 00002865 E84A000100              	call malloc
  3444 0000286A 488B7D10                	mov rdi, ENV
  3445 0000286E BE00000000              	mov rsi, 0
  3446 00002873 BA01000000              	mov rdx, 1
  3447                                  .L_lambda_simple_env_loop_4f44:	; ext_env[i + 1] <-- env[i]
  3448 00002878 4883FE00                	cmp rsi, 0
  3449 0000287C 7410                    	je .L_lambda_simple_env_end_4f44
  3450 0000287E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  3451 00002882 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3452 00002886 48FFC6                  	inc rsi
  3453 00002889 48FFC2                  	inc rdx
  3454 0000288C EBEA                    	jmp .L_lambda_simple_env_loop_4f44
  3455                                  .L_lambda_simple_env_end_4f44:
  3456 0000288E 5B                      	pop rbx
  3457 0000288F BE00000000              	mov rsi, 0
  3458                                  .L_lambda_simple_params_loop_4f44:	; copy params
  3459 00002894 4883FE00                	cmp rsi, 0
  3460 00002898 740E                    	je .L_lambda_simple_params_end_4f44
  3461 0000289A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3462 0000289F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3463 000028A3 48FFC6                  	inc rsi
  3464 000028A6 EBEC                    	jmp .L_lambda_simple_params_loop_4f44
  3465                                  .L_lambda_simple_params_end_4f44:
  3466 000028A8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3467 000028AB 4889C3                  	mov rbx, rax
  3468 000028AE 58                      	pop rax
  3469 000028AF C60005                  	mov byte [rax], T_closure
  3470 000028B2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3471 000028B6 48C74009[C3280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f44
  3472 000028BE E9B7000000              	jmp .L_lambda_simple_end_4f44
  3473                                  .L_lambda_simple_code_4f44:	; lambda-simple body
  3474 000028C3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3475 000028C9 740B                    	je .L_lambda_simple_arity_check_ok_4f44
  3476 000028CB FF742410                	push qword [rsp + 8 * 2]
  3477 000028CF 6A01                    	push 1
  3478 000028D1 E997FF0000              	jmp L_error_incorrect_arity_simple
  3479                                  .L_lambda_simple_arity_check_ok_4f44:
  3480 000028D6 C8000000                	enter 0, 0
  3481 000028DA 488B4520                	mov rax, PARAM(0)
  3482 000028DE 50                      	push rax
  3483 000028DF 6A01                    	push 1
  3484 000028E1 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3485                                  	assert_closure(rax)
    42 000028E9 803805              <1>  cmp byte [%1], %2
    43 000028EC 0F8542180100        <1>  jne L_error_incorrect_type
  3486 000028F2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3487 000028F6 53                      	push rbx
  3488 000028F7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3489 000028FB FFD3                    	call rbx
  3490 000028FD 50                      	push rax
  3491 000028FE 6A01                    	push 1
  3492 00002900 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3493                                  	assert_closure(rax)
    42 00002908 803805              <1>  cmp byte [%1], %2
    43 0000290B 0F8523180100        <1>  jne L_error_incorrect_type
  3494 00002911 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3495 00002915 53                      	push rbx
  3496 00002916 FF7508                  	push RET_ADDR
  3497 00002919 488B7D18                	mov rdi, COUNT
  3498 0000291D 4883C703                	add rdi, 3
  3499 00002921 48C1E703                	shl rdi, 3
  3500 00002925 4801EF                  	add rdi, rbp
  3501 00002928 488B6D00                	mov rbp, OLD_RDP
  3502 0000292C BE00000000              	mov rsi, 0
  3503                                  .L_tc_recycle_frame_loop_5cb8:	 ; start recycle frame loop
  3504 00002931 4883FE04                	cmp rsi, 4
  3505 00002935 7427                    	je .L_tc_recycle_frame_done_5cb8
  3506 00002937 B903000000              	mov rcx, 3
  3507 0000293C 4829F1                  	sub rcx, rsi
  3508 0000293F 48C1E103                	shl rcx, 3
  3509 00002943 4801E1                  	add rcx, rsp ; rcx is the address to move
  3510 00002946 4889F3                  	mov rbx, rsi
  3511 00002949 48C1E303                	shl rbx, 3
  3512 0000294D 48F7DB                  	neg rbx
  3513 00002950 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3514 00002953 488B09                  	mov rcx, [rcx]
  3515 00002956 48890B                  	mov [rbx], rcx
  3516 00002959 48FFC6                  	inc rsi
  3517 0000295C EBD3                    	jmp .L_tc_recycle_frame_loop_5cb8
  3518                                  .L_tc_recycle_frame_done_5cb8:	 ; end recycle frame loop
  3519 0000295E BB03000000              	mov rbx, 3
  3520 00002963 48C1E303                	shl rbx, 3
  3521 00002967 48F7DB                  	neg rbx
  3522 0000296A 4801FB                  	add rbx, rdi
  3523 0000296D 4889DC                  	mov rsp, rbx
  3524 00002970 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3525 00002974 FFE3                    	jmp rbx
  3526 00002976 C9                      	leave
  3527 00002977 C21800                  	ret 8 * (2 + 1)
  3528                                  .L_lambda_simple_end_4f44:	; new closure is in rax
  3529 0000297A 48890425[98020000]      	mov qword [free_var_83], rax
  3530 00002982 48B8-                   	mov rax, sob_void
  3530 00002984 [0000000000000000] 
  3531                                  
  3532 0000298C 4889C7                  	mov rdi, rax
  3533 0000298F E831FF0000              	call print_sexpr_if_not_void
  3534                                  
  3535 00002994 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3536 00002999 E816FF0000              	call malloc
  3537 0000299E 50                      	push rax
  3538 0000299F BF00000000              	mov rdi, 8 * 0	; new rib
  3539 000029A4 E80BFF0000              	call malloc
  3540 000029A9 50                      	push rax
  3541 000029AA BF08000000              	mov rdi, 8 * 1	; extended env
  3542 000029AF E800FF0000              	call malloc
  3543 000029B4 488B7D10                	mov rdi, ENV
  3544 000029B8 BE00000000              	mov rsi, 0
  3545 000029BD BA01000000              	mov rdx, 1
  3546                                  .L_lambda_simple_env_loop_4f45:	; ext_env[i + 1] <-- env[i]
  3547 000029C2 4883FE00                	cmp rsi, 0
  3548 000029C6 7410                    	je .L_lambda_simple_env_end_4f45
  3549 000029C8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  3550 000029CC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3551 000029D0 48FFC6                  	inc rsi
  3552 000029D3 48FFC2                  	inc rdx
  3553 000029D6 EBEA                    	jmp .L_lambda_simple_env_loop_4f45
  3554                                  .L_lambda_simple_env_end_4f45:
  3555 000029D8 5B                      	pop rbx
  3556 000029D9 BE00000000              	mov rsi, 0
  3557                                  .L_lambda_simple_params_loop_4f45:	; copy params
  3558 000029DE 4883FE00                	cmp rsi, 0
  3559 000029E2 740E                    	je .L_lambda_simple_params_end_4f45
  3560 000029E4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3561 000029E9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3562 000029ED 48FFC6                  	inc rsi
  3563 000029F0 EBEC                    	jmp .L_lambda_simple_params_loop_4f45
  3564                                  .L_lambda_simple_params_end_4f45:
  3565 000029F2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3566 000029F5 4889C3                  	mov rbx, rax
  3567 000029F8 58                      	pop rax
  3568 000029F9 C60005                  	mov byte [rax], T_closure
  3569 000029FC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3570 00002A00 48C74009[0D2A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f45
  3571 00002A08 E91F010000              	jmp .L_lambda_simple_end_4f45
  3572                                  .L_lambda_simple_code_4f45:	; lambda-simple body
  3573 00002A0D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3574 00002A13 740B                    	je .L_lambda_simple_arity_check_ok_4f45
  3575 00002A15 FF742410                	push qword [rsp + 8 * 2]
  3576 00002A19 6A01                    	push 1
  3577 00002A1B E94DFE0000              	jmp L_error_incorrect_arity_simple
  3578                                  .L_lambda_simple_arity_check_ok_4f45:
  3579 00002A20 C8000000                	enter 0, 0
  3580 00002A24 488B4520                	mov rax, PARAM(0)
  3581 00002A28 50                      	push rax
  3582 00002A29 6A01                    	push 1
  3583 00002A2B 488B0425[00000000]      	mov rax, qword [free_var_0]
  3584                                  	assert_closure(rax)
    42 00002A33 803805              <1>  cmp byte [%1], %2
    43 00002A36 0F85F8160100        <1>  jne L_error_incorrect_type
  3585 00002A3C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3586 00002A40 53                      	push rbx
  3587 00002A41 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3588 00002A45 FFD3                    	call rbx
  3589 00002A47 483D[02000000]          	cmp rax, sob_boolean_false
  3590 00002A4D 0F85D5000000            	jne .L_or_end_0614
  3591 00002A53 488B4520                	mov rax, PARAM(0)
  3592 00002A57 50                      	push rax
  3593 00002A58 6A01                    	push 1
  3594 00002A5A 488B0425[08000000]      	mov rax, qword [free_var_1]
  3595                                  	assert_closure(rax)
    42 00002A62 803805              <1>  cmp byte [%1], %2
    43 00002A65 0F85C9160100        <1>  jne L_error_incorrect_type
  3596 00002A6B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3597 00002A6F 53                      	push rbx
  3598 00002A70 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3599 00002A74 FFD3                    	call rbx
  3600 00002A76 483D[02000000]          	cmp rax, sob_boolean_false
  3601 00002A7C 0F849E000000            	je .L_if_else_567c
  3602 00002A82 488B4520                	mov rax, PARAM(0)
  3603 00002A86 50                      	push rax
  3604 00002A87 6A01                    	push 1
  3605 00002A89 488B0425[88000000]      	mov rax, qword [free_var_17]
  3606                                  	assert_closure(rax)
    42 00002A91 803805              <1>  cmp byte [%1], %2
    43 00002A94 0F859A160100        <1>  jne L_error_incorrect_type
  3607 00002A9A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3608 00002A9E 53                      	push rbx
  3609 00002A9F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3610 00002AA3 FFD3                    	call rbx
  3611 00002AA5 50                      	push rax
  3612 00002AA6 6A01                    	push 1
  3613 00002AA8 488B0425[A0020000]      	mov rax, qword [free_var_84]
  3614                                  	assert_closure(rax)
    42 00002AB0 803805              <1>  cmp byte [%1], %2
    43 00002AB3 0F857B160100        <1>  jne L_error_incorrect_type
  3615 00002AB9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3616 00002ABD 53                      	push rbx
  3617 00002ABE FF7508                  	push RET_ADDR
  3618 00002AC1 488B7D18                	mov rdi, COUNT
  3619 00002AC5 4883C703                	add rdi, 3
  3620 00002AC9 48C1E703                	shl rdi, 3
  3621 00002ACD 4801EF                  	add rdi, rbp
  3622 00002AD0 488B6D00                	mov rbp, OLD_RDP
  3623 00002AD4 BE00000000              	mov rsi, 0
  3624                                  .L_tc_recycle_frame_loop_5cb9:	 ; start recycle frame loop
  3625 00002AD9 4883FE04                	cmp rsi, 4
  3626 00002ADD 7427                    	je .L_tc_recycle_frame_done_5cb9
  3627 00002ADF B903000000              	mov rcx, 3
  3628 00002AE4 4829F1                  	sub rcx, rsi
  3629 00002AE7 48C1E103                	shl rcx, 3
  3630 00002AEB 4801E1                  	add rcx, rsp ; rcx is the address to move
  3631 00002AEE 4889F3                  	mov rbx, rsi
  3632 00002AF1 48C1E303                	shl rbx, 3
  3633 00002AF5 48F7DB                  	neg rbx
  3634 00002AF8 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3635 00002AFB 488B09                  	mov rcx, [rcx]
  3636 00002AFE 48890B                  	mov [rbx], rcx
  3637 00002B01 48FFC6                  	inc rsi
  3638 00002B04 EBD3                    	jmp .L_tc_recycle_frame_loop_5cb9
  3639                                  .L_tc_recycle_frame_done_5cb9:	 ; end recycle frame loop
  3640 00002B06 BB03000000              	mov rbx, 3
  3641 00002B0B 48C1E303                	shl rbx, 3
  3642 00002B0F 48F7DB                  	neg rbx
  3643 00002B12 4801FB                  	add rbx, rdi
  3644 00002B15 4889DC                  	mov rsp, rbx
  3645 00002B18 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3646 00002B1C FFE3                    	jmp rbx
  3647 00002B1E EB08                    	jmp .L_if_end_567c
  3648                                  	.L_if_else_567c:
  3649 00002B20 488D0425[02000000]      	lea rax, [2 + L_constants]
  3650                                  	.L_if_end_567c:
  3651                                  .L_or_end_0614:
  3652 00002B28 C9                      	leave
  3653 00002B29 C21800                  	ret 8 * (2 + 1)
  3654                                  .L_lambda_simple_end_4f45:	; new closure is in rax
  3655 00002B2C 48890425[A0020000]      	mov qword [free_var_84], rax
  3656 00002B34 48B8-                   	mov rax, sob_void
  3656 00002B36 [0000000000000000] 
  3657                                  
  3658 00002B3E 4889C7                  	mov rdi, rax
  3659 00002B41 E87FFD0000              	call print_sexpr_if_not_void
  3660                                  
  3661 00002B46 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3662 00002B4B E864FD0000              	call malloc
  3663 00002B50 50                      	push rax
  3664 00002B51 BF00000000              	mov rdi, 8 * 0	; new rib
  3665 00002B56 E859FD0000              	call malloc
  3666 00002B5B 50                      	push rax
  3667 00002B5C BF08000000              	mov rdi, 8 * 1	; extended env
  3668 00002B61 E84EFD0000              	call malloc
  3669 00002B66 488B7D10                	mov rdi, ENV
  3670 00002B6A BE00000000              	mov rsi, 0
  3671 00002B6F BA01000000              	mov rdx, 1
  3672                                  .L_lambda_opt_env_loop_0c85:	; ext_env[i + 1] <-- env[i]
  3673 00002B74 4883FE00                	cmp rsi, 0
  3674 00002B78 7410                    	je .L_lambda_opt_env_end_0c85
  3675 00002B7A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3676 00002B7E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3677 00002B82 48FFC6                  	inc rsi
  3678 00002B85 48FFC2                  	inc rdx
  3679 00002B88 EBEA                    	jmp .L_lambda_opt_env_loop_0c85
  3680                                  .L_lambda_opt_env_end_0c85:
  3681 00002B8A 5B                      	pop rbx
  3682 00002B8B BE00000000              	mov rsi, 0
  3683                                  .L_lambda_opt_params_loop_0c85:	; copy params
  3684 00002B90 4883FE00                	cmp rsi, 0
  3685 00002B94 740E                    	je .L_lambda_opt_params_end_0c85
  3686 00002B96 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3687 00002B9B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3688 00002B9F 48FFC6                  	inc rsi
  3689 00002BA2 EBEC                    	jmp .L_lambda_opt_params_loop_0c85
  3690                                  .L_lambda_opt_params_end_0c85:
  3691 00002BA4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3692 00002BA7 4889C3                  	mov rbx, rax
  3693 00002BAA 58                      	pop rax
  3694 00002BAB C60005                  	mov byte [rax], T_closure
  3695 00002BAE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3696 00002BB2 48C74009[BF2B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c85
  3697 00002BBA E901010000              	jmp .L_lambda_opt_end_0c85
  3698                                  .L_lambda_opt_code_0c85:	; lambda-opt body
  3699 00002BBF 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  3700 00002BC4 4889FB                  	mov rbx, rdi
  3701 00002BC7 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
  3702 00002BCB 4883FB00                	cmp rbx, 0
  3703 00002BCF 7F45                    	jg .L_lambda_opt_arity_check_more_0c85
  3704                                  .L_lambda_opt_arity_check_exact_0c85:	 ; if params in opt is exact
  3705 00002BD1 4883EC08                	sub rsp, 8
  3706 00002BD5 BE00000000              	mov rsi, 0 ; index
  3707                                  .L_lambda_opt_stack_enlarge_loop_0c85:	 ; stack loop enlarge start
  3708 00002BDA 4883FE03                	cmp rsi, 3
  3709 00002BDE 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c85
  3710 00002BE0 4889F7                  	mov rdi, rsi
  3711 00002BE3 48FFC7                  	inc rdi
  3712 00002BE6 48C1E703                	shl rdi, 3
  3713 00002BEA 4801E7                  	add rdi, rsp
  3714 00002BED 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  3715 00002BF0 4883EB08                	sub rbx, 8
  3716 00002BF4 488B3F                  	mov rdi, [rdi]
  3717 00002BF7 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  3718 00002BFA 48FFC6                  	inc rsi
  3719 00002BFD EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c85
  3720                                  .L_lambda_opt_stack_enlarge_loop_exit_0c85:	 ; end of stack enlarge loop
  3721 00002BFF 48C7442418-             	mov qword [rsp + 3*8], sob_nil
  3721 00002C04 [01000000]         
  3722 00002C08 48C744241001000000      	mov qword [rsp + 2*8], 1
  3723 00002C11 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c85
  3724                                  .L_lambda_opt_arity_check_more_0c85:	 ; if params in opt is more
  3725 00002C16 48B8-                   	mov rax, sob_nil
  3725 00002C18 [0100000000000000] 
  3726 00002C20 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  3727 00002C23 48FFCE                  	dec rsi
  3728                                  .L_lambda_opt_list_create_loop_0c85:	; start of list creation loop
  3729 00002C26 4883FEFF                	cmp rsi, -1
  3730 00002C2A 7422                    	je .L_lambda_opt_list_create_loop_exit_0c85
  3731 00002C2C 488D4E03                	lea rcx, [rsi + (3 + 0)]
  3732 00002C30 48C1E103                	shl rcx, 3
  3733 00002C34 4801E1                  	add rcx, rsp
  3734 00002C37 488B09                  	mov rcx, [rcx]
  3735 00002C3A 56                      	push rsi ; save params
  3736 00002C3B 53                      	push rbx
  3737                                  
  3738 00002C3C 50                      	push rax ; cdr
  3739 00002C3D 51                      	push rcx ; car
  3740 00002C3E 6A02                    	push qword 2 ; push num of args
  3741 00002C40 6A01                    	push qword 1 ; push garbage as env
  3742 00002C42 E8F4050100              	call L_code_ptr_cons
  3743                                  
  3744 00002C47 5B                      	pop rbx ; restore params
  3745 00002C48 5E                      	pop rsi
  3746 00002C49 48FFCE                  	dec rsi
  3747 00002C4C EBD8                    	jmp .L_lambda_opt_list_create_loop_0c85
  3748                                  .L_lambda_opt_list_create_loop_exit_0c85:	; end of list creation loop
  3749 00002C4E 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  3750 00002C53 4883C302                	add rbx, 2
  3751 00002C57 4889DF                  	mov rdi, rbx
  3752 00002C5A 48C1E703                	shl rdi,3
  3753 00002C5E 4801E7                  	add rdi, rsp
  3754 00002C61 488907                  	mov [rdi], rax
  3755 00002C64 BE00000000              	mov rsi, 0 ;index
  3756                                  .L_lambda_opt_stack_shrink_loop_0c85:	; start of stack shrink loop
  3757 00002C69 4883FE03                	cmp rsi, 3
  3758 00002C6D 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c85
  3759 00002C6F BF02000000              	mov rdi, 2
  3760 00002C74 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  3761 00002C77 4889D9                  	mov rcx, rbx
  3762 00002C7A 4829F1                  	sub rcx, rsi
  3763 00002C7D 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  3764 00002C80 4889FA                  	mov rdx, rdi
  3765 00002C83 48C1E203                	shl rdx, 3
  3766 00002C87 4801E2                  	add rdx, rsp
  3767 00002C8A 48C1E103                	shl rcx, 3
  3768 00002C8E 4801E1                  	add rcx, rsp
  3769 00002C91 488B12                  	mov rdx, [rdx]
  3770 00002C94 488911                  	mov [rcx], rdx
  3771 00002C97 48FFC6                  	inc rsi
  3772 00002C9A EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c85
  3773                                  .L_lambda_opt_stack_shrink_loop_exit_0c85:	; end of stack shrink loop
  3774 00002C9C 4883EB02                	sub rbx, 2 ; rbx has number of args
  3775 00002CA0 4883EB01                	sub rbx, 1
  3776 00002CA4 48C1E303                	shl rbx, 3
  3777 00002CA8 4801DC                  	add rsp, rbx
  3778 00002CAB 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  3779                                  .L_lambda_opt_stack_adjusted_0c85:
  3780 00002CB4 C8000000                	enter 0, 0
  3781 00002CB8 488B4520                	mov rax, PARAM(0)
  3782 00002CBC C9                      	leave
  3783 00002CBD C21800                  	ret AND_KILL_FRAME(1)
  3784                                  .L_lambda_opt_end_0c85:	; new closure is in rax
  3785 00002CC0 48890425[A8020000]      	mov qword [free_var_85], rax
  3786 00002CC8 48B8-                   	mov rax, sob_void
  3786 00002CCA [0000000000000000] 
  3787                                  
  3788 00002CD2 4889C7                  	mov rdi, rax
  3789 00002CD5 E8EBFB0000              	call print_sexpr_if_not_void
  3790                                  
  3791 00002CDA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3792 00002CDF E8D0FB0000              	call malloc
  3793 00002CE4 50                      	push rax
  3794 00002CE5 BF00000000              	mov rdi, 8 * 0	; new rib
  3795 00002CEA E8C5FB0000              	call malloc
  3796 00002CEF 50                      	push rax
  3797 00002CF0 BF08000000              	mov rdi, 8 * 1	; extended env
  3798 00002CF5 E8BAFB0000              	call malloc
  3799 00002CFA 488B7D10                	mov rdi, ENV
  3800 00002CFE BE00000000              	mov rsi, 0
  3801 00002D03 BA01000000              	mov rdx, 1
  3802                                  .L_lambda_simple_env_loop_4f46:	; ext_env[i + 1] <-- env[i]
  3803 00002D08 4883FE00                	cmp rsi, 0
  3804 00002D0C 7410                    	je .L_lambda_simple_env_end_4f46
  3805 00002D0E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  3806 00002D12 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3807 00002D16 48FFC6                  	inc rsi
  3808 00002D19 48FFC2                  	inc rdx
  3809 00002D1C EBEA                    	jmp .L_lambda_simple_env_loop_4f46
  3810                                  .L_lambda_simple_env_end_4f46:
  3811 00002D1E 5B                      	pop rbx
  3812 00002D1F BE00000000              	mov rsi, 0
  3813                                  .L_lambda_simple_params_loop_4f46:	; copy params
  3814 00002D24 4883FE00                	cmp rsi, 0
  3815 00002D28 740E                    	je .L_lambda_simple_params_end_4f46
  3816 00002D2A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3817 00002D2F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3818 00002D33 48FFC6                  	inc rsi
  3819 00002D36 EBEC                    	jmp .L_lambda_simple_params_loop_4f46
  3820                                  .L_lambda_simple_params_end_4f46:
  3821 00002D38 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3822 00002D3B 4889C3                  	mov rbx, rax
  3823 00002D3E 58                      	pop rax
  3824 00002D3F C60005                  	mov byte [rax], T_closure
  3825 00002D42 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3826 00002D46 48C74009[502D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f46
  3827 00002D4E EB39                    	jmp .L_lambda_simple_end_4f46
  3828                                  .L_lambda_simple_code_4f46:	; lambda-simple body
  3829 00002D50 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3830 00002D56 740B                    	je .L_lambda_simple_arity_check_ok_4f46
  3831 00002D58 FF742410                	push qword [rsp + 8 * 2]
  3832 00002D5C 6A01                    	push 1
  3833 00002D5E E90AFB0000              	jmp L_error_incorrect_arity_simple
  3834                                  .L_lambda_simple_arity_check_ok_4f46:
  3835 00002D63 C8000000                	enter 0, 0
  3836 00002D67 488B4520                	mov rax, PARAM(0)
  3837 00002D6B 483D[02000000]          	cmp rax, sob_boolean_false
  3838 00002D71 740A                    	je .L_if_else_567d
  3839 00002D73 488D0425[02000000]      	lea rax, [2 + L_constants]
  3840 00002D7B EB08                    	jmp .L_if_end_567d
  3841                                  	.L_if_else_567d:
  3842 00002D7D 488D0425[03000000]      	lea rax, [3 + L_constants]
  3843                                  	.L_if_end_567d:
  3844 00002D85 C9                      	leave
  3845 00002D86 C21800                  	ret 8 * (2 + 1)
  3846                                  .L_lambda_simple_end_4f46:	; new closure is in rax
  3847 00002D89 48890425[B0020000]      	mov qword [free_var_86], rax
  3848 00002D91 48B8-                   	mov rax, sob_void
  3848 00002D93 [0000000000000000] 
  3849                                  
  3850 00002D9B 4889C7                  	mov rdi, rax
  3851 00002D9E E822FB0000              	call print_sexpr_if_not_void
  3852                                  
  3853 00002DA3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3854 00002DA8 E807FB0000              	call malloc
  3855 00002DAD 50                      	push rax
  3856 00002DAE BF00000000              	mov rdi, 8 * 0	; new rib
  3857 00002DB3 E8FCFA0000              	call malloc
  3858 00002DB8 50                      	push rax
  3859 00002DB9 BF08000000              	mov rdi, 8 * 1	; extended env
  3860 00002DBE E8F1FA0000              	call malloc
  3861 00002DC3 488B7D10                	mov rdi, ENV
  3862 00002DC7 BE00000000              	mov rsi, 0
  3863 00002DCC BA01000000              	mov rdx, 1
  3864                                  .L_lambda_simple_env_loop_4f47:	; ext_env[i + 1] <-- env[i]
  3865 00002DD1 4883FE00                	cmp rsi, 0
  3866 00002DD5 7410                    	je .L_lambda_simple_env_end_4f47
  3867 00002DD7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  3868 00002DDB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3869 00002DDF 48FFC6                  	inc rsi
  3870 00002DE2 48FFC2                  	inc rdx
  3871 00002DE5 EBEA                    	jmp .L_lambda_simple_env_loop_4f47
  3872                                  .L_lambda_simple_env_end_4f47:
  3873 00002DE7 5B                      	pop rbx
  3874 00002DE8 BE00000000              	mov rsi, 0
  3875                                  .L_lambda_simple_params_loop_4f47:	; copy params
  3876 00002DED 4883FE00                	cmp rsi, 0
  3877 00002DF1 740E                    	je .L_lambda_simple_params_end_4f47
  3878 00002DF3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3879 00002DF8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3880 00002DFC 48FFC6                  	inc rsi
  3881 00002DFF EBEC                    	jmp .L_lambda_simple_params_loop_4f47
  3882                                  .L_lambda_simple_params_end_4f47:
  3883 00002E01 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3884 00002E04 4889C3                  	mov rbx, rax
  3885 00002E07 58                      	pop rax
  3886 00002E08 C60005                  	mov byte [rax], T_closure
  3887 00002E0B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3888 00002E0F 48C74009[1C2E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f47
  3889 00002E17 E9F0000000              	jmp .L_lambda_simple_end_4f47
  3890                                  .L_lambda_simple_code_4f47:	; lambda-simple body
  3891 00002E1C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3892 00002E22 740B                    	je .L_lambda_simple_arity_check_ok_4f47
  3893 00002E24 FF742410                	push qword [rsp + 8 * 2]
  3894 00002E28 6A01                    	push 1
  3895 00002E2A E93EFA0000              	jmp L_error_incorrect_arity_simple
  3896                                  .L_lambda_simple_arity_check_ok_4f47:
  3897 00002E2F C8000000                	enter 0, 0
  3898 00002E33 488B4520                	mov rax, PARAM(0)
  3899 00002E37 50                      	push rax
  3900 00002E38 6A01                    	push 1
  3901 00002E3A 488B0425[48000000]      	mov rax, qword [free_var_9]
  3902                                  	assert_closure(rax)
    42 00002E42 803805              <1>  cmp byte [%1], %2
    43 00002E45 0F85E9120100        <1>  jne L_error_incorrect_type
  3903 00002E4B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3904 00002E4F 53                      	push rbx
  3905 00002E50 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3906 00002E54 FFD3                    	call rbx
  3907 00002E56 483D[02000000]          	cmp rax, sob_boolean_false
  3908 00002E5C 0F849E000000            	je .L_if_else_567e
  3909 00002E62 488B4520                	mov rax, PARAM(0)
  3910 00002E66 50                      	push rax
  3911 00002E67 6A01                    	push 1
  3912 00002E69 488B0425[E0000000]      	mov rax, qword [free_var_28]
  3913                                  	assert_closure(rax)
    42 00002E71 803805              <1>  cmp byte [%1], %2
    43 00002E74 0F85BA120100        <1>  jne L_error_incorrect_type
  3914 00002E7A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3915 00002E7E 53                      	push rbx
  3916 00002E7F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3917 00002E83 FFD3                    	call rbx
  3918 00002E85 50                      	push rax
  3919 00002E86 6A01                    	push 1
  3920 00002E88 488B0425[B0020000]      	mov rax, qword [free_var_86]
  3921                                  	assert_closure(rax)
    42 00002E90 803805              <1>  cmp byte [%1], %2
    43 00002E93 0F859B120100        <1>  jne L_error_incorrect_type
  3922 00002E99 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3923 00002E9D 53                      	push rbx
  3924 00002E9E FF7508                  	push RET_ADDR
  3925 00002EA1 488B7D18                	mov rdi, COUNT
  3926 00002EA5 4883C703                	add rdi, 3
  3927 00002EA9 48C1E703                	shl rdi, 3
  3928 00002EAD 4801EF                  	add rdi, rbp
  3929 00002EB0 488B6D00                	mov rbp, OLD_RDP
  3930 00002EB4 BE00000000              	mov rsi, 0
  3931                                  .L_tc_recycle_frame_loop_5cba:	 ; start recycle frame loop
  3932 00002EB9 4883FE04                	cmp rsi, 4
  3933 00002EBD 7427                    	je .L_tc_recycle_frame_done_5cba
  3934 00002EBF B903000000              	mov rcx, 3
  3935 00002EC4 4829F1                  	sub rcx, rsi
  3936 00002EC7 48C1E103                	shl rcx, 3
  3937 00002ECB 4801E1                  	add rcx, rsp ; rcx is the address to move
  3938 00002ECE 4889F3                  	mov rbx, rsi
  3939 00002ED1 48C1E303                	shl rbx, 3
  3940 00002ED5 48F7DB                  	neg rbx
  3941 00002ED8 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3942 00002EDB 488B09                  	mov rcx, [rcx]
  3943 00002EDE 48890B                  	mov [rbx], rcx
  3944 00002EE1 48FFC6                  	inc rsi
  3945 00002EE4 EBD3                    	jmp .L_tc_recycle_frame_loop_5cba
  3946                                  .L_tc_recycle_frame_done_5cba:	 ; end recycle frame loop
  3947 00002EE6 BB03000000              	mov rbx, 3
  3948 00002EEB 48C1E303                	shl rbx, 3
  3949 00002EEF 48F7DB                  	neg rbx
  3950 00002EF2 4801FB                  	add rbx, rdi
  3951 00002EF5 4889DC                  	mov rsp, rbx
  3952 00002EF8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3953 00002EFC FFE3                    	jmp rbx
  3954 00002EFE EB08                    	jmp .L_if_end_567e
  3955                                  	.L_if_else_567e:
  3956 00002F00 488D0425[02000000]      	lea rax, [2 + L_constants]
  3957                                  	.L_if_end_567e:
  3958 00002F08 C9                      	leave
  3959 00002F09 C21800                  	ret 8 * (2 + 1)
  3960                                  .L_lambda_simple_end_4f47:	; new closure is in rax
  3961 00002F0C 48890425[B8020000]      	mov qword [free_var_87], rax
  3962 00002F14 48B8-                   	mov rax, sob_void
  3962 00002F16 [0000000000000000] 
  3963                                  
  3964 00002F1E 4889C7                  	mov rdi, rax
  3965 00002F21 E89FF90000              	call print_sexpr_if_not_void
  3966                                  
  3967 00002F26 488D0425[17000000]      	lea rax, [23 + L_constants]
  3968 00002F2E 50                      	push rax
  3969 00002F2F 6A01                    	push 1
  3970 00002F31 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3971 00002F36 E879F90000              	call malloc
  3972 00002F3B 50                      	push rax
  3973 00002F3C BF00000000              	mov rdi, 8 * 0	; new rib
  3974 00002F41 E86EF90000              	call malloc
  3975 00002F46 50                      	push rax
  3976 00002F47 BF08000000              	mov rdi, 8 * 1	; extended env
  3977 00002F4C E863F90000              	call malloc
  3978 00002F51 488B7D10                	mov rdi, ENV
  3979 00002F55 BE00000000              	mov rsi, 0
  3980 00002F5A BA01000000              	mov rdx, 1
  3981                                  .L_lambda_simple_env_loop_4f48:	; ext_env[i + 1] <-- env[i]
  3982 00002F5F 4883FE00                	cmp rsi, 0
  3983 00002F63 7410                    	je .L_lambda_simple_env_end_4f48
  3984 00002F65 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  3985 00002F69 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3986 00002F6D 48FFC6                  	inc rsi
  3987 00002F70 48FFC2                  	inc rdx
  3988 00002F73 EBEA                    	jmp .L_lambda_simple_env_loop_4f48
  3989                                  .L_lambda_simple_env_end_4f48:
  3990 00002F75 5B                      	pop rbx
  3991 00002F76 BE00000000              	mov rsi, 0
  3992                                  .L_lambda_simple_params_loop_4f48:	; copy params
  3993 00002F7B 4883FE00                	cmp rsi, 0
  3994 00002F7F 740E                    	je .L_lambda_simple_params_end_4f48
  3995 00002F81 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3996 00002F86 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3997 00002F8A 48FFC6                  	inc rsi
  3998 00002F8D EBEC                    	jmp .L_lambda_simple_params_loop_4f48
  3999                                  .L_lambda_simple_params_end_4f48:
  4000 00002F8F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4001 00002F92 4889C3                  	mov rbx, rax
  4002 00002F95 58                      	pop rax
  4003 00002F96 C60005                  	mov byte [rax], T_closure
  4004 00002F99 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4005 00002F9D 48C74009[AA2F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f48
  4006 00002FA5 E9F2030000              	jmp .L_lambda_simple_end_4f48
  4007                                  .L_lambda_simple_code_4f48:	; lambda-simple body
  4008 00002FAA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4009 00002FB0 740B                    	je .L_lambda_simple_arity_check_ok_4f48
  4010 00002FB2 FF742410                	push qword [rsp + 8 * 2]
  4011 00002FB6 6A01                    	push 1
  4012 00002FB8 E9B0F80000              	jmp L_error_incorrect_arity_simple
  4013                                  .L_lambda_simple_arity_check_ok_4f48:
  4014 00002FBD C8000000                	enter 0, 0
  4015 00002FC1 BF11000000              	mov qword rdi, (1 + 8 + 8)
  4016 00002FC6 E8E9F80000              	call malloc
  4017 00002FCB 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  4018 00002FCF 48B8-                   	mov rax, sob_void
  4018 00002FD1 [0000000000000000] 
  4019                                  
  4020 00002FD9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4021 00002FDE E8D1F80000              	call malloc
  4022 00002FE3 50                      	push rax
  4023 00002FE4 BF08000000              	mov rdi, 8 * 1	; new rib
  4024 00002FE9 E8C6F80000              	call malloc
  4025 00002FEE 50                      	push rax
  4026 00002FEF BF10000000              	mov rdi, 8 * 2	; extended env
  4027 00002FF4 E8BBF80000              	call malloc
  4028 00002FF9 488B7D10                	mov rdi, ENV
  4029 00002FFD BE00000000              	mov rsi, 0
  4030 00003002 BA01000000              	mov rdx, 1
  4031                                  .L_lambda_simple_env_loop_4f49:	; ext_env[i + 1] <-- env[i]
  4032 00003007 4883FE01                	cmp rsi, 1
  4033 0000300B 7410                    	je .L_lambda_simple_env_end_4f49
  4034 0000300D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  4035 00003011 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4036 00003015 48FFC6                  	inc rsi
  4037 00003018 48FFC2                  	inc rdx
  4038 0000301B EBEA                    	jmp .L_lambda_simple_env_loop_4f49
  4039                                  .L_lambda_simple_env_end_4f49:
  4040 0000301D 5B                      	pop rbx
  4041 0000301E BE00000000              	mov rsi, 0
  4042                                  .L_lambda_simple_params_loop_4f49:	; copy params
  4043 00003023 4883FE01                	cmp rsi, 1
  4044 00003027 740E                    	je .L_lambda_simple_params_end_4f49
  4045 00003029 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4046 0000302E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4047 00003032 48FFC6                  	inc rsi
  4048 00003035 EBEC                    	jmp .L_lambda_simple_params_loop_4f49
  4049                                  .L_lambda_simple_params_end_4f49:
  4050 00003037 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4051 0000303A 4889C3                  	mov rbx, rax
  4052 0000303D 58                      	pop rax
  4053 0000303E C60005                  	mov byte [rax], T_closure
  4054 00003041 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4055 00003045 48C74009[52300000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f49
  4056 0000304D E938010000              	jmp .L_lambda_simple_end_4f49
  4057                                  .L_lambda_simple_code_4f49:	; lambda-simple body
  4058 00003052 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4059 00003058 740B                    	je .L_lambda_simple_arity_check_ok_4f49
  4060 0000305A FF742410                	push qword [rsp + 8 * 2]
  4061 0000305E 6A02                    	push 2
  4062 00003060 E908F80000              	jmp L_error_incorrect_arity_simple
  4063                                  .L_lambda_simple_arity_check_ok_4f49:
  4064 00003065 C8000000                	enter 0, 0
  4065 00003069 488B4528                	mov rax, PARAM(1)
  4066 0000306D 50                      	push rax
  4067 0000306E 6A01                    	push 1
  4068 00003070 488B0425[00000000]      	mov rax, qword [free_var_0]
  4069                                  	assert_closure(rax)
    42 00003078 803805              <1>  cmp byte [%1], %2
    43 0000307B 0F85B3100100        <1>  jne L_error_incorrect_type
  4070 00003081 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4071 00003085 53                      	push rbx
  4072 00003086 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4073 0000308A FFD3                    	call rbx
  4074 0000308C 483D[02000000]          	cmp rax, sob_boolean_false
  4075 00003092 7409                    	je .L_if_else_567f
  4076 00003094 488B4520                	mov rax, PARAM(0)
  4077 00003098 E9E9000000              	jmp .L_if_end_567f
  4078                                  	.L_if_else_567f:
  4079 0000309D 488B4528                	mov rax, PARAM(1)
  4080 000030A1 50                      	push rax
  4081 000030A2 6A01                    	push 1
  4082 000030A4 488B0425[88000000]      	mov rax, qword [free_var_17]
  4083                                  	assert_closure(rax)
    42 000030AC 803805              <1>  cmp byte [%1], %2
    43 000030AF 0F857F100100        <1>  jne L_error_incorrect_type
  4084 000030B5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4085 000030B9 53                      	push rbx
  4086 000030BA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4087 000030BE FFD3                    	call rbx
  4088 000030C0 50                      	push rax
  4089 000030C1 488B4528                	mov rax, PARAM(1)
  4090 000030C5 50                      	push rax
  4091 000030C6 6A01                    	push 1
  4092 000030C8 488B0425[80000000]      	mov rax, qword [free_var_16]
  4093                                  	assert_closure(rax)
    42 000030D0 803805              <1>  cmp byte [%1], %2
    43 000030D3 0F855B100100        <1>  jne L_error_incorrect_type
  4094 000030D9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4095 000030DD 53                      	push rbx
  4096 000030DE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4097 000030E2 FFD3                    	call rbx
  4098 000030E4 50                      	push rax
  4099 000030E5 6A02                    	push 2
  4100 000030E7 488B4510                	mov rax, qword [rbp + 8*2]
  4101 000030EB 488B00                  	mov rax, qword [rax + 8*0]
  4102 000030EE 488B00                  	mov rax, qword [rax + 8*0]
  4103 000030F1 488B00                  	mov rax, qword [rax]
  4104                                  	assert_closure(rax)
    42 000030F4 803805              <1>  cmp byte [%1], %2
    43 000030F7 0F8537100100        <1>  jne L_error_incorrect_type
  4105 000030FD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4106 00003101 53                      	push rbx
  4107 00003102 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4108 00003106 FFD3                    	call rbx
  4109 00003108 50                      	push rax
  4110 00003109 488B4520                	mov rax, PARAM(0)
  4111 0000310D 50                      	push rax
  4112 0000310E 6A02                    	push 2
  4113 00003110 488B0425[68000000]      	mov rax, qword [free_var_13]
  4114                                  	assert_closure(rax)
    42 00003118 803805              <1>  cmp byte [%1], %2
    43 0000311B 0F8513100100        <1>  jne L_error_incorrect_type
  4115 00003121 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4116 00003125 53                      	push rbx
  4117 00003126 FF7508                  	push RET_ADDR
  4118 00003129 488B7D18                	mov rdi, COUNT
  4119 0000312D 4883C703                	add rdi, 3
  4120 00003131 48C1E703                	shl rdi, 3
  4121 00003135 4801EF                  	add rdi, rbp
  4122 00003138 488B6D00                	mov rbp, OLD_RDP
  4123 0000313C BE00000000              	mov rsi, 0
  4124                                  .L_tc_recycle_frame_loop_5cbb:	 ; start recycle frame loop
  4125 00003141 4883FE05                	cmp rsi, 5
  4126 00003145 7427                    	je .L_tc_recycle_frame_done_5cbb
  4127 00003147 B904000000              	mov rcx, 4
  4128 0000314C 4829F1                  	sub rcx, rsi
  4129 0000314F 48C1E103                	shl rcx, 3
  4130 00003153 4801E1                  	add rcx, rsp ; rcx is the address to move
  4131 00003156 4889F3                  	mov rbx, rsi
  4132 00003159 48C1E303                	shl rbx, 3
  4133 0000315D 48F7DB                  	neg rbx
  4134 00003160 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4135 00003163 488B09                  	mov rcx, [rcx]
  4136 00003166 48890B                  	mov [rbx], rcx
  4137 00003169 48FFC6                  	inc rsi
  4138 0000316C EBD3                    	jmp .L_tc_recycle_frame_loop_5cbb
  4139                                  .L_tc_recycle_frame_done_5cbb:	 ; end recycle frame loop
  4140 0000316E BB04000000              	mov rbx, 4
  4141 00003173 48C1E303                	shl rbx, 3
  4142 00003177 48F7DB                  	neg rbx
  4143 0000317A 4801FB                  	add rbx, rdi
  4144 0000317D 4889DC                  	mov rsp, rbx
  4145 00003180 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4146 00003184 FFE3                    	jmp rbx
  4147                                  	.L_if_end_567f:
  4148 00003186 C9                      	leave
  4149 00003187 C22000                  	ret 8 * (2 + 2)
  4150                                  .L_lambda_simple_end_4f49:	; new closure is in rax
  4151 0000318A 50                      	push rax
  4152 0000318B 488B4520                	mov rax, PARAM(0)
  4153 0000318F 8F00                    	pop qword [rax]
  4154 00003191 48B8-                   	mov rax, sob_void
  4154 00003193 [0000000000000000] 
  4155                                  
  4156 0000319B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4157 000031A0 E80FF70000              	call malloc
  4158 000031A5 50                      	push rax
  4159 000031A6 BF08000000              	mov rdi, 8 * 1	; new rib
  4160 000031AB E804F70000              	call malloc
  4161 000031B0 50                      	push rax
  4162 000031B1 BF10000000              	mov rdi, 8 * 2	; extended env
  4163 000031B6 E8F9F60000              	call malloc
  4164 000031BB 488B7D10                	mov rdi, ENV
  4165 000031BF BE00000000              	mov rsi, 0
  4166 000031C4 BA01000000              	mov rdx, 1
  4167                                  .L_lambda_opt_env_loop_0c86:	; ext_env[i + 1] <-- env[i]
  4168 000031C9 4883FE01                	cmp rsi, 1
  4169 000031CD 7410                    	je .L_lambda_opt_env_end_0c86
  4170 000031CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4171 000031D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4172 000031D7 48FFC6                  	inc rsi
  4173 000031DA 48FFC2                  	inc rdx
  4174 000031DD EBEA                    	jmp .L_lambda_opt_env_loop_0c86
  4175                                  .L_lambda_opt_env_end_0c86:
  4176 000031DF 5B                      	pop rbx
  4177 000031E0 BE00000000              	mov rsi, 0
  4178                                  .L_lambda_opt_params_loop_0c86:	; copy params
  4179 000031E5 4883FE01                	cmp rsi, 1
  4180 000031E9 740E                    	je .L_lambda_opt_params_end_0c86
  4181 000031EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4182 000031F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4183 000031F4 48FFC6                  	inc rsi
  4184 000031F7 EBEC                    	jmp .L_lambda_opt_params_loop_0c86
  4185                                  .L_lambda_opt_params_end_0c86:
  4186 000031F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4187 000031FC 4889C3                  	mov rbx, rax
  4188 000031FF 58                      	pop rax
  4189 00003200 C60005                  	mov byte [rax], T_closure
  4190 00003203 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4191 00003207 48C74009[14320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c86
  4192 0000320F E984010000              	jmp .L_lambda_opt_end_0c86
  4193                                  .L_lambda_opt_code_0c86:	; lambda-opt body
  4194 00003214 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  4195 00003219 4889FB                  	mov rbx, rdi
  4196 0000321C 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  4197 00003220 4883FB00                	cmp rbx, 0
  4198 00003224 7F45                    	jg .L_lambda_opt_arity_check_more_0c86
  4199                                  .L_lambda_opt_arity_check_exact_0c86:	 ; if params in opt is exact
  4200 00003226 4883EC08                	sub rsp, 8
  4201 0000322A BE00000000              	mov rsi, 0 ; index
  4202                                  .L_lambda_opt_stack_enlarge_loop_0c86:	 ; stack loop enlarge start
  4203 0000322F 4883FE04                	cmp rsi, 4
  4204 00003233 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c86
  4205 00003235 4889F7                  	mov rdi, rsi
  4206 00003238 48FFC7                  	inc rdi
  4207 0000323B 48C1E703                	shl rdi, 3
  4208 0000323F 4801E7                  	add rdi, rsp
  4209 00003242 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  4210 00003245 4883EB08                	sub rbx, 8
  4211 00003249 488B3F                  	mov rdi, [rdi]
  4212 0000324C 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  4213 0000324F 48FFC6                  	inc rsi
  4214 00003252 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c86
  4215                                  .L_lambda_opt_stack_enlarge_loop_exit_0c86:	 ; end of stack enlarge loop
  4216 00003254 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  4216 00003259 [01000000]         
  4217 0000325D 48C744241002000000      	mov qword [rsp + 2*8], 2
  4218 00003266 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c86
  4219                                  .L_lambda_opt_arity_check_more_0c86:	 ; if params in opt is more
  4220 0000326B 48B8-                   	mov rax, sob_nil
  4220 0000326D [0100000000000000] 
  4221 00003275 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  4222 00003278 48FFCE                  	dec rsi
  4223                                  .L_lambda_opt_list_create_loop_0c86:	; start of list creation loop
  4224 0000327B 4883FEFF                	cmp rsi, -1
  4225 0000327F 7422                    	je .L_lambda_opt_list_create_loop_exit_0c86
  4226 00003281 488D4E04                	lea rcx, [rsi + (3 + 1)]
  4227 00003285 48C1E103                	shl rcx, 3
  4228 00003289 4801E1                  	add rcx, rsp
  4229 0000328C 488B09                  	mov rcx, [rcx]
  4230 0000328F 56                      	push rsi ; save params
  4231 00003290 53                      	push rbx
  4232                                  
  4233 00003291 50                      	push rax ; cdr
  4234 00003292 51                      	push rcx ; car
  4235 00003293 6A02                    	push qword 2 ; push num of args
  4236 00003295 6A01                    	push qword 1 ; push garbage as env
  4237 00003297 E89FFF0000              	call L_code_ptr_cons
  4238                                  
  4239 0000329C 5B                      	pop rbx ; restore params
  4240 0000329D 5E                      	pop rsi
  4241 0000329E 48FFCE                  	dec rsi
  4242 000032A1 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c86
  4243                                  .L_lambda_opt_list_create_loop_exit_0c86:	; end of list creation loop
  4244 000032A3 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  4245 000032A8 4883C302                	add rbx, 2
  4246 000032AC 4889DF                  	mov rdi, rbx
  4247 000032AF 48C1E703                	shl rdi,3
  4248 000032B3 4801E7                  	add rdi, rsp
  4249 000032B6 488907                  	mov [rdi], rax
  4250 000032B9 BE00000000              	mov rsi, 0 ;index
  4251                                  .L_lambda_opt_stack_shrink_loop_0c86:	; start of stack shrink loop
  4252 000032BE 4883FE04                	cmp rsi, 4
  4253 000032C2 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c86
  4254 000032C4 BF03000000              	mov rdi, 3
  4255 000032C9 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  4256 000032CC 4889D9                  	mov rcx, rbx
  4257 000032CF 4829F1                  	sub rcx, rsi
  4258 000032D2 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  4259 000032D5 4889FA                  	mov rdx, rdi
  4260 000032D8 48C1E203                	shl rdx, 3
  4261 000032DC 4801E2                  	add rdx, rsp
  4262 000032DF 48C1E103                	shl rcx, 3
  4263 000032E3 4801E1                  	add rcx, rsp
  4264 000032E6 488B12                  	mov rdx, [rdx]
  4265 000032E9 488911                  	mov [rcx], rdx
  4266 000032EC 48FFC6                  	inc rsi
  4267 000032EF EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c86
  4268                                  .L_lambda_opt_stack_shrink_loop_exit_0c86:	; end of stack shrink loop
  4269 000032F1 4883EB02                	sub rbx, 2 ; rbx has number of args
  4270 000032F5 4883EB02                	sub rbx, 2
  4271 000032F9 48C1E303                	shl rbx, 3
  4272 000032FD 4801DC                  	add rsp, rbx
  4273 00003300 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4274                                  .L_lambda_opt_stack_adjusted_0c86:
  4275 00003309 C8000000                	enter 0, 0
  4276 0000330D 488B4528                	mov rax, PARAM(1)
  4277 00003311 50                      	push rax
  4278 00003312 488B4520                	mov rax, PARAM(0)
  4279 00003316 50                      	push rax
  4280 00003317 6A02                    	push 2
  4281 00003319 488B4510                	mov rax, qword [rbp + 8*2]
  4282 0000331D 488B00                  	mov rax, qword [rax + 8*0]
  4283 00003320 488B00                  	mov rax, qword [rax + 8*0]
  4284 00003323 488B00                  	mov rax, qword [rax]
  4285                                  	assert_closure(rax)
    42 00003326 803805              <1>  cmp byte [%1], %2
    43 00003329 0F85050E0100        <1>  jne L_error_incorrect_type
  4286 0000332F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4287 00003333 53                      	push rbx
  4288 00003334 FF7508                  	push RET_ADDR
  4289 00003337 488B7D18                	mov rdi, COUNT
  4290 0000333B 4883C703                	add rdi, 3
  4291 0000333F 48C1E703                	shl rdi, 3
  4292 00003343 4801EF                  	add rdi, rbp
  4293 00003346 488B6D00                	mov rbp, OLD_RDP
  4294 0000334A BE00000000              	mov rsi, 0
  4295                                  .L_tc_recycle_frame_loop_5cbc:	 ; start recycle frame loop
  4296 0000334F 4883FE05                	cmp rsi, 5
  4297 00003353 7427                    	je .L_tc_recycle_frame_done_5cbc
  4298 00003355 B904000000              	mov rcx, 4
  4299 0000335A 4829F1                  	sub rcx, rsi
  4300 0000335D 48C1E103                	shl rcx, 3
  4301 00003361 4801E1                  	add rcx, rsp ; rcx is the address to move
  4302 00003364 4889F3                  	mov rbx, rsi
  4303 00003367 48C1E303                	shl rbx, 3
  4304 0000336B 48F7DB                  	neg rbx
  4305 0000336E 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4306 00003371 488B09                  	mov rcx, [rcx]
  4307 00003374 48890B                  	mov [rbx], rcx
  4308 00003377 48FFC6                  	inc rsi
  4309 0000337A EBD3                    	jmp .L_tc_recycle_frame_loop_5cbc
  4310                                  .L_tc_recycle_frame_done_5cbc:	 ; end recycle frame loop
  4311 0000337C BB04000000              	mov rbx, 4
  4312 00003381 48C1E303                	shl rbx, 3
  4313 00003385 48F7DB                  	neg rbx
  4314 00003388 4801FB                  	add rbx, rdi
  4315 0000338B 4889DC                  	mov rsp, rbx
  4316 0000338E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4317 00003392 FFE3                    	jmp rbx
  4318 00003394 C9                      	leave
  4319 00003395 C22000                  	ret AND_KILL_FRAME(2)
  4320                                  .L_lambda_opt_end_0c86:	; new closure is in rax
  4321 00003398 C9                      	leave
  4322 00003399 C21800                  	ret 8 * (2 + 1)
  4323                                  .L_lambda_simple_end_4f48:	; new closure is in rax
  4324                                  	assert_closure(rax)
    42 0000339C 803805              <1>  cmp byte [%1], %2
    43 0000339F 0F858F0D0100        <1>  jne L_error_incorrect_type
  4325 000033A5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4326 000033A9 53                      	push rbx
  4327 000033AA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4328 000033AE FFD3                    	call rbx
  4329 000033B0 48890425[C0020000]      	mov qword [free_var_88], rax
  4330 000033B8 48B8-                   	mov rax, sob_void
  4330 000033BA [0000000000000000] 
  4331                                  
  4332 000033C2 4889C7                  	mov rdi, rax
  4333 000033C5 E8FBF40000              	call print_sexpr_if_not_void
  4334                                  
  4335 000033CA 488D0425[17000000]      	lea rax, [23 + L_constants]
  4336 000033D2 50                      	push rax
  4337 000033D3 6A01                    	push 1
  4338 000033D5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4339 000033DA E8D5F40000              	call malloc
  4340 000033DF 50                      	push rax
  4341 000033E0 BF00000000              	mov rdi, 8 * 0	; new rib
  4342 000033E5 E8CAF40000              	call malloc
  4343 000033EA 50                      	push rax
  4344 000033EB BF08000000              	mov rdi, 8 * 1	; extended env
  4345 000033F0 E8BFF40000              	call malloc
  4346 000033F5 488B7D10                	mov rdi, ENV
  4347 000033F9 BE00000000              	mov rsi, 0
  4348 000033FE BA01000000              	mov rdx, 1
  4349                                  .L_lambda_simple_env_loop_4f4a:	; ext_env[i + 1] <-- env[i]
  4350 00003403 4883FE00                	cmp rsi, 0
  4351 00003407 7410                    	je .L_lambda_simple_env_end_4f4a
  4352 00003409 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  4353 0000340D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4354 00003411 48FFC6                  	inc rsi
  4355 00003414 48FFC2                  	inc rdx
  4356 00003417 EBEA                    	jmp .L_lambda_simple_env_loop_4f4a
  4357                                  .L_lambda_simple_env_end_4f4a:
  4358 00003419 5B                      	pop rbx
  4359 0000341A BE00000000              	mov rsi, 0
  4360                                  .L_lambda_simple_params_loop_4f4a:	; copy params
  4361 0000341F 4883FE00                	cmp rsi, 0
  4362 00003423 740E                    	je .L_lambda_simple_params_end_4f4a
  4363 00003425 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4364 0000342A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4365 0000342E 48FFC6                  	inc rsi
  4366 00003431 EBEC                    	jmp .L_lambda_simple_params_loop_4f4a
  4367                                  .L_lambda_simple_params_end_4f4a:
  4368 00003433 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4369 00003436 4889C3                  	mov rbx, rax
  4370 00003439 58                      	pop rax
  4371 0000343A C60005                  	mov byte [rax], T_closure
  4372 0000343D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4373 00003441 48C74009[4E340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f4a
  4374 00003449 E955040000              	jmp .L_lambda_simple_end_4f4a
  4375                                  .L_lambda_simple_code_4f4a:	; lambda-simple body
  4376 0000344E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4377 00003454 740B                    	je .L_lambda_simple_arity_check_ok_4f4a
  4378 00003456 FF742410                	push qword [rsp + 8 * 2]
  4379 0000345A 6A01                    	push 1
  4380 0000345C E90CF40000              	jmp L_error_incorrect_arity_simple
  4381                                  .L_lambda_simple_arity_check_ok_4f4a:
  4382 00003461 C8000000                	enter 0, 0
  4383 00003465 BF11000000              	mov qword rdi, (1 + 8 + 8)
  4384 0000346A E845F40000              	call malloc
  4385 0000346F 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  4386 00003473 48B8-                   	mov rax, sob_void
  4386 00003475 [0000000000000000] 
  4387                                  
  4388 0000347D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4389 00003482 E82DF40000              	call malloc
  4390 00003487 50                      	push rax
  4391 00003488 BF08000000              	mov rdi, 8 * 1	; new rib
  4392 0000348D E822F40000              	call malloc
  4393 00003492 50                      	push rax
  4394 00003493 BF10000000              	mov rdi, 8 * 2	; extended env
  4395 00003498 E817F40000              	call malloc
  4396 0000349D 488B7D10                	mov rdi, ENV
  4397 000034A1 BE00000000              	mov rsi, 0
  4398 000034A6 BA01000000              	mov rdx, 1
  4399                                  .L_lambda_simple_env_loop_4f4b:	; ext_env[i + 1] <-- env[i]
  4400 000034AB 4883FE01                	cmp rsi, 1
  4401 000034AF 7410                    	je .L_lambda_simple_env_end_4f4b
  4402 000034B1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  4403 000034B5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4404 000034B9 48FFC6                  	inc rsi
  4405 000034BC 48FFC2                  	inc rdx
  4406 000034BF EBEA                    	jmp .L_lambda_simple_env_loop_4f4b
  4407                                  .L_lambda_simple_env_end_4f4b:
  4408 000034C1 5B                      	pop rbx
  4409 000034C2 BE00000000              	mov rsi, 0
  4410                                  .L_lambda_simple_params_loop_4f4b:	; copy params
  4411 000034C7 4883FE01                	cmp rsi, 1
  4412 000034CB 740E                    	je .L_lambda_simple_params_end_4f4b
  4413 000034CD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4414 000034D2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4415 000034D6 48FFC6                  	inc rsi
  4416 000034D9 EBEC                    	jmp .L_lambda_simple_params_loop_4f4b
  4417                                  .L_lambda_simple_params_end_4f4b:
  4418 000034DB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4419 000034DE 4889C3                  	mov rbx, rax
  4420 000034E1 58                      	pop rax
  4421 000034E2 C60005                  	mov byte [rax], T_closure
  4422 000034E5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4423 000034E9 48C74009[F6340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f4b
  4424 000034F1 E939010000              	jmp .L_lambda_simple_end_4f4b
  4425                                  .L_lambda_simple_code_4f4b:	; lambda-simple body
  4426 000034F6 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4427 000034FC 740B                    	je .L_lambda_simple_arity_check_ok_4f4b
  4428 000034FE FF742410                	push qword [rsp + 8 * 2]
  4429 00003502 6A02                    	push 2
  4430 00003504 E964F30000              	jmp L_error_incorrect_arity_simple
  4431                                  .L_lambda_simple_arity_check_ok_4f4b:
  4432 00003509 C8000000                	enter 0, 0
  4433 0000350D 488B4528                	mov rax, PARAM(1)
  4434 00003511 50                      	push rax
  4435 00003512 6A01                    	push 1
  4436 00003514 488B0425[08000000]      	mov rax, qword [free_var_1]
  4437                                  	assert_closure(rax)
    42 0000351C 803805              <1>  cmp byte [%1], %2
    43 0000351F 0F850F0C0100        <1>  jne L_error_incorrect_type
  4438 00003525 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4439 00003529 53                      	push rbx
  4440 0000352A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4441 0000352E FFD3                    	call rbx
  4442 00003530 483D[02000000]          	cmp rax, sob_boolean_false
  4443 00003536 0F84EB000000            	je .L_if_else_5680
  4444 0000353C 488B4528                	mov rax, PARAM(1)
  4445 00003540 50                      	push rax
  4446 00003541 6A01                    	push 1
  4447 00003543 488B0425[88000000]      	mov rax, qword [free_var_17]
  4448                                  	assert_closure(rax)
    42 0000354B 803805              <1>  cmp byte [%1], %2
    43 0000354E 0F85E00B0100        <1>  jne L_error_incorrect_type
  4449 00003554 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4450 00003558 53                      	push rbx
  4451 00003559 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4452 0000355D FFD3                    	call rbx
  4453 0000355F 50                      	push rax
  4454 00003560 488B4528                	mov rax, PARAM(1)
  4455 00003564 50                      	push rax
  4456 00003565 6A01                    	push 1
  4457 00003567 488B0425[80000000]      	mov rax, qword [free_var_16]
  4458                                  	assert_closure(rax)
    42 0000356F 803805              <1>  cmp byte [%1], %2
    43 00003572 0F85BC0B0100        <1>  jne L_error_incorrect_type
  4459 00003578 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4460 0000357C 53                      	push rbx
  4461 0000357D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4462 00003581 FFD3                    	call rbx
  4463 00003583 50                      	push rax
  4464 00003584 6A02                    	push 2
  4465 00003586 488B4510                	mov rax, qword [rbp + 8*2]
  4466 0000358A 488B00                  	mov rax, qword [rax + 8*0]
  4467 0000358D 488B00                  	mov rax, qword [rax + 8*0]
  4468 00003590 488B00                  	mov rax, qword [rax]
  4469                                  	assert_closure(rax)
    42 00003593 803805              <1>  cmp byte [%1], %2
    43 00003596 0F85980B0100        <1>  jne L_error_incorrect_type
  4470 0000359C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4471 000035A0 53                      	push rbx
  4472 000035A1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4473 000035A5 FFD3                    	call rbx
  4474 000035A7 50                      	push rax
  4475 000035A8 488B4520                	mov rax, PARAM(0)
  4476 000035AC 50                      	push rax
  4477 000035AD 6A02                    	push 2
  4478 000035AF 488B0425[68000000]      	mov rax, qword [free_var_13]
  4479                                  	assert_closure(rax)
    42 000035B7 803805              <1>  cmp byte [%1], %2
    43 000035BA 0F85740B0100        <1>  jne L_error_incorrect_type
  4480 000035C0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4481 000035C4 53                      	push rbx
  4482 000035C5 FF7508                  	push RET_ADDR
  4483 000035C8 488B7D18                	mov rdi, COUNT
  4484 000035CC 4883C703                	add rdi, 3
  4485 000035D0 48C1E703                	shl rdi, 3
  4486 000035D4 4801EF                  	add rdi, rbp
  4487 000035D7 488B6D00                	mov rbp, OLD_RDP
  4488 000035DB BE00000000              	mov rsi, 0
  4489                                  .L_tc_recycle_frame_loop_5cbd:	 ; start recycle frame loop
  4490 000035E0 4883FE05                	cmp rsi, 5
  4491 000035E4 7427                    	je .L_tc_recycle_frame_done_5cbd
  4492 000035E6 B904000000              	mov rcx, 4
  4493 000035EB 4829F1                  	sub rcx, rsi
  4494 000035EE 48C1E103                	shl rcx, 3
  4495 000035F2 4801E1                  	add rcx, rsp ; rcx is the address to move
  4496 000035F5 4889F3                  	mov rbx, rsi
  4497 000035F8 48C1E303                	shl rbx, 3
  4498 000035FC 48F7DB                  	neg rbx
  4499 000035FF 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4500 00003602 488B09                  	mov rcx, [rcx]
  4501 00003605 48890B                  	mov [rbx], rcx
  4502 00003608 48FFC6                  	inc rsi
  4503 0000360B EBD3                    	jmp .L_tc_recycle_frame_loop_5cbd
  4504                                  .L_tc_recycle_frame_done_5cbd:	 ; end recycle frame loop
  4505 0000360D BB04000000              	mov rbx, 4
  4506 00003612 48C1E303                	shl rbx, 3
  4507 00003616 48F7DB                  	neg rbx
  4508 00003619 4801FB                  	add rbx, rdi
  4509 0000361C 4889DC                  	mov rsp, rbx
  4510 0000361F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4511 00003623 FFE3                    	jmp rbx
  4512 00003625 EB04                    	jmp .L_if_end_5680
  4513                                  	.L_if_else_5680:
  4514 00003627 488B4520                	mov rax, PARAM(0)
  4515                                  	.L_if_end_5680:
  4516 0000362B C9                      	leave
  4517 0000362C C22000                  	ret 8 * (2 + 2)
  4518                                  .L_lambda_simple_end_4f4b:	; new closure is in rax
  4519 0000362F 50                      	push rax
  4520 00003630 488B4520                	mov rax, PARAM(0)
  4521 00003634 8F00                    	pop qword [rax]
  4522 00003636 48B8-                   	mov rax, sob_void
  4522 00003638 [0000000000000000] 
  4523                                  
  4524 00003640 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4525 00003645 E86AF20000              	call malloc
  4526 0000364A 50                      	push rax
  4527 0000364B BF08000000              	mov rdi, 8 * 1	; new rib
  4528 00003650 E85FF20000              	call malloc
  4529 00003655 50                      	push rax
  4530 00003656 BF10000000              	mov rdi, 8 * 2	; extended env
  4531 0000365B E854F20000              	call malloc
  4532 00003660 488B7D10                	mov rdi, ENV
  4533 00003664 BE00000000              	mov rsi, 0
  4534 00003669 BA01000000              	mov rdx, 1
  4535                                  .L_lambda_opt_env_loop_0c87:	; ext_env[i + 1] <-- env[i]
  4536 0000366E 4883FE01                	cmp rsi, 1
  4537 00003672 7410                    	je .L_lambda_opt_env_end_0c87
  4538 00003674 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4539 00003678 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4540 0000367C 48FFC6                  	inc rsi
  4541 0000367F 48FFC2                  	inc rdx
  4542 00003682 EBEA                    	jmp .L_lambda_opt_env_loop_0c87
  4543                                  .L_lambda_opt_env_end_0c87:
  4544 00003684 5B                      	pop rbx
  4545 00003685 BE00000000              	mov rsi, 0
  4546                                  .L_lambda_opt_params_loop_0c87:	; copy params
  4547 0000368A 4883FE01                	cmp rsi, 1
  4548 0000368E 740E                    	je .L_lambda_opt_params_end_0c87
  4549 00003690 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4550 00003695 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4551 00003699 48FFC6                  	inc rsi
  4552 0000369C EBEC                    	jmp .L_lambda_opt_params_loop_0c87
  4553                                  .L_lambda_opt_params_end_0c87:
  4554 0000369E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4555 000036A1 4889C3                  	mov rbx, rax
  4556 000036A4 58                      	pop rax
  4557 000036A5 C60005                  	mov byte [rax], T_closure
  4558 000036A8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4559 000036AC 48C74009[B9360000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c87
  4560 000036B4 E9E6010000              	jmp .L_lambda_opt_end_0c87
  4561                                  .L_lambda_opt_code_0c87:	; lambda-opt body
  4562 000036B9 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  4563 000036BE 4889FB                  	mov rbx, rdi
  4564 000036C1 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  4565 000036C5 4883FB00                	cmp rbx, 0
  4566 000036C9 7F45                    	jg .L_lambda_opt_arity_check_more_0c87
  4567                                  .L_lambda_opt_arity_check_exact_0c87:	 ; if params in opt is exact
  4568 000036CB 4883EC08                	sub rsp, 8
  4569 000036CF BE00000000              	mov rsi, 0 ; index
  4570                                  .L_lambda_opt_stack_enlarge_loop_0c87:	 ; stack loop enlarge start
  4571 000036D4 4883FE04                	cmp rsi, 4
  4572 000036D8 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c87
  4573 000036DA 4889F7                  	mov rdi, rsi
  4574 000036DD 48FFC7                  	inc rdi
  4575 000036E0 48C1E703                	shl rdi, 3
  4576 000036E4 4801E7                  	add rdi, rsp
  4577 000036E7 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  4578 000036EA 4883EB08                	sub rbx, 8
  4579 000036EE 488B3F                  	mov rdi, [rdi]
  4580 000036F1 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  4581 000036F4 48FFC6                  	inc rsi
  4582 000036F7 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c87
  4583                                  .L_lambda_opt_stack_enlarge_loop_exit_0c87:	 ; end of stack enlarge loop
  4584 000036F9 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  4584 000036FE [01000000]         
  4585 00003702 48C744241002000000      	mov qword [rsp + 2*8], 2
  4586 0000370B E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c87
  4587                                  .L_lambda_opt_arity_check_more_0c87:	 ; if params in opt is more
  4588 00003710 48B8-                   	mov rax, sob_nil
  4588 00003712 [0100000000000000] 
  4589 0000371A 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  4590 0000371D 48FFCE                  	dec rsi
  4591                                  .L_lambda_opt_list_create_loop_0c87:	; start of list creation loop
  4592 00003720 4883FEFF                	cmp rsi, -1
  4593 00003724 7422                    	je .L_lambda_opt_list_create_loop_exit_0c87
  4594 00003726 488D4E04                	lea rcx, [rsi + (3 + 1)]
  4595 0000372A 48C1E103                	shl rcx, 3
  4596 0000372E 4801E1                  	add rcx, rsp
  4597 00003731 488B09                  	mov rcx, [rcx]
  4598 00003734 56                      	push rsi ; save params
  4599 00003735 53                      	push rbx
  4600                                  
  4601 00003736 50                      	push rax ; cdr
  4602 00003737 51                      	push rcx ; car
  4603 00003738 6A02                    	push qword 2 ; push num of args
  4604 0000373A 6A01                    	push qword 1 ; push garbage as env
  4605 0000373C E8FAFA0000              	call L_code_ptr_cons
  4606                                  
  4607 00003741 5B                      	pop rbx ; restore params
  4608 00003742 5E                      	pop rsi
  4609 00003743 48FFCE                  	dec rsi
  4610 00003746 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c87
  4611                                  .L_lambda_opt_list_create_loop_exit_0c87:	; end of list creation loop
  4612 00003748 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  4613 0000374D 4883C302                	add rbx, 2
  4614 00003751 4889DF                  	mov rdi, rbx
  4615 00003754 48C1E703                	shl rdi,3
  4616 00003758 4801E7                  	add rdi, rsp
  4617 0000375B 488907                  	mov [rdi], rax
  4618 0000375E BE00000000              	mov rsi, 0 ;index
  4619                                  .L_lambda_opt_stack_shrink_loop_0c87:	; start of stack shrink loop
  4620 00003763 4883FE04                	cmp rsi, 4
  4621 00003767 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c87
  4622 00003769 BF03000000              	mov rdi, 3
  4623 0000376E 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  4624 00003771 4889D9                  	mov rcx, rbx
  4625 00003774 4829F1                  	sub rcx, rsi
  4626 00003777 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  4627 0000377A 4889FA                  	mov rdx, rdi
  4628 0000377D 48C1E203                	shl rdx, 3
  4629 00003781 4801E2                  	add rdx, rsp
  4630 00003784 48C1E103                	shl rcx, 3
  4631 00003788 4801E1                  	add rcx, rsp
  4632 0000378B 488B12                  	mov rdx, [rdx]
  4633 0000378E 488911                  	mov [rcx], rdx
  4634 00003791 48FFC6                  	inc rsi
  4635 00003794 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c87
  4636                                  .L_lambda_opt_stack_shrink_loop_exit_0c87:	; end of stack shrink loop
  4637 00003796 4883EB02                	sub rbx, 2 ; rbx has number of args
  4638 0000379A 4883EB02                	sub rbx, 2
  4639 0000379E 48C1E303                	shl rbx, 3
  4640 000037A2 4801DC                  	add rsp, rbx
  4641 000037A5 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4642                                  .L_lambda_opt_stack_adjusted_0c87:
  4643 000037AE C8000000                	enter 0, 0
  4644 000037B2 488B4528                	mov rax, PARAM(1)
  4645 000037B6 50                      	push rax
  4646 000037B7 6A01                    	push 1
  4647 000037B9 488B0425[88000000]      	mov rax, qword [free_var_17]
  4648                                  	assert_closure(rax)
    42 000037C1 803805              <1>  cmp byte [%1], %2
    43 000037C4 0F856A090100        <1>  jne L_error_incorrect_type
  4649 000037CA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4650 000037CE 53                      	push rbx
  4651 000037CF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4652 000037D3 FFD3                    	call rbx
  4653 000037D5 50                      	push rax
  4654 000037D6 488B4528                	mov rax, PARAM(1)
  4655 000037DA 50                      	push rax
  4656 000037DB 6A01                    	push 1
  4657 000037DD 488B0425[80000000]      	mov rax, qword [free_var_16]
  4658                                  	assert_closure(rax)
    42 000037E5 803805              <1>  cmp byte [%1], %2
    43 000037E8 0F8546090100        <1>  jne L_error_incorrect_type
  4659 000037EE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4660 000037F2 53                      	push rbx
  4661 000037F3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4662 000037F7 FFD3                    	call rbx
  4663 000037F9 50                      	push rax
  4664 000037FA 6A02                    	push 2
  4665 000037FC 488B4510                	mov rax, qword [rbp + 8*2]
  4666 00003800 488B00                  	mov rax, qword [rax + 8*0]
  4667 00003803 488B00                  	mov rax, qword [rax + 8*0]
  4668 00003806 488B00                  	mov rax, qword [rax]
  4669                                  	assert_closure(rax)
    42 00003809 803805              <1>  cmp byte [%1], %2
    43 0000380C 0F8522090100        <1>  jne L_error_incorrect_type
  4670 00003812 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4671 00003816 53                      	push rbx
  4672 00003817 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4673 0000381B FFD3                    	call rbx
  4674 0000381D 50                      	push rax
  4675 0000381E 488B4520                	mov rax, PARAM(0)
  4676 00003822 50                      	push rax
  4677 00003823 6A02                    	push 2
  4678 00003825 488B0425[E8000000]      	mov rax, qword [free_var_29]
  4679                                  	assert_closure(rax)
    42 0000382D 803805              <1>  cmp byte [%1], %2
    43 00003830 0F85FE080100        <1>  jne L_error_incorrect_type
  4680 00003836 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4681 0000383A 53                      	push rbx
  4682 0000383B FF7508                  	push RET_ADDR
  4683 0000383E 488B7D18                	mov rdi, COUNT
  4684 00003842 4883C703                	add rdi, 3
  4685 00003846 48C1E703                	shl rdi, 3
  4686 0000384A 4801EF                  	add rdi, rbp
  4687 0000384D 488B6D00                	mov rbp, OLD_RDP
  4688 00003851 BE00000000              	mov rsi, 0
  4689                                  .L_tc_recycle_frame_loop_5cbe:	 ; start recycle frame loop
  4690 00003856 4883FE05                	cmp rsi, 5
  4691 0000385A 7427                    	je .L_tc_recycle_frame_done_5cbe
  4692 0000385C B904000000              	mov rcx, 4
  4693 00003861 4829F1                  	sub rcx, rsi
  4694 00003864 48C1E103                	shl rcx, 3
  4695 00003868 4801E1                  	add rcx, rsp ; rcx is the address to move
  4696 0000386B 4889F3                  	mov rbx, rsi
  4697 0000386E 48C1E303                	shl rbx, 3
  4698 00003872 48F7DB                  	neg rbx
  4699 00003875 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4700 00003878 488B09                  	mov rcx, [rcx]
  4701 0000387B 48890B                  	mov [rbx], rcx
  4702 0000387E 48FFC6                  	inc rsi
  4703 00003881 EBD3                    	jmp .L_tc_recycle_frame_loop_5cbe
  4704                                  .L_tc_recycle_frame_done_5cbe:	 ; end recycle frame loop
  4705 00003883 BB04000000              	mov rbx, 4
  4706 00003888 48C1E303                	shl rbx, 3
  4707 0000388C 48F7DB                  	neg rbx
  4708 0000388F 4801FB                  	add rbx, rdi
  4709 00003892 4889DC                  	mov rsp, rbx
  4710 00003895 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4711 00003899 FFE3                    	jmp rbx
  4712 0000389B C9                      	leave
  4713 0000389C C22000                  	ret AND_KILL_FRAME(2)
  4714                                  .L_lambda_opt_end_0c87:	; new closure is in rax
  4715 0000389F C9                      	leave
  4716 000038A0 C21800                  	ret 8 * (2 + 1)
  4717                                  .L_lambda_simple_end_4f4a:	; new closure is in rax
  4718                                  	assert_closure(rax)
    42 000038A3 803805              <1>  cmp byte [%1], %2
    43 000038A6 0F8588080100        <1>  jne L_error_incorrect_type
  4719 000038AC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4720 000038B0 53                      	push rbx
  4721 000038B1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4722 000038B5 FFD3                    	call rbx
  4723 000038B7 48890425[C8020000]      	mov qword [free_var_89], rax
  4724 000038BF 48B8-                   	mov rax, sob_void
  4724 000038C1 [0000000000000000] 
  4725                                  
  4726 000038C9 4889C7                  	mov rdi, rax
  4727 000038CC E8F4EF0000              	call print_sexpr_if_not_void
  4728                                  
  4729 000038D1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4730 000038D6 E8D9EF0000              	call malloc
  4731 000038DB 50                      	push rax
  4732 000038DC BF00000000              	mov rdi, 8 * 0	; new rib
  4733 000038E1 E8CEEF0000              	call malloc
  4734 000038E6 50                      	push rax
  4735 000038E7 BF08000000              	mov rdi, 8 * 1	; extended env
  4736 000038EC E8C3EF0000              	call malloc
  4737 000038F1 488B7D10                	mov rdi, ENV
  4738 000038F5 BE00000000              	mov rsi, 0
  4739 000038FA BA01000000              	mov rdx, 1
  4740                                  .L_lambda_opt_env_loop_0c88:	; ext_env[i + 1] <-- env[i]
  4741 000038FF 4883FE00                	cmp rsi, 0
  4742 00003903 7410                    	je .L_lambda_opt_env_end_0c88
  4743 00003905 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4744 00003909 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4745 0000390D 48FFC6                  	inc rsi
  4746 00003910 48FFC2                  	inc rdx
  4747 00003913 EBEA                    	jmp .L_lambda_opt_env_loop_0c88
  4748                                  .L_lambda_opt_env_end_0c88:
  4749 00003915 5B                      	pop rbx
  4750 00003916 BE00000000              	mov rsi, 0
  4751                                  .L_lambda_opt_params_loop_0c88:	; copy params
  4752 0000391B 4883FE00                	cmp rsi, 0
  4753 0000391F 740E                    	je .L_lambda_opt_params_end_0c88
  4754 00003921 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4755 00003926 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4756 0000392A 48FFC6                  	inc rsi
  4757 0000392D EBEC                    	jmp .L_lambda_opt_params_loop_0c88
  4758                                  .L_lambda_opt_params_end_0c88:
  4759 0000392F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4760 00003932 4889C3                  	mov rbx, rax
  4761 00003935 58                      	pop rax
  4762 00003936 C60005                  	mov byte [rax], T_closure
  4763 00003939 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4764 0000393D 48C74009[4A390000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c88
  4765 00003945 E9AF040000              	jmp .L_lambda_opt_end_0c88
  4766                                  .L_lambda_opt_code_0c88:	; lambda-opt body
  4767 0000394A 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  4768 0000394F 4889FB                  	mov rbx, rdi
  4769 00003952 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  4770 00003956 4883FB00                	cmp rbx, 0
  4771 0000395A 7F45                    	jg .L_lambda_opt_arity_check_more_0c88
  4772                                  .L_lambda_opt_arity_check_exact_0c88:	 ; if params in opt is exact
  4773 0000395C 4883EC08                	sub rsp, 8
  4774 00003960 BE00000000              	mov rsi, 0 ; index
  4775                                  .L_lambda_opt_stack_enlarge_loop_0c88:	 ; stack loop enlarge start
  4776 00003965 4883FE04                	cmp rsi, 4
  4777 00003969 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c88
  4778 0000396B 4889F7                  	mov rdi, rsi
  4779 0000396E 48FFC7                  	inc rdi
  4780 00003971 48C1E703                	shl rdi, 3
  4781 00003975 4801E7                  	add rdi, rsp
  4782 00003978 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  4783 0000397B 4883EB08                	sub rbx, 8
  4784 0000397F 488B3F                  	mov rdi, [rdi]
  4785 00003982 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  4786 00003985 48FFC6                  	inc rsi
  4787 00003988 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c88
  4788                                  .L_lambda_opt_stack_enlarge_loop_exit_0c88:	 ; end of stack enlarge loop
  4789 0000398A 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  4789 0000398F [01000000]         
  4790 00003993 48C744241002000000      	mov qword [rsp + 2*8], 2
  4791 0000399C E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c88
  4792                                  .L_lambda_opt_arity_check_more_0c88:	 ; if params in opt is more
  4793 000039A1 48B8-                   	mov rax, sob_nil
  4793 000039A3 [0100000000000000] 
  4794 000039AB 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  4795 000039AE 48FFCE                  	dec rsi
  4796                                  .L_lambda_opt_list_create_loop_0c88:	; start of list creation loop
  4797 000039B1 4883FEFF                	cmp rsi, -1
  4798 000039B5 7422                    	je .L_lambda_opt_list_create_loop_exit_0c88
  4799 000039B7 488D4E04                	lea rcx, [rsi + (3 + 1)]
  4800 000039BB 48C1E103                	shl rcx, 3
  4801 000039BF 4801E1                  	add rcx, rsp
  4802 000039C2 488B09                  	mov rcx, [rcx]
  4803 000039C5 56                      	push rsi ; save params
  4804 000039C6 53                      	push rbx
  4805                                  
  4806 000039C7 50                      	push rax ; cdr
  4807 000039C8 51                      	push rcx ; car
  4808 000039C9 6A02                    	push qword 2 ; push num of args
  4809 000039CB 6A01                    	push qword 1 ; push garbage as env
  4810 000039CD E869F80000              	call L_code_ptr_cons
  4811                                  
  4812 000039D2 5B                      	pop rbx ; restore params
  4813 000039D3 5E                      	pop rsi
  4814 000039D4 48FFCE                  	dec rsi
  4815 000039D7 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c88
  4816                                  .L_lambda_opt_list_create_loop_exit_0c88:	; end of list creation loop
  4817 000039D9 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  4818 000039DE 4883C302                	add rbx, 2
  4819 000039E2 4889DF                  	mov rdi, rbx
  4820 000039E5 48C1E703                	shl rdi,3
  4821 000039E9 4801E7                  	add rdi, rsp
  4822 000039EC 488907                  	mov [rdi], rax
  4823 000039EF BE00000000              	mov rsi, 0 ;index
  4824                                  .L_lambda_opt_stack_shrink_loop_0c88:	; start of stack shrink loop
  4825 000039F4 4883FE04                	cmp rsi, 4
  4826 000039F8 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c88
  4827 000039FA BF03000000              	mov rdi, 3
  4828 000039FF 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  4829 00003A02 4889D9                  	mov rcx, rbx
  4830 00003A05 4829F1                  	sub rcx, rsi
  4831 00003A08 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  4832 00003A0B 4889FA                  	mov rdx, rdi
  4833 00003A0E 48C1E203                	shl rdx, 3
  4834 00003A12 4801E2                  	add rdx, rsp
  4835 00003A15 48C1E103                	shl rcx, 3
  4836 00003A19 4801E1                  	add rcx, rsp
  4837 00003A1C 488B12                  	mov rdx, [rdx]
  4838 00003A1F 488911                  	mov [rcx], rdx
  4839 00003A22 48FFC6                  	inc rsi
  4840 00003A25 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c88
  4841                                  .L_lambda_opt_stack_shrink_loop_exit_0c88:	; end of stack shrink loop
  4842 00003A27 4883EB02                	sub rbx, 2 ; rbx has number of args
  4843 00003A2B 4883EB02                	sub rbx, 2
  4844 00003A2F 48C1E303                	shl rbx, 3
  4845 00003A33 4801DC                  	add rsp, rbx
  4846 00003A36 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4847                                  .L_lambda_opt_stack_adjusted_0c88:
  4848 00003A3F C8000000                	enter 0, 0
  4849 00003A43 488D0425[17000000]      	lea rax, [23 + L_constants]
  4850 00003A4B 50                      	push rax
  4851 00003A4C 6A01                    	push 1
  4852 00003A4E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4853 00003A53 E85CEE0000              	call malloc
  4854 00003A58 50                      	push rax
  4855 00003A59 BF10000000              	mov rdi, 8 * 2	; new rib
  4856 00003A5E E851EE0000              	call malloc
  4857 00003A63 50                      	push rax
  4858 00003A64 BF10000000              	mov rdi, 8 * 2	; extended env
  4859 00003A69 E846EE0000              	call malloc
  4860 00003A6E 488B7D10                	mov rdi, ENV
  4861 00003A72 BE00000000              	mov rsi, 0
  4862 00003A77 BA01000000              	mov rdx, 1
  4863                                  .L_lambda_simple_env_loop_4f4c:	; ext_env[i + 1] <-- env[i]
  4864 00003A7C 4883FE01                	cmp rsi, 1
  4865 00003A80 7410                    	je .L_lambda_simple_env_end_4f4c
  4866 00003A82 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  4867 00003A86 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4868 00003A8A 48FFC6                  	inc rsi
  4869 00003A8D 48FFC2                  	inc rdx
  4870 00003A90 EBEA                    	jmp .L_lambda_simple_env_loop_4f4c
  4871                                  .L_lambda_simple_env_end_4f4c:
  4872 00003A92 5B                      	pop rbx
  4873 00003A93 BE00000000              	mov rsi, 0
  4874                                  .L_lambda_simple_params_loop_4f4c:	; copy params
  4875 00003A98 4883FE02                	cmp rsi, 2
  4876 00003A9C 740E                    	je .L_lambda_simple_params_end_4f4c
  4877 00003A9E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4878 00003AA3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4879 00003AA7 48FFC6                  	inc rsi
  4880 00003AAA EBEC                    	jmp .L_lambda_simple_params_loop_4f4c
  4881                                  .L_lambda_simple_params_end_4f4c:
  4882 00003AAC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4883 00003AAF 4889C3                  	mov rbx, rax
  4884 00003AB2 58                      	pop rax
  4885 00003AB3 C60005                  	mov byte [rax], T_closure
  4886 00003AB6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4887 00003ABA 48C74009[C73A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f4c
  4888 00003AC2 E9C0020000              	jmp .L_lambda_simple_end_4f4c
  4889                                  .L_lambda_simple_code_4f4c:	; lambda-simple body
  4890 00003AC7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4891 00003ACD 740B                    	je .L_lambda_simple_arity_check_ok_4f4c
  4892 00003ACF FF742410                	push qword [rsp + 8 * 2]
  4893 00003AD3 6A01                    	push 1
  4894 00003AD5 E993ED0000              	jmp L_error_incorrect_arity_simple
  4895                                  .L_lambda_simple_arity_check_ok_4f4c:
  4896 00003ADA C8000000                	enter 0, 0
  4897 00003ADE BF11000000              	mov qword rdi, (1 + 8 + 8)
  4898 00003AE3 E8CCED0000              	call malloc
  4899 00003AE8 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  4900 00003AEC 48B8-                   	mov rax, sob_void
  4900 00003AEE [0000000000000000] 
  4901                                  
  4902 00003AF6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4903 00003AFB E8B4ED0000              	call malloc
  4904 00003B00 50                      	push rax
  4905 00003B01 BF08000000              	mov rdi, 8 * 1	; new rib
  4906 00003B06 E8A9ED0000              	call malloc
  4907 00003B0B 50                      	push rax
  4908 00003B0C BF18000000              	mov rdi, 8 * 3	; extended env
  4909 00003B11 E89EED0000              	call malloc
  4910 00003B16 488B7D10                	mov rdi, ENV
  4911 00003B1A BE00000000              	mov rsi, 0
  4912 00003B1F BA01000000              	mov rdx, 1
  4913                                  .L_lambda_simple_env_loop_4f4d:	; ext_env[i + 1] <-- env[i]
  4914 00003B24 4883FE02                	cmp rsi, 2
  4915 00003B28 7410                    	je .L_lambda_simple_env_end_4f4d
  4916 00003B2A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  4917 00003B2E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4918 00003B32 48FFC6                  	inc rsi
  4919 00003B35 48FFC2                  	inc rdx
  4920 00003B38 EBEA                    	jmp .L_lambda_simple_env_loop_4f4d
  4921                                  .L_lambda_simple_env_end_4f4d:
  4922 00003B3A 5B                      	pop rbx
  4923 00003B3B BE00000000              	mov rsi, 0
  4924                                  .L_lambda_simple_params_loop_4f4d:	; copy params
  4925 00003B40 4883FE01                	cmp rsi, 1
  4926 00003B44 740E                    	je .L_lambda_simple_params_end_4f4d
  4927 00003B46 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4928 00003B4B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4929 00003B4F 48FFC6                  	inc rsi
  4930 00003B52 EBEC                    	jmp .L_lambda_simple_params_loop_4f4d
  4931                                  .L_lambda_simple_params_end_4f4d:
  4932 00003B54 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4933 00003B57 4889C3                  	mov rbx, rax
  4934 00003B5A 58                      	pop rax
  4935 00003B5B C60005                  	mov byte [rax], T_closure
  4936 00003B5E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4937 00003B62 48C74009[6F3B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f4d
  4938 00003B6A E980010000              	jmp .L_lambda_simple_end_4f4d
  4939                                  .L_lambda_simple_code_4f4d:	; lambda-simple body
  4940 00003B6F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4941 00003B75 740B                    	je .L_lambda_simple_arity_check_ok_4f4d
  4942 00003B77 FF742410                	push qword [rsp + 8 * 2]
  4943 00003B7B 6A01                    	push 1
  4944 00003B7D E9EBEC0000              	jmp L_error_incorrect_arity_simple
  4945                                  .L_lambda_simple_arity_check_ok_4f4d:
  4946 00003B82 C8000000                	enter 0, 0
  4947 00003B86 488B4520                	mov rax, PARAM(0)
  4948 00003B8A 50                      	push rax
  4949 00003B8B 6A01                    	push 1
  4950 00003B8D 488B0425[80000000]      	mov rax, qword [free_var_16]
  4951                                  	assert_closure(rax)
    42 00003B95 803805              <1>  cmp byte [%1], %2
    43 00003B98 0F8596050100        <1>  jne L_error_incorrect_type
  4952 00003B9E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4953 00003BA2 53                      	push rbx
  4954 00003BA3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4955 00003BA7 FFD3                    	call rbx
  4956 00003BA9 50                      	push rax
  4957 00003BAA 6A01                    	push 1
  4958 00003BAC 488B0425[08000000]      	mov rax, qword [free_var_1]
  4959                                  	assert_closure(rax)
    42 00003BB4 803805              <1>  cmp byte [%1], %2
    43 00003BB7 0F8577050100        <1>  jne L_error_incorrect_type
  4960 00003BBD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4961 00003BC1 53                      	push rbx
  4962 00003BC2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4963 00003BC6 FFD3                    	call rbx
  4964 00003BC8 483D[02000000]          	cmp rax, sob_boolean_false
  4965 00003BCE 0F840F010000            	je .L_if_else_5681
  4966 00003BD4 488B4520                	mov rax, PARAM(0)
  4967 00003BD8 50                      	push rax
  4968 00003BD9 488B0425[80000000]      	mov rax, qword [free_var_16]
  4969 00003BE1 50                      	push rax
  4970 00003BE2 6A02                    	push 2
  4971 00003BE4 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4972                                  	assert_closure(rax)
    42 00003BEC 803805              <1>  cmp byte [%1], %2
    43 00003BEF 0F853F050100        <1>  jne L_error_incorrect_type
  4973 00003BF5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4974 00003BF9 53                      	push rbx
  4975 00003BFA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4976 00003BFE FFD3                    	call rbx
  4977 00003C00 50                      	push rax
  4978 00003C01 488B4510                	mov rax, qword [rbp + 8*2]
  4979 00003C05 488B4008                	mov rax, qword [rax + 8*1]
  4980 00003C09 488B00                  	mov rax, qword [rax + 8*0]
  4981 00003C0C 50                      	push rax
  4982 00003C0D 6A02                    	push 2
  4983 00003C0F 488B0425[C8020000]      	mov rax, qword [free_var_89]
  4984                                  	assert_closure(rax)
    42 00003C17 803805              <1>  cmp byte [%1], %2
    43 00003C1A 0F8514050100        <1>  jne L_error_incorrect_type
  4985 00003C20 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4986 00003C24 53                      	push rbx
  4987 00003C25 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4988 00003C29 FFD3                    	call rbx
  4989 00003C2B 483D[02000000]          	cmp rax, sob_boolean_false
  4990 00003C31 0F85AA000000            	jne .L_or_end_0615
  4991 00003C37 488B4520                	mov rax, PARAM(0)
  4992 00003C3B 50                      	push rax
  4993 00003C3C 488B0425[88000000]      	mov rax, qword [free_var_17]
  4994 00003C44 50                      	push rax
  4995 00003C45 6A02                    	push 2
  4996 00003C47 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4997                                  	assert_closure(rax)
    42 00003C4F 803805              <1>  cmp byte [%1], %2
    43 00003C52 0F85DC040100        <1>  jne L_error_incorrect_type
  4998 00003C58 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4999 00003C5C 53                      	push rbx
  5000 00003C5D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5001 00003C61 FFD3                    	call rbx
  5002 00003C63 50                      	push rax
  5003 00003C64 6A01                    	push 1
  5004 00003C66 488B4510                	mov rax, qword [rbp + 8*2]
  5005 00003C6A 488B00                  	mov rax, qword [rax + 8*0]
  5006 00003C6D 488B00                  	mov rax, qword [rax + 8*0]
  5007 00003C70 488B00                  	mov rax, qword [rax]
  5008                                  	assert_closure(rax)
    42 00003C73 803805              <1>  cmp byte [%1], %2
    43 00003C76 0F85B8040100        <1>  jne L_error_incorrect_type
  5009 00003C7C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5010 00003C80 53                      	push rbx
  5011 00003C81 FF7508                  	push RET_ADDR
  5012 00003C84 488B7D18                	mov rdi, COUNT
  5013 00003C88 4883C703                	add rdi, 3
  5014 00003C8C 48C1E703                	shl rdi, 3
  5015 00003C90 4801EF                  	add rdi, rbp
  5016 00003C93 488B6D00                	mov rbp, OLD_RDP
  5017 00003C97 BE00000000              	mov rsi, 0
  5018                                  .L_tc_recycle_frame_loop_5cc0:	 ; start recycle frame loop
  5019 00003C9C 4883FE04                	cmp rsi, 4
  5020 00003CA0 7427                    	je .L_tc_recycle_frame_done_5cc0
  5021 00003CA2 B903000000              	mov rcx, 3
  5022 00003CA7 4829F1                  	sub rcx, rsi
  5023 00003CAA 48C1E103                	shl rcx, 3
  5024 00003CAE 4801E1                  	add rcx, rsp ; rcx is the address to move
  5025 00003CB1 4889F3                  	mov rbx, rsi
  5026 00003CB4 48C1E303                	shl rbx, 3
  5027 00003CB8 48F7DB                  	neg rbx
  5028 00003CBB 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5029 00003CBE 488B09                  	mov rcx, [rcx]
  5030 00003CC1 48890B                  	mov [rbx], rcx
  5031 00003CC4 48FFC6                  	inc rsi
  5032 00003CC7 EBD3                    	jmp .L_tc_recycle_frame_loop_5cc0
  5033                                  .L_tc_recycle_frame_done_5cc0:	 ; end recycle frame loop
  5034 00003CC9 BB03000000              	mov rbx, 3
  5035 00003CCE 48C1E303                	shl rbx, 3
  5036 00003CD2 48F7DB                  	neg rbx
  5037 00003CD5 4801FB                  	add rbx, rdi
  5038 00003CD8 4889DC                  	mov rsp, rbx
  5039 00003CDB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5040 00003CDF FFE3                    	jmp rbx
  5041                                  .L_or_end_0615:
  5042 00003CE1 EB08                    	jmp .L_if_end_5681
  5043                                  	.L_if_else_5681:
  5044 00003CE3 488D0425[02000000]      	lea rax, [2 + L_constants]
  5045                                  	.L_if_end_5681:
  5046 00003CEB C9                      	leave
  5047 00003CEC C21800                  	ret 8 * (2 + 1)
  5048                                  .L_lambda_simple_end_4f4d:	; new closure is in rax
  5049 00003CEF 50                      	push rax
  5050 00003CF0 488B4520                	mov rax, PARAM(0)
  5051 00003CF4 8F00                    	pop qword [rax]
  5052 00003CF6 48B8-                   	mov rax, sob_void
  5052 00003CF8 [0000000000000000] 
  5053                                  
  5054 00003D00 488B4510                	mov rax, qword [rbp + 8*2]
  5055 00003D04 488B00                  	mov rax, qword [rax + 8*0]
  5056 00003D07 488B4008                	mov rax, qword [rax + 8*1]
  5057 00003D0B 50                      	push rax
  5058 00003D0C 6A01                    	push 1
  5059 00003D0E 488B4520                	mov rax, PARAM(0)
  5060 00003D12 488B00                  	mov rax, qword [rax]
  5061                                  	assert_closure(rax)
    42 00003D15 803805              <1>  cmp byte [%1], %2
    43 00003D18 0F8516040100        <1>  jne L_error_incorrect_type
  5062 00003D1E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5063 00003D22 53                      	push rbx
  5064 00003D23 FF7508                  	push RET_ADDR
  5065 00003D26 488B7D18                	mov rdi, COUNT
  5066 00003D2A 4883C703                	add rdi, 3
  5067 00003D2E 48C1E703                	shl rdi, 3
  5068 00003D32 4801EF                  	add rdi, rbp
  5069 00003D35 488B6D00                	mov rbp, OLD_RDP
  5070 00003D39 BE00000000              	mov rsi, 0
  5071                                  .L_tc_recycle_frame_loop_5cc1:	 ; start recycle frame loop
  5072 00003D3E 4883FE04                	cmp rsi, 4
  5073 00003D42 7427                    	je .L_tc_recycle_frame_done_5cc1
  5074 00003D44 B903000000              	mov rcx, 3
  5075 00003D49 4829F1                  	sub rcx, rsi
  5076 00003D4C 48C1E103                	shl rcx, 3
  5077 00003D50 4801E1                  	add rcx, rsp ; rcx is the address to move
  5078 00003D53 4889F3                  	mov rbx, rsi
  5079 00003D56 48C1E303                	shl rbx, 3
  5080 00003D5A 48F7DB                  	neg rbx
  5081 00003D5D 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5082 00003D60 488B09                  	mov rcx, [rcx]
  5083 00003D63 48890B                  	mov [rbx], rcx
  5084 00003D66 48FFC6                  	inc rsi
  5085 00003D69 EBD3                    	jmp .L_tc_recycle_frame_loop_5cc1
  5086                                  .L_tc_recycle_frame_done_5cc1:	 ; end recycle frame loop
  5087 00003D6B BB03000000              	mov rbx, 3
  5088 00003D70 48C1E303                	shl rbx, 3
  5089 00003D74 48F7DB                  	neg rbx
  5090 00003D77 4801FB                  	add rbx, rdi
  5091 00003D7A 4889DC                  	mov rsp, rbx
  5092 00003D7D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5093 00003D81 FFE3                    	jmp rbx
  5094 00003D83 C9                      	leave
  5095 00003D84 C21800                  	ret 8 * (2 + 1)
  5096                                  .L_lambda_simple_end_4f4c:	; new closure is in rax
  5097                                  	assert_closure(rax)
    42 00003D87 803805              <1>  cmp byte [%1], %2
    43 00003D8A 0F85A4030100        <1>  jne L_error_incorrect_type
  5098 00003D90 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5099 00003D94 53                      	push rbx
  5100 00003D95 FF7508                  	push RET_ADDR
  5101 00003D98 488B7D18                	mov rdi, COUNT
  5102 00003D9C 4883C703                	add rdi, 3
  5103 00003DA0 48C1E703                	shl rdi, 3
  5104 00003DA4 4801EF                  	add rdi, rbp
  5105 00003DA7 488B6D00                	mov rbp, OLD_RDP
  5106 00003DAB BE00000000              	mov rsi, 0
  5107                                  .L_tc_recycle_frame_loop_5cbf:	 ; start recycle frame loop
  5108 00003DB0 4883FE04                	cmp rsi, 4
  5109 00003DB4 7427                    	je .L_tc_recycle_frame_done_5cbf
  5110 00003DB6 B903000000              	mov rcx, 3
  5111 00003DBB 4829F1                  	sub rcx, rsi
  5112 00003DBE 48C1E103                	shl rcx, 3
  5113 00003DC2 4801E1                  	add rcx, rsp ; rcx is the address to move
  5114 00003DC5 4889F3                  	mov rbx, rsi
  5115 00003DC8 48C1E303                	shl rbx, 3
  5116 00003DCC 48F7DB                  	neg rbx
  5117 00003DCF 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5118 00003DD2 488B09                  	mov rcx, [rcx]
  5119 00003DD5 48890B                  	mov [rbx], rcx
  5120 00003DD8 48FFC6                  	inc rsi
  5121 00003DDB EBD3                    	jmp .L_tc_recycle_frame_loop_5cbf
  5122                                  .L_tc_recycle_frame_done_5cbf:	 ; end recycle frame loop
  5123 00003DDD BB03000000              	mov rbx, 3
  5124 00003DE2 48C1E303                	shl rbx, 3
  5125 00003DE6 48F7DB                  	neg rbx
  5126 00003DE9 4801FB                  	add rbx, rdi
  5127 00003DEC 4889DC                  	mov rsp, rbx
  5128 00003DEF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5129 00003DF3 FFE3                    	jmp rbx
  5130 00003DF5 C9                      	leave
  5131 00003DF6 C22000                  	ret AND_KILL_FRAME(2)
  5132                                  .L_lambda_opt_end_0c88:	; new closure is in rax
  5133 00003DF9 48890425[D0020000]      	mov qword [free_var_90], rax
  5134 00003E01 48B8-                   	mov rax, sob_void
  5134 00003E03 [0000000000000000] 
  5135                                  
  5136 00003E0B 4889C7                  	mov rdi, rax
  5137 00003E0E E8B2EA0000              	call print_sexpr_if_not_void
  5138                                  
  5139 00003E13 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5140 00003E18 E897EA0000              	call malloc
  5141 00003E1D 50                      	push rax
  5142 00003E1E BF00000000              	mov rdi, 8 * 0	; new rib
  5143 00003E23 E88CEA0000              	call malloc
  5144 00003E28 50                      	push rax
  5145 00003E29 BF08000000              	mov rdi, 8 * 1	; extended env
  5146 00003E2E E881EA0000              	call malloc
  5147 00003E33 488B7D10                	mov rdi, ENV
  5148 00003E37 BE00000000              	mov rsi, 0
  5149 00003E3C BA01000000              	mov rdx, 1
  5150                                  .L_lambda_opt_env_loop_0c89:	; ext_env[i + 1] <-- env[i]
  5151 00003E41 4883FE00                	cmp rsi, 0
  5152 00003E45 7410                    	je .L_lambda_opt_env_end_0c89
  5153 00003E47 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5154 00003E4B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5155 00003E4F 48FFC6                  	inc rsi
  5156 00003E52 48FFC2                  	inc rdx
  5157 00003E55 EBEA                    	jmp .L_lambda_opt_env_loop_0c89
  5158                                  .L_lambda_opt_env_end_0c89:
  5159 00003E57 5B                      	pop rbx
  5160 00003E58 BE00000000              	mov rsi, 0
  5161                                  .L_lambda_opt_params_loop_0c89:	; copy params
  5162 00003E5D 4883FE00                	cmp rsi, 0
  5163 00003E61 740E                    	je .L_lambda_opt_params_end_0c89
  5164 00003E63 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5165 00003E68 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5166 00003E6C 48FFC6                  	inc rsi
  5167 00003E6F EBEC                    	jmp .L_lambda_opt_params_loop_0c89
  5168                                  .L_lambda_opt_params_end_0c89:
  5169 00003E71 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5170 00003E74 4889C3                  	mov rbx, rax
  5171 00003E77 58                      	pop rax
  5172 00003E78 C60005                  	mov byte [rax], T_closure
  5173 00003E7B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5174 00003E7F 48C74009[8C3E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c89
  5175 00003E87 E9AF040000              	jmp .L_lambda_opt_end_0c89
  5176                                  .L_lambda_opt_code_0c89:	; lambda-opt body
  5177 00003E8C 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  5178 00003E91 4889FB                  	mov rbx, rdi
  5179 00003E94 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  5180 00003E98 4883FB00                	cmp rbx, 0
  5181 00003E9C 7F45                    	jg .L_lambda_opt_arity_check_more_0c89
  5182                                  .L_lambda_opt_arity_check_exact_0c89:	 ; if params in opt is exact
  5183 00003E9E 4883EC08                	sub rsp, 8
  5184 00003EA2 BE00000000              	mov rsi, 0 ; index
  5185                                  .L_lambda_opt_stack_enlarge_loop_0c89:	 ; stack loop enlarge start
  5186 00003EA7 4883FE04                	cmp rsi, 4
  5187 00003EAB 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c89
  5188 00003EAD 4889F7                  	mov rdi, rsi
  5189 00003EB0 48FFC7                  	inc rdi
  5190 00003EB3 48C1E703                	shl rdi, 3
  5191 00003EB7 4801E7                  	add rdi, rsp
  5192 00003EBA 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  5193 00003EBD 4883EB08                	sub rbx, 8
  5194 00003EC1 488B3F                  	mov rdi, [rdi]
  5195 00003EC4 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  5196 00003EC7 48FFC6                  	inc rsi
  5197 00003ECA EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c89
  5198                                  .L_lambda_opt_stack_enlarge_loop_exit_0c89:	 ; end of stack enlarge loop
  5199 00003ECC 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  5199 00003ED1 [01000000]         
  5200 00003ED5 48C744241002000000      	mov qword [rsp + 2*8], 2
  5201 00003EDE E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c89
  5202                                  .L_lambda_opt_arity_check_more_0c89:	 ; if params in opt is more
  5203 00003EE3 48B8-                   	mov rax, sob_nil
  5203 00003EE5 [0100000000000000] 
  5204 00003EED 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  5205 00003EF0 48FFCE                  	dec rsi
  5206                                  .L_lambda_opt_list_create_loop_0c89:	; start of list creation loop
  5207 00003EF3 4883FEFF                	cmp rsi, -1
  5208 00003EF7 7422                    	je .L_lambda_opt_list_create_loop_exit_0c89
  5209 00003EF9 488D4E04                	lea rcx, [rsi + (3 + 1)]
  5210 00003EFD 48C1E103                	shl rcx, 3
  5211 00003F01 4801E1                  	add rcx, rsp
  5212 00003F04 488B09                  	mov rcx, [rcx]
  5213 00003F07 56                      	push rsi ; save params
  5214 00003F08 53                      	push rbx
  5215                                  
  5216 00003F09 50                      	push rax ; cdr
  5217 00003F0A 51                      	push rcx ; car
  5218 00003F0B 6A02                    	push qword 2 ; push num of args
  5219 00003F0D 6A01                    	push qword 1 ; push garbage as env
  5220 00003F0F E827F30000              	call L_code_ptr_cons
  5221                                  
  5222 00003F14 5B                      	pop rbx ; restore params
  5223 00003F15 5E                      	pop rsi
  5224 00003F16 48FFCE                  	dec rsi
  5225 00003F19 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c89
  5226                                  .L_lambda_opt_list_create_loop_exit_0c89:	; end of list creation loop
  5227 00003F1B 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  5228 00003F20 4883C302                	add rbx, 2
  5229 00003F24 4889DF                  	mov rdi, rbx
  5230 00003F27 48C1E703                	shl rdi,3
  5231 00003F2B 4801E7                  	add rdi, rsp
  5232 00003F2E 488907                  	mov [rdi], rax
  5233 00003F31 BE00000000              	mov rsi, 0 ;index
  5234                                  .L_lambda_opt_stack_shrink_loop_0c89:	; start of stack shrink loop
  5235 00003F36 4883FE04                	cmp rsi, 4
  5236 00003F3A 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c89
  5237 00003F3C BF03000000              	mov rdi, 3
  5238 00003F41 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  5239 00003F44 4889D9                  	mov rcx, rbx
  5240 00003F47 4829F1                  	sub rcx, rsi
  5241 00003F4A 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  5242 00003F4D 4889FA                  	mov rdx, rdi
  5243 00003F50 48C1E203                	shl rdx, 3
  5244 00003F54 4801E2                  	add rdx, rsp
  5245 00003F57 48C1E103                	shl rcx, 3
  5246 00003F5B 4801E1                  	add rcx, rsp
  5247 00003F5E 488B12                  	mov rdx, [rdx]
  5248 00003F61 488911                  	mov [rcx], rdx
  5249 00003F64 48FFC6                  	inc rsi
  5250 00003F67 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c89
  5251                                  .L_lambda_opt_stack_shrink_loop_exit_0c89:	; end of stack shrink loop
  5252 00003F69 4883EB02                	sub rbx, 2 ; rbx has number of args
  5253 00003F6D 4883EB02                	sub rbx, 2
  5254 00003F71 48C1E303                	shl rbx, 3
  5255 00003F75 4801DC                  	add rsp, rbx
  5256 00003F78 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  5257                                  .L_lambda_opt_stack_adjusted_0c89:
  5258 00003F81 C8000000                	enter 0, 0
  5259 00003F85 488D0425[17000000]      	lea rax, [23 + L_constants]
  5260 00003F8D 50                      	push rax
  5261 00003F8E 6A01                    	push 1
  5262 00003F90 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5263 00003F95 E81AE90000              	call malloc
  5264 00003F9A 50                      	push rax
  5265 00003F9B BF10000000              	mov rdi, 8 * 2	; new rib
  5266 00003FA0 E80FE90000              	call malloc
  5267 00003FA5 50                      	push rax
  5268 00003FA6 BF10000000              	mov rdi, 8 * 2	; extended env
  5269 00003FAB E804E90000              	call malloc
  5270 00003FB0 488B7D10                	mov rdi, ENV
  5271 00003FB4 BE00000000              	mov rsi, 0
  5272 00003FB9 BA01000000              	mov rdx, 1
  5273                                  .L_lambda_simple_env_loop_4f4e:	; ext_env[i + 1] <-- env[i]
  5274 00003FBE 4883FE01                	cmp rsi, 1
  5275 00003FC2 7410                    	je .L_lambda_simple_env_end_4f4e
  5276 00003FC4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  5277 00003FC8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5278 00003FCC 48FFC6                  	inc rsi
  5279 00003FCF 48FFC2                  	inc rdx
  5280 00003FD2 EBEA                    	jmp .L_lambda_simple_env_loop_4f4e
  5281                                  .L_lambda_simple_env_end_4f4e:
  5282 00003FD4 5B                      	pop rbx
  5283 00003FD5 BE00000000              	mov rsi, 0
  5284                                  .L_lambda_simple_params_loop_4f4e:	; copy params
  5285 00003FDA 4883FE02                	cmp rsi, 2
  5286 00003FDE 740E                    	je .L_lambda_simple_params_end_4f4e
  5287 00003FE0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5288 00003FE5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5289 00003FE9 48FFC6                  	inc rsi
  5290 00003FEC EBEC                    	jmp .L_lambda_simple_params_loop_4f4e
  5291                                  .L_lambda_simple_params_end_4f4e:
  5292 00003FEE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5293 00003FF1 4889C3                  	mov rbx, rax
  5294 00003FF4 58                      	pop rax
  5295 00003FF5 C60005                  	mov byte [rax], T_closure
  5296 00003FF8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5297 00003FFC 48C74009[09400000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f4e
  5298 00004004 E9C0020000              	jmp .L_lambda_simple_end_4f4e
  5299                                  .L_lambda_simple_code_4f4e:	; lambda-simple body
  5300 00004009 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5301 0000400F 740B                    	je .L_lambda_simple_arity_check_ok_4f4e
  5302 00004011 FF742410                	push qword [rsp + 8 * 2]
  5303 00004015 6A01                    	push 1
  5304 00004017 E951E80000              	jmp L_error_incorrect_arity_simple
  5305                                  .L_lambda_simple_arity_check_ok_4f4e:
  5306 0000401C C8000000                	enter 0, 0
  5307 00004020 BF11000000              	mov qword rdi, (1 + 8 + 8)
  5308 00004025 E88AE80000              	call malloc
  5309 0000402A 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  5310 0000402E 48B8-                   	mov rax, sob_void
  5310 00004030 [0000000000000000] 
  5311                                  
  5312 00004038 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5313 0000403D E872E80000              	call malloc
  5314 00004042 50                      	push rax
  5315 00004043 BF08000000              	mov rdi, 8 * 1	; new rib
  5316 00004048 E867E80000              	call malloc
  5317 0000404D 50                      	push rax
  5318 0000404E BF18000000              	mov rdi, 8 * 3	; extended env
  5319 00004053 E85CE80000              	call malloc
  5320 00004058 488B7D10                	mov rdi, ENV
  5321 0000405C BE00000000              	mov rsi, 0
  5322 00004061 BA01000000              	mov rdx, 1
  5323                                  .L_lambda_simple_env_loop_4f4f:	; ext_env[i + 1] <-- env[i]
  5324 00004066 4883FE02                	cmp rsi, 2
  5325 0000406A 7410                    	je .L_lambda_simple_env_end_4f4f
  5326 0000406C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  5327 00004070 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5328 00004074 48FFC6                  	inc rsi
  5329 00004077 48FFC2                  	inc rdx
  5330 0000407A EBEA                    	jmp .L_lambda_simple_env_loop_4f4f
  5331                                  .L_lambda_simple_env_end_4f4f:
  5332 0000407C 5B                      	pop rbx
  5333 0000407D BE00000000              	mov rsi, 0
  5334                                  .L_lambda_simple_params_loop_4f4f:	; copy params
  5335 00004082 4883FE01                	cmp rsi, 1
  5336 00004086 740E                    	je .L_lambda_simple_params_end_4f4f
  5337 00004088 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5338 0000408D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5339 00004091 48FFC6                  	inc rsi
  5340 00004094 EBEC                    	jmp .L_lambda_simple_params_loop_4f4f
  5341                                  .L_lambda_simple_params_end_4f4f:
  5342 00004096 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5343 00004099 4889C3                  	mov rbx, rax
  5344 0000409C 58                      	pop rax
  5345 0000409D C60005                  	mov byte [rax], T_closure
  5346 000040A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5347 000040A4 48C74009[B1400000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f4f
  5348 000040AC E980010000              	jmp .L_lambda_simple_end_4f4f
  5349                                  .L_lambda_simple_code_4f4f:	; lambda-simple body
  5350 000040B1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5351 000040B7 740B                    	je .L_lambda_simple_arity_check_ok_4f4f
  5352 000040B9 FF742410                	push qword [rsp + 8 * 2]
  5353 000040BD 6A01                    	push 1
  5354 000040BF E9A9E70000              	jmp L_error_incorrect_arity_simple
  5355                                  .L_lambda_simple_arity_check_ok_4f4f:
  5356 000040C4 C8000000                	enter 0, 0
  5357 000040C8 488B4520                	mov rax, PARAM(0)
  5358 000040CC 50                      	push rax
  5359 000040CD 6A01                    	push 1
  5360 000040CF 488B0425[80000000]      	mov rax, qword [free_var_16]
  5361                                  	assert_closure(rax)
    42 000040D7 803805              <1>  cmp byte [%1], %2
    43 000040DA 0F8554000100        <1>  jne L_error_incorrect_type
  5362 000040E0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5363 000040E4 53                      	push rbx
  5364 000040E5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5365 000040E9 FFD3                    	call rbx
  5366 000040EB 50                      	push rax
  5367 000040EC 6A01                    	push 1
  5368 000040EE 488B0425[00000000]      	mov rax, qword [free_var_0]
  5369                                  	assert_closure(rax)
    42 000040F6 803805              <1>  cmp byte [%1], %2
    43 000040F9 0F8535000100        <1>  jne L_error_incorrect_type
  5370 000040FF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5371 00004103 53                      	push rbx
  5372 00004104 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5373 00004108 FFD3                    	call rbx
  5374 0000410A 483D[02000000]          	cmp rax, sob_boolean_false
  5375 00004110 0F8517010000            	jne .L_or_end_0616
  5376 00004116 488B4520                	mov rax, PARAM(0)
  5377 0000411A 50                      	push rax
  5378 0000411B 488B0425[80000000]      	mov rax, qword [free_var_16]
  5379 00004123 50                      	push rax
  5380 00004124 6A02                    	push 2
  5381 00004126 488B0425[D8020000]      	mov rax, qword [free_var_91]
  5382                                  	assert_closure(rax)
    42 0000412E 803805              <1>  cmp byte [%1], %2
    43 00004131 0F85FDFF0000        <1>  jne L_error_incorrect_type
  5383 00004137 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5384 0000413B 53                      	push rbx
  5385 0000413C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5386 00004140 FFD3                    	call rbx
  5387 00004142 50                      	push rax
  5388 00004143 488B4510                	mov rax, qword [rbp + 8*2]
  5389 00004147 488B4008                	mov rax, qword [rax + 8*1]
  5390 0000414B 488B00                  	mov rax, qword [rax + 8*0]
  5391 0000414E 50                      	push rax
  5392 0000414F 6A02                    	push 2
  5393 00004151 488B0425[C8020000]      	mov rax, qword [free_var_89]
  5394                                  	assert_closure(rax)
    42 00004159 803805              <1>  cmp byte [%1], %2
    43 0000415C 0F85D2FF0000        <1>  jne L_error_incorrect_type
  5395 00004162 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5396 00004166 53                      	push rbx
  5397 00004167 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5398 0000416B FFD3                    	call rbx
  5399 0000416D 483D[02000000]          	cmp rax, sob_boolean_false
  5400 00004173 0F84AC000000            	je .L_if_else_5682
  5401 00004179 488B4520                	mov rax, PARAM(0)
  5402 0000417D 50                      	push rax
  5403 0000417E 488B0425[88000000]      	mov rax, qword [free_var_17]
  5404 00004186 50                      	push rax
  5405 00004187 6A02                    	push 2
  5406 00004189 488B0425[D8020000]      	mov rax, qword [free_var_91]
  5407                                  	assert_closure(rax)
    42 00004191 803805              <1>  cmp byte [%1], %2
    43 00004194 0F859AFF0000        <1>  jne L_error_incorrect_type
  5408 0000419A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5409 0000419E 53                      	push rbx
  5410 0000419F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5411 000041A3 FFD3                    	call rbx
  5412 000041A5 50                      	push rax
  5413 000041A6 6A01                    	push 1
  5414 000041A8 488B4510                	mov rax, qword [rbp + 8*2]
  5415 000041AC 488B00                  	mov rax, qword [rax + 8*0]
  5416 000041AF 488B00                  	mov rax, qword [rax + 8*0]
  5417 000041B2 488B00                  	mov rax, qword [rax]
  5418                                  	assert_closure(rax)
    42 000041B5 803805              <1>  cmp byte [%1], %2
    43 000041B8 0F8576FF0000        <1>  jne L_error_incorrect_type
  5419 000041BE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5420 000041C2 53                      	push rbx
  5421 000041C3 FF7508                  	push RET_ADDR
  5422 000041C6 488B7D18                	mov rdi, COUNT
  5423 000041CA 4883C703                	add rdi, 3
  5424 000041CE 48C1E703                	shl rdi, 3
  5425 000041D2 4801EF                  	add rdi, rbp
  5426 000041D5 488B6D00                	mov rbp, OLD_RDP
  5427 000041D9 BE00000000              	mov rsi, 0
  5428                                  .L_tc_recycle_frame_loop_5cc3:	 ; start recycle frame loop
  5429 000041DE 4883FE04                	cmp rsi, 4
  5430 000041E2 7427                    	je .L_tc_recycle_frame_done_5cc3
  5431 000041E4 B903000000              	mov rcx, 3
  5432 000041E9 4829F1                  	sub rcx, rsi
  5433 000041EC 48C1E103                	shl rcx, 3
  5434 000041F0 4801E1                  	add rcx, rsp ; rcx is the address to move
  5435 000041F3 4889F3                  	mov rbx, rsi
  5436 000041F6 48C1E303                	shl rbx, 3
  5437 000041FA 48F7DB                  	neg rbx
  5438 000041FD 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5439 00004200 488B09                  	mov rcx, [rcx]
  5440 00004203 48890B                  	mov [rbx], rcx
  5441 00004206 48FFC6                  	inc rsi
  5442 00004209 EBD3                    	jmp .L_tc_recycle_frame_loop_5cc3
  5443                                  .L_tc_recycle_frame_done_5cc3:	 ; end recycle frame loop
  5444 0000420B BB03000000              	mov rbx, 3
  5445 00004210 48C1E303                	shl rbx, 3
  5446 00004214 48F7DB                  	neg rbx
  5447 00004217 4801FB                  	add rbx, rdi
  5448 0000421A 4889DC                  	mov rsp, rbx
  5449 0000421D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5450 00004221 FFE3                    	jmp rbx
  5451 00004223 EB08                    	jmp .L_if_end_5682
  5452                                  	.L_if_else_5682:
  5453 00004225 488D0425[02000000]      	lea rax, [2 + L_constants]
  5454                                  	.L_if_end_5682:
  5455                                  .L_or_end_0616:
  5456 0000422D C9                      	leave
  5457 0000422E C21800                  	ret 8 * (2 + 1)
  5458                                  .L_lambda_simple_end_4f4f:	; new closure is in rax
  5459 00004231 50                      	push rax
  5460 00004232 488B4520                	mov rax, PARAM(0)
  5461 00004236 8F00                    	pop qword [rax]
  5462 00004238 48B8-                   	mov rax, sob_void
  5462 0000423A [0000000000000000] 
  5463                                  
  5464 00004242 488B4510                	mov rax, qword [rbp + 8*2]
  5465 00004246 488B00                  	mov rax, qword [rax + 8*0]
  5466 00004249 488B4008                	mov rax, qword [rax + 8*1]
  5467 0000424D 50                      	push rax
  5468 0000424E 6A01                    	push 1
  5469 00004250 488B4520                	mov rax, PARAM(0)
  5470 00004254 488B00                  	mov rax, qword [rax]
  5471                                  	assert_closure(rax)
    42 00004257 803805              <1>  cmp byte [%1], %2
    43 0000425A 0F85D4FE0000        <1>  jne L_error_incorrect_type
  5472 00004260 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5473 00004264 53                      	push rbx
  5474 00004265 FF7508                  	push RET_ADDR
  5475 00004268 488B7D18                	mov rdi, COUNT
  5476 0000426C 4883C703                	add rdi, 3
  5477 00004270 48C1E703                	shl rdi, 3
  5478 00004274 4801EF                  	add rdi, rbp
  5479 00004277 488B6D00                	mov rbp, OLD_RDP
  5480 0000427B BE00000000              	mov rsi, 0
  5481                                  .L_tc_recycle_frame_loop_5cc4:	 ; start recycle frame loop
  5482 00004280 4883FE04                	cmp rsi, 4
  5483 00004284 7427                    	je .L_tc_recycle_frame_done_5cc4
  5484 00004286 B903000000              	mov rcx, 3
  5485 0000428B 4829F1                  	sub rcx, rsi
  5486 0000428E 48C1E103                	shl rcx, 3
  5487 00004292 4801E1                  	add rcx, rsp ; rcx is the address to move
  5488 00004295 4889F3                  	mov rbx, rsi
  5489 00004298 48C1E303                	shl rbx, 3
  5490 0000429C 48F7DB                  	neg rbx
  5491 0000429F 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5492 000042A2 488B09                  	mov rcx, [rcx]
  5493 000042A5 48890B                  	mov [rbx], rcx
  5494 000042A8 48FFC6                  	inc rsi
  5495 000042AB EBD3                    	jmp .L_tc_recycle_frame_loop_5cc4
  5496                                  .L_tc_recycle_frame_done_5cc4:	 ; end recycle frame loop
  5497 000042AD BB03000000              	mov rbx, 3
  5498 000042B2 48C1E303                	shl rbx, 3
  5499 000042B6 48F7DB                  	neg rbx
  5500 000042B9 4801FB                  	add rbx, rdi
  5501 000042BC 4889DC                  	mov rsp, rbx
  5502 000042BF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5503 000042C3 FFE3                    	jmp rbx
  5504 000042C5 C9                      	leave
  5505 000042C6 C21800                  	ret 8 * (2 + 1)
  5506                                  .L_lambda_simple_end_4f4e:	; new closure is in rax
  5507                                  	assert_closure(rax)
    42 000042C9 803805              <1>  cmp byte [%1], %2
    43 000042CC 0F8562FE0000        <1>  jne L_error_incorrect_type
  5508 000042D2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5509 000042D6 53                      	push rbx
  5510 000042D7 FF7508                  	push RET_ADDR
  5511 000042DA 488B7D18                	mov rdi, COUNT
  5512 000042DE 4883C703                	add rdi, 3
  5513 000042E2 48C1E703                	shl rdi, 3
  5514 000042E6 4801EF                  	add rdi, rbp
  5515 000042E9 488B6D00                	mov rbp, OLD_RDP
  5516 000042ED BE00000000              	mov rsi, 0
  5517                                  .L_tc_recycle_frame_loop_5cc2:	 ; start recycle frame loop
  5518 000042F2 4883FE04                	cmp rsi, 4
  5519 000042F6 7427                    	je .L_tc_recycle_frame_done_5cc2
  5520 000042F8 B903000000              	mov rcx, 3
  5521 000042FD 4829F1                  	sub rcx, rsi
  5522 00004300 48C1E103                	shl rcx, 3
  5523 00004304 4801E1                  	add rcx, rsp ; rcx is the address to move
  5524 00004307 4889F3                  	mov rbx, rsi
  5525 0000430A 48C1E303                	shl rbx, 3
  5526 0000430E 48F7DB                  	neg rbx
  5527 00004311 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5528 00004314 488B09                  	mov rcx, [rcx]
  5529 00004317 48890B                  	mov [rbx], rcx
  5530 0000431A 48FFC6                  	inc rsi
  5531 0000431D EBD3                    	jmp .L_tc_recycle_frame_loop_5cc2
  5532                                  .L_tc_recycle_frame_done_5cc2:	 ; end recycle frame loop
  5533 0000431F BB03000000              	mov rbx, 3
  5534 00004324 48C1E303                	shl rbx, 3
  5535 00004328 48F7DB                  	neg rbx
  5536 0000432B 4801FB                  	add rbx, rdi
  5537 0000432E 4889DC                  	mov rsp, rbx
  5538 00004331 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5539 00004335 FFE3                    	jmp rbx
  5540 00004337 C9                      	leave
  5541 00004338 C22000                  	ret AND_KILL_FRAME(2)
  5542                                  .L_lambda_opt_end_0c89:	; new closure is in rax
  5543 0000433B 48890425[E0020000]      	mov qword [free_var_92], rax
  5544 00004343 48B8-                   	mov rax, sob_void
  5544 00004345 [0000000000000000] 
  5545                                  
  5546 0000434D 4889C7                  	mov rdi, rax
  5547 00004350 E870E50000              	call print_sexpr_if_not_void
  5548                                  
  5549 00004355 488D0425[17000000]      	lea rax, [23 + L_constants]
  5550 0000435D 50                      	push rax
  5551 0000435E 488D0425[17000000]      	lea rax, [23 + L_constants]
  5552 00004366 50                      	push rax
  5553 00004367 6A02                    	push 2
  5554 00004369 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5555 0000436E E841E50000              	call malloc
  5556 00004373 50                      	push rax
  5557 00004374 BF00000000              	mov rdi, 8 * 0	; new rib
  5558 00004379 E836E50000              	call malloc
  5559 0000437E 50                      	push rax
  5560 0000437F BF08000000              	mov rdi, 8 * 1	; extended env
  5561 00004384 E82BE50000              	call malloc
  5562 00004389 488B7D10                	mov rdi, ENV
  5563 0000438D BE00000000              	mov rsi, 0
  5564 00004392 BA01000000              	mov rdx, 1
  5565                                  .L_lambda_simple_env_loop_4f50:	; ext_env[i + 1] <-- env[i]
  5566 00004397 4883FE00                	cmp rsi, 0
  5567 0000439B 7410                    	je .L_lambda_simple_env_end_4f50
  5568 0000439D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  5569 000043A1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5570 000043A5 48FFC6                  	inc rsi
  5571 000043A8 48FFC2                  	inc rdx
  5572 000043AB EBEA                    	jmp .L_lambda_simple_env_loop_4f50
  5573                                  .L_lambda_simple_env_end_4f50:
  5574 000043AD 5B                      	pop rbx
  5575 000043AE BE00000000              	mov rsi, 0
  5576                                  .L_lambda_simple_params_loop_4f50:	; copy params
  5577 000043B3 4883FE00                	cmp rsi, 0
  5578 000043B7 740E                    	je .L_lambda_simple_params_end_4f50
  5579 000043B9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5580 000043BE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5581 000043C2 48FFC6                  	inc rsi
  5582 000043C5 EBEC                    	jmp .L_lambda_simple_params_loop_4f50
  5583                                  .L_lambda_simple_params_end_4f50:
  5584 000043C7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5585 000043CA 4889C3                  	mov rbx, rax
  5586 000043CD 58                      	pop rax
  5587 000043CE C60005                  	mov byte [rax], T_closure
  5588 000043D1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5589 000043D5 48C74009[E2430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f50
  5590 000043DD E988060000              	jmp .L_lambda_simple_end_4f50
  5591                                  .L_lambda_simple_code_4f50:	; lambda-simple body
  5592 000043E2 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5593 000043E8 740B                    	je .L_lambda_simple_arity_check_ok_4f50
  5594 000043EA FF742410                	push qword [rsp + 8 * 2]
  5595 000043EE 6A02                    	push 2
  5596 000043F0 E978E40000              	jmp L_error_incorrect_arity_simple
  5597                                  .L_lambda_simple_arity_check_ok_4f50:
  5598 000043F5 C8000000                	enter 0, 0
  5599 000043F9 BF11000000              	mov qword rdi, (1 + 8 + 8)
  5600 000043FE E8B1E40000              	call malloc
  5601 00004403 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  5602 00004407 48B8-                   	mov rax, sob_void
  5602 00004409 [0000000000000000] 
  5603                                  
  5604 00004411 BF11000000              	mov qword rdi, (1 + 8 + 8)
  5605 00004416 E899E40000              	call malloc
  5606 0000441B 48894528                	mov qword [rbp + 8*(4 + 1)], rax
  5607 0000441F 48B8-                   	mov rax, sob_void
  5607 00004421 [0000000000000000] 
  5608                                  
  5609 00004429 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5610 0000442E E881E40000              	call malloc
  5611 00004433 50                      	push rax
  5612 00004434 BF10000000              	mov rdi, 8 * 2	; new rib
  5613 00004439 E876E40000              	call malloc
  5614 0000443E 50                      	push rax
  5615 0000443F BF10000000              	mov rdi, 8 * 2	; extended env
  5616 00004444 E86BE40000              	call malloc
  5617 00004449 488B7D10                	mov rdi, ENV
  5618 0000444D BE00000000              	mov rsi, 0
  5619 00004452 BA01000000              	mov rdx, 1
  5620                                  .L_lambda_simple_env_loop_4f51:	; ext_env[i + 1] <-- env[i]
  5621 00004457 4883FE01                	cmp rsi, 1
  5622 0000445B 7410                    	je .L_lambda_simple_env_end_4f51
  5623 0000445D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  5624 00004461 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5625 00004465 48FFC6                  	inc rsi
  5626 00004468 48FFC2                  	inc rdx
  5627 0000446B EBEA                    	jmp .L_lambda_simple_env_loop_4f51
  5628                                  .L_lambda_simple_env_end_4f51:
  5629 0000446D 5B                      	pop rbx
  5630 0000446E BE00000000              	mov rsi, 0
  5631                                  .L_lambda_simple_params_loop_4f51:	; copy params
  5632 00004473 4883FE02                	cmp rsi, 2
  5633 00004477 740E                    	je .L_lambda_simple_params_end_4f51
  5634 00004479 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5635 0000447E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5636 00004482 48FFC6                  	inc rsi
  5637 00004485 EBEC                    	jmp .L_lambda_simple_params_loop_4f51
  5638                                  .L_lambda_simple_params_end_4f51:
  5639 00004487 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5640 0000448A 4889C3                  	mov rbx, rax
  5641 0000448D 58                      	pop rax
  5642 0000448E C60005                  	mov byte [rax], T_closure
  5643 00004491 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5644 00004495 48C74009[A2440000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f51
  5645 0000449D E957010000              	jmp .L_lambda_simple_end_4f51
  5646                                  .L_lambda_simple_code_4f51:	; lambda-simple body
  5647 000044A2 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5648 000044A8 740B                    	je .L_lambda_simple_arity_check_ok_4f51
  5649 000044AA FF742410                	push qword [rsp + 8 * 2]
  5650 000044AE 6A02                    	push 2
  5651 000044B0 E9B8E30000              	jmp L_error_incorrect_arity_simple
  5652                                  .L_lambda_simple_arity_check_ok_4f51:
  5653 000044B5 C8000000                	enter 0, 0
  5654 000044B9 488B4528                	mov rax, PARAM(1)
  5655 000044BD 50                      	push rax
  5656 000044BE 6A01                    	push 1
  5657 000044C0 488B0425[00000000]      	mov rax, qword [free_var_0]
  5658                                  	assert_closure(rax)
    42 000044C8 803805              <1>  cmp byte [%1], %2
    43 000044CB 0F8563FC0000        <1>  jne L_error_incorrect_type
  5659 000044D1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5660 000044D5 53                      	push rbx
  5661 000044D6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5662 000044DA FFD3                    	call rbx
  5663 000044DC 483D[02000000]          	cmp rax, sob_boolean_false
  5664 000044E2 740D                    	je .L_if_else_5683
  5665 000044E4 488D0425[01000000]      	lea rax, [1 + L_constants]
  5666 000044EC E904010000              	jmp .L_if_end_5683
  5667                                  	.L_if_else_5683:
  5668 000044F1 488B4528                	mov rax, PARAM(1)
  5669 000044F5 50                      	push rax
  5670 000044F6 6A01                    	push 1
  5671 000044F8 488B0425[88000000]      	mov rax, qword [free_var_17]
  5672                                  	assert_closure(rax)
    42 00004500 803805              <1>  cmp byte [%1], %2
    43 00004503 0F852BFC0000        <1>  jne L_error_incorrect_type
  5673 00004509 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5674 0000450D 53                      	push rbx
  5675 0000450E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5676 00004512 FFD3                    	call rbx
  5677 00004514 50                      	push rax
  5678 00004515 488B4520                	mov rax, PARAM(0)
  5679 00004519 50                      	push rax
  5680 0000451A 6A02                    	push 2
  5681 0000451C 488B4510                	mov rax, qword [rbp + 8*2]
  5682 00004520 488B00                  	mov rax, qword [rax + 8*0]
  5683 00004523 488B00                  	mov rax, qword [rax + 8*0]
  5684 00004526 488B00                  	mov rax, qword [rax]
  5685                                  	assert_closure(rax)
    42 00004529 803805              <1>  cmp byte [%1], %2
    43 0000452C 0F8502FC0000        <1>  jne L_error_incorrect_type
  5686 00004532 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5687 00004536 53                      	push rbx
  5688 00004537 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5689 0000453B FFD3                    	call rbx
  5690 0000453D 50                      	push rax
  5691 0000453E 488B4528                	mov rax, PARAM(1)
  5692 00004542 50                      	push rax
  5693 00004543 6A01                    	push 1
  5694 00004545 488B0425[80000000]      	mov rax, qword [free_var_16]
  5695                                  	assert_closure(rax)
    42 0000454D 803805              <1>  cmp byte [%1], %2
    43 00004550 0F85DEFB0000        <1>  jne L_error_incorrect_type
  5696 00004556 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5697 0000455A 53                      	push rbx
  5698 0000455B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5699 0000455F FFD3                    	call rbx
  5700 00004561 50                      	push rax
  5701 00004562 6A01                    	push 1
  5702 00004564 488B4520                	mov rax, PARAM(0)
  5703                                  	assert_closure(rax)
    42 00004568 803805              <1>  cmp byte [%1], %2
    43 0000456B 0F85C3FB0000        <1>  jne L_error_incorrect_type
  5704 00004571 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5705 00004575 53                      	push rbx
  5706 00004576 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5707 0000457A FFD3                    	call rbx
  5708 0000457C 50                      	push rax
  5709 0000457D 6A02                    	push 2
  5710 0000457F 488B0425[68000000]      	mov rax, qword [free_var_13]
  5711                                  	assert_closure(rax)
    42 00004587 803805              <1>  cmp byte [%1], %2
    43 0000458A 0F85A4FB0000        <1>  jne L_error_incorrect_type
  5712 00004590 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5713 00004594 53                      	push rbx
  5714 00004595 FF7508                  	push RET_ADDR
  5715 00004598 488B7D18                	mov rdi, COUNT
  5716 0000459C 4883C703                	add rdi, 3
  5717 000045A0 48C1E703                	shl rdi, 3
  5718 000045A4 4801EF                  	add rdi, rbp
  5719 000045A7 488B6D00                	mov rbp, OLD_RDP
  5720 000045AB BE00000000              	mov rsi, 0
  5721                                  .L_tc_recycle_frame_loop_5cc5:	 ; start recycle frame loop
  5722 000045B0 4883FE05                	cmp rsi, 5
  5723 000045B4 7427                    	je .L_tc_recycle_frame_done_5cc5
  5724 000045B6 B904000000              	mov rcx, 4
  5725 000045BB 4829F1                  	sub rcx, rsi
  5726 000045BE 48C1E103                	shl rcx, 3
  5727 000045C2 4801E1                  	add rcx, rsp ; rcx is the address to move
  5728 000045C5 4889F3                  	mov rbx, rsi
  5729 000045C8 48C1E303                	shl rbx, 3
  5730 000045CC 48F7DB                  	neg rbx
  5731 000045CF 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5732 000045D2 488B09                  	mov rcx, [rcx]
  5733 000045D5 48890B                  	mov [rbx], rcx
  5734 000045D8 48FFC6                  	inc rsi
  5735 000045DB EBD3                    	jmp .L_tc_recycle_frame_loop_5cc5
  5736                                  .L_tc_recycle_frame_done_5cc5:	 ; end recycle frame loop
  5737 000045DD BB04000000              	mov rbx, 4
  5738 000045E2 48C1E303                	shl rbx, 3
  5739 000045E6 48F7DB                  	neg rbx
  5740 000045E9 4801FB                  	add rbx, rdi
  5741 000045EC 4889DC                  	mov rsp, rbx
  5742 000045EF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5743 000045F3 FFE3                    	jmp rbx
  5744                                  	.L_if_end_5683:
  5745 000045F5 C9                      	leave
  5746 000045F6 C22000                  	ret 8 * (2 + 2)
  5747                                  .L_lambda_simple_end_4f51:	; new closure is in rax
  5748 000045F9 50                      	push rax
  5749 000045FA 488B4520                	mov rax, PARAM(0)
  5750 000045FE 8F00                    	pop qword [rax]
  5751 00004600 48B8-                   	mov rax, sob_void
  5751 00004602 [0000000000000000] 
  5752                                  
  5753 0000460A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5754 0000460F E8A0E20000              	call malloc
  5755 00004614 50                      	push rax
  5756 00004615 BF10000000              	mov rdi, 8 * 2	; new rib
  5757 0000461A E895E20000              	call malloc
  5758 0000461F 50                      	push rax
  5759 00004620 BF10000000              	mov rdi, 8 * 2	; extended env
  5760 00004625 E88AE20000              	call malloc
  5761 0000462A 488B7D10                	mov rdi, ENV
  5762 0000462E BE00000000              	mov rsi, 0
  5763 00004633 BA01000000              	mov rdx, 1
  5764                                  .L_lambda_simple_env_loop_4f52:	; ext_env[i + 1] <-- env[i]
  5765 00004638 4883FE01                	cmp rsi, 1
  5766 0000463C 7410                    	je .L_lambda_simple_env_end_4f52
  5767 0000463E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  5768 00004642 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5769 00004646 48FFC6                  	inc rsi
  5770 00004649 48FFC2                  	inc rdx
  5771 0000464C EBEA                    	jmp .L_lambda_simple_env_loop_4f52
  5772                                  .L_lambda_simple_env_end_4f52:
  5773 0000464E 5B                      	pop rbx
  5774 0000464F BE00000000              	mov rsi, 0
  5775                                  .L_lambda_simple_params_loop_4f52:	; copy params
  5776 00004654 4883FE02                	cmp rsi, 2
  5777 00004658 740E                    	je .L_lambda_simple_params_end_4f52
  5778 0000465A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5779 0000465F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5780 00004663 48FFC6                  	inc rsi
  5781 00004666 EBEC                    	jmp .L_lambda_simple_params_loop_4f52
  5782                                  .L_lambda_simple_params_end_4f52:
  5783 00004668 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5784 0000466B 4889C3                  	mov rbx, rax
  5785 0000466E 58                      	pop rax
  5786 0000466F C60005                  	mov byte [rax], T_closure
  5787 00004672 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5788 00004676 48C74009[83460000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f52
  5789 0000467E E99C010000              	jmp .L_lambda_simple_end_4f52
  5790                                  .L_lambda_simple_code_4f52:	; lambda-simple body
  5791 00004683 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5792 00004689 740B                    	je .L_lambda_simple_arity_check_ok_4f52
  5793 0000468B FF742410                	push qword [rsp + 8 * 2]
  5794 0000468F 6A02                    	push 2
  5795 00004691 E9D7E10000              	jmp L_error_incorrect_arity_simple
  5796                                  .L_lambda_simple_arity_check_ok_4f52:
  5797 00004696 C8000000                	enter 0, 0
  5798 0000469A 488B4528                	mov rax, PARAM(1)
  5799 0000469E 50                      	push rax
  5800 0000469F 6A01                    	push 1
  5801 000046A1 488B0425[80000000]      	mov rax, qword [free_var_16]
  5802                                  	assert_closure(rax)
    42 000046A9 803805              <1>  cmp byte [%1], %2
    43 000046AC 0F8582FA0000        <1>  jne L_error_incorrect_type
  5803 000046B2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5804 000046B6 53                      	push rbx
  5805 000046B7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5806 000046BB FFD3                    	call rbx
  5807 000046BD 50                      	push rax
  5808 000046BE 6A01                    	push 1
  5809 000046C0 488B0425[00000000]      	mov rax, qword [free_var_0]
  5810                                  	assert_closure(rax)
    42 000046C8 803805              <1>  cmp byte [%1], %2
    43 000046CB 0F8563FA0000        <1>  jne L_error_incorrect_type
  5811 000046D1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5812 000046D5 53                      	push rbx
  5813 000046D6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5814 000046DA FFD3                    	call rbx
  5815 000046DC 483D[02000000]          	cmp rax, sob_boolean_false
  5816 000046E2 740D                    	je .L_if_else_5684
  5817 000046E4 488D0425[01000000]      	lea rax, [1 + L_constants]
  5818 000046EC E92A010000              	jmp .L_if_end_5684
  5819                                  	.L_if_else_5684:
  5820 000046F1 488B4528                	mov rax, PARAM(1)
  5821 000046F5 50                      	push rax
  5822 000046F6 488B0425[88000000]      	mov rax, qword [free_var_17]
  5823 000046FE 50                      	push rax
  5824 000046FF 6A02                    	push 2
  5825 00004701 488B4510                	mov rax, qword [rbp + 8*2]
  5826 00004705 488B00                  	mov rax, qword [rax + 8*0]
  5827 00004708 488B00                  	mov rax, qword [rax + 8*0]
  5828 0000470B 488B00                  	mov rax, qword [rax]
  5829                                  	assert_closure(rax)
    42 0000470E 803805              <1>  cmp byte [%1], %2
    43 00004711 0F851DFA0000        <1>  jne L_error_incorrect_type
  5830 00004717 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5831 0000471B 53                      	push rbx
  5832 0000471C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5833 00004720 FFD3                    	call rbx
  5834 00004722 50                      	push rax
  5835 00004723 488B4520                	mov rax, PARAM(0)
  5836 00004727 50                      	push rax
  5837 00004728 6A02                    	push 2
  5838 0000472A 488B4510                	mov rax, qword [rbp + 8*2]
  5839 0000472E 488B00                  	mov rax, qword [rax + 8*0]
  5840 00004731 488B4008                	mov rax, qword [rax + 8*1]
  5841 00004735 488B00                  	mov rax, qword [rax]
  5842                                  	assert_closure(rax)
    42 00004738 803805              <1>  cmp byte [%1], %2
    43 0000473B 0F85F3F90000        <1>  jne L_error_incorrect_type
  5843 00004741 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5844 00004745 53                      	push rbx
  5845 00004746 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5846 0000474A FFD3                    	call rbx
  5847 0000474C 50                      	push rax
  5848 0000474D 488B4528                	mov rax, PARAM(1)
  5849 00004751 50                      	push rax
  5850 00004752 488B0425[80000000]      	mov rax, qword [free_var_16]
  5851 0000475A 50                      	push rax
  5852 0000475B 6A02                    	push 2
  5853 0000475D 488B4510                	mov rax, qword [rbp + 8*2]
  5854 00004761 488B00                  	mov rax, qword [rax + 8*0]
  5855 00004764 488B00                  	mov rax, qword [rax + 8*0]
  5856 00004767 488B00                  	mov rax, qword [rax]
  5857                                  	assert_closure(rax)
    42 0000476A 803805              <1>  cmp byte [%1], %2
    43 0000476D 0F85C1F90000        <1>  jne L_error_incorrect_type
  5858 00004773 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5859 00004777 53                      	push rbx
  5860 00004778 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5861 0000477C FFD3                    	call rbx
  5862 0000477E 50                      	push rax
  5863 0000477F 488B4520                	mov rax, PARAM(0)
  5864 00004783 50                      	push rax
  5865 00004784 6A02                    	push 2
  5866 00004786 488B0425[C8020000]      	mov rax, qword [free_var_89]
  5867                                  	assert_closure(rax)
    42 0000478E 803805              <1>  cmp byte [%1], %2
    43 00004791 0F859DF90000        <1>  jne L_error_incorrect_type
  5868 00004797 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5869 0000479B 53                      	push rbx
  5870 0000479C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5871 000047A0 FFD3                    	call rbx
  5872 000047A2 50                      	push rax
  5873 000047A3 6A02                    	push 2
  5874 000047A5 488B0425[68000000]      	mov rax, qword [free_var_13]
  5875                                  	assert_closure(rax)
    42 000047AD 803805              <1>  cmp byte [%1], %2
    43 000047B0 0F857EF90000        <1>  jne L_error_incorrect_type
  5876 000047B6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5877 000047BA 53                      	push rbx
  5878 000047BB FF7508                  	push RET_ADDR
  5879 000047BE 488B7D18                	mov rdi, COUNT
  5880 000047C2 4883C703                	add rdi, 3
  5881 000047C6 48C1E703                	shl rdi, 3
  5882 000047CA 4801EF                  	add rdi, rbp
  5883 000047CD 488B6D00                	mov rbp, OLD_RDP
  5884 000047D1 BE00000000              	mov rsi, 0
  5885                                  .L_tc_recycle_frame_loop_5cc6:	 ; start recycle frame loop
  5886 000047D6 4883FE05                	cmp rsi, 5
  5887 000047DA 7427                    	je .L_tc_recycle_frame_done_5cc6
  5888 000047DC B904000000              	mov rcx, 4
  5889 000047E1 4829F1                  	sub rcx, rsi
  5890 000047E4 48C1E103                	shl rcx, 3
  5891 000047E8 4801E1                  	add rcx, rsp ; rcx is the address to move
  5892 000047EB 4889F3                  	mov rbx, rsi
  5893 000047EE 48C1E303                	shl rbx, 3
  5894 000047F2 48F7DB                  	neg rbx
  5895 000047F5 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5896 000047F8 488B09                  	mov rcx, [rcx]
  5897 000047FB 48890B                  	mov [rbx], rcx
  5898 000047FE 48FFC6                  	inc rsi
  5899 00004801 EBD3                    	jmp .L_tc_recycle_frame_loop_5cc6
  5900                                  .L_tc_recycle_frame_done_5cc6:	 ; end recycle frame loop
  5901 00004803 BB04000000              	mov rbx, 4
  5902 00004808 48C1E303                	shl rbx, 3
  5903 0000480C 48F7DB                  	neg rbx
  5904 0000480F 4801FB                  	add rbx, rdi
  5905 00004812 4889DC                  	mov rsp, rbx
  5906 00004815 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5907 00004819 FFE3                    	jmp rbx
  5908                                  	.L_if_end_5684:
  5909 0000481B C9                      	leave
  5910 0000481C C22000                  	ret 8 * (2 + 2)
  5911                                  .L_lambda_simple_end_4f52:	; new closure is in rax
  5912 0000481F 50                      	push rax
  5913 00004820 488B4528                	mov rax, PARAM(1)
  5914 00004824 8F00                    	pop qword [rax]
  5915 00004826 48B8-                   	mov rax, sob_void
  5915 00004828 [0000000000000000] 
  5916                                  
  5917 00004830 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5918 00004835 E87AE00000              	call malloc
  5919 0000483A 50                      	push rax
  5920 0000483B BF10000000              	mov rdi, 8 * 2	; new rib
  5921 00004840 E86FE00000              	call malloc
  5922 00004845 50                      	push rax
  5923 00004846 BF10000000              	mov rdi, 8 * 2	; extended env
  5924 0000484B E864E00000              	call malloc
  5925 00004850 488B7D10                	mov rdi, ENV
  5926 00004854 BE00000000              	mov rsi, 0
  5927 00004859 BA01000000              	mov rdx, 1
  5928                                  .L_lambda_opt_env_loop_0c8a:	; ext_env[i + 1] <-- env[i]
  5929 0000485E 4883FE01                	cmp rsi, 1
  5930 00004862 7410                    	je .L_lambda_opt_env_end_0c8a
  5931 00004864 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5932 00004868 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5933 0000486C 48FFC6                  	inc rsi
  5934 0000486F 48FFC2                  	inc rdx
  5935 00004872 EBEA                    	jmp .L_lambda_opt_env_loop_0c8a
  5936                                  .L_lambda_opt_env_end_0c8a:
  5937 00004874 5B                      	pop rbx
  5938 00004875 BE00000000              	mov rsi, 0
  5939                                  .L_lambda_opt_params_loop_0c8a:	; copy params
  5940 0000487A 4883FE02                	cmp rsi, 2
  5941 0000487E 740E                    	je .L_lambda_opt_params_end_0c8a
  5942 00004880 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5943 00004885 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5944 00004889 48FFC6                  	inc rsi
  5945 0000488C EBEC                    	jmp .L_lambda_opt_params_loop_0c8a
  5946                                  .L_lambda_opt_params_end_0c8a:
  5947 0000488E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5948 00004891 4889C3                  	mov rbx, rax
  5949 00004894 58                      	pop rax
  5950 00004895 C60005                  	mov byte [rax], T_closure
  5951 00004898 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5952 0000489C 48C74009[A9480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c8a
  5953 000048A4 E9BD010000              	jmp .L_lambda_opt_end_0c8a
  5954                                  .L_lambda_opt_code_0c8a:	; lambda-opt body
  5955 000048A9 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  5956 000048AE 4889FB                  	mov rbx, rdi
  5957 000048B1 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  5958 000048B5 4883FB00                	cmp rbx, 0
  5959 000048B9 7F45                    	jg .L_lambda_opt_arity_check_more_0c8a
  5960                                  .L_lambda_opt_arity_check_exact_0c8a:	 ; if params in opt is exact
  5961 000048BB 4883EC08                	sub rsp, 8
  5962 000048BF BE00000000              	mov rsi, 0 ; index
  5963                                  .L_lambda_opt_stack_enlarge_loop_0c8a:	 ; stack loop enlarge start
  5964 000048C4 4883FE04                	cmp rsi, 4
  5965 000048C8 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c8a
  5966 000048CA 4889F7                  	mov rdi, rsi
  5967 000048CD 48FFC7                  	inc rdi
  5968 000048D0 48C1E703                	shl rdi, 3
  5969 000048D4 4801E7                  	add rdi, rsp
  5970 000048D7 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  5971 000048DA 4883EB08                	sub rbx, 8
  5972 000048DE 488B3F                  	mov rdi, [rdi]
  5973 000048E1 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  5974 000048E4 48FFC6                  	inc rsi
  5975 000048E7 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c8a
  5976                                  .L_lambda_opt_stack_enlarge_loop_exit_0c8a:	 ; end of stack enlarge loop
  5977 000048E9 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  5977 000048EE [01000000]         
  5978 000048F2 48C744241002000000      	mov qword [rsp + 2*8], 2
  5979 000048FB E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c8a
  5980                                  .L_lambda_opt_arity_check_more_0c8a:	 ; if params in opt is more
  5981 00004900 48B8-                   	mov rax, sob_nil
  5981 00004902 [0100000000000000] 
  5982 0000490A 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  5983 0000490D 48FFCE                  	dec rsi
  5984                                  .L_lambda_opt_list_create_loop_0c8a:	; start of list creation loop
  5985 00004910 4883FEFF                	cmp rsi, -1
  5986 00004914 7422                    	je .L_lambda_opt_list_create_loop_exit_0c8a
  5987 00004916 488D4E04                	lea rcx, [rsi + (3 + 1)]
  5988 0000491A 48C1E103                	shl rcx, 3
  5989 0000491E 4801E1                  	add rcx, rsp
  5990 00004921 488B09                  	mov rcx, [rcx]
  5991 00004924 56                      	push rsi ; save params
  5992 00004925 53                      	push rbx
  5993                                  
  5994 00004926 50                      	push rax ; cdr
  5995 00004927 51                      	push rcx ; car
  5996 00004928 6A02                    	push qword 2 ; push num of args
  5997 0000492A 6A01                    	push qword 1 ; push garbage as env
  5998 0000492C E80AE90000              	call L_code_ptr_cons
  5999                                  
  6000 00004931 5B                      	pop rbx ; restore params
  6001 00004932 5E                      	pop rsi
  6002 00004933 48FFCE                  	dec rsi
  6003 00004936 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c8a
  6004                                  .L_lambda_opt_list_create_loop_exit_0c8a:	; end of list creation loop
  6005 00004938 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  6006 0000493D 4883C302                	add rbx, 2
  6007 00004941 4889DF                  	mov rdi, rbx
  6008 00004944 48C1E703                	shl rdi,3
  6009 00004948 4801E7                  	add rdi, rsp
  6010 0000494B 488907                  	mov [rdi], rax
  6011 0000494E BE00000000              	mov rsi, 0 ;index
  6012                                  .L_lambda_opt_stack_shrink_loop_0c8a:	; start of stack shrink loop
  6013 00004953 4883FE04                	cmp rsi, 4
  6014 00004957 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c8a
  6015 00004959 BF03000000              	mov rdi, 3
  6016 0000495E 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  6017 00004961 4889D9                  	mov rcx, rbx
  6018 00004964 4829F1                  	sub rcx, rsi
  6019 00004967 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  6020 0000496A 4889FA                  	mov rdx, rdi
  6021 0000496D 48C1E203                	shl rdx, 3
  6022 00004971 4801E2                  	add rdx, rsp
  6023 00004974 48C1E103                	shl rcx, 3
  6024 00004978 4801E1                  	add rcx, rsp
  6025 0000497B 488B12                  	mov rdx, [rdx]
  6026 0000497E 488911                  	mov [rcx], rdx
  6027 00004981 48FFC6                  	inc rsi
  6028 00004984 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c8a
  6029                                  .L_lambda_opt_stack_shrink_loop_exit_0c8a:	; end of stack shrink loop
  6030 00004986 4883EB02                	sub rbx, 2 ; rbx has number of args
  6031 0000498A 4883EB02                	sub rbx, 2
  6032 0000498E 48C1E303                	shl rbx, 3
  6033 00004992 4801DC                  	add rsp, rbx
  6034 00004995 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  6035                                  .L_lambda_opt_stack_adjusted_0c8a:
  6036 0000499E C8000000                	enter 0, 0
  6037 000049A2 488B4528                	mov rax, PARAM(1)
  6038 000049A6 50                      	push rax
  6039 000049A7 6A01                    	push 1
  6040 000049A9 488B0425[00000000]      	mov rax, qword [free_var_0]
  6041                                  	assert_closure(rax)
    42 000049B1 803805              <1>  cmp byte [%1], %2
    43 000049B4 0F857AF70000        <1>  jne L_error_incorrect_type
  6042 000049BA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6043 000049BE 53                      	push rbx
  6044 000049BF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6045 000049C3 FFD3                    	call rbx
  6046 000049C5 483D[02000000]          	cmp rax, sob_boolean_false
  6047 000049CB 740D                    	je .L_if_else_5685
  6048 000049CD 488D0425[01000000]      	lea rax, [1 + L_constants]
  6049 000049D5 E988000000              	jmp .L_if_end_5685
  6050                                  	.L_if_else_5685:
  6051 000049DA 488B4528                	mov rax, PARAM(1)
  6052 000049DE 50                      	push rax
  6053 000049DF 488B4520                	mov rax, PARAM(0)
  6054 000049E3 50                      	push rax
  6055 000049E4 6A02                    	push 2
  6056 000049E6 488B4510                	mov rax, qword [rbp + 8*2]
  6057 000049EA 488B00                  	mov rax, qword [rax + 8*0]
  6058 000049ED 488B4008                	mov rax, qword [rax + 8*1]
  6059 000049F1 488B00                  	mov rax, qword [rax]
  6060                                  	assert_closure(rax)
    42 000049F4 803805              <1>  cmp byte [%1], %2
    43 000049F7 0F8537F70000        <1>  jne L_error_incorrect_type
  6061 000049FD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6062 00004A01 53                      	push rbx
  6063 00004A02 FF7508                  	push RET_ADDR
  6064 00004A05 488B7D18                	mov rdi, COUNT
  6065 00004A09 4883C703                	add rdi, 3
  6066 00004A0D 48C1E703                	shl rdi, 3
  6067 00004A11 4801EF                  	add rdi, rbp
  6068 00004A14 488B6D00                	mov rbp, OLD_RDP
  6069 00004A18 BE00000000              	mov rsi, 0
  6070                                  .L_tc_recycle_frame_loop_5cc7:	 ; start recycle frame loop
  6071 00004A1D 4883FE05                	cmp rsi, 5
  6072 00004A21 7427                    	je .L_tc_recycle_frame_done_5cc7
  6073 00004A23 B904000000              	mov rcx, 4
  6074 00004A28 4829F1                  	sub rcx, rsi
  6075 00004A2B 48C1E103                	shl rcx, 3
  6076 00004A2F 4801E1                  	add rcx, rsp ; rcx is the address to move
  6077 00004A32 4889F3                  	mov rbx, rsi
  6078 00004A35 48C1E303                	shl rbx, 3
  6079 00004A39 48F7DB                  	neg rbx
  6080 00004A3C 4801FB                  	add rbx, rdi ;rbx is the address to move to
  6081 00004A3F 488B09                  	mov rcx, [rcx]
  6082 00004A42 48890B                  	mov [rbx], rcx
  6083 00004A45 48FFC6                  	inc rsi
  6084 00004A48 EBD3                    	jmp .L_tc_recycle_frame_loop_5cc7
  6085                                  .L_tc_recycle_frame_done_5cc7:	 ; end recycle frame loop
  6086 00004A4A BB04000000              	mov rbx, 4
  6087 00004A4F 48C1E303                	shl rbx, 3
  6088 00004A53 48F7DB                  	neg rbx
  6089 00004A56 4801FB                  	add rbx, rdi
  6090 00004A59 4889DC                  	mov rsp, rbx
  6091 00004A5C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6092 00004A60 FFE3                    	jmp rbx
  6093                                  	.L_if_end_5685:
  6094 00004A62 C9                      	leave
  6095 00004A63 C22000                  	ret AND_KILL_FRAME(2)
  6096                                  .L_lambda_opt_end_0c8a:	; new closure is in rax
  6097 00004A66 C9                      	leave
  6098 00004A67 C22000                  	ret 8 * (2 + 2)
  6099                                  .L_lambda_simple_end_4f50:	; new closure is in rax
  6100                                  	assert_closure(rax)
    42 00004A6A 803805              <1>  cmp byte [%1], %2
    43 00004A6D 0F85C1F60000        <1>  jne L_error_incorrect_type
  6101 00004A73 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6102 00004A77 53                      	push rbx
  6103 00004A78 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6104 00004A7C FFD3                    	call rbx
  6105 00004A7E 48890425[D8020000]      	mov qword [free_var_91], rax
  6106 00004A86 48B8-                   	mov rax, sob_void
  6106 00004A88 [0000000000000000] 
  6107                                  
  6108 00004A90 4889C7                  	mov rdi, rax
  6109 00004A93 E82DDE0000              	call print_sexpr_if_not_void
  6110                                  
  6111 00004A98 488D0425[17000000]      	lea rax, [23 + L_constants]
  6112 00004AA0 50                      	push rax
  6113 00004AA1 6A01                    	push 1
  6114 00004AA3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6115 00004AA8 E807DE0000              	call malloc
  6116 00004AAD 50                      	push rax
  6117 00004AAE BF00000000              	mov rdi, 8 * 0	; new rib
  6118 00004AB3 E8FCDD0000              	call malloc
  6119 00004AB8 50                      	push rax
  6120 00004AB9 BF08000000              	mov rdi, 8 * 1	; extended env
  6121 00004ABE E8F1DD0000              	call malloc
  6122 00004AC3 488B7D10                	mov rdi, ENV
  6123 00004AC7 BE00000000              	mov rsi, 0
  6124 00004ACC BA01000000              	mov rdx, 1
  6125                                  .L_lambda_simple_env_loop_4f53:	; ext_env[i + 1] <-- env[i]
  6126 00004AD1 4883FE00                	cmp rsi, 0
  6127 00004AD5 7410                    	je .L_lambda_simple_env_end_4f53
  6128 00004AD7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  6129 00004ADB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6130 00004ADF 48FFC6                  	inc rsi
  6131 00004AE2 48FFC2                  	inc rdx
  6132 00004AE5 EBEA                    	jmp .L_lambda_simple_env_loop_4f53
  6133                                  .L_lambda_simple_env_end_4f53:
  6134 00004AE7 5B                      	pop rbx
  6135 00004AE8 BE00000000              	mov rsi, 0
  6136                                  .L_lambda_simple_params_loop_4f53:	; copy params
  6137 00004AED 4883FE00                	cmp rsi, 0
  6138 00004AF1 740E                    	je .L_lambda_simple_params_end_4f53
  6139 00004AF3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6140 00004AF8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6141 00004AFC 48FFC6                  	inc rsi
  6142 00004AFF EBEC                    	jmp .L_lambda_simple_params_loop_4f53
  6143                                  .L_lambda_simple_params_end_4f53:
  6144 00004B01 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6145 00004B04 4889C3                  	mov rbx, rax
  6146 00004B07 58                      	pop rax
  6147 00004B08 C60005                  	mov byte [rax], T_closure
  6148 00004B0B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6149 00004B0F 48C74009[1C4B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f53
  6150 00004B17 E914030000              	jmp .L_lambda_simple_end_4f53
  6151                                  .L_lambda_simple_code_4f53:	; lambda-simple body
  6152 00004B1C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6153 00004B22 740B                    	je .L_lambda_simple_arity_check_ok_4f53
  6154 00004B24 FF742410                	push qword [rsp + 8 * 2]
  6155 00004B28 6A01                    	push 1
  6156 00004B2A E93EDD0000              	jmp L_error_incorrect_arity_simple
  6157                                  .L_lambda_simple_arity_check_ok_4f53:
  6158 00004B2F C8000000                	enter 0, 0
  6159 00004B33 BF11000000              	mov qword rdi, (1 + 8 + 8)
  6160 00004B38 E877DD0000              	call malloc
  6161 00004B3D 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  6162 00004B41 48B8-                   	mov rax, sob_void
  6162 00004B43 [0000000000000000] 
  6163                                  
  6164 00004B4B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6165 00004B50 E85FDD0000              	call malloc
  6166 00004B55 50                      	push rax
  6167 00004B56 BF08000000              	mov rdi, 8 * 1	; new rib
  6168 00004B5B E854DD0000              	call malloc
  6169 00004B60 50                      	push rax
  6170 00004B61 BF10000000              	mov rdi, 8 * 2	; extended env
  6171 00004B66 E849DD0000              	call malloc
  6172 00004B6B 488B7D10                	mov rdi, ENV
  6173 00004B6F BE00000000              	mov rsi, 0
  6174 00004B74 BA01000000              	mov rdx, 1
  6175                                  .L_lambda_simple_env_loop_4f54:	; ext_env[i + 1] <-- env[i]
  6176 00004B79 4883FE01                	cmp rsi, 1
  6177 00004B7D 7410                    	je .L_lambda_simple_env_end_4f54
  6178 00004B7F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  6179 00004B83 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6180 00004B87 48FFC6                  	inc rsi
  6181 00004B8A 48FFC2                  	inc rdx
  6182 00004B8D EBEA                    	jmp .L_lambda_simple_env_loop_4f54
  6183                                  .L_lambda_simple_env_end_4f54:
  6184 00004B8F 5B                      	pop rbx
  6185 00004B90 BE00000000              	mov rsi, 0
  6186                                  .L_lambda_simple_params_loop_4f54:	; copy params
  6187 00004B95 4883FE01                	cmp rsi, 1
  6188 00004B99 740E                    	je .L_lambda_simple_params_end_4f54
  6189 00004B9B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6190 00004BA0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6191 00004BA4 48FFC6                  	inc rsi
  6192 00004BA7 EBEC                    	jmp .L_lambda_simple_params_loop_4f54
  6193                                  .L_lambda_simple_params_end_4f54:
  6194 00004BA9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6195 00004BAC 4889C3                  	mov rbx, rax
  6196 00004BAF 58                      	pop rax
  6197 00004BB0 C60005                  	mov byte [rax], T_closure
  6198 00004BB3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6199 00004BB7 48C74009[C44B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f54
  6200 00004BBF E938010000              	jmp .L_lambda_simple_end_4f54
  6201                                  .L_lambda_simple_code_4f54:	; lambda-simple body
  6202 00004BC4 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6203 00004BCA 740B                    	je .L_lambda_simple_arity_check_ok_4f54
  6204 00004BCC FF742410                	push qword [rsp + 8 * 2]
  6205 00004BD0 6A02                    	push 2
  6206 00004BD2 E996DC0000              	jmp L_error_incorrect_arity_simple
  6207                                  .L_lambda_simple_arity_check_ok_4f54:
  6208 00004BD7 C8000000                	enter 0, 0
  6209 00004BDB 488B4520                	mov rax, PARAM(0)
  6210 00004BDF 50                      	push rax
  6211 00004BE0 6A01                    	push 1
  6212 00004BE2 488B0425[00000000]      	mov rax, qword [free_var_0]
  6213                                  	assert_closure(rax)
    42 00004BEA 803805              <1>  cmp byte [%1], %2
    43 00004BED 0F8541F50000        <1>  jne L_error_incorrect_type
  6214 00004BF3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6215 00004BF7 53                      	push rbx
  6216 00004BF8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6217 00004BFC FFD3                    	call rbx
  6218 00004BFE 483D[02000000]          	cmp rax, sob_boolean_false
  6219 00004C04 7409                    	je .L_if_else_5686
  6220 00004C06 488B4528                	mov rax, PARAM(1)
  6221 00004C0A E9E9000000              	jmp .L_if_end_5686
  6222                                  	.L_if_else_5686:
  6223 00004C0F 488B4528                	mov rax, PARAM(1)
  6224 00004C13 50                      	push rax
  6225 00004C14 488B4520                	mov rax, PARAM(0)
  6226 00004C18 50                      	push rax
  6227 00004C19 6A01                    	push 1
  6228 00004C1B 488B0425[80000000]      	mov rax, qword [free_var_16]
  6229                                  	assert_closure(rax)
    42 00004C23 803805              <1>  cmp byte [%1], %2
    43 00004C26 0F8508F50000        <1>  jne L_error_incorrect_type
  6230 00004C2C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6231 00004C30 53                      	push rbx
  6232 00004C31 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6233 00004C35 FFD3                    	call rbx
  6234 00004C37 50                      	push rax
  6235 00004C38 6A02                    	push 2
  6236 00004C3A 488B0425[68000000]      	mov rax, qword [free_var_13]
  6237                                  	assert_closure(rax)
    42 00004C42 803805              <1>  cmp byte [%1], %2
    43 00004C45 0F85E9F40000        <1>  jne L_error_incorrect_type
  6238 00004C4B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6239 00004C4F 53                      	push rbx
  6240 00004C50 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6241 00004C54 FFD3                    	call rbx
  6242 00004C56 50                      	push rax
  6243 00004C57 488B4520                	mov rax, PARAM(0)
  6244 00004C5B 50                      	push rax
  6245 00004C5C 6A01                    	push 1
  6246 00004C5E 488B0425[88000000]      	mov rax, qword [free_var_17]
  6247                                  	assert_closure(rax)
    42 00004C66 803805              <1>  cmp byte [%1], %2
    43 00004C69 0F85C5F40000        <1>  jne L_error_incorrect_type
  6248 00004C6F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6249 00004C73 53                      	push rbx
  6250 00004C74 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6251 00004C78 FFD3                    	call rbx
  6252 00004C7A 50                      	push rax
  6253 00004C7B 6A02                    	push 2
  6254 00004C7D 488B4510                	mov rax, qword [rbp + 8*2]
  6255 00004C81 488B00                  	mov rax, qword [rax + 8*0]
  6256 00004C84 488B00                  	mov rax, qword [rax + 8*0]
  6257 00004C87 488B00                  	mov rax, qword [rax]
  6258                                  	assert_closure(rax)
    42 00004C8A 803805              <1>  cmp byte [%1], %2
    43 00004C8D 0F85A1F40000        <1>  jne L_error_incorrect_type
  6259 00004C93 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6260 00004C97 53                      	push rbx
  6261 00004C98 FF7508                  	push RET_ADDR
  6262 00004C9B 488B7D18                	mov rdi, COUNT
  6263 00004C9F 4883C703                	add rdi, 3
  6264 00004CA3 48C1E703                	shl rdi, 3
  6265 00004CA7 4801EF                  	add rdi, rbp
  6266 00004CAA 488B6D00                	mov rbp, OLD_RDP
  6267 00004CAE BE00000000              	mov rsi, 0
  6268                                  .L_tc_recycle_frame_loop_5cc8:	 ; start recycle frame loop
  6269 00004CB3 4883FE05                	cmp rsi, 5
  6270 00004CB7 7427                    	je .L_tc_recycle_frame_done_5cc8
  6271 00004CB9 B904000000              	mov rcx, 4
  6272 00004CBE 4829F1                  	sub rcx, rsi
  6273 00004CC1 48C1E103                	shl rcx, 3
  6274 00004CC5 4801E1                  	add rcx, rsp ; rcx is the address to move
  6275 00004CC8 4889F3                  	mov rbx, rsi
  6276 00004CCB 48C1E303                	shl rbx, 3
  6277 00004CCF 48F7DB                  	neg rbx
  6278 00004CD2 4801FB                  	add rbx, rdi ;rbx is the address to move to
  6279 00004CD5 488B09                  	mov rcx, [rcx]
  6280 00004CD8 48890B                  	mov [rbx], rcx
  6281 00004CDB 48FFC6                  	inc rsi
  6282 00004CDE EBD3                    	jmp .L_tc_recycle_frame_loop_5cc8
  6283                                  .L_tc_recycle_frame_done_5cc8:	 ; end recycle frame loop
  6284 00004CE0 BB04000000              	mov rbx, 4
  6285 00004CE5 48C1E303                	shl rbx, 3
  6286 00004CE9 48F7DB                  	neg rbx
  6287 00004CEC 4801FB                  	add rbx, rdi
  6288 00004CEF 4889DC                  	mov rsp, rbx
  6289 00004CF2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6290 00004CF6 FFE3                    	jmp rbx
  6291                                  	.L_if_end_5686:
  6292 00004CF8 C9                      	leave
  6293 00004CF9 C22000                  	ret 8 * (2 + 2)
  6294                                  .L_lambda_simple_end_4f54:	; new closure is in rax
  6295 00004CFC 50                      	push rax
  6296 00004CFD 488B4520                	mov rax, PARAM(0)
  6297 00004D01 8F00                    	pop qword [rax]
  6298 00004D03 48B8-                   	mov rax, sob_void
  6298 00004D05 [0000000000000000] 
  6299                                  
  6300 00004D0D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6301 00004D12 E89DDB0000              	call malloc
  6302 00004D17 50                      	push rax
  6303 00004D18 BF08000000              	mov rdi, 8 * 1	; new rib
  6304 00004D1D E892DB0000              	call malloc
  6305 00004D22 50                      	push rax
  6306 00004D23 BF10000000              	mov rdi, 8 * 2	; extended env
  6307 00004D28 E887DB0000              	call malloc
  6308 00004D2D 488B7D10                	mov rdi, ENV
  6309 00004D31 BE00000000              	mov rsi, 0
  6310 00004D36 BA01000000              	mov rdx, 1
  6311                                  .L_lambda_simple_env_loop_4f55:	; ext_env[i + 1] <-- env[i]
  6312 00004D3B 4883FE01                	cmp rsi, 1
  6313 00004D3F 7410                    	je .L_lambda_simple_env_end_4f55
  6314 00004D41 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  6315 00004D45 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6316 00004D49 48FFC6                  	inc rsi
  6317 00004D4C 48FFC2                  	inc rdx
  6318 00004D4F EBEA                    	jmp .L_lambda_simple_env_loop_4f55
  6319                                  .L_lambda_simple_env_end_4f55:
  6320 00004D51 5B                      	pop rbx
  6321 00004D52 BE00000000              	mov rsi, 0
  6322                                  .L_lambda_simple_params_loop_4f55:	; copy params
  6323 00004D57 4883FE01                	cmp rsi, 1
  6324 00004D5B 740E                    	je .L_lambda_simple_params_end_4f55
  6325 00004D5D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6326 00004D62 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6327 00004D66 48FFC6                  	inc rsi
  6328 00004D69 EBEC                    	jmp .L_lambda_simple_params_loop_4f55
  6329                                  .L_lambda_simple_params_end_4f55:
  6330 00004D6B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6331 00004D6E 4889C3                  	mov rbx, rax
  6332 00004D71 58                      	pop rax
  6333 00004D72 C60005                  	mov byte [rax], T_closure
  6334 00004D75 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6335 00004D79 48C74009[864D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f55
  6336 00004D81 E9A6000000              	jmp .L_lambda_simple_end_4f55
  6337                                  .L_lambda_simple_code_4f55:	; lambda-simple body
  6338 00004D86 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6339 00004D8C 740B                    	je .L_lambda_simple_arity_check_ok_4f55
  6340 00004D8E FF742410                	push qword [rsp + 8 * 2]
  6341 00004D92 6A01                    	push 1
  6342 00004D94 E9D4DA0000              	jmp L_error_incorrect_arity_simple
  6343                                  .L_lambda_simple_arity_check_ok_4f55:
  6344 00004D99 C8000000                	enter 0, 0
  6345 00004D9D 488D0425[01000000]      	lea rax, [1 + L_constants]
  6346 00004DA5 50                      	push rax
  6347 00004DA6 488B4520                	mov rax, PARAM(0)
  6348 00004DAA 50                      	push rax
  6349 00004DAB 6A02                    	push 2
  6350 00004DAD 488B4510                	mov rax, qword [rbp + 8*2]
  6351 00004DB1 488B00                  	mov rax, qword [rax + 8*0]
  6352 00004DB4 488B00                  	mov rax, qword [rax + 8*0]
  6353 00004DB7 488B00                  	mov rax, qword [rax]
  6354                                  	assert_closure(rax)
    42 00004DBA 803805              <1>  cmp byte [%1], %2
    43 00004DBD 0F8571F30000        <1>  jne L_error_incorrect_type
  6355 00004DC3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6356 00004DC7 53                      	push rbx
  6357 00004DC8 FF7508                  	push RET_ADDR
  6358 00004DCB 488B7D18                	mov rdi, COUNT
  6359 00004DCF 4883C703                	add rdi, 3
  6360 00004DD3 48C1E703                	shl rdi, 3
  6361 00004DD7 4801EF                  	add rdi, rbp
  6362 00004DDA 488B6D00                	mov rbp, OLD_RDP
  6363 00004DDE BE00000000              	mov rsi, 0
  6364                                  .L_tc_recycle_frame_loop_5cc9:	 ; start recycle frame loop
  6365 00004DE3 4883FE05                	cmp rsi, 5
  6366 00004DE7 7427                    	je .L_tc_recycle_frame_done_5cc9
  6367 00004DE9 B904000000              	mov rcx, 4
  6368 00004DEE 4829F1                  	sub rcx, rsi
  6369 00004DF1 48C1E103                	shl rcx, 3
  6370 00004DF5 4801E1                  	add rcx, rsp ; rcx is the address to move
  6371 00004DF8 4889F3                  	mov rbx, rsi
  6372 00004DFB 48C1E303                	shl rbx, 3
  6373 00004DFF 48F7DB                  	neg rbx
  6374 00004E02 4801FB                  	add rbx, rdi ;rbx is the address to move to
  6375 00004E05 488B09                  	mov rcx, [rcx]
  6376 00004E08 48890B                  	mov [rbx], rcx
  6377 00004E0B 48FFC6                  	inc rsi
  6378 00004E0E EBD3                    	jmp .L_tc_recycle_frame_loop_5cc9
  6379                                  .L_tc_recycle_frame_done_5cc9:	 ; end recycle frame loop
  6380 00004E10 BB04000000              	mov rbx, 4
  6381 00004E15 48C1E303                	shl rbx, 3
  6382 00004E19 48F7DB                  	neg rbx
  6383 00004E1C 4801FB                  	add rbx, rdi
  6384 00004E1F 4889DC                  	mov rsp, rbx
  6385 00004E22 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6386 00004E26 FFE3                    	jmp rbx
  6387 00004E28 C9                      	leave
  6388 00004E29 C21800                  	ret 8 * (2 + 1)
  6389                                  .L_lambda_simple_end_4f55:	; new closure is in rax
  6390 00004E2C C9                      	leave
  6391 00004E2D C21800                  	ret 8 * (2 + 1)
  6392                                  .L_lambda_simple_end_4f53:	; new closure is in rax
  6393                                  	assert_closure(rax)
    42 00004E30 803805              <1>  cmp byte [%1], %2
    43 00004E33 0F85FBF20000        <1>  jne L_error_incorrect_type
  6394 00004E39 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6395 00004E3D 53                      	push rbx
  6396 00004E3E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6397 00004E42 FFD3                    	call rbx
  6398 00004E44 48890425[E8020000]      	mov qword [free_var_93], rax
  6399 00004E4C 48B8-                   	mov rax, sob_void
  6399 00004E4E [0000000000000000] 
  6400                                  
  6401 00004E56 4889C7                  	mov rdi, rax
  6402 00004E59 E867DA0000              	call print_sexpr_if_not_void
  6403                                  
  6404 00004E5E 488D0425[17000000]      	lea rax, [23 + L_constants]
  6405 00004E66 50                      	push rax
  6406 00004E67 488D0425[17000000]      	lea rax, [23 + L_constants]
  6407 00004E6F 50                      	push rax
  6408 00004E70 6A02                    	push 2
  6409 00004E72 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6410 00004E77 E838DA0000              	call malloc
  6411 00004E7C 50                      	push rax
  6412 00004E7D BF00000000              	mov rdi, 8 * 0	; new rib
  6413 00004E82 E82DDA0000              	call malloc
  6414 00004E87 50                      	push rax
  6415 00004E88 BF08000000              	mov rdi, 8 * 1	; extended env
  6416 00004E8D E822DA0000              	call malloc
  6417 00004E92 488B7D10                	mov rdi, ENV
  6418 00004E96 BE00000000              	mov rsi, 0
  6419 00004E9B BA01000000              	mov rdx, 1
  6420                                  .L_lambda_simple_env_loop_4f56:	; ext_env[i + 1] <-- env[i]
  6421 00004EA0 4883FE00                	cmp rsi, 0
  6422 00004EA4 7410                    	je .L_lambda_simple_env_end_4f56
  6423 00004EA6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  6424 00004EAA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6425 00004EAE 48FFC6                  	inc rsi
  6426 00004EB1 48FFC2                  	inc rdx
  6427 00004EB4 EBEA                    	jmp .L_lambda_simple_env_loop_4f56
  6428                                  .L_lambda_simple_env_end_4f56:
  6429 00004EB6 5B                      	pop rbx
  6430 00004EB7 BE00000000              	mov rsi, 0
  6431                                  .L_lambda_simple_params_loop_4f56:	; copy params
  6432 00004EBC 4883FE00                	cmp rsi, 0
  6433 00004EC0 740E                    	je .L_lambda_simple_params_end_4f56
  6434 00004EC2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6435 00004EC7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6436 00004ECB 48FFC6                  	inc rsi
  6437 00004ECE EBEC                    	jmp .L_lambda_simple_params_loop_4f56
  6438                                  .L_lambda_simple_params_end_4f56:
  6439 00004ED0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6440 00004ED3 4889C3                  	mov rbx, rax
  6441 00004ED6 58                      	pop rax
  6442 00004ED7 C60005                  	mov byte [rax], T_closure
  6443 00004EDA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6444 00004EDE 48C74009[EB4E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f56
  6445 00004EE6 E949060000              	jmp .L_lambda_simple_end_4f56
  6446                                  .L_lambda_simple_code_4f56:	; lambda-simple body
  6447 00004EEB 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6448 00004EF1 740B                    	je .L_lambda_simple_arity_check_ok_4f56
  6449 00004EF3 FF742410                	push qword [rsp + 8 * 2]
  6450 00004EF7 6A02                    	push 2
  6451 00004EF9 E96FD90000              	jmp L_error_incorrect_arity_simple
  6452                                  .L_lambda_simple_arity_check_ok_4f56:
  6453 00004EFE C8000000                	enter 0, 0
  6454 00004F02 BF11000000              	mov qword rdi, (1 + 8 + 8)
  6455 00004F07 E8A8D90000              	call malloc
  6456 00004F0C 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  6457 00004F10 48B8-                   	mov rax, sob_void
  6457 00004F12 [0000000000000000] 
  6458                                  
  6459 00004F1A BF11000000              	mov qword rdi, (1 + 8 + 8)
  6460 00004F1F E890D90000              	call malloc
  6461 00004F24 48894528                	mov qword [rbp + 8*(4 + 1)], rax
  6462 00004F28 48B8-                   	mov rax, sob_void
  6462 00004F2A [0000000000000000] 
  6463                                  
  6464 00004F32 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6465 00004F37 E878D90000              	call malloc
  6466 00004F3C 50                      	push rax
  6467 00004F3D BF10000000              	mov rdi, 8 * 2	; new rib
  6468 00004F42 E86DD90000              	call malloc
  6469 00004F47 50                      	push rax
  6470 00004F48 BF10000000              	mov rdi, 8 * 2	; extended env
  6471 00004F4D E862D90000              	call malloc
  6472 00004F52 488B7D10                	mov rdi, ENV
  6473 00004F56 BE00000000              	mov rsi, 0
  6474 00004F5B BA01000000              	mov rdx, 1
  6475                                  .L_lambda_simple_env_loop_4f57:	; ext_env[i + 1] <-- env[i]
  6476 00004F60 4883FE01                	cmp rsi, 1
  6477 00004F64 7410                    	je .L_lambda_simple_env_end_4f57
  6478 00004F66 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  6479 00004F6A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6480 00004F6E 48FFC6                  	inc rsi
  6481 00004F71 48FFC2                  	inc rdx
  6482 00004F74 EBEA                    	jmp .L_lambda_simple_env_loop_4f57
  6483                                  .L_lambda_simple_env_end_4f57:
  6484 00004F76 5B                      	pop rbx
  6485 00004F77 BE00000000              	mov rsi, 0
  6486                                  .L_lambda_simple_params_loop_4f57:	; copy params
  6487 00004F7C 4883FE02                	cmp rsi, 2
  6488 00004F80 740E                    	je .L_lambda_simple_params_end_4f57
  6489 00004F82 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6490 00004F87 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6491 00004F8B 48FFC6                  	inc rsi
  6492 00004F8E EBEC                    	jmp .L_lambda_simple_params_loop_4f57
  6493                                  .L_lambda_simple_params_end_4f57:
  6494 00004F90 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6495 00004F93 4889C3                  	mov rbx, rax
  6496 00004F96 58                      	pop rax
  6497 00004F97 C60005                  	mov byte [rax], T_closure
  6498 00004F9A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6499 00004F9E 48C74009[AB4F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f57
  6500 00004FA6 E93E010000              	jmp .L_lambda_simple_end_4f57
  6501                                  .L_lambda_simple_code_4f57:	; lambda-simple body
  6502 00004FAB 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6503 00004FB1 740B                    	je .L_lambda_simple_arity_check_ok_4f57
  6504 00004FB3 FF742410                	push qword [rsp + 8 * 2]
  6505 00004FB7 6A02                    	push 2
  6506 00004FB9 E9AFD80000              	jmp L_error_incorrect_arity_simple
  6507                                  .L_lambda_simple_arity_check_ok_4f57:
  6508 00004FBE C8000000                	enter 0, 0
  6509 00004FC2 488B4528                	mov rax, PARAM(1)
  6510 00004FC6 50                      	push rax
  6511 00004FC7 6A01                    	push 1
  6512 00004FC9 488B0425[00000000]      	mov rax, qword [free_var_0]
  6513                                  	assert_closure(rax)
    42 00004FD1 803805              <1>  cmp byte [%1], %2
    43 00004FD4 0F855AF10000        <1>  jne L_error_incorrect_type
  6514 00004FDA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6515 00004FDE 53                      	push rbx
  6516 00004FDF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6517 00004FE3 FFD3                    	call rbx
  6518 00004FE5 483D[02000000]          	cmp rax, sob_boolean_false
  6519 00004FEB 7409                    	je .L_if_else_5687
  6520 00004FED 488B4520                	mov rax, PARAM(0)
  6521 00004FF1 E9EF000000              	jmp .L_if_end_5687
  6522                                  	.L_if_else_5687:
  6523 00004FF6 488B4528                	mov rax, PARAM(1)
  6524 00004FFA 50                      	push rax
  6525 00004FFB 6A01                    	push 1
  6526 00004FFD 488B0425[88000000]      	mov rax, qword [free_var_17]
  6527                                  	assert_closure(rax)
    42 00005005 803805              <1>  cmp byte [%1], %2
    43 00005008 0F8526F10000        <1>  jne L_error_incorrect_type
  6528 0000500E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6529 00005012 53                      	push rbx
  6530 00005013 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6531 00005017 FFD3                    	call rbx
  6532 00005019 50                      	push rax
  6533 0000501A 488B4528                	mov rax, PARAM(1)
  6534 0000501E 50                      	push rax
  6535 0000501F 6A01                    	push 1
  6536 00005021 488B0425[80000000]      	mov rax, qword [free_var_16]
  6537                                  	assert_closure(rax)
    42 00005029 803805              <1>  cmp byte [%1], %2
    43 0000502C 0F8502F10000        <1>  jne L_error_incorrect_type
  6538 00005032 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6539 00005036 53                      	push rbx
  6540 00005037 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6541 0000503B FFD3                    	call rbx
  6542 0000503D 50                      	push rax
  6543 0000503E 6A02                    	push 2
  6544 00005040 488B4510                	mov rax, qword [rbp + 8*2]
  6545 00005044 488B00                  	mov rax, qword [rax + 8*0]
  6546 00005047 488B00                  	mov rax, qword [rax + 8*0]
  6547 0000504A 488B00                  	mov rax, qword [rax]
  6548                                  	assert_closure(rax)
    42 0000504D 803805              <1>  cmp byte [%1], %2
    43 00005050 0F85DEF00000        <1>  jne L_error_incorrect_type
  6549 00005056 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6550 0000505A 53                      	push rbx
  6551 0000505B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6552 0000505F FFD3                    	call rbx
  6553 00005061 50                      	push rax
  6554 00005062 488B4520                	mov rax, PARAM(0)
  6555 00005066 50                      	push rax
  6556 00005067 6A02                    	push 2
  6557 00005069 488B4510                	mov rax, qword [rbp + 8*2]
  6558 0000506D 488B00                  	mov rax, qword [rax + 8*0]
  6559 00005070 488B4008                	mov rax, qword [rax + 8*1]
  6560 00005074 488B00                  	mov rax, qword [rax]
  6561                                  	assert_closure(rax)
    42 00005077 803805              <1>  cmp byte [%1], %2
    43 0000507A 0F85B4F00000        <1>  jne L_error_incorrect_type
  6562 00005080 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6563 00005084 53                      	push rbx
  6564 00005085 FF7508                  	push RET_ADDR
  6565 00005088 488B7D18                	mov rdi, COUNT
  6566 0000508C 4883C703                	add rdi, 3
  6567 00005090 48C1E703                	shl rdi, 3
  6568 00005094 4801EF                  	add rdi, rbp
  6569 00005097 488B6D00                	mov rbp, OLD_RDP
  6570 0000509B BE00000000              	mov rsi, 0
  6571                                  .L_tc_recycle_frame_loop_5cca:	 ; start recycle frame loop
  6572 000050A0 4883FE05                	cmp rsi, 5
  6573 000050A4 7427                    	je .L_tc_recycle_frame_done_5cca
  6574 000050A6 B904000000              	mov rcx, 4
  6575 000050AB 4829F1                  	sub rcx, rsi
  6576 000050AE 48C1E103                	shl rcx, 3
  6577 000050B2 4801E1                  	add rcx, rsp ; rcx is the address to move
  6578 000050B5 4889F3                  	mov rbx, rsi
  6579 000050B8 48C1E303                	shl rbx, 3
  6580 000050BC 48F7DB                  	neg rbx
  6581 000050BF 4801FB                  	add rbx, rdi ;rbx is the address to move to
  6582 000050C2 488B09                  	mov rcx, [rcx]
  6583 000050C5 48890B                  	mov [rbx], rcx
  6584 000050C8 48FFC6                  	inc rsi
  6585 000050CB EBD3                    	jmp .L_tc_recycle_frame_loop_5cca
  6586                                  .L_tc_recycle_frame_done_5cca:	 ; end recycle frame loop
  6587 000050CD BB04000000              	mov rbx, 4
  6588 000050D2 48C1E303                	shl rbx, 3
  6589 000050D6 48F7DB                  	neg rbx
  6590 000050D9 4801FB                  	add rbx, rdi
  6591 000050DC 4889DC                  	mov rsp, rbx
  6592 000050DF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6593 000050E3 FFE3                    	jmp rbx
  6594                                  	.L_if_end_5687:
  6595 000050E5 C9                      	leave
  6596 000050E6 C22000                  	ret 8 * (2 + 2)
  6597                                  .L_lambda_simple_end_4f57:	; new closure is in rax
  6598 000050E9 50                      	push rax
  6599 000050EA 488B4520                	mov rax, PARAM(0)
  6600 000050EE 8F00                    	pop qword [rax]
  6601 000050F0 48B8-                   	mov rax, sob_void
  6601 000050F2 [0000000000000000] 
  6602                                  
  6603 000050FA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6604 000050FF E8B0D70000              	call malloc
  6605 00005104 50                      	push rax
  6606 00005105 BF10000000              	mov rdi, 8 * 2	; new rib
  6607 0000510A E8A5D70000              	call malloc
  6608 0000510F 50                      	push rax
  6609 00005110 BF10000000              	mov rdi, 8 * 2	; extended env
  6610 00005115 E89AD70000              	call malloc
  6611 0000511A 488B7D10                	mov rdi, ENV
  6612 0000511E BE00000000              	mov rsi, 0
  6613 00005123 BA01000000              	mov rdx, 1
  6614                                  .L_lambda_simple_env_loop_4f58:	; ext_env[i + 1] <-- env[i]
  6615 00005128 4883FE01                	cmp rsi, 1
  6616 0000512C 7410                    	je .L_lambda_simple_env_end_4f58
  6617 0000512E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  6618 00005132 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6619 00005136 48FFC6                  	inc rsi
  6620 00005139 48FFC2                  	inc rdx
  6621 0000513C EBEA                    	jmp .L_lambda_simple_env_loop_4f58
  6622                                  .L_lambda_simple_env_end_4f58:
  6623 0000513E 5B                      	pop rbx
  6624 0000513F BE00000000              	mov rsi, 0
  6625                                  .L_lambda_simple_params_loop_4f58:	; copy params
  6626 00005144 4883FE02                	cmp rsi, 2
  6627 00005148 740E                    	je .L_lambda_simple_params_end_4f58
  6628 0000514A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6629 0000514F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6630 00005153 48FFC6                  	inc rsi
  6631 00005156 EBEC                    	jmp .L_lambda_simple_params_loop_4f58
  6632                                  .L_lambda_simple_params_end_4f58:
  6633 00005158 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6634 0000515B 4889C3                  	mov rbx, rax
  6635 0000515E 58                      	pop rax
  6636 0000515F C60005                  	mov byte [rax], T_closure
  6637 00005162 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6638 00005166 48C74009[73510000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f58
  6639 0000516E E939010000              	jmp .L_lambda_simple_end_4f58
  6640                                  .L_lambda_simple_code_4f58:	; lambda-simple body
  6641 00005173 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6642 00005179 740B                    	je .L_lambda_simple_arity_check_ok_4f58
  6643 0000517B FF742410                	push qword [rsp + 8 * 2]
  6644 0000517F 6A02                    	push 2
  6645 00005181 E9E7D60000              	jmp L_error_incorrect_arity_simple
  6646                                  .L_lambda_simple_arity_check_ok_4f58:
  6647 00005186 C8000000                	enter 0, 0
  6648 0000518A 488B4520                	mov rax, PARAM(0)
  6649 0000518E 50                      	push rax
  6650 0000518F 6A01                    	push 1
  6651 00005191 488B0425[00000000]      	mov rax, qword [free_var_0]
  6652                                  	assert_closure(rax)
    42 00005199 803805              <1>  cmp byte [%1], %2
    43 0000519C 0F8592EF0000        <1>  jne L_error_incorrect_type
  6653 000051A2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6654 000051A6 53                      	push rbx
  6655 000051A7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6656 000051AB FFD3                    	call rbx
  6657 000051AD 483D[02000000]          	cmp rax, sob_boolean_false
  6658 000051B3 7409                    	je .L_if_else_5688
  6659 000051B5 488B4528                	mov rax, PARAM(1)
  6660 000051B9 E9EA000000              	jmp .L_if_end_5688
  6661                                  	.L_if_else_5688:
  6662 000051BE 488B4528                	mov rax, PARAM(1)
  6663 000051C2 50                      	push rax
  6664 000051C3 488B4520                	mov rax, PARAM(0)
  6665 000051C7 50                      	push rax
  6666 000051C8 6A01                    	push 1
  6667 000051CA 488B0425[88000000]      	mov rax, qword [free_var_17]
  6668                                  	assert_closure(rax)
    42 000051D2 803805              <1>  cmp byte [%1], %2
    43 000051D5 0F8559EF0000        <1>  jne L_error_incorrect_type
  6669 000051DB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6670 000051DF 53                      	push rbx
  6671 000051E0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6672 000051E4 FFD3                    	call rbx
  6673 000051E6 50                      	push rax
  6674 000051E7 6A02                    	push 2
  6675 000051E9 488B4510                	mov rax, qword [rbp + 8*2]
  6676 000051ED 488B00                  	mov rax, qword [rax + 8*0]
  6677 000051F0 488B4008                	mov rax, qword [rax + 8*1]
  6678 000051F4 488B00                  	mov rax, qword [rax]
  6679                                  	assert_closure(rax)
    42 000051F7 803805              <1>  cmp byte [%1], %2
    43 000051FA 0F8534EF0000        <1>  jne L_error_incorrect_type
  6680 00005200 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6681 00005204 53                      	push rbx
  6682 00005205 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6683 00005209 FFD3                    	call rbx
  6684 0000520B 50                      	push rax
  6685 0000520C 488B4520                	mov rax, PARAM(0)
  6686 00005210 50                      	push rax
  6687 00005211 6A01                    	push 1
  6688 00005213 488B0425[80000000]      	mov rax, qword [free_var_16]
  6689                                  	assert_closure(rax)
    42 0000521B 803805              <1>  cmp byte [%1], %2
    43 0000521E 0F8510EF0000        <1>  jne L_error_incorrect_type
  6690 00005224 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6691 00005228 53                      	push rbx
  6692 00005229 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6693 0000522D FFD3                    	call rbx
  6694 0000522F 50                      	push rax
  6695 00005230 6A02                    	push 2
  6696 00005232 488B0425[68000000]      	mov rax, qword [free_var_13]
  6697                                  	assert_closure(rax)
    42 0000523A 803805              <1>  cmp byte [%1], %2
    43 0000523D 0F85F1EE0000        <1>  jne L_error_incorrect_type
  6698 00005243 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6699 00005247 53                      	push rbx
  6700 00005248 FF7508                  	push RET_ADDR
  6701 0000524B 488B7D18                	mov rdi, COUNT
  6702 0000524F 4883C703                	add rdi, 3
  6703 00005253 48C1E703                	shl rdi, 3
  6704 00005257 4801EF                  	add rdi, rbp
  6705 0000525A 488B6D00                	mov rbp, OLD_RDP
  6706 0000525E BE00000000              	mov rsi, 0
  6707                                  .L_tc_recycle_frame_loop_5ccb:	 ; start recycle frame loop
  6708 00005263 4883FE05                	cmp rsi, 5
  6709 00005267 7427                    	je .L_tc_recycle_frame_done_5ccb
  6710 00005269 B904000000              	mov rcx, 4
  6711 0000526E 4829F1                  	sub rcx, rsi
  6712 00005271 48C1E103                	shl rcx, 3
  6713 00005275 4801E1                  	add rcx, rsp ; rcx is the address to move
  6714 00005278 4889F3                  	mov rbx, rsi
  6715 0000527B 48C1E303                	shl rbx, 3
  6716 0000527F 48F7DB                  	neg rbx
  6717 00005282 4801FB                  	add rbx, rdi ;rbx is the address to move to
  6718 00005285 488B09                  	mov rcx, [rcx]
  6719 00005288 48890B                  	mov [rbx], rcx
  6720 0000528B 48FFC6                  	inc rsi
  6721 0000528E EBD3                    	jmp .L_tc_recycle_frame_loop_5ccb
  6722                                  .L_tc_recycle_frame_done_5ccb:	 ; end recycle frame loop
  6723 00005290 BB04000000              	mov rbx, 4
  6724 00005295 48C1E303                	shl rbx, 3
  6725 00005299 48F7DB                  	neg rbx
  6726 0000529C 4801FB                  	add rbx, rdi
  6727 0000529F 4889DC                  	mov rsp, rbx
  6728 000052A2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6729 000052A6 FFE3                    	jmp rbx
  6730                                  	.L_if_end_5688:
  6731 000052A8 C9                      	leave
  6732 000052A9 C22000                  	ret 8 * (2 + 2)
  6733                                  .L_lambda_simple_end_4f58:	; new closure is in rax
  6734 000052AC 50                      	push rax
  6735 000052AD 488B4528                	mov rax, PARAM(1)
  6736 000052B1 8F00                    	pop qword [rax]
  6737 000052B3 48B8-                   	mov rax, sob_void
  6737 000052B5 [0000000000000000] 
  6738                                  
  6739 000052BD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6740 000052C2 E8EDD50000              	call malloc
  6741 000052C7 50                      	push rax
  6742 000052C8 BF10000000              	mov rdi, 8 * 2	; new rib
  6743 000052CD E8E2D50000              	call malloc
  6744 000052D2 50                      	push rax
  6745 000052D3 BF10000000              	mov rdi, 8 * 2	; extended env
  6746 000052D8 E8D7D50000              	call malloc
  6747 000052DD 488B7D10                	mov rdi, ENV
  6748 000052E1 BE00000000              	mov rsi, 0
  6749 000052E6 BA01000000              	mov rdx, 1
  6750                                  .L_lambda_opt_env_loop_0c8b:	; ext_env[i + 1] <-- env[i]
  6751 000052EB 4883FE01                	cmp rsi, 1
  6752 000052EF 7410                    	je .L_lambda_opt_env_end_0c8b
  6753 000052F1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6754 000052F5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6755 000052F9 48FFC6                  	inc rsi
  6756 000052FC 48FFC2                  	inc rdx
  6757 000052FF EBEA                    	jmp .L_lambda_opt_env_loop_0c8b
  6758                                  .L_lambda_opt_env_end_0c8b:
  6759 00005301 5B                      	pop rbx
  6760 00005302 BE00000000              	mov rsi, 0
  6761                                  .L_lambda_opt_params_loop_0c8b:	; copy params
  6762 00005307 4883FE02                	cmp rsi, 2
  6763 0000530B 740E                    	je .L_lambda_opt_params_end_0c8b
  6764 0000530D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6765 00005312 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6766 00005316 48FFC6                  	inc rsi
  6767 00005319 EBEC                    	jmp .L_lambda_opt_params_loop_0c8b
  6768                                  .L_lambda_opt_params_end_0c8b:
  6769 0000531B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6770 0000531E 4889C3                  	mov rbx, rax
  6771 00005321 58                      	pop rax
  6772 00005322 C60005                  	mov byte [rax], T_closure
  6773 00005325 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6774 00005329 48C74009[36530000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c8b
  6775 00005331 E9FA010000              	jmp .L_lambda_opt_end_0c8b
  6776                                  .L_lambda_opt_code_0c8b:	; lambda-opt body
  6777 00005336 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  6778 0000533B 4889FB                  	mov rbx, rdi
  6779 0000533E 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
  6780 00005342 4883FB00                	cmp rbx, 0
  6781 00005346 7F45                    	jg .L_lambda_opt_arity_check_more_0c8b
  6782                                  .L_lambda_opt_arity_check_exact_0c8b:	 ; if params in opt is exact
  6783 00005348 4883EC08                	sub rsp, 8
  6784 0000534C BE00000000              	mov rsi, 0 ; index
  6785                                  .L_lambda_opt_stack_enlarge_loop_0c8b:	 ; stack loop enlarge start
  6786 00005351 4883FE03                	cmp rsi, 3
  6787 00005355 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c8b
  6788 00005357 4889F7                  	mov rdi, rsi
  6789 0000535A 48FFC7                  	inc rdi
  6790 0000535D 48C1E703                	shl rdi, 3
  6791 00005361 4801E7                  	add rdi, rsp
  6792 00005364 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  6793 00005367 4883EB08                	sub rbx, 8
  6794 0000536B 488B3F                  	mov rdi, [rdi]
  6795 0000536E 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  6796 00005371 48FFC6                  	inc rsi
  6797 00005374 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c8b
  6798                                  .L_lambda_opt_stack_enlarge_loop_exit_0c8b:	 ; end of stack enlarge loop
  6799 00005376 48C7442418-             	mov qword [rsp + 3*8], sob_nil
  6799 0000537B [01000000]         
  6800 0000537F 48C744241001000000      	mov qword [rsp + 2*8], 1
  6801 00005388 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c8b
  6802                                  .L_lambda_opt_arity_check_more_0c8b:	 ; if params in opt is more
  6803 0000538D 48B8-                   	mov rax, sob_nil
  6803 0000538F [0100000000000000] 
  6804 00005397 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  6805 0000539A 48FFCE                  	dec rsi
  6806                                  .L_lambda_opt_list_create_loop_0c8b:	; start of list creation loop
  6807 0000539D 4883FEFF                	cmp rsi, -1
  6808 000053A1 7422                    	je .L_lambda_opt_list_create_loop_exit_0c8b
  6809 000053A3 488D4E03                	lea rcx, [rsi + (3 + 0)]
  6810 000053A7 48C1E103                	shl rcx, 3
  6811 000053AB 4801E1                  	add rcx, rsp
  6812 000053AE 488B09                  	mov rcx, [rcx]
  6813 000053B1 56                      	push rsi ; save params
  6814 000053B2 53                      	push rbx
  6815                                  
  6816 000053B3 50                      	push rax ; cdr
  6817 000053B4 51                      	push rcx ; car
  6818 000053B5 6A02                    	push qword 2 ; push num of args
  6819 000053B7 6A01                    	push qword 1 ; push garbage as env
  6820 000053B9 E87DDE0000              	call L_code_ptr_cons
  6821                                  
  6822 000053BE 5B                      	pop rbx ; restore params
  6823 000053BF 5E                      	pop rsi
  6824 000053C0 48FFCE                  	dec rsi
  6825 000053C3 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c8b
  6826                                  .L_lambda_opt_list_create_loop_exit_0c8b:	; end of list creation loop
  6827 000053C5 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  6828 000053CA 4883C302                	add rbx, 2
  6829 000053CE 4889DF                  	mov rdi, rbx
  6830 000053D1 48C1E703                	shl rdi,3
  6831 000053D5 4801E7                  	add rdi, rsp
  6832 000053D8 488907                  	mov [rdi], rax
  6833 000053DB BE00000000              	mov rsi, 0 ;index
  6834                                  .L_lambda_opt_stack_shrink_loop_0c8b:	; start of stack shrink loop
  6835 000053E0 4883FE03                	cmp rsi, 3
  6836 000053E4 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c8b
  6837 000053E6 BF02000000              	mov rdi, 2
  6838 000053EB 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  6839 000053EE 4889D9                  	mov rcx, rbx
  6840 000053F1 4829F1                  	sub rcx, rsi
  6841 000053F4 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  6842 000053F7 4889FA                  	mov rdx, rdi
  6843 000053FA 48C1E203                	shl rdx, 3
  6844 000053FE 4801E2                  	add rdx, rsp
  6845 00005401 48C1E103                	shl rcx, 3
  6846 00005405 4801E1                  	add rcx, rsp
  6847 00005408 488B12                  	mov rdx, [rdx]
  6848 0000540B 488911                  	mov [rcx], rdx
  6849 0000540E 48FFC6                  	inc rsi
  6850 00005411 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c8b
  6851                                  .L_lambda_opt_stack_shrink_loop_exit_0c8b:	; end of stack shrink loop
  6852 00005413 4883EB02                	sub rbx, 2 ; rbx has number of args
  6853 00005417 4883EB01                	sub rbx, 1
  6854 0000541B 48C1E303                	shl rbx, 3
  6855 0000541F 4801DC                  	add rsp, rbx
  6856 00005422 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  6857                                  .L_lambda_opt_stack_adjusted_0c8b:
  6858 0000542B C8000000                	enter 0, 0
  6859 0000542F 488B4520                	mov rax, PARAM(0)
  6860 00005433 50                      	push rax
  6861 00005434 6A01                    	push 1
  6862 00005436 488B0425[00000000]      	mov rax, qword [free_var_0]
  6863                                  	assert_closure(rax)
    42 0000543E 803805              <1>  cmp byte [%1], %2
    43 00005441 0F85EDEC0000        <1>  jne L_error_incorrect_type
  6864 00005447 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6865 0000544B 53                      	push rbx
  6866 0000544C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6867 00005450 FFD3                    	call rbx
  6868 00005452 483D[02000000]          	cmp rax, sob_boolean_false
  6869 00005458 740D                    	je .L_if_else_5689
  6870 0000545A 488D0425[01000000]      	lea rax, [1 + L_constants]
  6871 00005462 E9C5000000              	jmp .L_if_end_5689
  6872                                  	.L_if_else_5689:
  6873 00005467 488B4520                	mov rax, PARAM(0)
  6874 0000546B 50                      	push rax
  6875 0000546C 6A01                    	push 1
  6876 0000546E 488B0425[88000000]      	mov rax, qword [free_var_17]
  6877                                  	assert_closure(rax)
    42 00005476 803805              <1>  cmp byte [%1], %2
    43 00005479 0F85B5EC0000        <1>  jne L_error_incorrect_type
  6878 0000547F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6879 00005483 53                      	push rbx
  6880 00005484 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6881 00005488 FFD3                    	call rbx
  6882 0000548A 50                      	push rax
  6883 0000548B 488B4520                	mov rax, PARAM(0)
  6884 0000548F 50                      	push rax
  6885 00005490 6A01                    	push 1
  6886 00005492 488B0425[80000000]      	mov rax, qword [free_var_16]
  6887                                  	assert_closure(rax)
    42 0000549A 803805              <1>  cmp byte [%1], %2
    43 0000549D 0F8591EC0000        <1>  jne L_error_incorrect_type
  6888 000054A3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6889 000054A7 53                      	push rbx
  6890 000054A8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6891 000054AC FFD3                    	call rbx
  6892 000054AE 50                      	push rax
  6893 000054AF 6A02                    	push 2
  6894 000054B1 488B4510                	mov rax, qword [rbp + 8*2]
  6895 000054B5 488B00                  	mov rax, qword [rax + 8*0]
  6896 000054B8 488B00                  	mov rax, qword [rax + 8*0]
  6897 000054BB 488B00                  	mov rax, qword [rax]
  6898                                  	assert_closure(rax)
    42 000054BE 803805              <1>  cmp byte [%1], %2
    43 000054C1 0F856DEC0000        <1>  jne L_error_incorrect_type
  6899 000054C7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6900 000054CB 53                      	push rbx
  6901 000054CC FF7508                  	push RET_ADDR
  6902 000054CF 488B7D18                	mov rdi, COUNT
  6903 000054D3 4883C703                	add rdi, 3
  6904 000054D7 48C1E703                	shl rdi, 3
  6905 000054DB 4801EF                  	add rdi, rbp
  6906 000054DE 488B6D00                	mov rbp, OLD_RDP
  6907 000054E2 BE00000000              	mov rsi, 0
  6908                                  .L_tc_recycle_frame_loop_5ccc:	 ; start recycle frame loop
  6909 000054E7 4883FE05                	cmp rsi, 5
  6910 000054EB 7427                    	je .L_tc_recycle_frame_done_5ccc
  6911 000054ED B904000000              	mov rcx, 4
  6912 000054F2 4829F1                  	sub rcx, rsi
  6913 000054F5 48C1E103                	shl rcx, 3
  6914 000054F9 4801E1                  	add rcx, rsp ; rcx is the address to move
  6915 000054FC 4889F3                  	mov rbx, rsi
  6916 000054FF 48C1E303                	shl rbx, 3
  6917 00005503 48F7DB                  	neg rbx
  6918 00005506 4801FB                  	add rbx, rdi ;rbx is the address to move to
  6919 00005509 488B09                  	mov rcx, [rcx]
  6920 0000550C 48890B                  	mov [rbx], rcx
  6921 0000550F 48FFC6                  	inc rsi
  6922 00005512 EBD3                    	jmp .L_tc_recycle_frame_loop_5ccc
  6923                                  .L_tc_recycle_frame_done_5ccc:	 ; end recycle frame loop
  6924 00005514 BB04000000              	mov rbx, 4
  6925 00005519 48C1E303                	shl rbx, 3
  6926 0000551D 48F7DB                  	neg rbx
  6927 00005520 4801FB                  	add rbx, rdi
  6928 00005523 4889DC                  	mov rsp, rbx
  6929 00005526 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6930 0000552A FFE3                    	jmp rbx
  6931                                  	.L_if_end_5689:
  6932 0000552C C9                      	leave
  6933 0000552D C21800                  	ret AND_KILL_FRAME(1)
  6934                                  .L_lambda_opt_end_0c8b:	; new closure is in rax
  6935 00005530 C9                      	leave
  6936 00005531 C22000                  	ret 8 * (2 + 2)
  6937                                  .L_lambda_simple_end_4f56:	; new closure is in rax
  6938                                  	assert_closure(rax)
    42 00005534 803805              <1>  cmp byte [%1], %2
    43 00005537 0F85F7EB0000        <1>  jne L_error_incorrect_type
  6939 0000553D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6940 00005541 53                      	push rbx
  6941 00005542 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6942 00005546 FFD3                    	call rbx
  6943 00005548 48890425[F0020000]      	mov qword [free_var_94], rax
  6944 00005550 48B8-                   	mov rax, sob_void
  6944 00005552 [0000000000000000] 
  6945                                  
  6946 0000555A 4889C7                  	mov rdi, rax
  6947 0000555D E863D30000              	call print_sexpr_if_not_void
  6948                                  
  6949 00005562 488D0425[17000000]      	lea rax, [23 + L_constants]
  6950 0000556A 50                      	push rax
  6951 0000556B 6A01                    	push 1
  6952 0000556D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6953 00005572 E83DD30000              	call malloc
  6954 00005577 50                      	push rax
  6955 00005578 BF00000000              	mov rdi, 8 * 0	; new rib
  6956 0000557D E832D30000              	call malloc
  6957 00005582 50                      	push rax
  6958 00005583 BF08000000              	mov rdi, 8 * 1	; extended env
  6959 00005588 E827D30000              	call malloc
  6960 0000558D 488B7D10                	mov rdi, ENV
  6961 00005591 BE00000000              	mov rsi, 0
  6962 00005596 BA01000000              	mov rdx, 1
  6963                                  .L_lambda_simple_env_loop_4f59:	; ext_env[i + 1] <-- env[i]
  6964 0000559B 4883FE00                	cmp rsi, 0
  6965 0000559F 7410                    	je .L_lambda_simple_env_end_4f59
  6966 000055A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  6967 000055A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6968 000055A9 48FFC6                  	inc rsi
  6969 000055AC 48FFC2                  	inc rdx
  6970 000055AF EBEA                    	jmp .L_lambda_simple_env_loop_4f59
  6971                                  .L_lambda_simple_env_end_4f59:
  6972 000055B1 5B                      	pop rbx
  6973 000055B2 BE00000000              	mov rsi, 0
  6974                                  .L_lambda_simple_params_loop_4f59:	; copy params
  6975 000055B7 4883FE00                	cmp rsi, 0
  6976 000055BB 740E                    	je .L_lambda_simple_params_end_4f59
  6977 000055BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6978 000055C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6979 000055C6 48FFC6                  	inc rsi
  6980 000055C9 EBEC                    	jmp .L_lambda_simple_params_loop_4f59
  6981                                  .L_lambda_simple_params_end_4f59:
  6982 000055CB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6983 000055CE 4889C3                  	mov rbx, rax
  6984 000055D1 58                      	pop rax
  6985 000055D2 C60005                  	mov byte [rax], T_closure
  6986 000055D5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6987 000055D9 48C74009[E6550000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f59
  6988 000055E1 E91C040000              	jmp .L_lambda_simple_end_4f59
  6989                                  .L_lambda_simple_code_4f59:	; lambda-simple body
  6990 000055E6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6991 000055EC 740B                    	je .L_lambda_simple_arity_check_ok_4f59
  6992 000055EE FF742410                	push qword [rsp + 8 * 2]
  6993 000055F2 6A01                    	push 1
  6994 000055F4 E974D20000              	jmp L_error_incorrect_arity_simple
  6995                                  .L_lambda_simple_arity_check_ok_4f59:
  6996 000055F9 C8000000                	enter 0, 0
  6997 000055FD BF11000000              	mov qword rdi, (1 + 8 + 8)
  6998 00005602 E8ADD20000              	call malloc
  6999 00005607 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  7000 0000560B 48B8-                   	mov rax, sob_void
  7000 0000560D [0000000000000000] 
  7001                                  
  7002 00005615 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7003 0000561A E895D20000              	call malloc
  7004 0000561F 50                      	push rax
  7005 00005620 BF08000000              	mov rdi, 8 * 1	; new rib
  7006 00005625 E88AD20000              	call malloc
  7007 0000562A 50                      	push rax
  7008 0000562B BF10000000              	mov rdi, 8 * 2	; extended env
  7009 00005630 E87FD20000              	call malloc
  7010 00005635 488B7D10                	mov rdi, ENV
  7011 00005639 BE00000000              	mov rsi, 0
  7012 0000563E BA01000000              	mov rdx, 1
  7013                                  .L_lambda_simple_env_loop_4f5a:	; ext_env[i + 1] <-- env[i]
  7014 00005643 4883FE01                	cmp rsi, 1
  7015 00005647 7410                    	je .L_lambda_simple_env_end_4f5a
  7016 00005649 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  7017 0000564D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7018 00005651 48FFC6                  	inc rsi
  7019 00005654 48FFC2                  	inc rdx
  7020 00005657 EBEA                    	jmp .L_lambda_simple_env_loop_4f5a
  7021                                  .L_lambda_simple_env_end_4f5a:
  7022 00005659 5B                      	pop rbx
  7023 0000565A BE00000000              	mov rsi, 0
  7024                                  .L_lambda_simple_params_loop_4f5a:	; copy params
  7025 0000565F 4883FE01                	cmp rsi, 1
  7026 00005663 740E                    	je .L_lambda_simple_params_end_4f5a
  7027 00005665 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7028 0000566A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7029 0000566E 48FFC6                  	inc rsi
  7030 00005671 EBEC                    	jmp .L_lambda_simple_params_loop_4f5a
  7031                                  .L_lambda_simple_params_end_4f5a:
  7032 00005673 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7033 00005676 4889C3                  	mov rbx, rax
  7034 00005679 58                      	pop rax
  7035 0000567A C60005                  	mov byte [rax], T_closure
  7036 0000567D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7037 00005681 48C74009[8E560000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f5a
  7038 00005689 E95D010000              	jmp .L_lambda_simple_end_4f5a
  7039                                  .L_lambda_simple_code_4f5a:	; lambda-simple body
  7040 0000568E 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7041 00005694 740B                    	je .L_lambda_simple_arity_check_ok_4f5a
  7042 00005696 FF742410                	push qword [rsp + 8 * 2]
  7043 0000569A 6A03                    	push 3
  7044 0000569C E9CCD10000              	jmp L_error_incorrect_arity_simple
  7045                                  .L_lambda_simple_arity_check_ok_4f5a:
  7046 000056A1 C8000000                	enter 0, 0
  7047 000056A5 488B4530                	mov rax, PARAM(2)
  7048 000056A9 50                      	push rax
  7049 000056AA 488B0425[00000000]      	mov rax, qword [free_var_0]
  7050 000056B2 50                      	push rax
  7051 000056B3 6A02                    	push 2
  7052 000056B5 488B0425[D0020000]      	mov rax, qword [free_var_90]
  7053                                  	assert_closure(rax)
    42 000056BD 803805              <1>  cmp byte [%1], %2
    43 000056C0 0F856EEA0000        <1>  jne L_error_incorrect_type
  7054 000056C6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7055 000056CA 53                      	push rbx
  7056 000056CB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7057 000056CF FFD3                    	call rbx
  7058 000056D1 483D[02000000]          	cmp rax, sob_boolean_false
  7059 000056D7 7409                    	je .L_if_else_568a
  7060 000056D9 488B4528                	mov rax, PARAM(1)
  7061 000056DD E905010000              	jmp .L_if_end_568a
  7062                                  	.L_if_else_568a:
  7063 000056E2 488B4530                	mov rax, PARAM(2)
  7064 000056E6 50                      	push rax
  7065 000056E7 488B0425[88000000]      	mov rax, qword [free_var_17]
  7066 000056EF 50                      	push rax
  7067 000056F0 6A02                    	push 2
  7068 000056F2 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7069                                  	assert_closure(rax)
    42 000056FA 803805              <1>  cmp byte [%1], %2
    43 000056FD 0F8531EA0000        <1>  jne L_error_incorrect_type
  7070 00005703 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7071 00005707 53                      	push rbx
  7072 00005708 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7073 0000570C FFD3                    	call rbx
  7074 0000570E 50                      	push rax
  7075 0000570F 488B4530                	mov rax, PARAM(2)
  7076 00005713 50                      	push rax
  7077 00005714 488B0425[80000000]      	mov rax, qword [free_var_16]
  7078 0000571C 50                      	push rax
  7079 0000571D 6A02                    	push 2
  7080 0000571F 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7081                                  	assert_closure(rax)
    42 00005727 803805              <1>  cmp byte [%1], %2
    43 0000572A 0F8504EA0000        <1>  jne L_error_incorrect_type
  7082 00005730 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7083 00005734 53                      	push rbx
  7084 00005735 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7085 00005739 FFD3                    	call rbx
  7086 0000573B 50                      	push rax
  7087 0000573C 488B4528                	mov rax, PARAM(1)
  7088 00005740 50                      	push rax
  7089 00005741 488B4520                	mov rax, PARAM(0)
  7090 00005745 50                      	push rax
  7091 00005746 6A03                    	push 3
  7092 00005748 488B0425[C8020000]      	mov rax, qword [free_var_89]
  7093                                  	assert_closure(rax)
    42 00005750 803805              <1>  cmp byte [%1], %2
    43 00005753 0F85DBE90000        <1>  jne L_error_incorrect_type
  7094 00005759 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7095 0000575D 53                      	push rbx
  7096 0000575E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7097 00005762 FFD3                    	call rbx
  7098 00005764 50                      	push rax
  7099 00005765 488B4520                	mov rax, PARAM(0)
  7100 00005769 50                      	push rax
  7101 0000576A 6A03                    	push 3
  7102 0000576C 488B4510                	mov rax, qword [rbp + 8*2]
  7103 00005770 488B00                  	mov rax, qword [rax + 8*0]
  7104 00005773 488B00                  	mov rax, qword [rax + 8*0]
  7105 00005776 488B00                  	mov rax, qword [rax]
  7106                                  	assert_closure(rax)
    42 00005779 803805              <1>  cmp byte [%1], %2
    43 0000577C 0F85B2E90000        <1>  jne L_error_incorrect_type
  7107 00005782 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7108 00005786 53                      	push rbx
  7109 00005787 FF7508                  	push RET_ADDR
  7110 0000578A 488B7D18                	mov rdi, COUNT
  7111 0000578E 4883C703                	add rdi, 3
  7112 00005792 48C1E703                	shl rdi, 3
  7113 00005796 4801EF                  	add rdi, rbp
  7114 00005799 488B6D00                	mov rbp, OLD_RDP
  7115 0000579D BE00000000              	mov rsi, 0
  7116                                  .L_tc_recycle_frame_loop_5ccd:	 ; start recycle frame loop
  7117 000057A2 4883FE06                	cmp rsi, 6
  7118 000057A6 7427                    	je .L_tc_recycle_frame_done_5ccd
  7119 000057A8 B905000000              	mov rcx, 5
  7120 000057AD 4829F1                  	sub rcx, rsi
  7121 000057B0 48C1E103                	shl rcx, 3
  7122 000057B4 4801E1                  	add rcx, rsp ; rcx is the address to move
  7123 000057B7 4889F3                  	mov rbx, rsi
  7124 000057BA 48C1E303                	shl rbx, 3
  7125 000057BE 48F7DB                  	neg rbx
  7126 000057C1 4801FB                  	add rbx, rdi ;rbx is the address to move to
  7127 000057C4 488B09                  	mov rcx, [rcx]
  7128 000057C7 48890B                  	mov [rbx], rcx
  7129 000057CA 48FFC6                  	inc rsi
  7130 000057CD EBD3                    	jmp .L_tc_recycle_frame_loop_5ccd
  7131                                  .L_tc_recycle_frame_done_5ccd:	 ; end recycle frame loop
  7132 000057CF BB05000000              	mov rbx, 5
  7133 000057D4 48C1E303                	shl rbx, 3
  7134 000057D8 48F7DB                  	neg rbx
  7135 000057DB 4801FB                  	add rbx, rdi
  7136 000057DE 4889DC                  	mov rsp, rbx
  7137 000057E1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7138 000057E5 FFE3                    	jmp rbx
  7139                                  	.L_if_end_568a:
  7140 000057E7 C9                      	leave
  7141 000057E8 C22800                  	ret 8 * (2 + 3)
  7142                                  .L_lambda_simple_end_4f5a:	; new closure is in rax
  7143 000057EB 50                      	push rax
  7144 000057EC 488B4520                	mov rax, PARAM(0)
  7145 000057F0 8F00                    	pop qword [rax]
  7146 000057F2 48B8-                   	mov rax, sob_void
  7146 000057F4 [0000000000000000] 
  7147                                  
  7148 000057FC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7149 00005801 E8AED00000              	call malloc
  7150 00005806 50                      	push rax
  7151 00005807 BF08000000              	mov rdi, 8 * 1	; new rib
  7152 0000580C E8A3D00000              	call malloc
  7153 00005811 50                      	push rax
  7154 00005812 BF10000000              	mov rdi, 8 * 2	; extended env
  7155 00005817 E898D00000              	call malloc
  7156 0000581C 488B7D10                	mov rdi, ENV
  7157 00005820 BE00000000              	mov rsi, 0
  7158 00005825 BA01000000              	mov rdx, 1
  7159                                  .L_lambda_opt_env_loop_0c8c:	; ext_env[i + 1] <-- env[i]
  7160 0000582A 4883FE01                	cmp rsi, 1
  7161 0000582E 7410                    	je .L_lambda_opt_env_end_0c8c
  7162 00005830 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7163 00005834 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7164 00005838 48FFC6                  	inc rsi
  7165 0000583B 48FFC2                  	inc rdx
  7166 0000583E EBEA                    	jmp .L_lambda_opt_env_loop_0c8c
  7167                                  .L_lambda_opt_env_end_0c8c:
  7168 00005840 5B                      	pop rbx
  7169 00005841 BE00000000              	mov rsi, 0
  7170                                  .L_lambda_opt_params_loop_0c8c:	; copy params
  7171 00005846 4883FE01                	cmp rsi, 1
  7172 0000584A 740E                    	je .L_lambda_opt_params_end_0c8c
  7173 0000584C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7174 00005851 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7175 00005855 48FFC6                  	inc rsi
  7176 00005858 EBEC                    	jmp .L_lambda_opt_params_loop_0c8c
  7177                                  .L_lambda_opt_params_end_0c8c:
  7178 0000585A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7179 0000585D 4889C3                  	mov rbx, rax
  7180 00005860 58                      	pop rax
  7181 00005861 C60005                  	mov byte [rax], T_closure
  7182 00005864 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7183 00005868 48C74009[75580000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c8c
  7184 00005870 E989010000              	jmp .L_lambda_opt_end_0c8c
  7185                                  .L_lambda_opt_code_0c8c:	; lambda-opt body
  7186 00005875 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  7187 0000587A 4889FB                  	mov rbx, rdi
  7188 0000587D 4883EB02                	sub rbx, 2 ; rbx is the num of extra args
  7189 00005881 4883FB00                	cmp rbx, 0
  7190 00005885 7F45                    	jg .L_lambda_opt_arity_check_more_0c8c
  7191                                  .L_lambda_opt_arity_check_exact_0c8c:	 ; if params in opt is exact
  7192 00005887 4883EC08                	sub rsp, 8
  7193 0000588B BE00000000              	mov rsi, 0 ; index
  7194                                  .L_lambda_opt_stack_enlarge_loop_0c8c:	 ; stack loop enlarge start
  7195 00005890 4883FE05                	cmp rsi, 5
  7196 00005894 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c8c
  7197 00005896 4889F7                  	mov rdi, rsi
  7198 00005899 48FFC7                  	inc rdi
  7199 0000589C 48C1E703                	shl rdi, 3
  7200 000058A0 4801E7                  	add rdi, rsp
  7201 000058A3 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  7202 000058A6 4883EB08                	sub rbx, 8
  7203 000058AA 488B3F                  	mov rdi, [rdi]
  7204 000058AD 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  7205 000058B0 48FFC6                  	inc rsi
  7206 000058B3 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c8c
  7207                                  .L_lambda_opt_stack_enlarge_loop_exit_0c8c:	 ; end of stack enlarge loop
  7208 000058B5 48C7442428-             	mov qword [rsp + 5*8], sob_nil
  7208 000058BA [01000000]         
  7209 000058BE 48C744241003000000      	mov qword [rsp + 2*8], 3
  7210 000058C7 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c8c
  7211                                  .L_lambda_opt_arity_check_more_0c8c:	 ; if params in opt is more
  7212 000058CC 48B8-                   	mov rax, sob_nil
  7212 000058CE [0100000000000000] 
  7213 000058D6 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  7214 000058D9 48FFCE                  	dec rsi
  7215                                  .L_lambda_opt_list_create_loop_0c8c:	; start of list creation loop
  7216 000058DC 4883FEFF                	cmp rsi, -1
  7217 000058E0 7422                    	je .L_lambda_opt_list_create_loop_exit_0c8c
  7218 000058E2 488D4E05                	lea rcx, [rsi + (3 + 2)]
  7219 000058E6 48C1E103                	shl rcx, 3
  7220 000058EA 4801E1                  	add rcx, rsp
  7221 000058ED 488B09                  	mov rcx, [rcx]
  7222 000058F0 56                      	push rsi ; save params
  7223 000058F1 53                      	push rbx
  7224                                  
  7225 000058F2 50                      	push rax ; cdr
  7226 000058F3 51                      	push rcx ; car
  7227 000058F4 6A02                    	push qword 2 ; push num of args
  7228 000058F6 6A01                    	push qword 1 ; push garbage as env
  7229 000058F8 E83ED90000              	call L_code_ptr_cons
  7230                                  
  7231 000058FD 5B                      	pop rbx ; restore params
  7232 000058FE 5E                      	pop rsi
  7233 000058FF 48FFCE                  	dec rsi
  7234 00005902 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c8c
  7235                                  .L_lambda_opt_list_create_loop_exit_0c8c:	; end of list creation loop
  7236 00005904 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  7237 00005909 4883C302                	add rbx, 2
  7238 0000590D 4889DF                  	mov rdi, rbx
  7239 00005910 48C1E703                	shl rdi,3
  7240 00005914 4801E7                  	add rdi, rsp
  7241 00005917 488907                  	mov [rdi], rax
  7242 0000591A BE00000000              	mov rsi, 0 ;index
  7243                                  .L_lambda_opt_stack_shrink_loop_0c8c:	; start of stack shrink loop
  7244 0000591F 4883FE05                	cmp rsi, 5
  7245 00005923 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c8c
  7246 00005925 BF04000000              	mov rdi, 4
  7247 0000592A 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  7248 0000592D 4889D9                  	mov rcx, rbx
  7249 00005930 4829F1                  	sub rcx, rsi
  7250 00005933 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  7251 00005936 4889FA                  	mov rdx, rdi
  7252 00005939 48C1E203                	shl rdx, 3
  7253 0000593D 4801E2                  	add rdx, rsp
  7254 00005940 48C1E103                	shl rcx, 3
  7255 00005944 4801E1                  	add rcx, rsp
  7256 00005947 488B12                  	mov rdx, [rdx]
  7257 0000594A 488911                  	mov [rcx], rdx
  7258 0000594D 48FFC6                  	inc rsi
  7259 00005950 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c8c
  7260                                  .L_lambda_opt_stack_shrink_loop_exit_0c8c:	; end of stack shrink loop
  7261 00005952 4883EB02                	sub rbx, 2 ; rbx has number of args
  7262 00005956 4883EB03                	sub rbx, 3
  7263 0000595A 48C1E303                	shl rbx, 3
  7264 0000595E 4801DC                  	add rsp, rbx
  7265 00005961 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  7266                                  .L_lambda_opt_stack_adjusted_0c8c:
  7267 0000596A C8000000                	enter 0, 0
  7268 0000596E 488B4530                	mov rax, PARAM(2)
  7269 00005972 50                      	push rax
  7270 00005973 488B4528                	mov rax, PARAM(1)
  7271 00005977 50                      	push rax
  7272 00005978 488B4520                	mov rax, PARAM(0)
  7273 0000597C 50                      	push rax
  7274 0000597D 6A03                    	push 3
  7275 0000597F 488B4510                	mov rax, qword [rbp + 8*2]
  7276 00005983 488B00                  	mov rax, qword [rax + 8*0]
  7277 00005986 488B00                  	mov rax, qword [rax + 8*0]
  7278 00005989 488B00                  	mov rax, qword [rax]
  7279                                  	assert_closure(rax)
    42 0000598C 803805              <1>  cmp byte [%1], %2
    43 0000598F 0F859FE70000        <1>  jne L_error_incorrect_type
  7280 00005995 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7281 00005999 53                      	push rbx
  7282 0000599A FF7508                  	push RET_ADDR
  7283 0000599D 488B7D18                	mov rdi, COUNT
  7284 000059A1 4883C703                	add rdi, 3
  7285 000059A5 48C1E703                	shl rdi, 3
  7286 000059A9 4801EF                  	add rdi, rbp
  7287 000059AC 488B6D00                	mov rbp, OLD_RDP
  7288 000059B0 BE00000000              	mov rsi, 0
  7289                                  .L_tc_recycle_frame_loop_5cce:	 ; start recycle frame loop
  7290 000059B5 4883FE06                	cmp rsi, 6
  7291 000059B9 7427                    	je .L_tc_recycle_frame_done_5cce
  7292 000059BB B905000000              	mov rcx, 5
  7293 000059C0 4829F1                  	sub rcx, rsi
  7294 000059C3 48C1E103                	shl rcx, 3
  7295 000059C7 4801E1                  	add rcx, rsp ; rcx is the address to move
  7296 000059CA 4889F3                  	mov rbx, rsi
  7297 000059CD 48C1E303                	shl rbx, 3
  7298 000059D1 48F7DB                  	neg rbx
  7299 000059D4 4801FB                  	add rbx, rdi ;rbx is the address to move to
  7300 000059D7 488B09                  	mov rcx, [rcx]
  7301 000059DA 48890B                  	mov [rbx], rcx
  7302 000059DD 48FFC6                  	inc rsi
  7303 000059E0 EBD3                    	jmp .L_tc_recycle_frame_loop_5cce
  7304                                  .L_tc_recycle_frame_done_5cce:	 ; end recycle frame loop
  7305 000059E2 BB05000000              	mov rbx, 5
  7306 000059E7 48C1E303                	shl rbx, 3
  7307 000059EB 48F7DB                  	neg rbx
  7308 000059EE 4801FB                  	add rbx, rdi
  7309 000059F1 4889DC                  	mov rsp, rbx
  7310 000059F4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7311 000059F8 FFE3                    	jmp rbx
  7312 000059FA C9                      	leave
  7313 000059FB C22800                  	ret AND_KILL_FRAME(3)
  7314                                  .L_lambda_opt_end_0c8c:	; new closure is in rax
  7315 000059FE C9                      	leave
  7316 000059FF C21800                  	ret 8 * (2 + 1)
  7317                                  .L_lambda_simple_end_4f59:	; new closure is in rax
  7318                                  	assert_closure(rax)
    42 00005A02 803805              <1>  cmp byte [%1], %2
    43 00005A05 0F8529E70000        <1>  jne L_error_incorrect_type
  7319 00005A0B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7320 00005A0F 53                      	push rbx
  7321 00005A10 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7322 00005A14 FFD3                    	call rbx
  7323 00005A16 48890425[F8020000]      	mov qword [free_var_95], rax
  7324 00005A1E 48B8-                   	mov rax, sob_void
  7324 00005A20 [0000000000000000] 
  7325                                  
  7326 00005A28 4889C7                  	mov rdi, rax
  7327 00005A2B E895CE0000              	call print_sexpr_if_not_void
  7328                                  
  7329 00005A30 488D0425[17000000]      	lea rax, [23 + L_constants]
  7330 00005A38 50                      	push rax
  7331 00005A39 6A01                    	push 1
  7332 00005A3B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7333 00005A40 E86FCE0000              	call malloc
  7334 00005A45 50                      	push rax
  7335 00005A46 BF00000000              	mov rdi, 8 * 0	; new rib
  7336 00005A4B E864CE0000              	call malloc
  7337 00005A50 50                      	push rax
  7338 00005A51 BF08000000              	mov rdi, 8 * 1	; extended env
  7339 00005A56 E859CE0000              	call malloc
  7340 00005A5B 488B7D10                	mov rdi, ENV
  7341 00005A5F BE00000000              	mov rsi, 0
  7342 00005A64 BA01000000              	mov rdx, 1
  7343                                  .L_lambda_simple_env_loop_4f5b:	; ext_env[i + 1] <-- env[i]
  7344 00005A69 4883FE00                	cmp rsi, 0
  7345 00005A6D 7410                    	je .L_lambda_simple_env_end_4f5b
  7346 00005A6F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  7347 00005A73 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7348 00005A77 48FFC6                  	inc rsi
  7349 00005A7A 48FFC2                  	inc rdx
  7350 00005A7D EBEA                    	jmp .L_lambda_simple_env_loop_4f5b
  7351                                  .L_lambda_simple_env_end_4f5b:
  7352 00005A7F 5B                      	pop rbx
  7353 00005A80 BE00000000              	mov rsi, 0
  7354                                  .L_lambda_simple_params_loop_4f5b:	; copy params
  7355 00005A85 4883FE00                	cmp rsi, 0
  7356 00005A89 740E                    	je .L_lambda_simple_params_end_4f5b
  7357 00005A8B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7358 00005A90 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7359 00005A94 48FFC6                  	inc rsi
  7360 00005A97 EBEC                    	jmp .L_lambda_simple_params_loop_4f5b
  7361                                  .L_lambda_simple_params_end_4f5b:
  7362 00005A99 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7363 00005A9C 4889C3                  	mov rbx, rax
  7364 00005A9F 58                      	pop rax
  7365 00005AA0 C60005                  	mov byte [rax], T_closure
  7366 00005AA3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7367 00005AA7 48C74009[B45A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f5b
  7368 00005AAF E963040000              	jmp .L_lambda_simple_end_4f5b
  7369                                  .L_lambda_simple_code_4f5b:	; lambda-simple body
  7370 00005AB4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7371 00005ABA 740B                    	je .L_lambda_simple_arity_check_ok_4f5b
  7372 00005ABC FF742410                	push qword [rsp + 8 * 2]
  7373 00005AC0 6A01                    	push 1
  7374 00005AC2 E9A6CD0000              	jmp L_error_incorrect_arity_simple
  7375                                  .L_lambda_simple_arity_check_ok_4f5b:
  7376 00005AC7 C8000000                	enter 0, 0
  7377 00005ACB BF11000000              	mov qword rdi, (1 + 8 + 8)
  7378 00005AD0 E8DFCD0000              	call malloc
  7379 00005AD5 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  7380 00005AD9 48B8-                   	mov rax, sob_void
  7380 00005ADB [0000000000000000] 
  7381                                  
  7382 00005AE3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7383 00005AE8 E8C7CD0000              	call malloc
  7384 00005AED 50                      	push rax
  7385 00005AEE BF08000000              	mov rdi, 8 * 1	; new rib
  7386 00005AF3 E8BCCD0000              	call malloc
  7387 00005AF8 50                      	push rax
  7388 00005AF9 BF10000000              	mov rdi, 8 * 2	; extended env
  7389 00005AFE E8B1CD0000              	call malloc
  7390 00005B03 488B7D10                	mov rdi, ENV
  7391 00005B07 BE00000000              	mov rsi, 0
  7392 00005B0C BA01000000              	mov rdx, 1
  7393                                  .L_lambda_simple_env_loop_4f5c:	; ext_env[i + 1] <-- env[i]
  7394 00005B11 4883FE01                	cmp rsi, 1
  7395 00005B15 7410                    	je .L_lambda_simple_env_end_4f5c
  7396 00005B17 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  7397 00005B1B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7398 00005B1F 48FFC6                  	inc rsi
  7399 00005B22 48FFC2                  	inc rdx
  7400 00005B25 EBEA                    	jmp .L_lambda_simple_env_loop_4f5c
  7401                                  .L_lambda_simple_env_end_4f5c:
  7402 00005B27 5B                      	pop rbx
  7403 00005B28 BE00000000              	mov rsi, 0
  7404                                  .L_lambda_simple_params_loop_4f5c:	; copy params
  7405 00005B2D 4883FE01                	cmp rsi, 1
  7406 00005B31 740E                    	je .L_lambda_simple_params_end_4f5c
  7407 00005B33 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7408 00005B38 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7409 00005B3C 48FFC6                  	inc rsi
  7410 00005B3F EBEC                    	jmp .L_lambda_simple_params_loop_4f5c
  7411                                  .L_lambda_simple_params_end_4f5c:
  7412 00005B41 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7413 00005B44 4889C3                  	mov rbx, rax
  7414 00005B47 58                      	pop rax
  7415 00005B48 C60005                  	mov byte [rax], T_closure
  7416 00005B4B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7417 00005B4F 48C74009[5C5B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f5c
  7418 00005B57 E9A4010000              	jmp .L_lambda_simple_end_4f5c
  7419                                  .L_lambda_simple_code_4f5c:	; lambda-simple body
  7420 00005B5C 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7421 00005B62 740B                    	je .L_lambda_simple_arity_check_ok_4f5c
  7422 00005B64 FF742410                	push qword [rsp + 8 * 2]
  7423 00005B68 6A03                    	push 3
  7424 00005B6A E9FECC0000              	jmp L_error_incorrect_arity_simple
  7425                                  .L_lambda_simple_arity_check_ok_4f5c:
  7426 00005B6F C8000000                	enter 0, 0
  7427 00005B73 488B4530                	mov rax, PARAM(2)
  7428 00005B77 50                      	push rax
  7429 00005B78 488B0425[00000000]      	mov rax, qword [free_var_0]
  7430 00005B80 50                      	push rax
  7431 00005B81 6A02                    	push 2
  7432 00005B83 488B0425[D0020000]      	mov rax, qword [free_var_90]
  7433                                  	assert_closure(rax)
    42 00005B8B 803805              <1>  cmp byte [%1], %2
    43 00005B8E 0F85A0E50000        <1>  jne L_error_incorrect_type
  7434 00005B94 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7435 00005B98 53                      	push rbx
  7436 00005B99 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7437 00005B9D FFD3                    	call rbx
  7438 00005B9F 483D[02000000]          	cmp rax, sob_boolean_false
  7439 00005BA5 7409                    	je .L_if_else_568b
  7440 00005BA7 488B4528                	mov rax, PARAM(1)
  7441 00005BAB E94C010000              	jmp .L_if_end_568b
  7442                                  	.L_if_else_568b:
  7443 00005BB0 488D0425[01000000]      	lea rax, [1 + L_constants]
  7444 00005BB8 50                      	push rax
  7445 00005BB9 488B4530                	mov rax, PARAM(2)
  7446 00005BBD 50                      	push rax
  7447 00005BBE 488B0425[88000000]      	mov rax, qword [free_var_17]
  7448 00005BC6 50                      	push rax
  7449 00005BC7 6A02                    	push 2
  7450 00005BC9 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7451                                  	assert_closure(rax)
    42 00005BD1 803805              <1>  cmp byte [%1], %2
    43 00005BD4 0F855AE50000        <1>  jne L_error_incorrect_type
  7452 00005BDA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7453 00005BDE 53                      	push rbx
  7454 00005BDF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7455 00005BE3 FFD3                    	call rbx
  7456 00005BE5 50                      	push rax
  7457 00005BE6 488B4528                	mov rax, PARAM(1)
  7458 00005BEA 50                      	push rax
  7459 00005BEB 488B4520                	mov rax, PARAM(0)
  7460 00005BEF 50                      	push rax
  7461 00005BF0 6A03                    	push 3
  7462 00005BF2 488B4510                	mov rax, qword [rbp + 8*2]
  7463 00005BF6 488B00                  	mov rax, qword [rax + 8*0]
  7464 00005BF9 488B00                  	mov rax, qword [rax + 8*0]
  7465 00005BFC 488B00                  	mov rax, qword [rax]
  7466                                  	assert_closure(rax)
    42 00005BFF 803805              <1>  cmp byte [%1], %2
    43 00005C02 0F852CE50000        <1>  jne L_error_incorrect_type
  7467 00005C08 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7468 00005C0C 53                      	push rbx
  7469 00005C0D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7470 00005C11 FFD3                    	call rbx
  7471 00005C13 50                      	push rax
  7472 00005C14 6A02                    	push 2
  7473 00005C16 488B0425[68000000]      	mov rax, qword [free_var_13]
  7474                                  	assert_closure(rax)
    42 00005C1E 803805              <1>  cmp byte [%1], %2
    43 00005C21 0F850DE50000        <1>  jne L_error_incorrect_type
  7475 00005C27 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7476 00005C2B 53                      	push rbx
  7477 00005C2C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7478 00005C30 FFD3                    	call rbx
  7479 00005C32 50                      	push rax
  7480 00005C33 488B4530                	mov rax, PARAM(2)
  7481 00005C37 50                      	push rax
  7482 00005C38 488B0425[80000000]      	mov rax, qword [free_var_16]
  7483 00005C40 50                      	push rax
  7484 00005C41 6A02                    	push 2
  7485 00005C43 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7486                                  	assert_closure(rax)
    42 00005C4B 803805              <1>  cmp byte [%1], %2
    43 00005C4E 0F85E0E40000        <1>  jne L_error_incorrect_type
  7487 00005C54 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7488 00005C58 53                      	push rbx
  7489 00005C59 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7490 00005C5D FFD3                    	call rbx
  7491 00005C5F 50                      	push rax
  7492 00005C60 6A02                    	push 2
  7493 00005C62 488B0425[F0020000]      	mov rax, qword [free_var_94]
  7494                                  	assert_closure(rax)
    42 00005C6A 803805              <1>  cmp byte [%1], %2
    43 00005C6D 0F85C1E40000        <1>  jne L_error_incorrect_type
  7495 00005C73 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7496 00005C77 53                      	push rbx
  7497 00005C78 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7498 00005C7C FFD3                    	call rbx
  7499 00005C7E 50                      	push rax
  7500 00005C7F 488B4520                	mov rax, PARAM(0)
  7501 00005C83 50                      	push rax
  7502 00005C84 6A02                    	push 2
  7503 00005C86 488B0425[C8020000]      	mov rax, qword [free_var_89]
  7504                                  	assert_closure(rax)
    42 00005C8E 803805              <1>  cmp byte [%1], %2
    43 00005C91 0F859DE40000        <1>  jne L_error_incorrect_type
  7505 00005C97 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7506 00005C9B 53                      	push rbx
  7507 00005C9C FF7508                  	push RET_ADDR
  7508 00005C9F 488B7D18                	mov rdi, COUNT
  7509 00005CA3 4883C703                	add rdi, 3
  7510 00005CA7 48C1E703                	shl rdi, 3
  7511 00005CAB 4801EF                  	add rdi, rbp
  7512 00005CAE 488B6D00                	mov rbp, OLD_RDP
  7513 00005CB2 BE00000000              	mov rsi, 0
  7514                                  .L_tc_recycle_frame_loop_5ccf:	 ; start recycle frame loop
  7515 00005CB7 4883FE05                	cmp rsi, 5
  7516 00005CBB 7427                    	je .L_tc_recycle_frame_done_5ccf
  7517 00005CBD B904000000              	mov rcx, 4
  7518 00005CC2 4829F1                  	sub rcx, rsi
  7519 00005CC5 48C1E103                	shl rcx, 3
  7520 00005CC9 4801E1                  	add rcx, rsp ; rcx is the address to move
  7521 00005CCC 4889F3                  	mov rbx, rsi
  7522 00005CCF 48C1E303                	shl rbx, 3
  7523 00005CD3 48F7DB                  	neg rbx
  7524 00005CD6 4801FB                  	add rbx, rdi ;rbx is the address to move to
  7525 00005CD9 488B09                  	mov rcx, [rcx]
  7526 00005CDC 48890B                  	mov [rbx], rcx
  7527 00005CDF 48FFC6                  	inc rsi
  7528 00005CE2 EBD3                    	jmp .L_tc_recycle_frame_loop_5ccf
  7529                                  .L_tc_recycle_frame_done_5ccf:	 ; end recycle frame loop
  7530 00005CE4 BB04000000              	mov rbx, 4
  7531 00005CE9 48C1E303                	shl rbx, 3
  7532 00005CED 48F7DB                  	neg rbx
  7533 00005CF0 4801FB                  	add rbx, rdi
  7534 00005CF3 4889DC                  	mov rsp, rbx
  7535 00005CF6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7536 00005CFA FFE3                    	jmp rbx
  7537                                  	.L_if_end_568b:
  7538 00005CFC C9                      	leave
  7539 00005CFD C22800                  	ret 8 * (2 + 3)
  7540                                  .L_lambda_simple_end_4f5c:	; new closure is in rax
  7541 00005D00 50                      	push rax
  7542 00005D01 488B4520                	mov rax, PARAM(0)
  7543 00005D05 8F00                    	pop qword [rax]
  7544 00005D07 48B8-                   	mov rax, sob_void
  7544 00005D09 [0000000000000000] 
  7545                                  
  7546 00005D11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7547 00005D16 E899CB0000              	call malloc
  7548 00005D1B 50                      	push rax
  7549 00005D1C BF08000000              	mov rdi, 8 * 1	; new rib
  7550 00005D21 E88ECB0000              	call malloc
  7551 00005D26 50                      	push rax
  7552 00005D27 BF10000000              	mov rdi, 8 * 2	; extended env
  7553 00005D2C E883CB0000              	call malloc
  7554 00005D31 488B7D10                	mov rdi, ENV
  7555 00005D35 BE00000000              	mov rsi, 0
  7556 00005D3A BA01000000              	mov rdx, 1
  7557                                  .L_lambda_opt_env_loop_0c8d:	; ext_env[i + 1] <-- env[i]
  7558 00005D3F 4883FE01                	cmp rsi, 1
  7559 00005D43 7410                    	je .L_lambda_opt_env_end_0c8d
  7560 00005D45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7561 00005D49 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7562 00005D4D 48FFC6                  	inc rsi
  7563 00005D50 48FFC2                  	inc rdx
  7564 00005D53 EBEA                    	jmp .L_lambda_opt_env_loop_0c8d
  7565                                  .L_lambda_opt_env_end_0c8d:
  7566 00005D55 5B                      	pop rbx
  7567 00005D56 BE00000000              	mov rsi, 0
  7568                                  .L_lambda_opt_params_loop_0c8d:	; copy params
  7569 00005D5B 4883FE01                	cmp rsi, 1
  7570 00005D5F 740E                    	je .L_lambda_opt_params_end_0c8d
  7571 00005D61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7572 00005D66 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7573 00005D6A 48FFC6                  	inc rsi
  7574 00005D6D EBEC                    	jmp .L_lambda_opt_params_loop_0c8d
  7575                                  .L_lambda_opt_params_end_0c8d:
  7576 00005D6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7577 00005D72 4889C3                  	mov rbx, rax
  7578 00005D75 58                      	pop rax
  7579 00005D76 C60005                  	mov byte [rax], T_closure
  7580 00005D79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7581 00005D7D 48C74009[8A5D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c8d
  7582 00005D85 E989010000              	jmp .L_lambda_opt_end_0c8d
  7583                                  .L_lambda_opt_code_0c8d:	; lambda-opt body
  7584 00005D8A 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  7585 00005D8F 4889FB                  	mov rbx, rdi
  7586 00005D92 4883EB02                	sub rbx, 2 ; rbx is the num of extra args
  7587 00005D96 4883FB00                	cmp rbx, 0
  7588 00005D9A 7F45                    	jg .L_lambda_opt_arity_check_more_0c8d
  7589                                  .L_lambda_opt_arity_check_exact_0c8d:	 ; if params in opt is exact
  7590 00005D9C 4883EC08                	sub rsp, 8
  7591 00005DA0 BE00000000              	mov rsi, 0 ; index
  7592                                  .L_lambda_opt_stack_enlarge_loop_0c8d:	 ; stack loop enlarge start
  7593 00005DA5 4883FE05                	cmp rsi, 5
  7594 00005DA9 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c8d
  7595 00005DAB 4889F7                  	mov rdi, rsi
  7596 00005DAE 48FFC7                  	inc rdi
  7597 00005DB1 48C1E703                	shl rdi, 3
  7598 00005DB5 4801E7                  	add rdi, rsp
  7599 00005DB8 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  7600 00005DBB 4883EB08                	sub rbx, 8
  7601 00005DBF 488B3F                  	mov rdi, [rdi]
  7602 00005DC2 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  7603 00005DC5 48FFC6                  	inc rsi
  7604 00005DC8 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c8d
  7605                                  .L_lambda_opt_stack_enlarge_loop_exit_0c8d:	 ; end of stack enlarge loop
  7606 00005DCA 48C7442428-             	mov qword [rsp + 5*8], sob_nil
  7606 00005DCF [01000000]         
  7607 00005DD3 48C744241003000000      	mov qword [rsp + 2*8], 3
  7608 00005DDC E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c8d
  7609                                  .L_lambda_opt_arity_check_more_0c8d:	 ; if params in opt is more
  7610 00005DE1 48B8-                   	mov rax, sob_nil
  7610 00005DE3 [0100000000000000] 
  7611 00005DEB 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  7612 00005DEE 48FFCE                  	dec rsi
  7613                                  .L_lambda_opt_list_create_loop_0c8d:	; start of list creation loop
  7614 00005DF1 4883FEFF                	cmp rsi, -1
  7615 00005DF5 7422                    	je .L_lambda_opt_list_create_loop_exit_0c8d
  7616 00005DF7 488D4E05                	lea rcx, [rsi + (3 + 2)]
  7617 00005DFB 48C1E103                	shl rcx, 3
  7618 00005DFF 4801E1                  	add rcx, rsp
  7619 00005E02 488B09                  	mov rcx, [rcx]
  7620 00005E05 56                      	push rsi ; save params
  7621 00005E06 53                      	push rbx
  7622                                  
  7623 00005E07 50                      	push rax ; cdr
  7624 00005E08 51                      	push rcx ; car
  7625 00005E09 6A02                    	push qword 2 ; push num of args
  7626 00005E0B 6A01                    	push qword 1 ; push garbage as env
  7627 00005E0D E829D40000              	call L_code_ptr_cons
  7628                                  
  7629 00005E12 5B                      	pop rbx ; restore params
  7630 00005E13 5E                      	pop rsi
  7631 00005E14 48FFCE                  	dec rsi
  7632 00005E17 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c8d
  7633                                  .L_lambda_opt_list_create_loop_exit_0c8d:	; end of list creation loop
  7634 00005E19 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  7635 00005E1E 4883C302                	add rbx, 2
  7636 00005E22 4889DF                  	mov rdi, rbx
  7637 00005E25 48C1E703                	shl rdi,3
  7638 00005E29 4801E7                  	add rdi, rsp
  7639 00005E2C 488907                  	mov [rdi], rax
  7640 00005E2F BE00000000              	mov rsi, 0 ;index
  7641                                  .L_lambda_opt_stack_shrink_loop_0c8d:	; start of stack shrink loop
  7642 00005E34 4883FE05                	cmp rsi, 5
  7643 00005E38 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c8d
  7644 00005E3A BF04000000              	mov rdi, 4
  7645 00005E3F 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  7646 00005E42 4889D9                  	mov rcx, rbx
  7647 00005E45 4829F1                  	sub rcx, rsi
  7648 00005E48 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  7649 00005E4B 4889FA                  	mov rdx, rdi
  7650 00005E4E 48C1E203                	shl rdx, 3
  7651 00005E52 4801E2                  	add rdx, rsp
  7652 00005E55 48C1E103                	shl rcx, 3
  7653 00005E59 4801E1                  	add rcx, rsp
  7654 00005E5C 488B12                  	mov rdx, [rdx]
  7655 00005E5F 488911                  	mov [rcx], rdx
  7656 00005E62 48FFC6                  	inc rsi
  7657 00005E65 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c8d
  7658                                  .L_lambda_opt_stack_shrink_loop_exit_0c8d:	; end of stack shrink loop
  7659 00005E67 4883EB02                	sub rbx, 2 ; rbx has number of args
  7660 00005E6B 4883EB03                	sub rbx, 3
  7661 00005E6F 48C1E303                	shl rbx, 3
  7662 00005E73 4801DC                  	add rsp, rbx
  7663 00005E76 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  7664                                  .L_lambda_opt_stack_adjusted_0c8d:
  7665 00005E7F C8000000                	enter 0, 0
  7666 00005E83 488B4530                	mov rax, PARAM(2)
  7667 00005E87 50                      	push rax
  7668 00005E88 488B4528                	mov rax, PARAM(1)
  7669 00005E8C 50                      	push rax
  7670 00005E8D 488B4520                	mov rax, PARAM(0)
  7671 00005E91 50                      	push rax
  7672 00005E92 6A03                    	push 3
  7673 00005E94 488B4510                	mov rax, qword [rbp + 8*2]
  7674 00005E98 488B00                  	mov rax, qword [rax + 8*0]
  7675 00005E9B 488B00                  	mov rax, qword [rax + 8*0]
  7676 00005E9E 488B00                  	mov rax, qword [rax]
  7677                                  	assert_closure(rax)
    42 00005EA1 803805              <1>  cmp byte [%1], %2
    43 00005EA4 0F858AE20000        <1>  jne L_error_incorrect_type
  7678 00005EAA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7679 00005EAE 53                      	push rbx
  7680 00005EAF FF7508                  	push RET_ADDR
  7681 00005EB2 488B7D18                	mov rdi, COUNT
  7682 00005EB6 4883C703                	add rdi, 3
  7683 00005EBA 48C1E703                	shl rdi, 3
  7684 00005EBE 4801EF                  	add rdi, rbp
  7685 00005EC1 488B6D00                	mov rbp, OLD_RDP
  7686 00005EC5 BE00000000              	mov rsi, 0
  7687                                  .L_tc_recycle_frame_loop_5cd0:	 ; start recycle frame loop
  7688 00005ECA 4883FE06                	cmp rsi, 6
  7689 00005ECE 7427                    	je .L_tc_recycle_frame_done_5cd0
  7690 00005ED0 B905000000              	mov rcx, 5
  7691 00005ED5 4829F1                  	sub rcx, rsi
  7692 00005ED8 48C1E103                	shl rcx, 3
  7693 00005EDC 4801E1                  	add rcx, rsp ; rcx is the address to move
  7694 00005EDF 4889F3                  	mov rbx, rsi
  7695 00005EE2 48C1E303                	shl rbx, 3
  7696 00005EE6 48F7DB                  	neg rbx
  7697 00005EE9 4801FB                  	add rbx, rdi ;rbx is the address to move to
  7698 00005EEC 488B09                  	mov rcx, [rcx]
  7699 00005EEF 48890B                  	mov [rbx], rcx
  7700 00005EF2 48FFC6                  	inc rsi
  7701 00005EF5 EBD3                    	jmp .L_tc_recycle_frame_loop_5cd0
  7702                                  .L_tc_recycle_frame_done_5cd0:	 ; end recycle frame loop
  7703 00005EF7 BB05000000              	mov rbx, 5
  7704 00005EFC 48C1E303                	shl rbx, 3
  7705 00005F00 48F7DB                  	neg rbx
  7706 00005F03 4801FB                  	add rbx, rdi
  7707 00005F06 4889DC                  	mov rsp, rbx
  7708 00005F09 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7709 00005F0D FFE3                    	jmp rbx
  7710 00005F0F C9                      	leave
  7711 00005F10 C22800                  	ret AND_KILL_FRAME(3)
  7712                                  .L_lambda_opt_end_0c8d:	; new closure is in rax
  7713 00005F13 C9                      	leave
  7714 00005F14 C21800                  	ret 8 * (2 + 1)
  7715                                  .L_lambda_simple_end_4f5b:	; new closure is in rax
  7716                                  	assert_closure(rax)
    42 00005F17 803805              <1>  cmp byte [%1], %2
    43 00005F1A 0F8514E20000        <1>  jne L_error_incorrect_type
  7717 00005F20 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7718 00005F24 53                      	push rbx
  7719 00005F25 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7720 00005F29 FFD3                    	call rbx
  7721 00005F2B 48890425[00030000]      	mov qword [free_var_96], rax
  7722 00005F33 48B8-                   	mov rax, sob_void
  7722 00005F35 [0000000000000000] 
  7723                                  
  7724 00005F3D 4889C7                  	mov rdi, rax
  7725 00005F40 E880C90000              	call print_sexpr_if_not_void
  7726                                  
  7727 00005F45 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7728 00005F4A E865C90000              	call malloc
  7729 00005F4F 50                      	push rax
  7730 00005F50 BF00000000              	mov rdi, 8 * 0	; new rib
  7731 00005F55 E85AC90000              	call malloc
  7732 00005F5A 50                      	push rax
  7733 00005F5B BF08000000              	mov rdi, 8 * 1	; extended env
  7734 00005F60 E84FC90000              	call malloc
  7735 00005F65 488B7D10                	mov rdi, ENV
  7736 00005F69 BE00000000              	mov rsi, 0
  7737 00005F6E BA01000000              	mov rdx, 1
  7738                                  .L_lambda_simple_env_loop_4f5d:	; ext_env[i + 1] <-- env[i]
  7739 00005F73 4883FE00                	cmp rsi, 0
  7740 00005F77 7410                    	je .L_lambda_simple_env_end_4f5d
  7741 00005F79 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  7742 00005F7D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7743 00005F81 48FFC6                  	inc rsi
  7744 00005F84 48FFC2                  	inc rdx
  7745 00005F87 EBEA                    	jmp .L_lambda_simple_env_loop_4f5d
  7746                                  .L_lambda_simple_env_end_4f5d:
  7747 00005F89 5B                      	pop rbx
  7748 00005F8A BE00000000              	mov rsi, 0
  7749                                  .L_lambda_simple_params_loop_4f5d:	; copy params
  7750 00005F8F 4883FE00                	cmp rsi, 0
  7751 00005F93 740E                    	je .L_lambda_simple_params_end_4f5d
  7752 00005F95 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7753 00005F9A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7754 00005F9E 48FFC6                  	inc rsi
  7755 00005FA1 EBEC                    	jmp .L_lambda_simple_params_loop_4f5d
  7756                                  .L_lambda_simple_params_end_4f5d:
  7757 00005FA3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7758 00005FA6 4889C3                  	mov rbx, rax
  7759 00005FA9 58                      	pop rax
  7760 00005FAA C60005                  	mov byte [rax], T_closure
  7761 00005FAD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7762 00005FB1 48C74009[BE5F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f5d
  7763 00005FB9 E9A5000000              	jmp .L_lambda_simple_end_4f5d
  7764                                  .L_lambda_simple_code_4f5d:	; lambda-simple body
  7765 00005FBE 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7766 00005FC4 740B                    	je .L_lambda_simple_arity_check_ok_4f5d
  7767 00005FC6 FF742410                	push qword [rsp + 8 * 2]
  7768 00005FCA 6A00                    	push 0
  7769 00005FCC E99CC80000              	jmp L_error_incorrect_arity_simple
  7770                                  .L_lambda_simple_arity_check_ok_4f5d:
  7771 00005FD1 C8000000                	enter 0, 0
  7772 00005FD5 488D0425[44000000]      	lea rax, [68 + L_constants]
  7773 00005FDD 50                      	push rax
  7774 00005FDE 488D0425[3B000000]      	lea rax, [59 + L_constants]
  7775 00005FE6 50                      	push rax
  7776 00005FE7 6A02                    	push 2
  7777 00005FE9 488B0425[30010000]      	mov rax, qword [free_var_38]
  7778                                  	assert_closure(rax)
    42 00005FF1 803805              <1>  cmp byte [%1], %2
    43 00005FF4 0F853AE10000        <1>  jne L_error_incorrect_type
  7779 00005FFA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7780 00005FFE 53                      	push rbx
  7781 00005FFF FF7508                  	push RET_ADDR
  7782 00006002 488B7D18                	mov rdi, COUNT
  7783 00006006 4883C703                	add rdi, 3
  7784 0000600A 48C1E703                	shl rdi, 3
  7785 0000600E 4801EF                  	add rdi, rbp
  7786 00006011 488B6D00                	mov rbp, OLD_RDP
  7787 00006015 BE00000000              	mov rsi, 0
  7788                                  .L_tc_recycle_frame_loop_5cd1:	 ; start recycle frame loop
  7789 0000601A 4883FE05                	cmp rsi, 5
  7790 0000601E 7427                    	je .L_tc_recycle_frame_done_5cd1
  7791 00006020 B904000000              	mov rcx, 4
  7792 00006025 4829F1                  	sub rcx, rsi
  7793 00006028 48C1E103                	shl rcx, 3
  7794 0000602C 4801E1                  	add rcx, rsp ; rcx is the address to move
  7795 0000602F 4889F3                  	mov rbx, rsi
  7796 00006032 48C1E303                	shl rbx, 3
  7797 00006036 48F7DB                  	neg rbx
  7798 00006039 4801FB                  	add rbx, rdi ;rbx is the address to move to
  7799 0000603C 488B09                  	mov rcx, [rcx]
  7800 0000603F 48890B                  	mov [rbx], rcx
  7801 00006042 48FFC6                  	inc rsi
  7802 00006045 EBD3                    	jmp .L_tc_recycle_frame_loop_5cd1
  7803                                  .L_tc_recycle_frame_done_5cd1:	 ; end recycle frame loop
  7804 00006047 BB04000000              	mov rbx, 4
  7805 0000604C 48C1E303                	shl rbx, 3
  7806 00006050 48F7DB                  	neg rbx
  7807 00006053 4801FB                  	add rbx, rdi
  7808 00006056 4889DC                  	mov rsp, rbx
  7809 00006059 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7810 0000605D FFE3                    	jmp rbx
  7811 0000605F C9                      	leave
  7812 00006060 C21000                  	ret 8 * (2 + 0)
  7813                                  .L_lambda_simple_end_4f5d:	; new closure is in rax
  7814 00006063 50                      	push rax
  7815 00006064 6A01                    	push 1
  7816 00006066 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7817 0000606B E844C80000              	call malloc
  7818 00006070 50                      	push rax
  7819 00006071 BF00000000              	mov rdi, 8 * 0	; new rib
  7820 00006076 E839C80000              	call malloc
  7821 0000607B 50                      	push rax
  7822 0000607C BF08000000              	mov rdi, 8 * 1	; extended env
  7823 00006081 E82EC80000              	call malloc
  7824 00006086 488B7D10                	mov rdi, ENV
  7825 0000608A BE00000000              	mov rsi, 0
  7826 0000608F BA01000000              	mov rdx, 1
  7827                                  .L_lambda_simple_env_loop_4f5e:	; ext_env[i + 1] <-- env[i]
  7828 00006094 4883FE00                	cmp rsi, 0
  7829 00006098 7410                    	je .L_lambda_simple_env_end_4f5e
  7830 0000609A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  7831 0000609E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7832 000060A2 48FFC6                  	inc rsi
  7833 000060A5 48FFC2                  	inc rdx
  7834 000060A8 EBEA                    	jmp .L_lambda_simple_env_loop_4f5e
  7835                                  .L_lambda_simple_env_end_4f5e:
  7836 000060AA 5B                      	pop rbx
  7837 000060AB BE00000000              	mov rsi, 0
  7838                                  .L_lambda_simple_params_loop_4f5e:	; copy params
  7839 000060B0 4883FE00                	cmp rsi, 0
  7840 000060B4 740E                    	je .L_lambda_simple_params_end_4f5e
  7841 000060B6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7842 000060BB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7843 000060BF 48FFC6                  	inc rsi
  7844 000060C2 EBEC                    	jmp .L_lambda_simple_params_loop_4f5e
  7845                                  .L_lambda_simple_params_end_4f5e:
  7846 000060C4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7847 000060C7 4889C3                  	mov rbx, rax
  7848 000060CA 58                      	pop rax
  7849 000060CB C60005                  	mov byte [rax], T_closure
  7850 000060CE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7851 000060D2 48C74009[DF600000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f5e
  7852 000060DA E99E080000              	jmp .L_lambda_simple_end_4f5e
  7853                                  .L_lambda_simple_code_4f5e:	; lambda-simple body
  7854 000060DF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7855 000060E5 740B                    	je .L_lambda_simple_arity_check_ok_4f5e
  7856 000060E7 FF742410                	push qword [rsp + 8 * 2]
  7857 000060EB 6A01                    	push 1
  7858 000060ED E97BC70000              	jmp L_error_incorrect_arity_simple
  7859                                  .L_lambda_simple_arity_check_ok_4f5e:
  7860 000060F2 C8000000                	enter 0, 0
  7861 000060F6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7862 000060FB E8B4C70000              	call malloc
  7863 00006100 50                      	push rax
  7864 00006101 BF08000000              	mov rdi, 8 * 1	; new rib
  7865 00006106 E8A9C70000              	call malloc
  7866 0000610B 50                      	push rax
  7867 0000610C BF10000000              	mov rdi, 8 * 2	; extended env
  7868 00006111 E89EC70000              	call malloc
  7869 00006116 488B7D10                	mov rdi, ENV
  7870 0000611A BE00000000              	mov rsi, 0
  7871 0000611F BA01000000              	mov rdx, 1
  7872                                  .L_lambda_simple_env_loop_4f5f:	; ext_env[i + 1] <-- env[i]
  7873 00006124 4883FE01                	cmp rsi, 1
  7874 00006128 7410                    	je .L_lambda_simple_env_end_4f5f
  7875 0000612A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  7876 0000612E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7877 00006132 48FFC6                  	inc rsi
  7878 00006135 48FFC2                  	inc rdx
  7879 00006138 EBEA                    	jmp .L_lambda_simple_env_loop_4f5f
  7880                                  .L_lambda_simple_env_end_4f5f:
  7881 0000613A 5B                      	pop rbx
  7882 0000613B BE00000000              	mov rsi, 0
  7883                                  .L_lambda_simple_params_loop_4f5f:	; copy params
  7884 00006140 4883FE01                	cmp rsi, 1
  7885 00006144 740E                    	je .L_lambda_simple_params_end_4f5f
  7886 00006146 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7887 0000614B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7888 0000614F 48FFC6                  	inc rsi
  7889 00006152 EBEC                    	jmp .L_lambda_simple_params_loop_4f5f
  7890                                  .L_lambda_simple_params_end_4f5f:
  7891 00006154 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7892 00006157 4889C3                  	mov rbx, rax
  7893 0000615A 58                      	pop rax
  7894 0000615B C60005                  	mov byte [rax], T_closure
  7895 0000615E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7896 00006162 48C74009[6F610000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f5f
  7897 0000616A E9FE040000              	jmp .L_lambda_simple_end_4f5f
  7898                                  .L_lambda_simple_code_4f5f:	; lambda-simple body
  7899 0000616F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7900 00006175 740B                    	je .L_lambda_simple_arity_check_ok_4f5f
  7901 00006177 FF742410                	push qword [rsp + 8 * 2]
  7902 0000617B 6A02                    	push 2
  7903 0000617D E9EBC60000              	jmp L_error_incorrect_arity_simple
  7904                                  .L_lambda_simple_arity_check_ok_4f5f:
  7905 00006182 C8000000                	enter 0, 0
  7906 00006186 488B4520                	mov rax, PARAM(0)
  7907 0000618A 50                      	push rax
  7908 0000618B 6A01                    	push 1
  7909 0000618D 488B0425[48000000]      	mov rax, qword [free_var_9]
  7910                                  	assert_closure(rax)
    42 00006195 803805              <1>  cmp byte [%1], %2
    43 00006198 0F8596DF0000        <1>  jne L_error_incorrect_type
  7911 0000619E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7912 000061A2 53                      	push rbx
  7913 000061A3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7914 000061A7 FFD3                    	call rbx
  7915 000061A9 483D[02000000]          	cmp rax, sob_boolean_false
  7916 000061AF 0F8407020000            	je .L_if_else_568c
  7917 000061B5 488B4528                	mov rax, PARAM(1)
  7918 000061B9 50                      	push rax
  7919 000061BA 6A01                    	push 1
  7920 000061BC 488B0425[48000000]      	mov rax, qword [free_var_9]
  7921                                  	assert_closure(rax)
    42 000061C4 803805              <1>  cmp byte [%1], %2
    43 000061C7 0F8567DF0000        <1>  jne L_error_incorrect_type
  7922 000061CD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7923 000061D1 53                      	push rbx
  7924 000061D2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7925 000061D6 FFD3                    	call rbx
  7926 000061D8 483D[02000000]          	cmp rax, sob_boolean_false
  7927 000061DE 0F8487000000            	je .L_if_else_568d
  7928 000061E4 488B4528                	mov rax, PARAM(1)
  7929 000061E8 50                      	push rax
  7930 000061E9 488B4520                	mov rax, PARAM(0)
  7931 000061ED 50                      	push rax
  7932 000061EE 6A02                    	push 2
  7933 000061F0 488B0425[10010000]      	mov rax, qword [free_var_34]
  7934                                  	assert_closure(rax)
    42 000061F8 803805              <1>  cmp byte [%1], %2
    43 000061FB 0F8533DF0000        <1>  jne L_error_incorrect_type
  7935 00006201 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7936 00006205 53                      	push rbx
  7937 00006206 FF7508                  	push RET_ADDR
  7938 00006209 488B7D18                	mov rdi, COUNT
  7939 0000620D 4883C703                	add rdi, 3
  7940 00006211 48C1E703                	shl rdi, 3
  7941 00006215 4801EF                  	add rdi, rbp
  7942 00006218 488B6D00                	mov rbp, OLD_RDP
  7943 0000621C BE00000000              	mov rsi, 0
  7944                                  .L_tc_recycle_frame_loop_5cd3:	 ; start recycle frame loop
  7945 00006221 4883FE05                	cmp rsi, 5
  7946 00006225 7427                    	je .L_tc_recycle_frame_done_5cd3
  7947 00006227 B904000000              	mov rcx, 4
  7948 0000622C 4829F1                  	sub rcx, rsi
  7949 0000622F 48C1E103                	shl rcx, 3
  7950 00006233 4801E1                  	add rcx, rsp ; rcx is the address to move
  7951 00006236 4889F3                  	mov rbx, rsi
  7952 00006239 48C1E303                	shl rbx, 3
  7953 0000623D 48F7DB                  	neg rbx
  7954 00006240 4801FB                  	add rbx, rdi ;rbx is the address to move to
  7955 00006243 488B09                  	mov rcx, [rcx]
  7956 00006246 48890B                  	mov [rbx], rcx
  7957 00006249 48FFC6                  	inc rsi
  7958 0000624C EBD3                    	jmp .L_tc_recycle_frame_loop_5cd3
  7959                                  .L_tc_recycle_frame_done_5cd3:	 ; end recycle frame loop
  7960 0000624E BB04000000              	mov rbx, 4
  7961 00006253 48C1E303                	shl rbx, 3
  7962 00006257 48F7DB                  	neg rbx
  7963 0000625A 4801FB                  	add rbx, rdi
  7964 0000625D 4889DC                  	mov rsp, rbx
  7965 00006260 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7966 00006264 FFE3                    	jmp rbx
  7967 00006266 E94C010000              	jmp .L_if_end_568d
  7968                                  	.L_if_else_568d:
  7969 0000626B 488B4528                	mov rax, PARAM(1)
  7970 0000626F 50                      	push rax
  7971 00006270 6A01                    	push 1
  7972 00006272 488B0425[40000000]      	mov rax, qword [free_var_8]
  7973                                  	assert_closure(rax)
    42 0000627A 803805              <1>  cmp byte [%1], %2
    43 0000627D 0F85B1DE0000        <1>  jne L_error_incorrect_type
  7974 00006283 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7975 00006287 53                      	push rbx
  7976 00006288 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7977 0000628C FFD3                    	call rbx
  7978 0000628E 483D[02000000]          	cmp rax, sob_boolean_false
  7979 00006294 0F84A3000000            	je .L_if_else_568e
  7980 0000629A 488B4528                	mov rax, PARAM(1)
  7981 0000629E 50                      	push rax
  7982 0000629F 488B4520                	mov rax, PARAM(0)
  7983 000062A3 50                      	push rax
  7984 000062A4 6A01                    	push 1
  7985 000062A6 488B0425[B8000000]      	mov rax, qword [free_var_23]
  7986                                  	assert_closure(rax)
    42 000062AE 803805              <1>  cmp byte [%1], %2
    43 000062B1 0F857DDE0000        <1>  jne L_error_incorrect_type
  7987 000062B7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7988 000062BB 53                      	push rbx
  7989 000062BC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7990 000062C0 FFD3                    	call rbx
  7991 000062C2 50                      	push rax
  7992 000062C3 6A02                    	push 2
  7993 000062C5 488B0425[F0000000]      	mov rax, qword [free_var_30]
  7994                                  	assert_closure(rax)
    42 000062CD 803805              <1>  cmp byte [%1], %2
    43 000062D0 0F855EDE0000        <1>  jne L_error_incorrect_type
  7995 000062D6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7996 000062DA 53                      	push rbx
  7997 000062DB FF7508                  	push RET_ADDR
  7998 000062DE 488B7D18                	mov rdi, COUNT
  7999 000062E2 4883C703                	add rdi, 3
  8000 000062E6 48C1E703                	shl rdi, 3
  8001 000062EA 4801EF                  	add rdi, rbp
  8002 000062ED 488B6D00                	mov rbp, OLD_RDP
  8003 000062F1 BE00000000              	mov rsi, 0
  8004                                  .L_tc_recycle_frame_loop_5cd4:	 ; start recycle frame loop
  8005 000062F6 4883FE05                	cmp rsi, 5
  8006 000062FA 7427                    	je .L_tc_recycle_frame_done_5cd4
  8007 000062FC B904000000              	mov rcx, 4
  8008 00006301 4829F1                  	sub rcx, rsi
  8009 00006304 48C1E103                	shl rcx, 3
  8010 00006308 4801E1                  	add rcx, rsp ; rcx is the address to move
  8011 0000630B 4889F3                  	mov rbx, rsi
  8012 0000630E 48C1E303                	shl rbx, 3
  8013 00006312 48F7DB                  	neg rbx
  8014 00006315 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8015 00006318 488B09                  	mov rcx, [rcx]
  8016 0000631B 48890B                  	mov [rbx], rcx
  8017 0000631E 48FFC6                  	inc rsi
  8018 00006321 EBD3                    	jmp .L_tc_recycle_frame_loop_5cd4
  8019                                  .L_tc_recycle_frame_done_5cd4:	 ; end recycle frame loop
  8020 00006323 BB04000000              	mov rbx, 4
  8021 00006328 48C1E303                	shl rbx, 3
  8022 0000632C 48F7DB                  	neg rbx
  8023 0000632F 4801FB                  	add rbx, rdi
  8024 00006332 4889DC                  	mov rsp, rbx
  8025 00006335 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8026 00006339 FFE3                    	jmp rbx
  8027 0000633B EB7A                    	jmp .L_if_end_568e
  8028                                  	.L_if_else_568e:
  8029 0000633D 6A00                    	push 0
  8030 0000633F 488B4510                	mov rax, qword [rbp + 8*2]
  8031 00006343 488B00                  	mov rax, qword [rax + 8*0]
  8032 00006346 488B00                  	mov rax, qword [rax + 8*0]
  8033                                  	assert_closure(rax)
    42 00006349 803805              <1>  cmp byte [%1], %2
    43 0000634C 0F85E2DD0000        <1>  jne L_error_incorrect_type
  8034 00006352 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8035 00006356 53                      	push rbx
  8036 00006357 FF7508                  	push RET_ADDR
  8037 0000635A 488B7D18                	mov rdi, COUNT
  8038 0000635E 4883C703                	add rdi, 3
  8039 00006362 48C1E703                	shl rdi, 3
  8040 00006366 4801EF                  	add rdi, rbp
  8041 00006369 488B6D00                	mov rbp, OLD_RDP
  8042 0000636D BE00000000              	mov rsi, 0
  8043                                  .L_tc_recycle_frame_loop_5cd5:	 ; start recycle frame loop
  8044 00006372 4883FE03                	cmp rsi, 3
  8045 00006376 7427                    	je .L_tc_recycle_frame_done_5cd5
  8046 00006378 B902000000              	mov rcx, 2
  8047 0000637D 4829F1                  	sub rcx, rsi
  8048 00006380 48C1E103                	shl rcx, 3
  8049 00006384 4801E1                  	add rcx, rsp ; rcx is the address to move
  8050 00006387 4889F3                  	mov rbx, rsi
  8051 0000638A 48C1E303                	shl rbx, 3
  8052 0000638E 48F7DB                  	neg rbx
  8053 00006391 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8054 00006394 488B09                  	mov rcx, [rcx]
  8055 00006397 48890B                  	mov [rbx], rcx
  8056 0000639A 48FFC6                  	inc rsi
  8057 0000639D EBD3                    	jmp .L_tc_recycle_frame_loop_5cd5
  8058                                  .L_tc_recycle_frame_done_5cd5:	 ; end recycle frame loop
  8059 0000639F BB02000000              	mov rbx, 2
  8060 000063A4 48C1E303                	shl rbx, 3
  8061 000063A8 48F7DB                  	neg rbx
  8062 000063AB 4801FB                  	add rbx, rdi
  8063 000063AE 4889DC                  	mov rsp, rbx
  8064 000063B1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8065 000063B5 FFE3                    	jmp rbx
  8066                                  	.L_if_end_568e:
  8067                                  	.L_if_end_568d:
  8068 000063B7 E9AD020000              	jmp .L_if_end_568c
  8069                                  	.L_if_else_568c:
  8070 000063BC 488B4520                	mov rax, PARAM(0)
  8071 000063C0 50                      	push rax
  8072 000063C1 6A01                    	push 1
  8073 000063C3 488B0425[40000000]      	mov rax, qword [free_var_8]
  8074                                  	assert_closure(rax)
    42 000063CB 803805              <1>  cmp byte [%1], %2
    43 000063CE 0F8560DD0000        <1>  jne L_error_incorrect_type
  8075 000063D4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8076 000063D8 53                      	push rbx
  8077 000063D9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8078 000063DD FFD3                    	call rbx
  8079 000063DF 483D[02000000]          	cmp rax, sob_boolean_false
  8080 000063E5 0F8404020000            	je .L_if_else_568f
  8081 000063EB 488B4528                	mov rax, PARAM(1)
  8082 000063EF 50                      	push rax
  8083 000063F0 6A01                    	push 1
  8084 000063F2 488B0425[48000000]      	mov rax, qword [free_var_9]
  8085                                  	assert_closure(rax)
    42 000063FA 803805              <1>  cmp byte [%1], %2
    43 000063FD 0F8531DD0000        <1>  jne L_error_incorrect_type
  8086 00006403 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8087 00006407 53                      	push rbx
  8088 00006408 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8089 0000640C FFD3                    	call rbx
  8090 0000640E 483D[02000000]          	cmp rax, sob_boolean_false
  8091 00006414 0F84A6000000            	je .L_if_else_5690
  8092 0000641A 488B4528                	mov rax, PARAM(1)
  8093 0000641E 50                      	push rax
  8094 0000641F 6A01                    	push 1
  8095 00006421 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8096                                  	assert_closure(rax)
    42 00006429 803805              <1>  cmp byte [%1], %2
    43 0000642C 0F8502DD0000        <1>  jne L_error_incorrect_type
  8097 00006432 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8098 00006436 53                      	push rbx
  8099 00006437 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8100 0000643B FFD3                    	call rbx
  8101 0000643D 50                      	push rax
  8102 0000643E 488B4520                	mov rax, PARAM(0)
  8103 00006442 50                      	push rax
  8104 00006443 6A02                    	push 2
  8105 00006445 488B0425[F0000000]      	mov rax, qword [free_var_30]
  8106                                  	assert_closure(rax)
    42 0000644D 803805              <1>  cmp byte [%1], %2
    43 00006450 0F85DEDC0000        <1>  jne L_error_incorrect_type
  8107 00006456 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8108 0000645A 53                      	push rbx
  8109 0000645B FF7508                  	push RET_ADDR
  8110 0000645E 488B7D18                	mov rdi, COUNT
  8111 00006462 4883C703                	add rdi, 3
  8112 00006466 48C1E703                	shl rdi, 3
  8113 0000646A 4801EF                  	add rdi, rbp
  8114 0000646D 488B6D00                	mov rbp, OLD_RDP
  8115 00006471 BE00000000              	mov rsi, 0
  8116                                  .L_tc_recycle_frame_loop_5cd6:	 ; start recycle frame loop
  8117 00006476 4883FE05                	cmp rsi, 5
  8118 0000647A 7427                    	je .L_tc_recycle_frame_done_5cd6
  8119 0000647C B904000000              	mov rcx, 4
  8120 00006481 4829F1                  	sub rcx, rsi
  8121 00006484 48C1E103                	shl rcx, 3
  8122 00006488 4801E1                  	add rcx, rsp ; rcx is the address to move
  8123 0000648B 4889F3                  	mov rbx, rsi
  8124 0000648E 48C1E303                	shl rbx, 3
  8125 00006492 48F7DB                  	neg rbx
  8126 00006495 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8127 00006498 488B09                  	mov rcx, [rcx]
  8128 0000649B 48890B                  	mov [rbx], rcx
  8129 0000649E 48FFC6                  	inc rsi
  8130 000064A1 EBD3                    	jmp .L_tc_recycle_frame_loop_5cd6
  8131                                  .L_tc_recycle_frame_done_5cd6:	 ; end recycle frame loop
  8132 000064A3 BB04000000              	mov rbx, 4
  8133 000064A8 48C1E303                	shl rbx, 3
  8134 000064AC 48F7DB                  	neg rbx
  8135 000064AF 4801FB                  	add rbx, rdi
  8136 000064B2 4889DC                  	mov rsp, rbx
  8137 000064B5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8138 000064B9 FFE3                    	jmp rbx
  8139 000064BB E92D010000              	jmp .L_if_end_5690
  8140                                  	.L_if_else_5690:
  8141 000064C0 488B4528                	mov rax, PARAM(1)
  8142 000064C4 50                      	push rax
  8143 000064C5 6A01                    	push 1
  8144 000064C7 488B0425[40000000]      	mov rax, qword [free_var_8]
  8145                                  	assert_closure(rax)
    42 000064CF 803805              <1>  cmp byte [%1], %2
    43 000064D2 0F855CDC0000        <1>  jne L_error_incorrect_type
  8146 000064D8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8147 000064DC 53                      	push rbx
  8148 000064DD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8149 000064E1 FFD3                    	call rbx
  8150 000064E3 483D[02000000]          	cmp rax, sob_boolean_false
  8151 000064E9 0F8484000000            	je .L_if_else_5691
  8152 000064EF 488B4528                	mov rax, PARAM(1)
  8153 000064F3 50                      	push rax
  8154 000064F4 488B4520                	mov rax, PARAM(0)
  8155 000064F8 50                      	push rax
  8156 000064F9 6A02                    	push 2
  8157 000064FB 488B0425[F0000000]      	mov rax, qword [free_var_30]
  8158                                  	assert_closure(rax)
    42 00006503 803805              <1>  cmp byte [%1], %2
    43 00006506 0F8528DC0000        <1>  jne L_error_incorrect_type
  8159 0000650C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8160 00006510 53                      	push rbx
  8161 00006511 FF7508                  	push RET_ADDR
  8162 00006514 488B7D18                	mov rdi, COUNT
  8163 00006518 4883C703                	add rdi, 3
  8164 0000651C 48C1E703                	shl rdi, 3
  8165 00006520 4801EF                  	add rdi, rbp
  8166 00006523 488B6D00                	mov rbp, OLD_RDP
  8167 00006527 BE00000000              	mov rsi, 0
  8168                                  .L_tc_recycle_frame_loop_5cd7:	 ; start recycle frame loop
  8169 0000652C 4883FE05                	cmp rsi, 5
  8170 00006530 7427                    	je .L_tc_recycle_frame_done_5cd7
  8171 00006532 B904000000              	mov rcx, 4
  8172 00006537 4829F1                  	sub rcx, rsi
  8173 0000653A 48C1E103                	shl rcx, 3
  8174 0000653E 4801E1                  	add rcx, rsp ; rcx is the address to move
  8175 00006541 4889F3                  	mov rbx, rsi
  8176 00006544 48C1E303                	shl rbx, 3
  8177 00006548 48F7DB                  	neg rbx
  8178 0000654B 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8179 0000654E 488B09                  	mov rcx, [rcx]
  8180 00006551 48890B                  	mov [rbx], rcx
  8181 00006554 48FFC6                  	inc rsi
  8182 00006557 EBD3                    	jmp .L_tc_recycle_frame_loop_5cd7
  8183                                  .L_tc_recycle_frame_done_5cd7:	 ; end recycle frame loop
  8184 00006559 BB04000000              	mov rbx, 4
  8185 0000655E 48C1E303                	shl rbx, 3
  8186 00006562 48F7DB                  	neg rbx
  8187 00006565 4801FB                  	add rbx, rdi
  8188 00006568 4889DC                  	mov rsp, rbx
  8189 0000656B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8190 0000656F FFE3                    	jmp rbx
  8191 00006571 EB7A                    	jmp .L_if_end_5691
  8192                                  	.L_if_else_5691:
  8193 00006573 6A00                    	push 0
  8194 00006575 488B4510                	mov rax, qword [rbp + 8*2]
  8195 00006579 488B00                  	mov rax, qword [rax + 8*0]
  8196 0000657C 488B00                  	mov rax, qword [rax + 8*0]
  8197                                  	assert_closure(rax)
    42 0000657F 803805              <1>  cmp byte [%1], %2
    43 00006582 0F85ACDB0000        <1>  jne L_error_incorrect_type
  8198 00006588 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8199 0000658C 53                      	push rbx
  8200 0000658D FF7508                  	push RET_ADDR
  8201 00006590 488B7D18                	mov rdi, COUNT
  8202 00006594 4883C703                	add rdi, 3
  8203 00006598 48C1E703                	shl rdi, 3
  8204 0000659C 4801EF                  	add rdi, rbp
  8205 0000659F 488B6D00                	mov rbp, OLD_RDP
  8206 000065A3 BE00000000              	mov rsi, 0
  8207                                  .L_tc_recycle_frame_loop_5cd8:	 ; start recycle frame loop
  8208 000065A8 4883FE03                	cmp rsi, 3
  8209 000065AC 7427                    	je .L_tc_recycle_frame_done_5cd8
  8210 000065AE B902000000              	mov rcx, 2
  8211 000065B3 4829F1                  	sub rcx, rsi
  8212 000065B6 48C1E103                	shl rcx, 3
  8213 000065BA 4801E1                  	add rcx, rsp ; rcx is the address to move
  8214 000065BD 4889F3                  	mov rbx, rsi
  8215 000065C0 48C1E303                	shl rbx, 3
  8216 000065C4 48F7DB                  	neg rbx
  8217 000065C7 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8218 000065CA 488B09                  	mov rcx, [rcx]
  8219 000065CD 48890B                  	mov [rbx], rcx
  8220 000065D0 48FFC6                  	inc rsi
  8221 000065D3 EBD3                    	jmp .L_tc_recycle_frame_loop_5cd8
  8222                                  .L_tc_recycle_frame_done_5cd8:	 ; end recycle frame loop
  8223 000065D5 BB02000000              	mov rbx, 2
  8224 000065DA 48C1E303                	shl rbx, 3
  8225 000065DE 48F7DB                  	neg rbx
  8226 000065E1 4801FB                  	add rbx, rdi
  8227 000065E4 4889DC                  	mov rsp, rbx
  8228 000065E7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8229 000065EB FFE3                    	jmp rbx
  8230                                  	.L_if_end_5691:
  8231                                  	.L_if_end_5690:
  8232 000065ED EB7A                    	jmp .L_if_end_568f
  8233                                  	.L_if_else_568f:
  8234 000065EF 6A00                    	push 0
  8235 000065F1 488B4510                	mov rax, qword [rbp + 8*2]
  8236 000065F5 488B00                  	mov rax, qword [rax + 8*0]
  8237 000065F8 488B00                  	mov rax, qword [rax + 8*0]
  8238                                  	assert_closure(rax)
    42 000065FB 803805              <1>  cmp byte [%1], %2
    43 000065FE 0F8530DB0000        <1>  jne L_error_incorrect_type
  8239 00006604 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8240 00006608 53                      	push rbx
  8241 00006609 FF7508                  	push RET_ADDR
  8242 0000660C 488B7D18                	mov rdi, COUNT
  8243 00006610 4883C703                	add rdi, 3
  8244 00006614 48C1E703                	shl rdi, 3
  8245 00006618 4801EF                  	add rdi, rbp
  8246 0000661B 488B6D00                	mov rbp, OLD_RDP
  8247 0000661F BE00000000              	mov rsi, 0
  8248                                  .L_tc_recycle_frame_loop_5cd9:	 ; start recycle frame loop
  8249 00006624 4883FE03                	cmp rsi, 3
  8250 00006628 7427                    	je .L_tc_recycle_frame_done_5cd9
  8251 0000662A B902000000              	mov rcx, 2
  8252 0000662F 4829F1                  	sub rcx, rsi
  8253 00006632 48C1E103                	shl rcx, 3
  8254 00006636 4801E1                  	add rcx, rsp ; rcx is the address to move
  8255 00006639 4889F3                  	mov rbx, rsi
  8256 0000663C 48C1E303                	shl rbx, 3
  8257 00006640 48F7DB                  	neg rbx
  8258 00006643 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8259 00006646 488B09                  	mov rcx, [rcx]
  8260 00006649 48890B                  	mov [rbx], rcx
  8261 0000664C 48FFC6                  	inc rsi
  8262 0000664F EBD3                    	jmp .L_tc_recycle_frame_loop_5cd9
  8263                                  .L_tc_recycle_frame_done_5cd9:	 ; end recycle frame loop
  8264 00006651 BB02000000              	mov rbx, 2
  8265 00006656 48C1E303                	shl rbx, 3
  8266 0000665A 48F7DB                  	neg rbx
  8267 0000665D 4801FB                  	add rbx, rdi
  8268 00006660 4889DC                  	mov rsp, rbx
  8269 00006663 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8270 00006667 FFE3                    	jmp rbx
  8271                                  	.L_if_end_568f:
  8272                                  	.L_if_end_568c:
  8273 00006669 C9                      	leave
  8274 0000666A C22000                  	ret 8 * (2 + 2)
  8275                                  .L_lambda_simple_end_4f5f:	; new closure is in rax
  8276 0000666D 50                      	push rax
  8277 0000666E 6A01                    	push 1
  8278 00006670 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8279 00006675 E83AC20000              	call malloc
  8280 0000667A 50                      	push rax
  8281 0000667B BF08000000              	mov rdi, 8 * 1	; new rib
  8282 00006680 E82FC20000              	call malloc
  8283 00006685 50                      	push rax
  8284 00006686 BF10000000              	mov rdi, 8 * 2	; extended env
  8285 0000668B E824C20000              	call malloc
  8286 00006690 488B7D10                	mov rdi, ENV
  8287 00006694 BE00000000              	mov rsi, 0
  8288 00006699 BA01000000              	mov rdx, 1
  8289                                  .L_lambda_simple_env_loop_4f60:	; ext_env[i + 1] <-- env[i]
  8290 0000669E 4883FE01                	cmp rsi, 1
  8291 000066A2 7410                    	je .L_lambda_simple_env_end_4f60
  8292 000066A4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  8293 000066A8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8294 000066AC 48FFC6                  	inc rsi
  8295 000066AF 48FFC2                  	inc rdx
  8296 000066B2 EBEA                    	jmp .L_lambda_simple_env_loop_4f60
  8297                                  .L_lambda_simple_env_end_4f60:
  8298 000066B4 5B                      	pop rbx
  8299 000066B5 BE00000000              	mov rsi, 0
  8300                                  .L_lambda_simple_params_loop_4f60:	; copy params
  8301 000066BA 4883FE01                	cmp rsi, 1
  8302 000066BE 740E                    	je .L_lambda_simple_params_end_4f60
  8303 000066C0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8304 000066C5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8305 000066C9 48FFC6                  	inc rsi
  8306 000066CC EBEC                    	jmp .L_lambda_simple_params_loop_4f60
  8307                                  .L_lambda_simple_params_end_4f60:
  8308 000066CE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8309 000066D1 4889C3                  	mov rbx, rax
  8310 000066D4 58                      	pop rax
  8311 000066D5 C60005                  	mov byte [rax], T_closure
  8312 000066D8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8313 000066DC 48C74009[E9660000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f60
  8314 000066E4 E922020000              	jmp .L_lambda_simple_end_4f60
  8315                                  .L_lambda_simple_code_4f60:	; lambda-simple body
  8316 000066E9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8317 000066EF 740B                    	je .L_lambda_simple_arity_check_ok_4f60
  8318 000066F1 FF742410                	push qword [rsp + 8 * 2]
  8319 000066F5 6A01                    	push 1
  8320 000066F7 E971C10000              	jmp L_error_incorrect_arity_simple
  8321                                  .L_lambda_simple_arity_check_ok_4f60:
  8322 000066FC C8000000                	enter 0, 0
  8323 00006700 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8324 00006705 E8AAC10000              	call malloc
  8325 0000670A 50                      	push rax
  8326 0000670B BF08000000              	mov rdi, 8 * 1	; new rib
  8327 00006710 E89FC10000              	call malloc
  8328 00006715 50                      	push rax
  8329 00006716 BF18000000              	mov rdi, 8 * 3	; extended env
  8330 0000671B E894C10000              	call malloc
  8331 00006720 488B7D10                	mov rdi, ENV
  8332 00006724 BE00000000              	mov rsi, 0
  8333 00006729 BA01000000              	mov rdx, 1
  8334                                  .L_lambda_opt_env_loop_0c8e:	; ext_env[i + 1] <-- env[i]
  8335 0000672E 4883FE02                	cmp rsi, 2
  8336 00006732 7410                    	je .L_lambda_opt_env_end_0c8e
  8337 00006734 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8338 00006738 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8339 0000673C 48FFC6                  	inc rsi
  8340 0000673F 48FFC2                  	inc rdx
  8341 00006742 EBEA                    	jmp .L_lambda_opt_env_loop_0c8e
  8342                                  .L_lambda_opt_env_end_0c8e:
  8343 00006744 5B                      	pop rbx
  8344 00006745 BE00000000              	mov rsi, 0
  8345                                  .L_lambda_opt_params_loop_0c8e:	; copy params
  8346 0000674A 4883FE01                	cmp rsi, 1
  8347 0000674E 740E                    	je .L_lambda_opt_params_end_0c8e
  8348 00006750 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8349 00006755 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8350 00006759 48FFC6                  	inc rsi
  8351 0000675C EBEC                    	jmp .L_lambda_opt_params_loop_0c8e
  8352                                  .L_lambda_opt_params_end_0c8e:
  8353 0000675E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8354 00006761 4889C3                  	mov rbx, rax
  8355 00006764 58                      	pop rax
  8356 00006765 C60005                  	mov byte [rax], T_closure
  8357 00006768 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8358 0000676C 48C74009[79670000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c8e
  8359 00006774 E98E010000              	jmp .L_lambda_opt_end_0c8e
  8360                                  .L_lambda_opt_code_0c8e:	; lambda-opt body
  8361 00006779 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  8362 0000677E 4889FB                  	mov rbx, rdi
  8363 00006781 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
  8364 00006785 4883FB00                	cmp rbx, 0
  8365 00006789 7F45                    	jg .L_lambda_opt_arity_check_more_0c8e
  8366                                  .L_lambda_opt_arity_check_exact_0c8e:	 ; if params in opt is exact
  8367 0000678B 4883EC08                	sub rsp, 8
  8368 0000678F BE00000000              	mov rsi, 0 ; index
  8369                                  .L_lambda_opt_stack_enlarge_loop_0c8e:	 ; stack loop enlarge start
  8370 00006794 4883FE03                	cmp rsi, 3
  8371 00006798 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c8e
  8372 0000679A 4889F7                  	mov rdi, rsi
  8373 0000679D 48FFC7                  	inc rdi
  8374 000067A0 48C1E703                	shl rdi, 3
  8375 000067A4 4801E7                  	add rdi, rsp
  8376 000067A7 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  8377 000067AA 4883EB08                	sub rbx, 8
  8378 000067AE 488B3F                  	mov rdi, [rdi]
  8379 000067B1 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  8380 000067B4 48FFC6                  	inc rsi
  8381 000067B7 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c8e
  8382                                  .L_lambda_opt_stack_enlarge_loop_exit_0c8e:	 ; end of stack enlarge loop
  8383 000067B9 48C7442418-             	mov qword [rsp + 3*8], sob_nil
  8383 000067BE [01000000]         
  8384 000067C2 48C744241001000000      	mov qword [rsp + 2*8], 1
  8385 000067CB E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c8e
  8386                                  .L_lambda_opt_arity_check_more_0c8e:	 ; if params in opt is more
  8387 000067D0 48B8-                   	mov rax, sob_nil
  8387 000067D2 [0100000000000000] 
  8388 000067DA 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  8389 000067DD 48FFCE                  	dec rsi
  8390                                  .L_lambda_opt_list_create_loop_0c8e:	; start of list creation loop
  8391 000067E0 4883FEFF                	cmp rsi, -1
  8392 000067E4 7422                    	je .L_lambda_opt_list_create_loop_exit_0c8e
  8393 000067E6 488D4E03                	lea rcx, [rsi + (3 + 0)]
  8394 000067EA 48C1E103                	shl rcx, 3
  8395 000067EE 4801E1                  	add rcx, rsp
  8396 000067F1 488B09                  	mov rcx, [rcx]
  8397 000067F4 56                      	push rsi ; save params
  8398 000067F5 53                      	push rbx
  8399                                  
  8400 000067F6 50                      	push rax ; cdr
  8401 000067F7 51                      	push rcx ; car
  8402 000067F8 6A02                    	push qword 2 ; push num of args
  8403 000067FA 6A01                    	push qword 1 ; push garbage as env
  8404 000067FC E83ACA0000              	call L_code_ptr_cons
  8405                                  
  8406 00006801 5B                      	pop rbx ; restore params
  8407 00006802 5E                      	pop rsi
  8408 00006803 48FFCE                  	dec rsi
  8409 00006806 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c8e
  8410                                  .L_lambda_opt_list_create_loop_exit_0c8e:	; end of list creation loop
  8411 00006808 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  8412 0000680D 4883C302                	add rbx, 2
  8413 00006811 4889DF                  	mov rdi, rbx
  8414 00006814 48C1E703                	shl rdi,3
  8415 00006818 4801E7                  	add rdi, rsp
  8416 0000681B 488907                  	mov [rdi], rax
  8417 0000681E BE00000000              	mov rsi, 0 ;index
  8418                                  .L_lambda_opt_stack_shrink_loop_0c8e:	; start of stack shrink loop
  8419 00006823 4883FE03                	cmp rsi, 3
  8420 00006827 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c8e
  8421 00006829 BF02000000              	mov rdi, 2
  8422 0000682E 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  8423 00006831 4889D9                  	mov rcx, rbx
  8424 00006834 4829F1                  	sub rcx, rsi
  8425 00006837 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  8426 0000683A 4889FA                  	mov rdx, rdi
  8427 0000683D 48C1E203                	shl rdx, 3
  8428 00006841 4801E2                  	add rdx, rsp
  8429 00006844 48C1E103                	shl rcx, 3
  8430 00006848 4801E1                  	add rcx, rsp
  8431 0000684B 488B12                  	mov rdx, [rdx]
  8432 0000684E 488911                  	mov [rcx], rdx
  8433 00006851 48FFC6                  	inc rsi
  8434 00006854 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c8e
  8435                                  .L_lambda_opt_stack_shrink_loop_exit_0c8e:	; end of stack shrink loop
  8436 00006856 4883EB02                	sub rbx, 2 ; rbx has number of args
  8437 0000685A 4883EB01                	sub rbx, 1
  8438 0000685E 48C1E303                	shl rbx, 3
  8439 00006862 4801DC                  	add rsp, rbx
  8440 00006865 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  8441                                  .L_lambda_opt_stack_adjusted_0c8e:
  8442 0000686E C8000000                	enter 0, 0
  8443 00006872 488B4520                	mov rax, PARAM(0)
  8444 00006876 50                      	push rax
  8445 00006877 488D0425[20000000]      	lea rax, [32 + L_constants]
  8446 0000687F 50                      	push rax
  8447 00006880 488B4510                	mov rax, qword [rbp + 8*2]
  8448 00006884 488B00                  	mov rax, qword [rax + 8*0]
  8449 00006887 488B00                  	mov rax, qword [rax + 8*0]
  8450 0000688A 50                      	push rax
  8451 0000688B 6A03                    	push 3
  8452 0000688D 488B0425[F8020000]      	mov rax, qword [free_var_95]
  8453                                  	assert_closure(rax)
    42 00006895 803805              <1>  cmp byte [%1], %2
    43 00006898 0F8596D80000        <1>  jne L_error_incorrect_type
  8454 0000689E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8455 000068A2 53                      	push rbx
  8456 000068A3 FF7508                  	push RET_ADDR
  8457 000068A6 488B7D18                	mov rdi, COUNT
  8458 000068AA 4883C703                	add rdi, 3
  8459 000068AE 48C1E703                	shl rdi, 3
  8460 000068B2 4801EF                  	add rdi, rbp
  8461 000068B5 488B6D00                	mov rbp, OLD_RDP
  8462 000068B9 BE00000000              	mov rsi, 0
  8463                                  .L_tc_recycle_frame_loop_5cda:	 ; start recycle frame loop
  8464 000068BE 4883FE06                	cmp rsi, 6
  8465 000068C2 7427                    	je .L_tc_recycle_frame_done_5cda
  8466 000068C4 B905000000              	mov rcx, 5
  8467 000068C9 4829F1                  	sub rcx, rsi
  8468 000068CC 48C1E103                	shl rcx, 3
  8469 000068D0 4801E1                  	add rcx, rsp ; rcx is the address to move
  8470 000068D3 4889F3                  	mov rbx, rsi
  8471 000068D6 48C1E303                	shl rbx, 3
  8472 000068DA 48F7DB                  	neg rbx
  8473 000068DD 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8474 000068E0 488B09                  	mov rcx, [rcx]
  8475 000068E3 48890B                  	mov [rbx], rcx
  8476 000068E6 48FFC6                  	inc rsi
  8477 000068E9 EBD3                    	jmp .L_tc_recycle_frame_loop_5cda
  8478                                  .L_tc_recycle_frame_done_5cda:	 ; end recycle frame loop
  8479 000068EB BB05000000              	mov rbx, 5
  8480 000068F0 48C1E303                	shl rbx, 3
  8481 000068F4 48F7DB                  	neg rbx
  8482 000068F7 4801FB                  	add rbx, rdi
  8483 000068FA 4889DC                  	mov rsp, rbx
  8484 000068FD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8485 00006901 FFE3                    	jmp rbx
  8486 00006903 C9                      	leave
  8487 00006904 C21800                  	ret AND_KILL_FRAME(1)
  8488                                  .L_lambda_opt_end_0c8e:	; new closure is in rax
  8489 00006907 C9                      	leave
  8490 00006908 C21800                  	ret 8 * (2 + 1)
  8491                                  .L_lambda_simple_end_4f60:	; new closure is in rax
  8492                                  	assert_closure(rax)
    42 0000690B 803805              <1>  cmp byte [%1], %2
    43 0000690E 0F8520D80000        <1>  jne L_error_incorrect_type
  8493 00006914 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8494 00006918 53                      	push rbx
  8495 00006919 FF7508                  	push RET_ADDR
  8496 0000691C 488B7D18                	mov rdi, COUNT
  8497 00006920 4883C703                	add rdi, 3
  8498 00006924 48C1E703                	shl rdi, 3
  8499 00006928 4801EF                  	add rdi, rbp
  8500 0000692B 488B6D00                	mov rbp, OLD_RDP
  8501 0000692F BE00000000              	mov rsi, 0
  8502                                  .L_tc_recycle_frame_loop_5cd2:	 ; start recycle frame loop
  8503 00006934 4883FE04                	cmp rsi, 4
  8504 00006938 7427                    	je .L_tc_recycle_frame_done_5cd2
  8505 0000693A B903000000              	mov rcx, 3
  8506 0000693F 4829F1                  	sub rcx, rsi
  8507 00006942 48C1E103                	shl rcx, 3
  8508 00006946 4801E1                  	add rcx, rsp ; rcx is the address to move
  8509 00006949 4889F3                  	mov rbx, rsi
  8510 0000694C 48C1E303                	shl rbx, 3
  8511 00006950 48F7DB                  	neg rbx
  8512 00006953 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8513 00006956 488B09                  	mov rcx, [rcx]
  8514 00006959 48890B                  	mov [rbx], rcx
  8515 0000695C 48FFC6                  	inc rsi
  8516 0000695F EBD3                    	jmp .L_tc_recycle_frame_loop_5cd2
  8517                                  .L_tc_recycle_frame_done_5cd2:	 ; end recycle frame loop
  8518 00006961 BB03000000              	mov rbx, 3
  8519 00006966 48C1E303                	shl rbx, 3
  8520 0000696A 48F7DB                  	neg rbx
  8521 0000696D 4801FB                  	add rbx, rdi
  8522 00006970 4889DC                  	mov rsp, rbx
  8523 00006973 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8524 00006977 FFE3                    	jmp rbx
  8525 00006979 C9                      	leave
  8526 0000697A C21800                  	ret 8 * (2 + 1)
  8527                                  .L_lambda_simple_end_4f5e:	; new closure is in rax
  8528                                  	assert_closure(rax)
    42 0000697D 803805              <1>  cmp byte [%1], %2
    43 00006980 0F85AED70000        <1>  jne L_error_incorrect_type
  8529 00006986 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8530 0000698A 53                      	push rbx
  8531 0000698B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8532 0000698F FFD3                    	call rbx
  8533 00006991 48890425[08030000]      	mov qword [free_var_97], rax
  8534 00006999 48B8-                   	mov rax, sob_void
  8534 0000699B [0000000000000000] 
  8535                                  
  8536 000069A3 4889C7                  	mov rdi, rax
  8537 000069A6 E81ABF0000              	call print_sexpr_if_not_void
  8538                                  
  8539 000069AB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8540 000069B0 E8FFBE0000              	call malloc
  8541 000069B5 50                      	push rax
  8542 000069B6 BF00000000              	mov rdi, 8 * 0	; new rib
  8543 000069BB E8F4BE0000              	call malloc
  8544 000069C0 50                      	push rax
  8545 000069C1 BF08000000              	mov rdi, 8 * 1	; extended env
  8546 000069C6 E8E9BE0000              	call malloc
  8547 000069CB 488B7D10                	mov rdi, ENV
  8548 000069CF BE00000000              	mov rsi, 0
  8549 000069D4 BA01000000              	mov rdx, 1
  8550                                  .L_lambda_simple_env_loop_4f61:	; ext_env[i + 1] <-- env[i]
  8551 000069D9 4883FE00                	cmp rsi, 0
  8552 000069DD 7410                    	je .L_lambda_simple_env_end_4f61
  8553 000069DF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  8554 000069E3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8555 000069E7 48FFC6                  	inc rsi
  8556 000069EA 48FFC2                  	inc rdx
  8557 000069ED EBEA                    	jmp .L_lambda_simple_env_loop_4f61
  8558                                  .L_lambda_simple_env_end_4f61:
  8559 000069EF 5B                      	pop rbx
  8560 000069F0 BE00000000              	mov rsi, 0
  8561                                  .L_lambda_simple_params_loop_4f61:	; copy params
  8562 000069F5 4883FE00                	cmp rsi, 0
  8563 000069F9 740E                    	je .L_lambda_simple_params_end_4f61
  8564 000069FB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8565 00006A00 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8566 00006A04 48FFC6                  	inc rsi
  8567 00006A07 EBEC                    	jmp .L_lambda_simple_params_loop_4f61
  8568                                  .L_lambda_simple_params_end_4f61:
  8569 00006A09 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8570 00006A0C 4889C3                  	mov rbx, rax
  8571 00006A0F 58                      	pop rax
  8572 00006A10 C60005                  	mov byte [rax], T_closure
  8573 00006A13 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8574 00006A17 48C74009[246A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f61
  8575 00006A1F E9A5000000              	jmp .L_lambda_simple_end_4f61
  8576                                  .L_lambda_simple_code_4f61:	; lambda-simple body
  8577 00006A24 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8578 00006A2A 740B                    	je .L_lambda_simple_arity_check_ok_4f61
  8579 00006A2C FF742410                	push qword [rsp + 8 * 2]
  8580 00006A30 6A00                    	push 0
  8581 00006A32 E936BE0000              	jmp L_error_incorrect_arity_simple
  8582                                  .L_lambda_simple_arity_check_ok_4f61:
  8583 00006A37 C8000000                	enter 0, 0
  8584 00006A3B 488D0425[44000000]      	lea rax, [68 + L_constants]
  8585 00006A43 50                      	push rax
  8586 00006A44 488D0425[77000000]      	lea rax, [119 + L_constants]
  8587 00006A4C 50                      	push rax
  8588 00006A4D 6A02                    	push 2
  8589 00006A4F 488B0425[30010000]      	mov rax, qword [free_var_38]
  8590                                  	assert_closure(rax)
    42 00006A57 803805              <1>  cmp byte [%1], %2
    43 00006A5A 0F85D4D60000        <1>  jne L_error_incorrect_type
  8591 00006A60 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8592 00006A64 53                      	push rbx
  8593 00006A65 FF7508                  	push RET_ADDR
  8594 00006A68 488B7D18                	mov rdi, COUNT
  8595 00006A6C 4883C703                	add rdi, 3
  8596 00006A70 48C1E703                	shl rdi, 3
  8597 00006A74 4801EF                  	add rdi, rbp
  8598 00006A77 488B6D00                	mov rbp, OLD_RDP
  8599 00006A7B BE00000000              	mov rsi, 0
  8600                                  .L_tc_recycle_frame_loop_5cdb:	 ; start recycle frame loop
  8601 00006A80 4883FE05                	cmp rsi, 5
  8602 00006A84 7427                    	je .L_tc_recycle_frame_done_5cdb
  8603 00006A86 B904000000              	mov rcx, 4
  8604 00006A8B 4829F1                  	sub rcx, rsi
  8605 00006A8E 48C1E103                	shl rcx, 3
  8606 00006A92 4801E1                  	add rcx, rsp ; rcx is the address to move
  8607 00006A95 4889F3                  	mov rbx, rsi
  8608 00006A98 48C1E303                	shl rbx, 3
  8609 00006A9C 48F7DB                  	neg rbx
  8610 00006A9F 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8611 00006AA2 488B09                  	mov rcx, [rcx]
  8612 00006AA5 48890B                  	mov [rbx], rcx
  8613 00006AA8 48FFC6                  	inc rsi
  8614 00006AAB EBD3                    	jmp .L_tc_recycle_frame_loop_5cdb
  8615                                  .L_tc_recycle_frame_done_5cdb:	 ; end recycle frame loop
  8616 00006AAD BB04000000              	mov rbx, 4
  8617 00006AB2 48C1E303                	shl rbx, 3
  8618 00006AB6 48F7DB                  	neg rbx
  8619 00006AB9 4801FB                  	add rbx, rdi
  8620 00006ABC 4889DC                  	mov rsp, rbx
  8621 00006ABF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8622 00006AC3 FFE3                    	jmp rbx
  8623 00006AC5 C9                      	leave
  8624 00006AC6 C21000                  	ret 8 * (2 + 0)
  8625                                  .L_lambda_simple_end_4f61:	; new closure is in rax
  8626 00006AC9 50                      	push rax
  8627 00006ACA 6A01                    	push 1
  8628 00006ACC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8629 00006AD1 E8DEBD0000              	call malloc
  8630 00006AD6 50                      	push rax
  8631 00006AD7 BF00000000              	mov rdi, 8 * 0	; new rib
  8632 00006ADC E8D3BD0000              	call malloc
  8633 00006AE1 50                      	push rax
  8634 00006AE2 BF08000000              	mov rdi, 8 * 1	; extended env
  8635 00006AE7 E8C8BD0000              	call malloc
  8636 00006AEC 488B7D10                	mov rdi, ENV
  8637 00006AF0 BE00000000              	mov rsi, 0
  8638 00006AF5 BA01000000              	mov rdx, 1
  8639                                  .L_lambda_simple_env_loop_4f62:	; ext_env[i + 1] <-- env[i]
  8640 00006AFA 4883FE00                	cmp rsi, 0
  8641 00006AFE 7410                    	je .L_lambda_simple_env_end_4f62
  8642 00006B00 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  8643 00006B04 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8644 00006B08 48FFC6                  	inc rsi
  8645 00006B0B 48FFC2                  	inc rdx
  8646 00006B0E EBEA                    	jmp .L_lambda_simple_env_loop_4f62
  8647                                  .L_lambda_simple_env_end_4f62:
  8648 00006B10 5B                      	pop rbx
  8649 00006B11 BE00000000              	mov rsi, 0
  8650                                  .L_lambda_simple_params_loop_4f62:	; copy params
  8651 00006B16 4883FE00                	cmp rsi, 0
  8652 00006B1A 740E                    	je .L_lambda_simple_params_end_4f62
  8653 00006B1C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8654 00006B21 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8655 00006B25 48FFC6                  	inc rsi
  8656 00006B28 EBEC                    	jmp .L_lambda_simple_params_loop_4f62
  8657                                  .L_lambda_simple_params_end_4f62:
  8658 00006B2A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8659 00006B2D 4889C3                  	mov rbx, rax
  8660 00006B30 58                      	pop rax
  8661 00006B31 C60005                  	mov byte [rax], T_closure
  8662 00006B34 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8663 00006B38 48C74009[456B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f62
  8664 00006B40 E98E0A0000              	jmp .L_lambda_simple_end_4f62
  8665                                  .L_lambda_simple_code_4f62:	; lambda-simple body
  8666 00006B45 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8667 00006B4B 740B                    	je .L_lambda_simple_arity_check_ok_4f62
  8668 00006B4D FF742410                	push qword [rsp + 8 * 2]
  8669 00006B51 6A01                    	push 1
  8670 00006B53 E915BD0000              	jmp L_error_incorrect_arity_simple
  8671                                  .L_lambda_simple_arity_check_ok_4f62:
  8672 00006B58 C8000000                	enter 0, 0
  8673 00006B5C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8674 00006B61 E84EBD0000              	call malloc
  8675 00006B66 50                      	push rax
  8676 00006B67 BF08000000              	mov rdi, 8 * 1	; new rib
  8677 00006B6C E843BD0000              	call malloc
  8678 00006B71 50                      	push rax
  8679 00006B72 BF10000000              	mov rdi, 8 * 2	; extended env
  8680 00006B77 E838BD0000              	call malloc
  8681 00006B7C 488B7D10                	mov rdi, ENV
  8682 00006B80 BE00000000              	mov rsi, 0
  8683 00006B85 BA01000000              	mov rdx, 1
  8684                                  .L_lambda_simple_env_loop_4f63:	; ext_env[i + 1] <-- env[i]
  8685 00006B8A 4883FE01                	cmp rsi, 1
  8686 00006B8E 7410                    	je .L_lambda_simple_env_end_4f63
  8687 00006B90 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  8688 00006B94 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8689 00006B98 48FFC6                  	inc rsi
  8690 00006B9B 48FFC2                  	inc rdx
  8691 00006B9E EBEA                    	jmp .L_lambda_simple_env_loop_4f63
  8692                                  .L_lambda_simple_env_end_4f63:
  8693 00006BA0 5B                      	pop rbx
  8694 00006BA1 BE00000000              	mov rsi, 0
  8695                                  .L_lambda_simple_params_loop_4f63:	; copy params
  8696 00006BA6 4883FE01                	cmp rsi, 1
  8697 00006BAA 740E                    	je .L_lambda_simple_params_end_4f63
  8698 00006BAC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8699 00006BB1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8700 00006BB5 48FFC6                  	inc rsi
  8701 00006BB8 EBEC                    	jmp .L_lambda_simple_params_loop_4f63
  8702                                  .L_lambda_simple_params_end_4f63:
  8703 00006BBA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8704 00006BBD 4889C3                  	mov rbx, rax
  8705 00006BC0 58                      	pop rax
  8706 00006BC1 C60005                  	mov byte [rax], T_closure
  8707 00006BC4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8708 00006BC8 48C74009[D56B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f63
  8709 00006BD0 E9FE040000              	jmp .L_lambda_simple_end_4f63
  8710                                  .L_lambda_simple_code_4f63:	; lambda-simple body
  8711 00006BD5 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8712 00006BDB 740B                    	je .L_lambda_simple_arity_check_ok_4f63
  8713 00006BDD FF742410                	push qword [rsp + 8 * 2]
  8714 00006BE1 6A02                    	push 2
  8715 00006BE3 E985BC0000              	jmp L_error_incorrect_arity_simple
  8716                                  .L_lambda_simple_arity_check_ok_4f63:
  8717 00006BE8 C8000000                	enter 0, 0
  8718 00006BEC 488B4520                	mov rax, PARAM(0)
  8719 00006BF0 50                      	push rax
  8720 00006BF1 6A01                    	push 1
  8721 00006BF3 488B0425[48000000]      	mov rax, qword [free_var_9]
  8722                                  	assert_closure(rax)
    42 00006BFB 803805              <1>  cmp byte [%1], %2
    43 00006BFE 0F8530D50000        <1>  jne L_error_incorrect_type
  8723 00006C04 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8724 00006C08 53                      	push rbx
  8725 00006C09 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8726 00006C0D FFD3                    	call rbx
  8727 00006C0F 483D[02000000]          	cmp rax, sob_boolean_false
  8728 00006C15 0F8407020000            	je .L_if_else_5692
  8729 00006C1B 488B4528                	mov rax, PARAM(1)
  8730 00006C1F 50                      	push rax
  8731 00006C20 6A01                    	push 1
  8732 00006C22 488B0425[48000000]      	mov rax, qword [free_var_9]
  8733                                  	assert_closure(rax)
    42 00006C2A 803805              <1>  cmp byte [%1], %2
    43 00006C2D 0F8501D50000        <1>  jne L_error_incorrect_type
  8734 00006C33 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8735 00006C37 53                      	push rbx
  8736 00006C38 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8737 00006C3C FFD3                    	call rbx
  8738 00006C3E 483D[02000000]          	cmp rax, sob_boolean_false
  8739 00006C44 0F8487000000            	je .L_if_else_5693
  8740 00006C4A 488B4528                	mov rax, PARAM(1)
  8741 00006C4E 50                      	push rax
  8742 00006C4F 488B4520                	mov rax, PARAM(0)
  8743 00006C53 50                      	push rax
  8744 00006C54 6A02                    	push 2
  8745 00006C56 488B0425[18010000]      	mov rax, qword [free_var_35]
  8746                                  	assert_closure(rax)
    42 00006C5E 803805              <1>  cmp byte [%1], %2
    43 00006C61 0F85CDD40000        <1>  jne L_error_incorrect_type
  8747 00006C67 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8748 00006C6B 53                      	push rbx
  8749 00006C6C FF7508                  	push RET_ADDR
  8750 00006C6F 488B7D18                	mov rdi, COUNT
  8751 00006C73 4883C703                	add rdi, 3
  8752 00006C77 48C1E703                	shl rdi, 3
  8753 00006C7B 4801EF                  	add rdi, rbp
  8754 00006C7E 488B6D00                	mov rbp, OLD_RDP
  8755 00006C82 BE00000000              	mov rsi, 0
  8756                                  .L_tc_recycle_frame_loop_5cdd:	 ; start recycle frame loop
  8757 00006C87 4883FE05                	cmp rsi, 5
  8758 00006C8B 7427                    	je .L_tc_recycle_frame_done_5cdd
  8759 00006C8D B904000000              	mov rcx, 4
  8760 00006C92 4829F1                  	sub rcx, rsi
  8761 00006C95 48C1E103                	shl rcx, 3
  8762 00006C99 4801E1                  	add rcx, rsp ; rcx is the address to move
  8763 00006C9C 4889F3                  	mov rbx, rsi
  8764 00006C9F 48C1E303                	shl rbx, 3
  8765 00006CA3 48F7DB                  	neg rbx
  8766 00006CA6 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8767 00006CA9 488B09                  	mov rcx, [rcx]
  8768 00006CAC 48890B                  	mov [rbx], rcx
  8769 00006CAF 48FFC6                  	inc rsi
  8770 00006CB2 EBD3                    	jmp .L_tc_recycle_frame_loop_5cdd
  8771                                  .L_tc_recycle_frame_done_5cdd:	 ; end recycle frame loop
  8772 00006CB4 BB04000000              	mov rbx, 4
  8773 00006CB9 48C1E303                	shl rbx, 3
  8774 00006CBD 48F7DB                  	neg rbx
  8775 00006CC0 4801FB                  	add rbx, rdi
  8776 00006CC3 4889DC                  	mov rsp, rbx
  8777 00006CC6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8778 00006CCA FFE3                    	jmp rbx
  8779 00006CCC E94C010000              	jmp .L_if_end_5693
  8780                                  	.L_if_else_5693:
  8781 00006CD1 488B4528                	mov rax, PARAM(1)
  8782 00006CD5 50                      	push rax
  8783 00006CD6 6A01                    	push 1
  8784 00006CD8 488B0425[40000000]      	mov rax, qword [free_var_8]
  8785                                  	assert_closure(rax)
    42 00006CE0 803805              <1>  cmp byte [%1], %2
    43 00006CE3 0F854BD40000        <1>  jne L_error_incorrect_type
  8786 00006CE9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8787 00006CED 53                      	push rbx
  8788 00006CEE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8789 00006CF2 FFD3                    	call rbx
  8790 00006CF4 483D[02000000]          	cmp rax, sob_boolean_false
  8791 00006CFA 0F84A3000000            	je .L_if_else_5694
  8792 00006D00 488B4528                	mov rax, PARAM(1)
  8793 00006D04 50                      	push rax
  8794 00006D05 488B4520                	mov rax, PARAM(0)
  8795 00006D09 50                      	push rax
  8796 00006D0A 6A01                    	push 1
  8797 00006D0C 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8798                                  	assert_closure(rax)
    42 00006D14 803805              <1>  cmp byte [%1], %2
    43 00006D17 0F8517D40000        <1>  jne L_error_incorrect_type
  8799 00006D1D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8800 00006D21 53                      	push rbx
  8801 00006D22 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8802 00006D26 FFD3                    	call rbx
  8803 00006D28 50                      	push rax
  8804 00006D29 6A02                    	push 2
  8805 00006D2B 488B0425[F8000000]      	mov rax, qword [free_var_31]
  8806                                  	assert_closure(rax)
    42 00006D33 803805              <1>  cmp byte [%1], %2
    43 00006D36 0F85F8D30000        <1>  jne L_error_incorrect_type
  8807 00006D3C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8808 00006D40 53                      	push rbx
  8809 00006D41 FF7508                  	push RET_ADDR
  8810 00006D44 488B7D18                	mov rdi, COUNT
  8811 00006D48 4883C703                	add rdi, 3
  8812 00006D4C 48C1E703                	shl rdi, 3
  8813 00006D50 4801EF                  	add rdi, rbp
  8814 00006D53 488B6D00                	mov rbp, OLD_RDP
  8815 00006D57 BE00000000              	mov rsi, 0
  8816                                  .L_tc_recycle_frame_loop_5cde:	 ; start recycle frame loop
  8817 00006D5C 4883FE05                	cmp rsi, 5
  8818 00006D60 7427                    	je .L_tc_recycle_frame_done_5cde
  8819 00006D62 B904000000              	mov rcx, 4
  8820 00006D67 4829F1                  	sub rcx, rsi
  8821 00006D6A 48C1E103                	shl rcx, 3
  8822 00006D6E 4801E1                  	add rcx, rsp ; rcx is the address to move
  8823 00006D71 4889F3                  	mov rbx, rsi
  8824 00006D74 48C1E303                	shl rbx, 3
  8825 00006D78 48F7DB                  	neg rbx
  8826 00006D7B 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8827 00006D7E 488B09                  	mov rcx, [rcx]
  8828 00006D81 48890B                  	mov [rbx], rcx
  8829 00006D84 48FFC6                  	inc rsi
  8830 00006D87 EBD3                    	jmp .L_tc_recycle_frame_loop_5cde
  8831                                  .L_tc_recycle_frame_done_5cde:	 ; end recycle frame loop
  8832 00006D89 BB04000000              	mov rbx, 4
  8833 00006D8E 48C1E303                	shl rbx, 3
  8834 00006D92 48F7DB                  	neg rbx
  8835 00006D95 4801FB                  	add rbx, rdi
  8836 00006D98 4889DC                  	mov rsp, rbx
  8837 00006D9B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8838 00006D9F FFE3                    	jmp rbx
  8839 00006DA1 EB7A                    	jmp .L_if_end_5694
  8840                                  	.L_if_else_5694:
  8841 00006DA3 6A00                    	push 0
  8842 00006DA5 488B4510                	mov rax, qword [rbp + 8*2]
  8843 00006DA9 488B00                  	mov rax, qword [rax + 8*0]
  8844 00006DAC 488B00                  	mov rax, qword [rax + 8*0]
  8845                                  	assert_closure(rax)
    42 00006DAF 803805              <1>  cmp byte [%1], %2
    43 00006DB2 0F857CD30000        <1>  jne L_error_incorrect_type
  8846 00006DB8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8847 00006DBC 53                      	push rbx
  8848 00006DBD FF7508                  	push RET_ADDR
  8849 00006DC0 488B7D18                	mov rdi, COUNT
  8850 00006DC4 4883C703                	add rdi, 3
  8851 00006DC8 48C1E703                	shl rdi, 3
  8852 00006DCC 4801EF                  	add rdi, rbp
  8853 00006DCF 488B6D00                	mov rbp, OLD_RDP
  8854 00006DD3 BE00000000              	mov rsi, 0
  8855                                  .L_tc_recycle_frame_loop_5cdf:	 ; start recycle frame loop
  8856 00006DD8 4883FE03                	cmp rsi, 3
  8857 00006DDC 7427                    	je .L_tc_recycle_frame_done_5cdf
  8858 00006DDE B902000000              	mov rcx, 2
  8859 00006DE3 4829F1                  	sub rcx, rsi
  8860 00006DE6 48C1E103                	shl rcx, 3
  8861 00006DEA 4801E1                  	add rcx, rsp ; rcx is the address to move
  8862 00006DED 4889F3                  	mov rbx, rsi
  8863 00006DF0 48C1E303                	shl rbx, 3
  8864 00006DF4 48F7DB                  	neg rbx
  8865 00006DF7 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8866 00006DFA 488B09                  	mov rcx, [rcx]
  8867 00006DFD 48890B                  	mov [rbx], rcx
  8868 00006E00 48FFC6                  	inc rsi
  8869 00006E03 EBD3                    	jmp .L_tc_recycle_frame_loop_5cdf
  8870                                  .L_tc_recycle_frame_done_5cdf:	 ; end recycle frame loop
  8871 00006E05 BB02000000              	mov rbx, 2
  8872 00006E0A 48C1E303                	shl rbx, 3
  8873 00006E0E 48F7DB                  	neg rbx
  8874 00006E11 4801FB                  	add rbx, rdi
  8875 00006E14 4889DC                  	mov rsp, rbx
  8876 00006E17 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8877 00006E1B FFE3                    	jmp rbx
  8878                                  	.L_if_end_5694:
  8879                                  	.L_if_end_5693:
  8880 00006E1D E9AD020000              	jmp .L_if_end_5692
  8881                                  	.L_if_else_5692:
  8882 00006E22 488B4520                	mov rax, PARAM(0)
  8883 00006E26 50                      	push rax
  8884 00006E27 6A01                    	push 1
  8885 00006E29 488B0425[40000000]      	mov rax, qword [free_var_8]
  8886                                  	assert_closure(rax)
    42 00006E31 803805              <1>  cmp byte [%1], %2
    43 00006E34 0F85FAD20000        <1>  jne L_error_incorrect_type
  8887 00006E3A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8888 00006E3E 53                      	push rbx
  8889 00006E3F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8890 00006E43 FFD3                    	call rbx
  8891 00006E45 483D[02000000]          	cmp rax, sob_boolean_false
  8892 00006E4B 0F8404020000            	je .L_if_else_5695
  8893 00006E51 488B4528                	mov rax, PARAM(1)
  8894 00006E55 50                      	push rax
  8895 00006E56 6A01                    	push 1
  8896 00006E58 488B0425[48000000]      	mov rax, qword [free_var_9]
  8897                                  	assert_closure(rax)
    42 00006E60 803805              <1>  cmp byte [%1], %2
    43 00006E63 0F85CBD20000        <1>  jne L_error_incorrect_type
  8898 00006E69 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8899 00006E6D 53                      	push rbx
  8900 00006E6E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8901 00006E72 FFD3                    	call rbx
  8902 00006E74 483D[02000000]          	cmp rax, sob_boolean_false
  8903 00006E7A 0F84A6000000            	je .L_if_else_5696
  8904 00006E80 488B4528                	mov rax, PARAM(1)
  8905 00006E84 50                      	push rax
  8906 00006E85 6A01                    	push 1
  8907 00006E87 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8908                                  	assert_closure(rax)
    42 00006E8F 803805              <1>  cmp byte [%1], %2
    43 00006E92 0F859CD20000        <1>  jne L_error_incorrect_type
  8909 00006E98 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8910 00006E9C 53                      	push rbx
  8911 00006E9D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8912 00006EA1 FFD3                    	call rbx
  8913 00006EA3 50                      	push rax
  8914 00006EA4 488B4520                	mov rax, PARAM(0)
  8915 00006EA8 50                      	push rax
  8916 00006EA9 6A02                    	push 2
  8917 00006EAB 488B0425[F8000000]      	mov rax, qword [free_var_31]
  8918                                  	assert_closure(rax)
    42 00006EB3 803805              <1>  cmp byte [%1], %2
    43 00006EB6 0F8578D20000        <1>  jne L_error_incorrect_type
  8919 00006EBC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8920 00006EC0 53                      	push rbx
  8921 00006EC1 FF7508                  	push RET_ADDR
  8922 00006EC4 488B7D18                	mov rdi, COUNT
  8923 00006EC8 4883C703                	add rdi, 3
  8924 00006ECC 48C1E703                	shl rdi, 3
  8925 00006ED0 4801EF                  	add rdi, rbp
  8926 00006ED3 488B6D00                	mov rbp, OLD_RDP
  8927 00006ED7 BE00000000              	mov rsi, 0
  8928                                  .L_tc_recycle_frame_loop_5ce0:	 ; start recycle frame loop
  8929 00006EDC 4883FE05                	cmp rsi, 5
  8930 00006EE0 7427                    	je .L_tc_recycle_frame_done_5ce0
  8931 00006EE2 B904000000              	mov rcx, 4
  8932 00006EE7 4829F1                  	sub rcx, rsi
  8933 00006EEA 48C1E103                	shl rcx, 3
  8934 00006EEE 4801E1                  	add rcx, rsp ; rcx is the address to move
  8935 00006EF1 4889F3                  	mov rbx, rsi
  8936 00006EF4 48C1E303                	shl rbx, 3
  8937 00006EF8 48F7DB                  	neg rbx
  8938 00006EFB 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8939 00006EFE 488B09                  	mov rcx, [rcx]
  8940 00006F01 48890B                  	mov [rbx], rcx
  8941 00006F04 48FFC6                  	inc rsi
  8942 00006F07 EBD3                    	jmp .L_tc_recycle_frame_loop_5ce0
  8943                                  .L_tc_recycle_frame_done_5ce0:	 ; end recycle frame loop
  8944 00006F09 BB04000000              	mov rbx, 4
  8945 00006F0E 48C1E303                	shl rbx, 3
  8946 00006F12 48F7DB                  	neg rbx
  8947 00006F15 4801FB                  	add rbx, rdi
  8948 00006F18 4889DC                  	mov rsp, rbx
  8949 00006F1B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8950 00006F1F FFE3                    	jmp rbx
  8951 00006F21 E92D010000              	jmp .L_if_end_5696
  8952                                  	.L_if_else_5696:
  8953 00006F26 488B4528                	mov rax, PARAM(1)
  8954 00006F2A 50                      	push rax
  8955 00006F2B 6A01                    	push 1
  8956 00006F2D 488B0425[40000000]      	mov rax, qword [free_var_8]
  8957                                  	assert_closure(rax)
    42 00006F35 803805              <1>  cmp byte [%1], %2
    43 00006F38 0F85F6D10000        <1>  jne L_error_incorrect_type
  8958 00006F3E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8959 00006F42 53                      	push rbx
  8960 00006F43 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8961 00006F47 FFD3                    	call rbx
  8962 00006F49 483D[02000000]          	cmp rax, sob_boolean_false
  8963 00006F4F 0F8484000000            	je .L_if_else_5697
  8964 00006F55 488B4528                	mov rax, PARAM(1)
  8965 00006F59 50                      	push rax
  8966 00006F5A 488B4520                	mov rax, PARAM(0)
  8967 00006F5E 50                      	push rax
  8968 00006F5F 6A02                    	push 2
  8969 00006F61 488B0425[F8000000]      	mov rax, qword [free_var_31]
  8970                                  	assert_closure(rax)
    42 00006F69 803805              <1>  cmp byte [%1], %2
    43 00006F6C 0F85C2D10000        <1>  jne L_error_incorrect_type
  8971 00006F72 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8972 00006F76 53                      	push rbx
  8973 00006F77 FF7508                  	push RET_ADDR
  8974 00006F7A 488B7D18                	mov rdi, COUNT
  8975 00006F7E 4883C703                	add rdi, 3
  8976 00006F82 48C1E703                	shl rdi, 3
  8977 00006F86 4801EF                  	add rdi, rbp
  8978 00006F89 488B6D00                	mov rbp, OLD_RDP
  8979 00006F8D BE00000000              	mov rsi, 0
  8980                                  .L_tc_recycle_frame_loop_5ce1:	 ; start recycle frame loop
  8981 00006F92 4883FE05                	cmp rsi, 5
  8982 00006F96 7427                    	je .L_tc_recycle_frame_done_5ce1
  8983 00006F98 B904000000              	mov rcx, 4
  8984 00006F9D 4829F1                  	sub rcx, rsi
  8985 00006FA0 48C1E103                	shl rcx, 3
  8986 00006FA4 4801E1                  	add rcx, rsp ; rcx is the address to move
  8987 00006FA7 4889F3                  	mov rbx, rsi
  8988 00006FAA 48C1E303                	shl rbx, 3
  8989 00006FAE 48F7DB                  	neg rbx
  8990 00006FB1 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8991 00006FB4 488B09                  	mov rcx, [rcx]
  8992 00006FB7 48890B                  	mov [rbx], rcx
  8993 00006FBA 48FFC6                  	inc rsi
  8994 00006FBD EBD3                    	jmp .L_tc_recycle_frame_loop_5ce1
  8995                                  .L_tc_recycle_frame_done_5ce1:	 ; end recycle frame loop
  8996 00006FBF BB04000000              	mov rbx, 4
  8997 00006FC4 48C1E303                	shl rbx, 3
  8998 00006FC8 48F7DB                  	neg rbx
  8999 00006FCB 4801FB                  	add rbx, rdi
  9000 00006FCE 4889DC                  	mov rsp, rbx
  9001 00006FD1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9002 00006FD5 FFE3                    	jmp rbx
  9003 00006FD7 EB7A                    	jmp .L_if_end_5697
  9004                                  	.L_if_else_5697:
  9005 00006FD9 6A00                    	push 0
  9006 00006FDB 488B4510                	mov rax, qword [rbp + 8*2]
  9007 00006FDF 488B00                  	mov rax, qword [rax + 8*0]
  9008 00006FE2 488B00                  	mov rax, qword [rax + 8*0]
  9009                                  	assert_closure(rax)
    42 00006FE5 803805              <1>  cmp byte [%1], %2
    43 00006FE8 0F8546D10000        <1>  jne L_error_incorrect_type
  9010 00006FEE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9011 00006FF2 53                      	push rbx
  9012 00006FF3 FF7508                  	push RET_ADDR
  9013 00006FF6 488B7D18                	mov rdi, COUNT
  9014 00006FFA 4883C703                	add rdi, 3
  9015 00006FFE 48C1E703                	shl rdi, 3
  9016 00007002 4801EF                  	add rdi, rbp
  9017 00007005 488B6D00                	mov rbp, OLD_RDP
  9018 00007009 BE00000000              	mov rsi, 0
  9019                                  .L_tc_recycle_frame_loop_5ce2:	 ; start recycle frame loop
  9020 0000700E 4883FE03                	cmp rsi, 3
  9021 00007012 7427                    	je .L_tc_recycle_frame_done_5ce2
  9022 00007014 B902000000              	mov rcx, 2
  9023 00007019 4829F1                  	sub rcx, rsi
  9024 0000701C 48C1E103                	shl rcx, 3
  9025 00007020 4801E1                  	add rcx, rsp ; rcx is the address to move
  9026 00007023 4889F3                  	mov rbx, rsi
  9027 00007026 48C1E303                	shl rbx, 3
  9028 0000702A 48F7DB                  	neg rbx
  9029 0000702D 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9030 00007030 488B09                  	mov rcx, [rcx]
  9031 00007033 48890B                  	mov [rbx], rcx
  9032 00007036 48FFC6                  	inc rsi
  9033 00007039 EBD3                    	jmp .L_tc_recycle_frame_loop_5ce2
  9034                                  .L_tc_recycle_frame_done_5ce2:	 ; end recycle frame loop
  9035 0000703B BB02000000              	mov rbx, 2
  9036 00007040 48C1E303                	shl rbx, 3
  9037 00007044 48F7DB                  	neg rbx
  9038 00007047 4801FB                  	add rbx, rdi
  9039 0000704A 4889DC                  	mov rsp, rbx
  9040 0000704D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9041 00007051 FFE3                    	jmp rbx
  9042                                  	.L_if_end_5697:
  9043                                  	.L_if_end_5696:
  9044 00007053 EB7A                    	jmp .L_if_end_5695
  9045                                  	.L_if_else_5695:
  9046 00007055 6A00                    	push 0
  9047 00007057 488B4510                	mov rax, qword [rbp + 8*2]
  9048 0000705B 488B00                  	mov rax, qword [rax + 8*0]
  9049 0000705E 488B00                  	mov rax, qword [rax + 8*0]
  9050                                  	assert_closure(rax)
    42 00007061 803805              <1>  cmp byte [%1], %2
    43 00007064 0F85CAD00000        <1>  jne L_error_incorrect_type
  9051 0000706A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9052 0000706E 53                      	push rbx
  9053 0000706F FF7508                  	push RET_ADDR
  9054 00007072 488B7D18                	mov rdi, COUNT
  9055 00007076 4883C703                	add rdi, 3
  9056 0000707A 48C1E703                	shl rdi, 3
  9057 0000707E 4801EF                  	add rdi, rbp
  9058 00007081 488B6D00                	mov rbp, OLD_RDP
  9059 00007085 BE00000000              	mov rsi, 0
  9060                                  .L_tc_recycle_frame_loop_5ce3:	 ; start recycle frame loop
  9061 0000708A 4883FE03                	cmp rsi, 3
  9062 0000708E 7427                    	je .L_tc_recycle_frame_done_5ce3
  9063 00007090 B902000000              	mov rcx, 2
  9064 00007095 4829F1                  	sub rcx, rsi
  9065 00007098 48C1E103                	shl rcx, 3
  9066 0000709C 4801E1                  	add rcx, rsp ; rcx is the address to move
  9067 0000709F 4889F3                  	mov rbx, rsi
  9068 000070A2 48C1E303                	shl rbx, 3
  9069 000070A6 48F7DB                  	neg rbx
  9070 000070A9 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9071 000070AC 488B09                  	mov rcx, [rcx]
  9072 000070AF 48890B                  	mov [rbx], rcx
  9073 000070B2 48FFC6                  	inc rsi
  9074 000070B5 EBD3                    	jmp .L_tc_recycle_frame_loop_5ce3
  9075                                  .L_tc_recycle_frame_done_5ce3:	 ; end recycle frame loop
  9076 000070B7 BB02000000              	mov rbx, 2
  9077 000070BC 48C1E303                	shl rbx, 3
  9078 000070C0 48F7DB                  	neg rbx
  9079 000070C3 4801FB                  	add rbx, rdi
  9080 000070C6 4889DC                  	mov rsp, rbx
  9081 000070C9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9082 000070CD FFE3                    	jmp rbx
  9083                                  	.L_if_end_5695:
  9084                                  	.L_if_end_5692:
  9085 000070CF C9                      	leave
  9086 000070D0 C22000                  	ret 8 * (2 + 2)
  9087                                  .L_lambda_simple_end_4f63:	; new closure is in rax
  9088 000070D3 50                      	push rax
  9089 000070D4 6A01                    	push 1
  9090 000070D6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9091 000070DB E8D4B70000              	call malloc
  9092 000070E0 50                      	push rax
  9093 000070E1 BF08000000              	mov rdi, 8 * 1	; new rib
  9094 000070E6 E8C9B70000              	call malloc
  9095 000070EB 50                      	push rax
  9096 000070EC BF10000000              	mov rdi, 8 * 2	; extended env
  9097 000070F1 E8BEB70000              	call malloc
  9098 000070F6 488B7D10                	mov rdi, ENV
  9099 000070FA BE00000000              	mov rsi, 0
  9100 000070FF BA01000000              	mov rdx, 1
  9101                                  .L_lambda_simple_env_loop_4f64:	; ext_env[i + 1] <-- env[i]
  9102 00007104 4883FE01                	cmp rsi, 1
  9103 00007108 7410                    	je .L_lambda_simple_env_end_4f64
  9104 0000710A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  9105 0000710E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9106 00007112 48FFC6                  	inc rsi
  9107 00007115 48FFC2                  	inc rdx
  9108 00007118 EBEA                    	jmp .L_lambda_simple_env_loop_4f64
  9109                                  .L_lambda_simple_env_end_4f64:
  9110 0000711A 5B                      	pop rbx
  9111 0000711B BE00000000              	mov rsi, 0
  9112                                  .L_lambda_simple_params_loop_4f64:	; copy params
  9113 00007120 4883FE01                	cmp rsi, 1
  9114 00007124 740E                    	je .L_lambda_simple_params_end_4f64
  9115 00007126 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9116 0000712B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9117 0000712F 48FFC6                  	inc rsi
  9118 00007132 EBEC                    	jmp .L_lambda_simple_params_loop_4f64
  9119                                  .L_lambda_simple_params_end_4f64:
  9120 00007134 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9121 00007137 4889C3                  	mov rbx, rax
  9122 0000713A 58                      	pop rax
  9123 0000713B C60005                  	mov byte [rax], T_closure
  9124 0000713E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9125 00007142 48C74009[4F710000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f64
  9126 0000714A E912040000              	jmp .L_lambda_simple_end_4f64
  9127                                  .L_lambda_simple_code_4f64:	; lambda-simple body
  9128 0000714F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9129 00007155 740B                    	je .L_lambda_simple_arity_check_ok_4f64
  9130 00007157 FF742410                	push qword [rsp + 8 * 2]
  9131 0000715B 6A01                    	push 1
  9132 0000715D E90BB70000              	jmp L_error_incorrect_arity_simple
  9133                                  .L_lambda_simple_arity_check_ok_4f64:
  9134 00007162 C8000000                	enter 0, 0
  9135 00007166 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9136 0000716B E844B70000              	call malloc
  9137 00007170 50                      	push rax
  9138 00007171 BF08000000              	mov rdi, 8 * 1	; new rib
  9139 00007176 E839B70000              	call malloc
  9140 0000717B 50                      	push rax
  9141 0000717C BF18000000              	mov rdi, 8 * 3	; extended env
  9142 00007181 E82EB70000              	call malloc
  9143 00007186 488B7D10                	mov rdi, ENV
  9144 0000718A BE00000000              	mov rsi, 0
  9145 0000718F BA01000000              	mov rdx, 1
  9146                                  .L_lambda_opt_env_loop_0c8f:	; ext_env[i + 1] <-- env[i]
  9147 00007194 4883FE02                	cmp rsi, 2
  9148 00007198 7410                    	je .L_lambda_opt_env_end_0c8f
  9149 0000719A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9150 0000719E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9151 000071A2 48FFC6                  	inc rsi
  9152 000071A5 48FFC2                  	inc rdx
  9153 000071A8 EBEA                    	jmp .L_lambda_opt_env_loop_0c8f
  9154                                  .L_lambda_opt_env_end_0c8f:
  9155 000071AA 5B                      	pop rbx
  9156 000071AB BE00000000              	mov rsi, 0
  9157                                  .L_lambda_opt_params_loop_0c8f:	; copy params
  9158 000071B0 4883FE01                	cmp rsi, 1
  9159 000071B4 740E                    	je .L_lambda_opt_params_end_0c8f
  9160 000071B6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9161 000071BB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9162 000071BF 48FFC6                  	inc rsi
  9163 000071C2 EBEC                    	jmp .L_lambda_opt_params_loop_0c8f
  9164                                  .L_lambda_opt_params_end_0c8f:
  9165 000071C4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9166 000071C7 4889C3                  	mov rbx, rax
  9167 000071CA 58                      	pop rax
  9168 000071CB C60005                  	mov byte [rax], T_closure
  9169 000071CE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9170 000071D2 48C74009[DF710000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c8f
  9171 000071DA E97E030000              	jmp .L_lambda_opt_end_0c8f
  9172                                  .L_lambda_opt_code_0c8f:	; lambda-opt body
  9173 000071DF 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  9174 000071E4 4889FB                  	mov rbx, rdi
  9175 000071E7 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  9176 000071EB 4883FB00                	cmp rbx, 0
  9177 000071EF 7F45                    	jg .L_lambda_opt_arity_check_more_0c8f
  9178                                  .L_lambda_opt_arity_check_exact_0c8f:	 ; if params in opt is exact
  9179 000071F1 4883EC08                	sub rsp, 8
  9180 000071F5 BE00000000              	mov rsi, 0 ; index
  9181                                  .L_lambda_opt_stack_enlarge_loop_0c8f:	 ; stack loop enlarge start
  9182 000071FA 4883FE04                	cmp rsi, 4
  9183 000071FE 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c8f
  9184 00007200 4889F7                  	mov rdi, rsi
  9185 00007203 48FFC7                  	inc rdi
  9186 00007206 48C1E703                	shl rdi, 3
  9187 0000720A 4801E7                  	add rdi, rsp
  9188 0000720D 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  9189 00007210 4883EB08                	sub rbx, 8
  9190 00007214 488B3F                  	mov rdi, [rdi]
  9191 00007217 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  9192 0000721A 48FFC6                  	inc rsi
  9193 0000721D EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c8f
  9194                                  .L_lambda_opt_stack_enlarge_loop_exit_0c8f:	 ; end of stack enlarge loop
  9195 0000721F 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  9195 00007224 [01000000]         
  9196 00007228 48C744241002000000      	mov qword [rsp + 2*8], 2
  9197 00007231 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c8f
  9198                                  .L_lambda_opt_arity_check_more_0c8f:	 ; if params in opt is more
  9199 00007236 48B8-                   	mov rax, sob_nil
  9199 00007238 [0100000000000000] 
  9200 00007240 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  9201 00007243 48FFCE                  	dec rsi
  9202                                  .L_lambda_opt_list_create_loop_0c8f:	; start of list creation loop
  9203 00007246 4883FEFF                	cmp rsi, -1
  9204 0000724A 7422                    	je .L_lambda_opt_list_create_loop_exit_0c8f
  9205 0000724C 488D4E04                	lea rcx, [rsi + (3 + 1)]
  9206 00007250 48C1E103                	shl rcx, 3
  9207 00007254 4801E1                  	add rcx, rsp
  9208 00007257 488B09                  	mov rcx, [rcx]
  9209 0000725A 56                      	push rsi ; save params
  9210 0000725B 53                      	push rbx
  9211                                  
  9212 0000725C 50                      	push rax ; cdr
  9213 0000725D 51                      	push rcx ; car
  9214 0000725E 6A02                    	push qword 2 ; push num of args
  9215 00007260 6A01                    	push qword 1 ; push garbage as env
  9216 00007262 E8D4BF0000              	call L_code_ptr_cons
  9217                                  
  9218 00007267 5B                      	pop rbx ; restore params
  9219 00007268 5E                      	pop rsi
  9220 00007269 48FFCE                  	dec rsi
  9221 0000726C EBD8                    	jmp .L_lambda_opt_list_create_loop_0c8f
  9222                                  .L_lambda_opt_list_create_loop_exit_0c8f:	; end of list creation loop
  9223 0000726E 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  9224 00007273 4883C302                	add rbx, 2
  9225 00007277 4889DF                  	mov rdi, rbx
  9226 0000727A 48C1E703                	shl rdi,3
  9227 0000727E 4801E7                  	add rdi, rsp
  9228 00007281 488907                  	mov [rdi], rax
  9229 00007284 BE00000000              	mov rsi, 0 ;index
  9230                                  .L_lambda_opt_stack_shrink_loop_0c8f:	; start of stack shrink loop
  9231 00007289 4883FE04                	cmp rsi, 4
  9232 0000728D 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c8f
  9233 0000728F BF03000000              	mov rdi, 3
  9234 00007294 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  9235 00007297 4889D9                  	mov rcx, rbx
  9236 0000729A 4829F1                  	sub rcx, rsi
  9237 0000729D 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  9238 000072A0 4889FA                  	mov rdx, rdi
  9239 000072A3 48C1E203                	shl rdx, 3
  9240 000072A7 4801E2                  	add rdx, rsp
  9241 000072AA 48C1E103                	shl rcx, 3
  9242 000072AE 4801E1                  	add rcx, rsp
  9243 000072B1 488B12                  	mov rdx, [rdx]
  9244 000072B4 488911                  	mov [rcx], rdx
  9245 000072B7 48FFC6                  	inc rsi
  9246 000072BA EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c8f
  9247                                  .L_lambda_opt_stack_shrink_loop_exit_0c8f:	; end of stack shrink loop
  9248 000072BC 4883EB02                	sub rbx, 2 ; rbx has number of args
  9249 000072C0 4883EB02                	sub rbx, 2
  9250 000072C4 48C1E303                	shl rbx, 3
  9251 000072C8 4801DC                  	add rsp, rbx
  9252 000072CB 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  9253                                  .L_lambda_opt_stack_adjusted_0c8f:
  9254 000072D4 C8000000                	enter 0, 0
  9255 000072D8 488B4528                	mov rax, PARAM(1)
  9256 000072DC 50                      	push rax
  9257 000072DD 6A01                    	push 1
  9258 000072DF 488B0425[00000000]      	mov rax, qword [free_var_0]
  9259                                  	assert_closure(rax)
    42 000072E7 803805              <1>  cmp byte [%1], %2
    43 000072EA 0F8544CE0000        <1>  jne L_error_incorrect_type
  9260 000072F0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9261 000072F4 53                      	push rbx
  9262 000072F5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9263 000072F9 FFD3                    	call rbx
  9264 000072FB 483D[02000000]          	cmp rax, sob_boolean_false
  9265 00007301 0F848D000000            	je .L_if_else_5698
  9266 00007307 488B4520                	mov rax, PARAM(0)
  9267 0000730B 50                      	push rax
  9268 0000730C 488D0425[20000000]      	lea rax, [32 + L_constants]
  9269 00007314 50                      	push rax
  9270 00007315 6A02                    	push 2
  9271 00007317 488B4510                	mov rax, qword [rbp + 8*2]
  9272 0000731B 488B00                  	mov rax, qword [rax + 8*0]
  9273 0000731E 488B00                  	mov rax, qword [rax + 8*0]
  9274                                  	assert_closure(rax)
    42 00007321 803805              <1>  cmp byte [%1], %2
    43 00007324 0F850ACE0000        <1>  jne L_error_incorrect_type
  9275 0000732A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9276 0000732E 53                      	push rbx
  9277 0000732F FF7508                  	push RET_ADDR
  9278 00007332 488B7D18                	mov rdi, COUNT
  9279 00007336 4883C703                	add rdi, 3
  9280 0000733A 48C1E703                	shl rdi, 3
  9281 0000733E 4801EF                  	add rdi, rbp
  9282 00007341 488B6D00                	mov rbp, OLD_RDP
  9283 00007345 BE00000000              	mov rsi, 0
  9284                                  .L_tc_recycle_frame_loop_5ce4:	 ; start recycle frame loop
  9285 0000734A 4883FE05                	cmp rsi, 5
  9286 0000734E 7427                    	je .L_tc_recycle_frame_done_5ce4
  9287 00007350 B904000000              	mov rcx, 4
  9288 00007355 4829F1                  	sub rcx, rsi
  9289 00007358 48C1E103                	shl rcx, 3
  9290 0000735C 4801E1                  	add rcx, rsp ; rcx is the address to move
  9291 0000735F 4889F3                  	mov rbx, rsi
  9292 00007362 48C1E303                	shl rbx, 3
  9293 00007366 48F7DB                  	neg rbx
  9294 00007369 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9295 0000736C 488B09                  	mov rcx, [rcx]
  9296 0000736F 48890B                  	mov [rbx], rcx
  9297 00007372 48FFC6                  	inc rsi
  9298 00007375 EBD3                    	jmp .L_tc_recycle_frame_loop_5ce4
  9299                                  .L_tc_recycle_frame_done_5ce4:	 ; end recycle frame loop
  9300 00007377 BB04000000              	mov rbx, 4
  9301 0000737C 48C1E303                	shl rbx, 3
  9302 00007380 48F7DB                  	neg rbx
  9303 00007383 4801FB                  	add rbx, rdi
  9304 00007386 4889DC                  	mov rsp, rbx
  9305 00007389 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9306 0000738D FFE3                    	jmp rbx
  9307 0000738F E9C5010000              	jmp .L_if_end_5698
  9308                                  	.L_if_else_5698:
  9309 00007394 488B4528                	mov rax, PARAM(1)
  9310 00007398 50                      	push rax
  9311 00007399 488D0425[20000000]      	lea rax, [32 + L_constants]
  9312 000073A1 50                      	push rax
  9313 000073A2 488B0425[08030000]      	mov rax, qword [free_var_97]
  9314 000073AA 50                      	push rax
  9315 000073AB 6A03                    	push 3
  9316 000073AD 488B0425[F8020000]      	mov rax, qword [free_var_95]
  9317                                  	assert_closure(rax)
    42 000073B5 803805              <1>  cmp byte [%1], %2
    43 000073B8 0F8576CD0000        <1>  jne L_error_incorrect_type
  9318 000073BE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9319 000073C2 53                      	push rbx
  9320 000073C3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9321 000073C7 FFD3                    	call rbx
  9322 000073C9 50                      	push rax
  9323 000073CA 6A01                    	push 1
  9324 000073CC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9325 000073D1 E8DEB40000              	call malloc
  9326 000073D6 50                      	push rax
  9327 000073D7 BF10000000              	mov rdi, 8 * 2	; new rib
  9328 000073DC E8D3B40000              	call malloc
  9329 000073E1 50                      	push rax
  9330 000073E2 BF20000000              	mov rdi, 8 * 4	; extended env
  9331 000073E7 E8C8B40000              	call malloc
  9332 000073EC 488B7D10                	mov rdi, ENV
  9333 000073F0 BE00000000              	mov rsi, 0
  9334 000073F5 BA01000000              	mov rdx, 1
  9335                                  .L_lambda_simple_env_loop_4f65:	; ext_env[i + 1] <-- env[i]
  9336 000073FA 4883FE03                	cmp rsi, 3
  9337 000073FE 7410                    	je .L_lambda_simple_env_end_4f65
  9338 00007400 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  9339 00007404 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9340 00007408 48FFC6                  	inc rsi
  9341 0000740B 48FFC2                  	inc rdx
  9342 0000740E EBEA                    	jmp .L_lambda_simple_env_loop_4f65
  9343                                  .L_lambda_simple_env_end_4f65:
  9344 00007410 5B                      	pop rbx
  9345 00007411 BE00000000              	mov rsi, 0
  9346                                  .L_lambda_simple_params_loop_4f65:	; copy params
  9347 00007416 4883FE02                	cmp rsi, 2
  9348 0000741A 740E                    	je .L_lambda_simple_params_end_4f65
  9349 0000741C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9350 00007421 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9351 00007425 48FFC6                  	inc rsi
  9352 00007428 EBEC                    	jmp .L_lambda_simple_params_loop_4f65
  9353                                  .L_lambda_simple_params_end_4f65:
  9354 0000742A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9355 0000742D 4889C3                  	mov rbx, rax
  9356 00007430 58                      	pop rax
  9357 00007431 C60005                  	mov byte [rax], T_closure
  9358 00007434 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9359 00007438 48C74009[45740000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f65
  9360 00007440 E9A6000000              	jmp .L_lambda_simple_end_4f65
  9361                                  .L_lambda_simple_code_4f65:	; lambda-simple body
  9362 00007445 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9363 0000744B 740B                    	je .L_lambda_simple_arity_check_ok_4f65
  9364 0000744D FF742410                	push qword [rsp + 8 * 2]
  9365 00007451 6A01                    	push 1
  9366 00007453 E915B40000              	jmp L_error_incorrect_arity_simple
  9367                                  .L_lambda_simple_arity_check_ok_4f65:
  9368 00007458 C8000000                	enter 0, 0
  9369 0000745C 488B4520                	mov rax, PARAM(0)
  9370 00007460 50                      	push rax
  9371 00007461 488B4510                	mov rax, qword [rbp + 8*2]
  9372 00007465 488B00                  	mov rax, qword [rax + 8*0]
  9373 00007468 488B00                  	mov rax, qword [rax + 8*0]
  9374 0000746B 50                      	push rax
  9375 0000746C 6A02                    	push 2
  9376 0000746E 488B4510                	mov rax, qword [rbp + 8*2]
  9377 00007472 488B4008                	mov rax, qword [rax + 8*1]
  9378 00007476 488B00                  	mov rax, qword [rax + 8*0]
  9379                                  	assert_closure(rax)
    42 00007479 803805              <1>  cmp byte [%1], %2
    43 0000747C 0F85B2CC0000        <1>  jne L_error_incorrect_type
  9380 00007482 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9381 00007486 53                      	push rbx
  9382 00007487 FF7508                  	push RET_ADDR
  9383 0000748A 488B7D18                	mov rdi, COUNT
  9384 0000748E 4883C703                	add rdi, 3
  9385 00007492 48C1E703                	shl rdi, 3
  9386 00007496 4801EF                  	add rdi, rbp
  9387 00007499 488B6D00                	mov rbp, OLD_RDP
  9388 0000749D BE00000000              	mov rsi, 0
  9389                                  .L_tc_recycle_frame_loop_5ce6:	 ; start recycle frame loop
  9390 000074A2 4883FE05                	cmp rsi, 5
  9391 000074A6 7427                    	je .L_tc_recycle_frame_done_5ce6
  9392 000074A8 B904000000              	mov rcx, 4
  9393 000074AD 4829F1                  	sub rcx, rsi
  9394 000074B0 48C1E103                	shl rcx, 3
  9395 000074B4 4801E1                  	add rcx, rsp ; rcx is the address to move
  9396 000074B7 4889F3                  	mov rbx, rsi
  9397 000074BA 48C1E303                	shl rbx, 3
  9398 000074BE 48F7DB                  	neg rbx
  9399 000074C1 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9400 000074C4 488B09                  	mov rcx, [rcx]
  9401 000074C7 48890B                  	mov [rbx], rcx
  9402 000074CA 48FFC6                  	inc rsi
  9403 000074CD EBD3                    	jmp .L_tc_recycle_frame_loop_5ce6
  9404                                  .L_tc_recycle_frame_done_5ce6:	 ; end recycle frame loop
  9405 000074CF BB04000000              	mov rbx, 4
  9406 000074D4 48C1E303                	shl rbx, 3
  9407 000074D8 48F7DB                  	neg rbx
  9408 000074DB 4801FB                  	add rbx, rdi
  9409 000074DE 4889DC                  	mov rsp, rbx
  9410 000074E1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9411 000074E5 FFE3                    	jmp rbx
  9412 000074E7 C9                      	leave
  9413 000074E8 C21800                  	ret 8 * (2 + 1)
  9414                                  .L_lambda_simple_end_4f65:	; new closure is in rax
  9415                                  	assert_closure(rax)
    42 000074EB 803805              <1>  cmp byte [%1], %2
    43 000074EE 0F8540CC0000        <1>  jne L_error_incorrect_type
  9416 000074F4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9417 000074F8 53                      	push rbx
  9418 000074F9 FF7508                  	push RET_ADDR
  9419 000074FC 488B7D18                	mov rdi, COUNT
  9420 00007500 4883C703                	add rdi, 3
  9421 00007504 48C1E703                	shl rdi, 3
  9422 00007508 4801EF                  	add rdi, rbp
  9423 0000750B 488B6D00                	mov rbp, OLD_RDP
  9424 0000750F BE00000000              	mov rsi, 0
  9425                                  .L_tc_recycle_frame_loop_5ce5:	 ; start recycle frame loop
  9426 00007514 4883FE04                	cmp rsi, 4
  9427 00007518 7427                    	je .L_tc_recycle_frame_done_5ce5
  9428 0000751A B903000000              	mov rcx, 3
  9429 0000751F 4829F1                  	sub rcx, rsi
  9430 00007522 48C1E103                	shl rcx, 3
  9431 00007526 4801E1                  	add rcx, rsp ; rcx is the address to move
  9432 00007529 4889F3                  	mov rbx, rsi
  9433 0000752C 48C1E303                	shl rbx, 3
  9434 00007530 48F7DB                  	neg rbx
  9435 00007533 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9436 00007536 488B09                  	mov rcx, [rcx]
  9437 00007539 48890B                  	mov [rbx], rcx
  9438 0000753C 48FFC6                  	inc rsi
  9439 0000753F EBD3                    	jmp .L_tc_recycle_frame_loop_5ce5
  9440                                  .L_tc_recycle_frame_done_5ce5:	 ; end recycle frame loop
  9441 00007541 BB03000000              	mov rbx, 3
  9442 00007546 48C1E303                	shl rbx, 3
  9443 0000754A 48F7DB                  	neg rbx
  9444 0000754D 4801FB                  	add rbx, rdi
  9445 00007550 4889DC                  	mov rsp, rbx
  9446 00007553 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9447 00007557 FFE3                    	jmp rbx
  9448                                  	.L_if_end_5698:
  9449 00007559 C9                      	leave
  9450 0000755A C22000                  	ret AND_KILL_FRAME(2)
  9451                                  .L_lambda_opt_end_0c8f:	; new closure is in rax
  9452 0000755D C9                      	leave
  9453 0000755E C21800                  	ret 8 * (2 + 1)
  9454                                  .L_lambda_simple_end_4f64:	; new closure is in rax
  9455                                  	assert_closure(rax)
    42 00007561 803805              <1>  cmp byte [%1], %2
    43 00007564 0F85CACB0000        <1>  jne L_error_incorrect_type
  9456 0000756A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9457 0000756E 53                      	push rbx
  9458 0000756F FF7508                  	push RET_ADDR
  9459 00007572 488B7D18                	mov rdi, COUNT
  9460 00007576 4883C703                	add rdi, 3
  9461 0000757A 48C1E703                	shl rdi, 3
  9462 0000757E 4801EF                  	add rdi, rbp
  9463 00007581 488B6D00                	mov rbp, OLD_RDP
  9464 00007585 BE00000000              	mov rsi, 0
  9465                                  .L_tc_recycle_frame_loop_5cdc:	 ; start recycle frame loop
  9466 0000758A 4883FE04                	cmp rsi, 4
  9467 0000758E 7427                    	je .L_tc_recycle_frame_done_5cdc
  9468 00007590 B903000000              	mov rcx, 3
  9469 00007595 4829F1                  	sub rcx, rsi
  9470 00007598 48C1E103                	shl rcx, 3
  9471 0000759C 4801E1                  	add rcx, rsp ; rcx is the address to move
  9472 0000759F 4889F3                  	mov rbx, rsi
  9473 000075A2 48C1E303                	shl rbx, 3
  9474 000075A6 48F7DB                  	neg rbx
  9475 000075A9 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9476 000075AC 488B09                  	mov rcx, [rcx]
  9477 000075AF 48890B                  	mov [rbx], rcx
  9478 000075B2 48FFC6                  	inc rsi
  9479 000075B5 EBD3                    	jmp .L_tc_recycle_frame_loop_5cdc
  9480                                  .L_tc_recycle_frame_done_5cdc:	 ; end recycle frame loop
  9481 000075B7 BB03000000              	mov rbx, 3
  9482 000075BC 48C1E303                	shl rbx, 3
  9483 000075C0 48F7DB                  	neg rbx
  9484 000075C3 4801FB                  	add rbx, rdi
  9485 000075C6 4889DC                  	mov rsp, rbx
  9486 000075C9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9487 000075CD FFE3                    	jmp rbx
  9488 000075CF C9                      	leave
  9489 000075D0 C21800                  	ret 8 * (2 + 1)
  9490                                  .L_lambda_simple_end_4f62:	; new closure is in rax
  9491                                  	assert_closure(rax)
    42 000075D3 803805              <1>  cmp byte [%1], %2
    43 000075D6 0F8558CB0000        <1>  jne L_error_incorrect_type
  9492 000075DC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9493 000075E0 53                      	push rbx
  9494 000075E1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9495 000075E5 FFD3                    	call rbx
  9496 000075E7 48890425[10030000]      	mov qword [free_var_98], rax
  9497 000075EF 48B8-                   	mov rax, sob_void
  9497 000075F1 [0000000000000000] 
  9498                                  
  9499 000075F9 4889C7                  	mov rdi, rax
  9500 000075FC E8C4B20000              	call print_sexpr_if_not_void
  9501                                  
  9502 00007601 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9503 00007606 E8A9B20000              	call malloc
  9504 0000760B 50                      	push rax
  9505 0000760C BF00000000              	mov rdi, 8 * 0	; new rib
  9506 00007611 E89EB20000              	call malloc
  9507 00007616 50                      	push rax
  9508 00007617 BF08000000              	mov rdi, 8 * 1	; extended env
  9509 0000761C E893B20000              	call malloc
  9510 00007621 488B7D10                	mov rdi, ENV
  9511 00007625 BE00000000              	mov rsi, 0
  9512 0000762A BA01000000              	mov rdx, 1
  9513                                  .L_lambda_simple_env_loop_4f66:	; ext_env[i + 1] <-- env[i]
  9514 0000762F 4883FE00                	cmp rsi, 0
  9515 00007633 7410                    	je .L_lambda_simple_env_end_4f66
  9516 00007635 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  9517 00007639 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9518 0000763D 48FFC6                  	inc rsi
  9519 00007640 48FFC2                  	inc rdx
  9520 00007643 EBEA                    	jmp .L_lambda_simple_env_loop_4f66
  9521                                  .L_lambda_simple_env_end_4f66:
  9522 00007645 5B                      	pop rbx
  9523 00007646 BE00000000              	mov rsi, 0
  9524                                  .L_lambda_simple_params_loop_4f66:	; copy params
  9525 0000764B 4883FE00                	cmp rsi, 0
  9526 0000764F 740E                    	je .L_lambda_simple_params_end_4f66
  9527 00007651 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9528 00007656 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9529 0000765A 48FFC6                  	inc rsi
  9530 0000765D EBEC                    	jmp .L_lambda_simple_params_loop_4f66
  9531                                  .L_lambda_simple_params_end_4f66:
  9532 0000765F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9533 00007662 4889C3                  	mov rbx, rax
  9534 00007665 58                      	pop rax
  9535 00007666 C60005                  	mov byte [rax], T_closure
  9536 00007669 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9537 0000766D 48C74009[7A760000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f66
  9538 00007675 E9A5000000              	jmp .L_lambda_simple_end_4f66
  9539                                  .L_lambda_simple_code_4f66:	; lambda-simple body
  9540 0000767A 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9541 00007680 740B                    	je .L_lambda_simple_arity_check_ok_4f66
  9542 00007682 FF742410                	push qword [rsp + 8 * 2]
  9543 00007686 6A00                    	push 0
  9544 00007688 E9E0B10000              	jmp L_error_incorrect_arity_simple
  9545                                  .L_lambda_simple_arity_check_ok_4f66:
  9546 0000768D C8000000                	enter 0, 0
  9547 00007691 488D0425[44000000]      	lea rax, [68 + L_constants]
  9548 00007699 50                      	push rax
  9549 0000769A 488D0425[9B000000]      	lea rax, [155 + L_constants]
  9550 000076A2 50                      	push rax
  9551 000076A3 6A02                    	push 2
  9552 000076A5 488B0425[30010000]      	mov rax, qword [free_var_38]
  9553                                  	assert_closure(rax)
    42 000076AD 803805              <1>  cmp byte [%1], %2
    43 000076B0 0F857ECA0000        <1>  jne L_error_incorrect_type
  9554 000076B6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9555 000076BA 53                      	push rbx
  9556 000076BB FF7508                  	push RET_ADDR
  9557 000076BE 488B7D18                	mov rdi, COUNT
  9558 000076C2 4883C703                	add rdi, 3
  9559 000076C6 48C1E703                	shl rdi, 3
  9560 000076CA 4801EF                  	add rdi, rbp
  9561 000076CD 488B6D00                	mov rbp, OLD_RDP
  9562 000076D1 BE00000000              	mov rsi, 0
  9563                                  .L_tc_recycle_frame_loop_5ce7:	 ; start recycle frame loop
  9564 000076D6 4883FE05                	cmp rsi, 5
  9565 000076DA 7427                    	je .L_tc_recycle_frame_done_5ce7
  9566 000076DC B904000000              	mov rcx, 4
  9567 000076E1 4829F1                  	sub rcx, rsi
  9568 000076E4 48C1E103                	shl rcx, 3
  9569 000076E8 4801E1                  	add rcx, rsp ; rcx is the address to move
  9570 000076EB 4889F3                  	mov rbx, rsi
  9571 000076EE 48C1E303                	shl rbx, 3
  9572 000076F2 48F7DB                  	neg rbx
  9573 000076F5 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9574 000076F8 488B09                  	mov rcx, [rcx]
  9575 000076FB 48890B                  	mov [rbx], rcx
  9576 000076FE 48FFC6                  	inc rsi
  9577 00007701 EBD3                    	jmp .L_tc_recycle_frame_loop_5ce7
  9578                                  .L_tc_recycle_frame_done_5ce7:	 ; end recycle frame loop
  9579 00007703 BB04000000              	mov rbx, 4
  9580 00007708 48C1E303                	shl rbx, 3
  9581 0000770C 48F7DB                  	neg rbx
  9582 0000770F 4801FB                  	add rbx, rdi
  9583 00007712 4889DC                  	mov rsp, rbx
  9584 00007715 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9585 00007719 FFE3                    	jmp rbx
  9586 0000771B C9                      	leave
  9587 0000771C C21000                  	ret 8 * (2 + 0)
  9588                                  .L_lambda_simple_end_4f66:	; new closure is in rax
  9589 0000771F 50                      	push rax
  9590 00007720 6A01                    	push 1
  9591 00007722 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9592 00007727 E888B10000              	call malloc
  9593 0000772C 50                      	push rax
  9594 0000772D BF00000000              	mov rdi, 8 * 0	; new rib
  9595 00007732 E87DB10000              	call malloc
  9596 00007737 50                      	push rax
  9597 00007738 BF08000000              	mov rdi, 8 * 1	; extended env
  9598 0000773D E872B10000              	call malloc
  9599 00007742 488B7D10                	mov rdi, ENV
  9600 00007746 BE00000000              	mov rsi, 0
  9601 0000774B BA01000000              	mov rdx, 1
  9602                                  .L_lambda_simple_env_loop_4f67:	; ext_env[i + 1] <-- env[i]
  9603 00007750 4883FE00                	cmp rsi, 0
  9604 00007754 7410                    	je .L_lambda_simple_env_end_4f67
  9605 00007756 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  9606 0000775A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9607 0000775E 48FFC6                  	inc rsi
  9608 00007761 48FFC2                  	inc rdx
  9609 00007764 EBEA                    	jmp .L_lambda_simple_env_loop_4f67
  9610                                  .L_lambda_simple_env_end_4f67:
  9611 00007766 5B                      	pop rbx
  9612 00007767 BE00000000              	mov rsi, 0
  9613                                  .L_lambda_simple_params_loop_4f67:	; copy params
  9614 0000776C 4883FE00                	cmp rsi, 0
  9615 00007770 740E                    	je .L_lambda_simple_params_end_4f67
  9616 00007772 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9617 00007777 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9618 0000777B 48FFC6                  	inc rsi
  9619 0000777E EBEC                    	jmp .L_lambda_simple_params_loop_4f67
  9620                                  .L_lambda_simple_params_end_4f67:
  9621 00007780 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9622 00007783 4889C3                  	mov rbx, rax
  9623 00007786 58                      	pop rax
  9624 00007787 C60005                  	mov byte [rax], T_closure
  9625 0000778A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9626 0000778E 48C74009[9B770000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f67
  9627 00007796 E99E080000              	jmp .L_lambda_simple_end_4f67
  9628                                  .L_lambda_simple_code_4f67:	; lambda-simple body
  9629 0000779B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9630 000077A1 740B                    	je .L_lambda_simple_arity_check_ok_4f67
  9631 000077A3 FF742410                	push qword [rsp + 8 * 2]
  9632 000077A7 6A01                    	push 1
  9633 000077A9 E9BFB00000              	jmp L_error_incorrect_arity_simple
  9634                                  .L_lambda_simple_arity_check_ok_4f67:
  9635 000077AE C8000000                	enter 0, 0
  9636 000077B2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9637 000077B7 E8F8B00000              	call malloc
  9638 000077BC 50                      	push rax
  9639 000077BD BF08000000              	mov rdi, 8 * 1	; new rib
  9640 000077C2 E8EDB00000              	call malloc
  9641 000077C7 50                      	push rax
  9642 000077C8 BF10000000              	mov rdi, 8 * 2	; extended env
  9643 000077CD E8E2B00000              	call malloc
  9644 000077D2 488B7D10                	mov rdi, ENV
  9645 000077D6 BE00000000              	mov rsi, 0
  9646 000077DB BA01000000              	mov rdx, 1
  9647                                  .L_lambda_simple_env_loop_4f68:	; ext_env[i + 1] <-- env[i]
  9648 000077E0 4883FE01                	cmp rsi, 1
  9649 000077E4 7410                    	je .L_lambda_simple_env_end_4f68
  9650 000077E6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
  9651 000077EA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9652 000077EE 48FFC6                  	inc rsi
  9653 000077F1 48FFC2                  	inc rdx
  9654 000077F4 EBEA                    	jmp .L_lambda_simple_env_loop_4f68
  9655                                  .L_lambda_simple_env_end_4f68:
  9656 000077F6 5B                      	pop rbx
  9657 000077F7 BE00000000              	mov rsi, 0
  9658                                  .L_lambda_simple_params_loop_4f68:	; copy params
  9659 000077FC 4883FE01                	cmp rsi, 1
  9660 00007800 740E                    	je .L_lambda_simple_params_end_4f68
  9661 00007802 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9662 00007807 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9663 0000780B 48FFC6                  	inc rsi
  9664 0000780E EBEC                    	jmp .L_lambda_simple_params_loop_4f68
  9665                                  .L_lambda_simple_params_end_4f68:
  9666 00007810 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9667 00007813 4889C3                  	mov rbx, rax
  9668 00007816 58                      	pop rax
  9669 00007817 C60005                  	mov byte [rax], T_closure
  9670 0000781A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9671 0000781E 48C74009[2B780000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f68
  9672 00007826 E9FE040000              	jmp .L_lambda_simple_end_4f68
  9673                                  .L_lambda_simple_code_4f68:	; lambda-simple body
  9674 0000782B 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9675 00007831 740B                    	je .L_lambda_simple_arity_check_ok_4f68
  9676 00007833 FF742410                	push qword [rsp + 8 * 2]
  9677 00007837 6A02                    	push 2
  9678 00007839 E92FB00000              	jmp L_error_incorrect_arity_simple
  9679                                  .L_lambda_simple_arity_check_ok_4f68:
  9680 0000783E C8000000                	enter 0, 0
  9681 00007842 488B4520                	mov rax, PARAM(0)
  9682 00007846 50                      	push rax
  9683 00007847 6A01                    	push 1
  9684 00007849 488B0425[48000000]      	mov rax, qword [free_var_9]
  9685                                  	assert_closure(rax)
    42 00007851 803805              <1>  cmp byte [%1], %2
    43 00007854 0F85DAC80000        <1>  jne L_error_incorrect_type
  9686 0000785A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9687 0000785E 53                      	push rbx
  9688 0000785F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9689 00007863 FFD3                    	call rbx
  9690 00007865 483D[02000000]          	cmp rax, sob_boolean_false
  9691 0000786B 0F8407020000            	je .L_if_else_5699
  9692 00007871 488B4528                	mov rax, PARAM(1)
  9693 00007875 50                      	push rax
  9694 00007876 6A01                    	push 1
  9695 00007878 488B0425[48000000]      	mov rax, qword [free_var_9]
  9696                                  	assert_closure(rax)
    42 00007880 803805              <1>  cmp byte [%1], %2
    43 00007883 0F85ABC80000        <1>  jne L_error_incorrect_type
  9697 00007889 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9698 0000788D 53                      	push rbx
  9699 0000788E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9700 00007892 FFD3                    	call rbx
  9701 00007894 483D[02000000]          	cmp rax, sob_boolean_false
  9702 0000789A 0F8487000000            	je .L_if_else_569a
  9703 000078A0 488B4528                	mov rax, PARAM(1)
  9704 000078A4 50                      	push rax
  9705 000078A5 488B4520                	mov rax, PARAM(0)
  9706 000078A9 50                      	push rax
  9707 000078AA 6A02                    	push 2
  9708 000078AC 488B0425[20010000]      	mov rax, qword [free_var_36]
  9709                                  	assert_closure(rax)
    42 000078B4 803805              <1>  cmp byte [%1], %2
    43 000078B7 0F8577C80000        <1>  jne L_error_incorrect_type
  9710 000078BD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9711 000078C1 53                      	push rbx
  9712 000078C2 FF7508                  	push RET_ADDR
  9713 000078C5 488B7D18                	mov rdi, COUNT
  9714 000078C9 4883C703                	add rdi, 3
  9715 000078CD 48C1E703                	shl rdi, 3
  9716 000078D1 4801EF                  	add rdi, rbp
  9717 000078D4 488B6D00                	mov rbp, OLD_RDP
  9718 000078D8 BE00000000              	mov rsi, 0
  9719                                  .L_tc_recycle_frame_loop_5ce9:	 ; start recycle frame loop
  9720 000078DD 4883FE05                	cmp rsi, 5
  9721 000078E1 7427                    	je .L_tc_recycle_frame_done_5ce9
  9722 000078E3 B904000000              	mov rcx, 4
  9723 000078E8 4829F1                  	sub rcx, rsi
  9724 000078EB 48C1E103                	shl rcx, 3
  9725 000078EF 4801E1                  	add rcx, rsp ; rcx is the address to move
  9726 000078F2 4889F3                  	mov rbx, rsi
  9727 000078F5 48C1E303                	shl rbx, 3
  9728 000078F9 48F7DB                  	neg rbx
  9729 000078FC 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9730 000078FF 488B09                  	mov rcx, [rcx]
  9731 00007902 48890B                  	mov [rbx], rcx
  9732 00007905 48FFC6                  	inc rsi
  9733 00007908 EBD3                    	jmp .L_tc_recycle_frame_loop_5ce9
  9734                                  .L_tc_recycle_frame_done_5ce9:	 ; end recycle frame loop
  9735 0000790A BB04000000              	mov rbx, 4
  9736 0000790F 48C1E303                	shl rbx, 3
  9737 00007913 48F7DB                  	neg rbx
  9738 00007916 4801FB                  	add rbx, rdi
  9739 00007919 4889DC                  	mov rsp, rbx
  9740 0000791C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9741 00007920 FFE3                    	jmp rbx
  9742 00007922 E94C010000              	jmp .L_if_end_569a
  9743                                  	.L_if_else_569a:
  9744 00007927 488B4528                	mov rax, PARAM(1)
  9745 0000792B 50                      	push rax
  9746 0000792C 6A01                    	push 1
  9747 0000792E 488B0425[40000000]      	mov rax, qword [free_var_8]
  9748                                  	assert_closure(rax)
    42 00007936 803805              <1>  cmp byte [%1], %2
    43 00007939 0F85F5C70000        <1>  jne L_error_incorrect_type
  9749 0000793F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9750 00007943 53                      	push rbx
  9751 00007944 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9752 00007948 FFD3                    	call rbx
  9753 0000794A 483D[02000000]          	cmp rax, sob_boolean_false
  9754 00007950 0F84A3000000            	je .L_if_else_569b
  9755 00007956 488B4528                	mov rax, PARAM(1)
  9756 0000795A 50                      	push rax
  9757 0000795B 488B4520                	mov rax, PARAM(0)
  9758 0000795F 50                      	push rax
  9759 00007960 6A01                    	push 1
  9760 00007962 488B0425[B8000000]      	mov rax, qword [free_var_23]
  9761                                  	assert_closure(rax)
    42 0000796A 803805              <1>  cmp byte [%1], %2
    43 0000796D 0F85C1C70000        <1>  jne L_error_incorrect_type
  9762 00007973 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9763 00007977 53                      	push rbx
  9764 00007978 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9765 0000797C FFD3                    	call rbx
  9766 0000797E 50                      	push rax
  9767 0000797F 6A02                    	push 2
  9768 00007981 488B0425[00010000]      	mov rax, qword [free_var_32]
  9769                                  	assert_closure(rax)
    42 00007989 803805              <1>  cmp byte [%1], %2
    43 0000798C 0F85A2C70000        <1>  jne L_error_incorrect_type
  9770 00007992 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9771 00007996 53                      	push rbx
  9772 00007997 FF7508                  	push RET_ADDR
  9773 0000799A 488B7D18                	mov rdi, COUNT
  9774 0000799E 4883C703                	add rdi, 3
  9775 000079A2 48C1E703                	shl rdi, 3
  9776 000079A6 4801EF                  	add rdi, rbp
  9777 000079A9 488B6D00                	mov rbp, OLD_RDP
  9778 000079AD BE00000000              	mov rsi, 0
  9779                                  .L_tc_recycle_frame_loop_5cea:	 ; start recycle frame loop
  9780 000079B2 4883FE05                	cmp rsi, 5
  9781 000079B6 7427                    	je .L_tc_recycle_frame_done_5cea
  9782 000079B8 B904000000              	mov rcx, 4
  9783 000079BD 4829F1                  	sub rcx, rsi
  9784 000079C0 48C1E103                	shl rcx, 3
  9785 000079C4 4801E1                  	add rcx, rsp ; rcx is the address to move
  9786 000079C7 4889F3                  	mov rbx, rsi
  9787 000079CA 48C1E303                	shl rbx, 3
  9788 000079CE 48F7DB                  	neg rbx
  9789 000079D1 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9790 000079D4 488B09                  	mov rcx, [rcx]
  9791 000079D7 48890B                  	mov [rbx], rcx
  9792 000079DA 48FFC6                  	inc rsi
  9793 000079DD EBD3                    	jmp .L_tc_recycle_frame_loop_5cea
  9794                                  .L_tc_recycle_frame_done_5cea:	 ; end recycle frame loop
  9795 000079DF BB04000000              	mov rbx, 4
  9796 000079E4 48C1E303                	shl rbx, 3
  9797 000079E8 48F7DB                  	neg rbx
  9798 000079EB 4801FB                  	add rbx, rdi
  9799 000079EE 4889DC                  	mov rsp, rbx
  9800 000079F1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9801 000079F5 FFE3                    	jmp rbx
  9802 000079F7 EB7A                    	jmp .L_if_end_569b
  9803                                  	.L_if_else_569b:
  9804 000079F9 6A00                    	push 0
  9805 000079FB 488B4510                	mov rax, qword [rbp + 8*2]
  9806 000079FF 488B00                  	mov rax, qword [rax + 8*0]
  9807 00007A02 488B00                  	mov rax, qword [rax + 8*0]
  9808                                  	assert_closure(rax)
    42 00007A05 803805              <1>  cmp byte [%1], %2
    43 00007A08 0F8526C70000        <1>  jne L_error_incorrect_type
  9809 00007A0E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9810 00007A12 53                      	push rbx
  9811 00007A13 FF7508                  	push RET_ADDR
  9812 00007A16 488B7D18                	mov rdi, COUNT
  9813 00007A1A 4883C703                	add rdi, 3
  9814 00007A1E 48C1E703                	shl rdi, 3
  9815 00007A22 4801EF                  	add rdi, rbp
  9816 00007A25 488B6D00                	mov rbp, OLD_RDP
  9817 00007A29 BE00000000              	mov rsi, 0
  9818                                  .L_tc_recycle_frame_loop_5ceb:	 ; start recycle frame loop
  9819 00007A2E 4883FE03                	cmp rsi, 3
  9820 00007A32 7427                    	je .L_tc_recycle_frame_done_5ceb
  9821 00007A34 B902000000              	mov rcx, 2
  9822 00007A39 4829F1                  	sub rcx, rsi
  9823 00007A3C 48C1E103                	shl rcx, 3
  9824 00007A40 4801E1                  	add rcx, rsp ; rcx is the address to move
  9825 00007A43 4889F3                  	mov rbx, rsi
  9826 00007A46 48C1E303                	shl rbx, 3
  9827 00007A4A 48F7DB                  	neg rbx
  9828 00007A4D 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9829 00007A50 488B09                  	mov rcx, [rcx]
  9830 00007A53 48890B                  	mov [rbx], rcx
  9831 00007A56 48FFC6                  	inc rsi
  9832 00007A59 EBD3                    	jmp .L_tc_recycle_frame_loop_5ceb
  9833                                  .L_tc_recycle_frame_done_5ceb:	 ; end recycle frame loop
  9834 00007A5B BB02000000              	mov rbx, 2
  9835 00007A60 48C1E303                	shl rbx, 3
  9836 00007A64 48F7DB                  	neg rbx
  9837 00007A67 4801FB                  	add rbx, rdi
  9838 00007A6A 4889DC                  	mov rsp, rbx
  9839 00007A6D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9840 00007A71 FFE3                    	jmp rbx
  9841                                  	.L_if_end_569b:
  9842                                  	.L_if_end_569a:
  9843 00007A73 E9AD020000              	jmp .L_if_end_5699
  9844                                  	.L_if_else_5699:
  9845 00007A78 488B4520                	mov rax, PARAM(0)
  9846 00007A7C 50                      	push rax
  9847 00007A7D 6A01                    	push 1
  9848 00007A7F 488B0425[40000000]      	mov rax, qword [free_var_8]
  9849                                  	assert_closure(rax)
    42 00007A87 803805              <1>  cmp byte [%1], %2
    43 00007A8A 0F85A4C60000        <1>  jne L_error_incorrect_type
  9850 00007A90 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9851 00007A94 53                      	push rbx
  9852 00007A95 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9853 00007A99 FFD3                    	call rbx
  9854 00007A9B 483D[02000000]          	cmp rax, sob_boolean_false
  9855 00007AA1 0F8404020000            	je .L_if_else_569c
  9856 00007AA7 488B4528                	mov rax, PARAM(1)
  9857 00007AAB 50                      	push rax
  9858 00007AAC 6A01                    	push 1
  9859 00007AAE 488B0425[48000000]      	mov rax, qword [free_var_9]
  9860                                  	assert_closure(rax)
    42 00007AB6 803805              <1>  cmp byte [%1], %2
    43 00007AB9 0F8575C60000        <1>  jne L_error_incorrect_type
  9861 00007ABF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9862 00007AC3 53                      	push rbx
  9863 00007AC4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9864 00007AC8 FFD3                    	call rbx
  9865 00007ACA 483D[02000000]          	cmp rax, sob_boolean_false
  9866 00007AD0 0F84A6000000            	je .L_if_else_569d
  9867 00007AD6 488B4528                	mov rax, PARAM(1)
  9868 00007ADA 50                      	push rax
  9869 00007ADB 6A01                    	push 1
  9870 00007ADD 488B0425[B8000000]      	mov rax, qword [free_var_23]
  9871                                  	assert_closure(rax)
    42 00007AE5 803805              <1>  cmp byte [%1], %2
    43 00007AE8 0F8546C60000        <1>  jne L_error_incorrect_type
  9872 00007AEE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9873 00007AF2 53                      	push rbx
  9874 00007AF3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9875 00007AF7 FFD3                    	call rbx
  9876 00007AF9 50                      	push rax
  9877 00007AFA 488B4520                	mov rax, PARAM(0)
  9878 00007AFE 50                      	push rax
  9879 00007AFF 6A02                    	push 2
  9880 00007B01 488B0425[00010000]      	mov rax, qword [free_var_32]
  9881                                  	assert_closure(rax)
    42 00007B09 803805              <1>  cmp byte [%1], %2
    43 00007B0C 0F8522C60000        <1>  jne L_error_incorrect_type
  9882 00007B12 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9883 00007B16 53                      	push rbx
  9884 00007B17 FF7508                  	push RET_ADDR
  9885 00007B1A 488B7D18                	mov rdi, COUNT
  9886 00007B1E 4883C703                	add rdi, 3
  9887 00007B22 48C1E703                	shl rdi, 3
  9888 00007B26 4801EF                  	add rdi, rbp
  9889 00007B29 488B6D00                	mov rbp, OLD_RDP
  9890 00007B2D BE00000000              	mov rsi, 0
  9891                                  .L_tc_recycle_frame_loop_5cec:	 ; start recycle frame loop
  9892 00007B32 4883FE05                	cmp rsi, 5
  9893 00007B36 7427                    	je .L_tc_recycle_frame_done_5cec
  9894 00007B38 B904000000              	mov rcx, 4
  9895 00007B3D 4829F1                  	sub rcx, rsi
  9896 00007B40 48C1E103                	shl rcx, 3
  9897 00007B44 4801E1                  	add rcx, rsp ; rcx is the address to move
  9898 00007B47 4889F3                  	mov rbx, rsi
  9899 00007B4A 48C1E303                	shl rbx, 3
  9900 00007B4E 48F7DB                  	neg rbx
  9901 00007B51 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9902 00007B54 488B09                  	mov rcx, [rcx]
  9903 00007B57 48890B                  	mov [rbx], rcx
  9904 00007B5A 48FFC6                  	inc rsi
  9905 00007B5D EBD3                    	jmp .L_tc_recycle_frame_loop_5cec
  9906                                  .L_tc_recycle_frame_done_5cec:	 ; end recycle frame loop
  9907 00007B5F BB04000000              	mov rbx, 4
  9908 00007B64 48C1E303                	shl rbx, 3
  9909 00007B68 48F7DB                  	neg rbx
  9910 00007B6B 4801FB                  	add rbx, rdi
  9911 00007B6E 4889DC                  	mov rsp, rbx
  9912 00007B71 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9913 00007B75 FFE3                    	jmp rbx
  9914 00007B77 E92D010000              	jmp .L_if_end_569d
  9915                                  	.L_if_else_569d:
  9916 00007B7C 488B4528                	mov rax, PARAM(1)
  9917 00007B80 50                      	push rax
  9918 00007B81 6A01                    	push 1
  9919 00007B83 488B0425[40000000]      	mov rax, qword [free_var_8]
  9920                                  	assert_closure(rax)
    42 00007B8B 803805              <1>  cmp byte [%1], %2
    43 00007B8E 0F85A0C50000        <1>  jne L_error_incorrect_type
  9921 00007B94 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9922 00007B98 53                      	push rbx
  9923 00007B99 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9924 00007B9D FFD3                    	call rbx
  9925 00007B9F 483D[02000000]          	cmp rax, sob_boolean_false
  9926 00007BA5 0F8484000000            	je .L_if_else_569e
  9927 00007BAB 488B4528                	mov rax, PARAM(1)
  9928 00007BAF 50                      	push rax
  9929 00007BB0 488B4520                	mov rax, PARAM(0)
  9930 00007BB4 50                      	push rax
  9931 00007BB5 6A02                    	push 2
  9932 00007BB7 488B0425[00010000]      	mov rax, qword [free_var_32]
  9933                                  	assert_closure(rax)
    42 00007BBF 803805              <1>  cmp byte [%1], %2
    43 00007BC2 0F856CC50000        <1>  jne L_error_incorrect_type
  9934 00007BC8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9935 00007BCC 53                      	push rbx
  9936 00007BCD FF7508                  	push RET_ADDR
  9937 00007BD0 488B7D18                	mov rdi, COUNT
  9938 00007BD4 4883C703                	add rdi, 3
  9939 00007BD8 48C1E703                	shl rdi, 3
  9940 00007BDC 4801EF                  	add rdi, rbp
  9941 00007BDF 488B6D00                	mov rbp, OLD_RDP
  9942 00007BE3 BE00000000              	mov rsi, 0
  9943                                  .L_tc_recycle_frame_loop_5ced:	 ; start recycle frame loop
  9944 00007BE8 4883FE05                	cmp rsi, 5
  9945 00007BEC 7427                    	je .L_tc_recycle_frame_done_5ced
  9946 00007BEE B904000000              	mov rcx, 4
  9947 00007BF3 4829F1                  	sub rcx, rsi
  9948 00007BF6 48C1E103                	shl rcx, 3
  9949 00007BFA 4801E1                  	add rcx, rsp ; rcx is the address to move
  9950 00007BFD 4889F3                  	mov rbx, rsi
  9951 00007C00 48C1E303                	shl rbx, 3
  9952 00007C04 48F7DB                  	neg rbx
  9953 00007C07 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9954 00007C0A 488B09                  	mov rcx, [rcx]
  9955 00007C0D 48890B                  	mov [rbx], rcx
  9956 00007C10 48FFC6                  	inc rsi
  9957 00007C13 EBD3                    	jmp .L_tc_recycle_frame_loop_5ced
  9958                                  .L_tc_recycle_frame_done_5ced:	 ; end recycle frame loop
  9959 00007C15 BB04000000              	mov rbx, 4
  9960 00007C1A 48C1E303                	shl rbx, 3
  9961 00007C1E 48F7DB                  	neg rbx
  9962 00007C21 4801FB                  	add rbx, rdi
  9963 00007C24 4889DC                  	mov rsp, rbx
  9964 00007C27 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9965 00007C2B FFE3                    	jmp rbx
  9966 00007C2D EB7A                    	jmp .L_if_end_569e
  9967                                  	.L_if_else_569e:
  9968 00007C2F 6A00                    	push 0
  9969 00007C31 488B4510                	mov rax, qword [rbp + 8*2]
  9970 00007C35 488B00                  	mov rax, qword [rax + 8*0]
  9971 00007C38 488B00                  	mov rax, qword [rax + 8*0]
  9972                                  	assert_closure(rax)
    42 00007C3B 803805              <1>  cmp byte [%1], %2
    43 00007C3E 0F85F0C40000        <1>  jne L_error_incorrect_type
  9973 00007C44 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9974 00007C48 53                      	push rbx
  9975 00007C49 FF7508                  	push RET_ADDR
  9976 00007C4C 488B7D18                	mov rdi, COUNT
  9977 00007C50 4883C703                	add rdi, 3
  9978 00007C54 48C1E703                	shl rdi, 3
  9979 00007C58 4801EF                  	add rdi, rbp
  9980 00007C5B 488B6D00                	mov rbp, OLD_RDP
  9981 00007C5F BE00000000              	mov rsi, 0
  9982                                  .L_tc_recycle_frame_loop_5cee:	 ; start recycle frame loop
  9983 00007C64 4883FE03                	cmp rsi, 3
  9984 00007C68 7427                    	je .L_tc_recycle_frame_done_5cee
  9985 00007C6A B902000000              	mov rcx, 2
  9986 00007C6F 4829F1                  	sub rcx, rsi
  9987 00007C72 48C1E103                	shl rcx, 3
  9988 00007C76 4801E1                  	add rcx, rsp ; rcx is the address to move
  9989 00007C79 4889F3                  	mov rbx, rsi
  9990 00007C7C 48C1E303                	shl rbx, 3
  9991 00007C80 48F7DB                  	neg rbx
  9992 00007C83 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9993 00007C86 488B09                  	mov rcx, [rcx]
  9994 00007C89 48890B                  	mov [rbx], rcx
  9995 00007C8C 48FFC6                  	inc rsi
  9996 00007C8F EBD3                    	jmp .L_tc_recycle_frame_loop_5cee
  9997                                  .L_tc_recycle_frame_done_5cee:	 ; end recycle frame loop
  9998 00007C91 BB02000000              	mov rbx, 2
  9999 00007C96 48C1E303                	shl rbx, 3
 10000 00007C9A 48F7DB                  	neg rbx
 10001 00007C9D 4801FB                  	add rbx, rdi
 10002 00007CA0 4889DC                  	mov rsp, rbx
 10003 00007CA3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10004 00007CA7 FFE3                    	jmp rbx
 10005                                  	.L_if_end_569e:
 10006                                  	.L_if_end_569d:
 10007 00007CA9 EB7A                    	jmp .L_if_end_569c
 10008                                  	.L_if_else_569c:
 10009 00007CAB 6A00                    	push 0
 10010 00007CAD 488B4510                	mov rax, qword [rbp + 8*2]
 10011 00007CB1 488B00                  	mov rax, qword [rax + 8*0]
 10012 00007CB4 488B00                  	mov rax, qword [rax + 8*0]
 10013                                  	assert_closure(rax)
    42 00007CB7 803805              <1>  cmp byte [%1], %2
    43 00007CBA 0F8574C40000        <1>  jne L_error_incorrect_type
 10014 00007CC0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10015 00007CC4 53                      	push rbx
 10016 00007CC5 FF7508                  	push RET_ADDR
 10017 00007CC8 488B7D18                	mov rdi, COUNT
 10018 00007CCC 4883C703                	add rdi, 3
 10019 00007CD0 48C1E703                	shl rdi, 3
 10020 00007CD4 4801EF                  	add rdi, rbp
 10021 00007CD7 488B6D00                	mov rbp, OLD_RDP
 10022 00007CDB BE00000000              	mov rsi, 0
 10023                                  .L_tc_recycle_frame_loop_5cef:	 ; start recycle frame loop
 10024 00007CE0 4883FE03                	cmp rsi, 3
 10025 00007CE4 7427                    	je .L_tc_recycle_frame_done_5cef
 10026 00007CE6 B902000000              	mov rcx, 2
 10027 00007CEB 4829F1                  	sub rcx, rsi
 10028 00007CEE 48C1E103                	shl rcx, 3
 10029 00007CF2 4801E1                  	add rcx, rsp ; rcx is the address to move
 10030 00007CF5 4889F3                  	mov rbx, rsi
 10031 00007CF8 48C1E303                	shl rbx, 3
 10032 00007CFC 48F7DB                  	neg rbx
 10033 00007CFF 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10034 00007D02 488B09                  	mov rcx, [rcx]
 10035 00007D05 48890B                  	mov [rbx], rcx
 10036 00007D08 48FFC6                  	inc rsi
 10037 00007D0B EBD3                    	jmp .L_tc_recycle_frame_loop_5cef
 10038                                  .L_tc_recycle_frame_done_5cef:	 ; end recycle frame loop
 10039 00007D0D BB02000000              	mov rbx, 2
 10040 00007D12 48C1E303                	shl rbx, 3
 10041 00007D16 48F7DB                  	neg rbx
 10042 00007D19 4801FB                  	add rbx, rdi
 10043 00007D1C 4889DC                  	mov rsp, rbx
 10044 00007D1F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10045 00007D23 FFE3                    	jmp rbx
 10046                                  	.L_if_end_569c:
 10047                                  	.L_if_end_5699:
 10048 00007D25 C9                      	leave
 10049 00007D26 C22000                  	ret 8 * (2 + 2)
 10050                                  .L_lambda_simple_end_4f68:	; new closure is in rax
 10051 00007D29 50                      	push rax
 10052 00007D2A 6A01                    	push 1
 10053 00007D2C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10054 00007D31 E87EAB0000              	call malloc
 10055 00007D36 50                      	push rax
 10056 00007D37 BF08000000              	mov rdi, 8 * 1	; new rib
 10057 00007D3C E873AB0000              	call malloc
 10058 00007D41 50                      	push rax
 10059 00007D42 BF10000000              	mov rdi, 8 * 2	; extended env
 10060 00007D47 E868AB0000              	call malloc
 10061 00007D4C 488B7D10                	mov rdi, ENV
 10062 00007D50 BE00000000              	mov rsi, 0
 10063 00007D55 BA01000000              	mov rdx, 1
 10064                                  .L_lambda_simple_env_loop_4f69:	; ext_env[i + 1] <-- env[i]
 10065 00007D5A 4883FE01                	cmp rsi, 1
 10066 00007D5E 7410                    	je .L_lambda_simple_env_end_4f69
 10067 00007D60 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 10068 00007D64 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10069 00007D68 48FFC6                  	inc rsi
 10070 00007D6B 48FFC2                  	inc rdx
 10071 00007D6E EBEA                    	jmp .L_lambda_simple_env_loop_4f69
 10072                                  .L_lambda_simple_env_end_4f69:
 10073 00007D70 5B                      	pop rbx
 10074 00007D71 BE00000000              	mov rsi, 0
 10075                                  .L_lambda_simple_params_loop_4f69:	; copy params
 10076 00007D76 4883FE01                	cmp rsi, 1
 10077 00007D7A 740E                    	je .L_lambda_simple_params_end_4f69
 10078 00007D7C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10079 00007D81 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10080 00007D85 48FFC6                  	inc rsi
 10081 00007D88 EBEC                    	jmp .L_lambda_simple_params_loop_4f69
 10082                                  .L_lambda_simple_params_end_4f69:
 10083 00007D8A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10084 00007D8D 4889C3                  	mov rbx, rax
 10085 00007D90 58                      	pop rax
 10086 00007D91 C60005                  	mov byte [rax], T_closure
 10087 00007D94 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10088 00007D98 48C74009[A57D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f69
 10089 00007DA0 E922020000              	jmp .L_lambda_simple_end_4f69
 10090                                  .L_lambda_simple_code_4f69:	; lambda-simple body
 10091 00007DA5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10092 00007DAB 740B                    	je .L_lambda_simple_arity_check_ok_4f69
 10093 00007DAD FF742410                	push qword [rsp + 8 * 2]
 10094 00007DB1 6A01                    	push 1
 10095 00007DB3 E9B5AA0000              	jmp L_error_incorrect_arity_simple
 10096                                  .L_lambda_simple_arity_check_ok_4f69:
 10097 00007DB8 C8000000                	enter 0, 0
 10098 00007DBC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10099 00007DC1 E8EEAA0000              	call malloc
 10100 00007DC6 50                      	push rax
 10101 00007DC7 BF08000000              	mov rdi, 8 * 1	; new rib
 10102 00007DCC E8E3AA0000              	call malloc
 10103 00007DD1 50                      	push rax
 10104 00007DD2 BF18000000              	mov rdi, 8 * 3	; extended env
 10105 00007DD7 E8D8AA0000              	call malloc
 10106 00007DDC 488B7D10                	mov rdi, ENV
 10107 00007DE0 BE00000000              	mov rsi, 0
 10108 00007DE5 BA01000000              	mov rdx, 1
 10109                                  .L_lambda_opt_env_loop_0c90:	; ext_env[i + 1] <-- env[i]
 10110 00007DEA 4883FE02                	cmp rsi, 2
 10111 00007DEE 7410                    	je .L_lambda_opt_env_end_0c90
 10112 00007DF0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10113 00007DF4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10114 00007DF8 48FFC6                  	inc rsi
 10115 00007DFB 48FFC2                  	inc rdx
 10116 00007DFE EBEA                    	jmp .L_lambda_opt_env_loop_0c90
 10117                                  .L_lambda_opt_env_end_0c90:
 10118 00007E00 5B                      	pop rbx
 10119 00007E01 BE00000000              	mov rsi, 0
 10120                                  .L_lambda_opt_params_loop_0c90:	; copy params
 10121 00007E06 4883FE01                	cmp rsi, 1
 10122 00007E0A 740E                    	je .L_lambda_opt_params_end_0c90
 10123 00007E0C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10124 00007E11 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10125 00007E15 48FFC6                  	inc rsi
 10126 00007E18 EBEC                    	jmp .L_lambda_opt_params_loop_0c90
 10127                                  .L_lambda_opt_params_end_0c90:
 10128 00007E1A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10129 00007E1D 4889C3                  	mov rbx, rax
 10130 00007E20 58                      	pop rax
 10131 00007E21 C60005                  	mov byte [rax], T_closure
 10132 00007E24 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10133 00007E28 48C74009[357E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c90
 10134 00007E30 E98E010000              	jmp .L_lambda_opt_end_0c90
 10135                                  .L_lambda_opt_code_0c90:	; lambda-opt body
 10136 00007E35 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 10137 00007E3A 4889FB                  	mov rbx, rdi
 10138 00007E3D 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
 10139 00007E41 4883FB00                	cmp rbx, 0
 10140 00007E45 7F45                    	jg .L_lambda_opt_arity_check_more_0c90
 10141                                  .L_lambda_opt_arity_check_exact_0c90:	 ; if params in opt is exact
 10142 00007E47 4883EC08                	sub rsp, 8
 10143 00007E4B BE00000000              	mov rsi, 0 ; index
 10144                                  .L_lambda_opt_stack_enlarge_loop_0c90:	 ; stack loop enlarge start
 10145 00007E50 4883FE03                	cmp rsi, 3
 10146 00007E54 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c90
 10147 00007E56 4889F7                  	mov rdi, rsi
 10148 00007E59 48FFC7                  	inc rdi
 10149 00007E5C 48C1E703                	shl rdi, 3
 10150 00007E60 4801E7                  	add rdi, rsp
 10151 00007E63 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 10152 00007E66 4883EB08                	sub rbx, 8
 10153 00007E6A 488B3F                  	mov rdi, [rdi]
 10154 00007E6D 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 10155 00007E70 48FFC6                  	inc rsi
 10156 00007E73 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c90
 10157                                  .L_lambda_opt_stack_enlarge_loop_exit_0c90:	 ; end of stack enlarge loop
 10158 00007E75 48C7442418-             	mov qword [rsp + 3*8], sob_nil
 10158 00007E7A [01000000]         
 10159 00007E7E 48C744241001000000      	mov qword [rsp + 2*8], 1
 10160 00007E87 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c90
 10161                                  .L_lambda_opt_arity_check_more_0c90:	 ; if params in opt is more
 10162 00007E8C 48B8-                   	mov rax, sob_nil
 10162 00007E8E [0100000000000000] 
 10163 00007E96 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 10164 00007E99 48FFCE                  	dec rsi
 10165                                  .L_lambda_opt_list_create_loop_0c90:	; start of list creation loop
 10166 00007E9C 4883FEFF                	cmp rsi, -1
 10167 00007EA0 7422                    	je .L_lambda_opt_list_create_loop_exit_0c90
 10168 00007EA2 488D4E03                	lea rcx, [rsi + (3 + 0)]
 10169 00007EA6 48C1E103                	shl rcx, 3
 10170 00007EAA 4801E1                  	add rcx, rsp
 10171 00007EAD 488B09                  	mov rcx, [rcx]
 10172 00007EB0 56                      	push rsi ; save params
 10173 00007EB1 53                      	push rbx
 10174                                  
 10175 00007EB2 50                      	push rax ; cdr
 10176 00007EB3 51                      	push rcx ; car
 10177 00007EB4 6A02                    	push qword 2 ; push num of args
 10178 00007EB6 6A01                    	push qword 1 ; push garbage as env
 10179 00007EB8 E87EB30000              	call L_code_ptr_cons
 10180                                  
 10181 00007EBD 5B                      	pop rbx ; restore params
 10182 00007EBE 5E                      	pop rsi
 10183 00007EBF 48FFCE                  	dec rsi
 10184 00007EC2 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c90
 10185                                  .L_lambda_opt_list_create_loop_exit_0c90:	; end of list creation loop
 10186 00007EC4 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 10187 00007EC9 4883C302                	add rbx, 2
 10188 00007ECD 4889DF                  	mov rdi, rbx
 10189 00007ED0 48C1E703                	shl rdi,3
 10190 00007ED4 4801E7                  	add rdi, rsp
 10191 00007ED7 488907                  	mov [rdi], rax
 10192 00007EDA BE00000000              	mov rsi, 0 ;index
 10193                                  .L_lambda_opt_stack_shrink_loop_0c90:	; start of stack shrink loop
 10194 00007EDF 4883FE03                	cmp rsi, 3
 10195 00007EE3 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c90
 10196 00007EE5 BF02000000              	mov rdi, 2
 10197 00007EEA 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 10198 00007EED 4889D9                  	mov rcx, rbx
 10199 00007EF0 4829F1                  	sub rcx, rsi
 10200 00007EF3 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 10201 00007EF6 4889FA                  	mov rdx, rdi
 10202 00007EF9 48C1E203                	shl rdx, 3
 10203 00007EFD 4801E2                  	add rdx, rsp
 10204 00007F00 48C1E103                	shl rcx, 3
 10205 00007F04 4801E1                  	add rcx, rsp
 10206 00007F07 488B12                  	mov rdx, [rdx]
 10207 00007F0A 488911                  	mov [rcx], rdx
 10208 00007F0D 48FFC6                  	inc rsi
 10209 00007F10 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c90
 10210                                  .L_lambda_opt_stack_shrink_loop_exit_0c90:	; end of stack shrink loop
 10211 00007F12 4883EB02                	sub rbx, 2 ; rbx has number of args
 10212 00007F16 4883EB01                	sub rbx, 1
 10213 00007F1A 48C1E303                	shl rbx, 3
 10214 00007F1E 4801DC                  	add rsp, rbx
 10215 00007F21 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 10216                                  .L_lambda_opt_stack_adjusted_0c90:
 10217 00007F2A C8000000                	enter 0, 0
 10218 00007F2E 488B4520                	mov rax, PARAM(0)
 10219 00007F32 50                      	push rax
 10220 00007F33 488D0425[80000000]      	lea rax, [128 + L_constants]
 10221 00007F3B 50                      	push rax
 10222 00007F3C 488B4510                	mov rax, qword [rbp + 8*2]
 10223 00007F40 488B00                  	mov rax, qword [rax + 8*0]
 10224 00007F43 488B00                  	mov rax, qword [rax + 8*0]
 10225 00007F46 50                      	push rax
 10226 00007F47 6A03                    	push 3
 10227 00007F49 488B0425[F8020000]      	mov rax, qword [free_var_95]
 10228                                  	assert_closure(rax)
    42 00007F51 803805              <1>  cmp byte [%1], %2
    43 00007F54 0F85DAC10000        <1>  jne L_error_incorrect_type
 10229 00007F5A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10230 00007F5E 53                      	push rbx
 10231 00007F5F FF7508                  	push RET_ADDR
 10232 00007F62 488B7D18                	mov rdi, COUNT
 10233 00007F66 4883C703                	add rdi, 3
 10234 00007F6A 48C1E703                	shl rdi, 3
 10235 00007F6E 4801EF                  	add rdi, rbp
 10236 00007F71 488B6D00                	mov rbp, OLD_RDP
 10237 00007F75 BE00000000              	mov rsi, 0
 10238                                  .L_tc_recycle_frame_loop_5cf0:	 ; start recycle frame loop
 10239 00007F7A 4883FE06                	cmp rsi, 6
 10240 00007F7E 7427                    	je .L_tc_recycle_frame_done_5cf0
 10241 00007F80 B905000000              	mov rcx, 5
 10242 00007F85 4829F1                  	sub rcx, rsi
 10243 00007F88 48C1E103                	shl rcx, 3
 10244 00007F8C 4801E1                  	add rcx, rsp ; rcx is the address to move
 10245 00007F8F 4889F3                  	mov rbx, rsi
 10246 00007F92 48C1E303                	shl rbx, 3
 10247 00007F96 48F7DB                  	neg rbx
 10248 00007F99 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10249 00007F9C 488B09                  	mov rcx, [rcx]
 10250 00007F9F 48890B                  	mov [rbx], rcx
 10251 00007FA2 48FFC6                  	inc rsi
 10252 00007FA5 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf0
 10253                                  .L_tc_recycle_frame_done_5cf0:	 ; end recycle frame loop
 10254 00007FA7 BB05000000              	mov rbx, 5
 10255 00007FAC 48C1E303                	shl rbx, 3
 10256 00007FB0 48F7DB                  	neg rbx
 10257 00007FB3 4801FB                  	add rbx, rdi
 10258 00007FB6 4889DC                  	mov rsp, rbx
 10259 00007FB9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10260 00007FBD FFE3                    	jmp rbx
 10261 00007FBF C9                      	leave
 10262 00007FC0 C21800                  	ret AND_KILL_FRAME(1)
 10263                                  .L_lambda_opt_end_0c90:	; new closure is in rax
 10264 00007FC3 C9                      	leave
 10265 00007FC4 C21800                  	ret 8 * (2 + 1)
 10266                                  .L_lambda_simple_end_4f69:	; new closure is in rax
 10267                                  	assert_closure(rax)
    42 00007FC7 803805              <1>  cmp byte [%1], %2
    43 00007FCA 0F8564C10000        <1>  jne L_error_incorrect_type
 10268 00007FD0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10269 00007FD4 53                      	push rbx
 10270 00007FD5 FF7508                  	push RET_ADDR
 10271 00007FD8 488B7D18                	mov rdi, COUNT
 10272 00007FDC 4883C703                	add rdi, 3
 10273 00007FE0 48C1E703                	shl rdi, 3
 10274 00007FE4 4801EF                  	add rdi, rbp
 10275 00007FE7 488B6D00                	mov rbp, OLD_RDP
 10276 00007FEB BE00000000              	mov rsi, 0
 10277                                  .L_tc_recycle_frame_loop_5ce8:	 ; start recycle frame loop
 10278 00007FF0 4883FE04                	cmp rsi, 4
 10279 00007FF4 7427                    	je .L_tc_recycle_frame_done_5ce8
 10280 00007FF6 B903000000              	mov rcx, 3
 10281 00007FFB 4829F1                  	sub rcx, rsi
 10282 00007FFE 48C1E103                	shl rcx, 3
 10283 00008002 4801E1                  	add rcx, rsp ; rcx is the address to move
 10284 00008005 4889F3                  	mov rbx, rsi
 10285 00008008 48C1E303                	shl rbx, 3
 10286 0000800C 48F7DB                  	neg rbx
 10287 0000800F 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10288 00008012 488B09                  	mov rcx, [rcx]
 10289 00008015 48890B                  	mov [rbx], rcx
 10290 00008018 48FFC6                  	inc rsi
 10291 0000801B EBD3                    	jmp .L_tc_recycle_frame_loop_5ce8
 10292                                  .L_tc_recycle_frame_done_5ce8:	 ; end recycle frame loop
 10293 0000801D BB03000000              	mov rbx, 3
 10294 00008022 48C1E303                	shl rbx, 3
 10295 00008026 48F7DB                  	neg rbx
 10296 00008029 4801FB                  	add rbx, rdi
 10297 0000802C 4889DC                  	mov rsp, rbx
 10298 0000802F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10299 00008033 FFE3                    	jmp rbx
 10300 00008035 C9                      	leave
 10301 00008036 C21800                  	ret 8 * (2 + 1)
 10302                                  .L_lambda_simple_end_4f67:	; new closure is in rax
 10303                                  	assert_closure(rax)
    42 00008039 803805              <1>  cmp byte [%1], %2
    43 0000803C 0F85F2C00000        <1>  jne L_error_incorrect_type
 10304 00008042 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10305 00008046 53                      	push rbx
 10306 00008047 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10307 0000804B FFD3                    	call rbx
 10308 0000804D 48890425[18030000]      	mov qword [free_var_99], rax
 10309 00008055 48B8-                   	mov rax, sob_void
 10309 00008057 [0000000000000000] 
 10310                                  
 10311 0000805F 4889C7                  	mov rdi, rax
 10312 00008062 E85EA80000              	call print_sexpr_if_not_void
 10313                                  
 10314 00008067 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10315 0000806C E843A80000              	call malloc
 10316 00008071 50                      	push rax
 10317 00008072 BF00000000              	mov rdi, 8 * 0	; new rib
 10318 00008077 E838A80000              	call malloc
 10319 0000807C 50                      	push rax
 10320 0000807D BF08000000              	mov rdi, 8 * 1	; extended env
 10321 00008082 E82DA80000              	call malloc
 10322 00008087 488B7D10                	mov rdi, ENV
 10323 0000808B BE00000000              	mov rsi, 0
 10324 00008090 BA01000000              	mov rdx, 1
 10325                                  .L_lambda_simple_env_loop_4f6a:	; ext_env[i + 1] <-- env[i]
 10326 00008095 4883FE00                	cmp rsi, 0
 10327 00008099 7410                    	je .L_lambda_simple_env_end_4f6a
 10328 0000809B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 10329 0000809F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10330 000080A3 48FFC6                  	inc rsi
 10331 000080A6 48FFC2                  	inc rdx
 10332 000080A9 EBEA                    	jmp .L_lambda_simple_env_loop_4f6a
 10333                                  .L_lambda_simple_env_end_4f6a:
 10334 000080AB 5B                      	pop rbx
 10335 000080AC BE00000000              	mov rsi, 0
 10336                                  .L_lambda_simple_params_loop_4f6a:	; copy params
 10337 000080B1 4883FE00                	cmp rsi, 0
 10338 000080B5 740E                    	je .L_lambda_simple_params_end_4f6a
 10339 000080B7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10340 000080BC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10341 000080C0 48FFC6                  	inc rsi
 10342 000080C3 EBEC                    	jmp .L_lambda_simple_params_loop_4f6a
 10343                                  .L_lambda_simple_params_end_4f6a:
 10344 000080C5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10345 000080C8 4889C3                  	mov rbx, rax
 10346 000080CB 58                      	pop rax
 10347 000080CC C60005                  	mov byte [rax], T_closure
 10348 000080CF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10349 000080D3 48C74009[E0800000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f6a
 10350 000080DB E9A5000000              	jmp .L_lambda_simple_end_4f6a
 10351                                  .L_lambda_simple_code_4f6a:	; lambda-simple body
 10352 000080E0 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10353 000080E6 740B                    	je .L_lambda_simple_arity_check_ok_4f6a
 10354 000080E8 FF742410                	push qword [rsp + 8 * 2]
 10355 000080EC 6A00                    	push 0
 10356 000080EE E97AA70000              	jmp L_error_incorrect_arity_simple
 10357                                  .L_lambda_simple_arity_check_ok_4f6a:
 10358 000080F3 C8000000                	enter 0, 0
 10359 000080F7 488D0425[44000000]      	lea rax, [68 + L_constants]
 10360 000080FF 50                      	push rax
 10361 00008100 488D0425[AE000000]      	lea rax, [174 + L_constants]
 10362 00008108 50                      	push rax
 10363 00008109 6A02                    	push 2
 10364 0000810B 488B0425[30010000]      	mov rax, qword [free_var_38]
 10365                                  	assert_closure(rax)
    42 00008113 803805              <1>  cmp byte [%1], %2
    43 00008116 0F8518C00000        <1>  jne L_error_incorrect_type
 10366 0000811C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10367 00008120 53                      	push rbx
 10368 00008121 FF7508                  	push RET_ADDR
 10369 00008124 488B7D18                	mov rdi, COUNT
 10370 00008128 4883C703                	add rdi, 3
 10371 0000812C 48C1E703                	shl rdi, 3
 10372 00008130 4801EF                  	add rdi, rbp
 10373 00008133 488B6D00                	mov rbp, OLD_RDP
 10374 00008137 BE00000000              	mov rsi, 0
 10375                                  .L_tc_recycle_frame_loop_5cf1:	 ; start recycle frame loop
 10376 0000813C 4883FE05                	cmp rsi, 5
 10377 00008140 7427                    	je .L_tc_recycle_frame_done_5cf1
 10378 00008142 B904000000              	mov rcx, 4
 10379 00008147 4829F1                  	sub rcx, rsi
 10380 0000814A 48C1E103                	shl rcx, 3
 10381 0000814E 4801E1                  	add rcx, rsp ; rcx is the address to move
 10382 00008151 4889F3                  	mov rbx, rsi
 10383 00008154 48C1E303                	shl rbx, 3
 10384 00008158 48F7DB                  	neg rbx
 10385 0000815B 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10386 0000815E 488B09                  	mov rcx, [rcx]
 10387 00008161 48890B                  	mov [rbx], rcx
 10388 00008164 48FFC6                  	inc rsi
 10389 00008167 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf1
 10390                                  .L_tc_recycle_frame_done_5cf1:	 ; end recycle frame loop
 10391 00008169 BB04000000              	mov rbx, 4
 10392 0000816E 48C1E303                	shl rbx, 3
 10393 00008172 48F7DB                  	neg rbx
 10394 00008175 4801FB                  	add rbx, rdi
 10395 00008178 4889DC                  	mov rsp, rbx
 10396 0000817B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10397 0000817F FFE3                    	jmp rbx
 10398 00008181 C9                      	leave
 10399 00008182 C21000                  	ret 8 * (2 + 0)
 10400                                  .L_lambda_simple_end_4f6a:	; new closure is in rax
 10401 00008185 50                      	push rax
 10402 00008186 6A01                    	push 1
 10403 00008188 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10404 0000818D E822A70000              	call malloc
 10405 00008192 50                      	push rax
 10406 00008193 BF00000000              	mov rdi, 8 * 0	; new rib
 10407 00008198 E817A70000              	call malloc
 10408 0000819D 50                      	push rax
 10409 0000819E BF08000000              	mov rdi, 8 * 1	; extended env
 10410 000081A3 E80CA70000              	call malloc
 10411 000081A8 488B7D10                	mov rdi, ENV
 10412 000081AC BE00000000              	mov rsi, 0
 10413 000081B1 BA01000000              	mov rdx, 1
 10414                                  .L_lambda_simple_env_loop_4f6b:	; ext_env[i + 1] <-- env[i]
 10415 000081B6 4883FE00                	cmp rsi, 0
 10416 000081BA 7410                    	je .L_lambda_simple_env_end_4f6b
 10417 000081BC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 10418 000081C0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10419 000081C4 48FFC6                  	inc rsi
 10420 000081C7 48FFC2                  	inc rdx
 10421 000081CA EBEA                    	jmp .L_lambda_simple_env_loop_4f6b
 10422                                  .L_lambda_simple_env_end_4f6b:
 10423 000081CC 5B                      	pop rbx
 10424 000081CD BE00000000              	mov rsi, 0
 10425                                  .L_lambda_simple_params_loop_4f6b:	; copy params
 10426 000081D2 4883FE00                	cmp rsi, 0
 10427 000081D6 740E                    	je .L_lambda_simple_params_end_4f6b
 10428 000081D8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10429 000081DD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10430 000081E1 48FFC6                  	inc rsi
 10431 000081E4 EBEC                    	jmp .L_lambda_simple_params_loop_4f6b
 10432                                  .L_lambda_simple_params_end_4f6b:
 10433 000081E6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10434 000081E9 4889C3                  	mov rbx, rax
 10435 000081EC 58                      	pop rax
 10436 000081ED C60005                  	mov byte [rax], T_closure
 10437 000081F0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10438 000081F4 48C74009[01820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f6b
 10439 000081FC E98E0A0000              	jmp .L_lambda_simple_end_4f6b
 10440                                  .L_lambda_simple_code_4f6b:	; lambda-simple body
 10441 00008201 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10442 00008207 740B                    	je .L_lambda_simple_arity_check_ok_4f6b
 10443 00008209 FF742410                	push qword [rsp + 8 * 2]
 10444 0000820D 6A01                    	push 1
 10445 0000820F E959A60000              	jmp L_error_incorrect_arity_simple
 10446                                  .L_lambda_simple_arity_check_ok_4f6b:
 10447 00008214 C8000000                	enter 0, 0
 10448 00008218 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10449 0000821D E892A60000              	call malloc
 10450 00008222 50                      	push rax
 10451 00008223 BF08000000              	mov rdi, 8 * 1	; new rib
 10452 00008228 E887A60000              	call malloc
 10453 0000822D 50                      	push rax
 10454 0000822E BF10000000              	mov rdi, 8 * 2	; extended env
 10455 00008233 E87CA60000              	call malloc
 10456 00008238 488B7D10                	mov rdi, ENV
 10457 0000823C BE00000000              	mov rsi, 0
 10458 00008241 BA01000000              	mov rdx, 1
 10459                                  .L_lambda_simple_env_loop_4f6c:	; ext_env[i + 1] <-- env[i]
 10460 00008246 4883FE01                	cmp rsi, 1
 10461 0000824A 7410                    	je .L_lambda_simple_env_end_4f6c
 10462 0000824C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 10463 00008250 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10464 00008254 48FFC6                  	inc rsi
 10465 00008257 48FFC2                  	inc rdx
 10466 0000825A EBEA                    	jmp .L_lambda_simple_env_loop_4f6c
 10467                                  .L_lambda_simple_env_end_4f6c:
 10468 0000825C 5B                      	pop rbx
 10469 0000825D BE00000000              	mov rsi, 0
 10470                                  .L_lambda_simple_params_loop_4f6c:	; copy params
 10471 00008262 4883FE01                	cmp rsi, 1
 10472 00008266 740E                    	je .L_lambda_simple_params_end_4f6c
 10473 00008268 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10474 0000826D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10475 00008271 48FFC6                  	inc rsi
 10476 00008274 EBEC                    	jmp .L_lambda_simple_params_loop_4f6c
 10477                                  .L_lambda_simple_params_end_4f6c:
 10478 00008276 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10479 00008279 4889C3                  	mov rbx, rax
 10480 0000827C 58                      	pop rax
 10481 0000827D C60005                  	mov byte [rax], T_closure
 10482 00008280 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10483 00008284 48C74009[91820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f6c
 10484 0000828C E9FE040000              	jmp .L_lambda_simple_end_4f6c
 10485                                  .L_lambda_simple_code_4f6c:	; lambda-simple body
 10486 00008291 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10487 00008297 740B                    	je .L_lambda_simple_arity_check_ok_4f6c
 10488 00008299 FF742410                	push qword [rsp + 8 * 2]
 10489 0000829D 6A02                    	push 2
 10490 0000829F E9C9A50000              	jmp L_error_incorrect_arity_simple
 10491                                  .L_lambda_simple_arity_check_ok_4f6c:
 10492 000082A4 C8000000                	enter 0, 0
 10493 000082A8 488B4520                	mov rax, PARAM(0)
 10494 000082AC 50                      	push rax
 10495 000082AD 6A01                    	push 1
 10496 000082AF 488B0425[48000000]      	mov rax, qword [free_var_9]
 10497                                  	assert_closure(rax)
    42 000082B7 803805              <1>  cmp byte [%1], %2
    43 000082BA 0F8574BE0000        <1>  jne L_error_incorrect_type
 10498 000082C0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10499 000082C4 53                      	push rbx
 10500 000082C5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10501 000082C9 FFD3                    	call rbx
 10502 000082CB 483D[02000000]          	cmp rax, sob_boolean_false
 10503 000082D1 0F8407020000            	je .L_if_else_569f
 10504 000082D7 488B4528                	mov rax, PARAM(1)
 10505 000082DB 50                      	push rax
 10506 000082DC 6A01                    	push 1
 10507 000082DE 488B0425[48000000]      	mov rax, qword [free_var_9]
 10508                                  	assert_closure(rax)
    42 000082E6 803805              <1>  cmp byte [%1], %2
    43 000082E9 0F8545BE0000        <1>  jne L_error_incorrect_type
 10509 000082EF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10510 000082F3 53                      	push rbx
 10511 000082F4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10512 000082F8 FFD3                    	call rbx
 10513 000082FA 483D[02000000]          	cmp rax, sob_boolean_false
 10514 00008300 0F8487000000            	je .L_if_else_56a0
 10515 00008306 488B4528                	mov rax, PARAM(1)
 10516 0000830A 50                      	push rax
 10517 0000830B 488B4520                	mov rax, PARAM(0)
 10518 0000830F 50                      	push rax
 10519 00008310 6A02                    	push 2
 10520 00008312 488B0425[28010000]      	mov rax, qword [free_var_37]
 10521                                  	assert_closure(rax)
    42 0000831A 803805              <1>  cmp byte [%1], %2
    43 0000831D 0F8511BE0000        <1>  jne L_error_incorrect_type
 10522 00008323 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10523 00008327 53                      	push rbx
 10524 00008328 FF7508                  	push RET_ADDR
 10525 0000832B 488B7D18                	mov rdi, COUNT
 10526 0000832F 4883C703                	add rdi, 3
 10527 00008333 48C1E703                	shl rdi, 3
 10528 00008337 4801EF                  	add rdi, rbp
 10529 0000833A 488B6D00                	mov rbp, OLD_RDP
 10530 0000833E BE00000000              	mov rsi, 0
 10531                                  .L_tc_recycle_frame_loop_5cf3:	 ; start recycle frame loop
 10532 00008343 4883FE05                	cmp rsi, 5
 10533 00008347 7427                    	je .L_tc_recycle_frame_done_5cf3
 10534 00008349 B904000000              	mov rcx, 4
 10535 0000834E 4829F1                  	sub rcx, rsi
 10536 00008351 48C1E103                	shl rcx, 3
 10537 00008355 4801E1                  	add rcx, rsp ; rcx is the address to move
 10538 00008358 4889F3                  	mov rbx, rsi
 10539 0000835B 48C1E303                	shl rbx, 3
 10540 0000835F 48F7DB                  	neg rbx
 10541 00008362 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10542 00008365 488B09                  	mov rcx, [rcx]
 10543 00008368 48890B                  	mov [rbx], rcx
 10544 0000836B 48FFC6                  	inc rsi
 10545 0000836E EBD3                    	jmp .L_tc_recycle_frame_loop_5cf3
 10546                                  .L_tc_recycle_frame_done_5cf3:	 ; end recycle frame loop
 10547 00008370 BB04000000              	mov rbx, 4
 10548 00008375 48C1E303                	shl rbx, 3
 10549 00008379 48F7DB                  	neg rbx
 10550 0000837C 4801FB                  	add rbx, rdi
 10551 0000837F 4889DC                  	mov rsp, rbx
 10552 00008382 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10553 00008386 FFE3                    	jmp rbx
 10554 00008388 E94C010000              	jmp .L_if_end_56a0
 10555                                  	.L_if_else_56a0:
 10556 0000838D 488B4528                	mov rax, PARAM(1)
 10557 00008391 50                      	push rax
 10558 00008392 6A01                    	push 1
 10559 00008394 488B0425[40000000]      	mov rax, qword [free_var_8]
 10560                                  	assert_closure(rax)
    42 0000839C 803805              <1>  cmp byte [%1], %2
    43 0000839F 0F858FBD0000        <1>  jne L_error_incorrect_type
 10561 000083A5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10562 000083A9 53                      	push rbx
 10563 000083AA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10564 000083AE FFD3                    	call rbx
 10565 000083B0 483D[02000000]          	cmp rax, sob_boolean_false
 10566 000083B6 0F84A3000000            	je .L_if_else_56a1
 10567 000083BC 488B4528                	mov rax, PARAM(1)
 10568 000083C0 50                      	push rax
 10569 000083C1 488B4520                	mov rax, PARAM(0)
 10570 000083C5 50                      	push rax
 10571 000083C6 6A01                    	push 1
 10572 000083C8 488B0425[B8000000]      	mov rax, qword [free_var_23]
 10573                                  	assert_closure(rax)
    42 000083D0 803805              <1>  cmp byte [%1], %2
    43 000083D3 0F855BBD0000        <1>  jne L_error_incorrect_type
 10574 000083D9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10575 000083DD 53                      	push rbx
 10576 000083DE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10577 000083E2 FFD3                    	call rbx
 10578 000083E4 50                      	push rax
 10579 000083E5 6A02                    	push 2
 10580 000083E7 488B0425[08010000]      	mov rax, qword [free_var_33]
 10581                                  	assert_closure(rax)
    42 000083EF 803805              <1>  cmp byte [%1], %2
    43 000083F2 0F853CBD0000        <1>  jne L_error_incorrect_type
 10582 000083F8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10583 000083FC 53                      	push rbx
 10584 000083FD FF7508                  	push RET_ADDR
 10585 00008400 488B7D18                	mov rdi, COUNT
 10586 00008404 4883C703                	add rdi, 3
 10587 00008408 48C1E703                	shl rdi, 3
 10588 0000840C 4801EF                  	add rdi, rbp
 10589 0000840F 488B6D00                	mov rbp, OLD_RDP
 10590 00008413 BE00000000              	mov rsi, 0
 10591                                  .L_tc_recycle_frame_loop_5cf4:	 ; start recycle frame loop
 10592 00008418 4883FE05                	cmp rsi, 5
 10593 0000841C 7427                    	je .L_tc_recycle_frame_done_5cf4
 10594 0000841E B904000000              	mov rcx, 4
 10595 00008423 4829F1                  	sub rcx, rsi
 10596 00008426 48C1E103                	shl rcx, 3
 10597 0000842A 4801E1                  	add rcx, rsp ; rcx is the address to move
 10598 0000842D 4889F3                  	mov rbx, rsi
 10599 00008430 48C1E303                	shl rbx, 3
 10600 00008434 48F7DB                  	neg rbx
 10601 00008437 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10602 0000843A 488B09                  	mov rcx, [rcx]
 10603 0000843D 48890B                  	mov [rbx], rcx
 10604 00008440 48FFC6                  	inc rsi
 10605 00008443 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf4
 10606                                  .L_tc_recycle_frame_done_5cf4:	 ; end recycle frame loop
 10607 00008445 BB04000000              	mov rbx, 4
 10608 0000844A 48C1E303                	shl rbx, 3
 10609 0000844E 48F7DB                  	neg rbx
 10610 00008451 4801FB                  	add rbx, rdi
 10611 00008454 4889DC                  	mov rsp, rbx
 10612 00008457 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10613 0000845B FFE3                    	jmp rbx
 10614 0000845D EB7A                    	jmp .L_if_end_56a1
 10615                                  	.L_if_else_56a1:
 10616 0000845F 6A00                    	push 0
 10617 00008461 488B4510                	mov rax, qword [rbp + 8*2]
 10618 00008465 488B00                  	mov rax, qword [rax + 8*0]
 10619 00008468 488B00                  	mov rax, qword [rax + 8*0]
 10620                                  	assert_closure(rax)
    42 0000846B 803805              <1>  cmp byte [%1], %2
    43 0000846E 0F85C0BC0000        <1>  jne L_error_incorrect_type
 10621 00008474 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10622 00008478 53                      	push rbx
 10623 00008479 FF7508                  	push RET_ADDR
 10624 0000847C 488B7D18                	mov rdi, COUNT
 10625 00008480 4883C703                	add rdi, 3
 10626 00008484 48C1E703                	shl rdi, 3
 10627 00008488 4801EF                  	add rdi, rbp
 10628 0000848B 488B6D00                	mov rbp, OLD_RDP
 10629 0000848F BE00000000              	mov rsi, 0
 10630                                  .L_tc_recycle_frame_loop_5cf5:	 ; start recycle frame loop
 10631 00008494 4883FE03                	cmp rsi, 3
 10632 00008498 7427                    	je .L_tc_recycle_frame_done_5cf5
 10633 0000849A B902000000              	mov rcx, 2
 10634 0000849F 4829F1                  	sub rcx, rsi
 10635 000084A2 48C1E103                	shl rcx, 3
 10636 000084A6 4801E1                  	add rcx, rsp ; rcx is the address to move
 10637 000084A9 4889F3                  	mov rbx, rsi
 10638 000084AC 48C1E303                	shl rbx, 3
 10639 000084B0 48F7DB                  	neg rbx
 10640 000084B3 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10641 000084B6 488B09                  	mov rcx, [rcx]
 10642 000084B9 48890B                  	mov [rbx], rcx
 10643 000084BC 48FFC6                  	inc rsi
 10644 000084BF EBD3                    	jmp .L_tc_recycle_frame_loop_5cf5
 10645                                  .L_tc_recycle_frame_done_5cf5:	 ; end recycle frame loop
 10646 000084C1 BB02000000              	mov rbx, 2
 10647 000084C6 48C1E303                	shl rbx, 3
 10648 000084CA 48F7DB                  	neg rbx
 10649 000084CD 4801FB                  	add rbx, rdi
 10650 000084D0 4889DC                  	mov rsp, rbx
 10651 000084D3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10652 000084D7 FFE3                    	jmp rbx
 10653                                  	.L_if_end_56a1:
 10654                                  	.L_if_end_56a0:
 10655 000084D9 E9AD020000              	jmp .L_if_end_569f
 10656                                  	.L_if_else_569f:
 10657 000084DE 488B4520                	mov rax, PARAM(0)
 10658 000084E2 50                      	push rax
 10659 000084E3 6A01                    	push 1
 10660 000084E5 488B0425[40000000]      	mov rax, qword [free_var_8]
 10661                                  	assert_closure(rax)
    42 000084ED 803805              <1>  cmp byte [%1], %2
    43 000084F0 0F853EBC0000        <1>  jne L_error_incorrect_type
 10662 000084F6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10663 000084FA 53                      	push rbx
 10664 000084FB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10665 000084FF FFD3                    	call rbx
 10666 00008501 483D[02000000]          	cmp rax, sob_boolean_false
 10667 00008507 0F8404020000            	je .L_if_else_56a2
 10668 0000850D 488B4528                	mov rax, PARAM(1)
 10669 00008511 50                      	push rax
 10670 00008512 6A01                    	push 1
 10671 00008514 488B0425[48000000]      	mov rax, qword [free_var_9]
 10672                                  	assert_closure(rax)
    42 0000851C 803805              <1>  cmp byte [%1], %2
    43 0000851F 0F850FBC0000        <1>  jne L_error_incorrect_type
 10673 00008525 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10674 00008529 53                      	push rbx
 10675 0000852A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10676 0000852E FFD3                    	call rbx
 10677 00008530 483D[02000000]          	cmp rax, sob_boolean_false
 10678 00008536 0F84A6000000            	je .L_if_else_56a3
 10679 0000853C 488B4528                	mov rax, PARAM(1)
 10680 00008540 50                      	push rax
 10681 00008541 6A01                    	push 1
 10682 00008543 488B0425[B8000000]      	mov rax, qword [free_var_23]
 10683                                  	assert_closure(rax)
    42 0000854B 803805              <1>  cmp byte [%1], %2
    43 0000854E 0F85E0BB0000        <1>  jne L_error_incorrect_type
 10684 00008554 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10685 00008558 53                      	push rbx
 10686 00008559 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10687 0000855D FFD3                    	call rbx
 10688 0000855F 50                      	push rax
 10689 00008560 488B4520                	mov rax, PARAM(0)
 10690 00008564 50                      	push rax
 10691 00008565 6A02                    	push 2
 10692 00008567 488B0425[08010000]      	mov rax, qword [free_var_33]
 10693                                  	assert_closure(rax)
    42 0000856F 803805              <1>  cmp byte [%1], %2
    43 00008572 0F85BCBB0000        <1>  jne L_error_incorrect_type
 10694 00008578 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10695 0000857C 53                      	push rbx
 10696 0000857D FF7508                  	push RET_ADDR
 10697 00008580 488B7D18                	mov rdi, COUNT
 10698 00008584 4883C703                	add rdi, 3
 10699 00008588 48C1E703                	shl rdi, 3
 10700 0000858C 4801EF                  	add rdi, rbp
 10701 0000858F 488B6D00                	mov rbp, OLD_RDP
 10702 00008593 BE00000000              	mov rsi, 0
 10703                                  .L_tc_recycle_frame_loop_5cf6:	 ; start recycle frame loop
 10704 00008598 4883FE05                	cmp rsi, 5
 10705 0000859C 7427                    	je .L_tc_recycle_frame_done_5cf6
 10706 0000859E B904000000              	mov rcx, 4
 10707 000085A3 4829F1                  	sub rcx, rsi
 10708 000085A6 48C1E103                	shl rcx, 3
 10709 000085AA 4801E1                  	add rcx, rsp ; rcx is the address to move
 10710 000085AD 4889F3                  	mov rbx, rsi
 10711 000085B0 48C1E303                	shl rbx, 3
 10712 000085B4 48F7DB                  	neg rbx
 10713 000085B7 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10714 000085BA 488B09                  	mov rcx, [rcx]
 10715 000085BD 48890B                  	mov [rbx], rcx
 10716 000085C0 48FFC6                  	inc rsi
 10717 000085C3 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf6
 10718                                  .L_tc_recycle_frame_done_5cf6:	 ; end recycle frame loop
 10719 000085C5 BB04000000              	mov rbx, 4
 10720 000085CA 48C1E303                	shl rbx, 3
 10721 000085CE 48F7DB                  	neg rbx
 10722 000085D1 4801FB                  	add rbx, rdi
 10723 000085D4 4889DC                  	mov rsp, rbx
 10724 000085D7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10725 000085DB FFE3                    	jmp rbx
 10726 000085DD E92D010000              	jmp .L_if_end_56a3
 10727                                  	.L_if_else_56a3:
 10728 000085E2 488B4528                	mov rax, PARAM(1)
 10729 000085E6 50                      	push rax
 10730 000085E7 6A01                    	push 1
 10731 000085E9 488B0425[40000000]      	mov rax, qword [free_var_8]
 10732                                  	assert_closure(rax)
    42 000085F1 803805              <1>  cmp byte [%1], %2
    43 000085F4 0F853ABB0000        <1>  jne L_error_incorrect_type
 10733 000085FA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10734 000085FE 53                      	push rbx
 10735 000085FF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10736 00008603 FFD3                    	call rbx
 10737 00008605 483D[02000000]          	cmp rax, sob_boolean_false
 10738 0000860B 0F8484000000            	je .L_if_else_56a4
 10739 00008611 488B4528                	mov rax, PARAM(1)
 10740 00008615 50                      	push rax
 10741 00008616 488B4520                	mov rax, PARAM(0)
 10742 0000861A 50                      	push rax
 10743 0000861B 6A02                    	push 2
 10744 0000861D 488B0425[08010000]      	mov rax, qword [free_var_33]
 10745                                  	assert_closure(rax)
    42 00008625 803805              <1>  cmp byte [%1], %2
    43 00008628 0F8506BB0000        <1>  jne L_error_incorrect_type
 10746 0000862E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10747 00008632 53                      	push rbx
 10748 00008633 FF7508                  	push RET_ADDR
 10749 00008636 488B7D18                	mov rdi, COUNT
 10750 0000863A 4883C703                	add rdi, 3
 10751 0000863E 48C1E703                	shl rdi, 3
 10752 00008642 4801EF                  	add rdi, rbp
 10753 00008645 488B6D00                	mov rbp, OLD_RDP
 10754 00008649 BE00000000              	mov rsi, 0
 10755                                  .L_tc_recycle_frame_loop_5cf7:	 ; start recycle frame loop
 10756 0000864E 4883FE05                	cmp rsi, 5
 10757 00008652 7427                    	je .L_tc_recycle_frame_done_5cf7
 10758 00008654 B904000000              	mov rcx, 4
 10759 00008659 4829F1                  	sub rcx, rsi
 10760 0000865C 48C1E103                	shl rcx, 3
 10761 00008660 4801E1                  	add rcx, rsp ; rcx is the address to move
 10762 00008663 4889F3                  	mov rbx, rsi
 10763 00008666 48C1E303                	shl rbx, 3
 10764 0000866A 48F7DB                  	neg rbx
 10765 0000866D 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10766 00008670 488B09                  	mov rcx, [rcx]
 10767 00008673 48890B                  	mov [rbx], rcx
 10768 00008676 48FFC6                  	inc rsi
 10769 00008679 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf7
 10770                                  .L_tc_recycle_frame_done_5cf7:	 ; end recycle frame loop
 10771 0000867B BB04000000              	mov rbx, 4
 10772 00008680 48C1E303                	shl rbx, 3
 10773 00008684 48F7DB                  	neg rbx
 10774 00008687 4801FB                  	add rbx, rdi
 10775 0000868A 4889DC                  	mov rsp, rbx
 10776 0000868D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10777 00008691 FFE3                    	jmp rbx
 10778 00008693 EB7A                    	jmp .L_if_end_56a4
 10779                                  	.L_if_else_56a4:
 10780 00008695 6A00                    	push 0
 10781 00008697 488B4510                	mov rax, qword [rbp + 8*2]
 10782 0000869B 488B00                  	mov rax, qword [rax + 8*0]
 10783 0000869E 488B00                  	mov rax, qword [rax + 8*0]
 10784                                  	assert_closure(rax)
    42 000086A1 803805              <1>  cmp byte [%1], %2
    43 000086A4 0F858ABA0000        <1>  jne L_error_incorrect_type
 10785 000086AA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10786 000086AE 53                      	push rbx
 10787 000086AF FF7508                  	push RET_ADDR
 10788 000086B2 488B7D18                	mov rdi, COUNT
 10789 000086B6 4883C703                	add rdi, 3
 10790 000086BA 48C1E703                	shl rdi, 3
 10791 000086BE 4801EF                  	add rdi, rbp
 10792 000086C1 488B6D00                	mov rbp, OLD_RDP
 10793 000086C5 BE00000000              	mov rsi, 0
 10794                                  .L_tc_recycle_frame_loop_5cf8:	 ; start recycle frame loop
 10795 000086CA 4883FE03                	cmp rsi, 3
 10796 000086CE 7427                    	je .L_tc_recycle_frame_done_5cf8
 10797 000086D0 B902000000              	mov rcx, 2
 10798 000086D5 4829F1                  	sub rcx, rsi
 10799 000086D8 48C1E103                	shl rcx, 3
 10800 000086DC 4801E1                  	add rcx, rsp ; rcx is the address to move
 10801 000086DF 4889F3                  	mov rbx, rsi
 10802 000086E2 48C1E303                	shl rbx, 3
 10803 000086E6 48F7DB                  	neg rbx
 10804 000086E9 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10805 000086EC 488B09                  	mov rcx, [rcx]
 10806 000086EF 48890B                  	mov [rbx], rcx
 10807 000086F2 48FFC6                  	inc rsi
 10808 000086F5 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf8
 10809                                  .L_tc_recycle_frame_done_5cf8:	 ; end recycle frame loop
 10810 000086F7 BB02000000              	mov rbx, 2
 10811 000086FC 48C1E303                	shl rbx, 3
 10812 00008700 48F7DB                  	neg rbx
 10813 00008703 4801FB                  	add rbx, rdi
 10814 00008706 4889DC                  	mov rsp, rbx
 10815 00008709 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10816 0000870D FFE3                    	jmp rbx
 10817                                  	.L_if_end_56a4:
 10818                                  	.L_if_end_56a3:
 10819 0000870F EB7A                    	jmp .L_if_end_56a2
 10820                                  	.L_if_else_56a2:
 10821 00008711 6A00                    	push 0
 10822 00008713 488B4510                	mov rax, qword [rbp + 8*2]
 10823 00008717 488B00                  	mov rax, qword [rax + 8*0]
 10824 0000871A 488B00                  	mov rax, qword [rax + 8*0]
 10825                                  	assert_closure(rax)
    42 0000871D 803805              <1>  cmp byte [%1], %2
    43 00008720 0F850EBA0000        <1>  jne L_error_incorrect_type
 10826 00008726 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10827 0000872A 53                      	push rbx
 10828 0000872B FF7508                  	push RET_ADDR
 10829 0000872E 488B7D18                	mov rdi, COUNT
 10830 00008732 4883C703                	add rdi, 3
 10831 00008736 48C1E703                	shl rdi, 3
 10832 0000873A 4801EF                  	add rdi, rbp
 10833 0000873D 488B6D00                	mov rbp, OLD_RDP
 10834 00008741 BE00000000              	mov rsi, 0
 10835                                  .L_tc_recycle_frame_loop_5cf9:	 ; start recycle frame loop
 10836 00008746 4883FE03                	cmp rsi, 3
 10837 0000874A 7427                    	je .L_tc_recycle_frame_done_5cf9
 10838 0000874C B902000000              	mov rcx, 2
 10839 00008751 4829F1                  	sub rcx, rsi
 10840 00008754 48C1E103                	shl rcx, 3
 10841 00008758 4801E1                  	add rcx, rsp ; rcx is the address to move
 10842 0000875B 4889F3                  	mov rbx, rsi
 10843 0000875E 48C1E303                	shl rbx, 3
 10844 00008762 48F7DB                  	neg rbx
 10845 00008765 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10846 00008768 488B09                  	mov rcx, [rcx]
 10847 0000876B 48890B                  	mov [rbx], rcx
 10848 0000876E 48FFC6                  	inc rsi
 10849 00008771 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf9
 10850                                  .L_tc_recycle_frame_done_5cf9:	 ; end recycle frame loop
 10851 00008773 BB02000000              	mov rbx, 2
 10852 00008778 48C1E303                	shl rbx, 3
 10853 0000877C 48F7DB                  	neg rbx
 10854 0000877F 4801FB                  	add rbx, rdi
 10855 00008782 4889DC                  	mov rsp, rbx
 10856 00008785 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10857 00008789 FFE3                    	jmp rbx
 10858                                  	.L_if_end_56a2:
 10859                                  	.L_if_end_569f:
 10860 0000878B C9                      	leave
 10861 0000878C C22000                  	ret 8 * (2 + 2)
 10862                                  .L_lambda_simple_end_4f6c:	; new closure is in rax
 10863 0000878F 50                      	push rax
 10864 00008790 6A01                    	push 1
 10865 00008792 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10866 00008797 E818A10000              	call malloc
 10867 0000879C 50                      	push rax
 10868 0000879D BF08000000              	mov rdi, 8 * 1	; new rib
 10869 000087A2 E80DA10000              	call malloc
 10870 000087A7 50                      	push rax
 10871 000087A8 BF10000000              	mov rdi, 8 * 2	; extended env
 10872 000087AD E802A10000              	call malloc
 10873 000087B2 488B7D10                	mov rdi, ENV
 10874 000087B6 BE00000000              	mov rsi, 0
 10875 000087BB BA01000000              	mov rdx, 1
 10876                                  .L_lambda_simple_env_loop_4f6d:	; ext_env[i + 1] <-- env[i]
 10877 000087C0 4883FE01                	cmp rsi, 1
 10878 000087C4 7410                    	je .L_lambda_simple_env_end_4f6d
 10879 000087C6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 10880 000087CA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10881 000087CE 48FFC6                  	inc rsi
 10882 000087D1 48FFC2                  	inc rdx
 10883 000087D4 EBEA                    	jmp .L_lambda_simple_env_loop_4f6d
 10884                                  .L_lambda_simple_env_end_4f6d:
 10885 000087D6 5B                      	pop rbx
 10886 000087D7 BE00000000              	mov rsi, 0
 10887                                  .L_lambda_simple_params_loop_4f6d:	; copy params
 10888 000087DC 4883FE01                	cmp rsi, 1
 10889 000087E0 740E                    	je .L_lambda_simple_params_end_4f6d
 10890 000087E2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10891 000087E7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10892 000087EB 48FFC6                  	inc rsi
 10893 000087EE EBEC                    	jmp .L_lambda_simple_params_loop_4f6d
 10894                                  .L_lambda_simple_params_end_4f6d:
 10895 000087F0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10896 000087F3 4889C3                  	mov rbx, rax
 10897 000087F6 58                      	pop rax
 10898 000087F7 C60005                  	mov byte [rax], T_closure
 10899 000087FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10900 000087FE 48C74009[0B880000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f6d
 10901 00008806 E912040000              	jmp .L_lambda_simple_end_4f6d
 10902                                  .L_lambda_simple_code_4f6d:	; lambda-simple body
 10903 0000880B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10904 00008811 740B                    	je .L_lambda_simple_arity_check_ok_4f6d
 10905 00008813 FF742410                	push qword [rsp + 8 * 2]
 10906 00008817 6A01                    	push 1
 10907 00008819 E94FA00000              	jmp L_error_incorrect_arity_simple
 10908                                  .L_lambda_simple_arity_check_ok_4f6d:
 10909 0000881E C8000000                	enter 0, 0
 10910 00008822 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10911 00008827 E888A00000              	call malloc
 10912 0000882C 50                      	push rax
 10913 0000882D BF08000000              	mov rdi, 8 * 1	; new rib
 10914 00008832 E87DA00000              	call malloc
 10915 00008837 50                      	push rax
 10916 00008838 BF18000000              	mov rdi, 8 * 3	; extended env
 10917 0000883D E872A00000              	call malloc
 10918 00008842 488B7D10                	mov rdi, ENV
 10919 00008846 BE00000000              	mov rsi, 0
 10920 0000884B BA01000000              	mov rdx, 1
 10921                                  .L_lambda_opt_env_loop_0c91:	; ext_env[i + 1] <-- env[i]
 10922 00008850 4883FE02                	cmp rsi, 2
 10923 00008854 7410                    	je .L_lambda_opt_env_end_0c91
 10924 00008856 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10925 0000885A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10926 0000885E 48FFC6                  	inc rsi
 10927 00008861 48FFC2                  	inc rdx
 10928 00008864 EBEA                    	jmp .L_lambda_opt_env_loop_0c91
 10929                                  .L_lambda_opt_env_end_0c91:
 10930 00008866 5B                      	pop rbx
 10931 00008867 BE00000000              	mov rsi, 0
 10932                                  .L_lambda_opt_params_loop_0c91:	; copy params
 10933 0000886C 4883FE01                	cmp rsi, 1
 10934 00008870 740E                    	je .L_lambda_opt_params_end_0c91
 10935 00008872 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10936 00008877 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10937 0000887B 48FFC6                  	inc rsi
 10938 0000887E EBEC                    	jmp .L_lambda_opt_params_loop_0c91
 10939                                  .L_lambda_opt_params_end_0c91:
 10940 00008880 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10941 00008883 4889C3                  	mov rbx, rax
 10942 00008886 58                      	pop rax
 10943 00008887 C60005                  	mov byte [rax], T_closure
 10944 0000888A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10945 0000888E 48C74009[9B880000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c91
 10946 00008896 E97E030000              	jmp .L_lambda_opt_end_0c91
 10947                                  .L_lambda_opt_code_0c91:	; lambda-opt body
 10948 0000889B 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 10949 000088A0 4889FB                  	mov rbx, rdi
 10950 000088A3 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 10951 000088A7 4883FB00                	cmp rbx, 0
 10952 000088AB 7F45                    	jg .L_lambda_opt_arity_check_more_0c91
 10953                                  .L_lambda_opt_arity_check_exact_0c91:	 ; if params in opt is exact
 10954 000088AD 4883EC08                	sub rsp, 8
 10955 000088B1 BE00000000              	mov rsi, 0 ; index
 10956                                  .L_lambda_opt_stack_enlarge_loop_0c91:	 ; stack loop enlarge start
 10957 000088B6 4883FE04                	cmp rsi, 4
 10958 000088BA 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c91
 10959 000088BC 4889F7                  	mov rdi, rsi
 10960 000088BF 48FFC7                  	inc rdi
 10961 000088C2 48C1E703                	shl rdi, 3
 10962 000088C6 4801E7                  	add rdi, rsp
 10963 000088C9 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 10964 000088CC 4883EB08                	sub rbx, 8
 10965 000088D0 488B3F                  	mov rdi, [rdi]
 10966 000088D3 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 10967 000088D6 48FFC6                  	inc rsi
 10968 000088D9 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c91
 10969                                  .L_lambda_opt_stack_enlarge_loop_exit_0c91:	 ; end of stack enlarge loop
 10970 000088DB 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 10970 000088E0 [01000000]         
 10971 000088E4 48C744241002000000      	mov qword [rsp + 2*8], 2
 10972 000088ED E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c91
 10973                                  .L_lambda_opt_arity_check_more_0c91:	 ; if params in opt is more
 10974 000088F2 48B8-                   	mov rax, sob_nil
 10974 000088F4 [0100000000000000] 
 10975 000088FC 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 10976 000088FF 48FFCE                  	dec rsi
 10977                                  .L_lambda_opt_list_create_loop_0c91:	; start of list creation loop
 10978 00008902 4883FEFF                	cmp rsi, -1
 10979 00008906 7422                    	je .L_lambda_opt_list_create_loop_exit_0c91
 10980 00008908 488D4E04                	lea rcx, [rsi + (3 + 1)]
 10981 0000890C 48C1E103                	shl rcx, 3
 10982 00008910 4801E1                  	add rcx, rsp
 10983 00008913 488B09                  	mov rcx, [rcx]
 10984 00008916 56                      	push rsi ; save params
 10985 00008917 53                      	push rbx
 10986                                  
 10987 00008918 50                      	push rax ; cdr
 10988 00008919 51                      	push rcx ; car
 10989 0000891A 6A02                    	push qword 2 ; push num of args
 10990 0000891C 6A01                    	push qword 1 ; push garbage as env
 10991 0000891E E818A90000              	call L_code_ptr_cons
 10992                                  
 10993 00008923 5B                      	pop rbx ; restore params
 10994 00008924 5E                      	pop rsi
 10995 00008925 48FFCE                  	dec rsi
 10996 00008928 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c91
 10997                                  .L_lambda_opt_list_create_loop_exit_0c91:	; end of list creation loop
 10998 0000892A 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 10999 0000892F 4883C302                	add rbx, 2
 11000 00008933 4889DF                  	mov rdi, rbx
 11001 00008936 48C1E703                	shl rdi,3
 11002 0000893A 4801E7                  	add rdi, rsp
 11003 0000893D 488907                  	mov [rdi], rax
 11004 00008940 BE00000000              	mov rsi, 0 ;index
 11005                                  .L_lambda_opt_stack_shrink_loop_0c91:	; start of stack shrink loop
 11006 00008945 4883FE04                	cmp rsi, 4
 11007 00008949 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c91
 11008 0000894B BF03000000              	mov rdi, 3
 11009 00008950 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 11010 00008953 4889D9                  	mov rcx, rbx
 11011 00008956 4829F1                  	sub rcx, rsi
 11012 00008959 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 11013 0000895C 4889FA                  	mov rdx, rdi
 11014 0000895F 48C1E203                	shl rdx, 3
 11015 00008963 4801E2                  	add rdx, rsp
 11016 00008966 48C1E103                	shl rcx, 3
 11017 0000896A 4801E1                  	add rcx, rsp
 11018 0000896D 488B12                  	mov rdx, [rdx]
 11019 00008970 488911                  	mov [rcx], rdx
 11020 00008973 48FFC6                  	inc rsi
 11021 00008976 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c91
 11022                                  .L_lambda_opt_stack_shrink_loop_exit_0c91:	; end of stack shrink loop
 11023 00008978 4883EB02                	sub rbx, 2 ; rbx has number of args
 11024 0000897C 4883EB02                	sub rbx, 2
 11025 00008980 48C1E303                	shl rbx, 3
 11026 00008984 4801DC                  	add rsp, rbx
 11027 00008987 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 11028                                  .L_lambda_opt_stack_adjusted_0c91:
 11029 00008990 C8000000                	enter 0, 0
 11030 00008994 488B4528                	mov rax, PARAM(1)
 11031 00008998 50                      	push rax
 11032 00008999 6A01                    	push 1
 11033 0000899B 488B0425[00000000]      	mov rax, qword [free_var_0]
 11034                                  	assert_closure(rax)
    42 000089A3 803805              <1>  cmp byte [%1], %2
    43 000089A6 0F8588B70000        <1>  jne L_error_incorrect_type
 11035 000089AC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11036 000089B0 53                      	push rbx
 11037 000089B1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11038 000089B5 FFD3                    	call rbx
 11039 000089B7 483D[02000000]          	cmp rax, sob_boolean_false
 11040 000089BD 0F848D000000            	je .L_if_else_56a5
 11041 000089C3 488B4520                	mov rax, PARAM(0)
 11042 000089C7 50                      	push rax
 11043 000089C8 488D0425[80000000]      	lea rax, [128 + L_constants]
 11044 000089D0 50                      	push rax
 11045 000089D1 6A02                    	push 2
 11046 000089D3 488B4510                	mov rax, qword [rbp + 8*2]
 11047 000089D7 488B00                  	mov rax, qword [rax + 8*0]
 11048 000089DA 488B00                  	mov rax, qword [rax + 8*0]
 11049                                  	assert_closure(rax)
    42 000089DD 803805              <1>  cmp byte [%1], %2
    43 000089E0 0F854EB70000        <1>  jne L_error_incorrect_type
 11050 000089E6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11051 000089EA 53                      	push rbx
 11052 000089EB FF7508                  	push RET_ADDR
 11053 000089EE 488B7D18                	mov rdi, COUNT
 11054 000089F2 4883C703                	add rdi, 3
 11055 000089F6 48C1E703                	shl rdi, 3
 11056 000089FA 4801EF                  	add rdi, rbp
 11057 000089FD 488B6D00                	mov rbp, OLD_RDP
 11058 00008A01 BE00000000              	mov rsi, 0
 11059                                  .L_tc_recycle_frame_loop_5cfa:	 ; start recycle frame loop
 11060 00008A06 4883FE05                	cmp rsi, 5
 11061 00008A0A 7427                    	je .L_tc_recycle_frame_done_5cfa
 11062 00008A0C B904000000              	mov rcx, 4
 11063 00008A11 4829F1                  	sub rcx, rsi
 11064 00008A14 48C1E103                	shl rcx, 3
 11065 00008A18 4801E1                  	add rcx, rsp ; rcx is the address to move
 11066 00008A1B 4889F3                  	mov rbx, rsi
 11067 00008A1E 48C1E303                	shl rbx, 3
 11068 00008A22 48F7DB                  	neg rbx
 11069 00008A25 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11070 00008A28 488B09                  	mov rcx, [rcx]
 11071 00008A2B 48890B                  	mov [rbx], rcx
 11072 00008A2E 48FFC6                  	inc rsi
 11073 00008A31 EBD3                    	jmp .L_tc_recycle_frame_loop_5cfa
 11074                                  .L_tc_recycle_frame_done_5cfa:	 ; end recycle frame loop
 11075 00008A33 BB04000000              	mov rbx, 4
 11076 00008A38 48C1E303                	shl rbx, 3
 11077 00008A3C 48F7DB                  	neg rbx
 11078 00008A3F 4801FB                  	add rbx, rdi
 11079 00008A42 4889DC                  	mov rsp, rbx
 11080 00008A45 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11081 00008A49 FFE3                    	jmp rbx
 11082 00008A4B E9C5010000              	jmp .L_if_end_56a5
 11083                                  	.L_if_else_56a5:
 11084 00008A50 488B4528                	mov rax, PARAM(1)
 11085 00008A54 50                      	push rax
 11086 00008A55 488D0425[80000000]      	lea rax, [128 + L_constants]
 11087 00008A5D 50                      	push rax
 11088 00008A5E 488B0425[18030000]      	mov rax, qword [free_var_99]
 11089 00008A66 50                      	push rax
 11090 00008A67 6A03                    	push 3
 11091 00008A69 488B0425[F8020000]      	mov rax, qword [free_var_95]
 11092                                  	assert_closure(rax)
    42 00008A71 803805              <1>  cmp byte [%1], %2
    43 00008A74 0F85BAB60000        <1>  jne L_error_incorrect_type
 11093 00008A7A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11094 00008A7E 53                      	push rbx
 11095 00008A7F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11096 00008A83 FFD3                    	call rbx
 11097 00008A85 50                      	push rax
 11098 00008A86 6A01                    	push 1
 11099 00008A88 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11100 00008A8D E8229E0000              	call malloc
 11101 00008A92 50                      	push rax
 11102 00008A93 BF10000000              	mov rdi, 8 * 2	; new rib
 11103 00008A98 E8179E0000              	call malloc
 11104 00008A9D 50                      	push rax
 11105 00008A9E BF20000000              	mov rdi, 8 * 4	; extended env
 11106 00008AA3 E80C9E0000              	call malloc
 11107 00008AA8 488B7D10                	mov rdi, ENV
 11108 00008AAC BE00000000              	mov rsi, 0
 11109 00008AB1 BA01000000              	mov rdx, 1
 11110                                  .L_lambda_simple_env_loop_4f6e:	; ext_env[i + 1] <-- env[i]
 11111 00008AB6 4883FE03                	cmp rsi, 3
 11112 00008ABA 7410                    	je .L_lambda_simple_env_end_4f6e
 11113 00008ABC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 11114 00008AC0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11115 00008AC4 48FFC6                  	inc rsi
 11116 00008AC7 48FFC2                  	inc rdx
 11117 00008ACA EBEA                    	jmp .L_lambda_simple_env_loop_4f6e
 11118                                  .L_lambda_simple_env_end_4f6e:
 11119 00008ACC 5B                      	pop rbx
 11120 00008ACD BE00000000              	mov rsi, 0
 11121                                  .L_lambda_simple_params_loop_4f6e:	; copy params
 11122 00008AD2 4883FE02                	cmp rsi, 2
 11123 00008AD6 740E                    	je .L_lambda_simple_params_end_4f6e
 11124 00008AD8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11125 00008ADD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11126 00008AE1 48FFC6                  	inc rsi
 11127 00008AE4 EBEC                    	jmp .L_lambda_simple_params_loop_4f6e
 11128                                  .L_lambda_simple_params_end_4f6e:
 11129 00008AE6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11130 00008AE9 4889C3                  	mov rbx, rax
 11131 00008AEC 58                      	pop rax
 11132 00008AED C60005                  	mov byte [rax], T_closure
 11133 00008AF0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11134 00008AF4 48C74009[018B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f6e
 11135 00008AFC E9A6000000              	jmp .L_lambda_simple_end_4f6e
 11136                                  .L_lambda_simple_code_4f6e:	; lambda-simple body
 11137 00008B01 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11138 00008B07 740B                    	je .L_lambda_simple_arity_check_ok_4f6e
 11139 00008B09 FF742410                	push qword [rsp + 8 * 2]
 11140 00008B0D 6A01                    	push 1
 11141 00008B0F E9599D0000              	jmp L_error_incorrect_arity_simple
 11142                                  .L_lambda_simple_arity_check_ok_4f6e:
 11143 00008B14 C8000000                	enter 0, 0
 11144 00008B18 488B4520                	mov rax, PARAM(0)
 11145 00008B1C 50                      	push rax
 11146 00008B1D 488B4510                	mov rax, qword [rbp + 8*2]
 11147 00008B21 488B00                  	mov rax, qword [rax + 8*0]
 11148 00008B24 488B00                  	mov rax, qword [rax + 8*0]
 11149 00008B27 50                      	push rax
 11150 00008B28 6A02                    	push 2
 11151 00008B2A 488B4510                	mov rax, qword [rbp + 8*2]
 11152 00008B2E 488B4008                	mov rax, qword [rax + 8*1]
 11153 00008B32 488B00                  	mov rax, qword [rax + 8*0]
 11154                                  	assert_closure(rax)
    42 00008B35 803805              <1>  cmp byte [%1], %2
    43 00008B38 0F85F6B50000        <1>  jne L_error_incorrect_type
 11155 00008B3E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11156 00008B42 53                      	push rbx
 11157 00008B43 FF7508                  	push RET_ADDR
 11158 00008B46 488B7D18                	mov rdi, COUNT
 11159 00008B4A 4883C703                	add rdi, 3
 11160 00008B4E 48C1E703                	shl rdi, 3
 11161 00008B52 4801EF                  	add rdi, rbp
 11162 00008B55 488B6D00                	mov rbp, OLD_RDP
 11163 00008B59 BE00000000              	mov rsi, 0
 11164                                  .L_tc_recycle_frame_loop_5cfc:	 ; start recycle frame loop
 11165 00008B5E 4883FE05                	cmp rsi, 5
 11166 00008B62 7427                    	je .L_tc_recycle_frame_done_5cfc
 11167 00008B64 B904000000              	mov rcx, 4
 11168 00008B69 4829F1                  	sub rcx, rsi
 11169 00008B6C 48C1E103                	shl rcx, 3
 11170 00008B70 4801E1                  	add rcx, rsp ; rcx is the address to move
 11171 00008B73 4889F3                  	mov rbx, rsi
 11172 00008B76 48C1E303                	shl rbx, 3
 11173 00008B7A 48F7DB                  	neg rbx
 11174 00008B7D 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11175 00008B80 488B09                  	mov rcx, [rcx]
 11176 00008B83 48890B                  	mov [rbx], rcx
 11177 00008B86 48FFC6                  	inc rsi
 11178 00008B89 EBD3                    	jmp .L_tc_recycle_frame_loop_5cfc
 11179                                  .L_tc_recycle_frame_done_5cfc:	 ; end recycle frame loop
 11180 00008B8B BB04000000              	mov rbx, 4
 11181 00008B90 48C1E303                	shl rbx, 3
 11182 00008B94 48F7DB                  	neg rbx
 11183 00008B97 4801FB                  	add rbx, rdi
 11184 00008B9A 4889DC                  	mov rsp, rbx
 11185 00008B9D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11186 00008BA1 FFE3                    	jmp rbx
 11187 00008BA3 C9                      	leave
 11188 00008BA4 C21800                  	ret 8 * (2 + 1)
 11189                                  .L_lambda_simple_end_4f6e:	; new closure is in rax
 11190                                  	assert_closure(rax)
    42 00008BA7 803805              <1>  cmp byte [%1], %2
    43 00008BAA 0F8584B50000        <1>  jne L_error_incorrect_type
 11191 00008BB0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11192 00008BB4 53                      	push rbx
 11193 00008BB5 FF7508                  	push RET_ADDR
 11194 00008BB8 488B7D18                	mov rdi, COUNT
 11195 00008BBC 4883C703                	add rdi, 3
 11196 00008BC0 48C1E703                	shl rdi, 3
 11197 00008BC4 4801EF                  	add rdi, rbp
 11198 00008BC7 488B6D00                	mov rbp, OLD_RDP
 11199 00008BCB BE00000000              	mov rsi, 0
 11200                                  .L_tc_recycle_frame_loop_5cfb:	 ; start recycle frame loop
 11201 00008BD0 4883FE04                	cmp rsi, 4
 11202 00008BD4 7427                    	je .L_tc_recycle_frame_done_5cfb
 11203 00008BD6 B903000000              	mov rcx, 3
 11204 00008BDB 4829F1                  	sub rcx, rsi
 11205 00008BDE 48C1E103                	shl rcx, 3
 11206 00008BE2 4801E1                  	add rcx, rsp ; rcx is the address to move
 11207 00008BE5 4889F3                  	mov rbx, rsi
 11208 00008BE8 48C1E303                	shl rbx, 3
 11209 00008BEC 48F7DB                  	neg rbx
 11210 00008BEF 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11211 00008BF2 488B09                  	mov rcx, [rcx]
 11212 00008BF5 48890B                  	mov [rbx], rcx
 11213 00008BF8 48FFC6                  	inc rsi
 11214 00008BFB EBD3                    	jmp .L_tc_recycle_frame_loop_5cfb
 11215                                  .L_tc_recycle_frame_done_5cfb:	 ; end recycle frame loop
 11216 00008BFD BB03000000              	mov rbx, 3
 11217 00008C02 48C1E303                	shl rbx, 3
 11218 00008C06 48F7DB                  	neg rbx
 11219 00008C09 4801FB                  	add rbx, rdi
 11220 00008C0C 4889DC                  	mov rsp, rbx
 11221 00008C0F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11222 00008C13 FFE3                    	jmp rbx
 11223                                  	.L_if_end_56a5:
 11224 00008C15 C9                      	leave
 11225 00008C16 C22000                  	ret AND_KILL_FRAME(2)
 11226                                  .L_lambda_opt_end_0c91:	; new closure is in rax
 11227 00008C19 C9                      	leave
 11228 00008C1A C21800                  	ret 8 * (2 + 1)
 11229                                  .L_lambda_simple_end_4f6d:	; new closure is in rax
 11230                                  	assert_closure(rax)
    42 00008C1D 803805              <1>  cmp byte [%1], %2
    43 00008C20 0F850EB50000        <1>  jne L_error_incorrect_type
 11231 00008C26 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11232 00008C2A 53                      	push rbx
 11233 00008C2B FF7508                  	push RET_ADDR
 11234 00008C2E 488B7D18                	mov rdi, COUNT
 11235 00008C32 4883C703                	add rdi, 3
 11236 00008C36 48C1E703                	shl rdi, 3
 11237 00008C3A 4801EF                  	add rdi, rbp
 11238 00008C3D 488B6D00                	mov rbp, OLD_RDP
 11239 00008C41 BE00000000              	mov rsi, 0
 11240                                  .L_tc_recycle_frame_loop_5cf2:	 ; start recycle frame loop
 11241 00008C46 4883FE04                	cmp rsi, 4
 11242 00008C4A 7427                    	je .L_tc_recycle_frame_done_5cf2
 11243 00008C4C B903000000              	mov rcx, 3
 11244 00008C51 4829F1                  	sub rcx, rsi
 11245 00008C54 48C1E103                	shl rcx, 3
 11246 00008C58 4801E1                  	add rcx, rsp ; rcx is the address to move
 11247 00008C5B 4889F3                  	mov rbx, rsi
 11248 00008C5E 48C1E303                	shl rbx, 3
 11249 00008C62 48F7DB                  	neg rbx
 11250 00008C65 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11251 00008C68 488B09                  	mov rcx, [rcx]
 11252 00008C6B 48890B                  	mov [rbx], rcx
 11253 00008C6E 48FFC6                  	inc rsi
 11254 00008C71 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf2
 11255                                  .L_tc_recycle_frame_done_5cf2:	 ; end recycle frame loop
 11256 00008C73 BB03000000              	mov rbx, 3
 11257 00008C78 48C1E303                	shl rbx, 3
 11258 00008C7C 48F7DB                  	neg rbx
 11259 00008C7F 4801FB                  	add rbx, rdi
 11260 00008C82 4889DC                  	mov rsp, rbx
 11261 00008C85 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11262 00008C89 FFE3                    	jmp rbx
 11263 00008C8B C9                      	leave
 11264 00008C8C C21800                  	ret 8 * (2 + 1)
 11265                                  .L_lambda_simple_end_4f6b:	; new closure is in rax
 11266                                  	assert_closure(rax)
    42 00008C8F 803805              <1>  cmp byte [%1], %2
    43 00008C92 0F859CB40000        <1>  jne L_error_incorrect_type
 11267 00008C98 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11268 00008C9C 53                      	push rbx
 11269 00008C9D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11270 00008CA1 FFD3                    	call rbx
 11271 00008CA3 48890425[20030000]      	mov qword [free_var_100], rax
 11272 00008CAB 48B8-                   	mov rax, sob_void
 11272 00008CAD [0000000000000000] 
 11273                                  
 11274 00008CB5 4889C7                  	mov rdi, rax
 11275 00008CB8 E8089C0000              	call print_sexpr_if_not_void
 11276                                  
 11277 00008CBD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11278 00008CC2 E8ED9B0000              	call malloc
 11279 00008CC7 50                      	push rax
 11280 00008CC8 BF00000000              	mov rdi, 8 * 0	; new rib
 11281 00008CCD E8E29B0000              	call malloc
 11282 00008CD2 50                      	push rax
 11283 00008CD3 BF08000000              	mov rdi, 8 * 1	; extended env
 11284 00008CD8 E8D79B0000              	call malloc
 11285 00008CDD 488B7D10                	mov rdi, ENV
 11286 00008CE1 BE00000000              	mov rsi, 0
 11287 00008CE6 BA01000000              	mov rdx, 1
 11288                                  .L_lambda_simple_env_loop_4f6f:	; ext_env[i + 1] <-- env[i]
 11289 00008CEB 4883FE00                	cmp rsi, 0
 11290 00008CEF 7410                    	je .L_lambda_simple_env_end_4f6f
 11291 00008CF1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 11292 00008CF5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11293 00008CF9 48FFC6                  	inc rsi
 11294 00008CFC 48FFC2                  	inc rdx
 11295 00008CFF EBEA                    	jmp .L_lambda_simple_env_loop_4f6f
 11296                                  .L_lambda_simple_env_end_4f6f:
 11297 00008D01 5B                      	pop rbx
 11298 00008D02 BE00000000              	mov rsi, 0
 11299                                  .L_lambda_simple_params_loop_4f6f:	; copy params
 11300 00008D07 4883FE00                	cmp rsi, 0
 11301 00008D0B 740E                    	je .L_lambda_simple_params_end_4f6f
 11302 00008D0D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11303 00008D12 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11304 00008D16 48FFC6                  	inc rsi
 11305 00008D19 EBEC                    	jmp .L_lambda_simple_params_loop_4f6f
 11306                                  .L_lambda_simple_params_end_4f6f:
 11307 00008D1B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11308 00008D1E 4889C3                  	mov rbx, rax
 11309 00008D21 58                      	pop rax
 11310 00008D22 C60005                  	mov byte [rax], T_closure
 11311 00008D25 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11312 00008D29 48C74009[368D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f6f
 11313 00008D31 E91C010000              	jmp .L_lambda_simple_end_4f6f
 11314                                  .L_lambda_simple_code_4f6f:	; lambda-simple body
 11315 00008D36 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11316 00008D3C 740B                    	je .L_lambda_simple_arity_check_ok_4f6f
 11317 00008D3E FF742410                	push qword [rsp + 8 * 2]
 11318 00008D42 6A01                    	push 1
 11319 00008D44 E9249B0000              	jmp L_error_incorrect_arity_simple
 11320                                  .L_lambda_simple_arity_check_ok_4f6f:
 11321 00008D49 C8000000                	enter 0, 0
 11322 00008D4D 488B4520                	mov rax, PARAM(0)
 11323 00008D51 50                      	push rax
 11324 00008D52 6A01                    	push 1
 11325 00008D54 488B0425[D8000000]      	mov rax, qword [free_var_27]
 11326                                  	assert_closure(rax)
    42 00008D5C 803805              <1>  cmp byte [%1], %2
    43 00008D5F 0F85CFB30000        <1>  jne L_error_incorrect_type
 11327 00008D65 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11328 00008D69 53                      	push rbx
 11329 00008D6A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11330 00008D6E FFD3                    	call rbx
 11331 00008D70 483D[02000000]          	cmp rax, sob_boolean_false
 11332 00008D76 740D                    	je .L_if_else_56a6
 11333 00008D78 488D0425[80000000]      	lea rax, [128 + L_constants]
 11334 00008D80 E9C9000000              	jmp .L_if_end_56a6
 11335                                  	.L_if_else_56a6:
 11336 00008D85 488D0425[80000000]      	lea rax, [128 + L_constants]
 11337 00008D8D 50                      	push rax
 11338 00008D8E 488B4520                	mov rax, PARAM(0)
 11339 00008D92 50                      	push rax
 11340 00008D93 6A02                    	push 2
 11341 00008D95 488B0425[10030000]      	mov rax, qword [free_var_98]
 11342                                  	assert_closure(rax)
    42 00008D9D 803805              <1>  cmp byte [%1], %2
    43 00008DA0 0F858EB30000        <1>  jne L_error_incorrect_type
 11343 00008DA6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11344 00008DAA 53                      	push rbx
 11345 00008DAB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11346 00008DAF FFD3                    	call rbx
 11347 00008DB1 50                      	push rax
 11348 00008DB2 6A01                    	push 1
 11349 00008DB4 488B0425[28030000]      	mov rax, qword [free_var_101]
 11350                                  	assert_closure(rax)
    42 00008DBC 803805              <1>  cmp byte [%1], %2
    43 00008DBF 0F856FB30000        <1>  jne L_error_incorrect_type
 11351 00008DC5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11352 00008DC9 53                      	push rbx
 11353 00008DCA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11354 00008DCE FFD3                    	call rbx
 11355 00008DD0 50                      	push rax
 11356 00008DD1 488B4520                	mov rax, PARAM(0)
 11357 00008DD5 50                      	push rax
 11358 00008DD6 6A02                    	push 2
 11359 00008DD8 488B0425[18030000]      	mov rax, qword [free_var_99]
 11360                                  	assert_closure(rax)
    42 00008DE0 803805              <1>  cmp byte [%1], %2
    43 00008DE3 0F854BB30000        <1>  jne L_error_incorrect_type
 11361 00008DE9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11362 00008DED 53                      	push rbx
 11363 00008DEE FF7508                  	push RET_ADDR
 11364 00008DF1 488B7D18                	mov rdi, COUNT
 11365 00008DF5 4883C703                	add rdi, 3
 11366 00008DF9 48C1E703                	shl rdi, 3
 11367 00008DFD 4801EF                  	add rdi, rbp
 11368 00008E00 488B6D00                	mov rbp, OLD_RDP
 11369 00008E04 BE00000000              	mov rsi, 0
 11370                                  .L_tc_recycle_frame_loop_5cfd:	 ; start recycle frame loop
 11371 00008E09 4883FE05                	cmp rsi, 5
 11372 00008E0D 7427                    	je .L_tc_recycle_frame_done_5cfd
 11373 00008E0F B904000000              	mov rcx, 4
 11374 00008E14 4829F1                  	sub rcx, rsi
 11375 00008E17 48C1E103                	shl rcx, 3
 11376 00008E1B 4801E1                  	add rcx, rsp ; rcx is the address to move
 11377 00008E1E 4889F3                  	mov rbx, rsi
 11378 00008E21 48C1E303                	shl rbx, 3
 11379 00008E25 48F7DB                  	neg rbx
 11380 00008E28 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11381 00008E2B 488B09                  	mov rcx, [rcx]
 11382 00008E2E 48890B                  	mov [rbx], rcx
 11383 00008E31 48FFC6                  	inc rsi
 11384 00008E34 EBD3                    	jmp .L_tc_recycle_frame_loop_5cfd
 11385                                  .L_tc_recycle_frame_done_5cfd:	 ; end recycle frame loop
 11386 00008E36 BB04000000              	mov rbx, 4
 11387 00008E3B 48C1E303                	shl rbx, 3
 11388 00008E3F 48F7DB                  	neg rbx
 11389 00008E42 4801FB                  	add rbx, rdi
 11390 00008E45 4889DC                  	mov rsp, rbx
 11391 00008E48 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11392 00008E4C FFE3                    	jmp rbx
 11393                                  	.L_if_end_56a6:
 11394 00008E4E C9                      	leave
 11395 00008E4F C21800                  	ret 8 * (2 + 1)
 11396                                  .L_lambda_simple_end_4f6f:	; new closure is in rax
 11397 00008E52 48890425[28030000]      	mov qword [free_var_101], rax
 11398 00008E5A 48B8-                   	mov rax, sob_void
 11398 00008E5C [0000000000000000] 
 11399                                  
 11400 00008E64 4889C7                  	mov rdi, rax
 11401 00008E67 E8599A0000              	call print_sexpr_if_not_void
 11402                                  
 11403 00008E6C 488D0425[00000000]      	lea rax, [0 + L_constants]
 11404 00008E74 48890425[30030000]      	mov qword [free_var_102], rax
 11405 00008E7C 48B8-                   	mov rax, sob_void
 11405 00008E7E [0000000000000000] 
 11406                                  
 11407 00008E86 4889C7                  	mov rdi, rax
 11408 00008E89 E8379A0000              	call print_sexpr_if_not_void
 11409                                  
 11410 00008E8E 488D0425[00000000]      	lea rax, [0 + L_constants]
 11411 00008E96 48890425[38030000]      	mov qword [free_var_103], rax
 11412 00008E9E 48B8-                   	mov rax, sob_void
 11412 00008EA0 [0000000000000000] 
 11413                                  
 11414 00008EA8 4889C7                  	mov rdi, rax
 11415 00008EAB E8159A0000              	call print_sexpr_if_not_void
 11416                                  
 11417 00008EB0 488D0425[00000000]      	lea rax, [0 + L_constants]
 11418 00008EB8 48890425[40030000]      	mov qword [free_var_104], rax
 11419 00008EC0 48B8-                   	mov rax, sob_void
 11419 00008EC2 [0000000000000000] 
 11420                                  
 11421 00008ECA 4889C7                  	mov rdi, rax
 11422 00008ECD E8F3990000              	call print_sexpr_if_not_void
 11423                                  
 11424 00008ED2 488D0425[00000000]      	lea rax, [0 + L_constants]
 11425 00008EDA 48890425[48030000]      	mov qword [free_var_105], rax
 11426 00008EE2 48B8-                   	mov rax, sob_void
 11426 00008EE4 [0000000000000000] 
 11427                                  
 11428 00008EEC 4889C7                  	mov rdi, rax
 11429 00008EEF E8D1990000              	call print_sexpr_if_not_void
 11430                                  
 11431 00008EF4 488D0425[00000000]      	lea rax, [0 + L_constants]
 11432 00008EFC 48890425[50030000]      	mov qword [free_var_106], rax
 11433 00008F04 48B8-                   	mov rax, sob_void
 11433 00008F06 [0000000000000000] 
 11434                                  
 11435 00008F0E 4889C7                  	mov rdi, rax
 11436 00008F11 E8AF990000              	call print_sexpr_if_not_void
 11437                                  
 11438 00008F16 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11439 00008F1B E894990000              	call malloc
 11440 00008F20 50                      	push rax
 11441 00008F21 BF00000000              	mov rdi, 8 * 0	; new rib
 11442 00008F26 E889990000              	call malloc
 11443 00008F2B 50                      	push rax
 11444 00008F2C BF08000000              	mov rdi, 8 * 1	; extended env
 11445 00008F31 E87E990000              	call malloc
 11446 00008F36 488B7D10                	mov rdi, ENV
 11447 00008F3A BE00000000              	mov rsi, 0
 11448 00008F3F BA01000000              	mov rdx, 1
 11449                                  .L_lambda_simple_env_loop_4f70:	; ext_env[i + 1] <-- env[i]
 11450 00008F44 4883FE00                	cmp rsi, 0
 11451 00008F48 7410                    	je .L_lambda_simple_env_end_4f70
 11452 00008F4A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 11453 00008F4E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11454 00008F52 48FFC6                  	inc rsi
 11455 00008F55 48FFC2                  	inc rdx
 11456 00008F58 EBEA                    	jmp .L_lambda_simple_env_loop_4f70
 11457                                  .L_lambda_simple_env_end_4f70:
 11458 00008F5A 5B                      	pop rbx
 11459 00008F5B BE00000000              	mov rsi, 0
 11460                                  .L_lambda_simple_params_loop_4f70:	; copy params
 11461 00008F60 4883FE00                	cmp rsi, 0
 11462 00008F64 740E                    	je .L_lambda_simple_params_end_4f70
 11463 00008F66 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11464 00008F6B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11465 00008F6F 48FFC6                  	inc rsi
 11466 00008F72 EBEC                    	jmp .L_lambda_simple_params_loop_4f70
 11467                                  .L_lambda_simple_params_end_4f70:
 11468 00008F74 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11469 00008F77 4889C3                  	mov rbx, rax
 11470 00008F7A 58                      	pop rax
 11471 00008F7B C60005                  	mov byte [rax], T_closure
 11472 00008F7E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11473 00008F82 48C74009[8F8F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f70
 11474 00008F8A E9A5000000              	jmp .L_lambda_simple_end_4f70
 11475                                  .L_lambda_simple_code_4f70:	; lambda-simple body
 11476 00008F8F 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11477 00008F95 740B                    	je .L_lambda_simple_arity_check_ok_4f70
 11478 00008F97 FF742410                	push qword [rsp + 8 * 2]
 11479 00008F9B 6A00                    	push 0
 11480 00008F9D E9CB980000              	jmp L_error_incorrect_arity_simple
 11481                                  .L_lambda_simple_arity_check_ok_4f70:
 11482 00008FA2 C8000000                	enter 0, 0
 11483 00008FA6 488D0425[DB000000]      	lea rax, [219 + L_constants]
 11484 00008FAE 50                      	push rax
 11485 00008FAF 488D0425[D2000000]      	lea rax, [210 + L_constants]
 11486 00008FB7 50                      	push rax
 11487 00008FB8 6A02                    	push 2
 11488 00008FBA 488B0425[30010000]      	mov rax, qword [free_var_38]
 11489                                  	assert_closure(rax)
    42 00008FC2 803805              <1>  cmp byte [%1], %2
    43 00008FC5 0F8569B10000        <1>  jne L_error_incorrect_type
 11490 00008FCB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11491 00008FCF 53                      	push rbx
 11492 00008FD0 FF7508                  	push RET_ADDR
 11493 00008FD3 488B7D18                	mov rdi, COUNT
 11494 00008FD7 4883C703                	add rdi, 3
 11495 00008FDB 48C1E703                	shl rdi, 3
 11496 00008FDF 4801EF                  	add rdi, rbp
 11497 00008FE2 488B6D00                	mov rbp, OLD_RDP
 11498 00008FE6 BE00000000              	mov rsi, 0
 11499                                  .L_tc_recycle_frame_loop_5cfe:	 ; start recycle frame loop
 11500 00008FEB 4883FE05                	cmp rsi, 5
 11501 00008FEF 7427                    	je .L_tc_recycle_frame_done_5cfe
 11502 00008FF1 B904000000              	mov rcx, 4
 11503 00008FF6 4829F1                  	sub rcx, rsi
 11504 00008FF9 48C1E103                	shl rcx, 3
 11505 00008FFD 4801E1                  	add rcx, rsp ; rcx is the address to move
 11506 00009000 4889F3                  	mov rbx, rsi
 11507 00009003 48C1E303                	shl rbx, 3
 11508 00009007 48F7DB                  	neg rbx
 11509 0000900A 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11510 0000900D 488B09                  	mov rcx, [rcx]
 11511 00009010 48890B                  	mov [rbx], rcx
 11512 00009013 48FFC6                  	inc rsi
 11513 00009016 EBD3                    	jmp .L_tc_recycle_frame_loop_5cfe
 11514                                  .L_tc_recycle_frame_done_5cfe:	 ; end recycle frame loop
 11515 00009018 BB04000000              	mov rbx, 4
 11516 0000901D 48C1E303                	shl rbx, 3
 11517 00009021 48F7DB                  	neg rbx
 11518 00009024 4801FB                  	add rbx, rdi
 11519 00009027 4889DC                  	mov rsp, rbx
 11520 0000902A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11521 0000902E FFE3                    	jmp rbx
 11522 00009030 C9                      	leave
 11523 00009031 C21000                  	ret 8 * (2 + 0)
 11524                                  .L_lambda_simple_end_4f70:	; new closure is in rax
 11525 00009034 50                      	push rax
 11526 00009035 6A01                    	push 1
 11527 00009037 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11528 0000903C E873980000              	call malloc
 11529 00009041 50                      	push rax
 11530 00009042 BF00000000              	mov rdi, 8 * 0	; new rib
 11531 00009047 E868980000              	call malloc
 11532 0000904C 50                      	push rax
 11533 0000904D BF08000000              	mov rdi, 8 * 1	; extended env
 11534 00009052 E85D980000              	call malloc
 11535 00009057 488B7D10                	mov rdi, ENV
 11536 0000905B BE00000000              	mov rsi, 0
 11537 00009060 BA01000000              	mov rdx, 1
 11538                                  .L_lambda_simple_env_loop_4f71:	; ext_env[i + 1] <-- env[i]
 11539 00009065 4883FE00                	cmp rsi, 0
 11540 00009069 7410                    	je .L_lambda_simple_env_end_4f71
 11541 0000906B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 11542 0000906F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11543 00009073 48FFC6                  	inc rsi
 11544 00009076 48FFC2                  	inc rdx
 11545 00009079 EBEA                    	jmp .L_lambda_simple_env_loop_4f71
 11546                                  .L_lambda_simple_env_end_4f71:
 11547 0000907B 5B                      	pop rbx
 11548 0000907C BE00000000              	mov rsi, 0
 11549                                  .L_lambda_simple_params_loop_4f71:	; copy params
 11550 00009081 4883FE00                	cmp rsi, 0
 11551 00009085 740E                    	je .L_lambda_simple_params_end_4f71
 11552 00009087 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11553 0000908C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11554 00009090 48FFC6                  	inc rsi
 11555 00009093 EBEC                    	jmp .L_lambda_simple_params_loop_4f71
 11556                                  .L_lambda_simple_params_end_4f71:
 11557 00009095 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11558 00009098 4889C3                  	mov rbx, rax
 11559 0000909B 58                      	pop rax
 11560 0000909C C60005                  	mov byte [rax], T_closure
 11561 0000909F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11562 000090A3 48C74009[B0900000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f71
 11563 000090AB E990170000              	jmp .L_lambda_simple_end_4f71
 11564                                  .L_lambda_simple_code_4f71:	; lambda-simple body
 11565 000090B0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11566 000090B6 740B                    	je .L_lambda_simple_arity_check_ok_4f71
 11567 000090B8 FF742410                	push qword [rsp + 8 * 2]
 11568 000090BC 6A01                    	push 1
 11569 000090BE E9AA970000              	jmp L_error_incorrect_arity_simple
 11570                                  .L_lambda_simple_arity_check_ok_4f71:
 11571 000090C3 C8000000                	enter 0, 0
 11572 000090C7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11573 000090CC E8E3970000              	call malloc
 11574 000090D1 50                      	push rax
 11575 000090D2 BF08000000              	mov rdi, 8 * 1	; new rib
 11576 000090D7 E8D8970000              	call malloc
 11577 000090DC 50                      	push rax
 11578 000090DD BF10000000              	mov rdi, 8 * 2	; extended env
 11579 000090E2 E8CD970000              	call malloc
 11580 000090E7 488B7D10                	mov rdi, ENV
 11581 000090EB BE00000000              	mov rsi, 0
 11582 000090F0 BA01000000              	mov rdx, 1
 11583                                  .L_lambda_simple_env_loop_4f72:	; ext_env[i + 1] <-- env[i]
 11584 000090F5 4883FE01                	cmp rsi, 1
 11585 000090F9 7410                    	je .L_lambda_simple_env_end_4f72
 11586 000090FB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 11587 000090FF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11588 00009103 48FFC6                  	inc rsi
 11589 00009106 48FFC2                  	inc rdx
 11590 00009109 EBEA                    	jmp .L_lambda_simple_env_loop_4f72
 11591                                  .L_lambda_simple_env_end_4f72:
 11592 0000910B 5B                      	pop rbx
 11593 0000910C BE00000000              	mov rsi, 0
 11594                                  .L_lambda_simple_params_loop_4f72:	; copy params
 11595 00009111 4883FE01                	cmp rsi, 1
 11596 00009115 740E                    	je .L_lambda_simple_params_end_4f72
 11597 00009117 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11598 0000911C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11599 00009120 48FFC6                  	inc rsi
 11600 00009123 EBEC                    	jmp .L_lambda_simple_params_loop_4f72
 11601                                  .L_lambda_simple_params_end_4f72:
 11602 00009125 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11603 00009128 4889C3                  	mov rbx, rax
 11604 0000912B 58                      	pop rax
 11605 0000912C C60005                  	mov byte [rax], T_closure
 11606 0000912F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11607 00009133 48C74009[40910000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f72
 11608 0000913B E92D050000              	jmp .L_lambda_simple_end_4f72
 11609                                  .L_lambda_simple_code_4f72:	; lambda-simple body
 11610 00009140 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11611 00009146 740B                    	je .L_lambda_simple_arity_check_ok_4f72
 11612 00009148 FF742410                	push qword [rsp + 8 * 2]
 11613 0000914C 6A02                    	push 2
 11614 0000914E E91A970000              	jmp L_error_incorrect_arity_simple
 11615                                  .L_lambda_simple_arity_check_ok_4f72:
 11616 00009153 C8000000                	enter 0, 0
 11617 00009157 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11618 0000915C E853970000              	call malloc
 11619 00009161 50                      	push rax
 11620 00009162 BF10000000              	mov rdi, 8 * 2	; new rib
 11621 00009167 E848970000              	call malloc
 11622 0000916C 50                      	push rax
 11623 0000916D BF18000000              	mov rdi, 8 * 3	; extended env
 11624 00009172 E83D970000              	call malloc
 11625 00009177 488B7D10                	mov rdi, ENV
 11626 0000917B BE00000000              	mov rsi, 0
 11627 00009180 BA01000000              	mov rdx, 1
 11628                                  .L_lambda_simple_env_loop_4f73:	; ext_env[i + 1] <-- env[i]
 11629 00009185 4883FE02                	cmp rsi, 2
 11630 00009189 7410                    	je .L_lambda_simple_env_end_4f73
 11631 0000918B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 11632 0000918F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11633 00009193 48FFC6                  	inc rsi
 11634 00009196 48FFC2                  	inc rdx
 11635 00009199 EBEA                    	jmp .L_lambda_simple_env_loop_4f73
 11636                                  .L_lambda_simple_env_end_4f73:
 11637 0000919B 5B                      	pop rbx
 11638 0000919C BE00000000              	mov rsi, 0
 11639                                  .L_lambda_simple_params_loop_4f73:	; copy params
 11640 000091A1 4883FE02                	cmp rsi, 2
 11641 000091A5 740E                    	je .L_lambda_simple_params_end_4f73
 11642 000091A7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11643 000091AC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11644 000091B0 48FFC6                  	inc rsi
 11645 000091B3 EBEC                    	jmp .L_lambda_simple_params_loop_4f73
 11646                                  .L_lambda_simple_params_end_4f73:
 11647 000091B5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11648 000091B8 4889C3                  	mov rbx, rax
 11649 000091BB 58                      	pop rax
 11650 000091BC C60005                  	mov byte [rax], T_closure
 11651 000091BF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11652 000091C3 48C74009[D0910000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f73
 11653 000091CB E999040000              	jmp .L_lambda_simple_end_4f73
 11654                                  .L_lambda_simple_code_4f73:	; lambda-simple body
 11655 000091D0 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11656 000091D6 740B                    	je .L_lambda_simple_arity_check_ok_4f73
 11657 000091D8 FF742410                	push qword [rsp + 8 * 2]
 11658 000091DC 6A02                    	push 2
 11659 000091DE E98A960000              	jmp L_error_incorrect_arity_simple
 11660                                  .L_lambda_simple_arity_check_ok_4f73:
 11661 000091E3 C8000000                	enter 0, 0
 11662 000091E7 488B4520                	mov rax, PARAM(0)
 11663 000091EB 50                      	push rax
 11664 000091EC 6A01                    	push 1
 11665 000091EE 488B0425[48000000]      	mov rax, qword [free_var_9]
 11666                                  	assert_closure(rax)
    42 000091F6 803805              <1>  cmp byte [%1], %2
    43 000091F9 0F8535AF0000        <1>  jne L_error_incorrect_type
 11667 000091FF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11668 00009203 53                      	push rbx
 11669 00009204 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11670 00009208 FFD3                    	call rbx
 11671 0000920A 483D[02000000]          	cmp rax, sob_boolean_false
 11672 00009210 0F840D020000            	je .L_if_else_56a7
 11673 00009216 488B4528                	mov rax, PARAM(1)
 11674 0000921A 50                      	push rax
 11675 0000921B 6A01                    	push 1
 11676 0000921D 488B0425[48000000]      	mov rax, qword [free_var_9]
 11677                                  	assert_closure(rax)
    42 00009225 803805              <1>  cmp byte [%1], %2
    43 00009228 0F8506AF0000        <1>  jne L_error_incorrect_type
 11678 0000922E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11679 00009232 53                      	push rbx
 11680 00009233 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11681 00009237 FFD3                    	call rbx
 11682 00009239 483D[02000000]          	cmp rax, sob_boolean_false
 11683 0000923F 0F8489000000            	je .L_if_else_56a8
 11684 00009245 488B4528                	mov rax, PARAM(1)
 11685 00009249 50                      	push rax
 11686 0000924A 488B4520                	mov rax, PARAM(0)
 11687 0000924E 50                      	push rax
 11688 0000924F 6A02                    	push 2
 11689 00009251 488B4510                	mov rax, qword [rbp + 8*2]
 11690 00009255 488B00                  	mov rax, qword [rax + 8*0]
 11691 00009258 488B00                  	mov rax, qword [rax + 8*0]
 11692                                  	assert_closure(rax)
    42 0000925B 803805              <1>  cmp byte [%1], %2
    43 0000925E 0F85D0AE0000        <1>  jne L_error_incorrect_type
 11693 00009264 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11694 00009268 53                      	push rbx
 11695 00009269 FF7508                  	push RET_ADDR
 11696 0000926C 488B7D18                	mov rdi, COUNT
 11697 00009270 4883C703                	add rdi, 3
 11698 00009274 48C1E703                	shl rdi, 3
 11699 00009278 4801EF                  	add rdi, rbp
 11700 0000927B 488B6D00                	mov rbp, OLD_RDP
 11701 0000927F BE00000000              	mov rsi, 0
 11702                                  .L_tc_recycle_frame_loop_5d00:	 ; start recycle frame loop
 11703 00009284 4883FE05                	cmp rsi, 5
 11704 00009288 7427                    	je .L_tc_recycle_frame_done_5d00
 11705 0000928A B904000000              	mov rcx, 4
 11706 0000928F 4829F1                  	sub rcx, rsi
 11707 00009292 48C1E103                	shl rcx, 3
 11708 00009296 4801E1                  	add rcx, rsp ; rcx is the address to move
 11709 00009299 4889F3                  	mov rbx, rsi
 11710 0000929C 48C1E303                	shl rbx, 3
 11711 000092A0 48F7DB                  	neg rbx
 11712 000092A3 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11713 000092A6 488B09                  	mov rcx, [rcx]
 11714 000092A9 48890B                  	mov [rbx], rcx
 11715 000092AC 48FFC6                  	inc rsi
 11716 000092AF EBD3                    	jmp .L_tc_recycle_frame_loop_5d00
 11717                                  .L_tc_recycle_frame_done_5d00:	 ; end recycle frame loop
 11718 000092B1 BB04000000              	mov rbx, 4
 11719 000092B6 48C1E303                	shl rbx, 3
 11720 000092BA 48F7DB                  	neg rbx
 11721 000092BD 4801FB                  	add rbx, rdi
 11722 000092C0 4889DC                  	mov rsp, rbx
 11723 000092C3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11724 000092C7 FFE3                    	jmp rbx
 11725 000092C9 E950010000              	jmp .L_if_end_56a8
 11726                                  	.L_if_else_56a8:
 11727 000092CE 488B4528                	mov rax, PARAM(1)
 11728 000092D2 50                      	push rax
 11729 000092D3 6A01                    	push 1
 11730 000092D5 488B0425[40000000]      	mov rax, qword [free_var_8]
 11731                                  	assert_closure(rax)
    42 000092DD 803805              <1>  cmp byte [%1], %2
    43 000092E0 0F854EAE0000        <1>  jne L_error_incorrect_type
 11732 000092E6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11733 000092EA 53                      	push rbx
 11734 000092EB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11735 000092EF FFD3                    	call rbx
 11736 000092F1 483D[02000000]          	cmp rax, sob_boolean_false
 11737 000092F7 0F84A6000000            	je .L_if_else_56a9
 11738 000092FD 488B4528                	mov rax, PARAM(1)
 11739 00009301 50                      	push rax
 11740 00009302 488B4520                	mov rax, PARAM(0)
 11741 00009306 50                      	push rax
 11742 00009307 6A01                    	push 1
 11743 00009309 488B0425[B8000000]      	mov rax, qword [free_var_23]
 11744                                  	assert_closure(rax)
    42 00009311 803805              <1>  cmp byte [%1], %2
    43 00009314 0F851AAE0000        <1>  jne L_error_incorrect_type
 11745 0000931A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11746 0000931E 53                      	push rbx
 11747 0000931F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11748 00009323 FFD3                    	call rbx
 11749 00009325 50                      	push rax
 11750 00009326 6A02                    	push 2
 11751 00009328 488B4510                	mov rax, qword [rbp + 8*2]
 11752 0000932C 488B00                  	mov rax, qword [rax + 8*0]
 11753 0000932F 488B4008                	mov rax, qword [rax + 8*1]
 11754                                  	assert_closure(rax)
    42 00009333 803805              <1>  cmp byte [%1], %2
    43 00009336 0F85F8AD0000        <1>  jne L_error_incorrect_type
 11755 0000933C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11756 00009340 53                      	push rbx
 11757 00009341 FF7508                  	push RET_ADDR
 11758 00009344 488B7D18                	mov rdi, COUNT
 11759 00009348 4883C703                	add rdi, 3
 11760 0000934C 48C1E703                	shl rdi, 3
 11761 00009350 4801EF                  	add rdi, rbp
 11762 00009353 488B6D00                	mov rbp, OLD_RDP
 11763 00009357 BE00000000              	mov rsi, 0
 11764                                  .L_tc_recycle_frame_loop_5d01:	 ; start recycle frame loop
 11765 0000935C 4883FE05                	cmp rsi, 5
 11766 00009360 7427                    	je .L_tc_recycle_frame_done_5d01
 11767 00009362 B904000000              	mov rcx, 4
 11768 00009367 4829F1                  	sub rcx, rsi
 11769 0000936A 48C1E103                	shl rcx, 3
 11770 0000936E 4801E1                  	add rcx, rsp ; rcx is the address to move
 11771 00009371 4889F3                  	mov rbx, rsi
 11772 00009374 48C1E303                	shl rbx, 3
 11773 00009378 48F7DB                  	neg rbx
 11774 0000937B 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11775 0000937E 488B09                  	mov rcx, [rcx]
 11776 00009381 48890B                  	mov [rbx], rcx
 11777 00009384 48FFC6                  	inc rsi
 11778 00009387 EBD3                    	jmp .L_tc_recycle_frame_loop_5d01
 11779                                  .L_tc_recycle_frame_done_5d01:	 ; end recycle frame loop
 11780 00009389 BB04000000              	mov rbx, 4
 11781 0000938E 48C1E303                	shl rbx, 3
 11782 00009392 48F7DB                  	neg rbx
 11783 00009395 4801FB                  	add rbx, rdi
 11784 00009398 4889DC                  	mov rsp, rbx
 11785 0000939B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11786 0000939F FFE3                    	jmp rbx
 11787 000093A1 EB7B                    	jmp .L_if_end_56a9
 11788                                  	.L_if_else_56a9:
 11789 000093A3 6A00                    	push 0
 11790 000093A5 488B4510                	mov rax, qword [rbp + 8*2]
 11791 000093A9 488B4008                	mov rax, qword [rax + 8*1]
 11792 000093AD 488B00                  	mov rax, qword [rax + 8*0]
 11793                                  	assert_closure(rax)
    42 000093B0 803805              <1>  cmp byte [%1], %2
    43 000093B3 0F857BAD0000        <1>  jne L_error_incorrect_type
 11794 000093B9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11795 000093BD 53                      	push rbx
 11796 000093BE FF7508                  	push RET_ADDR
 11797 000093C1 488B7D18                	mov rdi, COUNT
 11798 000093C5 4883C703                	add rdi, 3
 11799 000093C9 48C1E703                	shl rdi, 3
 11800 000093CD 4801EF                  	add rdi, rbp
 11801 000093D0 488B6D00                	mov rbp, OLD_RDP
 11802 000093D4 BE00000000              	mov rsi, 0
 11803                                  .L_tc_recycle_frame_loop_5d02:	 ; start recycle frame loop
 11804 000093D9 4883FE03                	cmp rsi, 3
 11805 000093DD 7427                    	je .L_tc_recycle_frame_done_5d02
 11806 000093DF B902000000              	mov rcx, 2
 11807 000093E4 4829F1                  	sub rcx, rsi
 11808 000093E7 48C1E103                	shl rcx, 3
 11809 000093EB 4801E1                  	add rcx, rsp ; rcx is the address to move
 11810 000093EE 4889F3                  	mov rbx, rsi
 11811 000093F1 48C1E303                	shl rbx, 3
 11812 000093F5 48F7DB                  	neg rbx
 11813 000093F8 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11814 000093FB 488B09                  	mov rcx, [rcx]
 11815 000093FE 48890B                  	mov [rbx], rcx
 11816 00009401 48FFC6                  	inc rsi
 11817 00009404 EBD3                    	jmp .L_tc_recycle_frame_loop_5d02
 11818                                  .L_tc_recycle_frame_done_5d02:	 ; end recycle frame loop
 11819 00009406 BB02000000              	mov rbx, 2
 11820 0000940B 48C1E303                	shl rbx, 3
 11821 0000940F 48F7DB                  	neg rbx
 11822 00009412 4801FB                  	add rbx, rdi
 11823 00009415 4889DC                  	mov rsp, rbx
 11824 00009418 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11825 0000941C FFE3                    	jmp rbx
 11826                                  	.L_if_end_56a9:
 11827                                  	.L_if_end_56a8:
 11828 0000941E E942020000              	jmp .L_if_end_56a7
 11829                                  	.L_if_else_56a7:
 11830 00009423 488B4520                	mov rax, PARAM(0)
 11831 00009427 50                      	push rax
 11832 00009428 6A01                    	push 1
 11833 0000942A 488B0425[40000000]      	mov rax, qword [free_var_8]
 11834                                  	assert_closure(rax)
    42 00009432 803805              <1>  cmp byte [%1], %2
    43 00009435 0F85F9AC0000        <1>  jne L_error_incorrect_type
 11835 0000943B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11836 0000943F 53                      	push rbx
 11837 00009440 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11838 00009444 FFD3                    	call rbx
 11839 00009446 483D[02000000]          	cmp rax, sob_boolean_false
 11840 0000944C 0F840B020000            	je .L_if_else_56aa
 11841 00009452 488B4528                	mov rax, PARAM(1)
 11842 00009456 50                      	push rax
 11843 00009457 6A01                    	push 1
 11844 00009459 488B0425[48000000]      	mov rax, qword [free_var_9]
 11845                                  	assert_closure(rax)
    42 00009461 803805              <1>  cmp byte [%1], %2
    43 00009464 0F85CAAC0000        <1>  jne L_error_incorrect_type
 11846 0000946A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11847 0000946E 53                      	push rbx
 11848 0000946F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11849 00009473 FFD3                    	call rbx
 11850 00009475 483D[02000000]          	cmp rax, sob_boolean_false
 11851 0000947B 0F84A9000000            	je .L_if_else_56ab
 11852 00009481 488B4528                	mov rax, PARAM(1)
 11853 00009485 50                      	push rax
 11854 00009486 6A01                    	push 1
 11855 00009488 488B0425[B8000000]      	mov rax, qword [free_var_23]
 11856                                  	assert_closure(rax)
    42 00009490 803805              <1>  cmp byte [%1], %2
    43 00009493 0F859BAC0000        <1>  jne L_error_incorrect_type
 11857 00009499 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11858 0000949D 53                      	push rbx
 11859 0000949E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11860 000094A2 FFD3                    	call rbx
 11861 000094A4 50                      	push rax
 11862 000094A5 488B4520                	mov rax, PARAM(0)
 11863 000094A9 50                      	push rax
 11864 000094AA 6A02                    	push 2
 11865 000094AC 488B4510                	mov rax, qword [rbp + 8*2]
 11866 000094B0 488B00                  	mov rax, qword [rax + 8*0]
 11867 000094B3 488B4008                	mov rax, qword [rax + 8*1]
 11868                                  	assert_closure(rax)
    42 000094B7 803805              <1>  cmp byte [%1], %2
    43 000094BA 0F8574AC0000        <1>  jne L_error_incorrect_type
 11869 000094C0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11870 000094C4 53                      	push rbx
 11871 000094C5 FF7508                  	push RET_ADDR
 11872 000094C8 488B7D18                	mov rdi, COUNT
 11873 000094CC 4883C703                	add rdi, 3
 11874 000094D0 48C1E703                	shl rdi, 3
 11875 000094D4 4801EF                  	add rdi, rbp
 11876 000094D7 488B6D00                	mov rbp, OLD_RDP
 11877 000094DB BE00000000              	mov rsi, 0
 11878                                  .L_tc_recycle_frame_loop_5d03:	 ; start recycle frame loop
 11879 000094E0 4883FE05                	cmp rsi, 5
 11880 000094E4 7427                    	je .L_tc_recycle_frame_done_5d03
 11881 000094E6 B904000000              	mov rcx, 4
 11882 000094EB 4829F1                  	sub rcx, rsi
 11883 000094EE 48C1E103                	shl rcx, 3
 11884 000094F2 4801E1                  	add rcx, rsp ; rcx is the address to move
 11885 000094F5 4889F3                  	mov rbx, rsi
 11886 000094F8 48C1E303                	shl rbx, 3
 11887 000094FC 48F7DB                  	neg rbx
 11888 000094FF 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11889 00009502 488B09                  	mov rcx, [rcx]
 11890 00009505 48890B                  	mov [rbx], rcx
 11891 00009508 48FFC6                  	inc rsi
 11892 0000950B EBD3                    	jmp .L_tc_recycle_frame_loop_5d03
 11893                                  .L_tc_recycle_frame_done_5d03:	 ; end recycle frame loop
 11894 0000950D BB04000000              	mov rbx, 4
 11895 00009512 48C1E303                	shl rbx, 3
 11896 00009516 48F7DB                  	neg rbx
 11897 00009519 4801FB                  	add rbx, rdi
 11898 0000951C 4889DC                  	mov rsp, rbx
 11899 0000951F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11900 00009523 FFE3                    	jmp rbx
 11901 00009525 E931010000              	jmp .L_if_end_56ab
 11902                                  	.L_if_else_56ab:
 11903 0000952A 488B4528                	mov rax, PARAM(1)
 11904 0000952E 50                      	push rax
 11905 0000952F 6A01                    	push 1
 11906 00009531 488B0425[40000000]      	mov rax, qword [free_var_8]
 11907                                  	assert_closure(rax)
    42 00009539 803805              <1>  cmp byte [%1], %2
    43 0000953C 0F85F2AB0000        <1>  jne L_error_incorrect_type
 11908 00009542 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11909 00009546 53                      	push rbx
 11910 00009547 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11911 0000954B FFD3                    	call rbx
 11912 0000954D 483D[02000000]          	cmp rax, sob_boolean_false
 11913 00009553 0F8487000000            	je .L_if_else_56ac
 11914 00009559 488B4528                	mov rax, PARAM(1)
 11915 0000955D 50                      	push rax
 11916 0000955E 488B4520                	mov rax, PARAM(0)
 11917 00009562 50                      	push rax
 11918 00009563 6A02                    	push 2
 11919 00009565 488B4510                	mov rax, qword [rbp + 8*2]
 11920 00009569 488B00                  	mov rax, qword [rax + 8*0]
 11921 0000956C 488B4008                	mov rax, qword [rax + 8*1]
 11922                                  	assert_closure(rax)
    42 00009570 803805              <1>  cmp byte [%1], %2
    43 00009573 0F85BBAB0000        <1>  jne L_error_incorrect_type
 11923 00009579 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11924 0000957D 53                      	push rbx
 11925 0000957E FF7508                  	push RET_ADDR
 11926 00009581 488B7D18                	mov rdi, COUNT
 11927 00009585 4883C703                	add rdi, 3
 11928 00009589 48C1E703                	shl rdi, 3
 11929 0000958D 4801EF                  	add rdi, rbp
 11930 00009590 488B6D00                	mov rbp, OLD_RDP
 11931 00009594 BE00000000              	mov rsi, 0
 11932                                  .L_tc_recycle_frame_loop_5d04:	 ; start recycle frame loop
 11933 00009599 4883FE05                	cmp rsi, 5
 11934 0000959D 7427                    	je .L_tc_recycle_frame_done_5d04
 11935 0000959F B904000000              	mov rcx, 4
 11936 000095A4 4829F1                  	sub rcx, rsi
 11937 000095A7 48C1E103                	shl rcx, 3
 11938 000095AB 4801E1                  	add rcx, rsp ; rcx is the address to move
 11939 000095AE 4889F3                  	mov rbx, rsi
 11940 000095B1 48C1E303                	shl rbx, 3
 11941 000095B5 48F7DB                  	neg rbx
 11942 000095B8 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11943 000095BB 488B09                  	mov rcx, [rcx]
 11944 000095BE 48890B                  	mov [rbx], rcx
 11945 000095C1 48FFC6                  	inc rsi
 11946 000095C4 EBD3                    	jmp .L_tc_recycle_frame_loop_5d04
 11947                                  .L_tc_recycle_frame_done_5d04:	 ; end recycle frame loop
 11948 000095C6 BB04000000              	mov rbx, 4
 11949 000095CB 48C1E303                	shl rbx, 3
 11950 000095CF 48F7DB                  	neg rbx
 11951 000095D2 4801FB                  	add rbx, rdi
 11952 000095D5 4889DC                  	mov rsp, rbx
 11953 000095D8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11954 000095DC FFE3                    	jmp rbx
 11955 000095DE EB7B                    	jmp .L_if_end_56ac
 11956                                  	.L_if_else_56ac:
 11957 000095E0 6A00                    	push 0
 11958 000095E2 488B4510                	mov rax, qword [rbp + 8*2]
 11959 000095E6 488B4008                	mov rax, qword [rax + 8*1]
 11960 000095EA 488B00                  	mov rax, qword [rax + 8*0]
 11961                                  	assert_closure(rax)
    42 000095ED 803805              <1>  cmp byte [%1], %2
    43 000095F0 0F853EAB0000        <1>  jne L_error_incorrect_type
 11962 000095F6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11963 000095FA 53                      	push rbx
 11964 000095FB FF7508                  	push RET_ADDR
 11965 000095FE 488B7D18                	mov rdi, COUNT
 11966 00009602 4883C703                	add rdi, 3
 11967 00009606 48C1E703                	shl rdi, 3
 11968 0000960A 4801EF                  	add rdi, rbp
 11969 0000960D 488B6D00                	mov rbp, OLD_RDP
 11970 00009611 BE00000000              	mov rsi, 0
 11971                                  .L_tc_recycle_frame_loop_5d05:	 ; start recycle frame loop
 11972 00009616 4883FE03                	cmp rsi, 3
 11973 0000961A 7427                    	je .L_tc_recycle_frame_done_5d05
 11974 0000961C B902000000              	mov rcx, 2
 11975 00009621 4829F1                  	sub rcx, rsi
 11976 00009624 48C1E103                	shl rcx, 3
 11977 00009628 4801E1                  	add rcx, rsp ; rcx is the address to move
 11978 0000962B 4889F3                  	mov rbx, rsi
 11979 0000962E 48C1E303                	shl rbx, 3
 11980 00009632 48F7DB                  	neg rbx
 11981 00009635 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11982 00009638 488B09                  	mov rcx, [rcx]
 11983 0000963B 48890B                  	mov [rbx], rcx
 11984 0000963E 48FFC6                  	inc rsi
 11985 00009641 EBD3                    	jmp .L_tc_recycle_frame_loop_5d05
 11986                                  .L_tc_recycle_frame_done_5d05:	 ; end recycle frame loop
 11987 00009643 BB02000000              	mov rbx, 2
 11988 00009648 48C1E303                	shl rbx, 3
 11989 0000964C 48F7DB                  	neg rbx
 11990 0000964F 4801FB                  	add rbx, rdi
 11991 00009652 4889DC                  	mov rsp, rbx
 11992 00009655 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11993 00009659 FFE3                    	jmp rbx
 11994                                  	.L_if_end_56ac:
 11995                                  	.L_if_end_56ab:
 11996 0000965B EB08                    	jmp .L_if_end_56aa
 11997                                  	.L_if_else_56aa:
 11998 0000965D 488D0425[00000000]      	lea rax, [0 + L_constants]
 11999                                  	.L_if_end_56aa:
 12000                                  	.L_if_end_56a7:
 12001 00009665 C9                      	leave
 12002 00009666 C22000                  	ret 8 * (2 + 2)
 12003                                  .L_lambda_simple_end_4f73:	; new closure is in rax
 12004 00009669 C9                      	leave
 12005 0000966A C22000                  	ret 8 * (2 + 2)
 12006                                  .L_lambda_simple_end_4f72:	; new closure is in rax
 12007 0000966D 50                      	push rax
 12008 0000966E 6A01                    	push 1
 12009 00009670 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12010 00009675 E83A920000              	call malloc
 12011 0000967A 50                      	push rax
 12012 0000967B BF08000000              	mov rdi, 8 * 1	; new rib
 12013 00009680 E82F920000              	call malloc
 12014 00009685 50                      	push rax
 12015 00009686 BF10000000              	mov rdi, 8 * 2	; extended env
 12016 0000968B E824920000              	call malloc
 12017 00009690 488B7D10                	mov rdi, ENV
 12018 00009694 BE00000000              	mov rsi, 0
 12019 00009699 BA01000000              	mov rdx, 1
 12020                                  .L_lambda_simple_env_loop_4f74:	; ext_env[i + 1] <-- env[i]
 12021 0000969E 4883FE01                	cmp rsi, 1
 12022 000096A2 7410                    	je .L_lambda_simple_env_end_4f74
 12023 000096A4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 12024 000096A8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12025 000096AC 48FFC6                  	inc rsi
 12026 000096AF 48FFC2                  	inc rdx
 12027 000096B2 EBEA                    	jmp .L_lambda_simple_env_loop_4f74
 12028                                  .L_lambda_simple_env_end_4f74:
 12029 000096B4 5B                      	pop rbx
 12030 000096B5 BE00000000              	mov rsi, 0
 12031                                  .L_lambda_simple_params_loop_4f74:	; copy params
 12032 000096BA 4883FE01                	cmp rsi, 1
 12033 000096BE 740E                    	je .L_lambda_simple_params_end_4f74
 12034 000096C0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12035 000096C5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12036 000096C9 48FFC6                  	inc rsi
 12037 000096CC EBEC                    	jmp .L_lambda_simple_params_loop_4f74
 12038                                  .L_lambda_simple_params_end_4f74:
 12039 000096CE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12040 000096D1 4889C3                  	mov rbx, rax
 12041 000096D4 58                      	pop rax
 12042 000096D5 C60005                  	mov byte [rax], T_closure
 12043 000096D8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12044 000096DC 48C74009[E9960000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f74
 12045 000096E4 E9E5100000              	jmp .L_lambda_simple_end_4f74
 12046                                  .L_lambda_simple_code_4f74:	; lambda-simple body
 12047 000096E9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12048 000096EF 740B                    	je .L_lambda_simple_arity_check_ok_4f74
 12049 000096F1 FF742410                	push qword [rsp + 8 * 2]
 12050 000096F5 6A01                    	push 1
 12051 000096F7 E971910000              	jmp L_error_incorrect_arity_simple
 12052                                  .L_lambda_simple_arity_check_ok_4f74:
 12053 000096FC C8000000                	enter 0, 0
 12054 00009700 488B0425[38010000]      	mov rax, qword [free_var_39]
 12055 00009708 50                      	push rax
 12056 00009709 488B0425[40010000]      	mov rax, qword [free_var_40]
 12057 00009711 50                      	push rax
 12058 00009712 6A02                    	push 2
 12059 00009714 488B4520                	mov rax, PARAM(0)
 12060                                  	assert_closure(rax)
    42 00009718 803805              <1>  cmp byte [%1], %2
    43 0000971B 0F8513AA0000        <1>  jne L_error_incorrect_type
 12061 00009721 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12062 00009725 53                      	push rbx
 12063 00009726 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12064 0000972A FFD3                    	call rbx
 12065 0000972C 50                      	push rax
 12066 0000972D 6A01                    	push 1
 12067 0000972F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12068 00009734 E87B910000              	call malloc
 12069 00009739 50                      	push rax
 12070 0000973A BF08000000              	mov rdi, 8 * 1	; new rib
 12071 0000973F E870910000              	call malloc
 12072 00009744 50                      	push rax
 12073 00009745 BF18000000              	mov rdi, 8 * 3	; extended env
 12074 0000974A E865910000              	call malloc
 12075 0000974F 488B7D10                	mov rdi, ENV
 12076 00009753 BE00000000              	mov rsi, 0
 12077 00009758 BA01000000              	mov rdx, 1
 12078                                  .L_lambda_simple_env_loop_4f75:	; ext_env[i + 1] <-- env[i]
 12079 0000975D 4883FE02                	cmp rsi, 2
 12080 00009761 7410                    	je .L_lambda_simple_env_end_4f75
 12081 00009763 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 12082 00009767 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12083 0000976B 48FFC6                  	inc rsi
 12084 0000976E 48FFC2                  	inc rdx
 12085 00009771 EBEA                    	jmp .L_lambda_simple_env_loop_4f75
 12086                                  .L_lambda_simple_env_end_4f75:
 12087 00009773 5B                      	pop rbx
 12088 00009774 BE00000000              	mov rsi, 0
 12089                                  .L_lambda_simple_params_loop_4f75:	; copy params
 12090 00009779 4883FE01                	cmp rsi, 1
 12091 0000977D 740E                    	je .L_lambda_simple_params_end_4f75
 12092 0000977F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12093 00009784 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12094 00009788 48FFC6                  	inc rsi
 12095 0000978B EBEC                    	jmp .L_lambda_simple_params_loop_4f75
 12096                                  .L_lambda_simple_params_end_4f75:
 12097 0000978D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12098 00009790 4889C3                  	mov rbx, rax
 12099 00009793 58                      	pop rax
 12100 00009794 C60005                  	mov byte [rax], T_closure
 12101 00009797 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12102 0000979B 48C74009[A8970000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f75
 12103 000097A3 E9B40F0000              	jmp .L_lambda_simple_end_4f75
 12104                                  .L_lambda_simple_code_4f75:	; lambda-simple body
 12105 000097A8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12106 000097AE 740B                    	je .L_lambda_simple_arity_check_ok_4f75
 12107 000097B0 FF742410                	push qword [rsp + 8 * 2]
 12108 000097B4 6A01                    	push 1
 12109 000097B6 E9B2900000              	jmp L_error_incorrect_arity_simple
 12110                                  .L_lambda_simple_arity_check_ok_4f75:
 12111 000097BB C8000000                	enter 0, 0
 12112 000097BF 488B0425[48010000]      	mov rax, qword [free_var_41]
 12113 000097C7 50                      	push rax
 12114 000097C8 488B0425[50010000]      	mov rax, qword [free_var_42]
 12115 000097D0 50                      	push rax
 12116 000097D1 6A02                    	push 2
 12117 000097D3 488B4510                	mov rax, qword [rbp + 8*2]
 12118 000097D7 488B00                  	mov rax, qword [rax + 8*0]
 12119 000097DA 488B00                  	mov rax, qword [rax + 8*0]
 12120                                  	assert_closure(rax)
    42 000097DD 803805              <1>  cmp byte [%1], %2
    43 000097E0 0F854EA90000        <1>  jne L_error_incorrect_type
 12121 000097E6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12122 000097EA 53                      	push rbx
 12123 000097EB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12124 000097EF FFD3                    	call rbx
 12125 000097F1 50                      	push rax
 12126 000097F2 6A01                    	push 1
 12127 000097F4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12128 000097F9 E8B6900000              	call malloc
 12129 000097FE 50                      	push rax
 12130 000097FF BF08000000              	mov rdi, 8 * 1	; new rib
 12131 00009804 E8AB900000              	call malloc
 12132 00009809 50                      	push rax
 12133 0000980A BF20000000              	mov rdi, 8 * 4	; extended env
 12134 0000980F E8A0900000              	call malloc
 12135 00009814 488B7D10                	mov rdi, ENV
 12136 00009818 BE00000000              	mov rsi, 0
 12137 0000981D BA01000000              	mov rdx, 1
 12138                                  .L_lambda_simple_env_loop_4f76:	; ext_env[i + 1] <-- env[i]
 12139 00009822 4883FE03                	cmp rsi, 3
 12140 00009826 7410                    	je .L_lambda_simple_env_end_4f76
 12141 00009828 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 12142 0000982C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12143 00009830 48FFC6                  	inc rsi
 12144 00009833 48FFC2                  	inc rdx
 12145 00009836 EBEA                    	jmp .L_lambda_simple_env_loop_4f76
 12146                                  .L_lambda_simple_env_end_4f76:
 12147 00009838 5B                      	pop rbx
 12148 00009839 BE00000000              	mov rsi, 0
 12149                                  .L_lambda_simple_params_loop_4f76:	; copy params
 12150 0000983E 4883FE01                	cmp rsi, 1
 12151 00009842 740E                    	je .L_lambda_simple_params_end_4f76
 12152 00009844 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12153 00009849 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12154 0000984D 48FFC6                  	inc rsi
 12155 00009850 EBEC                    	jmp .L_lambda_simple_params_loop_4f76
 12156                                  .L_lambda_simple_params_end_4f76:
 12157 00009852 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12158 00009855 4889C3                  	mov rbx, rax
 12159 00009858 58                      	pop rax
 12160 00009859 C60005                  	mov byte [rax], T_closure
 12161 0000985C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12162 00009860 48C74009[6D980000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f76
 12163 00009868 E97D0E0000              	jmp .L_lambda_simple_end_4f76
 12164                                  .L_lambda_simple_code_4f76:	; lambda-simple body
 12165 0000986D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12166 00009873 740B                    	je .L_lambda_simple_arity_check_ok_4f76
 12167 00009875 FF742410                	push qword [rsp + 8 * 2]
 12168 00009879 6A01                    	push 1
 12169 0000987B E9ED8F0000              	jmp L_error_incorrect_arity_simple
 12170                                  .L_lambda_simple_arity_check_ok_4f76:
 12171 00009880 C8000000                	enter 0, 0
 12172 00009884 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12173 00009889 E826900000              	call malloc
 12174 0000988E 50                      	push rax
 12175 0000988F BF08000000              	mov rdi, 8 * 1	; new rib
 12176 00009894 E81B900000              	call malloc
 12177 00009899 50                      	push rax
 12178 0000989A BF28000000              	mov rdi, 8 * 5	; extended env
 12179 0000989F E810900000              	call malloc
 12180 000098A4 488B7D10                	mov rdi, ENV
 12181 000098A8 BE00000000              	mov rsi, 0
 12182 000098AD BA01000000              	mov rdx, 1
 12183                                  .L_lambda_simple_env_loop_4f77:	; ext_env[i + 1] <-- env[i]
 12184 000098B2 4883FE04                	cmp rsi, 4
 12185 000098B6 7410                    	je .L_lambda_simple_env_end_4f77
 12186 000098B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 12187 000098BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12188 000098C0 48FFC6                  	inc rsi
 12189 000098C3 48FFC2                  	inc rdx
 12190 000098C6 EBEA                    	jmp .L_lambda_simple_env_loop_4f77
 12191                                  .L_lambda_simple_env_end_4f77:
 12192 000098C8 5B                      	pop rbx
 12193 000098C9 BE00000000              	mov rsi, 0
 12194                                  .L_lambda_simple_params_loop_4f77:	; copy params
 12195 000098CE 4883FE01                	cmp rsi, 1
 12196 000098D2 740E                    	je .L_lambda_simple_params_end_4f77
 12197 000098D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12198 000098D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12199 000098DD 48FFC6                  	inc rsi
 12200 000098E0 EBEC                    	jmp .L_lambda_simple_params_loop_4f77
 12201                                  .L_lambda_simple_params_end_4f77:
 12202 000098E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12203 000098E5 4889C3                  	mov rbx, rax
 12204 000098E8 58                      	pop rax
 12205 000098E9 C60005                  	mov byte [rax], T_closure
 12206 000098EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12207 000098F0 48C74009[FD980000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f77
 12208 000098F8 E9BF000000              	jmp .L_lambda_simple_end_4f77
 12209                                  .L_lambda_simple_code_4f77:	; lambda-simple body
 12210 000098FD 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12211 00009903 740B                    	je .L_lambda_simple_arity_check_ok_4f77
 12212 00009905 FF742410                	push qword [rsp + 8 * 2]
 12213 00009909 6A02                    	push 2
 12214 0000990B E95D8F0000              	jmp L_error_incorrect_arity_simple
 12215                                  .L_lambda_simple_arity_check_ok_4f77:
 12216 00009910 C8000000                	enter 0, 0
 12217 00009914 488B4528                	mov rax, PARAM(1)
 12218 00009918 50                      	push rax
 12219 00009919 488B4520                	mov rax, PARAM(0)
 12220 0000991D 50                      	push rax
 12221 0000991E 6A02                    	push 2
 12222 00009920 488B4510                	mov rax, qword [rbp + 8*2]
 12223 00009924 488B4008                	mov rax, qword [rax + 8*1]
 12224 00009928 488B00                  	mov rax, qword [rax + 8*0]
 12225                                  	assert_closure(rax)
    42 0000992B 803805              <1>  cmp byte [%1], %2
    43 0000992E 0F8500A80000        <1>  jne L_error_incorrect_type
 12226 00009934 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12227 00009938 53                      	push rbx
 12228 00009939 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12229 0000993D FFD3                    	call rbx
 12230 0000993F 50                      	push rax
 12231 00009940 6A01                    	push 1
 12232 00009942 488B0425[B0020000]      	mov rax, qword [free_var_86]
 12233                                  	assert_closure(rax)
    42 0000994A 803805              <1>  cmp byte [%1], %2
    43 0000994D 0F85E1A70000        <1>  jne L_error_incorrect_type
 12234 00009953 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12235 00009957 53                      	push rbx
 12236 00009958 FF7508                  	push RET_ADDR
 12237 0000995B 488B7D18                	mov rdi, COUNT
 12238 0000995F 4883C703                	add rdi, 3
 12239 00009963 48C1E703                	shl rdi, 3
 12240 00009967 4801EF                  	add rdi, rbp
 12241 0000996A 488B6D00                	mov rbp, OLD_RDP
 12242 0000996E BE00000000              	mov rsi, 0
 12243                                  .L_tc_recycle_frame_loop_5d09:	 ; start recycle frame loop
 12244 00009973 4883FE04                	cmp rsi, 4
 12245 00009977 7427                    	je .L_tc_recycle_frame_done_5d09
 12246 00009979 B903000000              	mov rcx, 3
 12247 0000997E 4829F1                  	sub rcx, rsi
 12248 00009981 48C1E103                	shl rcx, 3
 12249 00009985 4801E1                  	add rcx, rsp ; rcx is the address to move
 12250 00009988 4889F3                  	mov rbx, rsi
 12251 0000998B 48C1E303                	shl rbx, 3
 12252 0000998F 48F7DB                  	neg rbx
 12253 00009992 4801FB                  	add rbx, rdi ;rbx is the address to move to
 12254 00009995 488B09                  	mov rcx, [rcx]
 12255 00009998 48890B                  	mov [rbx], rcx
 12256 0000999B 48FFC6                  	inc rsi
 12257 0000999E EBD3                    	jmp .L_tc_recycle_frame_loop_5d09
 12258                                  .L_tc_recycle_frame_done_5d09:	 ; end recycle frame loop
 12259 000099A0 BB03000000              	mov rbx, 3
 12260 000099A5 48C1E303                	shl rbx, 3
 12261 000099A9 48F7DB                  	neg rbx
 12262 000099AC 4801FB                  	add rbx, rdi
 12263 000099AF 4889DC                  	mov rsp, rbx
 12264 000099B2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12265 000099B6 FFE3                    	jmp rbx
 12266 000099B8 C9                      	leave
 12267 000099B9 C22000                  	ret 8 * (2 + 2)
 12268                                  .L_lambda_simple_end_4f77:	; new closure is in rax
 12269 000099BC 50                      	push rax
 12270 000099BD 6A01                    	push 1
 12271 000099BF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12272 000099C4 E8EB8E0000              	call malloc
 12273 000099C9 50                      	push rax
 12274 000099CA BF08000000              	mov rdi, 8 * 1	; new rib
 12275 000099CF E8E08E0000              	call malloc
 12276 000099D4 50                      	push rax
 12277 000099D5 BF28000000              	mov rdi, 8 * 5	; extended env
 12278 000099DA E8D58E0000              	call malloc
 12279 000099DF 488B7D10                	mov rdi, ENV
 12280 000099E3 BE00000000              	mov rsi, 0
 12281 000099E8 BA01000000              	mov rdx, 1
 12282                                  .L_lambda_simple_env_loop_4f78:	; ext_env[i + 1] <-- env[i]
 12283 000099ED 4883FE04                	cmp rsi, 4
 12284 000099F1 7410                    	je .L_lambda_simple_env_end_4f78
 12285 000099F3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 12286 000099F7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12287 000099FB 48FFC6                  	inc rsi
 12288 000099FE 48FFC2                  	inc rdx
 12289 00009A01 EBEA                    	jmp .L_lambda_simple_env_loop_4f78
 12290                                  .L_lambda_simple_env_end_4f78:
 12291 00009A03 5B                      	pop rbx
 12292 00009A04 BE00000000              	mov rsi, 0
 12293                                  .L_lambda_simple_params_loop_4f78:	; copy params
 12294 00009A09 4883FE01                	cmp rsi, 1
 12295 00009A0D 740E                    	je .L_lambda_simple_params_end_4f78
 12296 00009A0F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12297 00009A14 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12298 00009A18 48FFC6                  	inc rsi
 12299 00009A1B EBEC                    	jmp .L_lambda_simple_params_loop_4f78
 12300                                  .L_lambda_simple_params_end_4f78:
 12301 00009A1D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12302 00009A20 4889C3                  	mov rbx, rax
 12303 00009A23 58                      	pop rax
 12304 00009A24 C60005                  	mov byte [rax], T_closure
 12305 00009A27 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12306 00009A2B 48C74009[389A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f78
 12307 00009A33 E9400C0000              	jmp .L_lambda_simple_end_4f78
 12308                                  .L_lambda_simple_code_4f78:	; lambda-simple body
 12309 00009A38 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12310 00009A3E 740B                    	je .L_lambda_simple_arity_check_ok_4f78
 12311 00009A40 FF742410                	push qword [rsp + 8 * 2]
 12312 00009A44 6A01                    	push 1
 12313 00009A46 E9228E0000              	jmp L_error_incorrect_arity_simple
 12314                                  .L_lambda_simple_arity_check_ok_4f78:
 12315 00009A4B C8000000                	enter 0, 0
 12316 00009A4F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12317 00009A54 E85B8E0000              	call malloc
 12318 00009A59 50                      	push rax
 12319 00009A5A BF08000000              	mov rdi, 8 * 1	; new rib
 12320 00009A5F E8508E0000              	call malloc
 12321 00009A64 50                      	push rax
 12322 00009A65 BF30000000              	mov rdi, 8 * 6	; extended env
 12323 00009A6A E8458E0000              	call malloc
 12324 00009A6F 488B7D10                	mov rdi, ENV
 12325 00009A73 BE00000000              	mov rsi, 0
 12326 00009A78 BA01000000              	mov rdx, 1
 12327                                  .L_lambda_simple_env_loop_4f79:	; ext_env[i + 1] <-- env[i]
 12328 00009A7D 4883FE05                	cmp rsi, 5
 12329 00009A81 7410                    	je .L_lambda_simple_env_end_4f79
 12330 00009A83 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 12331 00009A87 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12332 00009A8B 48FFC6                  	inc rsi
 12333 00009A8E 48FFC2                  	inc rdx
 12334 00009A91 EBEA                    	jmp .L_lambda_simple_env_loop_4f79
 12335                                  .L_lambda_simple_env_end_4f79:
 12336 00009A93 5B                      	pop rbx
 12337 00009A94 BE00000000              	mov rsi, 0
 12338                                  .L_lambda_simple_params_loop_4f79:	; copy params
 12339 00009A99 4883FE01                	cmp rsi, 1
 12340 00009A9D 740E                    	je .L_lambda_simple_params_end_4f79
 12341 00009A9F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12342 00009AA4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12343 00009AA8 48FFC6                  	inc rsi
 12344 00009AAB EBEC                    	jmp .L_lambda_simple_params_loop_4f79
 12345                                  .L_lambda_simple_params_end_4f79:
 12346 00009AAD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12347 00009AB0 4889C3                  	mov rbx, rax
 12348 00009AB3 58                      	pop rax
 12349 00009AB4 C60005                  	mov byte [rax], T_closure
 12350 00009AB7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12351 00009ABB 48C74009[C89A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f79
 12352 00009AC3 E9A0000000              	jmp .L_lambda_simple_end_4f79
 12353                                  .L_lambda_simple_code_4f79:	; lambda-simple body
 12354 00009AC8 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12355 00009ACE 740B                    	je .L_lambda_simple_arity_check_ok_4f79
 12356 00009AD0 FF742410                	push qword [rsp + 8 * 2]
 12357 00009AD4 6A02                    	push 2
 12358 00009AD6 E9928D0000              	jmp L_error_incorrect_arity_simple
 12359                                  .L_lambda_simple_arity_check_ok_4f79:
 12360 00009ADB C8000000                	enter 0, 0
 12361 00009ADF 488B4520                	mov rax, PARAM(0)
 12362 00009AE3 50                      	push rax
 12363 00009AE4 488B4528                	mov rax, PARAM(1)
 12364 00009AE8 50                      	push rax
 12365 00009AE9 6A02                    	push 2
 12366 00009AEB 488B4510                	mov rax, qword [rbp + 8*2]
 12367 00009AEF 488B4010                	mov rax, qword [rax + 8*2]
 12368 00009AF3 488B00                  	mov rax, qword [rax + 8*0]
 12369                                  	assert_closure(rax)
    42 00009AF6 803805              <1>  cmp byte [%1], %2
    43 00009AF9 0F8535A60000        <1>  jne L_error_incorrect_type
 12370 00009AFF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12371 00009B03 53                      	push rbx
 12372 00009B04 FF7508                  	push RET_ADDR
 12373 00009B07 488B7D18                	mov rdi, COUNT
 12374 00009B0B 4883C703                	add rdi, 3
 12375 00009B0F 48C1E703                	shl rdi, 3
 12376 00009B13 4801EF                  	add rdi, rbp
 12377 00009B16 488B6D00                	mov rbp, OLD_RDP
 12378 00009B1A BE00000000              	mov rsi, 0
 12379                                  .L_tc_recycle_frame_loop_5d0b:	 ; start recycle frame loop
 12380 00009B1F 4883FE05                	cmp rsi, 5
 12381 00009B23 7427                    	je .L_tc_recycle_frame_done_5d0b
 12382 00009B25 B904000000              	mov rcx, 4
 12383 00009B2A 4829F1                  	sub rcx, rsi
 12384 00009B2D 48C1E103                	shl rcx, 3
 12385 00009B31 4801E1                  	add rcx, rsp ; rcx is the address to move
 12386 00009B34 4889F3                  	mov rbx, rsi
 12387 00009B37 48C1E303                	shl rbx, 3
 12388 00009B3B 48F7DB                  	neg rbx
 12389 00009B3E 4801FB                  	add rbx, rdi ;rbx is the address to move to
 12390 00009B41 488B09                  	mov rcx, [rcx]
 12391 00009B44 48890B                  	mov [rbx], rcx
 12392 00009B47 48FFC6                  	inc rsi
 12393 00009B4A EBD3                    	jmp .L_tc_recycle_frame_loop_5d0b
 12394                                  .L_tc_recycle_frame_done_5d0b:	 ; end recycle frame loop
 12395 00009B4C BB04000000              	mov rbx, 4
 12396 00009B51 48C1E303                	shl rbx, 3
 12397 00009B55 48F7DB                  	neg rbx
 12398 00009B58 4801FB                  	add rbx, rdi
 12399 00009B5B 4889DC                  	mov rsp, rbx
 12400 00009B5E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12401 00009B62 FFE3                    	jmp rbx
 12402 00009B64 C9                      	leave
 12403 00009B65 C22000                  	ret 8 * (2 + 2)
 12404                                  .L_lambda_simple_end_4f79:	; new closure is in rax
 12405 00009B68 50                      	push rax
 12406 00009B69 6A01                    	push 1
 12407 00009B6B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12408 00009B70 E83F8D0000              	call malloc
 12409 00009B75 50                      	push rax
 12410 00009B76 BF08000000              	mov rdi, 8 * 1	; new rib
 12411 00009B7B E8348D0000              	call malloc
 12412 00009B80 50                      	push rax
 12413 00009B81 BF30000000              	mov rdi, 8 * 6	; extended env
 12414 00009B86 E8298D0000              	call malloc
 12415 00009B8B 488B7D10                	mov rdi, ENV
 12416 00009B8F BE00000000              	mov rsi, 0
 12417 00009B94 BA01000000              	mov rdx, 1
 12418                                  .L_lambda_simple_env_loop_4f7a:	; ext_env[i + 1] <-- env[i]
 12419 00009B99 4883FE05                	cmp rsi, 5
 12420 00009B9D 7410                    	je .L_lambda_simple_env_end_4f7a
 12421 00009B9F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 12422 00009BA3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12423 00009BA7 48FFC6                  	inc rsi
 12424 00009BAA 48FFC2                  	inc rdx
 12425 00009BAD EBEA                    	jmp .L_lambda_simple_env_loop_4f7a
 12426                                  .L_lambda_simple_env_end_4f7a:
 12427 00009BAF 5B                      	pop rbx
 12428 00009BB0 BE00000000              	mov rsi, 0
 12429                                  .L_lambda_simple_params_loop_4f7a:	; copy params
 12430 00009BB5 4883FE01                	cmp rsi, 1
 12431 00009BB9 740E                    	je .L_lambda_simple_params_end_4f7a
 12432 00009BBB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12433 00009BC0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12434 00009BC4 48FFC6                  	inc rsi
 12435 00009BC7 EBEC                    	jmp .L_lambda_simple_params_loop_4f7a
 12436                                  .L_lambda_simple_params_end_4f7a:
 12437 00009BC9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12438 00009BCC 4889C3                  	mov rbx, rax
 12439 00009BCF 58                      	pop rax
 12440 00009BD0 C60005                  	mov byte [rax], T_closure
 12441 00009BD3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12442 00009BD7 48C74009[E49B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f7a
 12443 00009BDF E9220A0000              	jmp .L_lambda_simple_end_4f7a
 12444                                  .L_lambda_simple_code_4f7a:	; lambda-simple body
 12445 00009BE4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12446 00009BEA 740B                    	je .L_lambda_simple_arity_check_ok_4f7a
 12447 00009BEC FF742410                	push qword [rsp + 8 * 2]
 12448 00009BF0 6A01                    	push 1
 12449 00009BF2 E9768C0000              	jmp L_error_incorrect_arity_simple
 12450                                  .L_lambda_simple_arity_check_ok_4f7a:
 12451 00009BF7 C8000000                	enter 0, 0
 12452 00009BFB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12453 00009C00 E8AF8C0000              	call malloc
 12454 00009C05 50                      	push rax
 12455 00009C06 BF08000000              	mov rdi, 8 * 1	; new rib
 12456 00009C0B E8A48C0000              	call malloc
 12457 00009C10 50                      	push rax
 12458 00009C11 BF38000000              	mov rdi, 8 * 7	; extended env
 12459 00009C16 E8998C0000              	call malloc
 12460 00009C1B 488B7D10                	mov rdi, ENV
 12461 00009C1F BE00000000              	mov rsi, 0
 12462 00009C24 BA01000000              	mov rdx, 1
 12463                                  .L_lambda_simple_env_loop_4f7b:	; ext_env[i + 1] <-- env[i]
 12464 00009C29 4883FE06                	cmp rsi, 6
 12465 00009C2D 7410                    	je .L_lambda_simple_env_end_4f7b
 12466 00009C2F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 12467 00009C33 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12468 00009C37 48FFC6                  	inc rsi
 12469 00009C3A 48FFC2                  	inc rdx
 12470 00009C3D EBEA                    	jmp .L_lambda_simple_env_loop_4f7b
 12471                                  .L_lambda_simple_env_end_4f7b:
 12472 00009C3F 5B                      	pop rbx
 12473 00009C40 BE00000000              	mov rsi, 0
 12474                                  .L_lambda_simple_params_loop_4f7b:	; copy params
 12475 00009C45 4883FE01                	cmp rsi, 1
 12476 00009C49 740E                    	je .L_lambda_simple_params_end_4f7b
 12477 00009C4B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12478 00009C50 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12479 00009C54 48FFC6                  	inc rsi
 12480 00009C57 EBEC                    	jmp .L_lambda_simple_params_loop_4f7b
 12481                                  .L_lambda_simple_params_end_4f7b:
 12482 00009C59 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12483 00009C5C 4889C3                  	mov rbx, rax
 12484 00009C5F 58                      	pop rax
 12485 00009C60 C60005                  	mov byte [rax], T_closure
 12486 00009C63 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12487 00009C67 48C74009[749C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f7b
 12488 00009C6F E9BE000000              	jmp .L_lambda_simple_end_4f7b
 12489                                  .L_lambda_simple_code_4f7b:	; lambda-simple body
 12490 00009C74 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12491 00009C7A 740B                    	je .L_lambda_simple_arity_check_ok_4f7b
 12492 00009C7C FF742410                	push qword [rsp + 8 * 2]
 12493 00009C80 6A02                    	push 2
 12494 00009C82 E9E68B0000              	jmp L_error_incorrect_arity_simple
 12495                                  .L_lambda_simple_arity_check_ok_4f7b:
 12496 00009C87 C8000000                	enter 0, 0
 12497 00009C8B 488B4528                	mov rax, PARAM(1)
 12498 00009C8F 50                      	push rax
 12499 00009C90 488B4520                	mov rax, PARAM(0)
 12500 00009C94 50                      	push rax
 12501 00009C95 6A02                    	push 2
 12502 00009C97 488B4510                	mov rax, qword [rbp + 8*2]
 12503 00009C9B 488B00                  	mov rax, qword [rax + 8*0]
 12504 00009C9E 488B00                  	mov rax, qword [rax + 8*0]
 12505                                  	assert_closure(rax)
    42 00009CA1 803805              <1>  cmp byte [%1], %2
    43 00009CA4 0F858AA40000        <1>  jne L_error_incorrect_type
 12506 00009CAA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12507 00009CAE 53                      	push rbx
 12508 00009CAF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12509 00009CB3 FFD3                    	call rbx
 12510 00009CB5 50                      	push rax
 12511 00009CB6 6A01                    	push 1
 12512 00009CB8 488B0425[B0020000]      	mov rax, qword [free_var_86]
 12513                                  	assert_closure(rax)
    42 00009CC0 803805              <1>  cmp byte [%1], %2
    43 00009CC3 0F856BA40000        <1>  jne L_error_incorrect_type
 12514 00009CC9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12515 00009CCD 53                      	push rbx
 12516 00009CCE FF7508                  	push RET_ADDR
 12517 00009CD1 488B7D18                	mov rdi, COUNT
 12518 00009CD5 4883C703                	add rdi, 3
 12519 00009CD9 48C1E703                	shl rdi, 3
 12520 00009CDD 4801EF                  	add rdi, rbp
 12521 00009CE0 488B6D00                	mov rbp, OLD_RDP
 12522 00009CE4 BE00000000              	mov rsi, 0
 12523                                  .L_tc_recycle_frame_loop_5d0d:	 ; start recycle frame loop
 12524 00009CE9 4883FE04                	cmp rsi, 4
 12525 00009CED 7427                    	je .L_tc_recycle_frame_done_5d0d
 12526 00009CEF B903000000              	mov rcx, 3
 12527 00009CF4 4829F1                  	sub rcx, rsi
 12528 00009CF7 48C1E103                	shl rcx, 3
 12529 00009CFB 4801E1                  	add rcx, rsp ; rcx is the address to move
 12530 00009CFE 4889F3                  	mov rbx, rsi
 12531 00009D01 48C1E303                	shl rbx, 3
 12532 00009D05 48F7DB                  	neg rbx
 12533 00009D08 4801FB                  	add rbx, rdi ;rbx is the address to move to
 12534 00009D0B 488B09                  	mov rcx, [rcx]
 12535 00009D0E 48890B                  	mov [rbx], rcx
 12536 00009D11 48FFC6                  	inc rsi
 12537 00009D14 EBD3                    	jmp .L_tc_recycle_frame_loop_5d0d
 12538                                  .L_tc_recycle_frame_done_5d0d:	 ; end recycle frame loop
 12539 00009D16 BB03000000              	mov rbx, 3
 12540 00009D1B 48C1E303                	shl rbx, 3
 12541 00009D1F 48F7DB                  	neg rbx
 12542 00009D22 4801FB                  	add rbx, rdi
 12543 00009D25 4889DC                  	mov rsp, rbx
 12544 00009D28 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12545 00009D2C FFE3                    	jmp rbx
 12546 00009D2E C9                      	leave
 12547 00009D2F C22000                  	ret 8 * (2 + 2)
 12548                                  .L_lambda_simple_end_4f7b:	; new closure is in rax
 12549 00009D32 50                      	push rax
 12550 00009D33 6A01                    	push 1
 12551 00009D35 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12552 00009D3A E8758B0000              	call malloc
 12553 00009D3F 50                      	push rax
 12554 00009D40 BF08000000              	mov rdi, 8 * 1	; new rib
 12555 00009D45 E86A8B0000              	call malloc
 12556 00009D4A 50                      	push rax
 12557 00009D4B BF38000000              	mov rdi, 8 * 7	; extended env
 12558 00009D50 E85F8B0000              	call malloc
 12559 00009D55 488B7D10                	mov rdi, ENV
 12560 00009D59 BE00000000              	mov rsi, 0
 12561 00009D5E BA01000000              	mov rdx, 1
 12562                                  .L_lambda_simple_env_loop_4f7c:	; ext_env[i + 1] <-- env[i]
 12563 00009D63 4883FE06                	cmp rsi, 6
 12564 00009D67 7410                    	je .L_lambda_simple_env_end_4f7c
 12565 00009D69 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 12566 00009D6D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12567 00009D71 48FFC6                  	inc rsi
 12568 00009D74 48FFC2                  	inc rdx
 12569 00009D77 EBEA                    	jmp .L_lambda_simple_env_loop_4f7c
 12570                                  .L_lambda_simple_env_end_4f7c:
 12571 00009D79 5B                      	pop rbx
 12572 00009D7A BE00000000              	mov rsi, 0
 12573                                  .L_lambda_simple_params_loop_4f7c:	; copy params
 12574 00009D7F 4883FE01                	cmp rsi, 1
 12575 00009D83 740E                    	je .L_lambda_simple_params_end_4f7c
 12576 00009D85 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12577 00009D8A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12578 00009D8E 48FFC6                  	inc rsi
 12579 00009D91 EBEC                    	jmp .L_lambda_simple_params_loop_4f7c
 12580                                  .L_lambda_simple_params_end_4f7c:
 12581 00009D93 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12582 00009D96 4889C3                  	mov rbx, rax
 12583 00009D99 58                      	pop rax
 12584 00009D9A C60005                  	mov byte [rax], T_closure
 12585 00009D9D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12586 00009DA1 48C74009[AE9D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f7c
 12587 00009DA9 E9E6070000              	jmp .L_lambda_simple_end_4f7c
 12588                                  .L_lambda_simple_code_4f7c:	; lambda-simple body
 12589 00009DAE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12590 00009DB4 740B                    	je .L_lambda_simple_arity_check_ok_4f7c
 12591 00009DB6 FF742410                	push qword [rsp + 8 * 2]
 12592 00009DBA 6A01                    	push 1
 12593 00009DBC E9AC8A0000              	jmp L_error_incorrect_arity_simple
 12594                                  .L_lambda_simple_arity_check_ok_4f7c:
 12595 00009DC1 C8000000                	enter 0, 0
 12596 00009DC5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12597 00009DCA E8E58A0000              	call malloc
 12598 00009DCF 50                      	push rax
 12599 00009DD0 BF08000000              	mov rdi, 8 * 1	; new rib
 12600 00009DD5 E8DA8A0000              	call malloc
 12601 00009DDA 50                      	push rax
 12602 00009DDB BF40000000              	mov rdi, 8 * 8	; extended env
 12603 00009DE0 E8CF8A0000              	call malloc
 12604 00009DE5 488B7D10                	mov rdi, ENV
 12605 00009DE9 BE00000000              	mov rsi, 0
 12606 00009DEE BA01000000              	mov rdx, 1
 12607                                  .L_lambda_simple_env_loop_4f7d:	; ext_env[i + 1] <-- env[i]
 12608 00009DF3 4883FE07                	cmp rsi, 7
 12609 00009DF7 7410                    	je .L_lambda_simple_env_end_4f7d
 12610 00009DF9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 12611 00009DFD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12612 00009E01 48FFC6                  	inc rsi
 12613 00009E04 48FFC2                  	inc rdx
 12614 00009E07 EBEA                    	jmp .L_lambda_simple_env_loop_4f7d
 12615                                  .L_lambda_simple_env_end_4f7d:
 12616 00009E09 5B                      	pop rbx
 12617 00009E0A BE00000000              	mov rsi, 0
 12618                                  .L_lambda_simple_params_loop_4f7d:	; copy params
 12619 00009E0F 4883FE01                	cmp rsi, 1
 12620 00009E13 740E                    	je .L_lambda_simple_params_end_4f7d
 12621 00009E15 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12622 00009E1A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12623 00009E1E 48FFC6                  	inc rsi
 12624 00009E21 EBEC                    	jmp .L_lambda_simple_params_loop_4f7d
 12625                                  .L_lambda_simple_params_end_4f7d:
 12626 00009E23 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12627 00009E26 4889C3                  	mov rbx, rax
 12628 00009E29 58                      	pop rax
 12629 00009E2A C60005                  	mov byte [rax], T_closure
 12630 00009E2D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12631 00009E31 48C74009[3E9E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f7d
 12632 00009E39 E936050000              	jmp .L_lambda_simple_end_4f7d
 12633                                  .L_lambda_simple_code_4f7d:	; lambda-simple body
 12634 00009E3E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12635 00009E44 740B                    	je .L_lambda_simple_arity_check_ok_4f7d
 12636 00009E46 FF742410                	push qword [rsp + 8 * 2]
 12637 00009E4A 6A01                    	push 1
 12638 00009E4C E91C8A0000              	jmp L_error_incorrect_arity_simple
 12639                                  .L_lambda_simple_arity_check_ok_4f7d:
 12640 00009E51 C8000000                	enter 0, 0
 12641 00009E55 488D0425[17000000]      	lea rax, [23 + L_constants]
 12642 00009E5D 50                      	push rax
 12643 00009E5E 6A01                    	push 1
 12644 00009E60 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12645 00009E65 E84A8A0000              	call malloc
 12646 00009E6A 50                      	push rax
 12647 00009E6B BF08000000              	mov rdi, 8 * 1	; new rib
 12648 00009E70 E83F8A0000              	call malloc
 12649 00009E75 50                      	push rax
 12650 00009E76 BF48000000              	mov rdi, 8 * 9	; extended env
 12651 00009E7B E8348A0000              	call malloc
 12652 00009E80 488B7D10                	mov rdi, ENV
 12653 00009E84 BE00000000              	mov rsi, 0
 12654 00009E89 BA01000000              	mov rdx, 1
 12655                                  .L_lambda_simple_env_loop_4f7e:	; ext_env[i + 1] <-- env[i]
 12656 00009E8E 4883FE08                	cmp rsi, 8
 12657 00009E92 7410                    	je .L_lambda_simple_env_end_4f7e
 12658 00009E94 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 12659 00009E98 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12660 00009E9C 48FFC6                  	inc rsi
 12661 00009E9F 48FFC2                  	inc rdx
 12662 00009EA2 EBEA                    	jmp .L_lambda_simple_env_loop_4f7e
 12663                                  .L_lambda_simple_env_end_4f7e:
 12664 00009EA4 5B                      	pop rbx
 12665 00009EA5 BE00000000              	mov rsi, 0
 12666                                  .L_lambda_simple_params_loop_4f7e:	; copy params
 12667 00009EAA 4883FE01                	cmp rsi, 1
 12668 00009EAE 740E                    	je .L_lambda_simple_params_end_4f7e
 12669 00009EB0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12670 00009EB5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12671 00009EB9 48FFC6                  	inc rsi
 12672 00009EBC EBEC                    	jmp .L_lambda_simple_params_loop_4f7e
 12673                                  .L_lambda_simple_params_end_4f7e:
 12674 00009EBE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12675 00009EC1 4889C3                  	mov rbx, rax
 12676 00009EC4 58                      	pop rax
 12677 00009EC5 C60005                  	mov byte [rax], T_closure
 12678 00009EC8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12679 00009ECC 48C74009[D99E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f7e
 12680 00009ED4 E929040000              	jmp .L_lambda_simple_end_4f7e
 12681                                  .L_lambda_simple_code_4f7e:	; lambda-simple body
 12682 00009ED9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12683 00009EDF 740B                    	je .L_lambda_simple_arity_check_ok_4f7e
 12684 00009EE1 FF742410                	push qword [rsp + 8 * 2]
 12685 00009EE5 6A01                    	push 1
 12686 00009EE7 E981890000              	jmp L_error_incorrect_arity_simple
 12687                                  .L_lambda_simple_arity_check_ok_4f7e:
 12688 00009EEC C8000000                	enter 0, 0
 12689 00009EF0 BF11000000              	mov qword rdi, (1 + 8 + 8)
 12690 00009EF5 E8BA890000              	call malloc
 12691 00009EFA 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 12692 00009EFE 48B8-                   	mov rax, sob_void
 12692 00009F00 [0000000000000000] 
 12693                                  
 12694 00009F08 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12695 00009F0D E8A2890000              	call malloc
 12696 00009F12 50                      	push rax
 12697 00009F13 BF08000000              	mov rdi, 8 * 1	; new rib
 12698 00009F18 E897890000              	call malloc
 12699 00009F1D 50                      	push rax
 12700 00009F1E BF50000000              	mov rdi, 8 * 10	; extended env
 12701 00009F23 E88C890000              	call malloc
 12702 00009F28 488B7D10                	mov rdi, ENV
 12703 00009F2C BE00000000              	mov rsi, 0
 12704 00009F31 BA01000000              	mov rdx, 1
 12705                                  .L_lambda_simple_env_loop_4f7f:	; ext_env[i + 1] <-- env[i]
 12706 00009F36 4883FE09                	cmp rsi, 9
 12707 00009F3A 7410                    	je .L_lambda_simple_env_end_4f7f
 12708 00009F3C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 12709 00009F40 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12710 00009F44 48FFC6                  	inc rsi
 12711 00009F47 48FFC2                  	inc rdx
 12712 00009F4A EBEA                    	jmp .L_lambda_simple_env_loop_4f7f
 12713                                  .L_lambda_simple_env_end_4f7f:
 12714 00009F4C 5B                      	pop rbx
 12715 00009F4D BE00000000              	mov rsi, 0
 12716                                  .L_lambda_simple_params_loop_4f7f:	; copy params
 12717 00009F52 4883FE01                	cmp rsi, 1
 12718 00009F56 740E                    	je .L_lambda_simple_params_end_4f7f
 12719 00009F58 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12720 00009F5D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12721 00009F61 48FFC6                  	inc rsi
 12722 00009F64 EBEC                    	jmp .L_lambda_simple_params_loop_4f7f
 12723                                  .L_lambda_simple_params_end_4f7f:
 12724 00009F66 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12725 00009F69 4889C3                  	mov rbx, rax
 12726 00009F6C 58                      	pop rax
 12727 00009F6D C60005                  	mov byte [rax], T_closure
 12728 00009F70 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12729 00009F74 48C74009[819F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f7f
 12730 00009F7C E96F010000              	jmp .L_lambda_simple_end_4f7f
 12731                                  .L_lambda_simple_code_4f7f:	; lambda-simple body
 12732 00009F81 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12733 00009F87 740B                    	je .L_lambda_simple_arity_check_ok_4f7f
 12734 00009F89 FF742410                	push qword [rsp + 8 * 2]
 12735 00009F8D 6A02                    	push 2
 12736 00009F8F E9D9880000              	jmp L_error_incorrect_arity_simple
 12737                                  .L_lambda_simple_arity_check_ok_4f7f:
 12738 00009F94 C8000000                	enter 0, 0
 12739 00009F98 488B4528                	mov rax, PARAM(1)
 12740 00009F9C 50                      	push rax
 12741 00009F9D 6A01                    	push 1
 12742 00009F9F 488B0425[00000000]      	mov rax, qword [free_var_0]
 12743                                  	assert_closure(rax)
    42 00009FA7 803805              <1>  cmp byte [%1], %2
    43 00009FAA 0F8584A10000        <1>  jne L_error_incorrect_type
 12744 00009FB0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12745 00009FB4 53                      	push rbx
 12746 00009FB5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12747 00009FB9 FFD3                    	call rbx
 12748 00009FBB 483D[02000000]          	cmp rax, sob_boolean_false
 12749 00009FC1 0F8525010000            	jne .L_or_end_0617
 12750 00009FC7 488B4528                	mov rax, PARAM(1)
 12751 00009FCB 50                      	push rax
 12752 00009FCC 6A01                    	push 1
 12753 00009FCE 488B0425[80000000]      	mov rax, qword [free_var_16]
 12754                                  	assert_closure(rax)
    42 00009FD6 803805              <1>  cmp byte [%1], %2
    43 00009FD9 0F8555A10000        <1>  jne L_error_incorrect_type
 12755 00009FDF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12756 00009FE3 53                      	push rbx
 12757 00009FE4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12758 00009FE8 FFD3                    	call rbx
 12759 00009FEA 50                      	push rax
 12760 00009FEB 488B4520                	mov rax, PARAM(0)
 12761 00009FEF 50                      	push rax
 12762 00009FF0 6A02                    	push 2
 12763 00009FF2 488B4510                	mov rax, qword [rbp + 8*2]
 12764 00009FF6 488B4008                	mov rax, qword [rax + 8*1]
 12765 00009FFA 488B00                  	mov rax, qword [rax + 8*0]
 12766                                  	assert_closure(rax)
    42 00009FFD 803805              <1>  cmp byte [%1], %2
    43 0000A000 0F852EA10000        <1>  jne L_error_incorrect_type
 12767 0000A006 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12768 0000A00A 53                      	push rbx
 12769 0000A00B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12770 0000A00F FFD3                    	call rbx
 12771 0000A011 483D[02000000]          	cmp rax, sob_boolean_false
 12772 0000A017 0F84C7000000            	je .L_if_else_56ad
 12773 0000A01D 488B4528                	mov rax, PARAM(1)
 12774 0000A021 50                      	push rax
 12775 0000A022 6A01                    	push 1
 12776 0000A024 488B0425[88000000]      	mov rax, qword [free_var_17]
 12777                                  	assert_closure(rax)
    42 0000A02C 803805              <1>  cmp byte [%1], %2
    43 0000A02F 0F85FFA00000        <1>  jne L_error_incorrect_type
 12778 0000A035 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12779 0000A039 53                      	push rbx
 12780 0000A03A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12781 0000A03E FFD3                    	call rbx
 12782 0000A040 50                      	push rax
 12783 0000A041 488B4528                	mov rax, PARAM(1)
 12784 0000A045 50                      	push rax
 12785 0000A046 6A01                    	push 1
 12786 0000A048 488B0425[80000000]      	mov rax, qword [free_var_16]
 12787                                  	assert_closure(rax)
    42 0000A050 803805              <1>  cmp byte [%1], %2
    43 0000A053 0F85DBA00000        <1>  jne L_error_incorrect_type
 12788 0000A059 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12789 0000A05D 53                      	push rbx
 12790 0000A05E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12791 0000A062 FFD3                    	call rbx
 12792 0000A064 50                      	push rax
 12793 0000A065 6A02                    	push 2
 12794 0000A067 488B4510                	mov rax, qword [rbp + 8*2]
 12795 0000A06B 488B00                  	mov rax, qword [rax + 8*0]
 12796 0000A06E 488B00                  	mov rax, qword [rax + 8*0]
 12797 0000A071 488B00                  	mov rax, qword [rax]
 12798                                  	assert_closure(rax)
    42 0000A074 803805              <1>  cmp byte [%1], %2
    43 0000A077 0F85B7A00000        <1>  jne L_error_incorrect_type
 12799 0000A07D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12800 0000A081 53                      	push rbx
 12801 0000A082 FF7508                  	push RET_ADDR
 12802 0000A085 488B7D18                	mov rdi, COUNT
 12803 0000A089 4883C703                	add rdi, 3
 12804 0000A08D 48C1E703                	shl rdi, 3
 12805 0000A091 4801EF                  	add rdi, rbp
 12806 0000A094 488B6D00                	mov rbp, OLD_RDP
 12807 0000A098 BE00000000              	mov rsi, 0
 12808                                  .L_tc_recycle_frame_loop_5d10:	 ; start recycle frame loop
 12809 0000A09D 4883FE05                	cmp rsi, 5
 12810 0000A0A1 7427                    	je .L_tc_recycle_frame_done_5d10
 12811 0000A0A3 B904000000              	mov rcx, 4
 12812 0000A0A8 4829F1                  	sub rcx, rsi
 12813 0000A0AB 48C1E103                	shl rcx, 3
 12814 0000A0AF 4801E1                  	add rcx, rsp ; rcx is the address to move
 12815 0000A0B2 4889F3                  	mov rbx, rsi
 12816 0000A0B5 48C1E303                	shl rbx, 3
 12817 0000A0B9 48F7DB                  	neg rbx
 12818 0000A0BC 4801FB                  	add rbx, rdi ;rbx is the address to move to
 12819 0000A0BF 488B09                  	mov rcx, [rcx]
 12820 0000A0C2 48890B                  	mov [rbx], rcx
 12821 0000A0C5 48FFC6                  	inc rsi
 12822 0000A0C8 EBD3                    	jmp .L_tc_recycle_frame_loop_5d10
 12823                                  .L_tc_recycle_frame_done_5d10:	 ; end recycle frame loop
 12824 0000A0CA BB04000000              	mov rbx, 4
 12825 0000A0CF 48C1E303                	shl rbx, 3
 12826 0000A0D3 48F7DB                  	neg rbx
 12827 0000A0D6 4801FB                  	add rbx, rdi
 12828 0000A0D9 4889DC                  	mov rsp, rbx
 12829 0000A0DC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12830 0000A0E0 FFE3                    	jmp rbx
 12831 0000A0E2 EB08                    	jmp .L_if_end_56ad
 12832                                  	.L_if_else_56ad:
 12833 0000A0E4 488D0425[02000000]      	lea rax, [2 + L_constants]
 12834                                  	.L_if_end_56ad:
 12835                                  .L_or_end_0617:
 12836 0000A0EC C9                      	leave
 12837 0000A0ED C22000                  	ret 8 * (2 + 2)
 12838                                  .L_lambda_simple_end_4f7f:	; new closure is in rax
 12839 0000A0F0 50                      	push rax
 12840 0000A0F1 488B4520                	mov rax, PARAM(0)
 12841 0000A0F5 8F00                    	pop qword [rax]
 12842 0000A0F7 48B8-                   	mov rax, sob_void
 12842 0000A0F9 [0000000000000000] 
 12843                                  
 12844 0000A101 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12845 0000A106 E8A9870000              	call malloc
 12846 0000A10B 50                      	push rax
 12847 0000A10C BF08000000              	mov rdi, 8 * 1	; new rib
 12848 0000A111 E89E870000              	call malloc
 12849 0000A116 50                      	push rax
 12850 0000A117 BF50000000              	mov rdi, 8 * 10	; extended env
 12851 0000A11C E893870000              	call malloc
 12852 0000A121 488B7D10                	mov rdi, ENV
 12853 0000A125 BE00000000              	mov rsi, 0
 12854 0000A12A BA01000000              	mov rdx, 1
 12855                                  .L_lambda_opt_env_loop_0c92:	; ext_env[i + 1] <-- env[i]
 12856 0000A12F 4883FE09                	cmp rsi, 9
 12857 0000A133 7410                    	je .L_lambda_opt_env_end_0c92
 12858 0000A135 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12859 0000A139 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12860 0000A13D 48FFC6                  	inc rsi
 12861 0000A140 48FFC2                  	inc rdx
 12862 0000A143 EBEA                    	jmp .L_lambda_opt_env_loop_0c92
 12863                                  .L_lambda_opt_env_end_0c92:
 12864 0000A145 5B                      	pop rbx
 12865 0000A146 BE00000000              	mov rsi, 0
 12866                                  .L_lambda_opt_params_loop_0c92:	; copy params
 12867 0000A14B 4883FE01                	cmp rsi, 1
 12868 0000A14F 740E                    	je .L_lambda_opt_params_end_0c92
 12869 0000A151 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12870 0000A156 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12871 0000A15A 48FFC6                  	inc rsi
 12872 0000A15D EBEC                    	jmp .L_lambda_opt_params_loop_0c92
 12873                                  .L_lambda_opt_params_end_0c92:
 12874 0000A15F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12875 0000A162 4889C3                  	mov rbx, rax
 12876 0000A165 58                      	pop rax
 12877 0000A166 C60005                  	mov byte [rax], T_closure
 12878 0000A169 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12879 0000A16D 48C74009[7AA10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c92
 12880 0000A175 E984010000              	jmp .L_lambda_opt_end_0c92
 12881                                  .L_lambda_opt_code_0c92:	; lambda-opt body
 12882 0000A17A 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 12883 0000A17F 4889FB                  	mov rbx, rdi
 12884 0000A182 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 12885 0000A186 4883FB00                	cmp rbx, 0
 12886 0000A18A 7F45                    	jg .L_lambda_opt_arity_check_more_0c92
 12887                                  .L_lambda_opt_arity_check_exact_0c92:	 ; if params in opt is exact
 12888 0000A18C 4883EC08                	sub rsp, 8
 12889 0000A190 BE00000000              	mov rsi, 0 ; index
 12890                                  .L_lambda_opt_stack_enlarge_loop_0c92:	 ; stack loop enlarge start
 12891 0000A195 4883FE04                	cmp rsi, 4
 12892 0000A199 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c92
 12893 0000A19B 4889F7                  	mov rdi, rsi
 12894 0000A19E 48FFC7                  	inc rdi
 12895 0000A1A1 48C1E703                	shl rdi, 3
 12896 0000A1A5 4801E7                  	add rdi, rsp
 12897 0000A1A8 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 12898 0000A1AB 4883EB08                	sub rbx, 8
 12899 0000A1AF 488B3F                  	mov rdi, [rdi]
 12900 0000A1B2 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 12901 0000A1B5 48FFC6                  	inc rsi
 12902 0000A1B8 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c92
 12903                                  .L_lambda_opt_stack_enlarge_loop_exit_0c92:	 ; end of stack enlarge loop
 12904 0000A1BA 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 12904 0000A1BF [01000000]         
 12905 0000A1C3 48C744241002000000      	mov qword [rsp + 2*8], 2
 12906 0000A1CC E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c92
 12907                                  .L_lambda_opt_arity_check_more_0c92:	 ; if params in opt is more
 12908 0000A1D1 48B8-                   	mov rax, sob_nil
 12908 0000A1D3 [0100000000000000] 
 12909 0000A1DB 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 12910 0000A1DE 48FFCE                  	dec rsi
 12911                                  .L_lambda_opt_list_create_loop_0c92:	; start of list creation loop
 12912 0000A1E1 4883FEFF                	cmp rsi, -1
 12913 0000A1E5 7422                    	je .L_lambda_opt_list_create_loop_exit_0c92
 12914 0000A1E7 488D4E04                	lea rcx, [rsi + (3 + 1)]
 12915 0000A1EB 48C1E103                	shl rcx, 3
 12916 0000A1EF 4801E1                  	add rcx, rsp
 12917 0000A1F2 488B09                  	mov rcx, [rcx]
 12918 0000A1F5 56                      	push rsi ; save params
 12919 0000A1F6 53                      	push rbx
 12920                                  
 12921 0000A1F7 50                      	push rax ; cdr
 12922 0000A1F8 51                      	push rcx ; car
 12923 0000A1F9 6A02                    	push qword 2 ; push num of args
 12924 0000A1FB 6A01                    	push qword 1 ; push garbage as env
 12925 0000A1FD E839900000              	call L_code_ptr_cons
 12926                                  
 12927 0000A202 5B                      	pop rbx ; restore params
 12928 0000A203 5E                      	pop rsi
 12929 0000A204 48FFCE                  	dec rsi
 12930 0000A207 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c92
 12931                                  .L_lambda_opt_list_create_loop_exit_0c92:	; end of list creation loop
 12932 0000A209 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 12933 0000A20E 4883C302                	add rbx, 2
 12934 0000A212 4889DF                  	mov rdi, rbx
 12935 0000A215 48C1E703                	shl rdi,3
 12936 0000A219 4801E7                  	add rdi, rsp
 12937 0000A21C 488907                  	mov [rdi], rax
 12938 0000A21F BE00000000              	mov rsi, 0 ;index
 12939                                  .L_lambda_opt_stack_shrink_loop_0c92:	; start of stack shrink loop
 12940 0000A224 4883FE04                	cmp rsi, 4
 12941 0000A228 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c92
 12942 0000A22A BF03000000              	mov rdi, 3
 12943 0000A22F 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 12944 0000A232 4889D9                  	mov rcx, rbx
 12945 0000A235 4829F1                  	sub rcx, rsi
 12946 0000A238 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 12947 0000A23B 4889FA                  	mov rdx, rdi
 12948 0000A23E 48C1E203                	shl rdx, 3
 12949 0000A242 4801E2                  	add rdx, rsp
 12950 0000A245 48C1E103                	shl rcx, 3
 12951 0000A249 4801E1                  	add rcx, rsp
 12952 0000A24C 488B12                  	mov rdx, [rdx]
 12953 0000A24F 488911                  	mov [rcx], rdx
 12954 0000A252 48FFC6                  	inc rsi
 12955 0000A255 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c92
 12956                                  .L_lambda_opt_stack_shrink_loop_exit_0c92:	; end of stack shrink loop
 12957 0000A257 4883EB02                	sub rbx, 2 ; rbx has number of args
 12958 0000A25B 4883EB02                	sub rbx, 2
 12959 0000A25F 48C1E303                	shl rbx, 3
 12960 0000A263 4801DC                  	add rsp, rbx
 12961 0000A266 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 12962                                  .L_lambda_opt_stack_adjusted_0c92:
 12963 0000A26F C8000000                	enter 0, 0
 12964 0000A273 488B4528                	mov rax, PARAM(1)
 12965 0000A277 50                      	push rax
 12966 0000A278 488B4520                	mov rax, PARAM(0)
 12967 0000A27C 50                      	push rax
 12968 0000A27D 6A02                    	push 2
 12969 0000A27F 488B4510                	mov rax, qword [rbp + 8*2]
 12970 0000A283 488B00                  	mov rax, qword [rax + 8*0]
 12971 0000A286 488B00                  	mov rax, qword [rax + 8*0]
 12972 0000A289 488B00                  	mov rax, qword [rax]
 12973                                  	assert_closure(rax)
    42 0000A28C 803805              <1>  cmp byte [%1], %2
    43 0000A28F 0F859F9E0000        <1>  jne L_error_incorrect_type
 12974 0000A295 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12975 0000A299 53                      	push rbx
 12976 0000A29A FF7508                  	push RET_ADDR
 12977 0000A29D 488B7D18                	mov rdi, COUNT
 12978 0000A2A1 4883C703                	add rdi, 3
 12979 0000A2A5 48C1E703                	shl rdi, 3
 12980 0000A2A9 4801EF                  	add rdi, rbp
 12981 0000A2AC 488B6D00                	mov rbp, OLD_RDP
 12982 0000A2B0 BE00000000              	mov rsi, 0
 12983                                  .L_tc_recycle_frame_loop_5d11:	 ; start recycle frame loop
 12984 0000A2B5 4883FE05                	cmp rsi, 5
 12985 0000A2B9 7427                    	je .L_tc_recycle_frame_done_5d11
 12986 0000A2BB B904000000              	mov rcx, 4
 12987 0000A2C0 4829F1                  	sub rcx, rsi
 12988 0000A2C3 48C1E103                	shl rcx, 3
 12989 0000A2C7 4801E1                  	add rcx, rsp ; rcx is the address to move
 12990 0000A2CA 4889F3                  	mov rbx, rsi
 12991 0000A2CD 48C1E303                	shl rbx, 3
 12992 0000A2D1 48F7DB                  	neg rbx
 12993 0000A2D4 4801FB                  	add rbx, rdi ;rbx is the address to move to
 12994 0000A2D7 488B09                  	mov rcx, [rcx]
 12995 0000A2DA 48890B                  	mov [rbx], rcx
 12996 0000A2DD 48FFC6                  	inc rsi
 12997 0000A2E0 EBD3                    	jmp .L_tc_recycle_frame_loop_5d11
 12998                                  .L_tc_recycle_frame_done_5d11:	 ; end recycle frame loop
 12999 0000A2E2 BB04000000              	mov rbx, 4
 13000 0000A2E7 48C1E303                	shl rbx, 3
 13001 0000A2EB 48F7DB                  	neg rbx
 13002 0000A2EE 4801FB                  	add rbx, rdi
 13003 0000A2F1 4889DC                  	mov rsp, rbx
 13004 0000A2F4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13005 0000A2F8 FFE3                    	jmp rbx
 13006 0000A2FA C9                      	leave
 13007 0000A2FB C22000                  	ret AND_KILL_FRAME(2)
 13008                                  .L_lambda_opt_end_0c92:	; new closure is in rax
 13009 0000A2FE C9                      	leave
 13010 0000A2FF C21800                  	ret 8 * (2 + 1)
 13011                                  .L_lambda_simple_end_4f7e:	; new closure is in rax
 13012                                  	assert_closure(rax)
    42 0000A302 803805              <1>  cmp byte [%1], %2
    43 0000A305 0F85299E0000        <1>  jne L_error_incorrect_type
 13013 0000A30B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13014 0000A30F 53                      	push rbx
 13015 0000A310 FF7508                  	push RET_ADDR
 13016 0000A313 488B7D18                	mov rdi, COUNT
 13017 0000A317 4883C703                	add rdi, 3
 13018 0000A31B 48C1E703                	shl rdi, 3
 13019 0000A31F 4801EF                  	add rdi, rbp
 13020 0000A322 488B6D00                	mov rbp, OLD_RDP
 13021 0000A326 BE00000000              	mov rsi, 0
 13022                                  .L_tc_recycle_frame_loop_5d0f:	 ; start recycle frame loop
 13023 0000A32B 4883FE04                	cmp rsi, 4
 13024 0000A32F 7427                    	je .L_tc_recycle_frame_done_5d0f
 13025 0000A331 B903000000              	mov rcx, 3
 13026 0000A336 4829F1                  	sub rcx, rsi
 13027 0000A339 48C1E103                	shl rcx, 3
 13028 0000A33D 4801E1                  	add rcx, rsp ; rcx is the address to move
 13029 0000A340 4889F3                  	mov rbx, rsi
 13030 0000A343 48C1E303                	shl rbx, 3
 13031 0000A347 48F7DB                  	neg rbx
 13032 0000A34A 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13033 0000A34D 488B09                  	mov rcx, [rcx]
 13034 0000A350 48890B                  	mov [rbx], rcx
 13035 0000A353 48FFC6                  	inc rsi
 13036 0000A356 EBD3                    	jmp .L_tc_recycle_frame_loop_5d0f
 13037                                  .L_tc_recycle_frame_done_5d0f:	 ; end recycle frame loop
 13038 0000A358 BB03000000              	mov rbx, 3
 13039 0000A35D 48C1E303                	shl rbx, 3
 13040 0000A361 48F7DB                  	neg rbx
 13041 0000A364 4801FB                  	add rbx, rdi
 13042 0000A367 4889DC                  	mov rsp, rbx
 13043 0000A36A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13044 0000A36E FFE3                    	jmp rbx
 13045 0000A370 C9                      	leave
 13046 0000A371 C21800                  	ret 8 * (2 + 1)
 13047                                  .L_lambda_simple_end_4f7d:	; new closure is in rax
 13048 0000A374 50                      	push rax
 13049 0000A375 6A01                    	push 1
 13050 0000A377 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13051 0000A37C E833850000              	call malloc
 13052 0000A381 50                      	push rax
 13053 0000A382 BF08000000              	mov rdi, 8 * 1	; new rib
 13054 0000A387 E828850000              	call malloc
 13055 0000A38C 50                      	push rax
 13056 0000A38D BF40000000              	mov rdi, 8 * 8	; extended env
 13057 0000A392 E81D850000              	call malloc
 13058 0000A397 488B7D10                	mov rdi, ENV
 13059 0000A39B BE00000000              	mov rsi, 0
 13060 0000A3A0 BA01000000              	mov rdx, 1
 13061                                  .L_lambda_simple_env_loop_4f80:	; ext_env[i + 1] <-- env[i]
 13062 0000A3A5 4883FE07                	cmp rsi, 7
 13063 0000A3A9 7410                    	je .L_lambda_simple_env_end_4f80
 13064 0000A3AB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 13065 0000A3AF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13066 0000A3B3 48FFC6                  	inc rsi
 13067 0000A3B6 48FFC2                  	inc rdx
 13068 0000A3B9 EBEA                    	jmp .L_lambda_simple_env_loop_4f80
 13069                                  .L_lambda_simple_env_end_4f80:
 13070 0000A3BB 5B                      	pop rbx
 13071 0000A3BC BE00000000              	mov rsi, 0
 13072                                  .L_lambda_simple_params_loop_4f80:	; copy params
 13073 0000A3C1 4883FE01                	cmp rsi, 1
 13074 0000A3C5 740E                    	je .L_lambda_simple_params_end_4f80
 13075 0000A3C7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13076 0000A3CC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13077 0000A3D0 48FFC6                  	inc rsi
 13078 0000A3D3 EBEC                    	jmp .L_lambda_simple_params_loop_4f80
 13079                                  .L_lambda_simple_params_end_4f80:
 13080 0000A3D5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13081 0000A3D8 4889C3                  	mov rbx, rax
 13082 0000A3DB 58                      	pop rax
 13083 0000A3DC C60005                  	mov byte [rax], T_closure
 13084 0000A3DF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13085 0000A3E3 48C74009[F0A30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f80
 13086 0000A3EB E932010000              	jmp .L_lambda_simple_end_4f80
 13087                                  .L_lambda_simple_code_4f80:	; lambda-simple body
 13088 0000A3F0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13089 0000A3F6 740B                    	je .L_lambda_simple_arity_check_ok_4f80
 13090 0000A3F8 FF742410                	push qword [rsp + 8 * 2]
 13091 0000A3FC 6A01                    	push 1
 13092 0000A3FE E96A840000              	jmp L_error_incorrect_arity_simple
 13093                                  .L_lambda_simple_arity_check_ok_4f80:
 13094 0000A403 C8000000                	enter 0, 0
 13095 0000A407 488B4510                	mov rax, qword [rbp + 8*2]
 13096 0000A40B 488B4020                	mov rax, qword [rax + 8*4]
 13097 0000A40F 488B00                  	mov rax, qword [rax + 8*0]
 13098 0000A412 50                      	push rax
 13099 0000A413 6A01                    	push 1
 13100 0000A415 488B4520                	mov rax, PARAM(0)
 13101                                  	assert_closure(rax)
    42 0000A419 803805              <1>  cmp byte [%1], %2
    43 0000A41C 0F85129D0000        <1>  jne L_error_incorrect_type
 13102 0000A422 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13103 0000A426 53                      	push rbx
 13104 0000A427 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13105 0000A42B FFD3                    	call rbx
 13106 0000A42D 48890425[30030000]      	mov qword [free_var_102], rax
 13107 0000A435 48B8-                   	mov rax, sob_void
 13107 0000A437 [0000000000000000] 
 13108                                  
 13109 0000A43F 488B4510                	mov rax, qword [rbp + 8*2]
 13110 0000A443 488B00                  	mov rax, qword [rax + 8*0]
 13111 0000A446 488B00                  	mov rax, qword [rax + 8*0]
 13112 0000A449 50                      	push rax
 13113 0000A44A 6A01                    	push 1
 13114 0000A44C 488B4520                	mov rax, PARAM(0)
 13115                                  	assert_closure(rax)
    42 0000A450 803805              <1>  cmp byte [%1], %2
    43 0000A453 0F85DB9C0000        <1>  jne L_error_incorrect_type
 13116 0000A459 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13117 0000A45D 53                      	push rbx
 13118 0000A45E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13119 0000A462 FFD3                    	call rbx
 13120 0000A464 48890425[38030000]      	mov qword [free_var_103], rax
 13121 0000A46C 48B8-                   	mov rax, sob_void
 13121 0000A46E [0000000000000000] 
 13122                                  
 13123 0000A476 488B4510                	mov rax, qword [rbp + 8*2]
 13124 0000A47A 488B4008                	mov rax, qword [rax + 8*1]
 13125 0000A47E 488B00                  	mov rax, qword [rax + 8*0]
 13126 0000A481 50                      	push rax
 13127 0000A482 6A01                    	push 1
 13128 0000A484 488B4520                	mov rax, PARAM(0)
 13129                                  	assert_closure(rax)
    42 0000A488 803805              <1>  cmp byte [%1], %2
    43 0000A48B 0F85A39C0000        <1>  jne L_error_incorrect_type
 13130 0000A491 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13131 0000A495 53                      	push rbx
 13132 0000A496 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13133 0000A49A FFD3                    	call rbx
 13134 0000A49C 48890425[40030000]      	mov qword [free_var_104], rax
 13135 0000A4A4 48B8-                   	mov rax, sob_void
 13135 0000A4A6 [0000000000000000] 
 13136                                  
 13137 0000A4AE 488B4510                	mov rax, qword [rbp + 8*2]
 13138 0000A4B2 488B4010                	mov rax, qword [rax + 8*2]
 13139 0000A4B6 488B00                  	mov rax, qword [rax + 8*0]
 13140 0000A4B9 50                      	push rax
 13141 0000A4BA 6A01                    	push 1
 13142 0000A4BC 488B4520                	mov rax, PARAM(0)
 13143                                  	assert_closure(rax)
    42 0000A4C0 803805              <1>  cmp byte [%1], %2
    43 0000A4C3 0F856B9C0000        <1>  jne L_error_incorrect_type
 13144 0000A4C9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13145 0000A4CD 53                      	push rbx
 13146 0000A4CE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13147 0000A4D2 FFD3                    	call rbx
 13148 0000A4D4 48890425[48030000]      	mov qword [free_var_105], rax
 13149 0000A4DC 48B8-                   	mov rax, sob_void
 13149 0000A4DE [0000000000000000] 
 13150                                  
 13151 0000A4E6 488B4510                	mov rax, qword [rbp + 8*2]
 13152 0000A4EA 488B4018                	mov rax, qword [rax + 8*3]
 13153 0000A4EE 488B00                  	mov rax, qword [rax + 8*0]
 13154 0000A4F1 50                      	push rax
 13155 0000A4F2 6A01                    	push 1
 13156 0000A4F4 488B4520                	mov rax, PARAM(0)
 13157                                  	assert_closure(rax)
    42 0000A4F8 803805              <1>  cmp byte [%1], %2
    43 0000A4FB 0F85339C0000        <1>  jne L_error_incorrect_type
 13158 0000A501 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13159 0000A505 53                      	push rbx
 13160 0000A506 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13161 0000A50A FFD3                    	call rbx
 13162 0000A50C 48890425[50030000]      	mov qword [free_var_106], rax
 13163 0000A514 48B8-                   	mov rax, sob_void
 13163 0000A516 [0000000000000000] 
 13164 0000A51E C9                      	leave
 13165 0000A51F C21800                  	ret 8 * (2 + 1)
 13166                                  .L_lambda_simple_end_4f80:	; new closure is in rax
 13167                                  	assert_closure(rax)
    42 0000A522 803805              <1>  cmp byte [%1], %2
    43 0000A525 0F85099C0000        <1>  jne L_error_incorrect_type
 13168 0000A52B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13169 0000A52F 53                      	push rbx
 13170 0000A530 FF7508                  	push RET_ADDR
 13171 0000A533 488B7D18                	mov rdi, COUNT
 13172 0000A537 4883C703                	add rdi, 3
 13173 0000A53B 48C1E703                	shl rdi, 3
 13174 0000A53F 4801EF                  	add rdi, rbp
 13175 0000A542 488B6D00                	mov rbp, OLD_RDP
 13176 0000A546 BE00000000              	mov rsi, 0
 13177                                  .L_tc_recycle_frame_loop_5d0e:	 ; start recycle frame loop
 13178 0000A54B 4883FE04                	cmp rsi, 4
 13179 0000A54F 7427                    	je .L_tc_recycle_frame_done_5d0e
 13180 0000A551 B903000000              	mov rcx, 3
 13181 0000A556 4829F1                  	sub rcx, rsi
 13182 0000A559 48C1E103                	shl rcx, 3
 13183 0000A55D 4801E1                  	add rcx, rsp ; rcx is the address to move
 13184 0000A560 4889F3                  	mov rbx, rsi
 13185 0000A563 48C1E303                	shl rbx, 3
 13186 0000A567 48F7DB                  	neg rbx
 13187 0000A56A 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13188 0000A56D 488B09                  	mov rcx, [rcx]
 13189 0000A570 48890B                  	mov [rbx], rcx
 13190 0000A573 48FFC6                  	inc rsi
 13191 0000A576 EBD3                    	jmp .L_tc_recycle_frame_loop_5d0e
 13192                                  .L_tc_recycle_frame_done_5d0e:	 ; end recycle frame loop
 13193 0000A578 BB03000000              	mov rbx, 3
 13194 0000A57D 48C1E303                	shl rbx, 3
 13195 0000A581 48F7DB                  	neg rbx
 13196 0000A584 4801FB                  	add rbx, rdi
 13197 0000A587 4889DC                  	mov rsp, rbx
 13198 0000A58A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13199 0000A58E FFE3                    	jmp rbx
 13200 0000A590 C9                      	leave
 13201 0000A591 C21800                  	ret 8 * (2 + 1)
 13202                                  .L_lambda_simple_end_4f7c:	; new closure is in rax
 13203                                  	assert_closure(rax)
    42 0000A594 803805              <1>  cmp byte [%1], %2
    43 0000A597 0F85979B0000        <1>  jne L_error_incorrect_type
 13204 0000A59D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13205 0000A5A1 53                      	push rbx
 13206 0000A5A2 FF7508                  	push RET_ADDR
 13207 0000A5A5 488B7D18                	mov rdi, COUNT
 13208 0000A5A9 4883C703                	add rdi, 3
 13209 0000A5AD 48C1E703                	shl rdi, 3
 13210 0000A5B1 4801EF                  	add rdi, rbp
 13211 0000A5B4 488B6D00                	mov rbp, OLD_RDP
 13212 0000A5B8 BE00000000              	mov rsi, 0
 13213                                  .L_tc_recycle_frame_loop_5d0c:	 ; start recycle frame loop
 13214 0000A5BD 4883FE04                	cmp rsi, 4
 13215 0000A5C1 7427                    	je .L_tc_recycle_frame_done_5d0c
 13216 0000A5C3 B903000000              	mov rcx, 3
 13217 0000A5C8 4829F1                  	sub rcx, rsi
 13218 0000A5CB 48C1E103                	shl rcx, 3
 13219 0000A5CF 4801E1                  	add rcx, rsp ; rcx is the address to move
 13220 0000A5D2 4889F3                  	mov rbx, rsi
 13221 0000A5D5 48C1E303                	shl rbx, 3
 13222 0000A5D9 48F7DB                  	neg rbx
 13223 0000A5DC 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13224 0000A5DF 488B09                  	mov rcx, [rcx]
 13225 0000A5E2 48890B                  	mov [rbx], rcx
 13226 0000A5E5 48FFC6                  	inc rsi
 13227 0000A5E8 EBD3                    	jmp .L_tc_recycle_frame_loop_5d0c
 13228                                  .L_tc_recycle_frame_done_5d0c:	 ; end recycle frame loop
 13229 0000A5EA BB03000000              	mov rbx, 3
 13230 0000A5EF 48C1E303                	shl rbx, 3
 13231 0000A5F3 48F7DB                  	neg rbx
 13232 0000A5F6 4801FB                  	add rbx, rdi
 13233 0000A5F9 4889DC                  	mov rsp, rbx
 13234 0000A5FC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13235 0000A600 FFE3                    	jmp rbx
 13236 0000A602 C9                      	leave
 13237 0000A603 C21800                  	ret 8 * (2 + 1)
 13238                                  .L_lambda_simple_end_4f7a:	; new closure is in rax
 13239                                  	assert_closure(rax)
    42 0000A606 803805              <1>  cmp byte [%1], %2
    43 0000A609 0F85259B0000        <1>  jne L_error_incorrect_type
 13240 0000A60F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13241 0000A613 53                      	push rbx
 13242 0000A614 FF7508                  	push RET_ADDR
 13243 0000A617 488B7D18                	mov rdi, COUNT
 13244 0000A61B 4883C703                	add rdi, 3
 13245 0000A61F 48C1E703                	shl rdi, 3
 13246 0000A623 4801EF                  	add rdi, rbp
 13247 0000A626 488B6D00                	mov rbp, OLD_RDP
 13248 0000A62A BE00000000              	mov rsi, 0
 13249                                  .L_tc_recycle_frame_loop_5d0a:	 ; start recycle frame loop
 13250 0000A62F 4883FE04                	cmp rsi, 4
 13251 0000A633 7427                    	je .L_tc_recycle_frame_done_5d0a
 13252 0000A635 B903000000              	mov rcx, 3
 13253 0000A63A 4829F1                  	sub rcx, rsi
 13254 0000A63D 48C1E103                	shl rcx, 3
 13255 0000A641 4801E1                  	add rcx, rsp ; rcx is the address to move
 13256 0000A644 4889F3                  	mov rbx, rsi
 13257 0000A647 48C1E303                	shl rbx, 3
 13258 0000A64B 48F7DB                  	neg rbx
 13259 0000A64E 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13260 0000A651 488B09                  	mov rcx, [rcx]
 13261 0000A654 48890B                  	mov [rbx], rcx
 13262 0000A657 48FFC6                  	inc rsi
 13263 0000A65A EBD3                    	jmp .L_tc_recycle_frame_loop_5d0a
 13264                                  .L_tc_recycle_frame_done_5d0a:	 ; end recycle frame loop
 13265 0000A65C BB03000000              	mov rbx, 3
 13266 0000A661 48C1E303                	shl rbx, 3
 13267 0000A665 48F7DB                  	neg rbx
 13268 0000A668 4801FB                  	add rbx, rdi
 13269 0000A66B 4889DC                  	mov rsp, rbx
 13270 0000A66E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13271 0000A672 FFE3                    	jmp rbx
 13272 0000A674 C9                      	leave
 13273 0000A675 C21800                  	ret 8 * (2 + 1)
 13274                                  .L_lambda_simple_end_4f78:	; new closure is in rax
 13275                                  	assert_closure(rax)
    42 0000A678 803805              <1>  cmp byte [%1], %2
    43 0000A67B 0F85B39A0000        <1>  jne L_error_incorrect_type
 13276 0000A681 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13277 0000A685 53                      	push rbx
 13278 0000A686 FF7508                  	push RET_ADDR
 13279 0000A689 488B7D18                	mov rdi, COUNT
 13280 0000A68D 4883C703                	add rdi, 3
 13281 0000A691 48C1E703                	shl rdi, 3
 13282 0000A695 4801EF                  	add rdi, rbp
 13283 0000A698 488B6D00                	mov rbp, OLD_RDP
 13284 0000A69C BE00000000              	mov rsi, 0
 13285                                  .L_tc_recycle_frame_loop_5d08:	 ; start recycle frame loop
 13286 0000A6A1 4883FE04                	cmp rsi, 4
 13287 0000A6A5 7427                    	je .L_tc_recycle_frame_done_5d08
 13288 0000A6A7 B903000000              	mov rcx, 3
 13289 0000A6AC 4829F1                  	sub rcx, rsi
 13290 0000A6AF 48C1E103                	shl rcx, 3
 13291 0000A6B3 4801E1                  	add rcx, rsp ; rcx is the address to move
 13292 0000A6B6 4889F3                  	mov rbx, rsi
 13293 0000A6B9 48C1E303                	shl rbx, 3
 13294 0000A6BD 48F7DB                  	neg rbx
 13295 0000A6C0 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13296 0000A6C3 488B09                  	mov rcx, [rcx]
 13297 0000A6C6 48890B                  	mov [rbx], rcx
 13298 0000A6C9 48FFC6                  	inc rsi
 13299 0000A6CC EBD3                    	jmp .L_tc_recycle_frame_loop_5d08
 13300                                  .L_tc_recycle_frame_done_5d08:	 ; end recycle frame loop
 13301 0000A6CE BB03000000              	mov rbx, 3
 13302 0000A6D3 48C1E303                	shl rbx, 3
 13303 0000A6D7 48F7DB                  	neg rbx
 13304 0000A6DA 4801FB                  	add rbx, rdi
 13305 0000A6DD 4889DC                  	mov rsp, rbx
 13306 0000A6E0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13307 0000A6E4 FFE3                    	jmp rbx
 13308 0000A6E6 C9                      	leave
 13309 0000A6E7 C21800                  	ret 8 * (2 + 1)
 13310                                  .L_lambda_simple_end_4f76:	; new closure is in rax
 13311                                  	assert_closure(rax)
    42 0000A6EA 803805              <1>  cmp byte [%1], %2
    43 0000A6ED 0F85419A0000        <1>  jne L_error_incorrect_type
 13312 0000A6F3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13313 0000A6F7 53                      	push rbx
 13314 0000A6F8 FF7508                  	push RET_ADDR
 13315 0000A6FB 488B7D18                	mov rdi, COUNT
 13316 0000A6FF 4883C703                	add rdi, 3
 13317 0000A703 48C1E703                	shl rdi, 3
 13318 0000A707 4801EF                  	add rdi, rbp
 13319 0000A70A 488B6D00                	mov rbp, OLD_RDP
 13320 0000A70E BE00000000              	mov rsi, 0
 13321                                  .L_tc_recycle_frame_loop_5d07:	 ; start recycle frame loop
 13322 0000A713 4883FE04                	cmp rsi, 4
 13323 0000A717 7427                    	je .L_tc_recycle_frame_done_5d07
 13324 0000A719 B903000000              	mov rcx, 3
 13325 0000A71E 4829F1                  	sub rcx, rsi
 13326 0000A721 48C1E103                	shl rcx, 3
 13327 0000A725 4801E1                  	add rcx, rsp ; rcx is the address to move
 13328 0000A728 4889F3                  	mov rbx, rsi
 13329 0000A72B 48C1E303                	shl rbx, 3
 13330 0000A72F 48F7DB                  	neg rbx
 13331 0000A732 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13332 0000A735 488B09                  	mov rcx, [rcx]
 13333 0000A738 48890B                  	mov [rbx], rcx
 13334 0000A73B 48FFC6                  	inc rsi
 13335 0000A73E EBD3                    	jmp .L_tc_recycle_frame_loop_5d07
 13336                                  .L_tc_recycle_frame_done_5d07:	 ; end recycle frame loop
 13337 0000A740 BB03000000              	mov rbx, 3
 13338 0000A745 48C1E303                	shl rbx, 3
 13339 0000A749 48F7DB                  	neg rbx
 13340 0000A74C 4801FB                  	add rbx, rdi
 13341 0000A74F 4889DC                  	mov rsp, rbx
 13342 0000A752 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13343 0000A756 FFE3                    	jmp rbx
 13344 0000A758 C9                      	leave
 13345 0000A759 C21800                  	ret 8 * (2 + 1)
 13346                                  .L_lambda_simple_end_4f75:	; new closure is in rax
 13347                                  	assert_closure(rax)
    42 0000A75C 803805              <1>  cmp byte [%1], %2
    43 0000A75F 0F85CF990000        <1>  jne L_error_incorrect_type
 13348 0000A765 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13349 0000A769 53                      	push rbx
 13350 0000A76A FF7508                  	push RET_ADDR
 13351 0000A76D 488B7D18                	mov rdi, COUNT
 13352 0000A771 4883C703                	add rdi, 3
 13353 0000A775 48C1E703                	shl rdi, 3
 13354 0000A779 4801EF                  	add rdi, rbp
 13355 0000A77C 488B6D00                	mov rbp, OLD_RDP
 13356 0000A780 BE00000000              	mov rsi, 0
 13357                                  .L_tc_recycle_frame_loop_5d06:	 ; start recycle frame loop
 13358 0000A785 4883FE04                	cmp rsi, 4
 13359 0000A789 7427                    	je .L_tc_recycle_frame_done_5d06
 13360 0000A78B B903000000              	mov rcx, 3
 13361 0000A790 4829F1                  	sub rcx, rsi
 13362 0000A793 48C1E103                	shl rcx, 3
 13363 0000A797 4801E1                  	add rcx, rsp ; rcx is the address to move
 13364 0000A79A 4889F3                  	mov rbx, rsi
 13365 0000A79D 48C1E303                	shl rbx, 3
 13366 0000A7A1 48F7DB                  	neg rbx
 13367 0000A7A4 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13368 0000A7A7 488B09                  	mov rcx, [rcx]
 13369 0000A7AA 48890B                  	mov [rbx], rcx
 13370 0000A7AD 48FFC6                  	inc rsi
 13371 0000A7B0 EBD3                    	jmp .L_tc_recycle_frame_loop_5d06
 13372                                  .L_tc_recycle_frame_done_5d06:	 ; end recycle frame loop
 13373 0000A7B2 BB03000000              	mov rbx, 3
 13374 0000A7B7 48C1E303                	shl rbx, 3
 13375 0000A7BB 48F7DB                  	neg rbx
 13376 0000A7BE 4801FB                  	add rbx, rdi
 13377 0000A7C1 4889DC                  	mov rsp, rbx
 13378 0000A7C4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13379 0000A7C8 FFE3                    	jmp rbx
 13380 0000A7CA C9                      	leave
 13381 0000A7CB C21800                  	ret 8 * (2 + 1)
 13382                                  .L_lambda_simple_end_4f74:	; new closure is in rax
 13383                                  	assert_closure(rax)
    42 0000A7CE 803805              <1>  cmp byte [%1], %2
    43 0000A7D1 0F855D990000        <1>  jne L_error_incorrect_type
 13384 0000A7D7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13385 0000A7DB 53                      	push rbx
 13386 0000A7DC FF7508                  	push RET_ADDR
 13387 0000A7DF 488B7D18                	mov rdi, COUNT
 13388 0000A7E3 4883C703                	add rdi, 3
 13389 0000A7E7 48C1E703                	shl rdi, 3
 13390 0000A7EB 4801EF                  	add rdi, rbp
 13391 0000A7EE 488B6D00                	mov rbp, OLD_RDP
 13392 0000A7F2 BE00000000              	mov rsi, 0
 13393                                  .L_tc_recycle_frame_loop_5cff:	 ; start recycle frame loop
 13394 0000A7F7 4883FE04                	cmp rsi, 4
 13395 0000A7FB 7427                    	je .L_tc_recycle_frame_done_5cff
 13396 0000A7FD B903000000              	mov rcx, 3
 13397 0000A802 4829F1                  	sub rcx, rsi
 13398 0000A805 48C1E103                	shl rcx, 3
 13399 0000A809 4801E1                  	add rcx, rsp ; rcx is the address to move
 13400 0000A80C 4889F3                  	mov rbx, rsi
 13401 0000A80F 48C1E303                	shl rbx, 3
 13402 0000A813 48F7DB                  	neg rbx
 13403 0000A816 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13404 0000A819 488B09                  	mov rcx, [rcx]
 13405 0000A81C 48890B                  	mov [rbx], rcx
 13406 0000A81F 48FFC6                  	inc rsi
 13407 0000A822 EBD3                    	jmp .L_tc_recycle_frame_loop_5cff
 13408                                  .L_tc_recycle_frame_done_5cff:	 ; end recycle frame loop
 13409 0000A824 BB03000000              	mov rbx, 3
 13410 0000A829 48C1E303                	shl rbx, 3
 13411 0000A82D 48F7DB                  	neg rbx
 13412 0000A830 4801FB                  	add rbx, rdi
 13413 0000A833 4889DC                  	mov rsp, rbx
 13414 0000A836 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13415 0000A83A FFE3                    	jmp rbx
 13416 0000A83C C9                      	leave
 13417 0000A83D C21800                  	ret 8 * (2 + 1)
 13418                                  .L_lambda_simple_end_4f71:	; new closure is in rax
 13419                                  	assert_closure(rax)
    42 0000A840 803805              <1>  cmp byte [%1], %2
    43 0000A843 0F85EB980000        <1>  jne L_error_incorrect_type
 13420 0000A849 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13421 0000A84D 53                      	push rbx
 13422 0000A84E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13423 0000A852 FFD3                    	call rbx
 13424                                  
 13425 0000A854 4889C7                  	mov rdi, rax
 13426 0000A857 E869800000              	call print_sexpr_if_not_void
 13427                                  
 13428 0000A85C 488D0425[17000000]      	lea rax, [23 + L_constants]
 13429 0000A864 50                      	push rax
 13430 0000A865 6A01                    	push 1
 13431 0000A867 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13432 0000A86C E843800000              	call malloc
 13433 0000A871 50                      	push rax
 13434 0000A872 BF00000000              	mov rdi, 8 * 0	; new rib
 13435 0000A877 E838800000              	call malloc
 13436 0000A87C 50                      	push rax
 13437 0000A87D BF08000000              	mov rdi, 8 * 1	; extended env
 13438 0000A882 E82D800000              	call malloc
 13439 0000A887 488B7D10                	mov rdi, ENV
 13440 0000A88B BE00000000              	mov rsi, 0
 13441 0000A890 BA01000000              	mov rdx, 1
 13442                                  .L_lambda_simple_env_loop_4f81:	; ext_env[i + 1] <-- env[i]
 13443 0000A895 4883FE00                	cmp rsi, 0
 13444 0000A899 7410                    	je .L_lambda_simple_env_end_4f81
 13445 0000A89B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 13446 0000A89F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13447 0000A8A3 48FFC6                  	inc rsi
 13448 0000A8A6 48FFC2                  	inc rdx
 13449 0000A8A9 EBEA                    	jmp .L_lambda_simple_env_loop_4f81
 13450                                  .L_lambda_simple_env_end_4f81:
 13451 0000A8AB 5B                      	pop rbx
 13452 0000A8AC BE00000000              	mov rsi, 0
 13453                                  .L_lambda_simple_params_loop_4f81:	; copy params
 13454 0000A8B1 4883FE00                	cmp rsi, 0
 13455 0000A8B5 740E                    	je .L_lambda_simple_params_end_4f81
 13456 0000A8B7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13457 0000A8BC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13458 0000A8C0 48FFC6                  	inc rsi
 13459 0000A8C3 EBEC                    	jmp .L_lambda_simple_params_loop_4f81
 13460                                  .L_lambda_simple_params_end_4f81:
 13461 0000A8C5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13462 0000A8C8 4889C3                  	mov rbx, rax
 13463 0000A8CB 58                      	pop rax
 13464 0000A8CC C60005                  	mov byte [rax], T_closure
 13465 0000A8CF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13466 0000A8D3 48C74009[E0A80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f81
 13467 0000A8DB E928060000              	jmp .L_lambda_simple_end_4f81
 13468                                  .L_lambda_simple_code_4f81:	; lambda-simple body
 13469 0000A8E0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13470 0000A8E6 740B                    	je .L_lambda_simple_arity_check_ok_4f81
 13471 0000A8E8 FF742410                	push qword [rsp + 8 * 2]
 13472 0000A8EC 6A01                    	push 1
 13473 0000A8EE E97A7F0000              	jmp L_error_incorrect_arity_simple
 13474                                  .L_lambda_simple_arity_check_ok_4f81:
 13475 0000A8F3 C8000000                	enter 0, 0
 13476 0000A8F7 BF11000000              	mov qword rdi, (1 + 8 + 8)
 13477 0000A8FC E8B37F0000              	call malloc
 13478 0000A901 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 13479 0000A905 48B8-                   	mov rax, sob_void
 13479 0000A907 [0000000000000000] 
 13480                                  
 13481 0000A90F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13482 0000A914 E89B7F0000              	call malloc
 13483 0000A919 50                      	push rax
 13484 0000A91A BF08000000              	mov rdi, 8 * 1	; new rib
 13485 0000A91F E8907F0000              	call malloc
 13486 0000A924 50                      	push rax
 13487 0000A925 BF10000000              	mov rdi, 8 * 2	; extended env
 13488 0000A92A E8857F0000              	call malloc
 13489 0000A92F 488B7D10                	mov rdi, ENV
 13490 0000A933 BE00000000              	mov rsi, 0
 13491 0000A938 BA01000000              	mov rdx, 1
 13492                                  .L_lambda_simple_env_loop_4f82:	; ext_env[i + 1] <-- env[i]
 13493 0000A93D 4883FE01                	cmp rsi, 1
 13494 0000A941 7410                    	je .L_lambda_simple_env_end_4f82
 13495 0000A943 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 13496 0000A947 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13497 0000A94B 48FFC6                  	inc rsi
 13498 0000A94E 48FFC2                  	inc rdx
 13499 0000A951 EBEA                    	jmp .L_lambda_simple_env_loop_4f82
 13500                                  .L_lambda_simple_env_end_4f82:
 13501 0000A953 5B                      	pop rbx
 13502 0000A954 BE00000000              	mov rsi, 0
 13503                                  .L_lambda_simple_params_loop_4f82:	; copy params
 13504 0000A959 4883FE01                	cmp rsi, 1
 13505 0000A95D 740E                    	je .L_lambda_simple_params_end_4f82
 13506 0000A95F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13507 0000A964 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13508 0000A968 48FFC6                  	inc rsi
 13509 0000A96B EBEC                    	jmp .L_lambda_simple_params_loop_4f82
 13510                                  .L_lambda_simple_params_end_4f82:
 13511 0000A96D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13512 0000A970 4889C3                  	mov rbx, rax
 13513 0000A973 58                      	pop rax
 13514 0000A974 C60005                  	mov byte [rax], T_closure
 13515 0000A977 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13516 0000A97B 48C74009[88A90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f82
 13517 0000A983 E926010000              	jmp .L_lambda_simple_end_4f82
 13518                                  .L_lambda_simple_code_4f82:	; lambda-simple body
 13519 0000A988 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13520 0000A98E 740B                    	je .L_lambda_simple_arity_check_ok_4f82
 13521 0000A990 FF742410                	push qword [rsp + 8 * 2]
 13522 0000A994 6A02                    	push 2
 13523 0000A996 E9D27E0000              	jmp L_error_incorrect_arity_simple
 13524                                  .L_lambda_simple_arity_check_ok_4f82:
 13525 0000A99B C8000000                	enter 0, 0
 13526 0000A99F 488B4520                	mov rax, PARAM(0)
 13527 0000A9A3 50                      	push rax
 13528 0000A9A4 6A01                    	push 1
 13529 0000A9A6 488B0425[D8000000]      	mov rax, qword [free_var_27]
 13530                                  	assert_closure(rax)
    42 0000A9AE 803805              <1>  cmp byte [%1], %2
    43 0000A9B1 0F857D970000        <1>  jne L_error_incorrect_type
 13531 0000A9B7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13532 0000A9BB 53                      	push rbx
 13533 0000A9BC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13534 0000A9C0 FFD3                    	call rbx
 13535 0000A9C2 483D[02000000]          	cmp rax, sob_boolean_false
 13536 0000A9C8 740D                    	je .L_if_else_56ae
 13537 0000A9CA 488D0425[01000000]      	lea rax, [1 + L_constants]
 13538 0000A9D2 E9D3000000              	jmp .L_if_end_56ae
 13539                                  	.L_if_else_56ae:
 13540 0000A9D7 488B4528                	mov rax, PARAM(1)
 13541 0000A9DB 50                      	push rax
 13542 0000A9DC 488D0425[80000000]      	lea rax, [128 + L_constants]
 13543 0000A9E4 50                      	push rax
 13544 0000A9E5 488B4520                	mov rax, PARAM(0)
 13545 0000A9E9 50                      	push rax
 13546 0000A9EA 6A02                    	push 2
 13547 0000A9EC 488B0425[10030000]      	mov rax, qword [free_var_98]
 13548                                  	assert_closure(rax)
    42 0000A9F4 803805              <1>  cmp byte [%1], %2
    43 0000A9F7 0F8537970000        <1>  jne L_error_incorrect_type
 13549 0000A9FD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13550 0000AA01 53                      	push rbx
 13551 0000AA02 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13552 0000AA06 FFD3                    	call rbx
 13553 0000AA08 50                      	push rax
 13554 0000AA09 6A02                    	push 2
 13555 0000AA0B 488B4510                	mov rax, qword [rbp + 8*2]
 13556 0000AA0F 488B00                  	mov rax, qword [rax + 8*0]
 13557 0000AA12 488B00                  	mov rax, qword [rax + 8*0]
 13558 0000AA15 488B00                  	mov rax, qword [rax]
 13559                                  	assert_closure(rax)
    42 0000AA18 803805              <1>  cmp byte [%1], %2
    43 0000AA1B 0F8513970000        <1>  jne L_error_incorrect_type
 13560 0000AA21 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13561 0000AA25 53                      	push rbx
 13562 0000AA26 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13563 0000AA2A FFD3                    	call rbx
 13564 0000AA2C 50                      	push rax
 13565 0000AA2D 488B4528                	mov rax, PARAM(1)
 13566 0000AA31 50                      	push rax
 13567 0000AA32 6A02                    	push 2
 13568 0000AA34 488B0425[68000000]      	mov rax, qword [free_var_13]
 13569                                  	assert_closure(rax)
    42 0000AA3C 803805              <1>  cmp byte [%1], %2
    43 0000AA3F 0F85EF960000        <1>  jne L_error_incorrect_type
 13570 0000AA45 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13571 0000AA49 53                      	push rbx
 13572 0000AA4A FF7508                  	push RET_ADDR
 13573 0000AA4D 488B7D18                	mov rdi, COUNT
 13574 0000AA51 4883C703                	add rdi, 3
 13575 0000AA55 48C1E703                	shl rdi, 3
 13576 0000AA59 4801EF                  	add rdi, rbp
 13577 0000AA5C 488B6D00                	mov rbp, OLD_RDP
 13578 0000AA60 BE00000000              	mov rsi, 0
 13579                                  .L_tc_recycle_frame_loop_5d12:	 ; start recycle frame loop
 13580 0000AA65 4883FE05                	cmp rsi, 5
 13581 0000AA69 7427                    	je .L_tc_recycle_frame_done_5d12
 13582 0000AA6B B904000000              	mov rcx, 4
 13583 0000AA70 4829F1                  	sub rcx, rsi
 13584 0000AA73 48C1E103                	shl rcx, 3
 13585 0000AA77 4801E1                  	add rcx, rsp ; rcx is the address to move
 13586 0000AA7A 4889F3                  	mov rbx, rsi
 13587 0000AA7D 48C1E303                	shl rbx, 3
 13588 0000AA81 48F7DB                  	neg rbx
 13589 0000AA84 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13590 0000AA87 488B09                  	mov rcx, [rcx]
 13591 0000AA8A 48890B                  	mov [rbx], rcx
 13592 0000AA8D 48FFC6                  	inc rsi
 13593 0000AA90 EBD3                    	jmp .L_tc_recycle_frame_loop_5d12
 13594                                  .L_tc_recycle_frame_done_5d12:	 ; end recycle frame loop
 13595 0000AA92 BB04000000              	mov rbx, 4
 13596 0000AA97 48C1E303                	shl rbx, 3
 13597 0000AA9B 48F7DB                  	neg rbx
 13598 0000AA9E 4801FB                  	add rbx, rdi
 13599 0000AAA1 4889DC                  	mov rsp, rbx
 13600 0000AAA4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13601 0000AAA8 FFE3                    	jmp rbx
 13602                                  	.L_if_end_56ae:
 13603 0000AAAA C9                      	leave
 13604 0000AAAB C22000                  	ret 8 * (2 + 2)
 13605                                  .L_lambda_simple_end_4f82:	; new closure is in rax
 13606 0000AAAE 50                      	push rax
 13607 0000AAAF 488B4520                	mov rax, PARAM(0)
 13608 0000AAB3 8F00                    	pop qword [rax]
 13609 0000AAB5 48B8-                   	mov rax, sob_void
 13609 0000AAB7 [0000000000000000] 
 13610                                  
 13611 0000AABF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13612 0000AAC4 E8EB7D0000              	call malloc
 13613 0000AAC9 50                      	push rax
 13614 0000AACA BF08000000              	mov rdi, 8 * 1	; new rib
 13615 0000AACF E8E07D0000              	call malloc
 13616 0000AAD4 50                      	push rax
 13617 0000AAD5 BF10000000              	mov rdi, 8 * 2	; extended env
 13618 0000AADA E8D57D0000              	call malloc
 13619 0000AADF 488B7D10                	mov rdi, ENV
 13620 0000AAE3 BE00000000              	mov rsi, 0
 13621 0000AAE8 BA01000000              	mov rdx, 1
 13622                                  .L_lambda_opt_env_loop_0c93:	; ext_env[i + 1] <-- env[i]
 13623 0000AAED 4883FE01                	cmp rsi, 1
 13624 0000AAF1 7410                    	je .L_lambda_opt_env_end_0c93
 13625 0000AAF3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13626 0000AAF7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13627 0000AAFB 48FFC6                  	inc rsi
 13628 0000AAFE 48FFC2                  	inc rdx
 13629 0000AB01 EBEA                    	jmp .L_lambda_opt_env_loop_0c93
 13630                                  .L_lambda_opt_env_end_0c93:
 13631 0000AB03 5B                      	pop rbx
 13632 0000AB04 BE00000000              	mov rsi, 0
 13633                                  .L_lambda_opt_params_loop_0c93:	; copy params
 13634 0000AB09 4883FE01                	cmp rsi, 1
 13635 0000AB0D 740E                    	je .L_lambda_opt_params_end_0c93
 13636 0000AB0F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13637 0000AB14 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13638 0000AB18 48FFC6                  	inc rsi
 13639 0000AB1B EBEC                    	jmp .L_lambda_opt_params_loop_0c93
 13640                                  .L_lambda_opt_params_end_0c93:
 13641 0000AB1D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13642 0000AB20 4889C3                  	mov rbx, rax
 13643 0000AB23 58                      	pop rax
 13644 0000AB24 C60005                  	mov byte [rax], T_closure
 13645 0000AB27 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13646 0000AB2B 48C74009[38AB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c93
 13647 0000AB33 E9CC030000              	jmp .L_lambda_opt_end_0c93
 13648                                  .L_lambda_opt_code_0c93:	; lambda-opt body
 13649 0000AB38 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 13650 0000AB3D 4889FB                  	mov rbx, rdi
 13651 0000AB40 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 13652 0000AB44 4883FB00                	cmp rbx, 0
 13653 0000AB48 7F45                    	jg .L_lambda_opt_arity_check_more_0c93
 13654                                  .L_lambda_opt_arity_check_exact_0c93:	 ; if params in opt is exact
 13655 0000AB4A 4883EC08                	sub rsp, 8
 13656 0000AB4E BE00000000              	mov rsi, 0 ; index
 13657                                  .L_lambda_opt_stack_enlarge_loop_0c93:	 ; stack loop enlarge start
 13658 0000AB53 4883FE04                	cmp rsi, 4
 13659 0000AB57 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c93
 13660 0000AB59 4889F7                  	mov rdi, rsi
 13661 0000AB5C 48FFC7                  	inc rdi
 13662 0000AB5F 48C1E703                	shl rdi, 3
 13663 0000AB63 4801E7                  	add rdi, rsp
 13664 0000AB66 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 13665 0000AB69 4883EB08                	sub rbx, 8
 13666 0000AB6D 488B3F                  	mov rdi, [rdi]
 13667 0000AB70 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 13668 0000AB73 48FFC6                  	inc rsi
 13669 0000AB76 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c93
 13670                                  .L_lambda_opt_stack_enlarge_loop_exit_0c93:	 ; end of stack enlarge loop
 13671 0000AB78 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 13671 0000AB7D [01000000]         
 13672 0000AB81 48C744241002000000      	mov qword [rsp + 2*8], 2
 13673 0000AB8A E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c93
 13674                                  .L_lambda_opt_arity_check_more_0c93:	 ; if params in opt is more
 13675 0000AB8F 48B8-                   	mov rax, sob_nil
 13675 0000AB91 [0100000000000000] 
 13676 0000AB99 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 13677 0000AB9C 48FFCE                  	dec rsi
 13678                                  .L_lambda_opt_list_create_loop_0c93:	; start of list creation loop
 13679 0000AB9F 4883FEFF                	cmp rsi, -1
 13680 0000ABA3 7422                    	je .L_lambda_opt_list_create_loop_exit_0c93
 13681 0000ABA5 488D4E04                	lea rcx, [rsi + (3 + 1)]
 13682 0000ABA9 48C1E103                	shl rcx, 3
 13683 0000ABAD 4801E1                  	add rcx, rsp
 13684 0000ABB0 488B09                  	mov rcx, [rcx]
 13685 0000ABB3 56                      	push rsi ; save params
 13686 0000ABB4 53                      	push rbx
 13687                                  
 13688 0000ABB5 50                      	push rax ; cdr
 13689 0000ABB6 51                      	push rcx ; car
 13690 0000ABB7 6A02                    	push qword 2 ; push num of args
 13691 0000ABB9 6A01                    	push qword 1 ; push garbage as env
 13692 0000ABBB E87B860000              	call L_code_ptr_cons
 13693                                  
 13694 0000ABC0 5B                      	pop rbx ; restore params
 13695 0000ABC1 5E                      	pop rsi
 13696 0000ABC2 48FFCE                  	dec rsi
 13697 0000ABC5 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c93
 13698                                  .L_lambda_opt_list_create_loop_exit_0c93:	; end of list creation loop
 13699 0000ABC7 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 13700 0000ABCC 4883C302                	add rbx, 2
 13701 0000ABD0 4889DF                  	mov rdi, rbx
 13702 0000ABD3 48C1E703                	shl rdi,3
 13703 0000ABD7 4801E7                  	add rdi, rsp
 13704 0000ABDA 488907                  	mov [rdi], rax
 13705 0000ABDD BE00000000              	mov rsi, 0 ;index
 13706                                  .L_lambda_opt_stack_shrink_loop_0c93:	; start of stack shrink loop
 13707 0000ABE2 4883FE04                	cmp rsi, 4
 13708 0000ABE6 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c93
 13709 0000ABE8 BF03000000              	mov rdi, 3
 13710 0000ABED 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 13711 0000ABF0 4889D9                  	mov rcx, rbx
 13712 0000ABF3 4829F1                  	sub rcx, rsi
 13713 0000ABF6 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 13714 0000ABF9 4889FA                  	mov rdx, rdi
 13715 0000ABFC 48C1E203                	shl rdx, 3
 13716 0000AC00 4801E2                  	add rdx, rsp
 13717 0000AC03 48C1E103                	shl rcx, 3
 13718 0000AC07 4801E1                  	add rcx, rsp
 13719 0000AC0A 488B12                  	mov rdx, [rdx]
 13720 0000AC0D 488911                  	mov [rcx], rdx
 13721 0000AC10 48FFC6                  	inc rsi
 13722 0000AC13 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c93
 13723                                  .L_lambda_opt_stack_shrink_loop_exit_0c93:	; end of stack shrink loop
 13724 0000AC15 4883EB02                	sub rbx, 2 ; rbx has number of args
 13725 0000AC19 4883EB02                	sub rbx, 2
 13726 0000AC1D 48C1E303                	shl rbx, 3
 13727 0000AC21 4801DC                  	add rsp, rbx
 13728 0000AC24 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 13729                                  .L_lambda_opt_stack_adjusted_0c93:
 13730 0000AC2D C8000000                	enter 0, 0
 13731 0000AC31 488B4528                	mov rax, PARAM(1)
 13732 0000AC35 50                      	push rax
 13733 0000AC36 6A01                    	push 1
 13734 0000AC38 488B0425[00000000]      	mov rax, qword [free_var_0]
 13735                                  	assert_closure(rax)
    42 0000AC40 803805              <1>  cmp byte [%1], %2
    43 0000AC43 0F85EB940000        <1>  jne L_error_incorrect_type
 13736 0000AC49 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13737 0000AC4D 53                      	push rbx
 13738 0000AC4E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13739 0000AC52 FFD3                    	call rbx
 13740 0000AC54 483D[02000000]          	cmp rax, sob_boolean_false
 13741 0000AC5A 0F8490000000            	je .L_if_else_56af
 13742 0000AC60 488D0425[04000000]      	lea rax, [4 + L_constants]
 13743 0000AC68 50                      	push rax
 13744 0000AC69 488B4520                	mov rax, PARAM(0)
 13745 0000AC6D 50                      	push rax
 13746 0000AC6E 6A02                    	push 2
 13747 0000AC70 488B4510                	mov rax, qword [rbp + 8*2]
 13748 0000AC74 488B00                  	mov rax, qword [rax + 8*0]
 13749 0000AC77 488B00                  	mov rax, qword [rax + 8*0]
 13750 0000AC7A 488B00                  	mov rax, qword [rax]
 13751                                  	assert_closure(rax)
    42 0000AC7D 803805              <1>  cmp byte [%1], %2
    43 0000AC80 0F85AE940000        <1>  jne L_error_incorrect_type
 13752 0000AC86 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13753 0000AC8A 53                      	push rbx
 13754 0000AC8B FF7508                  	push RET_ADDR
 13755 0000AC8E 488B7D18                	mov rdi, COUNT
 13756 0000AC92 4883C703                	add rdi, 3
 13757 0000AC96 48C1E703                	shl rdi, 3
 13758 0000AC9A 4801EF                  	add rdi, rbp
 13759 0000AC9D 488B6D00                	mov rbp, OLD_RDP
 13760 0000ACA1 BE00000000              	mov rsi, 0
 13761                                  .L_tc_recycle_frame_loop_5d13:	 ; start recycle frame loop
 13762 0000ACA6 4883FE05                	cmp rsi, 5
 13763 0000ACAA 7427                    	je .L_tc_recycle_frame_done_5d13
 13764 0000ACAC B904000000              	mov rcx, 4
 13765 0000ACB1 4829F1                  	sub rcx, rsi
 13766 0000ACB4 48C1E103                	shl rcx, 3
 13767 0000ACB8 4801E1                  	add rcx, rsp ; rcx is the address to move
 13768 0000ACBB 4889F3                  	mov rbx, rsi
 13769 0000ACBE 48C1E303                	shl rbx, 3
 13770 0000ACC2 48F7DB                  	neg rbx
 13771 0000ACC5 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13772 0000ACC8 488B09                  	mov rcx, [rcx]
 13773 0000ACCB 48890B                  	mov [rbx], rcx
 13774 0000ACCE 48FFC6                  	inc rsi
 13775 0000ACD1 EBD3                    	jmp .L_tc_recycle_frame_loop_5d13
 13776                                  .L_tc_recycle_frame_done_5d13:	 ; end recycle frame loop
 13777 0000ACD3 BB04000000              	mov rbx, 4
 13778 0000ACD8 48C1E303                	shl rbx, 3
 13779 0000ACDC 48F7DB                  	neg rbx
 13780 0000ACDF 4801FB                  	add rbx, rdi
 13781 0000ACE2 4889DC                  	mov rsp, rbx
 13782 0000ACE5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13783 0000ACE9 FFE3                    	jmp rbx
 13784 0000ACEB E910020000              	jmp .L_if_end_56af
 13785                                  	.L_if_else_56af:
 13786 0000ACF0 488B4528                	mov rax, PARAM(1)
 13787 0000ACF4 50                      	push rax
 13788 0000ACF5 6A01                    	push 1
 13789 0000ACF7 488B0425[08000000]      	mov rax, qword [free_var_1]
 13790                                  	assert_closure(rax)
    42 0000ACFF 803805              <1>  cmp byte [%1], %2
    43 0000AD02 0F852C940000        <1>  jne L_error_incorrect_type
 13791 0000AD08 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13792 0000AD0C 53                      	push rbx
 13793 0000AD0D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13794 0000AD11 FFD3                    	call rbx
 13795 0000AD13 483D[02000000]          	cmp rax, sob_boolean_false
 13796 0000AD19 0F8498000000            	je .L_if_else_56b1
 13797 0000AD1F 488B4528                	mov rax, PARAM(1)
 13798 0000AD23 50                      	push rax
 13799 0000AD24 6A01                    	push 1
 13800 0000AD26 488B0425[88000000]      	mov rax, qword [free_var_17]
 13801                                  	assert_closure(rax)
    42 0000AD2E 803805              <1>  cmp byte [%1], %2
    43 0000AD31 0F85FD930000        <1>  jne L_error_incorrect_type
 13802 0000AD37 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13803 0000AD3B 53                      	push rbx
 13804 0000AD3C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13805 0000AD40 FFD3                    	call rbx
 13806 0000AD42 50                      	push rax
 13807 0000AD43 6A01                    	push 1
 13808 0000AD45 488B0425[00000000]      	mov rax, qword [free_var_0]
 13809                                  	assert_closure(rax)
    42 0000AD4D 803805              <1>  cmp byte [%1], %2
    43 0000AD50 0F85DE930000        <1>  jne L_error_incorrect_type
 13810 0000AD56 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13811 0000AD5A 53                      	push rbx
 13812 0000AD5B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13813 0000AD5F FFD3                    	call rbx
 13814 0000AD61 483D[02000000]          	cmp rax, sob_boolean_false
 13815 0000AD67 7444                    	je .L_if_else_56b2
 13816 0000AD69 488B4528                	mov rax, PARAM(1)
 13817 0000AD6D 50                      	push rax
 13818 0000AD6E 6A01                    	push 1
 13819 0000AD70 488B0425[80000000]      	mov rax, qword [free_var_16]
 13820                                  	assert_closure(rax)
    42 0000AD78 803805              <1>  cmp byte [%1], %2
    43 0000AD7B 0F85B3930000        <1>  jne L_error_incorrect_type
 13821 0000AD81 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13822 0000AD85 53                      	push rbx
 13823 0000AD86 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13824 0000AD8A FFD3                    	call rbx
 13825 0000AD8C 50                      	push rax
 13826 0000AD8D 6A01                    	push 1
 13827 0000AD8F 488B0425[18000000]      	mov rax, qword [free_var_3]
 13828                                  	assert_closure(rax)
    42 0000AD97 803805              <1>  cmp byte [%1], %2
    43 0000AD9A 0F8594930000        <1>  jne L_error_incorrect_type
 13829 0000ADA0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13830 0000ADA4 53                      	push rbx
 13831 0000ADA5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13832 0000ADA9 FFD3                    	call rbx
 13833 0000ADAB EB08                    	jmp .L_if_end_56b2
 13834                                  	.L_if_else_56b2:
 13835 0000ADAD 488D0425[02000000]      	lea rax, [2 + L_constants]
 13836                                  	.L_if_end_56b2:
 13837 0000ADB5 EB08                    	jmp .L_if_end_56b1
 13838                                  	.L_if_else_56b1:
 13839 0000ADB7 488D0425[02000000]      	lea rax, [2 + L_constants]
 13840                                  	.L_if_end_56b1:
 13841 0000ADBF 483D[02000000]          	cmp rax, sob_boolean_false
 13842 0000ADC5 0F84AB000000            	je .L_if_else_56b0
 13843 0000ADCB 488B4528                	mov rax, PARAM(1)
 13844 0000ADCF 50                      	push rax
 13845 0000ADD0 6A01                    	push 1
 13846 0000ADD2 488B0425[80000000]      	mov rax, qword [free_var_16]
 13847                                  	assert_closure(rax)
    42 0000ADDA 803805              <1>  cmp byte [%1], %2
    43 0000ADDD 0F8551930000        <1>  jne L_error_incorrect_type
 13848 0000ADE3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13849 0000ADE7 53                      	push rbx
 13850 0000ADE8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13851 0000ADEC FFD3                    	call rbx
 13852 0000ADEE 50                      	push rax
 13853 0000ADEF 488B4520                	mov rax, PARAM(0)
 13854 0000ADF3 50                      	push rax
 13855 0000ADF4 6A02                    	push 2
 13856 0000ADF6 488B4510                	mov rax, qword [rbp + 8*2]
 13857 0000ADFA 488B00                  	mov rax, qword [rax + 8*0]
 13858 0000ADFD 488B00                  	mov rax, qword [rax + 8*0]
 13859 0000AE00 488B00                  	mov rax, qword [rax]
 13860                                  	assert_closure(rax)
    42 0000AE03 803805              <1>  cmp byte [%1], %2
    43 0000AE06 0F8528930000        <1>  jne L_error_incorrect_type
 13861 0000AE0C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13862 0000AE10 53                      	push rbx
 13863 0000AE11 FF7508                  	push RET_ADDR
 13864 0000AE14 488B7D18                	mov rdi, COUNT
 13865 0000AE18 4883C703                	add rdi, 3
 13866 0000AE1C 48C1E703                	shl rdi, 3
 13867 0000AE20 4801EF                  	add rdi, rbp
 13868 0000AE23 488B6D00                	mov rbp, OLD_RDP
 13869 0000AE27 BE00000000              	mov rsi, 0
 13870                                  .L_tc_recycle_frame_loop_5d14:	 ; start recycle frame loop
 13871 0000AE2C 4883FE05                	cmp rsi, 5
 13872 0000AE30 7427                    	je .L_tc_recycle_frame_done_5d14
 13873 0000AE32 B904000000              	mov rcx, 4
 13874 0000AE37 4829F1                  	sub rcx, rsi
 13875 0000AE3A 48C1E103                	shl rcx, 3
 13876 0000AE3E 4801E1                  	add rcx, rsp ; rcx is the address to move
 13877 0000AE41 4889F3                  	mov rbx, rsi
 13878 0000AE44 48C1E303                	shl rbx, 3
 13879 0000AE48 48F7DB                  	neg rbx
 13880 0000AE4B 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13881 0000AE4E 488B09                  	mov rcx, [rcx]
 13882 0000AE51 48890B                  	mov [rbx], rcx
 13883 0000AE54 48FFC6                  	inc rsi
 13884 0000AE57 EBD3                    	jmp .L_tc_recycle_frame_loop_5d14
 13885                                  .L_tc_recycle_frame_done_5d14:	 ; end recycle frame loop
 13886 0000AE59 BB04000000              	mov rbx, 4
 13887 0000AE5E 48C1E303                	shl rbx, 3
 13888 0000AE62 48F7DB                  	neg rbx
 13889 0000AE65 4801FB                  	add rbx, rdi
 13890 0000AE68 4889DC                  	mov rsp, rbx
 13891 0000AE6B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13892 0000AE6F FFE3                    	jmp rbx
 13893 0000AE71 E98A000000              	jmp .L_if_end_56b0
 13894                                  	.L_if_else_56b0:
 13895 0000AE76 488D0425[20010000]      	lea rax, [288 + L_constants]
 13896 0000AE7E 50                      	push rax
 13897 0000AE7F 488D0425[17010000]      	lea rax, [279 + L_constants]
 13898 0000AE87 50                      	push rax
 13899 0000AE88 6A02                    	push 2
 13900 0000AE8A 488B0425[30010000]      	mov rax, qword [free_var_38]
 13901                                  	assert_closure(rax)
    42 0000AE92 803805              <1>  cmp byte [%1], %2
    43 0000AE95 0F8599920000        <1>  jne L_error_incorrect_type
 13902 0000AE9B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13903 0000AE9F 53                      	push rbx
 13904 0000AEA0 FF7508                  	push RET_ADDR
 13905 0000AEA3 488B7D18                	mov rdi, COUNT
 13906 0000AEA7 4883C703                	add rdi, 3
 13907 0000AEAB 48C1E703                	shl rdi, 3
 13908 0000AEAF 4801EF                  	add rdi, rbp
 13909 0000AEB2 488B6D00                	mov rbp, OLD_RDP
 13910 0000AEB6 BE00000000              	mov rsi, 0
 13911                                  .L_tc_recycle_frame_loop_5d15:	 ; start recycle frame loop
 13912 0000AEBB 4883FE05                	cmp rsi, 5
 13913 0000AEBF 7427                    	je .L_tc_recycle_frame_done_5d15
 13914 0000AEC1 B904000000              	mov rcx, 4
 13915 0000AEC6 4829F1                  	sub rcx, rsi
 13916 0000AEC9 48C1E103                	shl rcx, 3
 13917 0000AECD 4801E1                  	add rcx, rsp ; rcx is the address to move
 13918 0000AED0 4889F3                  	mov rbx, rsi
 13919 0000AED3 48C1E303                	shl rbx, 3
 13920 0000AED7 48F7DB                  	neg rbx
 13921 0000AEDA 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13922 0000AEDD 488B09                  	mov rcx, [rcx]
 13923 0000AEE0 48890B                  	mov [rbx], rcx
 13924 0000AEE3 48FFC6                  	inc rsi
 13925 0000AEE6 EBD3                    	jmp .L_tc_recycle_frame_loop_5d15
 13926                                  .L_tc_recycle_frame_done_5d15:	 ; end recycle frame loop
 13927 0000AEE8 BB04000000              	mov rbx, 4
 13928 0000AEED 48C1E303                	shl rbx, 3
 13929 0000AEF1 48F7DB                  	neg rbx
 13930 0000AEF4 4801FB                  	add rbx, rdi
 13931 0000AEF7 4889DC                  	mov rsp, rbx
 13932 0000AEFA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13933 0000AEFE FFE3                    	jmp rbx
 13934                                  	.L_if_end_56b0:
 13935                                  	.L_if_end_56af:
 13936 0000AF00 C9                      	leave
 13937 0000AF01 C22000                  	ret AND_KILL_FRAME(2)
 13938                                  .L_lambda_opt_end_0c93:	; new closure is in rax
 13939 0000AF04 C9                      	leave
 13940 0000AF05 C21800                  	ret 8 * (2 + 1)
 13941                                  .L_lambda_simple_end_4f81:	; new closure is in rax
 13942                                  	assert_closure(rax)
    42 0000AF08 803805              <1>  cmp byte [%1], %2
    43 0000AF0B 0F8523920000        <1>  jne L_error_incorrect_type
 13943 0000AF11 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13944 0000AF15 53                      	push rbx
 13945 0000AF16 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13946 0000AF1A FFD3                    	call rbx
 13947 0000AF1C 48890425[58030000]      	mov qword [free_var_107], rax
 13948 0000AF24 48B8-                   	mov rax, sob_void
 13948 0000AF26 [0000000000000000] 
 13949                                  
 13950 0000AF2E 4889C7                  	mov rdi, rax
 13951 0000AF31 E88F790000              	call print_sexpr_if_not_void
 13952                                  
 13953 0000AF36 488D0425[00000000]      	lea rax, [0 + L_constants]
 13954 0000AF3E 48890425[60030000]      	mov qword [free_var_108], rax
 13955 0000AF46 48B8-                   	mov rax, sob_void
 13955 0000AF48 [0000000000000000] 
 13956                                  
 13957 0000AF50 4889C7                  	mov rdi, rax
 13958 0000AF53 E86D790000              	call print_sexpr_if_not_void
 13959                                  
 13960 0000AF58 488D0425[00000000]      	lea rax, [0 + L_constants]
 13961 0000AF60 48890425[68030000]      	mov qword [free_var_109], rax
 13962 0000AF68 48B8-                   	mov rax, sob_void
 13962 0000AF6A [0000000000000000] 
 13963                                  
 13964 0000AF72 4889C7                  	mov rdi, rax
 13965 0000AF75 E84B790000              	call print_sexpr_if_not_void
 13966                                  
 13967 0000AF7A 488D0425[00000000]      	lea rax, [0 + L_constants]
 13968 0000AF82 48890425[70030000]      	mov qword [free_var_110], rax
 13969 0000AF8A 48B8-                   	mov rax, sob_void
 13969 0000AF8C [0000000000000000] 
 13970                                  
 13971 0000AF94 4889C7                  	mov rdi, rax
 13972 0000AF97 E829790000              	call print_sexpr_if_not_void
 13973                                  
 13974 0000AF9C 488D0425[00000000]      	lea rax, [0 + L_constants]
 13975 0000AFA4 48890425[78030000]      	mov qword [free_var_111], rax
 13976 0000AFAC 48B8-                   	mov rax, sob_void
 13976 0000AFAE [0000000000000000] 
 13977                                  
 13978 0000AFB6 4889C7                  	mov rdi, rax
 13979 0000AFB9 E807790000              	call print_sexpr_if_not_void
 13980                                  
 13981 0000AFBE 488D0425[00000000]      	lea rax, [0 + L_constants]
 13982 0000AFC6 48890425[80030000]      	mov qword [free_var_112], rax
 13983 0000AFCE 48B8-                   	mov rax, sob_void
 13983 0000AFD0 [0000000000000000] 
 13984                                  
 13985 0000AFD8 4889C7                  	mov rdi, rax
 13986 0000AFDB E8E5780000              	call print_sexpr_if_not_void
 13987                                  
 13988 0000AFE0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13989 0000AFE5 E8CA780000              	call malloc
 13990 0000AFEA 50                      	push rax
 13991 0000AFEB BF00000000              	mov rdi, 8 * 0	; new rib
 13992 0000AFF0 E8BF780000              	call malloc
 13993 0000AFF5 50                      	push rax
 13994 0000AFF6 BF08000000              	mov rdi, 8 * 1	; extended env
 13995 0000AFFB E8B4780000              	call malloc
 13996 0000B000 488B7D10                	mov rdi, ENV
 13997 0000B004 BE00000000              	mov rsi, 0
 13998 0000B009 BA01000000              	mov rdx, 1
 13999                                  .L_lambda_simple_env_loop_4f83:	; ext_env[i + 1] <-- env[i]
 14000 0000B00E 4883FE00                	cmp rsi, 0
 14001 0000B012 7410                    	je .L_lambda_simple_env_end_4f83
 14002 0000B014 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 14003 0000B018 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14004 0000B01C 48FFC6                  	inc rsi
 14005 0000B01F 48FFC2                  	inc rdx
 14006 0000B022 EBEA                    	jmp .L_lambda_simple_env_loop_4f83
 14007                                  .L_lambda_simple_env_end_4f83:
 14008 0000B024 5B                      	pop rbx
 14009 0000B025 BE00000000              	mov rsi, 0
 14010                                  .L_lambda_simple_params_loop_4f83:	; copy params
 14011 0000B02A 4883FE00                	cmp rsi, 0
 14012 0000B02E 740E                    	je .L_lambda_simple_params_end_4f83
 14013 0000B030 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14014 0000B035 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14015 0000B039 48FFC6                  	inc rsi
 14016 0000B03C EBEC                    	jmp .L_lambda_simple_params_loop_4f83
 14017                                  .L_lambda_simple_params_end_4f83:
 14018 0000B03E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14019 0000B041 4889C3                  	mov rbx, rax
 14020 0000B044 58                      	pop rax
 14021 0000B045 C60005                  	mov byte [rax], T_closure
 14022 0000B048 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14023 0000B04C 48C74009[59B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f83
 14024 0000B054 E941020000              	jmp .L_lambda_simple_end_4f83
 14025                                  .L_lambda_simple_code_4f83:	; lambda-simple body
 14026 0000B059 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14027 0000B05F 740B                    	je .L_lambda_simple_arity_check_ok_4f83
 14028 0000B061 FF742410                	push qword [rsp + 8 * 2]
 14029 0000B065 6A01                    	push 1
 14030 0000B067 E901780000              	jmp L_error_incorrect_arity_simple
 14031                                  .L_lambda_simple_arity_check_ok_4f83:
 14032 0000B06C C8000000                	enter 0, 0
 14033 0000B070 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14034 0000B075 E83A780000              	call malloc
 14035 0000B07A 50                      	push rax
 14036 0000B07B BF08000000              	mov rdi, 8 * 1	; new rib
 14037 0000B080 E82F780000              	call malloc
 14038 0000B085 50                      	push rax
 14039 0000B086 BF10000000              	mov rdi, 8 * 2	; extended env
 14040 0000B08B E824780000              	call malloc
 14041 0000B090 488B7D10                	mov rdi, ENV
 14042 0000B094 BE00000000              	mov rsi, 0
 14043 0000B099 BA01000000              	mov rdx, 1
 14044                                  .L_lambda_opt_env_loop_0c94:	; ext_env[i + 1] <-- env[i]
 14045 0000B09E 4883FE01                	cmp rsi, 1
 14046 0000B0A2 7410                    	je .L_lambda_opt_env_end_0c94
 14047 0000B0A4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14048 0000B0A8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14049 0000B0AC 48FFC6                  	inc rsi
 14050 0000B0AF 48FFC2                  	inc rdx
 14051 0000B0B2 EBEA                    	jmp .L_lambda_opt_env_loop_0c94
 14052                                  .L_lambda_opt_env_end_0c94:
 14053 0000B0B4 5B                      	pop rbx
 14054 0000B0B5 BE00000000              	mov rsi, 0
 14055                                  .L_lambda_opt_params_loop_0c94:	; copy params
 14056 0000B0BA 4883FE01                	cmp rsi, 1
 14057 0000B0BE 740E                    	je .L_lambda_opt_params_end_0c94
 14058 0000B0C0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14059 0000B0C5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14060 0000B0C9 48FFC6                  	inc rsi
 14061 0000B0CC EBEC                    	jmp .L_lambda_opt_params_loop_0c94
 14062                                  .L_lambda_opt_params_end_0c94:
 14063 0000B0CE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14064 0000B0D1 4889C3                  	mov rbx, rax
 14065 0000B0D4 58                      	pop rax
 14066 0000B0D5 C60005                  	mov byte [rax], T_closure
 14067 0000B0D8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14068 0000B0DC 48C74009[E9B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c94
 14069 0000B0E4 E9AD010000              	jmp .L_lambda_opt_end_0c94
 14070                                  .L_lambda_opt_code_0c94:	; lambda-opt body
 14071 0000B0E9 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 14072 0000B0EE 4889FB                  	mov rbx, rdi
 14073 0000B0F1 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
 14074 0000B0F5 4883FB00                	cmp rbx, 0
 14075 0000B0F9 7F45                    	jg .L_lambda_opt_arity_check_more_0c94
 14076                                  .L_lambda_opt_arity_check_exact_0c94:	 ; if params in opt is exact
 14077 0000B0FB 4883EC08                	sub rsp, 8
 14078 0000B0FF BE00000000              	mov rsi, 0 ; index
 14079                                  .L_lambda_opt_stack_enlarge_loop_0c94:	 ; stack loop enlarge start
 14080 0000B104 4883FE03                	cmp rsi, 3
 14081 0000B108 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c94
 14082 0000B10A 4889F7                  	mov rdi, rsi
 14083 0000B10D 48FFC7                  	inc rdi
 14084 0000B110 48C1E703                	shl rdi, 3
 14085 0000B114 4801E7                  	add rdi, rsp
 14086 0000B117 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 14087 0000B11A 4883EB08                	sub rbx, 8
 14088 0000B11E 488B3F                  	mov rdi, [rdi]
 14089 0000B121 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 14090 0000B124 48FFC6                  	inc rsi
 14091 0000B127 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c94
 14092                                  .L_lambda_opt_stack_enlarge_loop_exit_0c94:	 ; end of stack enlarge loop
 14093 0000B129 48C7442418-             	mov qword [rsp + 3*8], sob_nil
 14093 0000B12E [01000000]         
 14094 0000B132 48C744241001000000      	mov qword [rsp + 2*8], 1
 14095 0000B13B E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c94
 14096                                  .L_lambda_opt_arity_check_more_0c94:	 ; if params in opt is more
 14097 0000B140 48B8-                   	mov rax, sob_nil
 14097 0000B142 [0100000000000000] 
 14098 0000B14A 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 14099 0000B14D 48FFCE                  	dec rsi
 14100                                  .L_lambda_opt_list_create_loop_0c94:	; start of list creation loop
 14101 0000B150 4883FEFF                	cmp rsi, -1
 14102 0000B154 7422                    	je .L_lambda_opt_list_create_loop_exit_0c94
 14103 0000B156 488D4E03                	lea rcx, [rsi + (3 + 0)]
 14104 0000B15A 48C1E103                	shl rcx, 3
 14105 0000B15E 4801E1                  	add rcx, rsp
 14106 0000B161 488B09                  	mov rcx, [rcx]
 14107 0000B164 56                      	push rsi ; save params
 14108 0000B165 53                      	push rbx
 14109                                  
 14110 0000B166 50                      	push rax ; cdr
 14111 0000B167 51                      	push rcx ; car
 14112 0000B168 6A02                    	push qword 2 ; push num of args
 14113 0000B16A 6A01                    	push qword 1 ; push garbage as env
 14114 0000B16C E8CA800000              	call L_code_ptr_cons
 14115                                  
 14116 0000B171 5B                      	pop rbx ; restore params
 14117 0000B172 5E                      	pop rsi
 14118 0000B173 48FFCE                  	dec rsi
 14119 0000B176 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c94
 14120                                  .L_lambda_opt_list_create_loop_exit_0c94:	; end of list creation loop
 14121 0000B178 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 14122 0000B17D 4883C302                	add rbx, 2
 14123 0000B181 4889DF                  	mov rdi, rbx
 14124 0000B184 48C1E703                	shl rdi,3
 14125 0000B188 4801E7                  	add rdi, rsp
 14126 0000B18B 488907                  	mov [rdi], rax
 14127 0000B18E BE00000000              	mov rsi, 0 ;index
 14128                                  .L_lambda_opt_stack_shrink_loop_0c94:	; start of stack shrink loop
 14129 0000B193 4883FE03                	cmp rsi, 3
 14130 0000B197 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c94
 14131 0000B199 BF02000000              	mov rdi, 2
 14132 0000B19E 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 14133 0000B1A1 4889D9                  	mov rcx, rbx
 14134 0000B1A4 4829F1                  	sub rcx, rsi
 14135 0000B1A7 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 14136 0000B1AA 4889FA                  	mov rdx, rdi
 14137 0000B1AD 48C1E203                	shl rdx, 3
 14138 0000B1B1 4801E2                  	add rdx, rsp
 14139 0000B1B4 48C1E103                	shl rcx, 3
 14140 0000B1B8 4801E1                  	add rcx, rsp
 14141 0000B1BB 488B12                  	mov rdx, [rdx]
 14142 0000B1BE 488911                  	mov [rcx], rdx
 14143 0000B1C1 48FFC6                  	inc rsi
 14144 0000B1C4 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c94
 14145                                  .L_lambda_opt_stack_shrink_loop_exit_0c94:	; end of stack shrink loop
 14146 0000B1C6 4883EB02                	sub rbx, 2 ; rbx has number of args
 14147 0000B1CA 4883EB01                	sub rbx, 1
 14148 0000B1CE 48C1E303                	shl rbx, 3
 14149 0000B1D2 4801DC                  	add rsp, rbx
 14150 0000B1D5 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 14151                                  .L_lambda_opt_stack_adjusted_0c94:
 14152 0000B1DE C8000000                	enter 0, 0
 14153 0000B1E2 488B4520                	mov rax, PARAM(0)
 14154 0000B1E6 50                      	push rax
 14155 0000B1E7 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14156 0000B1EF 50                      	push rax
 14157 0000B1F0 6A02                    	push 2
 14158 0000B1F2 488B0425[D8020000]      	mov rax, qword [free_var_91]
 14159                                  	assert_closure(rax)
    42 0000B1FA 803805              <1>  cmp byte [%1], %2
    43 0000B1FD 0F85318F0000        <1>  jne L_error_incorrect_type
 14160 0000B203 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14161 0000B207 53                      	push rbx
 14162 0000B208 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14163 0000B20C FFD3                    	call rbx
 14164 0000B20E 50                      	push rax
 14165 0000B20F 488B4510                	mov rax, qword [rbp + 8*2]
 14166 0000B213 488B00                  	mov rax, qword [rax + 8*0]
 14167 0000B216 488B00                  	mov rax, qword [rax + 8*0]
 14168 0000B219 50                      	push rax
 14169 0000B21A 6A02                    	push 2
 14170 0000B21C 488B0425[C8020000]      	mov rax, qword [free_var_89]
 14171                                  	assert_closure(rax)
    42 0000B224 803805              <1>  cmp byte [%1], %2
    43 0000B227 0F85078F0000        <1>  jne L_error_incorrect_type
 14172 0000B22D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14173 0000B231 53                      	push rbx
 14174 0000B232 FF7508                  	push RET_ADDR
 14175 0000B235 488B7D18                	mov rdi, COUNT
 14176 0000B239 4883C703                	add rdi, 3
 14177 0000B23D 48C1E703                	shl rdi, 3
 14178 0000B241 4801EF                  	add rdi, rbp
 14179 0000B244 488B6D00                	mov rbp, OLD_RDP
 14180 0000B248 BE00000000              	mov rsi, 0
 14181                                  .L_tc_recycle_frame_loop_5d16:	 ; start recycle frame loop
 14182 0000B24D 4883FE05                	cmp rsi, 5
 14183 0000B251 7427                    	je .L_tc_recycle_frame_done_5d16
 14184 0000B253 B904000000              	mov rcx, 4
 14185 0000B258 4829F1                  	sub rcx, rsi
 14186 0000B25B 48C1E103                	shl rcx, 3
 14187 0000B25F 4801E1                  	add rcx, rsp ; rcx is the address to move
 14188 0000B262 4889F3                  	mov rbx, rsi
 14189 0000B265 48C1E303                	shl rbx, 3
 14190 0000B269 48F7DB                  	neg rbx
 14191 0000B26C 4801FB                  	add rbx, rdi ;rbx is the address to move to
 14192 0000B26F 488B09                  	mov rcx, [rcx]
 14193 0000B272 48890B                  	mov [rbx], rcx
 14194 0000B275 48FFC6                  	inc rsi
 14195 0000B278 EBD3                    	jmp .L_tc_recycle_frame_loop_5d16
 14196                                  .L_tc_recycle_frame_done_5d16:	 ; end recycle frame loop
 14197 0000B27A BB04000000              	mov rbx, 4
 14198 0000B27F 48C1E303                	shl rbx, 3
 14199 0000B283 48F7DB                  	neg rbx
 14200 0000B286 4801FB                  	add rbx, rdi
 14201 0000B289 4889DC                  	mov rsp, rbx
 14202 0000B28C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14203 0000B290 FFE3                    	jmp rbx
 14204 0000B292 C9                      	leave
 14205 0000B293 C21800                  	ret AND_KILL_FRAME(1)
 14206                                  .L_lambda_opt_end_0c94:	; new closure is in rax
 14207 0000B296 C9                      	leave
 14208 0000B297 C21800                  	ret 8 * (2 + 1)
 14209                                  .L_lambda_simple_end_4f83:	; new closure is in rax
 14210 0000B29A 50                      	push rax
 14211 0000B29B 6A01                    	push 1
 14212 0000B29D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14213 0000B2A2 E80D760000              	call malloc
 14214 0000B2A7 50                      	push rax
 14215 0000B2A8 BF00000000              	mov rdi, 8 * 0	; new rib
 14216 0000B2AD E802760000              	call malloc
 14217 0000B2B2 50                      	push rax
 14218 0000B2B3 BF08000000              	mov rdi, 8 * 1	; extended env
 14219 0000B2B8 E8F7750000              	call malloc
 14220 0000B2BD 488B7D10                	mov rdi, ENV
 14221 0000B2C1 BE00000000              	mov rsi, 0
 14222 0000B2C6 BA01000000              	mov rdx, 1
 14223                                  .L_lambda_simple_env_loop_4f84:	; ext_env[i + 1] <-- env[i]
 14224 0000B2CB 4883FE00                	cmp rsi, 0
 14225 0000B2CF 7410                    	je .L_lambda_simple_env_end_4f84
 14226 0000B2D1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 14227 0000B2D5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14228 0000B2D9 48FFC6                  	inc rsi
 14229 0000B2DC 48FFC2                  	inc rdx
 14230 0000B2DF EBEA                    	jmp .L_lambda_simple_env_loop_4f84
 14231                                  .L_lambda_simple_env_end_4f84:
 14232 0000B2E1 5B                      	pop rbx
 14233 0000B2E2 BE00000000              	mov rsi, 0
 14234                                  .L_lambda_simple_params_loop_4f84:	; copy params
 14235 0000B2E7 4883FE00                	cmp rsi, 0
 14236 0000B2EB 740E                    	je .L_lambda_simple_params_end_4f84
 14237 0000B2ED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14238 0000B2F2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14239 0000B2F6 48FFC6                  	inc rsi
 14240 0000B2F9 EBEC                    	jmp .L_lambda_simple_params_loop_4f84
 14241                                  .L_lambda_simple_params_end_4f84:
 14242 0000B2FB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14243 0000B2FE 4889C3                  	mov rbx, rax
 14244 0000B301 58                      	pop rax
 14245 0000B302 C60005                  	mov byte [rax], T_closure
 14246 0000B305 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14247 0000B309 48C74009[16B30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f84
 14248 0000B311 E924010000              	jmp .L_lambda_simple_end_4f84
 14249                                  .L_lambda_simple_code_4f84:	; lambda-simple body
 14250 0000B316 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14251 0000B31C 740B                    	je .L_lambda_simple_arity_check_ok_4f84
 14252 0000B31E FF742410                	push qword [rsp + 8 * 2]
 14253 0000B322 6A01                    	push 1
 14254 0000B324 E944750000              	jmp L_error_incorrect_arity_simple
 14255                                  .L_lambda_simple_arity_check_ok_4f84:
 14256 0000B329 C8000000                	enter 0, 0
 14257 0000B32D 488B0425[30030000]      	mov rax, qword [free_var_102]
 14258 0000B335 50                      	push rax
 14259 0000B336 6A01                    	push 1
 14260 0000B338 488B4520                	mov rax, PARAM(0)
 14261                                  	assert_closure(rax)
    42 0000B33C 803805              <1>  cmp byte [%1], %2
    43 0000B33F 0F85EF8D0000        <1>  jne L_error_incorrect_type
 14262 0000B345 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14263 0000B349 53                      	push rbx
 14264 0000B34A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14265 0000B34E FFD3                    	call rbx
 14266 0000B350 48890425[60030000]      	mov qword [free_var_108], rax
 14267 0000B358 48B8-                   	mov rax, sob_void
 14267 0000B35A [0000000000000000] 
 14268                                  
 14269 0000B362 488B0425[38030000]      	mov rax, qword [free_var_103]
 14270 0000B36A 50                      	push rax
 14271 0000B36B 6A01                    	push 1
 14272 0000B36D 488B4520                	mov rax, PARAM(0)
 14273                                  	assert_closure(rax)
    42 0000B371 803805              <1>  cmp byte [%1], %2
    43 0000B374 0F85BA8D0000        <1>  jne L_error_incorrect_type
 14274 0000B37A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14275 0000B37E 53                      	push rbx
 14276 0000B37F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14277 0000B383 FFD3                    	call rbx
 14278 0000B385 48890425[68030000]      	mov qword [free_var_109], rax
 14279 0000B38D 48B8-                   	mov rax, sob_void
 14279 0000B38F [0000000000000000] 
 14280                                  
 14281 0000B397 488B0425[50030000]      	mov rax, qword [free_var_106]
 14282 0000B39F 50                      	push rax
 14283 0000B3A0 6A01                    	push 1
 14284 0000B3A2 488B4520                	mov rax, PARAM(0)
 14285                                  	assert_closure(rax)
    42 0000B3A6 803805              <1>  cmp byte [%1], %2
    43 0000B3A9 0F85858D0000        <1>  jne L_error_incorrect_type
 14286 0000B3AF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14287 0000B3B3 53                      	push rbx
 14288 0000B3B4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14289 0000B3B8 FFD3                    	call rbx
 14290 0000B3BA 48890425[70030000]      	mov qword [free_var_110], rax
 14291 0000B3C2 48B8-                   	mov rax, sob_void
 14291 0000B3C4 [0000000000000000] 
 14292                                  
 14293 0000B3CC 488B0425[40030000]      	mov rax, qword [free_var_104]
 14294 0000B3D4 50                      	push rax
 14295 0000B3D5 6A01                    	push 1
 14296 0000B3D7 488B4520                	mov rax, PARAM(0)
 14297                                  	assert_closure(rax)
    42 0000B3DB 803805              <1>  cmp byte [%1], %2
    43 0000B3DE 0F85508D0000        <1>  jne L_error_incorrect_type
 14298 0000B3E4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14299 0000B3E8 53                      	push rbx
 14300 0000B3E9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14301 0000B3ED FFD3                    	call rbx
 14302 0000B3EF 48890425[78030000]      	mov qword [free_var_111], rax
 14303 0000B3F7 48B8-                   	mov rax, sob_void
 14303 0000B3F9 [0000000000000000] 
 14304                                  
 14305 0000B401 488B0425[48030000]      	mov rax, qword [free_var_105]
 14306 0000B409 50                      	push rax
 14307 0000B40A 6A01                    	push 1
 14308 0000B40C 488B4520                	mov rax, PARAM(0)
 14309                                  	assert_closure(rax)
    42 0000B410 803805              <1>  cmp byte [%1], %2
    43 0000B413 0F851B8D0000        <1>  jne L_error_incorrect_type
 14310 0000B419 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14311 0000B41D 53                      	push rbx
 14312 0000B41E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14313 0000B422 FFD3                    	call rbx
 14314 0000B424 48890425[80030000]      	mov qword [free_var_112], rax
 14315 0000B42C 48B8-                   	mov rax, sob_void
 14315 0000B42E [0000000000000000] 
 14316 0000B436 C9                      	leave
 14317 0000B437 C21800                  	ret 8 * (2 + 1)
 14318                                  .L_lambda_simple_end_4f84:	; new closure is in rax
 14319                                  	assert_closure(rax)
    42 0000B43A 803805              <1>  cmp byte [%1], %2
    43 0000B43D 0F85F18C0000        <1>  jne L_error_incorrect_type
 14320 0000B443 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14321 0000B447 53                      	push rbx
 14322 0000B448 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14323 0000B44C FFD3                    	call rbx
 14324                                  
 14325 0000B44E 4889C7                  	mov rdi, rax
 14326 0000B451 E86F740000              	call print_sexpr_if_not_void
 14327                                  
 14328 0000B456 488D0425[00000000]      	lea rax, [0 + L_constants]
 14329 0000B45E 48890425[88030000]      	mov qword [free_var_113], rax
 14330 0000B466 48B8-                   	mov rax, sob_void
 14330 0000B468 [0000000000000000] 
 14331                                  
 14332 0000B470 4889C7                  	mov rdi, rax
 14333 0000B473 E84D740000              	call print_sexpr_if_not_void
 14334                                  
 14335 0000B478 488D0425[00000000]      	lea rax, [0 + L_constants]
 14336 0000B480 48890425[90030000]      	mov qword [free_var_114], rax
 14337 0000B488 48B8-                   	mov rax, sob_void
 14337 0000B48A [0000000000000000] 
 14338                                  
 14339 0000B492 4889C7                  	mov rdi, rax
 14340 0000B495 E82B740000              	call print_sexpr_if_not_void
 14341                                  
 14342 0000B49A 488D0425[56010000]      	lea rax, [342 + L_constants]
 14343 0000B4A2 50                      	push rax
 14344 0000B4A3 6A01                    	push 1
 14345 0000B4A5 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14346                                  	assert_closure(rax)
    42 0000B4AD 803805              <1>  cmp byte [%1], %2
    43 0000B4B0 0F857E8C0000        <1>  jne L_error_incorrect_type
 14347 0000B4B6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14348 0000B4BA 53                      	push rbx
 14349 0000B4BB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14350 0000B4BF FFD3                    	call rbx
 14351 0000B4C1 50                      	push rax
 14352 0000B4C2 488D0425[5A010000]      	lea rax, [346 + L_constants]
 14353 0000B4CA 50                      	push rax
 14354 0000B4CB 6A01                    	push 1
 14355 0000B4CD 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14356                                  	assert_closure(rax)
    42 0000B4D5 803805              <1>  cmp byte [%1], %2
    43 0000B4D8 0F85568C0000        <1>  jne L_error_incorrect_type
 14357 0000B4DE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14358 0000B4E2 53                      	push rbx
 14359 0000B4E3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14360 0000B4E7 FFD3                    	call rbx
 14361 0000B4E9 50                      	push rax
 14362 0000B4EA 6A02                    	push 2
 14363 0000B4EC 488B0425[10030000]      	mov rax, qword [free_var_98]
 14364                                  	assert_closure(rax)
    42 0000B4F4 803805              <1>  cmp byte [%1], %2
    43 0000B4F7 0F85378C0000        <1>  jne L_error_incorrect_type
 14365 0000B4FD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14366 0000B501 53                      	push rbx
 14367 0000B502 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14368 0000B506 FFD3                    	call rbx
 14369 0000B508 50                      	push rax
 14370 0000B509 6A01                    	push 1
 14371 0000B50B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14372 0000B510 E89F730000              	call malloc
 14373 0000B515 50                      	push rax
 14374 0000B516 BF00000000              	mov rdi, 8 * 0	; new rib
 14375 0000B51B E894730000              	call malloc
 14376 0000B520 50                      	push rax
 14377 0000B521 BF08000000              	mov rdi, 8 * 1	; extended env
 14378 0000B526 E889730000              	call malloc
 14379 0000B52B 488B7D10                	mov rdi, ENV
 14380 0000B52F BE00000000              	mov rsi, 0
 14381 0000B534 BA01000000              	mov rdx, 1
 14382                                  .L_lambda_simple_env_loop_4f85:	; ext_env[i + 1] <-- env[i]
 14383 0000B539 4883FE00                	cmp rsi, 0
 14384 0000B53D 7410                    	je .L_lambda_simple_env_end_4f85
 14385 0000B53F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 14386 0000B543 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14387 0000B547 48FFC6                  	inc rsi
 14388 0000B54A 48FFC2                  	inc rdx
 14389 0000B54D EBEA                    	jmp .L_lambda_simple_env_loop_4f85
 14390                                  .L_lambda_simple_env_end_4f85:
 14391 0000B54F 5B                      	pop rbx
 14392 0000B550 BE00000000              	mov rsi, 0
 14393                                  .L_lambda_simple_params_loop_4f85:	; copy params
 14394 0000B555 4883FE00                	cmp rsi, 0
 14395 0000B559 740E                    	je .L_lambda_simple_params_end_4f85
 14396 0000B55B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14397 0000B560 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14398 0000B564 48FFC6                  	inc rsi
 14399 0000B567 EBEC                    	jmp .L_lambda_simple_params_loop_4f85
 14400                                  .L_lambda_simple_params_end_4f85:
 14401 0000B569 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14402 0000B56C 4889C3                  	mov rbx, rax
 14403 0000B56F 58                      	pop rax
 14404 0000B570 C60005                  	mov byte [rax], T_closure
 14405 0000B573 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14406 0000B577 48C74009[84B50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f85
 14407 0000B57F E981030000              	jmp .L_lambda_simple_end_4f85
 14408                                  .L_lambda_simple_code_4f85:	; lambda-simple body
 14409 0000B584 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14410 0000B58A 740B                    	je .L_lambda_simple_arity_check_ok_4f85
 14411 0000B58C FF742410                	push qword [rsp + 8 * 2]
 14412 0000B590 6A01                    	push 1
 14413 0000B592 E9D6720000              	jmp L_error_incorrect_arity_simple
 14414                                  .L_lambda_simple_arity_check_ok_4f85:
 14415 0000B597 C8000000                	enter 0, 0
 14416 0000B59B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14417 0000B5A0 E80F730000              	call malloc
 14418 0000B5A5 50                      	push rax
 14419 0000B5A6 BF08000000              	mov rdi, 8 * 1	; new rib
 14420 0000B5AB E804730000              	call malloc
 14421 0000B5B0 50                      	push rax
 14422 0000B5B1 BF10000000              	mov rdi, 8 * 2	; extended env
 14423 0000B5B6 E8F9720000              	call malloc
 14424 0000B5BB 488B7D10                	mov rdi, ENV
 14425 0000B5BF BE00000000              	mov rsi, 0
 14426 0000B5C4 BA01000000              	mov rdx, 1
 14427                                  .L_lambda_simple_env_loop_4f86:	; ext_env[i + 1] <-- env[i]
 14428 0000B5C9 4883FE01                	cmp rsi, 1
 14429 0000B5CD 7410                    	je .L_lambda_simple_env_end_4f86
 14430 0000B5CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 14431 0000B5D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14432 0000B5D7 48FFC6                  	inc rsi
 14433 0000B5DA 48FFC2                  	inc rdx
 14434 0000B5DD EBEA                    	jmp .L_lambda_simple_env_loop_4f86
 14435                                  .L_lambda_simple_env_end_4f86:
 14436 0000B5DF 5B                      	pop rbx
 14437 0000B5E0 BE00000000              	mov rsi, 0
 14438                                  .L_lambda_simple_params_loop_4f86:	; copy params
 14439 0000B5E5 4883FE01                	cmp rsi, 1
 14440 0000B5E9 740E                    	je .L_lambda_simple_params_end_4f86
 14441 0000B5EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14442 0000B5F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14443 0000B5F4 48FFC6                  	inc rsi
 14444 0000B5F7 EBEC                    	jmp .L_lambda_simple_params_loop_4f86
 14445                                  .L_lambda_simple_params_end_4f86:
 14446 0000B5F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14447 0000B5FC 4889C3                  	mov rbx, rax
 14448 0000B5FF 58                      	pop rax
 14449 0000B600 C60005                  	mov byte [rax], T_closure
 14450 0000B603 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14451 0000B607 48C74009[14B60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f86
 14452 0000B60F E928010000              	jmp .L_lambda_simple_end_4f86
 14453                                  .L_lambda_simple_code_4f86:	; lambda-simple body
 14454 0000B614 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14455 0000B61A 740B                    	je .L_lambda_simple_arity_check_ok_4f86
 14456 0000B61C FF742410                	push qword [rsp + 8 * 2]
 14457 0000B620 6A01                    	push 1
 14458 0000B622 E946720000              	jmp L_error_incorrect_arity_simple
 14459                                  .L_lambda_simple_arity_check_ok_4f86:
 14460 0000B627 C8000000                	enter 0, 0
 14461 0000B62B 488D0425[58010000]      	lea rax, [344 + L_constants]
 14462 0000B633 50                      	push rax
 14463 0000B634 488B4520                	mov rax, PARAM(0)
 14464 0000B638 50                      	push rax
 14465 0000B639 488D0425[56010000]      	lea rax, [342 + L_constants]
 14466 0000B641 50                      	push rax
 14467 0000B642 6A03                    	push 3
 14468 0000B644 488B0425[68030000]      	mov rax, qword [free_var_109]
 14469                                  	assert_closure(rax)
    42 0000B64C 803805              <1>  cmp byte [%1], %2
    43 0000B64F 0F85DF8A0000        <1>  jne L_error_incorrect_type
 14470 0000B655 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14471 0000B659 53                      	push rbx
 14472 0000B65A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14473 0000B65E FFD3                    	call rbx
 14474 0000B660 483D[02000000]          	cmp rax, sob_boolean_false
 14475 0000B666 0F84C8000000            	je .L_if_else_56b3
 14476 0000B66C 488B4510                	mov rax, qword [rbp + 8*2]
 14477 0000B670 488B00                  	mov rax, qword [rax + 8*0]
 14478 0000B673 488B00                  	mov rax, qword [rax + 8*0]
 14479 0000B676 50                      	push rax
 14480 0000B677 488B4520                	mov rax, PARAM(0)
 14481 0000B67B 50                      	push rax
 14482 0000B67C 6A01                    	push 1
 14483 0000B67E 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14484                                  	assert_closure(rax)
    42 0000B686 803805              <1>  cmp byte [%1], %2
    43 0000B689 0F85A58A0000        <1>  jne L_error_incorrect_type
 14485 0000B68F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14486 0000B693 53                      	push rbx
 14487 0000B694 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14488 0000B698 FFD3                    	call rbx
 14489 0000B69A 50                      	push rax
 14490 0000B69B 6A02                    	push 2
 14491 0000B69D 488B0425[08030000]      	mov rax, qword [free_var_97]
 14492                                  	assert_closure(rax)
    42 0000B6A5 803805              <1>  cmp byte [%1], %2
    43 0000B6A8 0F85868A0000        <1>  jne L_error_incorrect_type
 14493 0000B6AE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14494 0000B6B2 53                      	push rbx
 14495 0000B6B3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14496 0000B6B7 FFD3                    	call rbx
 14497 0000B6B9 50                      	push rax
 14498 0000B6BA 6A01                    	push 1
 14499 0000B6BC 488B0425[C8000000]      	mov rax, qword [free_var_25]
 14500                                  	assert_closure(rax)
    42 0000B6C4 803805              <1>  cmp byte [%1], %2
    43 0000B6C7 0F85678A0000        <1>  jne L_error_incorrect_type
 14501 0000B6CD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14502 0000B6D1 53                      	push rbx
 14503 0000B6D2 FF7508                  	push RET_ADDR
 14504 0000B6D5 488B7D18                	mov rdi, COUNT
 14505 0000B6D9 4883C703                	add rdi, 3
 14506 0000B6DD 48C1E703                	shl rdi, 3
 14507 0000B6E1 4801EF                  	add rdi, rbp
 14508 0000B6E4 488B6D00                	mov rbp, OLD_RDP
 14509 0000B6E8 BE00000000              	mov rsi, 0
 14510                                  .L_tc_recycle_frame_loop_5d17:	 ; start recycle frame loop
 14511 0000B6ED 4883FE04                	cmp rsi, 4
 14512 0000B6F1 7427                    	je .L_tc_recycle_frame_done_5d17
 14513 0000B6F3 B903000000              	mov rcx, 3
 14514 0000B6F8 4829F1                  	sub rcx, rsi
 14515 0000B6FB 48C1E103                	shl rcx, 3
 14516 0000B6FF 4801E1                  	add rcx, rsp ; rcx is the address to move
 14517 0000B702 4889F3                  	mov rbx, rsi
 14518 0000B705 48C1E303                	shl rbx, 3
 14519 0000B709 48F7DB                  	neg rbx
 14520 0000B70C 4801FB                  	add rbx, rdi ;rbx is the address to move to
 14521 0000B70F 488B09                  	mov rcx, [rcx]
 14522 0000B712 48890B                  	mov [rbx], rcx
 14523 0000B715 48FFC6                  	inc rsi
 14524 0000B718 EBD3                    	jmp .L_tc_recycle_frame_loop_5d17
 14525                                  .L_tc_recycle_frame_done_5d17:	 ; end recycle frame loop
 14526 0000B71A BB03000000              	mov rbx, 3
 14527 0000B71F 48C1E303                	shl rbx, 3
 14528 0000B723 48F7DB                  	neg rbx
 14529 0000B726 4801FB                  	add rbx, rdi
 14530 0000B729 4889DC                  	mov rsp, rbx
 14531 0000B72C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14532 0000B730 FFE3                    	jmp rbx
 14533 0000B732 EB04                    	jmp .L_if_end_56b3
 14534                                  	.L_if_else_56b3:
 14535 0000B734 488B4520                	mov rax, PARAM(0)
 14536                                  	.L_if_end_56b3:
 14537 0000B738 C9                      	leave
 14538 0000B739 C21800                  	ret 8 * (2 + 1)
 14539                                  .L_lambda_simple_end_4f86:	; new closure is in rax
 14540 0000B73C 48890425[88030000]      	mov qword [free_var_113], rax
 14541 0000B744 48B8-                   	mov rax, sob_void
 14541 0000B746 [0000000000000000] 
 14542                                  
 14543 0000B74E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14544 0000B753 E85C710000              	call malloc
 14545 0000B758 50                      	push rax
 14546 0000B759 BF08000000              	mov rdi, 8 * 1	; new rib
 14547 0000B75E E851710000              	call malloc
 14548 0000B763 50                      	push rax
 14549 0000B764 BF10000000              	mov rdi, 8 * 2	; extended env
 14550 0000B769 E846710000              	call malloc
 14551 0000B76E 488B7D10                	mov rdi, ENV
 14552 0000B772 BE00000000              	mov rsi, 0
 14553 0000B777 BA01000000              	mov rdx, 1
 14554                                  .L_lambda_simple_env_loop_4f87:	; ext_env[i + 1] <-- env[i]
 14555 0000B77C 4883FE01                	cmp rsi, 1
 14556 0000B780 7410                    	je .L_lambda_simple_env_end_4f87
 14557 0000B782 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 14558 0000B786 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14559 0000B78A 48FFC6                  	inc rsi
 14560 0000B78D 48FFC2                  	inc rdx
 14561 0000B790 EBEA                    	jmp .L_lambda_simple_env_loop_4f87
 14562                                  .L_lambda_simple_env_end_4f87:
 14563 0000B792 5B                      	pop rbx
 14564 0000B793 BE00000000              	mov rsi, 0
 14565                                  .L_lambda_simple_params_loop_4f87:	; copy params
 14566 0000B798 4883FE01                	cmp rsi, 1
 14567 0000B79C 740E                    	je .L_lambda_simple_params_end_4f87
 14568 0000B79E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14569 0000B7A3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14570 0000B7A7 48FFC6                  	inc rsi
 14571 0000B7AA EBEC                    	jmp .L_lambda_simple_params_loop_4f87
 14572                                  .L_lambda_simple_params_end_4f87:
 14573 0000B7AC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14574 0000B7AF 4889C3                  	mov rbx, rax
 14575 0000B7B2 58                      	pop rax
 14576 0000B7B3 C60005                  	mov byte [rax], T_closure
 14577 0000B7B6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14578 0000B7BA 48C74009[C7B70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f87
 14579 0000B7C2 E928010000              	jmp .L_lambda_simple_end_4f87
 14580                                  .L_lambda_simple_code_4f87:	; lambda-simple body
 14581 0000B7C7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14582 0000B7CD 740B                    	je .L_lambda_simple_arity_check_ok_4f87
 14583 0000B7CF FF742410                	push qword [rsp + 8 * 2]
 14584 0000B7D3 6A01                    	push 1
 14585 0000B7D5 E993700000              	jmp L_error_incorrect_arity_simple
 14586                                  .L_lambda_simple_arity_check_ok_4f87:
 14587 0000B7DA C8000000                	enter 0, 0
 14588 0000B7DE 488D0425[5C010000]      	lea rax, [348 + L_constants]
 14589 0000B7E6 50                      	push rax
 14590 0000B7E7 488B4520                	mov rax, PARAM(0)
 14591 0000B7EB 50                      	push rax
 14592 0000B7EC 488D0425[5A010000]      	lea rax, [346 + L_constants]
 14593 0000B7F4 50                      	push rax
 14594 0000B7F5 6A03                    	push 3
 14595 0000B7F7 488B0425[68030000]      	mov rax, qword [free_var_109]
 14596                                  	assert_closure(rax)
    42 0000B7FF 803805              <1>  cmp byte [%1], %2
    43 0000B802 0F852C890000        <1>  jne L_error_incorrect_type
 14597 0000B808 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14598 0000B80C 53                      	push rbx
 14599 0000B80D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14600 0000B811 FFD3                    	call rbx
 14601 0000B813 483D[02000000]          	cmp rax, sob_boolean_false
 14602 0000B819 0F84C8000000            	je .L_if_else_56b4
 14603 0000B81F 488B4510                	mov rax, qword [rbp + 8*2]
 14604 0000B823 488B00                  	mov rax, qword [rax + 8*0]
 14605 0000B826 488B00                  	mov rax, qword [rax + 8*0]
 14606 0000B829 50                      	push rax
 14607 0000B82A 488B4520                	mov rax, PARAM(0)
 14608 0000B82E 50                      	push rax
 14609 0000B82F 6A01                    	push 1
 14610 0000B831 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14611                                  	assert_closure(rax)
    42 0000B839 803805              <1>  cmp byte [%1], %2
    43 0000B83C 0F85F2880000        <1>  jne L_error_incorrect_type
 14612 0000B842 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14613 0000B846 53                      	push rbx
 14614 0000B847 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14615 0000B84B FFD3                    	call rbx
 14616 0000B84D 50                      	push rax
 14617 0000B84E 6A02                    	push 2
 14618 0000B850 488B0425[10030000]      	mov rax, qword [free_var_98]
 14619                                  	assert_closure(rax)
    42 0000B858 803805              <1>  cmp byte [%1], %2
    43 0000B85B 0F85D3880000        <1>  jne L_error_incorrect_type
 14620 0000B861 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14621 0000B865 53                      	push rbx
 14622 0000B866 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14623 0000B86A FFD3                    	call rbx
 14624 0000B86C 50                      	push rax
 14625 0000B86D 6A01                    	push 1
 14626 0000B86F 488B0425[C8000000]      	mov rax, qword [free_var_25]
 14627                                  	assert_closure(rax)
    42 0000B877 803805              <1>  cmp byte [%1], %2
    43 0000B87A 0F85B4880000        <1>  jne L_error_incorrect_type
 14628 0000B880 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14629 0000B884 53                      	push rbx
 14630 0000B885 FF7508                  	push RET_ADDR
 14631 0000B888 488B7D18                	mov rdi, COUNT
 14632 0000B88C 4883C703                	add rdi, 3
 14633 0000B890 48C1E703                	shl rdi, 3
 14634 0000B894 4801EF                  	add rdi, rbp
 14635 0000B897 488B6D00                	mov rbp, OLD_RDP
 14636 0000B89B BE00000000              	mov rsi, 0
 14637                                  .L_tc_recycle_frame_loop_5d18:	 ; start recycle frame loop
 14638 0000B8A0 4883FE04                	cmp rsi, 4
 14639 0000B8A4 7427                    	je .L_tc_recycle_frame_done_5d18
 14640 0000B8A6 B903000000              	mov rcx, 3
 14641 0000B8AB 4829F1                  	sub rcx, rsi
 14642 0000B8AE 48C1E103                	shl rcx, 3
 14643 0000B8B2 4801E1                  	add rcx, rsp ; rcx is the address to move
 14644 0000B8B5 4889F3                  	mov rbx, rsi
 14645 0000B8B8 48C1E303                	shl rbx, 3
 14646 0000B8BC 48F7DB                  	neg rbx
 14647 0000B8BF 4801FB                  	add rbx, rdi ;rbx is the address to move to
 14648 0000B8C2 488B09                  	mov rcx, [rcx]
 14649 0000B8C5 48890B                  	mov [rbx], rcx
 14650 0000B8C8 48FFC6                  	inc rsi
 14651 0000B8CB EBD3                    	jmp .L_tc_recycle_frame_loop_5d18
 14652                                  .L_tc_recycle_frame_done_5d18:	 ; end recycle frame loop
 14653 0000B8CD BB03000000              	mov rbx, 3
 14654 0000B8D2 48C1E303                	shl rbx, 3
 14655 0000B8D6 48F7DB                  	neg rbx
 14656 0000B8D9 4801FB                  	add rbx, rdi
 14657 0000B8DC 4889DC                  	mov rsp, rbx
 14658 0000B8DF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14659 0000B8E3 FFE3                    	jmp rbx
 14660 0000B8E5 EB04                    	jmp .L_if_end_56b4
 14661                                  	.L_if_else_56b4:
 14662 0000B8E7 488B4520                	mov rax, PARAM(0)
 14663                                  	.L_if_end_56b4:
 14664 0000B8EB C9                      	leave
 14665 0000B8EC C21800                  	ret 8 * (2 + 1)
 14666                                  .L_lambda_simple_end_4f87:	; new closure is in rax
 14667 0000B8EF 48890425[90030000]      	mov qword [free_var_114], rax
 14668 0000B8F7 48B8-                   	mov rax, sob_void
 14668 0000B8F9 [0000000000000000] 
 14669 0000B901 C9                      	leave
 14670 0000B902 C21800                  	ret 8 * (2 + 1)
 14671                                  .L_lambda_simple_end_4f85:	; new closure is in rax
 14672                                  	assert_closure(rax)
    42 0000B905 803805              <1>  cmp byte [%1], %2
    43 0000B908 0F8526880000        <1>  jne L_error_incorrect_type
 14673 0000B90E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14674 0000B912 53                      	push rbx
 14675 0000B913 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14676 0000B917 FFD3                    	call rbx
 14677                                  
 14678 0000B919 4889C7                  	mov rdi, rax
 14679 0000B91C E8A46F0000              	call print_sexpr_if_not_void
 14680                                  
 14681 0000B921 488D0425[00000000]      	lea rax, [0 + L_constants]
 14682 0000B929 48890425[98030000]      	mov qword [free_var_115], rax
 14683 0000B931 48B8-                   	mov rax, sob_void
 14683 0000B933 [0000000000000000] 
 14684                                  
 14685 0000B93B 4889C7                  	mov rdi, rax
 14686 0000B93E E8826F0000              	call print_sexpr_if_not_void
 14687                                  
 14688 0000B943 488D0425[00000000]      	lea rax, [0 + L_constants]
 14689 0000B94B 48890425[A0030000]      	mov qword [free_var_116], rax
 14690 0000B953 48B8-                   	mov rax, sob_void
 14690 0000B955 [0000000000000000] 
 14691                                  
 14692 0000B95D 4889C7                  	mov rdi, rax
 14693 0000B960 E8606F0000              	call print_sexpr_if_not_void
 14694                                  
 14695 0000B965 488D0425[00000000]      	lea rax, [0 + L_constants]
 14696 0000B96D 48890425[A8030000]      	mov qword [free_var_117], rax
 14697 0000B975 48B8-                   	mov rax, sob_void
 14697 0000B977 [0000000000000000] 
 14698                                  
 14699 0000B97F 4889C7                  	mov rdi, rax
 14700 0000B982 E83E6F0000              	call print_sexpr_if_not_void
 14701                                  
 14702 0000B987 488D0425[00000000]      	lea rax, [0 + L_constants]
 14703 0000B98F 48890425[B0030000]      	mov qword [free_var_118], rax
 14704 0000B997 48B8-                   	mov rax, sob_void
 14704 0000B999 [0000000000000000] 
 14705                                  
 14706 0000B9A1 4889C7                  	mov rdi, rax
 14707 0000B9A4 E81C6F0000              	call print_sexpr_if_not_void
 14708                                  
 14709 0000B9A9 488D0425[00000000]      	lea rax, [0 + L_constants]
 14710 0000B9B1 48890425[B8030000]      	mov qword [free_var_119], rax
 14711 0000B9B9 48B8-                   	mov rax, sob_void
 14711 0000B9BB [0000000000000000] 
 14712                                  
 14713 0000B9C3 4889C7                  	mov rdi, rax
 14714 0000B9C6 E8FA6E0000              	call print_sexpr_if_not_void
 14715                                  
 14716 0000B9CB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14717 0000B9D0 E8DF6E0000              	call malloc
 14718 0000B9D5 50                      	push rax
 14719 0000B9D6 BF00000000              	mov rdi, 8 * 0	; new rib
 14720 0000B9DB E8D46E0000              	call malloc
 14721 0000B9E0 50                      	push rax
 14722 0000B9E1 BF08000000              	mov rdi, 8 * 1	; extended env
 14723 0000B9E6 E8C96E0000              	call malloc
 14724 0000B9EB 488B7D10                	mov rdi, ENV
 14725 0000B9EF BE00000000              	mov rsi, 0
 14726 0000B9F4 BA01000000              	mov rdx, 1
 14727                                  .L_lambda_simple_env_loop_4f88:	; ext_env[i + 1] <-- env[i]
 14728 0000B9F9 4883FE00                	cmp rsi, 0
 14729 0000B9FD 7410                    	je .L_lambda_simple_env_end_4f88
 14730 0000B9FF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 14731 0000BA03 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14732 0000BA07 48FFC6                  	inc rsi
 14733 0000BA0A 48FFC2                  	inc rdx
 14734 0000BA0D EBEA                    	jmp .L_lambda_simple_env_loop_4f88
 14735                                  .L_lambda_simple_env_end_4f88:
 14736 0000BA0F 5B                      	pop rbx
 14737 0000BA10 BE00000000              	mov rsi, 0
 14738                                  .L_lambda_simple_params_loop_4f88:	; copy params
 14739 0000BA15 4883FE00                	cmp rsi, 0
 14740 0000BA19 740E                    	je .L_lambda_simple_params_end_4f88
 14741 0000BA1B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14742 0000BA20 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14743 0000BA24 48FFC6                  	inc rsi
 14744 0000BA27 EBEC                    	jmp .L_lambda_simple_params_loop_4f88
 14745                                  .L_lambda_simple_params_end_4f88:
 14746 0000BA29 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14747 0000BA2C 4889C3                  	mov rbx, rax
 14748 0000BA2F 58                      	pop rax
 14749 0000BA30 C60005                  	mov byte [rax], T_closure
 14750 0000BA33 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14751 0000BA37 48C74009[44BA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f88
 14752 0000BA3F E969030000              	jmp .L_lambda_simple_end_4f88
 14753                                  .L_lambda_simple_code_4f88:	; lambda-simple body
 14754 0000BA44 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14755 0000BA4A 740B                    	je .L_lambda_simple_arity_check_ok_4f88
 14756 0000BA4C FF742410                	push qword [rsp + 8 * 2]
 14757 0000BA50 6A01                    	push 1
 14758 0000BA52 E9166E0000              	jmp L_error_incorrect_arity_simple
 14759                                  .L_lambda_simple_arity_check_ok_4f88:
 14760 0000BA57 C8000000                	enter 0, 0
 14761 0000BA5B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14762 0000BA60 E84F6E0000              	call malloc
 14763 0000BA65 50                      	push rax
 14764 0000BA66 BF08000000              	mov rdi, 8 * 1	; new rib
 14765 0000BA6B E8446E0000              	call malloc
 14766 0000BA70 50                      	push rax
 14767 0000BA71 BF10000000              	mov rdi, 8 * 2	; extended env
 14768 0000BA76 E8396E0000              	call malloc
 14769 0000BA7B 488B7D10                	mov rdi, ENV
 14770 0000BA7F BE00000000              	mov rsi, 0
 14771 0000BA84 BA01000000              	mov rdx, 1
 14772                                  .L_lambda_opt_env_loop_0c95:	; ext_env[i + 1] <-- env[i]
 14773 0000BA89 4883FE01                	cmp rsi, 1
 14774 0000BA8D 7410                    	je .L_lambda_opt_env_end_0c95
 14775 0000BA8F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14776 0000BA93 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14777 0000BA97 48FFC6                  	inc rsi
 14778 0000BA9A 48FFC2                  	inc rdx
 14779 0000BA9D EBEA                    	jmp .L_lambda_opt_env_loop_0c95
 14780                                  .L_lambda_opt_env_end_0c95:
 14781 0000BA9F 5B                      	pop rbx
 14782 0000BAA0 BE00000000              	mov rsi, 0
 14783                                  .L_lambda_opt_params_loop_0c95:	; copy params
 14784 0000BAA5 4883FE01                	cmp rsi, 1
 14785 0000BAA9 740E                    	je .L_lambda_opt_params_end_0c95
 14786 0000BAAB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14787 0000BAB0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14788 0000BAB4 48FFC6                  	inc rsi
 14789 0000BAB7 EBEC                    	jmp .L_lambda_opt_params_loop_0c95
 14790                                  .L_lambda_opt_params_end_0c95:
 14791 0000BAB9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14792 0000BABC 4889C3                  	mov rbx, rax
 14793 0000BABF 58                      	pop rax
 14794 0000BAC0 C60005                  	mov byte [rax], T_closure
 14795 0000BAC3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14796 0000BAC7 48C74009[D4BA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c95
 14797 0000BACF E9D5020000              	jmp .L_lambda_opt_end_0c95
 14798                                  .L_lambda_opt_code_0c95:	; lambda-opt body
 14799 0000BAD4 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 14800 0000BAD9 4889FB                  	mov rbx, rdi
 14801 0000BADC 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
 14802 0000BAE0 4883FB00                	cmp rbx, 0
 14803 0000BAE4 7F45                    	jg .L_lambda_opt_arity_check_more_0c95
 14804                                  .L_lambda_opt_arity_check_exact_0c95:	 ; if params in opt is exact
 14805 0000BAE6 4883EC08                	sub rsp, 8
 14806 0000BAEA BE00000000              	mov rsi, 0 ; index
 14807                                  .L_lambda_opt_stack_enlarge_loop_0c95:	 ; stack loop enlarge start
 14808 0000BAEF 4883FE03                	cmp rsi, 3
 14809 0000BAF3 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c95
 14810 0000BAF5 4889F7                  	mov rdi, rsi
 14811 0000BAF8 48FFC7                  	inc rdi
 14812 0000BAFB 48C1E703                	shl rdi, 3
 14813 0000BAFF 4801E7                  	add rdi, rsp
 14814 0000BB02 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 14815 0000BB05 4883EB08                	sub rbx, 8
 14816 0000BB09 488B3F                  	mov rdi, [rdi]
 14817 0000BB0C 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 14818 0000BB0F 48FFC6                  	inc rsi
 14819 0000BB12 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c95
 14820                                  .L_lambda_opt_stack_enlarge_loop_exit_0c95:	 ; end of stack enlarge loop
 14821 0000BB14 48C7442418-             	mov qword [rsp + 3*8], sob_nil
 14821 0000BB19 [01000000]         
 14822 0000BB1D 48C744241001000000      	mov qword [rsp + 2*8], 1
 14823 0000BB26 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c95
 14824                                  .L_lambda_opt_arity_check_more_0c95:	 ; if params in opt is more
 14825 0000BB2B 48B8-                   	mov rax, sob_nil
 14825 0000BB2D [0100000000000000] 
 14826 0000BB35 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 14827 0000BB38 48FFCE                  	dec rsi
 14828                                  .L_lambda_opt_list_create_loop_0c95:	; start of list creation loop
 14829 0000BB3B 4883FEFF                	cmp rsi, -1
 14830 0000BB3F 7422                    	je .L_lambda_opt_list_create_loop_exit_0c95
 14831 0000BB41 488D4E03                	lea rcx, [rsi + (3 + 0)]
 14832 0000BB45 48C1E103                	shl rcx, 3
 14833 0000BB49 4801E1                  	add rcx, rsp
 14834 0000BB4C 488B09                  	mov rcx, [rcx]
 14835 0000BB4F 56                      	push rsi ; save params
 14836 0000BB50 53                      	push rbx
 14837                                  
 14838 0000BB51 50                      	push rax ; cdr
 14839 0000BB52 51                      	push rcx ; car
 14840 0000BB53 6A02                    	push qword 2 ; push num of args
 14841 0000BB55 6A01                    	push qword 1 ; push garbage as env
 14842 0000BB57 E8DF760000              	call L_code_ptr_cons
 14843                                  
 14844 0000BB5C 5B                      	pop rbx ; restore params
 14845 0000BB5D 5E                      	pop rsi
 14846 0000BB5E 48FFCE                  	dec rsi
 14847 0000BB61 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c95
 14848                                  .L_lambda_opt_list_create_loop_exit_0c95:	; end of list creation loop
 14849 0000BB63 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 14850 0000BB68 4883C302                	add rbx, 2
 14851 0000BB6C 4889DF                  	mov rdi, rbx
 14852 0000BB6F 48C1E703                	shl rdi,3
 14853 0000BB73 4801E7                  	add rdi, rsp
 14854 0000BB76 488907                  	mov [rdi], rax
 14855 0000BB79 BE00000000              	mov rsi, 0 ;index
 14856                                  .L_lambda_opt_stack_shrink_loop_0c95:	; start of stack shrink loop
 14857 0000BB7E 4883FE03                	cmp rsi, 3
 14858 0000BB82 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c95
 14859 0000BB84 BF02000000              	mov rdi, 2
 14860 0000BB89 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 14861 0000BB8C 4889D9                  	mov rcx, rbx
 14862 0000BB8F 4829F1                  	sub rcx, rsi
 14863 0000BB92 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 14864 0000BB95 4889FA                  	mov rdx, rdi
 14865 0000BB98 48C1E203                	shl rdx, 3
 14866 0000BB9C 4801E2                  	add rdx, rsp
 14867 0000BB9F 48C1E103                	shl rcx, 3
 14868 0000BBA3 4801E1                  	add rcx, rsp
 14869 0000BBA6 488B12                  	mov rdx, [rdx]
 14870 0000BBA9 488911                  	mov [rcx], rdx
 14871 0000BBAC 48FFC6                  	inc rsi
 14872 0000BBAF EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c95
 14873                                  .L_lambda_opt_stack_shrink_loop_exit_0c95:	; end of stack shrink loop
 14874 0000BBB1 4883EB02                	sub rbx, 2 ; rbx has number of args
 14875 0000BBB5 4883EB01                	sub rbx, 1
 14876 0000BBB9 48C1E303                	shl rbx, 3
 14877 0000BBBD 4801DC                  	add rsp, rbx
 14878 0000BBC0 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 14879                                  .L_lambda_opt_stack_adjusted_0c95:
 14880 0000BBC9 C8000000                	enter 0, 0
 14881 0000BBCD 488B4520                	mov rax, PARAM(0)
 14882 0000BBD1 50                      	push rax
 14883 0000BBD2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14884 0000BBD7 E8D86C0000              	call malloc
 14885 0000BBDC 50                      	push rax
 14886 0000BBDD BF08000000              	mov rdi, 8 * 1	; new rib
 14887 0000BBE2 E8CD6C0000              	call malloc
 14888 0000BBE7 50                      	push rax
 14889 0000BBE8 BF18000000              	mov rdi, 8 * 3	; extended env
 14890 0000BBED E8C26C0000              	call malloc
 14891 0000BBF2 488B7D10                	mov rdi, ENV
 14892 0000BBF6 BE00000000              	mov rsi, 0
 14893 0000BBFB BA01000000              	mov rdx, 1
 14894                                  .L_lambda_simple_env_loop_4f89:	; ext_env[i + 1] <-- env[i]
 14895 0000BC00 4883FE02                	cmp rsi, 2
 14896 0000BC04 7410                    	je .L_lambda_simple_env_end_4f89
 14897 0000BC06 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 14898 0000BC0A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14899 0000BC0E 48FFC6                  	inc rsi
 14900 0000BC11 48FFC2                  	inc rdx
 14901 0000BC14 EBEA                    	jmp .L_lambda_simple_env_loop_4f89
 14902                                  .L_lambda_simple_env_end_4f89:
 14903 0000BC16 5B                      	pop rbx
 14904 0000BC17 BE00000000              	mov rsi, 0
 14905                                  .L_lambda_simple_params_loop_4f89:	; copy params
 14906 0000BC1C 4883FE01                	cmp rsi, 1
 14907 0000BC20 740E                    	je .L_lambda_simple_params_end_4f89
 14908 0000BC22 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14909 0000BC27 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14910 0000BC2B 48FFC6                  	inc rsi
 14911 0000BC2E EBEC                    	jmp .L_lambda_simple_params_loop_4f89
 14912                                  .L_lambda_simple_params_end_4f89:
 14913 0000BC30 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14914 0000BC33 4889C3                  	mov rbx, rax
 14915 0000BC36 58                      	pop rax
 14916 0000BC37 C60005                  	mov byte [rax], T_closure
 14917 0000BC3A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14918 0000BC3E 48C74009[4BBC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f89
 14919 0000BC46 E9B7000000              	jmp .L_lambda_simple_end_4f89
 14920                                  .L_lambda_simple_code_4f89:	; lambda-simple body
 14921 0000BC4B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14922 0000BC51 740B                    	je .L_lambda_simple_arity_check_ok_4f89
 14923 0000BC53 FF742410                	push qword [rsp + 8 * 2]
 14924 0000BC57 6A01                    	push 1
 14925 0000BC59 E90F6C0000              	jmp L_error_incorrect_arity_simple
 14926                                  .L_lambda_simple_arity_check_ok_4f89:
 14927 0000BC5E C8000000                	enter 0, 0
 14928 0000BC62 488B4520                	mov rax, PARAM(0)
 14929 0000BC66 50                      	push rax
 14930 0000BC67 6A01                    	push 1
 14931 0000BC69 488B0425[88030000]      	mov rax, qword [free_var_113]
 14932                                  	assert_closure(rax)
    42 0000BC71 803805              <1>  cmp byte [%1], %2
    43 0000BC74 0F85BA840000        <1>  jne L_error_incorrect_type
 14933 0000BC7A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14934 0000BC7E 53                      	push rbx
 14935 0000BC7F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14936 0000BC83 FFD3                    	call rbx
 14937 0000BC85 50                      	push rax
 14938 0000BC86 6A01                    	push 1
 14939 0000BC88 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14940                                  	assert_closure(rax)
    42 0000BC90 803805              <1>  cmp byte [%1], %2
    43 0000BC93 0F859B840000        <1>  jne L_error_incorrect_type
 14941 0000BC99 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14942 0000BC9D 53                      	push rbx
 14943 0000BC9E FF7508                  	push RET_ADDR
 14944 0000BCA1 488B7D18                	mov rdi, COUNT
 14945 0000BCA5 4883C703                	add rdi, 3
 14946 0000BCA9 48C1E703                	shl rdi, 3
 14947 0000BCAD 4801EF                  	add rdi, rbp
 14948 0000BCB0 488B6D00                	mov rbp, OLD_RDP
 14949 0000BCB4 BE00000000              	mov rsi, 0
 14950                                  .L_tc_recycle_frame_loop_5d1a:	 ; start recycle frame loop
 14951 0000BCB9 4883FE04                	cmp rsi, 4
 14952 0000BCBD 7427                    	je .L_tc_recycle_frame_done_5d1a
 14953 0000BCBF B903000000              	mov rcx, 3
 14954 0000BCC4 4829F1                  	sub rcx, rsi
 14955 0000BCC7 48C1E103                	shl rcx, 3
 14956 0000BCCB 4801E1                  	add rcx, rsp ; rcx is the address to move
 14957 0000BCCE 4889F3                  	mov rbx, rsi
 14958 0000BCD1 48C1E303                	shl rbx, 3
 14959 0000BCD5 48F7DB                  	neg rbx
 14960 0000BCD8 4801FB                  	add rbx, rdi ;rbx is the address to move to
 14961 0000BCDB 488B09                  	mov rcx, [rcx]
 14962 0000BCDE 48890B                  	mov [rbx], rcx
 14963 0000BCE1 48FFC6                  	inc rsi
 14964 0000BCE4 EBD3                    	jmp .L_tc_recycle_frame_loop_5d1a
 14965                                  .L_tc_recycle_frame_done_5d1a:	 ; end recycle frame loop
 14966 0000BCE6 BB03000000              	mov rbx, 3
 14967 0000BCEB 48C1E303                	shl rbx, 3
 14968 0000BCEF 48F7DB                  	neg rbx
 14969 0000BCF2 4801FB                  	add rbx, rdi
 14970 0000BCF5 4889DC                  	mov rsp, rbx
 14971 0000BCF8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14972 0000BCFC FFE3                    	jmp rbx
 14973 0000BCFE C9                      	leave
 14974 0000BCFF C21800                  	ret 8 * (2 + 1)
 14975                                  .L_lambda_simple_end_4f89:	; new closure is in rax
 14976 0000BD02 50                      	push rax
 14977 0000BD03 6A02                    	push 2
 14978 0000BD05 488B0425[D8020000]      	mov rax, qword [free_var_91]
 14979                                  	assert_closure(rax)
    42 0000BD0D 803805              <1>  cmp byte [%1], %2
    43 0000BD10 0F851E840000        <1>  jne L_error_incorrect_type
 14980 0000BD16 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14981 0000BD1A 53                      	push rbx
 14982 0000BD1B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14983 0000BD1F FFD3                    	call rbx
 14984 0000BD21 50                      	push rax
 14985 0000BD22 488B4510                	mov rax, qword [rbp + 8*2]
 14986 0000BD26 488B00                  	mov rax, qword [rax + 8*0]
 14987 0000BD29 488B00                  	mov rax, qword [rax + 8*0]
 14988 0000BD2C 50                      	push rax
 14989 0000BD2D 6A02                    	push 2
 14990 0000BD2F 488B0425[C8020000]      	mov rax, qword [free_var_89]
 14991                                  	assert_closure(rax)
    42 0000BD37 803805              <1>  cmp byte [%1], %2
    43 0000BD3A 0F85F4830000        <1>  jne L_error_incorrect_type
 14992 0000BD40 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14993 0000BD44 53                      	push rbx
 14994 0000BD45 FF7508                  	push RET_ADDR
 14995 0000BD48 488B7D18                	mov rdi, COUNT
 14996 0000BD4C 4883C703                	add rdi, 3
 14997 0000BD50 48C1E703                	shl rdi, 3
 14998 0000BD54 4801EF                  	add rdi, rbp
 14999 0000BD57 488B6D00                	mov rbp, OLD_RDP
 15000 0000BD5B BE00000000              	mov rsi, 0
 15001                                  .L_tc_recycle_frame_loop_5d19:	 ; start recycle frame loop
 15002 0000BD60 4883FE05                	cmp rsi, 5
 15003 0000BD64 7427                    	je .L_tc_recycle_frame_done_5d19
 15004 0000BD66 B904000000              	mov rcx, 4
 15005 0000BD6B 4829F1                  	sub rcx, rsi
 15006 0000BD6E 48C1E103                	shl rcx, 3
 15007 0000BD72 4801E1                  	add rcx, rsp ; rcx is the address to move
 15008 0000BD75 4889F3                  	mov rbx, rsi
 15009 0000BD78 48C1E303                	shl rbx, 3
 15010 0000BD7C 48F7DB                  	neg rbx
 15011 0000BD7F 4801FB                  	add rbx, rdi ;rbx is the address to move to
 15012 0000BD82 488B09                  	mov rcx, [rcx]
 15013 0000BD85 48890B                  	mov [rbx], rcx
 15014 0000BD88 48FFC6                  	inc rsi
 15015 0000BD8B EBD3                    	jmp .L_tc_recycle_frame_loop_5d19
 15016                                  .L_tc_recycle_frame_done_5d19:	 ; end recycle frame loop
 15017 0000BD8D BB04000000              	mov rbx, 4
 15018 0000BD92 48C1E303                	shl rbx, 3
 15019 0000BD96 48F7DB                  	neg rbx
 15020 0000BD99 4801FB                  	add rbx, rdi
 15021 0000BD9C 4889DC                  	mov rsp, rbx
 15022 0000BD9F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15023 0000BDA3 FFE3                    	jmp rbx
 15024 0000BDA5 C9                      	leave
 15025 0000BDA6 C21800                  	ret AND_KILL_FRAME(1)
 15026                                  .L_lambda_opt_end_0c95:	; new closure is in rax
 15027 0000BDA9 C9                      	leave
 15028 0000BDAA C21800                  	ret 8 * (2 + 1)
 15029                                  .L_lambda_simple_end_4f88:	; new closure is in rax
 15030 0000BDAD 50                      	push rax
 15031 0000BDAE 6A01                    	push 1
 15032 0000BDB0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15033 0000BDB5 E8FA6A0000              	call malloc
 15034 0000BDBA 50                      	push rax
 15035 0000BDBB BF00000000              	mov rdi, 8 * 0	; new rib
 15036 0000BDC0 E8EF6A0000              	call malloc
 15037 0000BDC5 50                      	push rax
 15038 0000BDC6 BF08000000              	mov rdi, 8 * 1	; extended env
 15039 0000BDCB E8E46A0000              	call malloc
 15040 0000BDD0 488B7D10                	mov rdi, ENV
 15041 0000BDD4 BE00000000              	mov rsi, 0
 15042 0000BDD9 BA01000000              	mov rdx, 1
 15043                                  .L_lambda_simple_env_loop_4f8a:	; ext_env[i + 1] <-- env[i]
 15044 0000BDDE 4883FE00                	cmp rsi, 0
 15045 0000BDE2 7410                    	je .L_lambda_simple_env_end_4f8a
 15046 0000BDE4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 15047 0000BDE8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15048 0000BDEC 48FFC6                  	inc rsi
 15049 0000BDEF 48FFC2                  	inc rdx
 15050 0000BDF2 EBEA                    	jmp .L_lambda_simple_env_loop_4f8a
 15051                                  .L_lambda_simple_env_end_4f8a:
 15052 0000BDF4 5B                      	pop rbx
 15053 0000BDF5 BE00000000              	mov rsi, 0
 15054                                  .L_lambda_simple_params_loop_4f8a:	; copy params
 15055 0000BDFA 4883FE00                	cmp rsi, 0
 15056 0000BDFE 740E                    	je .L_lambda_simple_params_end_4f8a
 15057 0000BE00 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15058 0000BE05 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15059 0000BE09 48FFC6                  	inc rsi
 15060 0000BE0C EBEC                    	jmp .L_lambda_simple_params_loop_4f8a
 15061                                  .L_lambda_simple_params_end_4f8a:
 15062 0000BE0E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15063 0000BE11 4889C3                  	mov rbx, rax
 15064 0000BE14 58                      	pop rax
 15065 0000BE15 C60005                  	mov byte [rax], T_closure
 15066 0000BE18 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15067 0000BE1C 48C74009[29BE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f8a
 15068 0000BE24 E924010000              	jmp .L_lambda_simple_end_4f8a
 15069                                  .L_lambda_simple_code_4f8a:	; lambda-simple body
 15070 0000BE29 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15071 0000BE2F 740B                    	je .L_lambda_simple_arity_check_ok_4f8a
 15072 0000BE31 FF742410                	push qword [rsp + 8 * 2]
 15073 0000BE35 6A01                    	push 1
 15074 0000BE37 E9316A0000              	jmp L_error_incorrect_arity_simple
 15075                                  .L_lambda_simple_arity_check_ok_4f8a:
 15076 0000BE3C C8000000                	enter 0, 0
 15077 0000BE40 488B0425[30030000]      	mov rax, qword [free_var_102]
 15078 0000BE48 50                      	push rax
 15079 0000BE49 6A01                    	push 1
 15080 0000BE4B 488B4520                	mov rax, PARAM(0)
 15081                                  	assert_closure(rax)
    42 0000BE4F 803805              <1>  cmp byte [%1], %2
    43 0000BE52 0F85DC820000        <1>  jne L_error_incorrect_type
 15082 0000BE58 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15083 0000BE5C 53                      	push rbx
 15084 0000BE5D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15085 0000BE61 FFD3                    	call rbx
 15086 0000BE63 48890425[98030000]      	mov qword [free_var_115], rax
 15087 0000BE6B 48B8-                   	mov rax, sob_void
 15087 0000BE6D [0000000000000000] 
 15088                                  
 15089 0000BE75 488B0425[38030000]      	mov rax, qword [free_var_103]
 15090 0000BE7D 50                      	push rax
 15091 0000BE7E 6A01                    	push 1
 15092 0000BE80 488B4520                	mov rax, PARAM(0)
 15093                                  	assert_closure(rax)
    42 0000BE84 803805              <1>  cmp byte [%1], %2
    43 0000BE87 0F85A7820000        <1>  jne L_error_incorrect_type
 15094 0000BE8D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15095 0000BE91 53                      	push rbx
 15096 0000BE92 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15097 0000BE96 FFD3                    	call rbx
 15098 0000BE98 48890425[A0030000]      	mov qword [free_var_116], rax
 15099 0000BEA0 48B8-                   	mov rax, sob_void
 15099 0000BEA2 [0000000000000000] 
 15100                                  
 15101 0000BEAA 488B0425[50030000]      	mov rax, qword [free_var_106]
 15102 0000BEB2 50                      	push rax
 15103 0000BEB3 6A01                    	push 1
 15104 0000BEB5 488B4520                	mov rax, PARAM(0)
 15105                                  	assert_closure(rax)
    42 0000BEB9 803805              <1>  cmp byte [%1], %2
    43 0000BEBC 0F8572820000        <1>  jne L_error_incorrect_type
 15106 0000BEC2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15107 0000BEC6 53                      	push rbx
 15108 0000BEC7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15109 0000BECB FFD3                    	call rbx
 15110 0000BECD 48890425[A8030000]      	mov qword [free_var_117], rax
 15111 0000BED5 48B8-                   	mov rax, sob_void
 15111 0000BED7 [0000000000000000] 
 15112                                  
 15113 0000BEDF 488B0425[40030000]      	mov rax, qword [free_var_104]
 15114 0000BEE7 50                      	push rax
 15115 0000BEE8 6A01                    	push 1
 15116 0000BEEA 488B4520                	mov rax, PARAM(0)
 15117                                  	assert_closure(rax)
    42 0000BEEE 803805              <1>  cmp byte [%1], %2
    43 0000BEF1 0F853D820000        <1>  jne L_error_incorrect_type
 15118 0000BEF7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15119 0000BEFB 53                      	push rbx
 15120 0000BEFC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15121 0000BF00 FFD3                    	call rbx
 15122 0000BF02 48890425[B0030000]      	mov qword [free_var_118], rax
 15123 0000BF0A 48B8-                   	mov rax, sob_void
 15123 0000BF0C [0000000000000000] 
 15124                                  
 15125 0000BF14 488B0425[48030000]      	mov rax, qword [free_var_105]
 15126 0000BF1C 50                      	push rax
 15127 0000BF1D 6A01                    	push 1
 15128 0000BF1F 488B4520                	mov rax, PARAM(0)
 15129                                  	assert_closure(rax)
    42 0000BF23 803805              <1>  cmp byte [%1], %2
    43 0000BF26 0F8508820000        <1>  jne L_error_incorrect_type
 15130 0000BF2C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15131 0000BF30 53                      	push rbx
 15132 0000BF31 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15133 0000BF35 FFD3                    	call rbx
 15134 0000BF37 48890425[B8030000]      	mov qword [free_var_119], rax
 15135 0000BF3F 48B8-                   	mov rax, sob_void
 15135 0000BF41 [0000000000000000] 
 15136 0000BF49 C9                      	leave
 15137 0000BF4A C21800                  	ret 8 * (2 + 1)
 15138                                  .L_lambda_simple_end_4f8a:	; new closure is in rax
 15139                                  	assert_closure(rax)
    42 0000BF4D 803805              <1>  cmp byte [%1], %2
    43 0000BF50 0F85DE810000        <1>  jne L_error_incorrect_type
 15140 0000BF56 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15141 0000BF5A 53                      	push rbx
 15142 0000BF5B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15143 0000BF5F FFD3                    	call rbx
 15144                                  
 15145 0000BF61 4889C7                  	mov rdi, rax
 15146 0000BF64 E85C690000              	call print_sexpr_if_not_void
 15147                                  
 15148 0000BF69 488D0425[00000000]      	lea rax, [0 + L_constants]
 15149 0000BF71 48890425[C0030000]      	mov qword [free_var_120], rax
 15150 0000BF79 48B8-                   	mov rax, sob_void
 15150 0000BF7B [0000000000000000] 
 15151                                  
 15152 0000BF83 4889C7                  	mov rdi, rax
 15153 0000BF86 E83A690000              	call print_sexpr_if_not_void
 15154                                  
 15155 0000BF8B 488D0425[00000000]      	lea rax, [0 + L_constants]
 15156 0000BF93 48890425[C8030000]      	mov qword [free_var_121], rax
 15157 0000BF9B 48B8-                   	mov rax, sob_void
 15157 0000BF9D [0000000000000000] 
 15158                                  
 15159 0000BFA5 4889C7                  	mov rdi, rax
 15160 0000BFA8 E818690000              	call print_sexpr_if_not_void
 15161                                  
 15162 0000BFAD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15163 0000BFB2 E8FD680000              	call malloc
 15164 0000BFB7 50                      	push rax
 15165 0000BFB8 BF00000000              	mov rdi, 8 * 0	; new rib
 15166 0000BFBD E8F2680000              	call malloc
 15167 0000BFC2 50                      	push rax
 15168 0000BFC3 BF08000000              	mov rdi, 8 * 1	; extended env
 15169 0000BFC8 E8E7680000              	call malloc
 15170 0000BFCD 488B7D10                	mov rdi, ENV
 15171 0000BFD1 BE00000000              	mov rsi, 0
 15172 0000BFD6 BA01000000              	mov rdx, 1
 15173                                  .L_lambda_simple_env_loop_4f8b:	; ext_env[i + 1] <-- env[i]
 15174 0000BFDB 4883FE00                	cmp rsi, 0
 15175 0000BFDF 7410                    	je .L_lambda_simple_env_end_4f8b
 15176 0000BFE1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 15177 0000BFE5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15178 0000BFE9 48FFC6                  	inc rsi
 15179 0000BFEC 48FFC2                  	inc rdx
 15180 0000BFEF EBEA                    	jmp .L_lambda_simple_env_loop_4f8b
 15181                                  .L_lambda_simple_env_end_4f8b:
 15182 0000BFF1 5B                      	pop rbx
 15183 0000BFF2 BE00000000              	mov rsi, 0
 15184                                  .L_lambda_simple_params_loop_4f8b:	; copy params
 15185 0000BFF7 4883FE00                	cmp rsi, 0
 15186 0000BFFB 740E                    	je .L_lambda_simple_params_end_4f8b
 15187 0000BFFD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15188 0000C002 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15189 0000C006 48FFC6                  	inc rsi
 15190 0000C009 EBEC                    	jmp .L_lambda_simple_params_loop_4f8b
 15191                                  .L_lambda_simple_params_end_4f8b:
 15192 0000C00B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15193 0000C00E 4889C3                  	mov rbx, rax
 15194 0000C011 58                      	pop rax
 15195 0000C012 C60005                  	mov byte [rax], T_closure
 15196 0000C015 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15197 0000C019 48C74009[26C00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f8b
 15198 0000C021 E975010000              	jmp .L_lambda_simple_end_4f8b
 15199                                  .L_lambda_simple_code_4f8b:	; lambda-simple body
 15200 0000C026 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15201 0000C02C 740B                    	je .L_lambda_simple_arity_check_ok_4f8b
 15202 0000C02E FF742410                	push qword [rsp + 8 * 2]
 15203 0000C032 6A01                    	push 1
 15204 0000C034 E934680000              	jmp L_error_incorrect_arity_simple
 15205                                  .L_lambda_simple_arity_check_ok_4f8b:
 15206 0000C039 C8000000                	enter 0, 0
 15207 0000C03D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15208 0000C042 E86D680000              	call malloc
 15209 0000C047 50                      	push rax
 15210 0000C048 BF08000000              	mov rdi, 8 * 1	; new rib
 15211 0000C04D E862680000              	call malloc
 15212 0000C052 50                      	push rax
 15213 0000C053 BF10000000              	mov rdi, 8 * 2	; extended env
 15214 0000C058 E857680000              	call malloc
 15215 0000C05D 488B7D10                	mov rdi, ENV
 15216 0000C061 BE00000000              	mov rsi, 0
 15217 0000C066 BA01000000              	mov rdx, 1
 15218                                  .L_lambda_simple_env_loop_4f8c:	; ext_env[i + 1] <-- env[i]
 15219 0000C06B 4883FE01                	cmp rsi, 1
 15220 0000C06F 7410                    	je .L_lambda_simple_env_end_4f8c
 15221 0000C071 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 15222 0000C075 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15223 0000C079 48FFC6                  	inc rsi
 15224 0000C07C 48FFC2                  	inc rdx
 15225 0000C07F EBEA                    	jmp .L_lambda_simple_env_loop_4f8c
 15226                                  .L_lambda_simple_env_end_4f8c:
 15227 0000C081 5B                      	pop rbx
 15228 0000C082 BE00000000              	mov rsi, 0
 15229                                  .L_lambda_simple_params_loop_4f8c:	; copy params
 15230 0000C087 4883FE01                	cmp rsi, 1
 15231 0000C08B 740E                    	je .L_lambda_simple_params_end_4f8c
 15232 0000C08D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15233 0000C092 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15234 0000C096 48FFC6                  	inc rsi
 15235 0000C099 EBEC                    	jmp .L_lambda_simple_params_loop_4f8c
 15236                                  .L_lambda_simple_params_end_4f8c:
 15237 0000C09B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15238 0000C09E 4889C3                  	mov rbx, rax
 15239 0000C0A1 58                      	pop rax
 15240 0000C0A2 C60005                  	mov byte [rax], T_closure
 15241 0000C0A5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15242 0000C0A9 48C74009[B6C00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f8c
 15243 0000C0B1 E9E1000000              	jmp .L_lambda_simple_end_4f8c
 15244                                  .L_lambda_simple_code_4f8c:	; lambda-simple body
 15245 0000C0B6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15246 0000C0BC 740B                    	je .L_lambda_simple_arity_check_ok_4f8c
 15247 0000C0BE FF742410                	push qword [rsp + 8 * 2]
 15248 0000C0C2 6A01                    	push 1
 15249 0000C0C4 E9A4670000              	jmp L_error_incorrect_arity_simple
 15250                                  .L_lambda_simple_arity_check_ok_4f8c:
 15251 0000C0C9 C8000000                	enter 0, 0
 15252 0000C0CD 488B4520                	mov rax, PARAM(0)
 15253 0000C0D1 50                      	push rax
 15254 0000C0D2 6A01                    	push 1
 15255 0000C0D4 488B0425[D8030000]      	mov rax, qword [free_var_123]
 15256                                  	assert_closure(rax)
    42 0000C0DC 803805              <1>  cmp byte [%1], %2
    43 0000C0DF 0F854F800000        <1>  jne L_error_incorrect_type
 15257 0000C0E5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15258 0000C0E9 53                      	push rbx
 15259 0000C0EA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15260 0000C0EE FFD3                    	call rbx
 15261 0000C0F0 50                      	push rax
 15262 0000C0F1 488B4510                	mov rax, qword [rbp + 8*2]
 15263 0000C0F5 488B00                  	mov rax, qword [rax + 8*0]
 15264 0000C0F8 488B00                  	mov rax, qword [rax + 8*0]
 15265 0000C0FB 50                      	push rax
 15266 0000C0FC 6A02                    	push 2
 15267 0000C0FE 488B0425[D8020000]      	mov rax, qword [free_var_91]
 15268                                  	assert_closure(rax)
    42 0000C106 803805              <1>  cmp byte [%1], %2
    43 0000C109 0F8525800000        <1>  jne L_error_incorrect_type
 15269 0000C10F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15270 0000C113 53                      	push rbx
 15271 0000C114 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15272 0000C118 FFD3                    	call rbx
 15273 0000C11A 50                      	push rax
 15274 0000C11B 6A01                    	push 1
 15275 0000C11D 488B0425[D0030000]      	mov rax, qword [free_var_122]
 15276                                  	assert_closure(rax)
    42 0000C125 803805              <1>  cmp byte [%1], %2
    43 0000C128 0F8506800000        <1>  jne L_error_incorrect_type
 15277 0000C12E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15278 0000C132 53                      	push rbx
 15279 0000C133 FF7508                  	push RET_ADDR
 15280 0000C136 488B7D18                	mov rdi, COUNT
 15281 0000C13A 4883C703                	add rdi, 3
 15282 0000C13E 48C1E703                	shl rdi, 3
 15283 0000C142 4801EF                  	add rdi, rbp
 15284 0000C145 488B6D00                	mov rbp, OLD_RDP
 15285 0000C149 BE00000000              	mov rsi, 0
 15286                                  .L_tc_recycle_frame_loop_5d1b:	 ; start recycle frame loop
 15287 0000C14E 4883FE04                	cmp rsi, 4
 15288 0000C152 7427                    	je .L_tc_recycle_frame_done_5d1b
 15289 0000C154 B903000000              	mov rcx, 3
 15290 0000C159 4829F1                  	sub rcx, rsi
 15291 0000C15C 48C1E103                	shl rcx, 3
 15292 0000C160 4801E1                  	add rcx, rsp ; rcx is the address to move
 15293 0000C163 4889F3                  	mov rbx, rsi
 15294 0000C166 48C1E303                	shl rbx, 3
 15295 0000C16A 48F7DB                  	neg rbx
 15296 0000C16D 4801FB                  	add rbx, rdi ;rbx is the address to move to
 15297 0000C170 488B09                  	mov rcx, [rcx]
 15298 0000C173 48890B                  	mov [rbx], rcx
 15299 0000C176 48FFC6                  	inc rsi
 15300 0000C179 EBD3                    	jmp .L_tc_recycle_frame_loop_5d1b
 15301                                  .L_tc_recycle_frame_done_5d1b:	 ; end recycle frame loop
 15302 0000C17B BB03000000              	mov rbx, 3
 15303 0000C180 48C1E303                	shl rbx, 3
 15304 0000C184 48F7DB                  	neg rbx
 15305 0000C187 4801FB                  	add rbx, rdi
 15306 0000C18A 4889DC                  	mov rsp, rbx
 15307 0000C18D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15308 0000C191 FFE3                    	jmp rbx
 15309 0000C193 C9                      	leave
 15310 0000C194 C21800                  	ret 8 * (2 + 1)
 15311                                  .L_lambda_simple_end_4f8c:	; new closure is in rax
 15312 0000C197 C9                      	leave
 15313 0000C198 C21800                  	ret 8 * (2 + 1)
 15314                                  .L_lambda_simple_end_4f8b:	; new closure is in rax
 15315 0000C19B 50                      	push rax
 15316 0000C19C 6A01                    	push 1
 15317 0000C19E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15318 0000C1A3 E80C670000              	call malloc
 15319 0000C1A8 50                      	push rax
 15320 0000C1A9 BF00000000              	mov rdi, 8 * 0	; new rib
 15321 0000C1AE E801670000              	call malloc
 15322 0000C1B3 50                      	push rax
 15323 0000C1B4 BF08000000              	mov rdi, 8 * 1	; extended env
 15324 0000C1B9 E8F6660000              	call malloc
 15325 0000C1BE 488B7D10                	mov rdi, ENV
 15326 0000C1C2 BE00000000              	mov rsi, 0
 15327 0000C1C7 BA01000000              	mov rdx, 1
 15328                                  .L_lambda_simple_env_loop_4f8d:	; ext_env[i + 1] <-- env[i]
 15329 0000C1CC 4883FE00                	cmp rsi, 0
 15330 0000C1D0 7410                    	je .L_lambda_simple_env_end_4f8d
 15331 0000C1D2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 15332 0000C1D6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15333 0000C1DA 48FFC6                  	inc rsi
 15334 0000C1DD 48FFC2                  	inc rdx
 15335 0000C1E0 EBEA                    	jmp .L_lambda_simple_env_loop_4f8d
 15336                                  .L_lambda_simple_env_end_4f8d:
 15337 0000C1E2 5B                      	pop rbx
 15338 0000C1E3 BE00000000              	mov rsi, 0
 15339                                  .L_lambda_simple_params_loop_4f8d:	; copy params
 15340 0000C1E8 4883FE00                	cmp rsi, 0
 15341 0000C1EC 740E                    	je .L_lambda_simple_params_end_4f8d
 15342 0000C1EE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15343 0000C1F3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15344 0000C1F7 48FFC6                  	inc rsi
 15345 0000C1FA EBEC                    	jmp .L_lambda_simple_params_loop_4f8d
 15346                                  .L_lambda_simple_params_end_4f8d:
 15347 0000C1FC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15348 0000C1FF 4889C3                  	mov rbx, rax
 15349 0000C202 58                      	pop rax
 15350 0000C203 C60005                  	mov byte [rax], T_closure
 15351 0000C206 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15352 0000C20A 48C74009[17C20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f8d
 15353 0000C212 E985000000              	jmp .L_lambda_simple_end_4f8d
 15354                                  .L_lambda_simple_code_4f8d:	; lambda-simple body
 15355 0000C217 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15356 0000C21D 740B                    	je .L_lambda_simple_arity_check_ok_4f8d
 15357 0000C21F FF742410                	push qword [rsp + 8 * 2]
 15358 0000C223 6A01                    	push 1
 15359 0000C225 E943660000              	jmp L_error_incorrect_arity_simple
 15360                                  .L_lambda_simple_arity_check_ok_4f8d:
 15361 0000C22A C8000000                	enter 0, 0
 15362 0000C22E 488B0425[88030000]      	mov rax, qword [free_var_113]
 15363 0000C236 50                      	push rax
 15364 0000C237 6A01                    	push 1
 15365 0000C239 488B4520                	mov rax, PARAM(0)
 15366                                  	assert_closure(rax)
    42 0000C23D 803805              <1>  cmp byte [%1], %2
    43 0000C240 0F85EE7E0000        <1>  jne L_error_incorrect_type
 15367 0000C246 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15368 0000C24A 53                      	push rbx
 15369 0000C24B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15370 0000C24F FFD3                    	call rbx
 15371 0000C251 48890425[C0030000]      	mov qword [free_var_120], rax
 15372 0000C259 48B8-                   	mov rax, sob_void
 15372 0000C25B [0000000000000000] 
 15373                                  
 15374 0000C263 488B0425[90030000]      	mov rax, qword [free_var_114]
 15375 0000C26B 50                      	push rax
 15376 0000C26C 6A01                    	push 1
 15377 0000C26E 488B4520                	mov rax, PARAM(0)
 15378                                  	assert_closure(rax)
    42 0000C272 803805              <1>  cmp byte [%1], %2
    43 0000C275 0F85B97E0000        <1>  jne L_error_incorrect_type
 15379 0000C27B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15380 0000C27F 53                      	push rbx
 15381 0000C280 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15382 0000C284 FFD3                    	call rbx
 15383 0000C286 48890425[C8030000]      	mov qword [free_var_121], rax
 15384 0000C28E 48B8-                   	mov rax, sob_void
 15384 0000C290 [0000000000000000] 
 15385 0000C298 C9                      	leave
 15386 0000C299 C21800                  	ret 8 * (2 + 1)
 15387                                  .L_lambda_simple_end_4f8d:	; new closure is in rax
 15388                                  	assert_closure(rax)
    42 0000C29C 803805              <1>  cmp byte [%1], %2
    43 0000C29F 0F858F7E0000        <1>  jne L_error_incorrect_type
 15389 0000C2A5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15390 0000C2A9 53                      	push rbx
 15391 0000C2AA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15392 0000C2AE FFD3                    	call rbx
 15393                                  
 15394 0000C2B0 4889C7                  	mov rdi, rax
 15395 0000C2B3 E80D660000              	call print_sexpr_if_not_void
 15396                                  
 15397 0000C2B8 488D0425[00000000]      	lea rax, [0 + L_constants]
 15398 0000C2C0 48890425[E0030000]      	mov qword [free_var_124], rax
 15399 0000C2C8 48B8-                   	mov rax, sob_void
 15399 0000C2CA [0000000000000000] 
 15400                                  
 15401 0000C2D2 4889C7                  	mov rdi, rax
 15402 0000C2D5 E8EB650000              	call print_sexpr_if_not_void
 15403                                  
 15404 0000C2DA 488D0425[00000000]      	lea rax, [0 + L_constants]
 15405 0000C2E2 48890425[E8030000]      	mov qword [free_var_125], rax
 15406 0000C2EA 48B8-                   	mov rax, sob_void
 15406 0000C2EC [0000000000000000] 
 15407                                  
 15408 0000C2F4 4889C7                  	mov rdi, rax
 15409 0000C2F7 E8C9650000              	call print_sexpr_if_not_void
 15410                                  
 15411 0000C2FC 488D0425[00000000]      	lea rax, [0 + L_constants]
 15412 0000C304 48890425[F0030000]      	mov qword [free_var_126], rax
 15413 0000C30C 48B8-                   	mov rax, sob_void
 15413 0000C30E [0000000000000000] 
 15414                                  
 15415 0000C316 4889C7                  	mov rdi, rax
 15416 0000C319 E8A7650000              	call print_sexpr_if_not_void
 15417                                  
 15418 0000C31E 488D0425[00000000]      	lea rax, [0 + L_constants]
 15419 0000C326 48890425[F8030000]      	mov qword [free_var_127], rax
 15420 0000C32E 48B8-                   	mov rax, sob_void
 15420 0000C330 [0000000000000000] 
 15421                                  
 15422 0000C338 4889C7                  	mov rdi, rax
 15423 0000C33B E885650000              	call print_sexpr_if_not_void
 15424                                  
 15425 0000C340 488D0425[00000000]      	lea rax, [0 + L_constants]
 15426 0000C348 48890425[00040000]      	mov qword [free_var_128], rax
 15427 0000C350 48B8-                   	mov rax, sob_void
 15427 0000C352 [0000000000000000] 
 15428                                  
 15429 0000C35A 4889C7                  	mov rdi, rax
 15430 0000C35D E863650000              	call print_sexpr_if_not_void
 15431                                  
 15432 0000C362 488D0425[00000000]      	lea rax, [0 + L_constants]
 15433 0000C36A 48890425[08040000]      	mov qword [free_var_129], rax
 15434 0000C372 48B8-                   	mov rax, sob_void
 15434 0000C374 [0000000000000000] 
 15435                                  
 15436 0000C37C 4889C7                  	mov rdi, rax
 15437 0000C37F E841650000              	call print_sexpr_if_not_void
 15438                                  
 15439 0000C384 488D0425[00000000]      	lea rax, [0 + L_constants]
 15440 0000C38C 48890425[10040000]      	mov qword [free_var_130], rax
 15441 0000C394 48B8-                   	mov rax, sob_void
 15441 0000C396 [0000000000000000] 
 15442                                  
 15443 0000C39E 4889C7                  	mov rdi, rax
 15444 0000C3A1 E81F650000              	call print_sexpr_if_not_void
 15445                                  
 15446 0000C3A6 488D0425[00000000]      	lea rax, [0 + L_constants]
 15447 0000C3AE 48890425[18040000]      	mov qword [free_var_131], rax
 15448 0000C3B6 48B8-                   	mov rax, sob_void
 15448 0000C3B8 [0000000000000000] 
 15449                                  
 15450 0000C3C0 4889C7                  	mov rdi, rax
 15451 0000C3C3 E8FD640000              	call print_sexpr_if_not_void
 15452                                  
 15453 0000C3C8 488D0425[00000000]      	lea rax, [0 + L_constants]
 15454 0000C3D0 48890425[20040000]      	mov qword [free_var_132], rax
 15455 0000C3D8 48B8-                   	mov rax, sob_void
 15455 0000C3DA [0000000000000000] 
 15456                                  
 15457 0000C3E2 4889C7                  	mov rdi, rax
 15458 0000C3E5 E8DB640000              	call print_sexpr_if_not_void
 15459                                  
 15460 0000C3EA 488D0425[00000000]      	lea rax, [0 + L_constants]
 15461 0000C3F2 48890425[28040000]      	mov qword [free_var_133], rax
 15462 0000C3FA 48B8-                   	mov rax, sob_void
 15462 0000C3FC [0000000000000000] 
 15463                                  
 15464 0000C404 4889C7                  	mov rdi, rax
 15465 0000C407 E8B9640000              	call print_sexpr_if_not_void
 15466                                  
 15467 0000C40C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15468 0000C411 E89E640000              	call malloc
 15469 0000C416 50                      	push rax
 15470 0000C417 BF00000000              	mov rdi, 8 * 0	; new rib
 15471 0000C41C E893640000              	call malloc
 15472 0000C421 50                      	push rax
 15473 0000C422 BF08000000              	mov rdi, 8 * 1	; extended env
 15474 0000C427 E888640000              	call malloc
 15475 0000C42C 488B7D10                	mov rdi, ENV
 15476 0000C430 BE00000000              	mov rsi, 0
 15477 0000C435 BA01000000              	mov rdx, 1
 15478                                  .L_lambda_simple_env_loop_4f8e:	; ext_env[i + 1] <-- env[i]
 15479 0000C43A 4883FE00                	cmp rsi, 0
 15480 0000C43E 7410                    	je .L_lambda_simple_env_end_4f8e
 15481 0000C440 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 15482 0000C444 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15483 0000C448 48FFC6                  	inc rsi
 15484 0000C44B 48FFC2                  	inc rdx
 15485 0000C44E EBEA                    	jmp .L_lambda_simple_env_loop_4f8e
 15486                                  .L_lambda_simple_env_end_4f8e:
 15487 0000C450 5B                      	pop rbx
 15488 0000C451 BE00000000              	mov rsi, 0
 15489                                  .L_lambda_simple_params_loop_4f8e:	; copy params
 15490 0000C456 4883FE00                	cmp rsi, 0
 15491 0000C45A 740E                    	je .L_lambda_simple_params_end_4f8e
 15492 0000C45C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15493 0000C461 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15494 0000C465 48FFC6                  	inc rsi
 15495 0000C468 EBEC                    	jmp .L_lambda_simple_params_loop_4f8e
 15496                                  .L_lambda_simple_params_end_4f8e:
 15497 0000C46A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15498 0000C46D 4889C3                  	mov rbx, rax
 15499 0000C470 58                      	pop rax
 15500 0000C471 C60005                  	mov byte [rax], T_closure
 15501 0000C474 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15502 0000C478 48C74009[85C40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f8e
 15503 0000C480 E9E10D0000              	jmp .L_lambda_simple_end_4f8e
 15504                                  .L_lambda_simple_code_4f8e:	; lambda-simple body
 15505 0000C485 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15506 0000C48B 740B                    	je .L_lambda_simple_arity_check_ok_4f8e
 15507 0000C48D FF742410                	push qword [rsp + 8 * 2]
 15508 0000C491 6A02                    	push 2
 15509 0000C493 E9D5630000              	jmp L_error_incorrect_arity_simple
 15510                                  .L_lambda_simple_arity_check_ok_4f8e:
 15511 0000C498 C8000000                	enter 0, 0
 15512 0000C49C 488D0425[17000000]      	lea rax, [23 + L_constants]
 15513 0000C4A4 50                      	push rax
 15514 0000C4A5 6A01                    	push 1
 15515 0000C4A7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15516 0000C4AC E803640000              	call malloc
 15517 0000C4B1 50                      	push rax
 15518 0000C4B2 BF10000000              	mov rdi, 8 * 2	; new rib
 15519 0000C4B7 E8F8630000              	call malloc
 15520 0000C4BC 50                      	push rax
 15521 0000C4BD BF10000000              	mov rdi, 8 * 2	; extended env
 15522 0000C4C2 E8ED630000              	call malloc
 15523 0000C4C7 488B7D10                	mov rdi, ENV
 15524 0000C4CB BE00000000              	mov rsi, 0
 15525 0000C4D0 BA01000000              	mov rdx, 1
 15526                                  .L_lambda_simple_env_loop_4f8f:	; ext_env[i + 1] <-- env[i]
 15527 0000C4D5 4883FE01                	cmp rsi, 1
 15528 0000C4D9 7410                    	je .L_lambda_simple_env_end_4f8f
 15529 0000C4DB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 15530 0000C4DF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15531 0000C4E3 48FFC6                  	inc rsi
 15532 0000C4E6 48FFC2                  	inc rdx
 15533 0000C4E9 EBEA                    	jmp .L_lambda_simple_env_loop_4f8f
 15534                                  .L_lambda_simple_env_end_4f8f:
 15535 0000C4EB 5B                      	pop rbx
 15536 0000C4EC BE00000000              	mov rsi, 0
 15537                                  .L_lambda_simple_params_loop_4f8f:	; copy params
 15538 0000C4F1 4883FE02                	cmp rsi, 2
 15539 0000C4F5 740E                    	je .L_lambda_simple_params_end_4f8f
 15540 0000C4F7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15541 0000C4FC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15542 0000C500 48FFC6                  	inc rsi
 15543 0000C503 EBEC                    	jmp .L_lambda_simple_params_loop_4f8f
 15544                                  .L_lambda_simple_params_end_4f8f:
 15545 0000C505 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15546 0000C508 4889C3                  	mov rbx, rax
 15547 0000C50B 58                      	pop rax
 15548 0000C50C C60005                  	mov byte [rax], T_closure
 15549 0000C50F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15550 0000C513 48C74009[20C50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f8f
 15551 0000C51B E9D40C0000              	jmp .L_lambda_simple_end_4f8f
 15552                                  .L_lambda_simple_code_4f8f:	; lambda-simple body
 15553 0000C520 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15554 0000C526 740B                    	je .L_lambda_simple_arity_check_ok_4f8f
 15555 0000C528 FF742410                	push qword [rsp + 8 * 2]
 15556 0000C52C 6A01                    	push 1
 15557 0000C52E E93A630000              	jmp L_error_incorrect_arity_simple
 15558                                  .L_lambda_simple_arity_check_ok_4f8f:
 15559 0000C533 C8000000                	enter 0, 0
 15560 0000C537 BF11000000              	mov qword rdi, (1 + 8 + 8)
 15561 0000C53C E873630000              	call malloc
 15562 0000C541 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 15563 0000C545 48B8-                   	mov rax, sob_void
 15563 0000C547 [0000000000000000] 
 15564                                  
 15565 0000C54F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15566 0000C554 E85B630000              	call malloc
 15567 0000C559 50                      	push rax
 15568 0000C55A BF08000000              	mov rdi, 8 * 1	; new rib
 15569 0000C55F E850630000              	call malloc
 15570 0000C564 50                      	push rax
 15571 0000C565 BF18000000              	mov rdi, 8 * 3	; extended env
 15572 0000C56A E845630000              	call malloc
 15573 0000C56F 488B7D10                	mov rdi, ENV
 15574 0000C573 BE00000000              	mov rsi, 0
 15575 0000C578 BA01000000              	mov rdx, 1
 15576                                  .L_lambda_simple_env_loop_4f90:	; ext_env[i + 1] <-- env[i]
 15577 0000C57D 4883FE02                	cmp rsi, 2
 15578 0000C581 7410                    	je .L_lambda_simple_env_end_4f90
 15579 0000C583 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 15580 0000C587 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15581 0000C58B 48FFC6                  	inc rsi
 15582 0000C58E 48FFC2                  	inc rdx
 15583 0000C591 EBEA                    	jmp .L_lambda_simple_env_loop_4f90
 15584                                  .L_lambda_simple_env_end_4f90:
 15585 0000C593 5B                      	pop rbx
 15586 0000C594 BE00000000              	mov rsi, 0
 15587                                  .L_lambda_simple_params_loop_4f90:	; copy params
 15588 0000C599 4883FE01                	cmp rsi, 1
 15589 0000C59D 740E                    	je .L_lambda_simple_params_end_4f90
 15590 0000C59F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15591 0000C5A4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15592 0000C5A8 48FFC6                  	inc rsi
 15593 0000C5AB EBEC                    	jmp .L_lambda_simple_params_loop_4f90
 15594                                  .L_lambda_simple_params_end_4f90:
 15595 0000C5AD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15596 0000C5B0 4889C3                  	mov rbx, rax
 15597 0000C5B3 58                      	pop rax
 15598 0000C5B4 C60005                  	mov byte [rax], T_closure
 15599 0000C5B7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15600 0000C5BB 48C74009[C8C50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f90
 15601 0000C5C3 E98E020000              	jmp .L_lambda_simple_end_4f90
 15602                                  .L_lambda_simple_code_4f90:	; lambda-simple body
 15603 0000C5C8 48837C241005            	cmp qword [rsp + 8 * 2], 5
 15604 0000C5CE 740B                    	je .L_lambda_simple_arity_check_ok_4f90
 15605 0000C5D0 FF742410                	push qword [rsp + 8 * 2]
 15606 0000C5D4 6A05                    	push 5
 15607 0000C5D6 E992620000              	jmp L_error_incorrect_arity_simple
 15608                                  .L_lambda_simple_arity_check_ok_4f90:
 15609 0000C5DB C8000000                	enter 0, 0
 15610 0000C5DF 488B4530                	mov rax, PARAM(2)
 15611 0000C5E3 50                      	push rax
 15612 0000C5E4 488B4520                	mov rax, PARAM(0)
 15613 0000C5E8 50                      	push rax
 15614 0000C5E9 6A02                    	push 2
 15615 0000C5EB 488B0425[50030000]      	mov rax, qword [free_var_106]
 15616                                  	assert_closure(rax)
    42 0000C5F3 803805              <1>  cmp byte [%1], %2
    43 0000C5F6 0F85387B0000        <1>  jne L_error_incorrect_type
 15617 0000C5FC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15618 0000C600 53                      	push rbx
 15619 0000C601 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15620 0000C605 FFD3                    	call rbx
 15621 0000C607 483D[02000000]          	cmp rax, sob_boolean_false
 15622 0000C60D 742A                    	je .L_if_else_56b5
 15623 0000C60F 488B4540                	mov rax, PARAM(4)
 15624 0000C613 50                      	push rax
 15625 0000C614 488B4530                	mov rax, PARAM(2)
 15626 0000C618 50                      	push rax
 15627 0000C619 6A02                    	push 2
 15628 0000C61B 488B0425[30030000]      	mov rax, qword [free_var_102]
 15629                                  	assert_closure(rax)
    42 0000C623 803805              <1>  cmp byte [%1], %2
    43 0000C626 0F85087B0000        <1>  jne L_error_incorrect_type
 15630 0000C62C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15631 0000C630 53                      	push rbx
 15632 0000C631 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15633 0000C635 FFD3                    	call rbx
 15634 0000C637 EB08                    	jmp .L_if_end_56b5
 15635                                  	.L_if_else_56b5:
 15636 0000C639 488D0425[02000000]      	lea rax, [2 + L_constants]
 15637                                  	.L_if_end_56b5:
 15638 0000C641 483D[02000000]          	cmp rax, sob_boolean_false
 15639 0000C647 0F8505020000            	jne .L_or_end_0618
 15640 0000C64D 488B4530                	mov rax, PARAM(2)
 15641 0000C651 50                      	push rax
 15642 0000C652 488B4520                	mov rax, PARAM(0)
 15643 0000C656 50                      	push rax
 15644 0000C657 6A02                    	push 2
 15645 0000C659 488B0425[30030000]      	mov rax, qword [free_var_102]
 15646                                  	assert_closure(rax)
    42 0000C661 803805              <1>  cmp byte [%1], %2
    43 0000C664 0F85CA7A0000        <1>  jne L_error_incorrect_type
 15647 0000C66A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15648 0000C66E 53                      	push rbx
 15649 0000C66F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15650 0000C673 FFD3                    	call rbx
 15651 0000C675 483D[02000000]          	cmp rax, sob_boolean_false
 15652 0000C67B 0F84C9010000            	je .L_if_else_56b6
 15653 0000C681 488B4520                	mov rax, PARAM(0)
 15654 0000C685 50                      	push rax
 15655 0000C686 488B4538                	mov rax, PARAM(3)
 15656 0000C68A 50                      	push rax
 15657 0000C68B 6A02                    	push 2
 15658 0000C68D 488B0425[78010000]      	mov rax, qword [free_var_47]
 15659                                  	assert_closure(rax)
    42 0000C695 803805              <1>  cmp byte [%1], %2
    43 0000C698 0F85967A0000        <1>  jne L_error_incorrect_type
 15660 0000C69E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15661 0000C6A2 53                      	push rbx
 15662 0000C6A3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15663 0000C6A7 FFD3                    	call rbx
 15664 0000C6A9 50                      	push rax
 15665 0000C6AA 488B4520                	mov rax, PARAM(0)
 15666 0000C6AE 50                      	push rax
 15667 0000C6AF 488B4528                	mov rax, PARAM(1)
 15668 0000C6B3 50                      	push rax
 15669 0000C6B4 6A02                    	push 2
 15670 0000C6B6 488B0425[78010000]      	mov rax, qword [free_var_47]
 15671                                  	assert_closure(rax)
    42 0000C6BE 803805              <1>  cmp byte [%1], %2
    43 0000C6C1 0F856D7A0000        <1>  jne L_error_incorrect_type
 15672 0000C6C7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15673 0000C6CB 53                      	push rbx
 15674 0000C6CC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15675 0000C6D0 FFD3                    	call rbx
 15676 0000C6D2 50                      	push rax
 15677 0000C6D3 6A02                    	push 2
 15678 0000C6D5 488B4510                	mov rax, qword [rbp + 8*2]
 15679 0000C6D9 488B4008                	mov rax, qword [rax + 8*1]
 15680 0000C6DD 488B00                  	mov rax, qword [rax + 8*0]
 15681                                  	assert_closure(rax)
    42 0000C6E0 803805              <1>  cmp byte [%1], %2
    43 0000C6E3 0F854B7A0000        <1>  jne L_error_incorrect_type
 15682 0000C6E9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15683 0000C6ED 53                      	push rbx
 15684 0000C6EE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15685 0000C6F2 FFD3                    	call rbx
 15686 0000C6F4 483D[02000000]          	cmp rax, sob_boolean_false
 15687 0000C6FA 0F8548010000            	jne .L_or_end_0619
 15688 0000C700 488B4520                	mov rax, PARAM(0)
 15689 0000C704 50                      	push rax
 15690 0000C705 488B4538                	mov rax, PARAM(3)
 15691 0000C709 50                      	push rax
 15692 0000C70A 6A02                    	push 2
 15693 0000C70C 488B0425[78010000]      	mov rax, qword [free_var_47]
 15694                                  	assert_closure(rax)
    42 0000C714 803805              <1>  cmp byte [%1], %2
    43 0000C717 0F85177A0000        <1>  jne L_error_incorrect_type
 15695 0000C71D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15696 0000C721 53                      	push rbx
 15697 0000C722 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15698 0000C726 FFD3                    	call rbx
 15699 0000C728 50                      	push rax
 15700 0000C729 488B4520                	mov rax, PARAM(0)
 15701 0000C72D 50                      	push rax
 15702 0000C72E 488B4528                	mov rax, PARAM(1)
 15703 0000C732 50                      	push rax
 15704 0000C733 6A02                    	push 2
 15705 0000C735 488B0425[78010000]      	mov rax, qword [free_var_47]
 15706                                  	assert_closure(rax)
    42 0000C73D 803805              <1>  cmp byte [%1], %2
    43 0000C740 0F85EE790000        <1>  jne L_error_incorrect_type
 15707 0000C746 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15708 0000C74A 53                      	push rbx
 15709 0000C74B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15710 0000C74F FFD3                    	call rbx
 15711 0000C751 50                      	push rax
 15712 0000C752 6A02                    	push 2
 15713 0000C754 488B4510                	mov rax, qword [rbp + 8*2]
 15714 0000C758 488B4008                	mov rax, qword [rax + 8*1]
 15715 0000C75C 488B4008                	mov rax, qword [rax + 8*1]
 15716                                  	assert_closure(rax)
    42 0000C760 803805              <1>  cmp byte [%1], %2
    43 0000C763 0F85CB790000        <1>  jne L_error_incorrect_type
 15717 0000C769 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15718 0000C76D 53                      	push rbx
 15719 0000C76E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15720 0000C772 FFD3                    	call rbx
 15721 0000C774 483D[02000000]          	cmp rax, sob_boolean_false
 15722 0000C77A 0F84C0000000            	je .L_if_else_56b7
 15723 0000C780 488B4540                	mov rax, PARAM(4)
 15724 0000C784 50                      	push rax
 15725 0000C785 488B4538                	mov rax, PARAM(3)
 15726 0000C789 50                      	push rax
 15727 0000C78A 488B4530                	mov rax, PARAM(2)
 15728 0000C78E 50                      	push rax
 15729 0000C78F 488B4528                	mov rax, PARAM(1)
 15730 0000C793 50                      	push rax
 15731 0000C794 488D0425[80000000]      	lea rax, [128 + L_constants]
 15732 0000C79C 50                      	push rax
 15733 0000C79D 488B4520                	mov rax, PARAM(0)
 15734 0000C7A1 50                      	push rax
 15735 0000C7A2 6A02                    	push 2
 15736 0000C7A4 488B0425[08030000]      	mov rax, qword [free_var_97]
 15737                                  	assert_closure(rax)
    42 0000C7AC 803805              <1>  cmp byte [%1], %2
    43 0000C7AF 0F857F790000        <1>  jne L_error_incorrect_type
 15738 0000C7B5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15739 0000C7B9 53                      	push rbx
 15740 0000C7BA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15741 0000C7BE FFD3                    	call rbx
 15742 0000C7C0 50                      	push rax
 15743 0000C7C1 6A05                    	push 5
 15744 0000C7C3 488B4510                	mov rax, qword [rbp + 8*2]
 15745 0000C7C7 488B00                  	mov rax, qword [rax + 8*0]
 15746 0000C7CA 488B00                  	mov rax, qword [rax + 8*0]
 15747 0000C7CD 488B00                  	mov rax, qword [rax]
 15748                                  	assert_closure(rax)
    42 0000C7D0 803805              <1>  cmp byte [%1], %2
    43 0000C7D3 0F855B790000        <1>  jne L_error_incorrect_type
 15749 0000C7D9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15750 0000C7DD 53                      	push rbx
 15751 0000C7DE FF7508                  	push RET_ADDR
 15752 0000C7E1 488B7D18                	mov rdi, COUNT
 15753 0000C7E5 4883C703                	add rdi, 3
 15754 0000C7E9 48C1E703                	shl rdi, 3
 15755 0000C7ED 4801EF                  	add rdi, rbp
 15756 0000C7F0 488B6D00                	mov rbp, OLD_RDP
 15757 0000C7F4 BE00000000              	mov rsi, 0
 15758                                  .L_tc_recycle_frame_loop_5d1d:	 ; start recycle frame loop
 15759 0000C7F9 4883FE08                	cmp rsi, 8
 15760 0000C7FD 7427                    	je .L_tc_recycle_frame_done_5d1d
 15761 0000C7FF B907000000              	mov rcx, 7
 15762 0000C804 4829F1                  	sub rcx, rsi
 15763 0000C807 48C1E103                	shl rcx, 3
 15764 0000C80B 4801E1                  	add rcx, rsp ; rcx is the address to move
 15765 0000C80E 4889F3                  	mov rbx, rsi
 15766 0000C811 48C1E303                	shl rbx, 3
 15767 0000C815 48F7DB                  	neg rbx
 15768 0000C818 4801FB                  	add rbx, rdi ;rbx is the address to move to
 15769 0000C81B 488B09                  	mov rcx, [rcx]
 15770 0000C81E 48890B                  	mov [rbx], rcx
 15771 0000C821 48FFC6                  	inc rsi
 15772 0000C824 EBD3                    	jmp .L_tc_recycle_frame_loop_5d1d
 15773                                  .L_tc_recycle_frame_done_5d1d:	 ; end recycle frame loop
 15774 0000C826 BB07000000              	mov rbx, 7
 15775 0000C82B 48C1E303                	shl rbx, 3
 15776 0000C82F 48F7DB                  	neg rbx
 15777 0000C832 4801FB                  	add rbx, rdi
 15778 0000C835 4889DC                  	mov rsp, rbx
 15779 0000C838 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15780 0000C83C FFE3                    	jmp rbx
 15781 0000C83E EB08                    	jmp .L_if_end_56b7
 15782                                  	.L_if_else_56b7:
 15783 0000C840 488D0425[02000000]      	lea rax, [2 + L_constants]
 15784                                  	.L_if_end_56b7:
 15785                                  .L_or_end_0619:
 15786 0000C848 EB08                    	jmp .L_if_end_56b6
 15787                                  	.L_if_else_56b6:
 15788 0000C84A 488D0425[02000000]      	lea rax, [2 + L_constants]
 15789                                  	.L_if_end_56b6:
 15790                                  .L_or_end_0618:
 15791 0000C852 C9                      	leave
 15792 0000C853 C23800                  	ret 8 * (2 + 5)
 15793                                  .L_lambda_simple_end_4f90:	; new closure is in rax
 15794 0000C856 50                      	push rax
 15795 0000C857 488B4520                	mov rax, PARAM(0)
 15796 0000C85B 8F00                    	pop qword [rax]
 15797 0000C85D 48B8-                   	mov rax, sob_void
 15797 0000C85F [0000000000000000] 
 15798                                  
 15799 0000C867 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15800 0000C86C E843600000              	call malloc
 15801 0000C871 50                      	push rax
 15802 0000C872 BF08000000              	mov rdi, 8 * 1	; new rib
 15803 0000C877 E838600000              	call malloc
 15804 0000C87C 50                      	push rax
 15805 0000C87D BF18000000              	mov rdi, 8 * 3	; extended env
 15806 0000C882 E82D600000              	call malloc
 15807 0000C887 488B7D10                	mov rdi, ENV
 15808 0000C88B BE00000000              	mov rsi, 0
 15809 0000C890 BA01000000              	mov rdx, 1
 15810                                  .L_lambda_simple_env_loop_4f91:	; ext_env[i + 1] <-- env[i]
 15811 0000C895 4883FE02                	cmp rsi, 2
 15812 0000C899 7410                    	je .L_lambda_simple_env_end_4f91
 15813 0000C89B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 15814 0000C89F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15815 0000C8A3 48FFC6                  	inc rsi
 15816 0000C8A6 48FFC2                  	inc rdx
 15817 0000C8A9 EBEA                    	jmp .L_lambda_simple_env_loop_4f91
 15818                                  .L_lambda_simple_env_end_4f91:
 15819 0000C8AB 5B                      	pop rbx
 15820 0000C8AC BE00000000              	mov rsi, 0
 15821                                  .L_lambda_simple_params_loop_4f91:	; copy params
 15822 0000C8B1 4883FE01                	cmp rsi, 1
 15823 0000C8B5 740E                    	je .L_lambda_simple_params_end_4f91
 15824 0000C8B7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15825 0000C8BC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15826 0000C8C0 48FFC6                  	inc rsi
 15827 0000C8C3 EBEC                    	jmp .L_lambda_simple_params_loop_4f91
 15828                                  .L_lambda_simple_params_end_4f91:
 15829 0000C8C5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15830 0000C8C8 4889C3                  	mov rbx, rax
 15831 0000C8CB 58                      	pop rax
 15832 0000C8CC C60005                  	mov byte [rax], T_closure
 15833 0000C8CF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15834 0000C8D3 48C74009[E0C80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f91
 15835 0000C8DB E9F0020000              	jmp .L_lambda_simple_end_4f91
 15836                                  .L_lambda_simple_code_4f91:	; lambda-simple body
 15837 0000C8E0 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15838 0000C8E6 740B                    	je .L_lambda_simple_arity_check_ok_4f91
 15839 0000C8E8 FF742410                	push qword [rsp + 8 * 2]
 15840 0000C8EC 6A02                    	push 2
 15841 0000C8EE E97A5F0000              	jmp L_error_incorrect_arity_simple
 15842                                  .L_lambda_simple_arity_check_ok_4f91:
 15843 0000C8F3 C8000000                	enter 0, 0
 15844 0000C8F7 488B4528                	mov rax, PARAM(1)
 15845 0000C8FB 50                      	push rax
 15846 0000C8FC 6A01                    	push 1
 15847 0000C8FE 488B0425[90000000]      	mov rax, qword [free_var_18]
 15848                                  	assert_closure(rax)
    42 0000C906 803805              <1>  cmp byte [%1], %2
    43 0000C909 0F8525780000        <1>  jne L_error_incorrect_type
 15849 0000C90F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15850 0000C913 53                      	push rbx
 15851 0000C914 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15852 0000C918 FFD3                    	call rbx
 15853 0000C91A 50                      	push rax
 15854 0000C91B 488B4520                	mov rax, PARAM(0)
 15855 0000C91F 50                      	push rax
 15856 0000C920 6A01                    	push 1
 15857 0000C922 488B0425[90000000]      	mov rax, qword [free_var_18]
 15858                                  	assert_closure(rax)
    42 0000C92A 803805              <1>  cmp byte [%1], %2
    43 0000C92D 0F8501780000        <1>  jne L_error_incorrect_type
 15859 0000C933 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15860 0000C937 53                      	push rbx
 15861 0000C938 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15862 0000C93C FFD3                    	call rbx
 15863 0000C93E 50                      	push rax
 15864 0000C93F 6A02                    	push 2
 15865 0000C941 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15866 0000C946 E8695F0000              	call malloc
 15867 0000C94B 50                      	push rax
 15868 0000C94C BF10000000              	mov rdi, 8 * 2	; new rib
 15869 0000C951 E85E5F0000              	call malloc
 15870 0000C956 50                      	push rax
 15871 0000C957 BF20000000              	mov rdi, 8 * 4	; extended env
 15872 0000C95C E8535F0000              	call malloc
 15873 0000C961 488B7D10                	mov rdi, ENV
 15874 0000C965 BE00000000              	mov rsi, 0
 15875 0000C96A BA01000000              	mov rdx, 1
 15876                                  .L_lambda_simple_env_loop_4f92:	; ext_env[i + 1] <-- env[i]
 15877 0000C96F 4883FE03                	cmp rsi, 3
 15878 0000C973 7410                    	je .L_lambda_simple_env_end_4f92
 15879 0000C975 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 15880 0000C979 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15881 0000C97D 48FFC6                  	inc rsi
 15882 0000C980 48FFC2                  	inc rdx
 15883 0000C983 EBEA                    	jmp .L_lambda_simple_env_loop_4f92
 15884                                  .L_lambda_simple_env_end_4f92:
 15885 0000C985 5B                      	pop rbx
 15886 0000C986 BE00000000              	mov rsi, 0
 15887                                  .L_lambda_simple_params_loop_4f92:	; copy params
 15888 0000C98B 4883FE02                	cmp rsi, 2
 15889 0000C98F 740E                    	je .L_lambda_simple_params_end_4f92
 15890 0000C991 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15891 0000C996 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15892 0000C99A 48FFC6                  	inc rsi
 15893 0000C99D EBEC                    	jmp .L_lambda_simple_params_loop_4f92
 15894                                  .L_lambda_simple_params_end_4f92:
 15895 0000C99F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15896 0000C9A2 4889C3                  	mov rbx, rax
 15897 0000C9A5 58                      	pop rax
 15898 0000C9A6 C60005                  	mov byte [rax], T_closure
 15899 0000C9A9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15900 0000C9AD 48C74009[BAC90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f92
 15901 0000C9B5 E9A4010000              	jmp .L_lambda_simple_end_4f92
 15902                                  .L_lambda_simple_code_4f92:	; lambda-simple body
 15903 0000C9BA 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15904 0000C9C0 740B                    	je .L_lambda_simple_arity_check_ok_4f92
 15905 0000C9C2 FF742410                	push qword [rsp + 8 * 2]
 15906 0000C9C6 6A02                    	push 2
 15907 0000C9C8 E9A05E0000              	jmp L_error_incorrect_arity_simple
 15908                                  .L_lambda_simple_arity_check_ok_4f92:
 15909 0000C9CD C8000000                	enter 0, 0
 15910 0000C9D1 488B4528                	mov rax, PARAM(1)
 15911 0000C9D5 50                      	push rax
 15912 0000C9D6 488B4520                	mov rax, PARAM(0)
 15913 0000C9DA 50                      	push rax
 15914 0000C9DB 6A02                    	push 2
 15915 0000C9DD 488B0425[38030000]      	mov rax, qword [free_var_103]
 15916                                  	assert_closure(rax)
    42 0000C9E5 803805              <1>  cmp byte [%1], %2
    43 0000C9E8 0F8546770000        <1>  jne L_error_incorrect_type
 15917 0000C9EE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15918 0000C9F2 53                      	push rbx
 15919 0000C9F3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15920 0000C9F7 FFD3                    	call rbx
 15921 0000C9F9 483D[02000000]          	cmp rax, sob_boolean_false
 15922 0000C9FF 0F84AD000000            	je .L_if_else_56b8
 15923 0000CA05 488B4528                	mov rax, PARAM(1)
 15924 0000CA09 50                      	push rax
 15925 0000CA0A 488B4510                	mov rax, qword [rbp + 8*2]
 15926 0000CA0E 488B00                  	mov rax, qword [rax + 8*0]
 15927 0000CA11 488B4008                	mov rax, qword [rax + 8*1]
 15928 0000CA15 50                      	push rax
 15929 0000CA16 488B4520                	mov rax, PARAM(0)
 15930 0000CA1A 50                      	push rax
 15931 0000CA1B 488B4510                	mov rax, qword [rbp + 8*2]
 15932 0000CA1F 488B00                  	mov rax, qword [rax + 8*0]
 15933 0000CA22 488B00                  	mov rax, qword [rax + 8*0]
 15934 0000CA25 50                      	push rax
 15935 0000CA26 488D0425[20000000]      	lea rax, [32 + L_constants]
 15936 0000CA2E 50                      	push rax
 15937 0000CA2F 6A05                    	push 5
 15938 0000CA31 488B4510                	mov rax, qword [rbp + 8*2]
 15939 0000CA35 488B4008                	mov rax, qword [rax + 8*1]
 15940 0000CA39 488B00                  	mov rax, qword [rax + 8*0]
 15941 0000CA3C 488B00                  	mov rax, qword [rax]
 15942                                  	assert_closure(rax)
    42 0000CA3F 803805              <1>  cmp byte [%1], %2
    43 0000CA42 0F85EC760000        <1>  jne L_error_incorrect_type
 15943 0000CA48 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15944 0000CA4C 53                      	push rbx
 15945 0000CA4D FF7508                  	push RET_ADDR
 15946 0000CA50 488B7D18                	mov rdi, COUNT
 15947 0000CA54 4883C703                	add rdi, 3
 15948 0000CA58 48C1E703                	shl rdi, 3
 15949 0000CA5C 4801EF                  	add rdi, rbp
 15950 0000CA5F 488B6D00                	mov rbp, OLD_RDP
 15951 0000CA63 BE00000000              	mov rsi, 0
 15952                                  .L_tc_recycle_frame_loop_5d20:	 ; start recycle frame loop
 15953 0000CA68 4883FE08                	cmp rsi, 8
 15954 0000CA6C 7427                    	je .L_tc_recycle_frame_done_5d20
 15955 0000CA6E B907000000              	mov rcx, 7
 15956 0000CA73 4829F1                  	sub rcx, rsi
 15957 0000CA76 48C1E103                	shl rcx, 3
 15958 0000CA7A 4801E1                  	add rcx, rsp ; rcx is the address to move
 15959 0000CA7D 4889F3                  	mov rbx, rsi
 15960 0000CA80 48C1E303                	shl rbx, 3
 15961 0000CA84 48F7DB                  	neg rbx
 15962 0000CA87 4801FB                  	add rbx, rdi ;rbx is the address to move to
 15963 0000CA8A 488B09                  	mov rcx, [rcx]
 15964 0000CA8D 48890B                  	mov [rbx], rcx
 15965 0000CA90 48FFC6                  	inc rsi
 15966 0000CA93 EBD3                    	jmp .L_tc_recycle_frame_loop_5d20
 15967                                  .L_tc_recycle_frame_done_5d20:	 ; end recycle frame loop
 15968 0000CA95 BB07000000              	mov rbx, 7
 15969 0000CA9A 48C1E303                	shl rbx, 3
 15970 0000CA9E 48F7DB                  	neg rbx
 15971 0000CAA1 4801FB                  	add rbx, rdi
 15972 0000CAA4 4889DC                  	mov rsp, rbx
 15973 0000CAA7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15974 0000CAAB FFE3                    	jmp rbx
 15975 0000CAAD E9A8000000              	jmp .L_if_end_56b8
 15976                                  	.L_if_else_56b8:
 15977 0000CAB2 488B4520                	mov rax, PARAM(0)
 15978 0000CAB6 50                      	push rax
 15979 0000CAB7 488B4510                	mov rax, qword [rbp + 8*2]
 15980 0000CABB 488B00                  	mov rax, qword [rax + 8*0]
 15981 0000CABE 488B00                  	mov rax, qword [rax + 8*0]
 15982 0000CAC1 50                      	push rax
 15983 0000CAC2 488B4528                	mov rax, PARAM(1)
 15984 0000CAC6 50                      	push rax
 15985 0000CAC7 488B4510                	mov rax, qword [rbp + 8*2]
 15986 0000CACB 488B00                  	mov rax, qword [rax + 8*0]
 15987 0000CACE 488B4008                	mov rax, qword [rax + 8*1]
 15988 0000CAD2 50                      	push rax
 15989 0000CAD3 488D0425[20000000]      	lea rax, [32 + L_constants]
 15990 0000CADB 50                      	push rax
 15991 0000CADC 6A05                    	push 5
 15992 0000CADE 488B4510                	mov rax, qword [rbp + 8*2]
 15993 0000CAE2 488B4008                	mov rax, qword [rax + 8*1]
 15994 0000CAE6 488B00                  	mov rax, qword [rax + 8*0]
 15995 0000CAE9 488B00                  	mov rax, qword [rax]
 15996                                  	assert_closure(rax)
    42 0000CAEC 803805              <1>  cmp byte [%1], %2
    43 0000CAEF 0F853F760000        <1>  jne L_error_incorrect_type
 15997 0000CAF5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15998 0000CAF9 53                      	push rbx
 15999 0000CAFA FF7508                  	push RET_ADDR
 16000 0000CAFD 488B7D18                	mov rdi, COUNT
 16001 0000CB01 4883C703                	add rdi, 3
 16002 0000CB05 48C1E703                	shl rdi, 3
 16003 0000CB09 4801EF                  	add rdi, rbp
 16004 0000CB0C 488B6D00                	mov rbp, OLD_RDP
 16005 0000CB10 BE00000000              	mov rsi, 0
 16006                                  .L_tc_recycle_frame_loop_5d21:	 ; start recycle frame loop
 16007 0000CB15 4883FE08                	cmp rsi, 8
 16008 0000CB19 7427                    	je .L_tc_recycle_frame_done_5d21
 16009 0000CB1B B907000000              	mov rcx, 7
 16010 0000CB20 4829F1                  	sub rcx, rsi
 16011 0000CB23 48C1E103                	shl rcx, 3
 16012 0000CB27 4801E1                  	add rcx, rsp ; rcx is the address to move
 16013 0000CB2A 4889F3                  	mov rbx, rsi
 16014 0000CB2D 48C1E303                	shl rbx, 3
 16015 0000CB31 48F7DB                  	neg rbx
 16016 0000CB34 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16017 0000CB37 488B09                  	mov rcx, [rcx]
 16018 0000CB3A 48890B                  	mov [rbx], rcx
 16019 0000CB3D 48FFC6                  	inc rsi
 16020 0000CB40 EBD3                    	jmp .L_tc_recycle_frame_loop_5d21
 16021                                  .L_tc_recycle_frame_done_5d21:	 ; end recycle frame loop
 16022 0000CB42 BB07000000              	mov rbx, 7
 16023 0000CB47 48C1E303                	shl rbx, 3
 16024 0000CB4B 48F7DB                  	neg rbx
 16025 0000CB4E 4801FB                  	add rbx, rdi
 16026 0000CB51 4889DC                  	mov rsp, rbx
 16027 0000CB54 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16028 0000CB58 FFE3                    	jmp rbx
 16029                                  	.L_if_end_56b8:
 16030 0000CB5A C9                      	leave
 16031 0000CB5B C22000                  	ret 8 * (2 + 2)
 16032                                  .L_lambda_simple_end_4f92:	; new closure is in rax
 16033                                  	assert_closure(rax)
    42 0000CB5E 803805              <1>  cmp byte [%1], %2
    43 0000CB61 0F85CD750000        <1>  jne L_error_incorrect_type
 16034 0000CB67 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16035 0000CB6B 53                      	push rbx
 16036 0000CB6C FF7508                  	push RET_ADDR
 16037 0000CB6F 488B7D18                	mov rdi, COUNT
 16038 0000CB73 4883C703                	add rdi, 3
 16039 0000CB77 48C1E703                	shl rdi, 3
 16040 0000CB7B 4801EF                  	add rdi, rbp
 16041 0000CB7E 488B6D00                	mov rbp, OLD_RDP
 16042 0000CB82 BE00000000              	mov rsi, 0
 16043                                  .L_tc_recycle_frame_loop_5d1f:	 ; start recycle frame loop
 16044 0000CB87 4883FE05                	cmp rsi, 5
 16045 0000CB8B 7427                    	je .L_tc_recycle_frame_done_5d1f
 16046 0000CB8D B904000000              	mov rcx, 4
 16047 0000CB92 4829F1                  	sub rcx, rsi
 16048 0000CB95 48C1E103                	shl rcx, 3
 16049 0000CB99 4801E1                  	add rcx, rsp ; rcx is the address to move
 16050 0000CB9C 4889F3                  	mov rbx, rsi
 16051 0000CB9F 48C1E303                	shl rbx, 3
 16052 0000CBA3 48F7DB                  	neg rbx
 16053 0000CBA6 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16054 0000CBA9 488B09                  	mov rcx, [rcx]
 16055 0000CBAC 48890B                  	mov [rbx], rcx
 16056 0000CBAF 48FFC6                  	inc rsi
 16057 0000CBB2 EBD3                    	jmp .L_tc_recycle_frame_loop_5d1f
 16058                                  .L_tc_recycle_frame_done_5d1f:	 ; end recycle frame loop
 16059 0000CBB4 BB04000000              	mov rbx, 4
 16060 0000CBB9 48C1E303                	shl rbx, 3
 16061 0000CBBD 48F7DB                  	neg rbx
 16062 0000CBC0 4801FB                  	add rbx, rdi
 16063 0000CBC3 4889DC                  	mov rsp, rbx
 16064 0000CBC6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16065 0000CBCA FFE3                    	jmp rbx
 16066 0000CBCC C9                      	leave
 16067 0000CBCD C22000                  	ret 8 * (2 + 2)
 16068                                  .L_lambda_simple_end_4f91:	; new closure is in rax
 16069 0000CBD0 50                      	push rax
 16070 0000CBD1 6A01                    	push 1
 16071 0000CBD3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16072 0000CBD8 E8D75C0000              	call malloc
 16073 0000CBDD 50                      	push rax
 16074 0000CBDE BF08000000              	mov rdi, 8 * 1	; new rib
 16075 0000CBE3 E8CC5C0000              	call malloc
 16076 0000CBE8 50                      	push rax
 16077 0000CBE9 BF18000000              	mov rdi, 8 * 3	; extended env
 16078 0000CBEE E8C15C0000              	call malloc
 16079 0000CBF3 488B7D10                	mov rdi, ENV
 16080 0000CBF7 BE00000000              	mov rsi, 0
 16081 0000CBFC BA01000000              	mov rdx, 1
 16082                                  .L_lambda_simple_env_loop_4f93:	; ext_env[i + 1] <-- env[i]
 16083 0000CC01 4883FE02                	cmp rsi, 2
 16084 0000CC05 7410                    	je .L_lambda_simple_env_end_4f93
 16085 0000CC07 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 16086 0000CC0B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16087 0000CC0F 48FFC6                  	inc rsi
 16088 0000CC12 48FFC2                  	inc rdx
 16089 0000CC15 EBEA                    	jmp .L_lambda_simple_env_loop_4f93
 16090                                  .L_lambda_simple_env_end_4f93:
 16091 0000CC17 5B                      	pop rbx
 16092 0000CC18 BE00000000              	mov rsi, 0
 16093                                  .L_lambda_simple_params_loop_4f93:	; copy params
 16094 0000CC1D 4883FE01                	cmp rsi, 1
 16095 0000CC21 740E                    	je .L_lambda_simple_params_end_4f93
 16096 0000CC23 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16097 0000CC28 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16098 0000CC2C 48FFC6                  	inc rsi
 16099 0000CC2F EBEC                    	jmp .L_lambda_simple_params_loop_4f93
 16100                                  .L_lambda_simple_params_end_4f93:
 16101 0000CC31 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16102 0000CC34 4889C3                  	mov rbx, rax
 16103 0000CC37 58                      	pop rax
 16104 0000CC38 C60005                  	mov byte [rax], T_closure
 16105 0000CC3B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16106 0000CC3F 48C74009[4CCC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f93
 16107 0000CC47 E936050000              	jmp .L_lambda_simple_end_4f93
 16108                                  .L_lambda_simple_code_4f93:	; lambda-simple body
 16109 0000CC4C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16110 0000CC52 740B                    	je .L_lambda_simple_arity_check_ok_4f93
 16111 0000CC54 FF742410                	push qword [rsp + 8 * 2]
 16112 0000CC58 6A01                    	push 1
 16113 0000CC5A E90E5C0000              	jmp L_error_incorrect_arity_simple
 16114                                  .L_lambda_simple_arity_check_ok_4f93:
 16115 0000CC5F C8000000                	enter 0, 0
 16116 0000CC63 488D0425[17000000]      	lea rax, [23 + L_constants]
 16117 0000CC6B 50                      	push rax
 16118 0000CC6C 6A01                    	push 1
 16119 0000CC6E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16120 0000CC73 E83C5C0000              	call malloc
 16121 0000CC78 50                      	push rax
 16122 0000CC79 BF08000000              	mov rdi, 8 * 1	; new rib
 16123 0000CC7E E8315C0000              	call malloc
 16124 0000CC83 50                      	push rax
 16125 0000CC84 BF20000000              	mov rdi, 8 * 4	; extended env
 16126 0000CC89 E8265C0000              	call malloc
 16127 0000CC8E 488B7D10                	mov rdi, ENV
 16128 0000CC92 BE00000000              	mov rsi, 0
 16129 0000CC97 BA01000000              	mov rdx, 1
 16130                                  .L_lambda_simple_env_loop_4f94:	; ext_env[i + 1] <-- env[i]
 16131 0000CC9C 4883FE03                	cmp rsi, 3
 16132 0000CCA0 7410                    	je .L_lambda_simple_env_end_4f94
 16133 0000CCA2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 16134 0000CCA6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16135 0000CCAA 48FFC6                  	inc rsi
 16136 0000CCAD 48FFC2                  	inc rdx
 16137 0000CCB0 EBEA                    	jmp .L_lambda_simple_env_loop_4f94
 16138                                  .L_lambda_simple_env_end_4f94:
 16139 0000CCB2 5B                      	pop rbx
 16140 0000CCB3 BE00000000              	mov rsi, 0
 16141                                  .L_lambda_simple_params_loop_4f94:	; copy params
 16142 0000CCB8 4883FE01                	cmp rsi, 1
 16143 0000CCBC 740E                    	je .L_lambda_simple_params_end_4f94
 16144 0000CCBE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16145 0000CCC3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16146 0000CCC7 48FFC6                  	inc rsi
 16147 0000CCCA EBEC                    	jmp .L_lambda_simple_params_loop_4f94
 16148                                  .L_lambda_simple_params_end_4f94:
 16149 0000CCCC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16150 0000CCCF 4889C3                  	mov rbx, rax
 16151 0000CCD2 58                      	pop rax
 16152 0000CCD3 C60005                  	mov byte [rax], T_closure
 16153 0000CCD6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16154 0000CCDA 48C74009[E7CC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f94
 16155 0000CCE2 E929040000              	jmp .L_lambda_simple_end_4f94
 16156                                  .L_lambda_simple_code_4f94:	; lambda-simple body
 16157 0000CCE7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16158 0000CCED 740B                    	je .L_lambda_simple_arity_check_ok_4f94
 16159 0000CCEF FF742410                	push qword [rsp + 8 * 2]
 16160 0000CCF3 6A01                    	push 1
 16161 0000CCF5 E9735B0000              	jmp L_error_incorrect_arity_simple
 16162                                  .L_lambda_simple_arity_check_ok_4f94:
 16163 0000CCFA C8000000                	enter 0, 0
 16164 0000CCFE BF11000000              	mov qword rdi, (1 + 8 + 8)
 16165 0000CD03 E8AC5B0000              	call malloc
 16166 0000CD08 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 16167 0000CD0C 48B8-                   	mov rax, sob_void
 16167 0000CD0E [0000000000000000] 
 16168                                  
 16169 0000CD16 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16170 0000CD1B E8945B0000              	call malloc
 16171 0000CD20 50                      	push rax
 16172 0000CD21 BF08000000              	mov rdi, 8 * 1	; new rib
 16173 0000CD26 E8895B0000              	call malloc
 16174 0000CD2B 50                      	push rax
 16175 0000CD2C BF28000000              	mov rdi, 8 * 5	; extended env
 16176 0000CD31 E87E5B0000              	call malloc
 16177 0000CD36 488B7D10                	mov rdi, ENV
 16178 0000CD3A BE00000000              	mov rsi, 0
 16179 0000CD3F BA01000000              	mov rdx, 1
 16180                                  .L_lambda_simple_env_loop_4f95:	; ext_env[i + 1] <-- env[i]
 16181 0000CD44 4883FE04                	cmp rsi, 4
 16182 0000CD48 7410                    	je .L_lambda_simple_env_end_4f95
 16183 0000CD4A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 16184 0000CD4E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16185 0000CD52 48FFC6                  	inc rsi
 16186 0000CD55 48FFC2                  	inc rdx
 16187 0000CD58 EBEA                    	jmp .L_lambda_simple_env_loop_4f95
 16188                                  .L_lambda_simple_env_end_4f95:
 16189 0000CD5A 5B                      	pop rbx
 16190 0000CD5B BE00000000              	mov rsi, 0
 16191                                  .L_lambda_simple_params_loop_4f95:	; copy params
 16192 0000CD60 4883FE01                	cmp rsi, 1
 16193 0000CD64 740E                    	je .L_lambda_simple_params_end_4f95
 16194 0000CD66 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16195 0000CD6B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16196 0000CD6F 48FFC6                  	inc rsi
 16197 0000CD72 EBEC                    	jmp .L_lambda_simple_params_loop_4f95
 16198                                  .L_lambda_simple_params_end_4f95:
 16199 0000CD74 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16200 0000CD77 4889C3                  	mov rbx, rax
 16201 0000CD7A 58                      	pop rax
 16202 0000CD7B C60005                  	mov byte [rax], T_closure
 16203 0000CD7E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16204 0000CD82 48C74009[8FCD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f95
 16205 0000CD8A E96F010000              	jmp .L_lambda_simple_end_4f95
 16206                                  .L_lambda_simple_code_4f95:	; lambda-simple body
 16207 0000CD8F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16208 0000CD95 740B                    	je .L_lambda_simple_arity_check_ok_4f95
 16209 0000CD97 FF742410                	push qword [rsp + 8 * 2]
 16210 0000CD9B 6A02                    	push 2
 16211 0000CD9D E9CB5A0000              	jmp L_error_incorrect_arity_simple
 16212                                  .L_lambda_simple_arity_check_ok_4f95:
 16213 0000CDA2 C8000000                	enter 0, 0
 16214 0000CDA6 488B4528                	mov rax, PARAM(1)
 16215 0000CDAA 50                      	push rax
 16216 0000CDAB 6A01                    	push 1
 16217 0000CDAD 488B0425[00000000]      	mov rax, qword [free_var_0]
 16218                                  	assert_closure(rax)
    42 0000CDB5 803805              <1>  cmp byte [%1], %2
    43 0000CDB8 0F8576730000        <1>  jne L_error_incorrect_type
 16219 0000CDBE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16220 0000CDC2 53                      	push rbx
 16221 0000CDC3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16222 0000CDC7 FFD3                    	call rbx
 16223 0000CDC9 483D[02000000]          	cmp rax, sob_boolean_false
 16224 0000CDCF 0F8525010000            	jne .L_or_end_061a
 16225 0000CDD5 488B4528                	mov rax, PARAM(1)
 16226 0000CDD9 50                      	push rax
 16227 0000CDDA 6A01                    	push 1
 16228 0000CDDC 488B0425[80000000]      	mov rax, qword [free_var_16]
 16229                                  	assert_closure(rax)
    42 0000CDE4 803805              <1>  cmp byte [%1], %2
    43 0000CDE7 0F8547730000        <1>  jne L_error_incorrect_type
 16230 0000CDED 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16231 0000CDF1 53                      	push rbx
 16232 0000CDF2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16233 0000CDF6 FFD3                    	call rbx
 16234 0000CDF8 50                      	push rax
 16235 0000CDF9 488B4520                	mov rax, PARAM(0)
 16236 0000CDFD 50                      	push rax
 16237 0000CDFE 6A02                    	push 2
 16238 0000CE00 488B4510                	mov rax, qword [rbp + 8*2]
 16239 0000CE04 488B4008                	mov rax, qword [rax + 8*1]
 16240 0000CE08 488B00                  	mov rax, qword [rax + 8*0]
 16241                                  	assert_closure(rax)
    42 0000CE0B 803805              <1>  cmp byte [%1], %2
    43 0000CE0E 0F8520730000        <1>  jne L_error_incorrect_type
 16242 0000CE14 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16243 0000CE18 53                      	push rbx
 16244 0000CE19 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16245 0000CE1D FFD3                    	call rbx
 16246 0000CE1F 483D[02000000]          	cmp rax, sob_boolean_false
 16247 0000CE25 0F84C7000000            	je .L_if_else_56b9
 16248 0000CE2B 488B4528                	mov rax, PARAM(1)
 16249 0000CE2F 50                      	push rax
 16250 0000CE30 6A01                    	push 1
 16251 0000CE32 488B0425[88000000]      	mov rax, qword [free_var_17]
 16252                                  	assert_closure(rax)
    42 0000CE3A 803805              <1>  cmp byte [%1], %2
    43 0000CE3D 0F85F1720000        <1>  jne L_error_incorrect_type
 16253 0000CE43 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16254 0000CE47 53                      	push rbx
 16255 0000CE48 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16256 0000CE4C FFD3                    	call rbx
 16257 0000CE4E 50                      	push rax
 16258 0000CE4F 488B4528                	mov rax, PARAM(1)
 16259 0000CE53 50                      	push rax
 16260 0000CE54 6A01                    	push 1
 16261 0000CE56 488B0425[80000000]      	mov rax, qword [free_var_16]
 16262                                  	assert_closure(rax)
    42 0000CE5E 803805              <1>  cmp byte [%1], %2
    43 0000CE61 0F85CD720000        <1>  jne L_error_incorrect_type
 16263 0000CE67 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16264 0000CE6B 53                      	push rbx
 16265 0000CE6C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16266 0000CE70 FFD3                    	call rbx
 16267 0000CE72 50                      	push rax
 16268 0000CE73 6A02                    	push 2
 16269 0000CE75 488B4510                	mov rax, qword [rbp + 8*2]
 16270 0000CE79 488B00                  	mov rax, qword [rax + 8*0]
 16271 0000CE7C 488B00                  	mov rax, qword [rax + 8*0]
 16272 0000CE7F 488B00                  	mov rax, qword [rax]
 16273                                  	assert_closure(rax)
    42 0000CE82 803805              <1>  cmp byte [%1], %2
    43 0000CE85 0F85A9720000        <1>  jne L_error_incorrect_type
 16274 0000CE8B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16275 0000CE8F 53                      	push rbx
 16276 0000CE90 FF7508                  	push RET_ADDR
 16277 0000CE93 488B7D18                	mov rdi, COUNT
 16278 0000CE97 4883C703                	add rdi, 3
 16279 0000CE9B 48C1E703                	shl rdi, 3
 16280 0000CE9F 4801EF                  	add rdi, rbp
 16281 0000CEA2 488B6D00                	mov rbp, OLD_RDP
 16282 0000CEA6 BE00000000              	mov rsi, 0
 16283                                  .L_tc_recycle_frame_loop_5d23:	 ; start recycle frame loop
 16284 0000CEAB 4883FE05                	cmp rsi, 5
 16285 0000CEAF 7427                    	je .L_tc_recycle_frame_done_5d23
 16286 0000CEB1 B904000000              	mov rcx, 4
 16287 0000CEB6 4829F1                  	sub rcx, rsi
 16288 0000CEB9 48C1E103                	shl rcx, 3
 16289 0000CEBD 4801E1                  	add rcx, rsp ; rcx is the address to move
 16290 0000CEC0 4889F3                  	mov rbx, rsi
 16291 0000CEC3 48C1E303                	shl rbx, 3
 16292 0000CEC7 48F7DB                  	neg rbx
 16293 0000CECA 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16294 0000CECD 488B09                  	mov rcx, [rcx]
 16295 0000CED0 48890B                  	mov [rbx], rcx
 16296 0000CED3 48FFC6                  	inc rsi
 16297 0000CED6 EBD3                    	jmp .L_tc_recycle_frame_loop_5d23
 16298                                  .L_tc_recycle_frame_done_5d23:	 ; end recycle frame loop
 16299 0000CED8 BB04000000              	mov rbx, 4
 16300 0000CEDD 48C1E303                	shl rbx, 3
 16301 0000CEE1 48F7DB                  	neg rbx
 16302 0000CEE4 4801FB                  	add rbx, rdi
 16303 0000CEE7 4889DC                  	mov rsp, rbx
 16304 0000CEEA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16305 0000CEEE FFE3                    	jmp rbx
 16306 0000CEF0 EB08                    	jmp .L_if_end_56b9
 16307                                  	.L_if_else_56b9:
 16308 0000CEF2 488D0425[02000000]      	lea rax, [2 + L_constants]
 16309                                  	.L_if_end_56b9:
 16310                                  .L_or_end_061a:
 16311 0000CEFA C9                      	leave
 16312 0000CEFB C22000                  	ret 8 * (2 + 2)
 16313                                  .L_lambda_simple_end_4f95:	; new closure is in rax
 16314 0000CEFE 50                      	push rax
 16315 0000CEFF 488B4520                	mov rax, PARAM(0)
 16316 0000CF03 8F00                    	pop qword [rax]
 16317 0000CF05 48B8-                   	mov rax, sob_void
 16317 0000CF07 [0000000000000000] 
 16318                                  
 16319 0000CF0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16320 0000CF14 E89B590000              	call malloc
 16321 0000CF19 50                      	push rax
 16322 0000CF1A BF08000000              	mov rdi, 8 * 1	; new rib
 16323 0000CF1F E890590000              	call malloc
 16324 0000CF24 50                      	push rax
 16325 0000CF25 BF28000000              	mov rdi, 8 * 5	; extended env
 16326 0000CF2A E885590000              	call malloc
 16327 0000CF2F 488B7D10                	mov rdi, ENV
 16328 0000CF33 BE00000000              	mov rsi, 0
 16329 0000CF38 BA01000000              	mov rdx, 1
 16330                                  .L_lambda_opt_env_loop_0c96:	; ext_env[i + 1] <-- env[i]
 16331 0000CF3D 4883FE04                	cmp rsi, 4
 16332 0000CF41 7410                    	je .L_lambda_opt_env_end_0c96
 16333 0000CF43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16334 0000CF47 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16335 0000CF4B 48FFC6                  	inc rsi
 16336 0000CF4E 48FFC2                  	inc rdx
 16337 0000CF51 EBEA                    	jmp .L_lambda_opt_env_loop_0c96
 16338                                  .L_lambda_opt_env_end_0c96:
 16339 0000CF53 5B                      	pop rbx
 16340 0000CF54 BE00000000              	mov rsi, 0
 16341                                  .L_lambda_opt_params_loop_0c96:	; copy params
 16342 0000CF59 4883FE01                	cmp rsi, 1
 16343 0000CF5D 740E                    	je .L_lambda_opt_params_end_0c96
 16344 0000CF5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16345 0000CF64 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16346 0000CF68 48FFC6                  	inc rsi
 16347 0000CF6B EBEC                    	jmp .L_lambda_opt_params_loop_0c96
 16348                                  .L_lambda_opt_params_end_0c96:
 16349 0000CF6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16350 0000CF70 4889C3                  	mov rbx, rax
 16351 0000CF73 58                      	pop rax
 16352 0000CF74 C60005                  	mov byte [rax], T_closure
 16353 0000CF77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16354 0000CF7B 48C74009[88CF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c96
 16355 0000CF83 E984010000              	jmp .L_lambda_opt_end_0c96
 16356                                  .L_lambda_opt_code_0c96:	; lambda-opt body
 16357 0000CF88 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 16358 0000CF8D 4889FB                  	mov rbx, rdi
 16359 0000CF90 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 16360 0000CF94 4883FB00                	cmp rbx, 0
 16361 0000CF98 7F45                    	jg .L_lambda_opt_arity_check_more_0c96
 16362                                  .L_lambda_opt_arity_check_exact_0c96:	 ; if params in opt is exact
 16363 0000CF9A 4883EC08                	sub rsp, 8
 16364 0000CF9E BE00000000              	mov rsi, 0 ; index
 16365                                  .L_lambda_opt_stack_enlarge_loop_0c96:	 ; stack loop enlarge start
 16366 0000CFA3 4883FE04                	cmp rsi, 4
 16367 0000CFA7 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c96
 16368 0000CFA9 4889F7                  	mov rdi, rsi
 16369 0000CFAC 48FFC7                  	inc rdi
 16370 0000CFAF 48C1E703                	shl rdi, 3
 16371 0000CFB3 4801E7                  	add rdi, rsp
 16372 0000CFB6 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 16373 0000CFB9 4883EB08                	sub rbx, 8
 16374 0000CFBD 488B3F                  	mov rdi, [rdi]
 16375 0000CFC0 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 16376 0000CFC3 48FFC6                  	inc rsi
 16377 0000CFC6 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c96
 16378                                  .L_lambda_opt_stack_enlarge_loop_exit_0c96:	 ; end of stack enlarge loop
 16379 0000CFC8 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 16379 0000CFCD [01000000]         
 16380 0000CFD1 48C744241002000000      	mov qword [rsp + 2*8], 2
 16381 0000CFDA E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c96
 16382                                  .L_lambda_opt_arity_check_more_0c96:	 ; if params in opt is more
 16383 0000CFDF 48B8-                   	mov rax, sob_nil
 16383 0000CFE1 [0100000000000000] 
 16384 0000CFE9 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 16385 0000CFEC 48FFCE                  	dec rsi
 16386                                  .L_lambda_opt_list_create_loop_0c96:	; start of list creation loop
 16387 0000CFEF 4883FEFF                	cmp rsi, -1
 16388 0000CFF3 7422                    	je .L_lambda_opt_list_create_loop_exit_0c96
 16389 0000CFF5 488D4E04                	lea rcx, [rsi + (3 + 1)]
 16390 0000CFF9 48C1E103                	shl rcx, 3
 16391 0000CFFD 4801E1                  	add rcx, rsp
 16392 0000D000 488B09                  	mov rcx, [rcx]
 16393 0000D003 56                      	push rsi ; save params
 16394 0000D004 53                      	push rbx
 16395                                  
 16396 0000D005 50                      	push rax ; cdr
 16397 0000D006 51                      	push rcx ; car
 16398 0000D007 6A02                    	push qword 2 ; push num of args
 16399 0000D009 6A01                    	push qword 1 ; push garbage as env
 16400 0000D00B E82B620000              	call L_code_ptr_cons
 16401                                  
 16402 0000D010 5B                      	pop rbx ; restore params
 16403 0000D011 5E                      	pop rsi
 16404 0000D012 48FFCE                  	dec rsi
 16405 0000D015 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c96
 16406                                  .L_lambda_opt_list_create_loop_exit_0c96:	; end of list creation loop
 16407 0000D017 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 16408 0000D01C 4883C302                	add rbx, 2
 16409 0000D020 4889DF                  	mov rdi, rbx
 16410 0000D023 48C1E703                	shl rdi,3
 16411 0000D027 4801E7                  	add rdi, rsp
 16412 0000D02A 488907                  	mov [rdi], rax
 16413 0000D02D BE00000000              	mov rsi, 0 ;index
 16414                                  .L_lambda_opt_stack_shrink_loop_0c96:	; start of stack shrink loop
 16415 0000D032 4883FE04                	cmp rsi, 4
 16416 0000D036 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c96
 16417 0000D038 BF03000000              	mov rdi, 3
 16418 0000D03D 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 16419 0000D040 4889D9                  	mov rcx, rbx
 16420 0000D043 4829F1                  	sub rcx, rsi
 16421 0000D046 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 16422 0000D049 4889FA                  	mov rdx, rdi
 16423 0000D04C 48C1E203                	shl rdx, 3
 16424 0000D050 4801E2                  	add rdx, rsp
 16425 0000D053 48C1E103                	shl rcx, 3
 16426 0000D057 4801E1                  	add rcx, rsp
 16427 0000D05A 488B12                  	mov rdx, [rdx]
 16428 0000D05D 488911                  	mov [rcx], rdx
 16429 0000D060 48FFC6                  	inc rsi
 16430 0000D063 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c96
 16431                                  .L_lambda_opt_stack_shrink_loop_exit_0c96:	; end of stack shrink loop
 16432 0000D065 4883EB02                	sub rbx, 2 ; rbx has number of args
 16433 0000D069 4883EB02                	sub rbx, 2
 16434 0000D06D 48C1E303                	shl rbx, 3
 16435 0000D071 4801DC                  	add rsp, rbx
 16436 0000D074 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 16437                                  .L_lambda_opt_stack_adjusted_0c96:
 16438 0000D07D C8000000                	enter 0, 0
 16439 0000D081 488B4528                	mov rax, PARAM(1)
 16440 0000D085 50                      	push rax
 16441 0000D086 488B4520                	mov rax, PARAM(0)
 16442 0000D08A 50                      	push rax
 16443 0000D08B 6A02                    	push 2
 16444 0000D08D 488B4510                	mov rax, qword [rbp + 8*2]
 16445 0000D091 488B00                  	mov rax, qword [rax + 8*0]
 16446 0000D094 488B00                  	mov rax, qword [rax + 8*0]
 16447 0000D097 488B00                  	mov rax, qword [rax]
 16448                                  	assert_closure(rax)
    42 0000D09A 803805              <1>  cmp byte [%1], %2
    43 0000D09D 0F8591700000        <1>  jne L_error_incorrect_type
 16449 0000D0A3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16450 0000D0A7 53                      	push rbx
 16451 0000D0A8 FF7508                  	push RET_ADDR
 16452 0000D0AB 488B7D18                	mov rdi, COUNT
 16453 0000D0AF 4883C703                	add rdi, 3
 16454 0000D0B3 48C1E703                	shl rdi, 3
 16455 0000D0B7 4801EF                  	add rdi, rbp
 16456 0000D0BA 488B6D00                	mov rbp, OLD_RDP
 16457 0000D0BE BE00000000              	mov rsi, 0
 16458                                  .L_tc_recycle_frame_loop_5d24:	 ; start recycle frame loop
 16459 0000D0C3 4883FE05                	cmp rsi, 5
 16460 0000D0C7 7427                    	je .L_tc_recycle_frame_done_5d24
 16461 0000D0C9 B904000000              	mov rcx, 4
 16462 0000D0CE 4829F1                  	sub rcx, rsi
 16463 0000D0D1 48C1E103                	shl rcx, 3
 16464 0000D0D5 4801E1                  	add rcx, rsp ; rcx is the address to move
 16465 0000D0D8 4889F3                  	mov rbx, rsi
 16466 0000D0DB 48C1E303                	shl rbx, 3
 16467 0000D0DF 48F7DB                  	neg rbx
 16468 0000D0E2 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16469 0000D0E5 488B09                  	mov rcx, [rcx]
 16470 0000D0E8 48890B                  	mov [rbx], rcx
 16471 0000D0EB 48FFC6                  	inc rsi
 16472 0000D0EE EBD3                    	jmp .L_tc_recycle_frame_loop_5d24
 16473                                  .L_tc_recycle_frame_done_5d24:	 ; end recycle frame loop
 16474 0000D0F0 BB04000000              	mov rbx, 4
 16475 0000D0F5 48C1E303                	shl rbx, 3
 16476 0000D0F9 48F7DB                  	neg rbx
 16477 0000D0FC 4801FB                  	add rbx, rdi
 16478 0000D0FF 4889DC                  	mov rsp, rbx
 16479 0000D102 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16480 0000D106 FFE3                    	jmp rbx
 16481 0000D108 C9                      	leave
 16482 0000D109 C22000                  	ret AND_KILL_FRAME(2)
 16483                                  .L_lambda_opt_end_0c96:	; new closure is in rax
 16484 0000D10C C9                      	leave
 16485 0000D10D C21800                  	ret 8 * (2 + 1)
 16486                                  .L_lambda_simple_end_4f94:	; new closure is in rax
 16487                                  	assert_closure(rax)
    42 0000D110 803805              <1>  cmp byte [%1], %2
    43 0000D113 0F851B700000        <1>  jne L_error_incorrect_type
 16488 0000D119 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16489 0000D11D 53                      	push rbx
 16490 0000D11E FF7508                  	push RET_ADDR
 16491 0000D121 488B7D18                	mov rdi, COUNT
 16492 0000D125 4883C703                	add rdi, 3
 16493 0000D129 48C1E703                	shl rdi, 3
 16494 0000D12D 4801EF                  	add rdi, rbp
 16495 0000D130 488B6D00                	mov rbp, OLD_RDP
 16496 0000D134 BE00000000              	mov rsi, 0
 16497                                  .L_tc_recycle_frame_loop_5d22:	 ; start recycle frame loop
 16498 0000D139 4883FE04                	cmp rsi, 4
 16499 0000D13D 7427                    	je .L_tc_recycle_frame_done_5d22
 16500 0000D13F B903000000              	mov rcx, 3
 16501 0000D144 4829F1                  	sub rcx, rsi
 16502 0000D147 48C1E103                	shl rcx, 3
 16503 0000D14B 4801E1                  	add rcx, rsp ; rcx is the address to move
 16504 0000D14E 4889F3                  	mov rbx, rsi
 16505 0000D151 48C1E303                	shl rbx, 3
 16506 0000D155 48F7DB                  	neg rbx
 16507 0000D158 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16508 0000D15B 488B09                  	mov rcx, [rcx]
 16509 0000D15E 48890B                  	mov [rbx], rcx
 16510 0000D161 48FFC6                  	inc rsi
 16511 0000D164 EBD3                    	jmp .L_tc_recycle_frame_loop_5d22
 16512                                  .L_tc_recycle_frame_done_5d22:	 ; end recycle frame loop
 16513 0000D166 BB03000000              	mov rbx, 3
 16514 0000D16B 48C1E303                	shl rbx, 3
 16515 0000D16F 48F7DB                  	neg rbx
 16516 0000D172 4801FB                  	add rbx, rdi
 16517 0000D175 4889DC                  	mov rsp, rbx
 16518 0000D178 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16519 0000D17C FFE3                    	jmp rbx
 16520 0000D17E C9                      	leave
 16521 0000D17F C21800                  	ret 8 * (2 + 1)
 16522                                  .L_lambda_simple_end_4f93:	; new closure is in rax
 16523                                  	assert_closure(rax)
    42 0000D182 803805              <1>  cmp byte [%1], %2
    43 0000D185 0F85A96F0000        <1>  jne L_error_incorrect_type
 16524 0000D18B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16525 0000D18F 53                      	push rbx
 16526 0000D190 FF7508                  	push RET_ADDR
 16527 0000D193 488B7D18                	mov rdi, COUNT
 16528 0000D197 4883C703                	add rdi, 3
 16529 0000D19B 48C1E703                	shl rdi, 3
 16530 0000D19F 4801EF                  	add rdi, rbp
 16531 0000D1A2 488B6D00                	mov rbp, OLD_RDP
 16532 0000D1A6 BE00000000              	mov rsi, 0
 16533                                  .L_tc_recycle_frame_loop_5d1e:	 ; start recycle frame loop
 16534 0000D1AB 4883FE04                	cmp rsi, 4
 16535 0000D1AF 7427                    	je .L_tc_recycle_frame_done_5d1e
 16536 0000D1B1 B903000000              	mov rcx, 3
 16537 0000D1B6 4829F1                  	sub rcx, rsi
 16538 0000D1B9 48C1E103                	shl rcx, 3
 16539 0000D1BD 4801E1                  	add rcx, rsp ; rcx is the address to move
 16540 0000D1C0 4889F3                  	mov rbx, rsi
 16541 0000D1C3 48C1E303                	shl rbx, 3
 16542 0000D1C7 48F7DB                  	neg rbx
 16543 0000D1CA 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16544 0000D1CD 488B09                  	mov rcx, [rcx]
 16545 0000D1D0 48890B                  	mov [rbx], rcx
 16546 0000D1D3 48FFC6                  	inc rsi
 16547 0000D1D6 EBD3                    	jmp .L_tc_recycle_frame_loop_5d1e
 16548                                  .L_tc_recycle_frame_done_5d1e:	 ; end recycle frame loop
 16549 0000D1D8 BB03000000              	mov rbx, 3
 16550 0000D1DD 48C1E303                	shl rbx, 3
 16551 0000D1E1 48F7DB                  	neg rbx
 16552 0000D1E4 4801FB                  	add rbx, rdi
 16553 0000D1E7 4889DC                  	mov rsp, rbx
 16554 0000D1EA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16555 0000D1EE FFE3                    	jmp rbx
 16556 0000D1F0 C9                      	leave
 16557 0000D1F1 C21800                  	ret 8 * (2 + 1)
 16558                                  .L_lambda_simple_end_4f8f:	; new closure is in rax
 16559                                  	assert_closure(rax)
    42 0000D1F4 803805              <1>  cmp byte [%1], %2
    43 0000D1F7 0F85376F0000        <1>  jne L_error_incorrect_type
 16560 0000D1FD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16561 0000D201 53                      	push rbx
 16562 0000D202 FF7508                  	push RET_ADDR
 16563 0000D205 488B7D18                	mov rdi, COUNT
 16564 0000D209 4883C703                	add rdi, 3
 16565 0000D20D 48C1E703                	shl rdi, 3
 16566 0000D211 4801EF                  	add rdi, rbp
 16567 0000D214 488B6D00                	mov rbp, OLD_RDP
 16568 0000D218 BE00000000              	mov rsi, 0
 16569                                  .L_tc_recycle_frame_loop_5d1c:	 ; start recycle frame loop
 16570 0000D21D 4883FE04                	cmp rsi, 4
 16571 0000D221 7427                    	je .L_tc_recycle_frame_done_5d1c
 16572 0000D223 B903000000              	mov rcx, 3
 16573 0000D228 4829F1                  	sub rcx, rsi
 16574 0000D22B 48C1E103                	shl rcx, 3
 16575 0000D22F 4801E1                  	add rcx, rsp ; rcx is the address to move
 16576 0000D232 4889F3                  	mov rbx, rsi
 16577 0000D235 48C1E303                	shl rbx, 3
 16578 0000D239 48F7DB                  	neg rbx
 16579 0000D23C 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16580 0000D23F 488B09                  	mov rcx, [rcx]
 16581 0000D242 48890B                  	mov [rbx], rcx
 16582 0000D245 48FFC6                  	inc rsi
 16583 0000D248 EBD3                    	jmp .L_tc_recycle_frame_loop_5d1c
 16584                                  .L_tc_recycle_frame_done_5d1c:	 ; end recycle frame loop
 16585 0000D24A BB03000000              	mov rbx, 3
 16586 0000D24F 48C1E303                	shl rbx, 3
 16587 0000D253 48F7DB                  	neg rbx
 16588 0000D256 4801FB                  	add rbx, rdi
 16589 0000D259 4889DC                  	mov rsp, rbx
 16590 0000D25C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16591 0000D260 FFE3                    	jmp rbx
 16592 0000D262 C9                      	leave
 16593 0000D263 C22000                  	ret 8 * (2 + 2)
 16594                                  .L_lambda_simple_end_4f8e:	; new closure is in rax
 16595 0000D266 50                      	push rax
 16596 0000D267 6A01                    	push 1
 16597 0000D269 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16598 0000D26E E841560000              	call malloc
 16599 0000D273 50                      	push rax
 16600 0000D274 BF00000000              	mov rdi, 8 * 0	; new rib
 16601 0000D279 E836560000              	call malloc
 16602 0000D27E 50                      	push rax
 16603 0000D27F BF08000000              	mov rdi, 8 * 1	; extended env
 16604 0000D284 E82B560000              	call malloc
 16605 0000D289 488B7D10                	mov rdi, ENV
 16606 0000D28D BE00000000              	mov rsi, 0
 16607 0000D292 BA01000000              	mov rdx, 1
 16608                                  .L_lambda_simple_env_loop_4f96:	; ext_env[i + 1] <-- env[i]
 16609 0000D297 4883FE00                	cmp rsi, 0
 16610 0000D29B 7410                    	je .L_lambda_simple_env_end_4f96
 16611 0000D29D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 16612 0000D2A1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16613 0000D2A5 48FFC6                  	inc rsi
 16614 0000D2A8 48FFC2                  	inc rdx
 16615 0000D2AB EBEA                    	jmp .L_lambda_simple_env_loop_4f96
 16616                                  .L_lambda_simple_env_end_4f96:
 16617 0000D2AD 5B                      	pop rbx
 16618 0000D2AE BE00000000              	mov rsi, 0
 16619                                  .L_lambda_simple_params_loop_4f96:	; copy params
 16620 0000D2B3 4883FE00                	cmp rsi, 0
 16621 0000D2B7 740E                    	je .L_lambda_simple_params_end_4f96
 16622 0000D2B9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16623 0000D2BE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16624 0000D2C2 48FFC6                  	inc rsi
 16625 0000D2C5 EBEC                    	jmp .L_lambda_simple_params_loop_4f96
 16626                                  .L_lambda_simple_params_end_4f96:
 16627 0000D2C7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16628 0000D2CA 4889C3                  	mov rbx, rax
 16629 0000D2CD 58                      	pop rax
 16630 0000D2CE C60005                  	mov byte [rax], T_closure
 16631 0000D2D1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16632 0000D2D5 48C74009[E2D20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f96
 16633 0000D2DD E913010000              	jmp .L_lambda_simple_end_4f96
 16634                                  .L_lambda_simple_code_4f96:	; lambda-simple body
 16635 0000D2E2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16636 0000D2E8 740B                    	je .L_lambda_simple_arity_check_ok_4f96
 16637 0000D2EA FF742410                	push qword [rsp + 8 * 2]
 16638 0000D2EE 6A01                    	push 1
 16639 0000D2F0 E978550000              	jmp L_error_incorrect_arity_simple
 16640                                  .L_lambda_simple_arity_check_ok_4f96:
 16641 0000D2F5 C8000000                	enter 0, 0
 16642 0000D2F9 488B0425[70030000]      	mov rax, qword [free_var_110]
 16643 0000D301 50                      	push rax
 16644 0000D302 488B0425[60030000]      	mov rax, qword [free_var_108]
 16645 0000D30A 50                      	push rax
 16646 0000D30B 6A02                    	push 2
 16647 0000D30D 488B4520                	mov rax, PARAM(0)
 16648                                  	assert_closure(rax)
    42 0000D311 803805              <1>  cmp byte [%1], %2
    43 0000D314 0F851A6E0000        <1>  jne L_error_incorrect_type
 16649 0000D31A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16650 0000D31E 53                      	push rbx
 16651 0000D31F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16652 0000D323 FFD3                    	call rbx
 16653 0000D325 48890425[E0030000]      	mov qword [free_var_124], rax
 16654 0000D32D 48B8-                   	mov rax, sob_void
 16654 0000D32F [0000000000000000] 
 16655                                  
 16656 0000D337 488B0425[A8030000]      	mov rax, qword [free_var_117]
 16657 0000D33F 50                      	push rax
 16658 0000D340 488B0425[98030000]      	mov rax, qword [free_var_115]
 16659 0000D348 50                      	push rax
 16660 0000D349 6A02                    	push 2
 16661 0000D34B 488B4520                	mov rax, PARAM(0)
 16662                                  	assert_closure(rax)
    42 0000D34F 803805              <1>  cmp byte [%1], %2
    43 0000D352 0F85DC6D0000        <1>  jne L_error_incorrect_type
 16663 0000D358 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16664 0000D35C 53                      	push rbx
 16665 0000D35D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16666 0000D361 FFD3                    	call rbx
 16667 0000D363 48890425[08040000]      	mov qword [free_var_129], rax
 16668 0000D36B 48B8-                   	mov rax, sob_void
 16668 0000D36D [0000000000000000] 
 16669                                  
 16670 0000D375 488B0425[70030000]      	mov rax, qword [free_var_110]
 16671 0000D37D 50                      	push rax
 16672 0000D37E 488B0425[78030000]      	mov rax, qword [free_var_111]
 16673 0000D386 50                      	push rax
 16674 0000D387 6A02                    	push 2
 16675 0000D389 488B4520                	mov rax, PARAM(0)
 16676                                  	assert_closure(rax)
    42 0000D38D 803805              <1>  cmp byte [%1], %2
    43 0000D390 0F859E6D0000        <1>  jne L_error_incorrect_type
 16677 0000D396 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16678 0000D39A 53                      	push rbx
 16679 0000D39B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16680 0000D39F FFD3                    	call rbx
 16681 0000D3A1 48890425[00040000]      	mov qword [free_var_128], rax
 16682 0000D3A9 48B8-                   	mov rax, sob_void
 16682 0000D3AB [0000000000000000] 
 16683                                  
 16684 0000D3B3 488B0425[A8030000]      	mov rax, qword [free_var_117]
 16685 0000D3BB 50                      	push rax
 16686 0000D3BC 488B0425[B0030000]      	mov rax, qword [free_var_118]
 16687 0000D3C4 50                      	push rax
 16688 0000D3C5 6A02                    	push 2
 16689 0000D3C7 488B4520                	mov rax, PARAM(0)
 16690                                  	assert_closure(rax)
    42 0000D3CB 803805              <1>  cmp byte [%1], %2
    43 0000D3CE 0F85606D0000        <1>  jne L_error_incorrect_type
 16691 0000D3D4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16692 0000D3D8 53                      	push rbx
 16693 0000D3D9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16694 0000D3DD FFD3                    	call rbx
 16695 0000D3DF 48890425[28040000]      	mov qword [free_var_133], rax
 16696 0000D3E7 48B8-                   	mov rax, sob_void
 16696 0000D3E9 [0000000000000000] 
 16697 0000D3F1 C9                      	leave
 16698 0000D3F2 C21800                  	ret 8 * (2 + 1)
 16699                                  .L_lambda_simple_end_4f96:	; new closure is in rax
 16700                                  	assert_closure(rax)
    42 0000D3F5 803805              <1>  cmp byte [%1], %2
    43 0000D3F8 0F85366D0000        <1>  jne L_error_incorrect_type
 16701 0000D3FE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16702 0000D402 53                      	push rbx
 16703 0000D403 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16704 0000D407 FFD3                    	call rbx
 16705                                  
 16706 0000D409 4889C7                  	mov rdi, rax
 16707 0000D40C E8B4540000              	call print_sexpr_if_not_void
 16708                                  
 16709 0000D411 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16710 0000D416 E899540000              	call malloc
 16711 0000D41B 50                      	push rax
 16712 0000D41C BF00000000              	mov rdi, 8 * 0	; new rib
 16713 0000D421 E88E540000              	call malloc
 16714 0000D426 50                      	push rax
 16715 0000D427 BF08000000              	mov rdi, 8 * 1	; extended env
 16716 0000D42C E883540000              	call malloc
 16717 0000D431 488B7D10                	mov rdi, ENV
 16718 0000D435 BE00000000              	mov rsi, 0
 16719 0000D43A BA01000000              	mov rdx, 1
 16720                                  .L_lambda_simple_env_loop_4f97:	; ext_env[i + 1] <-- env[i]
 16721 0000D43F 4883FE00                	cmp rsi, 0
 16722 0000D443 7410                    	je .L_lambda_simple_env_end_4f97
 16723 0000D445 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 16724 0000D449 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16725 0000D44D 48FFC6                  	inc rsi
 16726 0000D450 48FFC2                  	inc rdx
 16727 0000D453 EBEA                    	jmp .L_lambda_simple_env_loop_4f97
 16728                                  .L_lambda_simple_env_end_4f97:
 16729 0000D455 5B                      	pop rbx
 16730 0000D456 BE00000000              	mov rsi, 0
 16731                                  .L_lambda_simple_params_loop_4f97:	; copy params
 16732 0000D45B 4883FE00                	cmp rsi, 0
 16733 0000D45F 740E                    	je .L_lambda_simple_params_end_4f97
 16734 0000D461 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16735 0000D466 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16736 0000D46A 48FFC6                  	inc rsi
 16737 0000D46D EBEC                    	jmp .L_lambda_simple_params_loop_4f97
 16738                                  .L_lambda_simple_params_end_4f97:
 16739 0000D46F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16740 0000D472 4889C3                  	mov rbx, rax
 16741 0000D475 58                      	pop rax
 16742 0000D476 C60005                  	mov byte [rax], T_closure
 16743 0000D479 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16744 0000D47D 48C74009[8AD40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f97
 16745 0000D485 E9A70D0000              	jmp .L_lambda_simple_end_4f97
 16746                                  .L_lambda_simple_code_4f97:	; lambda-simple body
 16747 0000D48A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16748 0000D490 740B                    	je .L_lambda_simple_arity_check_ok_4f97
 16749 0000D492 FF742410                	push qword [rsp + 8 * 2]
 16750 0000D496 6A02                    	push 2
 16751 0000D498 E9D0530000              	jmp L_error_incorrect_arity_simple
 16752                                  .L_lambda_simple_arity_check_ok_4f97:
 16753 0000D49D C8000000                	enter 0, 0
 16754 0000D4A1 488D0425[17000000]      	lea rax, [23 + L_constants]
 16755 0000D4A9 50                      	push rax
 16756 0000D4AA 6A01                    	push 1
 16757 0000D4AC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16758 0000D4B1 E8FE530000              	call malloc
 16759 0000D4B6 50                      	push rax
 16760 0000D4B7 BF10000000              	mov rdi, 8 * 2	; new rib
 16761 0000D4BC E8F3530000              	call malloc
 16762 0000D4C1 50                      	push rax
 16763 0000D4C2 BF10000000              	mov rdi, 8 * 2	; extended env
 16764 0000D4C7 E8E8530000              	call malloc
 16765 0000D4CC 488B7D10                	mov rdi, ENV
 16766 0000D4D0 BE00000000              	mov rsi, 0
 16767 0000D4D5 BA01000000              	mov rdx, 1
 16768                                  .L_lambda_simple_env_loop_4f98:	; ext_env[i + 1] <-- env[i]
 16769 0000D4DA 4883FE01                	cmp rsi, 1
 16770 0000D4DE 7410                    	je .L_lambda_simple_env_end_4f98
 16771 0000D4E0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 16772 0000D4E4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16773 0000D4E8 48FFC6                  	inc rsi
 16774 0000D4EB 48FFC2                  	inc rdx
 16775 0000D4EE EBEA                    	jmp .L_lambda_simple_env_loop_4f98
 16776                                  .L_lambda_simple_env_end_4f98:
 16777 0000D4F0 5B                      	pop rbx
 16778 0000D4F1 BE00000000              	mov rsi, 0
 16779                                  .L_lambda_simple_params_loop_4f98:	; copy params
 16780 0000D4F6 4883FE02                	cmp rsi, 2
 16781 0000D4FA 740E                    	je .L_lambda_simple_params_end_4f98
 16782 0000D4FC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16783 0000D501 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16784 0000D505 48FFC6                  	inc rsi
 16785 0000D508 EBEC                    	jmp .L_lambda_simple_params_loop_4f98
 16786                                  .L_lambda_simple_params_end_4f98:
 16787 0000D50A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16788 0000D50D 4889C3                  	mov rbx, rax
 16789 0000D510 58                      	pop rax
 16790 0000D511 C60005                  	mov byte [rax], T_closure
 16791 0000D514 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16792 0000D518 48C74009[25D50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f98
 16793 0000D520 E99A0C0000              	jmp .L_lambda_simple_end_4f98
 16794                                  .L_lambda_simple_code_4f98:	; lambda-simple body
 16795 0000D525 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16796 0000D52B 740B                    	je .L_lambda_simple_arity_check_ok_4f98
 16797 0000D52D FF742410                	push qword [rsp + 8 * 2]
 16798 0000D531 6A01                    	push 1
 16799 0000D533 E935530000              	jmp L_error_incorrect_arity_simple
 16800                                  .L_lambda_simple_arity_check_ok_4f98:
 16801 0000D538 C8000000                	enter 0, 0
 16802 0000D53C BF11000000              	mov qword rdi, (1 + 8 + 8)
 16803 0000D541 E86E530000              	call malloc
 16804 0000D546 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 16805 0000D54A 48B8-                   	mov rax, sob_void
 16805 0000D54C [0000000000000000] 
 16806                                  
 16807 0000D554 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16808 0000D559 E856530000              	call malloc
 16809 0000D55E 50                      	push rax
 16810 0000D55F BF08000000              	mov rdi, 8 * 1	; new rib
 16811 0000D564 E84B530000              	call malloc
 16812 0000D569 50                      	push rax
 16813 0000D56A BF18000000              	mov rdi, 8 * 3	; extended env
 16814 0000D56F E840530000              	call malloc
 16815 0000D574 488B7D10                	mov rdi, ENV
 16816 0000D578 BE00000000              	mov rsi, 0
 16817 0000D57D BA01000000              	mov rdx, 1
 16818                                  .L_lambda_simple_env_loop_4f99:	; ext_env[i + 1] <-- env[i]
 16819 0000D582 4883FE02                	cmp rsi, 2
 16820 0000D586 7410                    	je .L_lambda_simple_env_end_4f99
 16821 0000D588 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 16822 0000D58C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16823 0000D590 48FFC6                  	inc rsi
 16824 0000D593 48FFC2                  	inc rdx
 16825 0000D596 EBEA                    	jmp .L_lambda_simple_env_loop_4f99
 16826                                  .L_lambda_simple_env_end_4f99:
 16827 0000D598 5B                      	pop rbx
 16828 0000D599 BE00000000              	mov rsi, 0
 16829                                  .L_lambda_simple_params_loop_4f99:	; copy params
 16830 0000D59E 4883FE01                	cmp rsi, 1
 16831 0000D5A2 740E                    	je .L_lambda_simple_params_end_4f99
 16832 0000D5A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16833 0000D5A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16834 0000D5AD 48FFC6                  	inc rsi
 16835 0000D5B0 EBEC                    	jmp .L_lambda_simple_params_loop_4f99
 16836                                  .L_lambda_simple_params_end_4f99:
 16837 0000D5B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16838 0000D5B5 4889C3                  	mov rbx, rax
 16839 0000D5B8 58                      	pop rax
 16840 0000D5B9 C60005                  	mov byte [rax], T_closure
 16841 0000D5BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16842 0000D5C0 48C74009[CDD50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f99
 16843 0000D5C8 E954020000              	jmp .L_lambda_simple_end_4f99
 16844                                  .L_lambda_simple_code_4f99:	; lambda-simple body
 16845 0000D5CD 48837C241005            	cmp qword [rsp + 8 * 2], 5
 16846 0000D5D3 740B                    	je .L_lambda_simple_arity_check_ok_4f99
 16847 0000D5D5 FF742410                	push qword [rsp + 8 * 2]
 16848 0000D5D9 6A05                    	push 5
 16849 0000D5DB E98D520000              	jmp L_error_incorrect_arity_simple
 16850                                  .L_lambda_simple_arity_check_ok_4f99:
 16851 0000D5E0 C8000000                	enter 0, 0
 16852 0000D5E4 488B4530                	mov rax, PARAM(2)
 16853 0000D5E8 50                      	push rax
 16854 0000D5E9 488B4520                	mov rax, PARAM(0)
 16855 0000D5ED 50                      	push rax
 16856 0000D5EE 6A02                    	push 2
 16857 0000D5F0 488B0425[50030000]      	mov rax, qword [free_var_106]
 16858                                  	assert_closure(rax)
    42 0000D5F8 803805              <1>  cmp byte [%1], %2
    43 0000D5FB 0F85336B0000        <1>  jne L_error_incorrect_type
 16859 0000D601 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16860 0000D605 53                      	push rbx
 16861 0000D606 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16862 0000D60A FFD3                    	call rbx
 16863 0000D60C 483D[02000000]          	cmp rax, sob_boolean_false
 16864 0000D612 0F8505020000            	jne .L_or_end_061b
 16865 0000D618 488B4520                	mov rax, PARAM(0)
 16866 0000D61C 50                      	push rax
 16867 0000D61D 488B4538                	mov rax, PARAM(3)
 16868 0000D621 50                      	push rax
 16869 0000D622 6A02                    	push 2
 16870 0000D624 488B0425[78010000]      	mov rax, qword [free_var_47]
 16871                                  	assert_closure(rax)
    42 0000D62C 803805              <1>  cmp byte [%1], %2
    43 0000D62F 0F85FF6A0000        <1>  jne L_error_incorrect_type
 16872 0000D635 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16873 0000D639 53                      	push rbx
 16874 0000D63A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16875 0000D63E FFD3                    	call rbx
 16876 0000D640 50                      	push rax
 16877 0000D641 488B4520                	mov rax, PARAM(0)
 16878 0000D645 50                      	push rax
 16879 0000D646 488B4528                	mov rax, PARAM(1)
 16880 0000D64A 50                      	push rax
 16881 0000D64B 6A02                    	push 2
 16882 0000D64D 488B0425[78010000]      	mov rax, qword [free_var_47]
 16883                                  	assert_closure(rax)
    42 0000D655 803805              <1>  cmp byte [%1], %2
    43 0000D658 0F85D66A0000        <1>  jne L_error_incorrect_type
 16884 0000D65E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16885 0000D662 53                      	push rbx
 16886 0000D663 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16887 0000D667 FFD3                    	call rbx
 16888 0000D669 50                      	push rax
 16889 0000D66A 6A02                    	push 2
 16890 0000D66C 488B4510                	mov rax, qword [rbp + 8*2]
 16891 0000D670 488B4008                	mov rax, qword [rax + 8*1]
 16892 0000D674 488B00                  	mov rax, qword [rax + 8*0]
 16893                                  	assert_closure(rax)
    42 0000D677 803805              <1>  cmp byte [%1], %2
    43 0000D67A 0F85B46A0000        <1>  jne L_error_incorrect_type
 16894 0000D680 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16895 0000D684 53                      	push rbx
 16896 0000D685 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16897 0000D689 FFD3                    	call rbx
 16898 0000D68B 483D[02000000]          	cmp rax, sob_boolean_false
 16899 0000D691 0F8586010000            	jne .L_or_end_061b
 16900 0000D697 488B4530                	mov rax, PARAM(2)
 16901 0000D69B 50                      	push rax
 16902 0000D69C 488B4520                	mov rax, PARAM(0)
 16903 0000D6A0 50                      	push rax
 16904 0000D6A1 6A02                    	push 2
 16905 0000D6A3 488B0425[30030000]      	mov rax, qword [free_var_102]
 16906                                  	assert_closure(rax)
    42 0000D6AB 803805              <1>  cmp byte [%1], %2
    43 0000D6AE 0F85806A0000        <1>  jne L_error_incorrect_type
 16907 0000D6B4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16908 0000D6B8 53                      	push rbx
 16909 0000D6B9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16910 0000D6BD FFD3                    	call rbx
 16911 0000D6BF 483D[02000000]          	cmp rax, sob_boolean_false
 16912 0000D6C5 0F844A010000            	je .L_if_else_56ba
 16913 0000D6CB 488B4520                	mov rax, PARAM(0)
 16914 0000D6CF 50                      	push rax
 16915 0000D6D0 488B4538                	mov rax, PARAM(3)
 16916 0000D6D4 50                      	push rax
 16917 0000D6D5 6A02                    	push 2
 16918 0000D6D7 488B0425[78010000]      	mov rax, qword [free_var_47]
 16919                                  	assert_closure(rax)
    42 0000D6DF 803805              <1>  cmp byte [%1], %2
    43 0000D6E2 0F854C6A0000        <1>  jne L_error_incorrect_type
 16920 0000D6E8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16921 0000D6EC 53                      	push rbx
 16922 0000D6ED 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16923 0000D6F1 FFD3                    	call rbx
 16924 0000D6F3 50                      	push rax
 16925 0000D6F4 488B4520                	mov rax, PARAM(0)
 16926 0000D6F8 50                      	push rax
 16927 0000D6F9 488B4528                	mov rax, PARAM(1)
 16928 0000D6FD 50                      	push rax
 16929 0000D6FE 6A02                    	push 2
 16930 0000D700 488B0425[78010000]      	mov rax, qword [free_var_47]
 16931                                  	assert_closure(rax)
    42 0000D708 803805              <1>  cmp byte [%1], %2
    43 0000D70B 0F85236A0000        <1>  jne L_error_incorrect_type
 16932 0000D711 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16933 0000D715 53                      	push rbx
 16934 0000D716 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16935 0000D71A FFD3                    	call rbx
 16936 0000D71C 50                      	push rax
 16937 0000D71D 6A02                    	push 2
 16938 0000D71F 488B4510                	mov rax, qword [rbp + 8*2]
 16939 0000D723 488B4008                	mov rax, qword [rax + 8*1]
 16940 0000D727 488B4008                	mov rax, qword [rax + 8*1]
 16941                                  	assert_closure(rax)
    42 0000D72B 803805              <1>  cmp byte [%1], %2
    43 0000D72E 0F85006A0000        <1>  jne L_error_incorrect_type
 16942 0000D734 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16943 0000D738 53                      	push rbx
 16944 0000D739 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16945 0000D73D FFD3                    	call rbx
 16946 0000D73F 483D[02000000]          	cmp rax, sob_boolean_false
 16947 0000D745 0F84C0000000            	je .L_if_else_56bb
 16948 0000D74B 488B4540                	mov rax, PARAM(4)
 16949 0000D74F 50                      	push rax
 16950 0000D750 488B4538                	mov rax, PARAM(3)
 16951 0000D754 50                      	push rax
 16952 0000D755 488B4530                	mov rax, PARAM(2)
 16953 0000D759 50                      	push rax
 16954 0000D75A 488B4528                	mov rax, PARAM(1)
 16955 0000D75E 50                      	push rax
 16956 0000D75F 488D0425[80000000]      	lea rax, [128 + L_constants]
 16957 0000D767 50                      	push rax
 16958 0000D768 488B4520                	mov rax, PARAM(0)
 16959 0000D76C 50                      	push rax
 16960 0000D76D 6A02                    	push 2
 16961 0000D76F 488B0425[08030000]      	mov rax, qword [free_var_97]
 16962                                  	assert_closure(rax)
    42 0000D777 803805              <1>  cmp byte [%1], %2
    43 0000D77A 0F85B4690000        <1>  jne L_error_incorrect_type
 16963 0000D780 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16964 0000D784 53                      	push rbx
 16965 0000D785 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16966 0000D789 FFD3                    	call rbx
 16967 0000D78B 50                      	push rax
 16968 0000D78C 6A05                    	push 5
 16969 0000D78E 488B4510                	mov rax, qword [rbp + 8*2]
 16970 0000D792 488B00                  	mov rax, qword [rax + 8*0]
 16971 0000D795 488B00                  	mov rax, qword [rax + 8*0]
 16972 0000D798 488B00                  	mov rax, qword [rax]
 16973                                  	assert_closure(rax)
    42 0000D79B 803805              <1>  cmp byte [%1], %2
    43 0000D79E 0F8590690000        <1>  jne L_error_incorrect_type
 16974 0000D7A4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16975 0000D7A8 53                      	push rbx
 16976 0000D7A9 FF7508                  	push RET_ADDR
 16977 0000D7AC 488B7D18                	mov rdi, COUNT
 16978 0000D7B0 4883C703                	add rdi, 3
 16979 0000D7B4 48C1E703                	shl rdi, 3
 16980 0000D7B8 4801EF                  	add rdi, rbp
 16981 0000D7BB 488B6D00                	mov rbp, OLD_RDP
 16982 0000D7BF BE00000000              	mov rsi, 0
 16983                                  .L_tc_recycle_frame_loop_5d26:	 ; start recycle frame loop
 16984 0000D7C4 4883FE08                	cmp rsi, 8
 16985 0000D7C8 7427                    	je .L_tc_recycle_frame_done_5d26
 16986 0000D7CA B907000000              	mov rcx, 7
 16987 0000D7CF 4829F1                  	sub rcx, rsi
 16988 0000D7D2 48C1E103                	shl rcx, 3
 16989 0000D7D6 4801E1                  	add rcx, rsp ; rcx is the address to move
 16990 0000D7D9 4889F3                  	mov rbx, rsi
 16991 0000D7DC 48C1E303                	shl rbx, 3
 16992 0000D7E0 48F7DB                  	neg rbx
 16993 0000D7E3 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16994 0000D7E6 488B09                  	mov rcx, [rcx]
 16995 0000D7E9 48890B                  	mov [rbx], rcx
 16996 0000D7EC 48FFC6                  	inc rsi
 16997 0000D7EF EBD3                    	jmp .L_tc_recycle_frame_loop_5d26
 16998                                  .L_tc_recycle_frame_done_5d26:	 ; end recycle frame loop
 16999 0000D7F1 BB07000000              	mov rbx, 7
 17000 0000D7F6 48C1E303                	shl rbx, 3
 17001 0000D7FA 48F7DB                  	neg rbx
 17002 0000D7FD 4801FB                  	add rbx, rdi
 17003 0000D800 4889DC                  	mov rsp, rbx
 17004 0000D803 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17005 0000D807 FFE3                    	jmp rbx
 17006 0000D809 EB08                    	jmp .L_if_end_56bb
 17007                                  	.L_if_else_56bb:
 17008 0000D80B 488D0425[02000000]      	lea rax, [2 + L_constants]
 17009                                  	.L_if_end_56bb:
 17010 0000D813 EB08                    	jmp .L_if_end_56ba
 17011                                  	.L_if_else_56ba:
 17012 0000D815 488D0425[02000000]      	lea rax, [2 + L_constants]
 17013                                  	.L_if_end_56ba:
 17014                                  .L_or_end_061b:
 17015 0000D81D C9                      	leave
 17016 0000D81E C23800                  	ret 8 * (2 + 5)
 17017                                  .L_lambda_simple_end_4f99:	; new closure is in rax
 17018 0000D821 50                      	push rax
 17019 0000D822 488B4520                	mov rax, PARAM(0)
 17020 0000D826 8F00                    	pop qword [rax]
 17021 0000D828 48B8-                   	mov rax, sob_void
 17021 0000D82A [0000000000000000] 
 17022                                  
 17023 0000D832 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17024 0000D837 E878500000              	call malloc
 17025 0000D83C 50                      	push rax
 17026 0000D83D BF08000000              	mov rdi, 8 * 1	; new rib
 17027 0000D842 E86D500000              	call malloc
 17028 0000D847 50                      	push rax
 17029 0000D848 BF18000000              	mov rdi, 8 * 3	; extended env
 17030 0000D84D E862500000              	call malloc
 17031 0000D852 488B7D10                	mov rdi, ENV
 17032 0000D856 BE00000000              	mov rsi, 0
 17033 0000D85B BA01000000              	mov rdx, 1
 17034                                  .L_lambda_simple_env_loop_4f9a:	; ext_env[i + 1] <-- env[i]
 17035 0000D860 4883FE02                	cmp rsi, 2
 17036 0000D864 7410                    	je .L_lambda_simple_env_end_4f9a
 17037 0000D866 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 17038 0000D86A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17039 0000D86E 48FFC6                  	inc rsi
 17040 0000D871 48FFC2                  	inc rdx
 17041 0000D874 EBEA                    	jmp .L_lambda_simple_env_loop_4f9a
 17042                                  .L_lambda_simple_env_end_4f9a:
 17043 0000D876 5B                      	pop rbx
 17044 0000D877 BE00000000              	mov rsi, 0
 17045                                  .L_lambda_simple_params_loop_4f9a:	; copy params
 17046 0000D87C 4883FE01                	cmp rsi, 1
 17047 0000D880 740E                    	je .L_lambda_simple_params_end_4f9a
 17048 0000D882 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17049 0000D887 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17050 0000D88B 48FFC6                  	inc rsi
 17051 0000D88E EBEC                    	jmp .L_lambda_simple_params_loop_4f9a
 17052                                  .L_lambda_simple_params_end_4f9a:
 17053 0000D890 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17054 0000D893 4889C3                  	mov rbx, rax
 17055 0000D896 58                      	pop rax
 17056 0000D897 C60005                  	mov byte [rax], T_closure
 17057 0000D89A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17058 0000D89E 48C74009[ABD80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f9a
 17059 0000D8A6 E9F0020000              	jmp .L_lambda_simple_end_4f9a
 17060                                  .L_lambda_simple_code_4f9a:	; lambda-simple body
 17061 0000D8AB 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17062 0000D8B1 740B                    	je .L_lambda_simple_arity_check_ok_4f9a
 17063 0000D8B3 FF742410                	push qword [rsp + 8 * 2]
 17064 0000D8B7 6A02                    	push 2
 17065 0000D8B9 E9AF4F0000              	jmp L_error_incorrect_arity_simple
 17066                                  .L_lambda_simple_arity_check_ok_4f9a:
 17067 0000D8BE C8000000                	enter 0, 0
 17068 0000D8C2 488B4528                	mov rax, PARAM(1)
 17069 0000D8C6 50                      	push rax
 17070 0000D8C7 6A01                    	push 1
 17071 0000D8C9 488B0425[90000000]      	mov rax, qword [free_var_18]
 17072                                  	assert_closure(rax)
    42 0000D8D1 803805              <1>  cmp byte [%1], %2
    43 0000D8D4 0F855A680000        <1>  jne L_error_incorrect_type
 17073 0000D8DA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17074 0000D8DE 53                      	push rbx
 17075 0000D8DF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17076 0000D8E3 FFD3                    	call rbx
 17077 0000D8E5 50                      	push rax
 17078 0000D8E6 488B4520                	mov rax, PARAM(0)
 17079 0000D8EA 50                      	push rax
 17080 0000D8EB 6A01                    	push 1
 17081 0000D8ED 488B0425[90000000]      	mov rax, qword [free_var_18]
 17082                                  	assert_closure(rax)
    42 0000D8F5 803805              <1>  cmp byte [%1], %2
    43 0000D8F8 0F8536680000        <1>  jne L_error_incorrect_type
 17083 0000D8FE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17084 0000D902 53                      	push rbx
 17085 0000D903 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17086 0000D907 FFD3                    	call rbx
 17087 0000D909 50                      	push rax
 17088 0000D90A 6A02                    	push 2
 17089 0000D90C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17090 0000D911 E89E4F0000              	call malloc
 17091 0000D916 50                      	push rax
 17092 0000D917 BF10000000              	mov rdi, 8 * 2	; new rib
 17093 0000D91C E8934F0000              	call malloc
 17094 0000D921 50                      	push rax
 17095 0000D922 BF20000000              	mov rdi, 8 * 4	; extended env
 17096 0000D927 E8884F0000              	call malloc
 17097 0000D92C 488B7D10                	mov rdi, ENV
 17098 0000D930 BE00000000              	mov rsi, 0
 17099 0000D935 BA01000000              	mov rdx, 1
 17100                                  .L_lambda_simple_env_loop_4f9b:	; ext_env[i + 1] <-- env[i]
 17101 0000D93A 4883FE03                	cmp rsi, 3
 17102 0000D93E 7410                    	je .L_lambda_simple_env_end_4f9b
 17103 0000D940 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 17104 0000D944 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17105 0000D948 48FFC6                  	inc rsi
 17106 0000D94B 48FFC2                  	inc rdx
 17107 0000D94E EBEA                    	jmp .L_lambda_simple_env_loop_4f9b
 17108                                  .L_lambda_simple_env_end_4f9b:
 17109 0000D950 5B                      	pop rbx
 17110 0000D951 BE00000000              	mov rsi, 0
 17111                                  .L_lambda_simple_params_loop_4f9b:	; copy params
 17112 0000D956 4883FE02                	cmp rsi, 2
 17113 0000D95A 740E                    	je .L_lambda_simple_params_end_4f9b
 17114 0000D95C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17115 0000D961 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17116 0000D965 48FFC6                  	inc rsi
 17117 0000D968 EBEC                    	jmp .L_lambda_simple_params_loop_4f9b
 17118                                  .L_lambda_simple_params_end_4f9b:
 17119 0000D96A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17120 0000D96D 4889C3                  	mov rbx, rax
 17121 0000D970 58                      	pop rax
 17122 0000D971 C60005                  	mov byte [rax], T_closure
 17123 0000D974 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17124 0000D978 48C74009[85D90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f9b
 17125 0000D980 E9A4010000              	jmp .L_lambda_simple_end_4f9b
 17126                                  .L_lambda_simple_code_4f9b:	; lambda-simple body
 17127 0000D985 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17128 0000D98B 740B                    	je .L_lambda_simple_arity_check_ok_4f9b
 17129 0000D98D FF742410                	push qword [rsp + 8 * 2]
 17130 0000D991 6A02                    	push 2
 17131 0000D993 E9D54E0000              	jmp L_error_incorrect_arity_simple
 17132                                  .L_lambda_simple_arity_check_ok_4f9b:
 17133 0000D998 C8000000                	enter 0, 0
 17134 0000D99C 488B4528                	mov rax, PARAM(1)
 17135 0000D9A0 50                      	push rax
 17136 0000D9A1 488B4520                	mov rax, PARAM(0)
 17137 0000D9A5 50                      	push rax
 17138 0000D9A6 6A02                    	push 2
 17139 0000D9A8 488B0425[38030000]      	mov rax, qword [free_var_103]
 17140                                  	assert_closure(rax)
    42 0000D9B0 803805              <1>  cmp byte [%1], %2
    43 0000D9B3 0F857B670000        <1>  jne L_error_incorrect_type
 17141 0000D9B9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17142 0000D9BD 53                      	push rbx
 17143 0000D9BE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17144 0000D9C2 FFD3                    	call rbx
 17145 0000D9C4 483D[02000000]          	cmp rax, sob_boolean_false
 17146 0000D9CA 0F84AD000000            	je .L_if_else_56bc
 17147 0000D9D0 488B4528                	mov rax, PARAM(1)
 17148 0000D9D4 50                      	push rax
 17149 0000D9D5 488B4510                	mov rax, qword [rbp + 8*2]
 17150 0000D9D9 488B00                  	mov rax, qword [rax + 8*0]
 17151 0000D9DC 488B4008                	mov rax, qword [rax + 8*1]
 17152 0000D9E0 50                      	push rax
 17153 0000D9E1 488B4520                	mov rax, PARAM(0)
 17154 0000D9E5 50                      	push rax
 17155 0000D9E6 488B4510                	mov rax, qword [rbp + 8*2]
 17156 0000D9EA 488B00                  	mov rax, qword [rax + 8*0]
 17157 0000D9ED 488B00                  	mov rax, qword [rax + 8*0]
 17158 0000D9F0 50                      	push rax
 17159 0000D9F1 488D0425[20000000]      	lea rax, [32 + L_constants]
 17160 0000D9F9 50                      	push rax
 17161 0000D9FA 6A05                    	push 5
 17162 0000D9FC 488B4510                	mov rax, qword [rbp + 8*2]
 17163 0000DA00 488B4008                	mov rax, qword [rax + 8*1]
 17164 0000DA04 488B00                  	mov rax, qword [rax + 8*0]
 17165 0000DA07 488B00                  	mov rax, qword [rax]
 17166                                  	assert_closure(rax)
    42 0000DA0A 803805              <1>  cmp byte [%1], %2
    43 0000DA0D 0F8521670000        <1>  jne L_error_incorrect_type
 17167 0000DA13 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17168 0000DA17 53                      	push rbx
 17169 0000DA18 FF7508                  	push RET_ADDR
 17170 0000DA1B 488B7D18                	mov rdi, COUNT
 17171 0000DA1F 4883C703                	add rdi, 3
 17172 0000DA23 48C1E703                	shl rdi, 3
 17173 0000DA27 4801EF                  	add rdi, rbp
 17174 0000DA2A 488B6D00                	mov rbp, OLD_RDP
 17175 0000DA2E BE00000000              	mov rsi, 0
 17176                                  .L_tc_recycle_frame_loop_5d29:	 ; start recycle frame loop
 17177 0000DA33 4883FE08                	cmp rsi, 8
 17178 0000DA37 7427                    	je .L_tc_recycle_frame_done_5d29
 17179 0000DA39 B907000000              	mov rcx, 7
 17180 0000DA3E 4829F1                  	sub rcx, rsi
 17181 0000DA41 48C1E103                	shl rcx, 3
 17182 0000DA45 4801E1                  	add rcx, rsp ; rcx is the address to move
 17183 0000DA48 4889F3                  	mov rbx, rsi
 17184 0000DA4B 48C1E303                	shl rbx, 3
 17185 0000DA4F 48F7DB                  	neg rbx
 17186 0000DA52 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17187 0000DA55 488B09                  	mov rcx, [rcx]
 17188 0000DA58 48890B                  	mov [rbx], rcx
 17189 0000DA5B 48FFC6                  	inc rsi
 17190 0000DA5E EBD3                    	jmp .L_tc_recycle_frame_loop_5d29
 17191                                  .L_tc_recycle_frame_done_5d29:	 ; end recycle frame loop
 17192 0000DA60 BB07000000              	mov rbx, 7
 17193 0000DA65 48C1E303                	shl rbx, 3
 17194 0000DA69 48F7DB                  	neg rbx
 17195 0000DA6C 4801FB                  	add rbx, rdi
 17196 0000DA6F 4889DC                  	mov rsp, rbx
 17197 0000DA72 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17198 0000DA76 FFE3                    	jmp rbx
 17199 0000DA78 E9A8000000              	jmp .L_if_end_56bc
 17200                                  	.L_if_else_56bc:
 17201 0000DA7D 488B4520                	mov rax, PARAM(0)
 17202 0000DA81 50                      	push rax
 17203 0000DA82 488B4510                	mov rax, qword [rbp + 8*2]
 17204 0000DA86 488B00                  	mov rax, qword [rax + 8*0]
 17205 0000DA89 488B00                  	mov rax, qword [rax + 8*0]
 17206 0000DA8C 50                      	push rax
 17207 0000DA8D 488B4528                	mov rax, PARAM(1)
 17208 0000DA91 50                      	push rax
 17209 0000DA92 488B4510                	mov rax, qword [rbp + 8*2]
 17210 0000DA96 488B00                  	mov rax, qword [rax + 8*0]
 17211 0000DA99 488B4008                	mov rax, qword [rax + 8*1]
 17212 0000DA9D 50                      	push rax
 17213 0000DA9E 488D0425[20000000]      	lea rax, [32 + L_constants]
 17214 0000DAA6 50                      	push rax
 17215 0000DAA7 6A05                    	push 5
 17216 0000DAA9 488B4510                	mov rax, qword [rbp + 8*2]
 17217 0000DAAD 488B4008                	mov rax, qword [rax + 8*1]
 17218 0000DAB1 488B00                  	mov rax, qword [rax + 8*0]
 17219 0000DAB4 488B00                  	mov rax, qword [rax]
 17220                                  	assert_closure(rax)
    42 0000DAB7 803805              <1>  cmp byte [%1], %2
    43 0000DABA 0F8574660000        <1>  jne L_error_incorrect_type
 17221 0000DAC0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17222 0000DAC4 53                      	push rbx
 17223 0000DAC5 FF7508                  	push RET_ADDR
 17224 0000DAC8 488B7D18                	mov rdi, COUNT
 17225 0000DACC 4883C703                	add rdi, 3
 17226 0000DAD0 48C1E703                	shl rdi, 3
 17227 0000DAD4 4801EF                  	add rdi, rbp
 17228 0000DAD7 488B6D00                	mov rbp, OLD_RDP
 17229 0000DADB BE00000000              	mov rsi, 0
 17230                                  .L_tc_recycle_frame_loop_5d2a:	 ; start recycle frame loop
 17231 0000DAE0 4883FE08                	cmp rsi, 8
 17232 0000DAE4 7427                    	je .L_tc_recycle_frame_done_5d2a
 17233 0000DAE6 B907000000              	mov rcx, 7
 17234 0000DAEB 4829F1                  	sub rcx, rsi
 17235 0000DAEE 48C1E103                	shl rcx, 3
 17236 0000DAF2 4801E1                  	add rcx, rsp ; rcx is the address to move
 17237 0000DAF5 4889F3                  	mov rbx, rsi
 17238 0000DAF8 48C1E303                	shl rbx, 3
 17239 0000DAFC 48F7DB                  	neg rbx
 17240 0000DAFF 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17241 0000DB02 488B09                  	mov rcx, [rcx]
 17242 0000DB05 48890B                  	mov [rbx], rcx
 17243 0000DB08 48FFC6                  	inc rsi
 17244 0000DB0B EBD3                    	jmp .L_tc_recycle_frame_loop_5d2a
 17245                                  .L_tc_recycle_frame_done_5d2a:	 ; end recycle frame loop
 17246 0000DB0D BB07000000              	mov rbx, 7
 17247 0000DB12 48C1E303                	shl rbx, 3
 17248 0000DB16 48F7DB                  	neg rbx
 17249 0000DB19 4801FB                  	add rbx, rdi
 17250 0000DB1C 4889DC                  	mov rsp, rbx
 17251 0000DB1F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17252 0000DB23 FFE3                    	jmp rbx
 17253                                  	.L_if_end_56bc:
 17254 0000DB25 C9                      	leave
 17255 0000DB26 C22000                  	ret 8 * (2 + 2)
 17256                                  .L_lambda_simple_end_4f9b:	; new closure is in rax
 17257                                  	assert_closure(rax)
    42 0000DB29 803805              <1>  cmp byte [%1], %2
    43 0000DB2C 0F8502660000        <1>  jne L_error_incorrect_type
 17258 0000DB32 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17259 0000DB36 53                      	push rbx
 17260 0000DB37 FF7508                  	push RET_ADDR
 17261 0000DB3A 488B7D18                	mov rdi, COUNT
 17262 0000DB3E 4883C703                	add rdi, 3
 17263 0000DB42 48C1E703                	shl rdi, 3
 17264 0000DB46 4801EF                  	add rdi, rbp
 17265 0000DB49 488B6D00                	mov rbp, OLD_RDP
 17266 0000DB4D BE00000000              	mov rsi, 0
 17267                                  .L_tc_recycle_frame_loop_5d28:	 ; start recycle frame loop
 17268 0000DB52 4883FE05                	cmp rsi, 5
 17269 0000DB56 7427                    	je .L_tc_recycle_frame_done_5d28
 17270 0000DB58 B904000000              	mov rcx, 4
 17271 0000DB5D 4829F1                  	sub rcx, rsi
 17272 0000DB60 48C1E103                	shl rcx, 3
 17273 0000DB64 4801E1                  	add rcx, rsp ; rcx is the address to move
 17274 0000DB67 4889F3                  	mov rbx, rsi
 17275 0000DB6A 48C1E303                	shl rbx, 3
 17276 0000DB6E 48F7DB                  	neg rbx
 17277 0000DB71 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17278 0000DB74 488B09                  	mov rcx, [rcx]
 17279 0000DB77 48890B                  	mov [rbx], rcx
 17280 0000DB7A 48FFC6                  	inc rsi
 17281 0000DB7D EBD3                    	jmp .L_tc_recycle_frame_loop_5d28
 17282                                  .L_tc_recycle_frame_done_5d28:	 ; end recycle frame loop
 17283 0000DB7F BB04000000              	mov rbx, 4
 17284 0000DB84 48C1E303                	shl rbx, 3
 17285 0000DB88 48F7DB                  	neg rbx
 17286 0000DB8B 4801FB                  	add rbx, rdi
 17287 0000DB8E 4889DC                  	mov rsp, rbx
 17288 0000DB91 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17289 0000DB95 FFE3                    	jmp rbx
 17290 0000DB97 C9                      	leave
 17291 0000DB98 C22000                  	ret 8 * (2 + 2)
 17292                                  .L_lambda_simple_end_4f9a:	; new closure is in rax
 17293 0000DB9B 50                      	push rax
 17294 0000DB9C 6A01                    	push 1
 17295 0000DB9E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17296 0000DBA3 E80C4D0000              	call malloc
 17297 0000DBA8 50                      	push rax
 17298 0000DBA9 BF08000000              	mov rdi, 8 * 1	; new rib
 17299 0000DBAE E8014D0000              	call malloc
 17300 0000DBB3 50                      	push rax
 17301 0000DBB4 BF18000000              	mov rdi, 8 * 3	; extended env
 17302 0000DBB9 E8F64C0000              	call malloc
 17303 0000DBBE 488B7D10                	mov rdi, ENV
 17304 0000DBC2 BE00000000              	mov rsi, 0
 17305 0000DBC7 BA01000000              	mov rdx, 1
 17306                                  .L_lambda_simple_env_loop_4f9c:	; ext_env[i + 1] <-- env[i]
 17307 0000DBCC 4883FE02                	cmp rsi, 2
 17308 0000DBD0 7410                    	je .L_lambda_simple_env_end_4f9c
 17309 0000DBD2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 17310 0000DBD6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17311 0000DBDA 48FFC6                  	inc rsi
 17312 0000DBDD 48FFC2                  	inc rdx
 17313 0000DBE0 EBEA                    	jmp .L_lambda_simple_env_loop_4f9c
 17314                                  .L_lambda_simple_env_end_4f9c:
 17315 0000DBE2 5B                      	pop rbx
 17316 0000DBE3 BE00000000              	mov rsi, 0
 17317                                  .L_lambda_simple_params_loop_4f9c:	; copy params
 17318 0000DBE8 4883FE01                	cmp rsi, 1
 17319 0000DBEC 740E                    	je .L_lambda_simple_params_end_4f9c
 17320 0000DBEE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17321 0000DBF3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17322 0000DBF7 48FFC6                  	inc rsi
 17323 0000DBFA EBEC                    	jmp .L_lambda_simple_params_loop_4f9c
 17324                                  .L_lambda_simple_params_end_4f9c:
 17325 0000DBFC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17326 0000DBFF 4889C3                  	mov rbx, rax
 17327 0000DC02 58                      	pop rax
 17328 0000DC03 C60005                  	mov byte [rax], T_closure
 17329 0000DC06 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17330 0000DC0A 48C74009[17DC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f9c
 17331 0000DC12 E936050000              	jmp .L_lambda_simple_end_4f9c
 17332                                  .L_lambda_simple_code_4f9c:	; lambda-simple body
 17333 0000DC17 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17334 0000DC1D 740B                    	je .L_lambda_simple_arity_check_ok_4f9c
 17335 0000DC1F FF742410                	push qword [rsp + 8 * 2]
 17336 0000DC23 6A01                    	push 1
 17337 0000DC25 E9434C0000              	jmp L_error_incorrect_arity_simple
 17338                                  .L_lambda_simple_arity_check_ok_4f9c:
 17339 0000DC2A C8000000                	enter 0, 0
 17340 0000DC2E 488D0425[17000000]      	lea rax, [23 + L_constants]
 17341 0000DC36 50                      	push rax
 17342 0000DC37 6A01                    	push 1
 17343 0000DC39 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17344 0000DC3E E8714C0000              	call malloc
 17345 0000DC43 50                      	push rax
 17346 0000DC44 BF08000000              	mov rdi, 8 * 1	; new rib
 17347 0000DC49 E8664C0000              	call malloc
 17348 0000DC4E 50                      	push rax
 17349 0000DC4F BF20000000              	mov rdi, 8 * 4	; extended env
 17350 0000DC54 E85B4C0000              	call malloc
 17351 0000DC59 488B7D10                	mov rdi, ENV
 17352 0000DC5D BE00000000              	mov rsi, 0
 17353 0000DC62 BA01000000              	mov rdx, 1
 17354                                  .L_lambda_simple_env_loop_4f9d:	; ext_env[i + 1] <-- env[i]
 17355 0000DC67 4883FE03                	cmp rsi, 3
 17356 0000DC6B 7410                    	je .L_lambda_simple_env_end_4f9d
 17357 0000DC6D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 17358 0000DC71 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17359 0000DC75 48FFC6                  	inc rsi
 17360 0000DC78 48FFC2                  	inc rdx
 17361 0000DC7B EBEA                    	jmp .L_lambda_simple_env_loop_4f9d
 17362                                  .L_lambda_simple_env_end_4f9d:
 17363 0000DC7D 5B                      	pop rbx
 17364 0000DC7E BE00000000              	mov rsi, 0
 17365                                  .L_lambda_simple_params_loop_4f9d:	; copy params
 17366 0000DC83 4883FE01                	cmp rsi, 1
 17367 0000DC87 740E                    	je .L_lambda_simple_params_end_4f9d
 17368 0000DC89 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17369 0000DC8E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17370 0000DC92 48FFC6                  	inc rsi
 17371 0000DC95 EBEC                    	jmp .L_lambda_simple_params_loop_4f9d
 17372                                  .L_lambda_simple_params_end_4f9d:
 17373 0000DC97 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17374 0000DC9A 4889C3                  	mov rbx, rax
 17375 0000DC9D 58                      	pop rax
 17376 0000DC9E C60005                  	mov byte [rax], T_closure
 17377 0000DCA1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17378 0000DCA5 48C74009[B2DC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f9d
 17379 0000DCAD E929040000              	jmp .L_lambda_simple_end_4f9d
 17380                                  .L_lambda_simple_code_4f9d:	; lambda-simple body
 17381 0000DCB2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17382 0000DCB8 740B                    	je .L_lambda_simple_arity_check_ok_4f9d
 17383 0000DCBA FF742410                	push qword [rsp + 8 * 2]
 17384 0000DCBE 6A01                    	push 1
 17385 0000DCC0 E9A84B0000              	jmp L_error_incorrect_arity_simple
 17386                                  .L_lambda_simple_arity_check_ok_4f9d:
 17387 0000DCC5 C8000000                	enter 0, 0
 17388 0000DCC9 BF11000000              	mov qword rdi, (1 + 8 + 8)
 17389 0000DCCE E8E14B0000              	call malloc
 17390 0000DCD3 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 17391 0000DCD7 48B8-                   	mov rax, sob_void
 17391 0000DCD9 [0000000000000000] 
 17392                                  
 17393 0000DCE1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17394 0000DCE6 E8C94B0000              	call malloc
 17395 0000DCEB 50                      	push rax
 17396 0000DCEC BF08000000              	mov rdi, 8 * 1	; new rib
 17397 0000DCF1 E8BE4B0000              	call malloc
 17398 0000DCF6 50                      	push rax
 17399 0000DCF7 BF28000000              	mov rdi, 8 * 5	; extended env
 17400 0000DCFC E8B34B0000              	call malloc
 17401 0000DD01 488B7D10                	mov rdi, ENV
 17402 0000DD05 BE00000000              	mov rsi, 0
 17403 0000DD0A BA01000000              	mov rdx, 1
 17404                                  .L_lambda_simple_env_loop_4f9e:	; ext_env[i + 1] <-- env[i]
 17405 0000DD0F 4883FE04                	cmp rsi, 4
 17406 0000DD13 7410                    	je .L_lambda_simple_env_end_4f9e
 17407 0000DD15 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 17408 0000DD19 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17409 0000DD1D 48FFC6                  	inc rsi
 17410 0000DD20 48FFC2                  	inc rdx
 17411 0000DD23 EBEA                    	jmp .L_lambda_simple_env_loop_4f9e
 17412                                  .L_lambda_simple_env_end_4f9e:
 17413 0000DD25 5B                      	pop rbx
 17414 0000DD26 BE00000000              	mov rsi, 0
 17415                                  .L_lambda_simple_params_loop_4f9e:	; copy params
 17416 0000DD2B 4883FE01                	cmp rsi, 1
 17417 0000DD2F 740E                    	je .L_lambda_simple_params_end_4f9e
 17418 0000DD31 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17419 0000DD36 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17420 0000DD3A 48FFC6                  	inc rsi
 17421 0000DD3D EBEC                    	jmp .L_lambda_simple_params_loop_4f9e
 17422                                  .L_lambda_simple_params_end_4f9e:
 17423 0000DD3F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17424 0000DD42 4889C3                  	mov rbx, rax
 17425 0000DD45 58                      	pop rax
 17426 0000DD46 C60005                  	mov byte [rax], T_closure
 17427 0000DD49 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17428 0000DD4D 48C74009[5ADD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f9e
 17429 0000DD55 E96F010000              	jmp .L_lambda_simple_end_4f9e
 17430                                  .L_lambda_simple_code_4f9e:	; lambda-simple body
 17431 0000DD5A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17432 0000DD60 740B                    	je .L_lambda_simple_arity_check_ok_4f9e
 17433 0000DD62 FF742410                	push qword [rsp + 8 * 2]
 17434 0000DD66 6A02                    	push 2
 17435 0000DD68 E9004B0000              	jmp L_error_incorrect_arity_simple
 17436                                  .L_lambda_simple_arity_check_ok_4f9e:
 17437 0000DD6D C8000000                	enter 0, 0
 17438 0000DD71 488B4528                	mov rax, PARAM(1)
 17439 0000DD75 50                      	push rax
 17440 0000DD76 6A01                    	push 1
 17441 0000DD78 488B0425[00000000]      	mov rax, qword [free_var_0]
 17442                                  	assert_closure(rax)
    42 0000DD80 803805              <1>  cmp byte [%1], %2
    43 0000DD83 0F85AB630000        <1>  jne L_error_incorrect_type
 17443 0000DD89 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17444 0000DD8D 53                      	push rbx
 17445 0000DD8E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17446 0000DD92 FFD3                    	call rbx
 17447 0000DD94 483D[02000000]          	cmp rax, sob_boolean_false
 17448 0000DD9A 0F8525010000            	jne .L_or_end_061c
 17449 0000DDA0 488B4528                	mov rax, PARAM(1)
 17450 0000DDA4 50                      	push rax
 17451 0000DDA5 6A01                    	push 1
 17452 0000DDA7 488B0425[80000000]      	mov rax, qword [free_var_16]
 17453                                  	assert_closure(rax)
    42 0000DDAF 803805              <1>  cmp byte [%1], %2
    43 0000DDB2 0F857C630000        <1>  jne L_error_incorrect_type
 17454 0000DDB8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17455 0000DDBC 53                      	push rbx
 17456 0000DDBD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17457 0000DDC1 FFD3                    	call rbx
 17458 0000DDC3 50                      	push rax
 17459 0000DDC4 488B4520                	mov rax, PARAM(0)
 17460 0000DDC8 50                      	push rax
 17461 0000DDC9 6A02                    	push 2
 17462 0000DDCB 488B4510                	mov rax, qword [rbp + 8*2]
 17463 0000DDCF 488B4008                	mov rax, qword [rax + 8*1]
 17464 0000DDD3 488B00                  	mov rax, qword [rax + 8*0]
 17465                                  	assert_closure(rax)
    42 0000DDD6 803805              <1>  cmp byte [%1], %2
    43 0000DDD9 0F8555630000        <1>  jne L_error_incorrect_type
 17466 0000DDDF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17467 0000DDE3 53                      	push rbx
 17468 0000DDE4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17469 0000DDE8 FFD3                    	call rbx
 17470 0000DDEA 483D[02000000]          	cmp rax, sob_boolean_false
 17471 0000DDF0 0F84C7000000            	je .L_if_else_56bd
 17472 0000DDF6 488B4528                	mov rax, PARAM(1)
 17473 0000DDFA 50                      	push rax
 17474 0000DDFB 6A01                    	push 1
 17475 0000DDFD 488B0425[88000000]      	mov rax, qword [free_var_17]
 17476                                  	assert_closure(rax)
    42 0000DE05 803805              <1>  cmp byte [%1], %2
    43 0000DE08 0F8526630000        <1>  jne L_error_incorrect_type
 17477 0000DE0E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17478 0000DE12 53                      	push rbx
 17479 0000DE13 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17480 0000DE17 FFD3                    	call rbx
 17481 0000DE19 50                      	push rax
 17482 0000DE1A 488B4528                	mov rax, PARAM(1)
 17483 0000DE1E 50                      	push rax
 17484 0000DE1F 6A01                    	push 1
 17485 0000DE21 488B0425[80000000]      	mov rax, qword [free_var_16]
 17486                                  	assert_closure(rax)
    42 0000DE29 803805              <1>  cmp byte [%1], %2
    43 0000DE2C 0F8502630000        <1>  jne L_error_incorrect_type
 17487 0000DE32 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17488 0000DE36 53                      	push rbx
 17489 0000DE37 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17490 0000DE3B FFD3                    	call rbx
 17491 0000DE3D 50                      	push rax
 17492 0000DE3E 6A02                    	push 2
 17493 0000DE40 488B4510                	mov rax, qword [rbp + 8*2]
 17494 0000DE44 488B00                  	mov rax, qword [rax + 8*0]
 17495 0000DE47 488B00                  	mov rax, qword [rax + 8*0]
 17496 0000DE4A 488B00                  	mov rax, qword [rax]
 17497                                  	assert_closure(rax)
    42 0000DE4D 803805              <1>  cmp byte [%1], %2
    43 0000DE50 0F85DE620000        <1>  jne L_error_incorrect_type
 17498 0000DE56 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17499 0000DE5A 53                      	push rbx
 17500 0000DE5B FF7508                  	push RET_ADDR
 17501 0000DE5E 488B7D18                	mov rdi, COUNT
 17502 0000DE62 4883C703                	add rdi, 3
 17503 0000DE66 48C1E703                	shl rdi, 3
 17504 0000DE6A 4801EF                  	add rdi, rbp
 17505 0000DE6D 488B6D00                	mov rbp, OLD_RDP
 17506 0000DE71 BE00000000              	mov rsi, 0
 17507                                  .L_tc_recycle_frame_loop_5d2c:	 ; start recycle frame loop
 17508 0000DE76 4883FE05                	cmp rsi, 5
 17509 0000DE7A 7427                    	je .L_tc_recycle_frame_done_5d2c
 17510 0000DE7C B904000000              	mov rcx, 4
 17511 0000DE81 4829F1                  	sub rcx, rsi
 17512 0000DE84 48C1E103                	shl rcx, 3
 17513 0000DE88 4801E1                  	add rcx, rsp ; rcx is the address to move
 17514 0000DE8B 4889F3                  	mov rbx, rsi
 17515 0000DE8E 48C1E303                	shl rbx, 3
 17516 0000DE92 48F7DB                  	neg rbx
 17517 0000DE95 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17518 0000DE98 488B09                  	mov rcx, [rcx]
 17519 0000DE9B 48890B                  	mov [rbx], rcx
 17520 0000DE9E 48FFC6                  	inc rsi
 17521 0000DEA1 EBD3                    	jmp .L_tc_recycle_frame_loop_5d2c
 17522                                  .L_tc_recycle_frame_done_5d2c:	 ; end recycle frame loop
 17523 0000DEA3 BB04000000              	mov rbx, 4
 17524 0000DEA8 48C1E303                	shl rbx, 3
 17525 0000DEAC 48F7DB                  	neg rbx
 17526 0000DEAF 4801FB                  	add rbx, rdi
 17527 0000DEB2 4889DC                  	mov rsp, rbx
 17528 0000DEB5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17529 0000DEB9 FFE3                    	jmp rbx
 17530 0000DEBB EB08                    	jmp .L_if_end_56bd
 17531                                  	.L_if_else_56bd:
 17532 0000DEBD 488D0425[02000000]      	lea rax, [2 + L_constants]
 17533                                  	.L_if_end_56bd:
 17534                                  .L_or_end_061c:
 17535 0000DEC5 C9                      	leave
 17536 0000DEC6 C22000                  	ret 8 * (2 + 2)
 17537                                  .L_lambda_simple_end_4f9e:	; new closure is in rax
 17538 0000DEC9 50                      	push rax
 17539 0000DECA 488B4520                	mov rax, PARAM(0)
 17540 0000DECE 8F00                    	pop qword [rax]
 17541 0000DED0 48B8-                   	mov rax, sob_void
 17541 0000DED2 [0000000000000000] 
 17542                                  
 17543 0000DEDA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17544 0000DEDF E8D0490000              	call malloc
 17545 0000DEE4 50                      	push rax
 17546 0000DEE5 BF08000000              	mov rdi, 8 * 1	; new rib
 17547 0000DEEA E8C5490000              	call malloc
 17548 0000DEEF 50                      	push rax
 17549 0000DEF0 BF28000000              	mov rdi, 8 * 5	; extended env
 17550 0000DEF5 E8BA490000              	call malloc
 17551 0000DEFA 488B7D10                	mov rdi, ENV
 17552 0000DEFE BE00000000              	mov rsi, 0
 17553 0000DF03 BA01000000              	mov rdx, 1
 17554                                  .L_lambda_opt_env_loop_0c97:	; ext_env[i + 1] <-- env[i]
 17555 0000DF08 4883FE04                	cmp rsi, 4
 17556 0000DF0C 7410                    	je .L_lambda_opt_env_end_0c97
 17557 0000DF0E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17558 0000DF12 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17559 0000DF16 48FFC6                  	inc rsi
 17560 0000DF19 48FFC2                  	inc rdx
 17561 0000DF1C EBEA                    	jmp .L_lambda_opt_env_loop_0c97
 17562                                  .L_lambda_opt_env_end_0c97:
 17563 0000DF1E 5B                      	pop rbx
 17564 0000DF1F BE00000000              	mov rsi, 0
 17565                                  .L_lambda_opt_params_loop_0c97:	; copy params
 17566 0000DF24 4883FE01                	cmp rsi, 1
 17567 0000DF28 740E                    	je .L_lambda_opt_params_end_0c97
 17568 0000DF2A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17569 0000DF2F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17570 0000DF33 48FFC6                  	inc rsi
 17571 0000DF36 EBEC                    	jmp .L_lambda_opt_params_loop_0c97
 17572                                  .L_lambda_opt_params_end_0c97:
 17573 0000DF38 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17574 0000DF3B 4889C3                  	mov rbx, rax
 17575 0000DF3E 58                      	pop rax
 17576 0000DF3F C60005                  	mov byte [rax], T_closure
 17577 0000DF42 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17578 0000DF46 48C74009[53DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c97
 17579 0000DF4E E984010000              	jmp .L_lambda_opt_end_0c97
 17580                                  .L_lambda_opt_code_0c97:	; lambda-opt body
 17581 0000DF53 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 17582 0000DF58 4889FB                  	mov rbx, rdi
 17583 0000DF5B 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 17584 0000DF5F 4883FB00                	cmp rbx, 0
 17585 0000DF63 7F45                    	jg .L_lambda_opt_arity_check_more_0c97
 17586                                  .L_lambda_opt_arity_check_exact_0c97:	 ; if params in opt is exact
 17587 0000DF65 4883EC08                	sub rsp, 8
 17588 0000DF69 BE00000000              	mov rsi, 0 ; index
 17589                                  .L_lambda_opt_stack_enlarge_loop_0c97:	 ; stack loop enlarge start
 17590 0000DF6E 4883FE04                	cmp rsi, 4
 17591 0000DF72 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c97
 17592 0000DF74 4889F7                  	mov rdi, rsi
 17593 0000DF77 48FFC7                  	inc rdi
 17594 0000DF7A 48C1E703                	shl rdi, 3
 17595 0000DF7E 4801E7                  	add rdi, rsp
 17596 0000DF81 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 17597 0000DF84 4883EB08                	sub rbx, 8
 17598 0000DF88 488B3F                  	mov rdi, [rdi]
 17599 0000DF8B 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 17600 0000DF8E 48FFC6                  	inc rsi
 17601 0000DF91 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c97
 17602                                  .L_lambda_opt_stack_enlarge_loop_exit_0c97:	 ; end of stack enlarge loop
 17603 0000DF93 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 17603 0000DF98 [01000000]         
 17604 0000DF9C 48C744241002000000      	mov qword [rsp + 2*8], 2
 17605 0000DFA5 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c97
 17606                                  .L_lambda_opt_arity_check_more_0c97:	 ; if params in opt is more
 17607 0000DFAA 48B8-                   	mov rax, sob_nil
 17607 0000DFAC [0100000000000000] 
 17608 0000DFB4 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 17609 0000DFB7 48FFCE                  	dec rsi
 17610                                  .L_lambda_opt_list_create_loop_0c97:	; start of list creation loop
 17611 0000DFBA 4883FEFF                	cmp rsi, -1
 17612 0000DFBE 7422                    	je .L_lambda_opt_list_create_loop_exit_0c97
 17613 0000DFC0 488D4E04                	lea rcx, [rsi + (3 + 1)]
 17614 0000DFC4 48C1E103                	shl rcx, 3
 17615 0000DFC8 4801E1                  	add rcx, rsp
 17616 0000DFCB 488B09                  	mov rcx, [rcx]
 17617 0000DFCE 56                      	push rsi ; save params
 17618 0000DFCF 53                      	push rbx
 17619                                  
 17620 0000DFD0 50                      	push rax ; cdr
 17621 0000DFD1 51                      	push rcx ; car
 17622 0000DFD2 6A02                    	push qword 2 ; push num of args
 17623 0000DFD4 6A01                    	push qword 1 ; push garbage as env
 17624 0000DFD6 E860520000              	call L_code_ptr_cons
 17625                                  
 17626 0000DFDB 5B                      	pop rbx ; restore params
 17627 0000DFDC 5E                      	pop rsi
 17628 0000DFDD 48FFCE                  	dec rsi
 17629 0000DFE0 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c97
 17630                                  .L_lambda_opt_list_create_loop_exit_0c97:	; end of list creation loop
 17631 0000DFE2 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 17632 0000DFE7 4883C302                	add rbx, 2
 17633 0000DFEB 4889DF                  	mov rdi, rbx
 17634 0000DFEE 48C1E703                	shl rdi,3
 17635 0000DFF2 4801E7                  	add rdi, rsp
 17636 0000DFF5 488907                  	mov [rdi], rax
 17637 0000DFF8 BE00000000              	mov rsi, 0 ;index
 17638                                  .L_lambda_opt_stack_shrink_loop_0c97:	; start of stack shrink loop
 17639 0000DFFD 4883FE04                	cmp rsi, 4
 17640 0000E001 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c97
 17641 0000E003 BF03000000              	mov rdi, 3
 17642 0000E008 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 17643 0000E00B 4889D9                  	mov rcx, rbx
 17644 0000E00E 4829F1                  	sub rcx, rsi
 17645 0000E011 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 17646 0000E014 4889FA                  	mov rdx, rdi
 17647 0000E017 48C1E203                	shl rdx, 3
 17648 0000E01B 4801E2                  	add rdx, rsp
 17649 0000E01E 48C1E103                	shl rcx, 3
 17650 0000E022 4801E1                  	add rcx, rsp
 17651 0000E025 488B12                  	mov rdx, [rdx]
 17652 0000E028 488911                  	mov [rcx], rdx
 17653 0000E02B 48FFC6                  	inc rsi
 17654 0000E02E EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c97
 17655                                  .L_lambda_opt_stack_shrink_loop_exit_0c97:	; end of stack shrink loop
 17656 0000E030 4883EB02                	sub rbx, 2 ; rbx has number of args
 17657 0000E034 4883EB02                	sub rbx, 2
 17658 0000E038 48C1E303                	shl rbx, 3
 17659 0000E03C 4801DC                  	add rsp, rbx
 17660 0000E03F 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 17661                                  .L_lambda_opt_stack_adjusted_0c97:
 17662 0000E048 C8000000                	enter 0, 0
 17663 0000E04C 488B4528                	mov rax, PARAM(1)
 17664 0000E050 50                      	push rax
 17665 0000E051 488B4520                	mov rax, PARAM(0)
 17666 0000E055 50                      	push rax
 17667 0000E056 6A02                    	push 2
 17668 0000E058 488B4510                	mov rax, qword [rbp + 8*2]
 17669 0000E05C 488B00                  	mov rax, qword [rax + 8*0]
 17670 0000E05F 488B00                  	mov rax, qword [rax + 8*0]
 17671 0000E062 488B00                  	mov rax, qword [rax]
 17672                                  	assert_closure(rax)
    42 0000E065 803805              <1>  cmp byte [%1], %2
    43 0000E068 0F85C6600000        <1>  jne L_error_incorrect_type
 17673 0000E06E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17674 0000E072 53                      	push rbx
 17675 0000E073 FF7508                  	push RET_ADDR
 17676 0000E076 488B7D18                	mov rdi, COUNT
 17677 0000E07A 4883C703                	add rdi, 3
 17678 0000E07E 48C1E703                	shl rdi, 3
 17679 0000E082 4801EF                  	add rdi, rbp
 17680 0000E085 488B6D00                	mov rbp, OLD_RDP
 17681 0000E089 BE00000000              	mov rsi, 0
 17682                                  .L_tc_recycle_frame_loop_5d2d:	 ; start recycle frame loop
 17683 0000E08E 4883FE05                	cmp rsi, 5
 17684 0000E092 7427                    	je .L_tc_recycle_frame_done_5d2d
 17685 0000E094 B904000000              	mov rcx, 4
 17686 0000E099 4829F1                  	sub rcx, rsi
 17687 0000E09C 48C1E103                	shl rcx, 3
 17688 0000E0A0 4801E1                  	add rcx, rsp ; rcx is the address to move
 17689 0000E0A3 4889F3                  	mov rbx, rsi
 17690 0000E0A6 48C1E303                	shl rbx, 3
 17691 0000E0AA 48F7DB                  	neg rbx
 17692 0000E0AD 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17693 0000E0B0 488B09                  	mov rcx, [rcx]
 17694 0000E0B3 48890B                  	mov [rbx], rcx
 17695 0000E0B6 48FFC6                  	inc rsi
 17696 0000E0B9 EBD3                    	jmp .L_tc_recycle_frame_loop_5d2d
 17697                                  .L_tc_recycle_frame_done_5d2d:	 ; end recycle frame loop
 17698 0000E0BB BB04000000              	mov rbx, 4
 17699 0000E0C0 48C1E303                	shl rbx, 3
 17700 0000E0C4 48F7DB                  	neg rbx
 17701 0000E0C7 4801FB                  	add rbx, rdi
 17702 0000E0CA 4889DC                  	mov rsp, rbx
 17703 0000E0CD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17704 0000E0D1 FFE3                    	jmp rbx
 17705 0000E0D3 C9                      	leave
 17706 0000E0D4 C22000                  	ret AND_KILL_FRAME(2)
 17707                                  .L_lambda_opt_end_0c97:	; new closure is in rax
 17708 0000E0D7 C9                      	leave
 17709 0000E0D8 C21800                  	ret 8 * (2 + 1)
 17710                                  .L_lambda_simple_end_4f9d:	; new closure is in rax
 17711                                  	assert_closure(rax)
    42 0000E0DB 803805              <1>  cmp byte [%1], %2
    43 0000E0DE 0F8550600000        <1>  jne L_error_incorrect_type
 17712 0000E0E4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17713 0000E0E8 53                      	push rbx
 17714 0000E0E9 FF7508                  	push RET_ADDR
 17715 0000E0EC 488B7D18                	mov rdi, COUNT
 17716 0000E0F0 4883C703                	add rdi, 3
 17717 0000E0F4 48C1E703                	shl rdi, 3
 17718 0000E0F8 4801EF                  	add rdi, rbp
 17719 0000E0FB 488B6D00                	mov rbp, OLD_RDP
 17720 0000E0FF BE00000000              	mov rsi, 0
 17721                                  .L_tc_recycle_frame_loop_5d2b:	 ; start recycle frame loop
 17722 0000E104 4883FE04                	cmp rsi, 4
 17723 0000E108 7427                    	je .L_tc_recycle_frame_done_5d2b
 17724 0000E10A B903000000              	mov rcx, 3
 17725 0000E10F 4829F1                  	sub rcx, rsi
 17726 0000E112 48C1E103                	shl rcx, 3
 17727 0000E116 4801E1                  	add rcx, rsp ; rcx is the address to move
 17728 0000E119 4889F3                  	mov rbx, rsi
 17729 0000E11C 48C1E303                	shl rbx, 3
 17730 0000E120 48F7DB                  	neg rbx
 17731 0000E123 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17732 0000E126 488B09                  	mov rcx, [rcx]
 17733 0000E129 48890B                  	mov [rbx], rcx
 17734 0000E12C 48FFC6                  	inc rsi
 17735 0000E12F EBD3                    	jmp .L_tc_recycle_frame_loop_5d2b
 17736                                  .L_tc_recycle_frame_done_5d2b:	 ; end recycle frame loop
 17737 0000E131 BB03000000              	mov rbx, 3
 17738 0000E136 48C1E303                	shl rbx, 3
 17739 0000E13A 48F7DB                  	neg rbx
 17740 0000E13D 4801FB                  	add rbx, rdi
 17741 0000E140 4889DC                  	mov rsp, rbx
 17742 0000E143 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17743 0000E147 FFE3                    	jmp rbx
 17744 0000E149 C9                      	leave
 17745 0000E14A C21800                  	ret 8 * (2 + 1)
 17746                                  .L_lambda_simple_end_4f9c:	; new closure is in rax
 17747                                  	assert_closure(rax)
    42 0000E14D 803805              <1>  cmp byte [%1], %2
    43 0000E150 0F85DE5F0000        <1>  jne L_error_incorrect_type
 17748 0000E156 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17749 0000E15A 53                      	push rbx
 17750 0000E15B FF7508                  	push RET_ADDR
 17751 0000E15E 488B7D18                	mov rdi, COUNT
 17752 0000E162 4883C703                	add rdi, 3
 17753 0000E166 48C1E703                	shl rdi, 3
 17754 0000E16A 4801EF                  	add rdi, rbp
 17755 0000E16D 488B6D00                	mov rbp, OLD_RDP
 17756 0000E171 BE00000000              	mov rsi, 0
 17757                                  .L_tc_recycle_frame_loop_5d27:	 ; start recycle frame loop
 17758 0000E176 4883FE04                	cmp rsi, 4
 17759 0000E17A 7427                    	je .L_tc_recycle_frame_done_5d27
 17760 0000E17C B903000000              	mov rcx, 3
 17761 0000E181 4829F1                  	sub rcx, rsi
 17762 0000E184 48C1E103                	shl rcx, 3
 17763 0000E188 4801E1                  	add rcx, rsp ; rcx is the address to move
 17764 0000E18B 4889F3                  	mov rbx, rsi
 17765 0000E18E 48C1E303                	shl rbx, 3
 17766 0000E192 48F7DB                  	neg rbx
 17767 0000E195 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17768 0000E198 488B09                  	mov rcx, [rcx]
 17769 0000E19B 48890B                  	mov [rbx], rcx
 17770 0000E19E 48FFC6                  	inc rsi
 17771 0000E1A1 EBD3                    	jmp .L_tc_recycle_frame_loop_5d27
 17772                                  .L_tc_recycle_frame_done_5d27:	 ; end recycle frame loop
 17773 0000E1A3 BB03000000              	mov rbx, 3
 17774 0000E1A8 48C1E303                	shl rbx, 3
 17775 0000E1AC 48F7DB                  	neg rbx
 17776 0000E1AF 4801FB                  	add rbx, rdi
 17777 0000E1B2 4889DC                  	mov rsp, rbx
 17778 0000E1B5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17779 0000E1B9 FFE3                    	jmp rbx
 17780 0000E1BB C9                      	leave
 17781 0000E1BC C21800                  	ret 8 * (2 + 1)
 17782                                  .L_lambda_simple_end_4f98:	; new closure is in rax
 17783                                  	assert_closure(rax)
    42 0000E1BF 803805              <1>  cmp byte [%1], %2
    43 0000E1C2 0F856C5F0000        <1>  jne L_error_incorrect_type
 17784 0000E1C8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17785 0000E1CC 53                      	push rbx
 17786 0000E1CD FF7508                  	push RET_ADDR
 17787 0000E1D0 488B7D18                	mov rdi, COUNT
 17788 0000E1D4 4883C703                	add rdi, 3
 17789 0000E1D8 48C1E703                	shl rdi, 3
 17790 0000E1DC 4801EF                  	add rdi, rbp
 17791 0000E1DF 488B6D00                	mov rbp, OLD_RDP
 17792 0000E1E3 BE00000000              	mov rsi, 0
 17793                                  .L_tc_recycle_frame_loop_5d25:	 ; start recycle frame loop
 17794 0000E1E8 4883FE04                	cmp rsi, 4
 17795 0000E1EC 7427                    	je .L_tc_recycle_frame_done_5d25
 17796 0000E1EE B903000000              	mov rcx, 3
 17797 0000E1F3 4829F1                  	sub rcx, rsi
 17798 0000E1F6 48C1E103                	shl rcx, 3
 17799 0000E1FA 4801E1                  	add rcx, rsp ; rcx is the address to move
 17800 0000E1FD 4889F3                  	mov rbx, rsi
 17801 0000E200 48C1E303                	shl rbx, 3
 17802 0000E204 48F7DB                  	neg rbx
 17803 0000E207 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17804 0000E20A 488B09                  	mov rcx, [rcx]
 17805 0000E20D 48890B                  	mov [rbx], rcx
 17806 0000E210 48FFC6                  	inc rsi
 17807 0000E213 EBD3                    	jmp .L_tc_recycle_frame_loop_5d25
 17808                                  .L_tc_recycle_frame_done_5d25:	 ; end recycle frame loop
 17809 0000E215 BB03000000              	mov rbx, 3
 17810 0000E21A 48C1E303                	shl rbx, 3
 17811 0000E21E 48F7DB                  	neg rbx
 17812 0000E221 4801FB                  	add rbx, rdi
 17813 0000E224 4889DC                  	mov rsp, rbx
 17814 0000E227 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17815 0000E22B FFE3                    	jmp rbx
 17816 0000E22D C9                      	leave
 17817 0000E22E C22000                  	ret 8 * (2 + 2)
 17818                                  .L_lambda_simple_end_4f97:	; new closure is in rax
 17819 0000E231 50                      	push rax
 17820 0000E232 6A01                    	push 1
 17821 0000E234 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17822 0000E239 E876460000              	call malloc
 17823 0000E23E 50                      	push rax
 17824 0000E23F BF00000000              	mov rdi, 8 * 0	; new rib
 17825 0000E244 E86B460000              	call malloc
 17826 0000E249 50                      	push rax
 17827 0000E24A BF08000000              	mov rdi, 8 * 1	; extended env
 17828 0000E24F E860460000              	call malloc
 17829 0000E254 488B7D10                	mov rdi, ENV
 17830 0000E258 BE00000000              	mov rsi, 0
 17831 0000E25D BA01000000              	mov rdx, 1
 17832                                  .L_lambda_simple_env_loop_4f9f:	; ext_env[i + 1] <-- env[i]
 17833 0000E262 4883FE00                	cmp rsi, 0
 17834 0000E266 7410                    	je .L_lambda_simple_env_end_4f9f
 17835 0000E268 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 17836 0000E26C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17837 0000E270 48FFC6                  	inc rsi
 17838 0000E273 48FFC2                  	inc rdx
 17839 0000E276 EBEA                    	jmp .L_lambda_simple_env_loop_4f9f
 17840                                  .L_lambda_simple_env_end_4f9f:
 17841 0000E278 5B                      	pop rbx
 17842 0000E279 BE00000000              	mov rsi, 0
 17843                                  .L_lambda_simple_params_loop_4f9f:	; copy params
 17844 0000E27E 4883FE00                	cmp rsi, 0
 17845 0000E282 740E                    	je .L_lambda_simple_params_end_4f9f
 17846 0000E284 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17847 0000E289 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17848 0000E28D 48FFC6                  	inc rsi
 17849 0000E290 EBEC                    	jmp .L_lambda_simple_params_loop_4f9f
 17850                                  .L_lambda_simple_params_end_4f9f:
 17851 0000E292 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17852 0000E295 4889C3                  	mov rbx, rax
 17853 0000E298 58                      	pop rax
 17854 0000E299 C60005                  	mov byte [rax], T_closure
 17855 0000E29C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17856 0000E2A0 48C74009[ADE20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f9f
 17857 0000E2A8 E913010000              	jmp .L_lambda_simple_end_4f9f
 17858                                  .L_lambda_simple_code_4f9f:	; lambda-simple body
 17859 0000E2AD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17860 0000E2B3 740B                    	je .L_lambda_simple_arity_check_ok_4f9f
 17861 0000E2B5 FF742410                	push qword [rsp + 8 * 2]
 17862 0000E2B9 6A01                    	push 1
 17863 0000E2BB E9AD450000              	jmp L_error_incorrect_arity_simple
 17864                                  .L_lambda_simple_arity_check_ok_4f9f:
 17865 0000E2C0 C8000000                	enter 0, 0
 17866 0000E2C4 488B0425[70030000]      	mov rax, qword [free_var_110]
 17867 0000E2CC 50                      	push rax
 17868 0000E2CD 488B0425[60030000]      	mov rax, qword [free_var_108]
 17869 0000E2D5 50                      	push rax
 17870 0000E2D6 6A02                    	push 2
 17871 0000E2D8 488B4520                	mov rax, PARAM(0)
 17872                                  	assert_closure(rax)
    42 0000E2DC 803805              <1>  cmp byte [%1], %2
    43 0000E2DF 0F854F5E0000        <1>  jne L_error_incorrect_type
 17873 0000E2E5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17874 0000E2E9 53                      	push rbx
 17875 0000E2EA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17876 0000E2EE FFD3                    	call rbx
 17877 0000E2F0 48890425[E8030000]      	mov qword [free_var_125], rax
 17878 0000E2F8 48B8-                   	mov rax, sob_void
 17878 0000E2FA [0000000000000000] 
 17879                                  
 17880 0000E302 488B0425[70030000]      	mov rax, qword [free_var_110]
 17881 0000E30A 50                      	push rax
 17882 0000E30B 488B0425[60030000]      	mov rax, qword [free_var_108]
 17883 0000E313 50                      	push rax
 17884 0000E314 6A02                    	push 2
 17885 0000E316 488B4520                	mov rax, PARAM(0)
 17886                                  	assert_closure(rax)
    42 0000E31A 803805              <1>  cmp byte [%1], %2
    43 0000E31D 0F85115E0000        <1>  jne L_error_incorrect_type
 17887 0000E323 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17888 0000E327 53                      	push rbx
 17889 0000E328 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17890 0000E32C FFD3                    	call rbx
 17891 0000E32E 48890425[10040000]      	mov qword [free_var_130], rax
 17892 0000E336 48B8-                   	mov rax, sob_void
 17892 0000E338 [0000000000000000] 
 17893                                  
 17894 0000E340 488B0425[70030000]      	mov rax, qword [free_var_110]
 17895 0000E348 50                      	push rax
 17896 0000E349 488B0425[78030000]      	mov rax, qword [free_var_111]
 17897 0000E351 50                      	push rax
 17898 0000E352 6A02                    	push 2
 17899 0000E354 488B4520                	mov rax, PARAM(0)
 17900                                  	assert_closure(rax)
    42 0000E358 803805              <1>  cmp byte [%1], %2
    43 0000E35B 0F85D35D0000        <1>  jne L_error_incorrect_type
 17901 0000E361 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17902 0000E365 53                      	push rbx
 17903 0000E366 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17904 0000E36A FFD3                    	call rbx
 17905 0000E36C 48890425[F8030000]      	mov qword [free_var_127], rax
 17906 0000E374 48B8-                   	mov rax, sob_void
 17906 0000E376 [0000000000000000] 
 17907                                  
 17908 0000E37E 488B0425[A8030000]      	mov rax, qword [free_var_117]
 17909 0000E386 50                      	push rax
 17910 0000E387 488B0425[B0030000]      	mov rax, qword [free_var_118]
 17911 0000E38F 50                      	push rax
 17912 0000E390 6A02                    	push 2
 17913 0000E392 488B4520                	mov rax, PARAM(0)
 17914                                  	assert_closure(rax)
    42 0000E396 803805              <1>  cmp byte [%1], %2
    43 0000E399 0F85955D0000        <1>  jne L_error_incorrect_type
 17915 0000E39F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17916 0000E3A3 53                      	push rbx
 17917 0000E3A4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17918 0000E3A8 FFD3                    	call rbx
 17919 0000E3AA 48890425[20040000]      	mov qword [free_var_132], rax
 17920 0000E3B2 48B8-                   	mov rax, sob_void
 17920 0000E3B4 [0000000000000000] 
 17921 0000E3BC C9                      	leave
 17922 0000E3BD C21800                  	ret 8 * (2 + 1)
 17923                                  .L_lambda_simple_end_4f9f:	; new closure is in rax
 17924                                  	assert_closure(rax)
    42 0000E3C0 803805              <1>  cmp byte [%1], %2
    43 0000E3C3 0F856B5D0000        <1>  jne L_error_incorrect_type
 17925 0000E3C9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17926 0000E3CD 53                      	push rbx
 17927 0000E3CE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17928 0000E3D2 FFD3                    	call rbx
 17929                                  
 17930 0000E3D4 4889C7                  	mov rdi, rax
 17931 0000E3D7 E8E9440000              	call print_sexpr_if_not_void
 17932                                  
 17933 0000E3DC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17934 0000E3E1 E8CE440000              	call malloc
 17935 0000E3E6 50                      	push rax
 17936 0000E3E7 BF00000000              	mov rdi, 8 * 0	; new rib
 17937 0000E3EC E8C3440000              	call malloc
 17938 0000E3F1 50                      	push rax
 17939 0000E3F2 BF08000000              	mov rdi, 8 * 1	; extended env
 17940 0000E3F7 E8B8440000              	call malloc
 17941 0000E3FC 488B7D10                	mov rdi, ENV
 17942 0000E400 BE00000000              	mov rsi, 0
 17943 0000E405 BA01000000              	mov rdx, 1
 17944                                  .L_lambda_simple_env_loop_4fa0:	; ext_env[i + 1] <-- env[i]
 17945 0000E40A 4883FE00                	cmp rsi, 0
 17946 0000E40E 7410                    	je .L_lambda_simple_env_end_4fa0
 17947 0000E410 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 17948 0000E414 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17949 0000E418 48FFC6                  	inc rsi
 17950 0000E41B 48FFC2                  	inc rdx
 17951 0000E41E EBEA                    	jmp .L_lambda_simple_env_loop_4fa0
 17952                                  .L_lambda_simple_env_end_4fa0:
 17953 0000E420 5B                      	pop rbx
 17954 0000E421 BE00000000              	mov rsi, 0
 17955                                  .L_lambda_simple_params_loop_4fa0:	; copy params
 17956 0000E426 4883FE00                	cmp rsi, 0
 17957 0000E42A 740E                    	je .L_lambda_simple_params_end_4fa0
 17958 0000E42C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17959 0000E431 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17960 0000E435 48FFC6                  	inc rsi
 17961 0000E438 EBEC                    	jmp .L_lambda_simple_params_loop_4fa0
 17962                                  .L_lambda_simple_params_end_4fa0:
 17963 0000E43A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17964 0000E43D 4889C3                  	mov rbx, rax
 17965 0000E440 58                      	pop rax
 17966 0000E441 C60005                  	mov byte [rax], T_closure
 17967 0000E444 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17968 0000E448 48C74009[55E40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa0
 17969 0000E450 E97A0C0000              	jmp .L_lambda_simple_end_4fa0
 17970                                  .L_lambda_simple_code_4fa0:	; lambda-simple body
 17971 0000E455 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17972 0000E45B 740B                    	je .L_lambda_simple_arity_check_ok_4fa0
 17973 0000E45D FF742410                	push qword [rsp + 8 * 2]
 17974 0000E461 6A01                    	push 1
 17975 0000E463 E905440000              	jmp L_error_incorrect_arity_simple
 17976                                  .L_lambda_simple_arity_check_ok_4fa0:
 17977 0000E468 C8000000                	enter 0, 0
 17978 0000E46C 488D0425[17000000]      	lea rax, [23 + L_constants]
 17979 0000E474 50                      	push rax
 17980 0000E475 6A01                    	push 1
 17981 0000E477 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17982 0000E47C E833440000              	call malloc
 17983 0000E481 50                      	push rax
 17984 0000E482 BF08000000              	mov rdi, 8 * 1	; new rib
 17985 0000E487 E828440000              	call malloc
 17986 0000E48C 50                      	push rax
 17987 0000E48D BF10000000              	mov rdi, 8 * 2	; extended env
 17988 0000E492 E81D440000              	call malloc
 17989 0000E497 488B7D10                	mov rdi, ENV
 17990 0000E49B BE00000000              	mov rsi, 0
 17991 0000E4A0 BA01000000              	mov rdx, 1
 17992                                  .L_lambda_simple_env_loop_4fa1:	; ext_env[i + 1] <-- env[i]
 17993 0000E4A5 4883FE01                	cmp rsi, 1
 17994 0000E4A9 7410                    	je .L_lambda_simple_env_end_4fa1
 17995 0000E4AB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 17996 0000E4AF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17997 0000E4B3 48FFC6                  	inc rsi
 17998 0000E4B6 48FFC2                  	inc rdx
 17999 0000E4B9 EBEA                    	jmp .L_lambda_simple_env_loop_4fa1
 18000                                  .L_lambda_simple_env_end_4fa1:
 18001 0000E4BB 5B                      	pop rbx
 18002 0000E4BC BE00000000              	mov rsi, 0
 18003                                  .L_lambda_simple_params_loop_4fa1:	; copy params
 18004 0000E4C1 4883FE01                	cmp rsi, 1
 18005 0000E4C5 740E                    	je .L_lambda_simple_params_end_4fa1
 18006 0000E4C7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18007 0000E4CC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18008 0000E4D0 48FFC6                  	inc rsi
 18009 0000E4D3 EBEC                    	jmp .L_lambda_simple_params_loop_4fa1
 18010                                  .L_lambda_simple_params_end_4fa1:
 18011 0000E4D5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18012 0000E4D8 4889C3                  	mov rbx, rax
 18013 0000E4DB 58                      	pop rax
 18014 0000E4DC C60005                  	mov byte [rax], T_closure
 18015 0000E4DF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18016 0000E4E3 48C74009[F0E40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa1
 18017 0000E4EB E96D0B0000              	jmp .L_lambda_simple_end_4fa1
 18018                                  .L_lambda_simple_code_4fa1:	; lambda-simple body
 18019 0000E4F0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18020 0000E4F6 740B                    	je .L_lambda_simple_arity_check_ok_4fa1
 18021 0000E4F8 FF742410                	push qword [rsp + 8 * 2]
 18022 0000E4FC 6A01                    	push 1
 18023 0000E4FE E96A430000              	jmp L_error_incorrect_arity_simple
 18024                                  .L_lambda_simple_arity_check_ok_4fa1:
 18025 0000E503 C8000000                	enter 0, 0
 18026 0000E507 BF11000000              	mov qword rdi, (1 + 8 + 8)
 18027 0000E50C E8A3430000              	call malloc
 18028 0000E511 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 18029 0000E515 48B8-                   	mov rax, sob_void
 18029 0000E517 [0000000000000000] 
 18030                                  
 18031 0000E51F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18032 0000E524 E88B430000              	call malloc
 18033 0000E529 50                      	push rax
 18034 0000E52A BF08000000              	mov rdi, 8 * 1	; new rib
 18035 0000E52F E880430000              	call malloc
 18036 0000E534 50                      	push rax
 18037 0000E535 BF18000000              	mov rdi, 8 * 3	; extended env
 18038 0000E53A E875430000              	call malloc
 18039 0000E53F 488B7D10                	mov rdi, ENV
 18040 0000E543 BE00000000              	mov rsi, 0
 18041 0000E548 BA01000000              	mov rdx, 1
 18042                                  .L_lambda_simple_env_loop_4fa2:	; ext_env[i + 1] <-- env[i]
 18043 0000E54D 4883FE02                	cmp rsi, 2
 18044 0000E551 7410                    	je .L_lambda_simple_env_end_4fa2
 18045 0000E553 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 18046 0000E557 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18047 0000E55B 48FFC6                  	inc rsi
 18048 0000E55E 48FFC2                  	inc rdx
 18049 0000E561 EBEA                    	jmp .L_lambda_simple_env_loop_4fa2
 18050                                  .L_lambda_simple_env_end_4fa2:
 18051 0000E563 5B                      	pop rbx
 18052 0000E564 BE00000000              	mov rsi, 0
 18053                                  .L_lambda_simple_params_loop_4fa2:	; copy params
 18054 0000E569 4883FE01                	cmp rsi, 1
 18055 0000E56D 740E                    	je .L_lambda_simple_params_end_4fa2
 18056 0000E56F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18057 0000E574 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18058 0000E578 48FFC6                  	inc rsi
 18059 0000E57B EBEC                    	jmp .L_lambda_simple_params_loop_4fa2
 18060                                  .L_lambda_simple_params_end_4fa2:
 18061 0000E57D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18062 0000E580 4889C3                  	mov rbx, rax
 18063 0000E583 58                      	pop rax
 18064 0000E584 C60005                  	mov byte [rax], T_closure
 18065 0000E587 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18066 0000E58B 48C74009[98E50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa2
 18067 0000E593 E9CF010000              	jmp .L_lambda_simple_end_4fa2
 18068                                  .L_lambda_simple_code_4fa2:	; lambda-simple body
 18069 0000E598 48837C241004            	cmp qword [rsp + 8 * 2], 4
 18070 0000E59E 740B                    	je .L_lambda_simple_arity_check_ok_4fa2
 18071 0000E5A0 FF742410                	push qword [rsp + 8 * 2]
 18072 0000E5A4 6A04                    	push 4
 18073 0000E5A6 E9C2420000              	jmp L_error_incorrect_arity_simple
 18074                                  .L_lambda_simple_arity_check_ok_4fa2:
 18075 0000E5AB C8000000                	enter 0, 0
 18076 0000E5AF 488B4538                	mov rax, PARAM(3)
 18077 0000E5B3 50                      	push rax
 18078 0000E5B4 488B4520                	mov rax, PARAM(0)
 18079 0000E5B8 50                      	push rax
 18080 0000E5B9 6A02                    	push 2
 18081 0000E5BB 488B0425[50030000]      	mov rax, qword [free_var_106]
 18082                                  	assert_closure(rax)
    42 0000E5C3 803805              <1>  cmp byte [%1], %2
    43 0000E5C6 0F85685B0000        <1>  jne L_error_incorrect_type
 18083 0000E5CC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18084 0000E5D0 53                      	push rbx
 18085 0000E5D1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18086 0000E5D5 FFD3                    	call rbx
 18087 0000E5D7 483D[02000000]          	cmp rax, sob_boolean_false
 18088 0000E5DD 0F8580010000            	jne .L_or_end_061d
 18089 0000E5E3 488B4538                	mov rax, PARAM(3)
 18090 0000E5E7 50                      	push rax
 18091 0000E5E8 488B4520                	mov rax, PARAM(0)
 18092 0000E5EC 50                      	push rax
 18093 0000E5ED 6A02                    	push 2
 18094 0000E5EF 488B0425[30030000]      	mov rax, qword [free_var_102]
 18095                                  	assert_closure(rax)
    42 0000E5F7 803805              <1>  cmp byte [%1], %2
    43 0000E5FA 0F85345B0000        <1>  jne L_error_incorrect_type
 18096 0000E600 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18097 0000E604 53                      	push rbx
 18098 0000E605 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18099 0000E609 FFD3                    	call rbx
 18100 0000E60B 483D[02000000]          	cmp rax, sob_boolean_false
 18101 0000E611 0F8444010000            	je .L_if_else_56be
 18102 0000E617 488B4520                	mov rax, PARAM(0)
 18103 0000E61B 50                      	push rax
 18104 0000E61C 488B4530                	mov rax, PARAM(2)
 18105 0000E620 50                      	push rax
 18106 0000E621 6A02                    	push 2
 18107 0000E623 488B0425[78010000]      	mov rax, qword [free_var_47]
 18108                                  	assert_closure(rax)
    42 0000E62B 803805              <1>  cmp byte [%1], %2
    43 0000E62E 0F85005B0000        <1>  jne L_error_incorrect_type
 18109 0000E634 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18110 0000E638 53                      	push rbx
 18111 0000E639 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18112 0000E63D FFD3                    	call rbx
 18113 0000E63F 50                      	push rax
 18114 0000E640 488B4520                	mov rax, PARAM(0)
 18115 0000E644 50                      	push rax
 18116 0000E645 488B4528                	mov rax, PARAM(1)
 18117 0000E649 50                      	push rax
 18118 0000E64A 6A02                    	push 2
 18119 0000E64C 488B0425[78010000]      	mov rax, qword [free_var_47]
 18120                                  	assert_closure(rax)
    42 0000E654 803805              <1>  cmp byte [%1], %2
    43 0000E657 0F85D75A0000        <1>  jne L_error_incorrect_type
 18121 0000E65D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18122 0000E661 53                      	push rbx
 18123 0000E662 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18124 0000E666 FFD3                    	call rbx
 18125 0000E668 50                      	push rax
 18126 0000E669 6A02                    	push 2
 18127 0000E66B 488B4510                	mov rax, qword [rbp + 8*2]
 18128 0000E66F 488B4008                	mov rax, qword [rax + 8*1]
 18129 0000E673 488B00                  	mov rax, qword [rax + 8*0]
 18130                                  	assert_closure(rax)
    42 0000E676 803805              <1>  cmp byte [%1], %2
    43 0000E679 0F85B55A0000        <1>  jne L_error_incorrect_type
 18131 0000E67F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18132 0000E683 53                      	push rbx
 18133 0000E684 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18134 0000E688 FFD3                    	call rbx
 18135 0000E68A 483D[02000000]          	cmp rax, sob_boolean_false
 18136 0000E690 0F84BB000000            	je .L_if_else_56bf
 18137 0000E696 488B4538                	mov rax, PARAM(3)
 18138 0000E69A 50                      	push rax
 18139 0000E69B 488B4530                	mov rax, PARAM(2)
 18140 0000E69F 50                      	push rax
 18141 0000E6A0 488B4528                	mov rax, PARAM(1)
 18142 0000E6A4 50                      	push rax
 18143 0000E6A5 488D0425[80000000]      	lea rax, [128 + L_constants]
 18144 0000E6AD 50                      	push rax
 18145 0000E6AE 488B4520                	mov rax, PARAM(0)
 18146 0000E6B2 50                      	push rax
 18147 0000E6B3 6A02                    	push 2
 18148 0000E6B5 488B0425[08030000]      	mov rax, qword [free_var_97]
 18149                                  	assert_closure(rax)
    42 0000E6BD 803805              <1>  cmp byte [%1], %2
    43 0000E6C0 0F856E5A0000        <1>  jne L_error_incorrect_type
 18150 0000E6C6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18151 0000E6CA 53                      	push rbx
 18152 0000E6CB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18153 0000E6CF FFD3                    	call rbx
 18154 0000E6D1 50                      	push rax
 18155 0000E6D2 6A04                    	push 4
 18156 0000E6D4 488B4510                	mov rax, qword [rbp + 8*2]
 18157 0000E6D8 488B00                  	mov rax, qword [rax + 8*0]
 18158 0000E6DB 488B00                  	mov rax, qword [rax + 8*0]
 18159 0000E6DE 488B00                  	mov rax, qword [rax]
 18160                                  	assert_closure(rax)
    42 0000E6E1 803805              <1>  cmp byte [%1], %2
    43 0000E6E4 0F854A5A0000        <1>  jne L_error_incorrect_type
 18161 0000E6EA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18162 0000E6EE 53                      	push rbx
 18163 0000E6EF FF7508                  	push RET_ADDR
 18164 0000E6F2 488B7D18                	mov rdi, COUNT
 18165 0000E6F6 4883C703                	add rdi, 3
 18166 0000E6FA 48C1E703                	shl rdi, 3
 18167 0000E6FE 4801EF                  	add rdi, rbp
 18168 0000E701 488B6D00                	mov rbp, OLD_RDP
 18169 0000E705 BE00000000              	mov rsi, 0
 18170                                  .L_tc_recycle_frame_loop_5d2f:	 ; start recycle frame loop
 18171 0000E70A 4883FE07                	cmp rsi, 7
 18172 0000E70E 7427                    	je .L_tc_recycle_frame_done_5d2f
 18173 0000E710 B906000000              	mov rcx, 6
 18174 0000E715 4829F1                  	sub rcx, rsi
 18175 0000E718 48C1E103                	shl rcx, 3
 18176 0000E71C 4801E1                  	add rcx, rsp ; rcx is the address to move
 18177 0000E71F 4889F3                  	mov rbx, rsi
 18178 0000E722 48C1E303                	shl rbx, 3
 18179 0000E726 48F7DB                  	neg rbx
 18180 0000E729 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18181 0000E72C 488B09                  	mov rcx, [rcx]
 18182 0000E72F 48890B                  	mov [rbx], rcx
 18183 0000E732 48FFC6                  	inc rsi
 18184 0000E735 EBD3                    	jmp .L_tc_recycle_frame_loop_5d2f
 18185                                  .L_tc_recycle_frame_done_5d2f:	 ; end recycle frame loop
 18186 0000E737 BB06000000              	mov rbx, 6
 18187 0000E73C 48C1E303                	shl rbx, 3
 18188 0000E740 48F7DB                  	neg rbx
 18189 0000E743 4801FB                  	add rbx, rdi
 18190 0000E746 4889DC                  	mov rsp, rbx
 18191 0000E749 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18192 0000E74D FFE3                    	jmp rbx
 18193 0000E74F EB08                    	jmp .L_if_end_56bf
 18194                                  	.L_if_else_56bf:
 18195 0000E751 488D0425[02000000]      	lea rax, [2 + L_constants]
 18196                                  	.L_if_end_56bf:
 18197 0000E759 EB08                    	jmp .L_if_end_56be
 18198                                  	.L_if_else_56be:
 18199 0000E75B 488D0425[02000000]      	lea rax, [2 + L_constants]
 18200                                  	.L_if_end_56be:
 18201                                  .L_or_end_061d:
 18202 0000E763 C9                      	leave
 18203 0000E764 C23000                  	ret 8 * (2 + 4)
 18204                                  .L_lambda_simple_end_4fa2:	; new closure is in rax
 18205 0000E767 50                      	push rax
 18206 0000E768 488B4520                	mov rax, PARAM(0)
 18207 0000E76C 8F00                    	pop qword [rax]
 18208 0000E76E 48B8-                   	mov rax, sob_void
 18208 0000E770 [0000000000000000] 
 18209                                  
 18210 0000E778 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18211 0000E77D E832410000              	call malloc
 18212 0000E782 50                      	push rax
 18213 0000E783 BF08000000              	mov rdi, 8 * 1	; new rib
 18214 0000E788 E827410000              	call malloc
 18215 0000E78D 50                      	push rax
 18216 0000E78E BF18000000              	mov rdi, 8 * 3	; extended env
 18217 0000E793 E81C410000              	call malloc
 18218 0000E798 488B7D10                	mov rdi, ENV
 18219 0000E79C BE00000000              	mov rsi, 0
 18220 0000E7A1 BA01000000              	mov rdx, 1
 18221                                  .L_lambda_simple_env_loop_4fa3:	; ext_env[i + 1] <-- env[i]
 18222 0000E7A6 4883FE02                	cmp rsi, 2
 18223 0000E7AA 7410                    	je .L_lambda_simple_env_end_4fa3
 18224 0000E7AC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 18225 0000E7B0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18226 0000E7B4 48FFC6                  	inc rsi
 18227 0000E7B7 48FFC2                  	inc rdx
 18228 0000E7BA EBEA                    	jmp .L_lambda_simple_env_loop_4fa3
 18229                                  .L_lambda_simple_env_end_4fa3:
 18230 0000E7BC 5B                      	pop rbx
 18231 0000E7BD BE00000000              	mov rsi, 0
 18232                                  .L_lambda_simple_params_loop_4fa3:	; copy params
 18233 0000E7C2 4883FE01                	cmp rsi, 1
 18234 0000E7C6 740E                    	je .L_lambda_simple_params_end_4fa3
 18235 0000E7C8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18236 0000E7CD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18237 0000E7D1 48FFC6                  	inc rsi
 18238 0000E7D4 EBEC                    	jmp .L_lambda_simple_params_loop_4fa3
 18239                                  .L_lambda_simple_params_end_4fa3:
 18240 0000E7D6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18241 0000E7D9 4889C3                  	mov rbx, rax
 18242 0000E7DC 58                      	pop rax
 18243 0000E7DD C60005                  	mov byte [rax], T_closure
 18244 0000E7E0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18245 0000E7E4 48C74009[F1E70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa3
 18246 0000E7EC E948020000              	jmp .L_lambda_simple_end_4fa3
 18247                                  .L_lambda_simple_code_4fa3:	; lambda-simple body
 18248 0000E7F1 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18249 0000E7F7 740B                    	je .L_lambda_simple_arity_check_ok_4fa3
 18250 0000E7F9 FF742410                	push qword [rsp + 8 * 2]
 18251 0000E7FD 6A02                    	push 2
 18252 0000E7FF E969400000              	jmp L_error_incorrect_arity_simple
 18253                                  .L_lambda_simple_arity_check_ok_4fa3:
 18254 0000E804 C8000000                	enter 0, 0
 18255 0000E808 488B4528                	mov rax, PARAM(1)
 18256 0000E80C 50                      	push rax
 18257 0000E80D 6A01                    	push 1
 18258 0000E80F 488B0425[90000000]      	mov rax, qword [free_var_18]
 18259                                  	assert_closure(rax)
    42 0000E817 803805              <1>  cmp byte [%1], %2
    43 0000E81A 0F8514590000        <1>  jne L_error_incorrect_type
 18260 0000E820 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18261 0000E824 53                      	push rbx
 18262 0000E825 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18263 0000E829 FFD3                    	call rbx
 18264 0000E82B 50                      	push rax
 18265 0000E82C 488B4520                	mov rax, PARAM(0)
 18266 0000E830 50                      	push rax
 18267 0000E831 6A01                    	push 1
 18268 0000E833 488B0425[90000000]      	mov rax, qword [free_var_18]
 18269                                  	assert_closure(rax)
    42 0000E83B 803805              <1>  cmp byte [%1], %2
    43 0000E83E 0F85F0580000        <1>  jne L_error_incorrect_type
 18270 0000E844 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18271 0000E848 53                      	push rbx
 18272 0000E849 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18273 0000E84D FFD3                    	call rbx
 18274 0000E84F 50                      	push rax
 18275 0000E850 6A02                    	push 2
 18276 0000E852 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18277 0000E857 E858400000              	call malloc
 18278 0000E85C 50                      	push rax
 18279 0000E85D BF10000000              	mov rdi, 8 * 2	; new rib
 18280 0000E862 E84D400000              	call malloc
 18281 0000E867 50                      	push rax
 18282 0000E868 BF20000000              	mov rdi, 8 * 4	; extended env
 18283 0000E86D E842400000              	call malloc
 18284 0000E872 488B7D10                	mov rdi, ENV
 18285 0000E876 BE00000000              	mov rsi, 0
 18286 0000E87B BA01000000              	mov rdx, 1
 18287                                  .L_lambda_simple_env_loop_4fa4:	; ext_env[i + 1] <-- env[i]
 18288 0000E880 4883FE03                	cmp rsi, 3
 18289 0000E884 7410                    	je .L_lambda_simple_env_end_4fa4
 18290 0000E886 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 18291 0000E88A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18292 0000E88E 48FFC6                  	inc rsi
 18293 0000E891 48FFC2                  	inc rdx
 18294 0000E894 EBEA                    	jmp .L_lambda_simple_env_loop_4fa4
 18295                                  .L_lambda_simple_env_end_4fa4:
 18296 0000E896 5B                      	pop rbx
 18297 0000E897 BE00000000              	mov rsi, 0
 18298                                  .L_lambda_simple_params_loop_4fa4:	; copy params
 18299 0000E89C 4883FE02                	cmp rsi, 2
 18300 0000E8A0 740E                    	je .L_lambda_simple_params_end_4fa4
 18301 0000E8A2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18302 0000E8A7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18303 0000E8AB 48FFC6                  	inc rsi
 18304 0000E8AE EBEC                    	jmp .L_lambda_simple_params_loop_4fa4
 18305                                  .L_lambda_simple_params_end_4fa4:
 18306 0000E8B0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18307 0000E8B3 4889C3                  	mov rbx, rax
 18308 0000E8B6 58                      	pop rax
 18309 0000E8B7 C60005                  	mov byte [rax], T_closure
 18310 0000E8BA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18311 0000E8BE 48C74009[CBE80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa4
 18312 0000E8C6 E9FC000000              	jmp .L_lambda_simple_end_4fa4
 18313                                  .L_lambda_simple_code_4fa4:	; lambda-simple body
 18314 0000E8CB 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18315 0000E8D1 740B                    	je .L_lambda_simple_arity_check_ok_4fa4
 18316 0000E8D3 FF742410                	push qword [rsp + 8 * 2]
 18317 0000E8D7 6A02                    	push 2
 18318 0000E8D9 E98F3F0000              	jmp L_error_incorrect_arity_simple
 18319                                  .L_lambda_simple_arity_check_ok_4fa4:
 18320 0000E8DE C8000000                	enter 0, 0
 18321 0000E8E2 488B4528                	mov rax, PARAM(1)
 18322 0000E8E6 50                      	push rax
 18323 0000E8E7 488B4520                	mov rax, PARAM(0)
 18324 0000E8EB 50                      	push rax
 18325 0000E8EC 6A02                    	push 2
 18326 0000E8EE 488B0425[50030000]      	mov rax, qword [free_var_106]
 18327                                  	assert_closure(rax)
    42 0000E8F6 803805              <1>  cmp byte [%1], %2
    43 0000E8F9 0F8535580000        <1>  jne L_error_incorrect_type
 18328 0000E8FF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18329 0000E903 53                      	push rbx
 18330 0000E904 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18331 0000E908 FFD3                    	call rbx
 18332 0000E90A 483D[02000000]          	cmp rax, sob_boolean_false
 18333 0000E910 0F84A5000000            	je .L_if_else_56c0
 18334 0000E916 488B4520                	mov rax, PARAM(0)
 18335 0000E91A 50                      	push rax
 18336 0000E91B 488B4510                	mov rax, qword [rbp + 8*2]
 18337 0000E91F 488B00                  	mov rax, qword [rax + 8*0]
 18338 0000E922 488B4008                	mov rax, qword [rax + 8*1]
 18339 0000E926 50                      	push rax
 18340 0000E927 488B4510                	mov rax, qword [rbp + 8*2]
 18341 0000E92B 488B00                  	mov rax, qword [rax + 8*0]
 18342 0000E92E 488B00                  	mov rax, qword [rax + 8*0]
 18343 0000E931 50                      	push rax
 18344 0000E932 488D0425[20000000]      	lea rax, [32 + L_constants]
 18345 0000E93A 50                      	push rax
 18346 0000E93B 6A04                    	push 4
 18347 0000E93D 488B4510                	mov rax, qword [rbp + 8*2]
 18348 0000E941 488B4008                	mov rax, qword [rax + 8*1]
 18349 0000E945 488B00                  	mov rax, qword [rax + 8*0]
 18350 0000E948 488B00                  	mov rax, qword [rax]
 18351                                  	assert_closure(rax)
    42 0000E94B 803805              <1>  cmp byte [%1], %2
    43 0000E94E 0F85E0570000        <1>  jne L_error_incorrect_type
 18352 0000E954 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18353 0000E958 53                      	push rbx
 18354 0000E959 FF7508                  	push RET_ADDR
 18355 0000E95C 488B7D18                	mov rdi, COUNT
 18356 0000E960 4883C703                	add rdi, 3
 18357 0000E964 48C1E703                	shl rdi, 3
 18358 0000E968 4801EF                  	add rdi, rbp
 18359 0000E96B 488B6D00                	mov rbp, OLD_RDP
 18360 0000E96F BE00000000              	mov rsi, 0
 18361                                  .L_tc_recycle_frame_loop_5d32:	 ; start recycle frame loop
 18362 0000E974 4883FE07                	cmp rsi, 7
 18363 0000E978 7427                    	je .L_tc_recycle_frame_done_5d32
 18364 0000E97A B906000000              	mov rcx, 6
 18365 0000E97F 4829F1                  	sub rcx, rsi
 18366 0000E982 48C1E103                	shl rcx, 3
 18367 0000E986 4801E1                  	add rcx, rsp ; rcx is the address to move
 18368 0000E989 4889F3                  	mov rbx, rsi
 18369 0000E98C 48C1E303                	shl rbx, 3
 18370 0000E990 48F7DB                  	neg rbx
 18371 0000E993 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18372 0000E996 488B09                  	mov rcx, [rcx]
 18373 0000E999 48890B                  	mov [rbx], rcx
 18374 0000E99C 48FFC6                  	inc rsi
 18375 0000E99F EBD3                    	jmp .L_tc_recycle_frame_loop_5d32
 18376                                  .L_tc_recycle_frame_done_5d32:	 ; end recycle frame loop
 18377 0000E9A1 BB06000000              	mov rbx, 6
 18378 0000E9A6 48C1E303                	shl rbx, 3
 18379 0000E9AA 48F7DB                  	neg rbx
 18380 0000E9AD 4801FB                  	add rbx, rdi
 18381 0000E9B0 4889DC                  	mov rsp, rbx
 18382 0000E9B3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18383 0000E9B7 FFE3                    	jmp rbx
 18384 0000E9B9 EB08                    	jmp .L_if_end_56c0
 18385                                  	.L_if_else_56c0:
 18386 0000E9BB 488D0425[02000000]      	lea rax, [2 + L_constants]
 18387                                  	.L_if_end_56c0:
 18388 0000E9C3 C9                      	leave
 18389 0000E9C4 C22000                  	ret 8 * (2 + 2)
 18390                                  .L_lambda_simple_end_4fa4:	; new closure is in rax
 18391                                  	assert_closure(rax)
    42 0000E9C7 803805              <1>  cmp byte [%1], %2
    43 0000E9CA 0F8564570000        <1>  jne L_error_incorrect_type
 18392 0000E9D0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18393 0000E9D4 53                      	push rbx
 18394 0000E9D5 FF7508                  	push RET_ADDR
 18395 0000E9D8 488B7D18                	mov rdi, COUNT
 18396 0000E9DC 4883C703                	add rdi, 3
 18397 0000E9E0 48C1E703                	shl rdi, 3
 18398 0000E9E4 4801EF                  	add rdi, rbp
 18399 0000E9E7 488B6D00                	mov rbp, OLD_RDP
 18400 0000E9EB BE00000000              	mov rsi, 0
 18401                                  .L_tc_recycle_frame_loop_5d31:	 ; start recycle frame loop
 18402 0000E9F0 4883FE05                	cmp rsi, 5
 18403 0000E9F4 7427                    	je .L_tc_recycle_frame_done_5d31
 18404 0000E9F6 B904000000              	mov rcx, 4
 18405 0000E9FB 4829F1                  	sub rcx, rsi
 18406 0000E9FE 48C1E103                	shl rcx, 3
 18407 0000EA02 4801E1                  	add rcx, rsp ; rcx is the address to move
 18408 0000EA05 4889F3                  	mov rbx, rsi
 18409 0000EA08 48C1E303                	shl rbx, 3
 18410 0000EA0C 48F7DB                  	neg rbx
 18411 0000EA0F 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18412 0000EA12 488B09                  	mov rcx, [rcx]
 18413 0000EA15 48890B                  	mov [rbx], rcx
 18414 0000EA18 48FFC6                  	inc rsi
 18415 0000EA1B EBD3                    	jmp .L_tc_recycle_frame_loop_5d31
 18416                                  .L_tc_recycle_frame_done_5d31:	 ; end recycle frame loop
 18417 0000EA1D BB04000000              	mov rbx, 4
 18418 0000EA22 48C1E303                	shl rbx, 3
 18419 0000EA26 48F7DB                  	neg rbx
 18420 0000EA29 4801FB                  	add rbx, rdi
 18421 0000EA2C 4889DC                  	mov rsp, rbx
 18422 0000EA2F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18423 0000EA33 FFE3                    	jmp rbx
 18424 0000EA35 C9                      	leave
 18425 0000EA36 C22000                  	ret 8 * (2 + 2)
 18426                                  .L_lambda_simple_end_4fa3:	; new closure is in rax
 18427 0000EA39 50                      	push rax
 18428 0000EA3A 6A01                    	push 1
 18429 0000EA3C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18430 0000EA41 E86E3E0000              	call malloc
 18431 0000EA46 50                      	push rax
 18432 0000EA47 BF08000000              	mov rdi, 8 * 1	; new rib
 18433 0000EA4C E8633E0000              	call malloc
 18434 0000EA51 50                      	push rax
 18435 0000EA52 BF18000000              	mov rdi, 8 * 3	; extended env
 18436 0000EA57 E8583E0000              	call malloc
 18437 0000EA5C 488B7D10                	mov rdi, ENV
 18438 0000EA60 BE00000000              	mov rsi, 0
 18439 0000EA65 BA01000000              	mov rdx, 1
 18440                                  .L_lambda_simple_env_loop_4fa5:	; ext_env[i + 1] <-- env[i]
 18441 0000EA6A 4883FE02                	cmp rsi, 2
 18442 0000EA6E 7410                    	je .L_lambda_simple_env_end_4fa5
 18443 0000EA70 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 18444 0000EA74 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18445 0000EA78 48FFC6                  	inc rsi
 18446 0000EA7B 48FFC2                  	inc rdx
 18447 0000EA7E EBEA                    	jmp .L_lambda_simple_env_loop_4fa5
 18448                                  .L_lambda_simple_env_end_4fa5:
 18449 0000EA80 5B                      	pop rbx
 18450 0000EA81 BE00000000              	mov rsi, 0
 18451                                  .L_lambda_simple_params_loop_4fa5:	; copy params
 18452 0000EA86 4883FE01                	cmp rsi, 1
 18453 0000EA8A 740E                    	je .L_lambda_simple_params_end_4fa5
 18454 0000EA8C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18455 0000EA91 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18456 0000EA95 48FFC6                  	inc rsi
 18457 0000EA98 EBEC                    	jmp .L_lambda_simple_params_loop_4fa5
 18458                                  .L_lambda_simple_params_end_4fa5:
 18459 0000EA9A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18460 0000EA9D 4889C3                  	mov rbx, rax
 18461 0000EAA0 58                      	pop rax
 18462 0000EAA1 C60005                  	mov byte [rax], T_closure
 18463 0000EAA4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18464 0000EAA8 48C74009[B5EA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa5
 18465 0000EAB0 E936050000              	jmp .L_lambda_simple_end_4fa5
 18466                                  .L_lambda_simple_code_4fa5:	; lambda-simple body
 18467 0000EAB5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18468 0000EABB 740B                    	je .L_lambda_simple_arity_check_ok_4fa5
 18469 0000EABD FF742410                	push qword [rsp + 8 * 2]
 18470 0000EAC1 6A01                    	push 1
 18471 0000EAC3 E9A53D0000              	jmp L_error_incorrect_arity_simple
 18472                                  .L_lambda_simple_arity_check_ok_4fa5:
 18473 0000EAC8 C8000000                	enter 0, 0
 18474 0000EACC 488D0425[17000000]      	lea rax, [23 + L_constants]
 18475 0000EAD4 50                      	push rax
 18476 0000EAD5 6A01                    	push 1
 18477 0000EAD7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18478 0000EADC E8D33D0000              	call malloc
 18479 0000EAE1 50                      	push rax
 18480 0000EAE2 BF08000000              	mov rdi, 8 * 1	; new rib
 18481 0000EAE7 E8C83D0000              	call malloc
 18482 0000EAEC 50                      	push rax
 18483 0000EAED BF20000000              	mov rdi, 8 * 4	; extended env
 18484 0000EAF2 E8BD3D0000              	call malloc
 18485 0000EAF7 488B7D10                	mov rdi, ENV
 18486 0000EAFB BE00000000              	mov rsi, 0
 18487 0000EB00 BA01000000              	mov rdx, 1
 18488                                  .L_lambda_simple_env_loop_4fa6:	; ext_env[i + 1] <-- env[i]
 18489 0000EB05 4883FE03                	cmp rsi, 3
 18490 0000EB09 7410                    	je .L_lambda_simple_env_end_4fa6
 18491 0000EB0B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 18492 0000EB0F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18493 0000EB13 48FFC6                  	inc rsi
 18494 0000EB16 48FFC2                  	inc rdx
 18495 0000EB19 EBEA                    	jmp .L_lambda_simple_env_loop_4fa6
 18496                                  .L_lambda_simple_env_end_4fa6:
 18497 0000EB1B 5B                      	pop rbx
 18498 0000EB1C BE00000000              	mov rsi, 0
 18499                                  .L_lambda_simple_params_loop_4fa6:	; copy params
 18500 0000EB21 4883FE01                	cmp rsi, 1
 18501 0000EB25 740E                    	je .L_lambda_simple_params_end_4fa6
 18502 0000EB27 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18503 0000EB2C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18504 0000EB30 48FFC6                  	inc rsi
 18505 0000EB33 EBEC                    	jmp .L_lambda_simple_params_loop_4fa6
 18506                                  .L_lambda_simple_params_end_4fa6:
 18507 0000EB35 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18508 0000EB38 4889C3                  	mov rbx, rax
 18509 0000EB3B 58                      	pop rax
 18510 0000EB3C C60005                  	mov byte [rax], T_closure
 18511 0000EB3F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18512 0000EB43 48C74009[50EB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa6
 18513 0000EB4B E929040000              	jmp .L_lambda_simple_end_4fa6
 18514                                  .L_lambda_simple_code_4fa6:	; lambda-simple body
 18515 0000EB50 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18516 0000EB56 740B                    	je .L_lambda_simple_arity_check_ok_4fa6
 18517 0000EB58 FF742410                	push qword [rsp + 8 * 2]
 18518 0000EB5C 6A01                    	push 1
 18519 0000EB5E E90A3D0000              	jmp L_error_incorrect_arity_simple
 18520                                  .L_lambda_simple_arity_check_ok_4fa6:
 18521 0000EB63 C8000000                	enter 0, 0
 18522 0000EB67 BF11000000              	mov qword rdi, (1 + 8 + 8)
 18523 0000EB6C E8433D0000              	call malloc
 18524 0000EB71 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 18525 0000EB75 48B8-                   	mov rax, sob_void
 18525 0000EB77 [0000000000000000] 
 18526                                  
 18527 0000EB7F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18528 0000EB84 E82B3D0000              	call malloc
 18529 0000EB89 50                      	push rax
 18530 0000EB8A BF08000000              	mov rdi, 8 * 1	; new rib
 18531 0000EB8F E8203D0000              	call malloc
 18532 0000EB94 50                      	push rax
 18533 0000EB95 BF28000000              	mov rdi, 8 * 5	; extended env
 18534 0000EB9A E8153D0000              	call malloc
 18535 0000EB9F 488B7D10                	mov rdi, ENV
 18536 0000EBA3 BE00000000              	mov rsi, 0
 18537 0000EBA8 BA01000000              	mov rdx, 1
 18538                                  .L_lambda_simple_env_loop_4fa7:	; ext_env[i + 1] <-- env[i]
 18539 0000EBAD 4883FE04                	cmp rsi, 4
 18540 0000EBB1 7410                    	je .L_lambda_simple_env_end_4fa7
 18541 0000EBB3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 18542 0000EBB7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18543 0000EBBB 48FFC6                  	inc rsi
 18544 0000EBBE 48FFC2                  	inc rdx
 18545 0000EBC1 EBEA                    	jmp .L_lambda_simple_env_loop_4fa7
 18546                                  .L_lambda_simple_env_end_4fa7:
 18547 0000EBC3 5B                      	pop rbx
 18548 0000EBC4 BE00000000              	mov rsi, 0
 18549                                  .L_lambda_simple_params_loop_4fa7:	; copy params
 18550 0000EBC9 4883FE01                	cmp rsi, 1
 18551 0000EBCD 740E                    	je .L_lambda_simple_params_end_4fa7
 18552 0000EBCF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18553 0000EBD4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18554 0000EBD8 48FFC6                  	inc rsi
 18555 0000EBDB EBEC                    	jmp .L_lambda_simple_params_loop_4fa7
 18556                                  .L_lambda_simple_params_end_4fa7:
 18557 0000EBDD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18558 0000EBE0 4889C3                  	mov rbx, rax
 18559 0000EBE3 58                      	pop rax
 18560 0000EBE4 C60005                  	mov byte [rax], T_closure
 18561 0000EBE7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18562 0000EBEB 48C74009[F8EB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa7
 18563 0000EBF3 E96F010000              	jmp .L_lambda_simple_end_4fa7
 18564                                  .L_lambda_simple_code_4fa7:	; lambda-simple body
 18565 0000EBF8 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18566 0000EBFE 740B                    	je .L_lambda_simple_arity_check_ok_4fa7
 18567 0000EC00 FF742410                	push qword [rsp + 8 * 2]
 18568 0000EC04 6A02                    	push 2
 18569 0000EC06 E9623C0000              	jmp L_error_incorrect_arity_simple
 18570                                  .L_lambda_simple_arity_check_ok_4fa7:
 18571 0000EC0B C8000000                	enter 0, 0
 18572 0000EC0F 488B4528                	mov rax, PARAM(1)
 18573 0000EC13 50                      	push rax
 18574 0000EC14 6A01                    	push 1
 18575 0000EC16 488B0425[00000000]      	mov rax, qword [free_var_0]
 18576                                  	assert_closure(rax)
    42 0000EC1E 803805              <1>  cmp byte [%1], %2
    43 0000EC21 0F850D550000        <1>  jne L_error_incorrect_type
 18577 0000EC27 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18578 0000EC2B 53                      	push rbx
 18579 0000EC2C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18580 0000EC30 FFD3                    	call rbx
 18581 0000EC32 483D[02000000]          	cmp rax, sob_boolean_false
 18582 0000EC38 0F8525010000            	jne .L_or_end_061e
 18583 0000EC3E 488B4528                	mov rax, PARAM(1)
 18584 0000EC42 50                      	push rax
 18585 0000EC43 6A01                    	push 1
 18586 0000EC45 488B0425[80000000]      	mov rax, qword [free_var_16]
 18587                                  	assert_closure(rax)
    42 0000EC4D 803805              <1>  cmp byte [%1], %2
    43 0000EC50 0F85DE540000        <1>  jne L_error_incorrect_type
 18588 0000EC56 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18589 0000EC5A 53                      	push rbx
 18590 0000EC5B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18591 0000EC5F FFD3                    	call rbx
 18592 0000EC61 50                      	push rax
 18593 0000EC62 488B4520                	mov rax, PARAM(0)
 18594 0000EC66 50                      	push rax
 18595 0000EC67 6A02                    	push 2
 18596 0000EC69 488B4510                	mov rax, qword [rbp + 8*2]
 18597 0000EC6D 488B4008                	mov rax, qword [rax + 8*1]
 18598 0000EC71 488B00                  	mov rax, qword [rax + 8*0]
 18599                                  	assert_closure(rax)
    42 0000EC74 803805              <1>  cmp byte [%1], %2
    43 0000EC77 0F85B7540000        <1>  jne L_error_incorrect_type
 18600 0000EC7D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18601 0000EC81 53                      	push rbx
 18602 0000EC82 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18603 0000EC86 FFD3                    	call rbx
 18604 0000EC88 483D[02000000]          	cmp rax, sob_boolean_false
 18605 0000EC8E 0F84C7000000            	je .L_if_else_56c1
 18606 0000EC94 488B4528                	mov rax, PARAM(1)
 18607 0000EC98 50                      	push rax
 18608 0000EC99 6A01                    	push 1
 18609 0000EC9B 488B0425[88000000]      	mov rax, qword [free_var_17]
 18610                                  	assert_closure(rax)
    42 0000ECA3 803805              <1>  cmp byte [%1], %2
    43 0000ECA6 0F8588540000        <1>  jne L_error_incorrect_type
 18611 0000ECAC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18612 0000ECB0 53                      	push rbx
 18613 0000ECB1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18614 0000ECB5 FFD3                    	call rbx
 18615 0000ECB7 50                      	push rax
 18616 0000ECB8 488B4528                	mov rax, PARAM(1)
 18617 0000ECBC 50                      	push rax
 18618 0000ECBD 6A01                    	push 1
 18619 0000ECBF 488B0425[80000000]      	mov rax, qword [free_var_16]
 18620                                  	assert_closure(rax)
    42 0000ECC7 803805              <1>  cmp byte [%1], %2
    43 0000ECCA 0F8564540000        <1>  jne L_error_incorrect_type
 18621 0000ECD0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18622 0000ECD4 53                      	push rbx
 18623 0000ECD5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18624 0000ECD9 FFD3                    	call rbx
 18625 0000ECDB 50                      	push rax
 18626 0000ECDC 6A02                    	push 2
 18627 0000ECDE 488B4510                	mov rax, qword [rbp + 8*2]
 18628 0000ECE2 488B00                  	mov rax, qword [rax + 8*0]
 18629 0000ECE5 488B00                  	mov rax, qword [rax + 8*0]
 18630 0000ECE8 488B00                  	mov rax, qword [rax]
 18631                                  	assert_closure(rax)
    42 0000ECEB 803805              <1>  cmp byte [%1], %2
    43 0000ECEE 0F8540540000        <1>  jne L_error_incorrect_type
 18632 0000ECF4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18633 0000ECF8 53                      	push rbx
 18634 0000ECF9 FF7508                  	push RET_ADDR
 18635 0000ECFC 488B7D18                	mov rdi, COUNT
 18636 0000ED00 4883C703                	add rdi, 3
 18637 0000ED04 48C1E703                	shl rdi, 3
 18638 0000ED08 4801EF                  	add rdi, rbp
 18639 0000ED0B 488B6D00                	mov rbp, OLD_RDP
 18640 0000ED0F BE00000000              	mov rsi, 0
 18641                                  .L_tc_recycle_frame_loop_5d34:	 ; start recycle frame loop
 18642 0000ED14 4883FE05                	cmp rsi, 5
 18643 0000ED18 7427                    	je .L_tc_recycle_frame_done_5d34
 18644 0000ED1A B904000000              	mov rcx, 4
 18645 0000ED1F 4829F1                  	sub rcx, rsi
 18646 0000ED22 48C1E103                	shl rcx, 3
 18647 0000ED26 4801E1                  	add rcx, rsp ; rcx is the address to move
 18648 0000ED29 4889F3                  	mov rbx, rsi
 18649 0000ED2C 48C1E303                	shl rbx, 3
 18650 0000ED30 48F7DB                  	neg rbx
 18651 0000ED33 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18652 0000ED36 488B09                  	mov rcx, [rcx]
 18653 0000ED39 48890B                  	mov [rbx], rcx
 18654 0000ED3C 48FFC6                  	inc rsi
 18655 0000ED3F EBD3                    	jmp .L_tc_recycle_frame_loop_5d34
 18656                                  .L_tc_recycle_frame_done_5d34:	 ; end recycle frame loop
 18657 0000ED41 BB04000000              	mov rbx, 4
 18658 0000ED46 48C1E303                	shl rbx, 3
 18659 0000ED4A 48F7DB                  	neg rbx
 18660 0000ED4D 4801FB                  	add rbx, rdi
 18661 0000ED50 4889DC                  	mov rsp, rbx
 18662 0000ED53 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18663 0000ED57 FFE3                    	jmp rbx
 18664 0000ED59 EB08                    	jmp .L_if_end_56c1
 18665                                  	.L_if_else_56c1:
 18666 0000ED5B 488D0425[02000000]      	lea rax, [2 + L_constants]
 18667                                  	.L_if_end_56c1:
 18668                                  .L_or_end_061e:
 18669 0000ED63 C9                      	leave
 18670 0000ED64 C22000                  	ret 8 * (2 + 2)
 18671                                  .L_lambda_simple_end_4fa7:	; new closure is in rax
 18672 0000ED67 50                      	push rax
 18673 0000ED68 488B4520                	mov rax, PARAM(0)
 18674 0000ED6C 8F00                    	pop qword [rax]
 18675 0000ED6E 48B8-                   	mov rax, sob_void
 18675 0000ED70 [0000000000000000] 
 18676                                  
 18677 0000ED78 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18678 0000ED7D E8323B0000              	call malloc
 18679 0000ED82 50                      	push rax
 18680 0000ED83 BF08000000              	mov rdi, 8 * 1	; new rib
 18681 0000ED88 E8273B0000              	call malloc
 18682 0000ED8D 50                      	push rax
 18683 0000ED8E BF28000000              	mov rdi, 8 * 5	; extended env
 18684 0000ED93 E81C3B0000              	call malloc
 18685 0000ED98 488B7D10                	mov rdi, ENV
 18686 0000ED9C BE00000000              	mov rsi, 0
 18687 0000EDA1 BA01000000              	mov rdx, 1
 18688                                  .L_lambda_opt_env_loop_0c98:	; ext_env[i + 1] <-- env[i]
 18689 0000EDA6 4883FE04                	cmp rsi, 4
 18690 0000EDAA 7410                    	je .L_lambda_opt_env_end_0c98
 18691 0000EDAC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18692 0000EDB0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18693 0000EDB4 48FFC6                  	inc rsi
 18694 0000EDB7 48FFC2                  	inc rdx
 18695 0000EDBA EBEA                    	jmp .L_lambda_opt_env_loop_0c98
 18696                                  .L_lambda_opt_env_end_0c98:
 18697 0000EDBC 5B                      	pop rbx
 18698 0000EDBD BE00000000              	mov rsi, 0
 18699                                  .L_lambda_opt_params_loop_0c98:	; copy params
 18700 0000EDC2 4883FE01                	cmp rsi, 1
 18701 0000EDC6 740E                    	je .L_lambda_opt_params_end_0c98
 18702 0000EDC8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18703 0000EDCD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18704 0000EDD1 48FFC6                  	inc rsi
 18705 0000EDD4 EBEC                    	jmp .L_lambda_opt_params_loop_0c98
 18706                                  .L_lambda_opt_params_end_0c98:
 18707 0000EDD6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18708 0000EDD9 4889C3                  	mov rbx, rax
 18709 0000EDDC 58                      	pop rax
 18710 0000EDDD C60005                  	mov byte [rax], T_closure
 18711 0000EDE0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18712 0000EDE4 48C74009[F1ED0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c98
 18713 0000EDEC E984010000              	jmp .L_lambda_opt_end_0c98
 18714                                  .L_lambda_opt_code_0c98:	; lambda-opt body
 18715 0000EDF1 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 18716 0000EDF6 4889FB                  	mov rbx, rdi
 18717 0000EDF9 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 18718 0000EDFD 4883FB00                	cmp rbx, 0
 18719 0000EE01 7F45                    	jg .L_lambda_opt_arity_check_more_0c98
 18720                                  .L_lambda_opt_arity_check_exact_0c98:	 ; if params in opt is exact
 18721 0000EE03 4883EC08                	sub rsp, 8
 18722 0000EE07 BE00000000              	mov rsi, 0 ; index
 18723                                  .L_lambda_opt_stack_enlarge_loop_0c98:	 ; stack loop enlarge start
 18724 0000EE0C 4883FE04                	cmp rsi, 4
 18725 0000EE10 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c98
 18726 0000EE12 4889F7                  	mov rdi, rsi
 18727 0000EE15 48FFC7                  	inc rdi
 18728 0000EE18 48C1E703                	shl rdi, 3
 18729 0000EE1C 4801E7                  	add rdi, rsp
 18730 0000EE1F 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 18731 0000EE22 4883EB08                	sub rbx, 8
 18732 0000EE26 488B3F                  	mov rdi, [rdi]
 18733 0000EE29 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 18734 0000EE2C 48FFC6                  	inc rsi
 18735 0000EE2F EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c98
 18736                                  .L_lambda_opt_stack_enlarge_loop_exit_0c98:	 ; end of stack enlarge loop
 18737 0000EE31 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 18737 0000EE36 [01000000]         
 18738 0000EE3A 48C744241002000000      	mov qword [rsp + 2*8], 2
 18739 0000EE43 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c98
 18740                                  .L_lambda_opt_arity_check_more_0c98:	 ; if params in opt is more
 18741 0000EE48 48B8-                   	mov rax, sob_nil
 18741 0000EE4A [0100000000000000] 
 18742 0000EE52 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 18743 0000EE55 48FFCE                  	dec rsi
 18744                                  .L_lambda_opt_list_create_loop_0c98:	; start of list creation loop
 18745 0000EE58 4883FEFF                	cmp rsi, -1
 18746 0000EE5C 7422                    	je .L_lambda_opt_list_create_loop_exit_0c98
 18747 0000EE5E 488D4E04                	lea rcx, [rsi + (3 + 1)]
 18748 0000EE62 48C1E103                	shl rcx, 3
 18749 0000EE66 4801E1                  	add rcx, rsp
 18750 0000EE69 488B09                  	mov rcx, [rcx]
 18751 0000EE6C 56                      	push rsi ; save params
 18752 0000EE6D 53                      	push rbx
 18753                                  
 18754 0000EE6E 50                      	push rax ; cdr
 18755 0000EE6F 51                      	push rcx ; car
 18756 0000EE70 6A02                    	push qword 2 ; push num of args
 18757 0000EE72 6A01                    	push qword 1 ; push garbage as env
 18758 0000EE74 E8C2430000              	call L_code_ptr_cons
 18759                                  
 18760 0000EE79 5B                      	pop rbx ; restore params
 18761 0000EE7A 5E                      	pop rsi
 18762 0000EE7B 48FFCE                  	dec rsi
 18763 0000EE7E EBD8                    	jmp .L_lambda_opt_list_create_loop_0c98
 18764                                  .L_lambda_opt_list_create_loop_exit_0c98:	; end of list creation loop
 18765 0000EE80 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 18766 0000EE85 4883C302                	add rbx, 2
 18767 0000EE89 4889DF                  	mov rdi, rbx
 18768 0000EE8C 48C1E703                	shl rdi,3
 18769 0000EE90 4801E7                  	add rdi, rsp
 18770 0000EE93 488907                  	mov [rdi], rax
 18771 0000EE96 BE00000000              	mov rsi, 0 ;index
 18772                                  .L_lambda_opt_stack_shrink_loop_0c98:	; start of stack shrink loop
 18773 0000EE9B 4883FE04                	cmp rsi, 4
 18774 0000EE9F 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c98
 18775 0000EEA1 BF03000000              	mov rdi, 3
 18776 0000EEA6 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 18777 0000EEA9 4889D9                  	mov rcx, rbx
 18778 0000EEAC 4829F1                  	sub rcx, rsi
 18779 0000EEAF 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 18780 0000EEB2 4889FA                  	mov rdx, rdi
 18781 0000EEB5 48C1E203                	shl rdx, 3
 18782 0000EEB9 4801E2                  	add rdx, rsp
 18783 0000EEBC 48C1E103                	shl rcx, 3
 18784 0000EEC0 4801E1                  	add rcx, rsp
 18785 0000EEC3 488B12                  	mov rdx, [rdx]
 18786 0000EEC6 488911                  	mov [rcx], rdx
 18787 0000EEC9 48FFC6                  	inc rsi
 18788 0000EECC EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c98
 18789                                  .L_lambda_opt_stack_shrink_loop_exit_0c98:	; end of stack shrink loop
 18790 0000EECE 4883EB02                	sub rbx, 2 ; rbx has number of args
 18791 0000EED2 4883EB02                	sub rbx, 2
 18792 0000EED6 48C1E303                	shl rbx, 3
 18793 0000EEDA 4801DC                  	add rsp, rbx
 18794 0000EEDD 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 18795                                  .L_lambda_opt_stack_adjusted_0c98:
 18796 0000EEE6 C8000000                	enter 0, 0
 18797 0000EEEA 488B4528                	mov rax, PARAM(1)
 18798 0000EEEE 50                      	push rax
 18799 0000EEEF 488B4520                	mov rax, PARAM(0)
 18800 0000EEF3 50                      	push rax
 18801 0000EEF4 6A02                    	push 2
 18802 0000EEF6 488B4510                	mov rax, qword [rbp + 8*2]
 18803 0000EEFA 488B00                  	mov rax, qword [rax + 8*0]
 18804 0000EEFD 488B00                  	mov rax, qword [rax + 8*0]
 18805 0000EF00 488B00                  	mov rax, qword [rax]
 18806                                  	assert_closure(rax)
    42 0000EF03 803805              <1>  cmp byte [%1], %2
    43 0000EF06 0F8528520000        <1>  jne L_error_incorrect_type
 18807 0000EF0C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18808 0000EF10 53                      	push rbx
 18809 0000EF11 FF7508                  	push RET_ADDR
 18810 0000EF14 488B7D18                	mov rdi, COUNT
 18811 0000EF18 4883C703                	add rdi, 3
 18812 0000EF1C 48C1E703                	shl rdi, 3
 18813 0000EF20 4801EF                  	add rdi, rbp
 18814 0000EF23 488B6D00                	mov rbp, OLD_RDP
 18815 0000EF27 BE00000000              	mov rsi, 0
 18816                                  .L_tc_recycle_frame_loop_5d35:	 ; start recycle frame loop
 18817 0000EF2C 4883FE05                	cmp rsi, 5
 18818 0000EF30 7427                    	je .L_tc_recycle_frame_done_5d35
 18819 0000EF32 B904000000              	mov rcx, 4
 18820 0000EF37 4829F1                  	sub rcx, rsi
 18821 0000EF3A 48C1E103                	shl rcx, 3
 18822 0000EF3E 4801E1                  	add rcx, rsp ; rcx is the address to move
 18823 0000EF41 4889F3                  	mov rbx, rsi
 18824 0000EF44 48C1E303                	shl rbx, 3
 18825 0000EF48 48F7DB                  	neg rbx
 18826 0000EF4B 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18827 0000EF4E 488B09                  	mov rcx, [rcx]
 18828 0000EF51 48890B                  	mov [rbx], rcx
 18829 0000EF54 48FFC6                  	inc rsi
 18830 0000EF57 EBD3                    	jmp .L_tc_recycle_frame_loop_5d35
 18831                                  .L_tc_recycle_frame_done_5d35:	 ; end recycle frame loop
 18832 0000EF59 BB04000000              	mov rbx, 4
 18833 0000EF5E 48C1E303                	shl rbx, 3
 18834 0000EF62 48F7DB                  	neg rbx
 18835 0000EF65 4801FB                  	add rbx, rdi
 18836 0000EF68 4889DC                  	mov rsp, rbx
 18837 0000EF6B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18838 0000EF6F FFE3                    	jmp rbx
 18839 0000EF71 C9                      	leave
 18840 0000EF72 C22000                  	ret AND_KILL_FRAME(2)
 18841                                  .L_lambda_opt_end_0c98:	; new closure is in rax
 18842 0000EF75 C9                      	leave
 18843 0000EF76 C21800                  	ret 8 * (2 + 1)
 18844                                  .L_lambda_simple_end_4fa6:	; new closure is in rax
 18845                                  	assert_closure(rax)
    42 0000EF79 803805              <1>  cmp byte [%1], %2
    43 0000EF7C 0F85B2510000        <1>  jne L_error_incorrect_type
 18846 0000EF82 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18847 0000EF86 53                      	push rbx
 18848 0000EF87 FF7508                  	push RET_ADDR
 18849 0000EF8A 488B7D18                	mov rdi, COUNT
 18850 0000EF8E 4883C703                	add rdi, 3
 18851 0000EF92 48C1E703                	shl rdi, 3
 18852 0000EF96 4801EF                  	add rdi, rbp
 18853 0000EF99 488B6D00                	mov rbp, OLD_RDP
 18854 0000EF9D BE00000000              	mov rsi, 0
 18855                                  .L_tc_recycle_frame_loop_5d33:	 ; start recycle frame loop
 18856 0000EFA2 4883FE04                	cmp rsi, 4
 18857 0000EFA6 7427                    	je .L_tc_recycle_frame_done_5d33
 18858 0000EFA8 B903000000              	mov rcx, 3
 18859 0000EFAD 4829F1                  	sub rcx, rsi
 18860 0000EFB0 48C1E103                	shl rcx, 3
 18861 0000EFB4 4801E1                  	add rcx, rsp ; rcx is the address to move
 18862 0000EFB7 4889F3                  	mov rbx, rsi
 18863 0000EFBA 48C1E303                	shl rbx, 3
 18864 0000EFBE 48F7DB                  	neg rbx
 18865 0000EFC1 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18866 0000EFC4 488B09                  	mov rcx, [rcx]
 18867 0000EFC7 48890B                  	mov [rbx], rcx
 18868 0000EFCA 48FFC6                  	inc rsi
 18869 0000EFCD EBD3                    	jmp .L_tc_recycle_frame_loop_5d33
 18870                                  .L_tc_recycle_frame_done_5d33:	 ; end recycle frame loop
 18871 0000EFCF BB03000000              	mov rbx, 3
 18872 0000EFD4 48C1E303                	shl rbx, 3
 18873 0000EFD8 48F7DB                  	neg rbx
 18874 0000EFDB 4801FB                  	add rbx, rdi
 18875 0000EFDE 4889DC                  	mov rsp, rbx
 18876 0000EFE1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18877 0000EFE5 FFE3                    	jmp rbx
 18878 0000EFE7 C9                      	leave
 18879 0000EFE8 C21800                  	ret 8 * (2 + 1)
 18880                                  .L_lambda_simple_end_4fa5:	; new closure is in rax
 18881                                  	assert_closure(rax)
    42 0000EFEB 803805              <1>  cmp byte [%1], %2
    43 0000EFEE 0F8540510000        <1>  jne L_error_incorrect_type
 18882 0000EFF4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18883 0000EFF8 53                      	push rbx
 18884 0000EFF9 FF7508                  	push RET_ADDR
 18885 0000EFFC 488B7D18                	mov rdi, COUNT
 18886 0000F000 4883C703                	add rdi, 3
 18887 0000F004 48C1E703                	shl rdi, 3
 18888 0000F008 4801EF                  	add rdi, rbp
 18889 0000F00B 488B6D00                	mov rbp, OLD_RDP
 18890 0000F00F BE00000000              	mov rsi, 0
 18891                                  .L_tc_recycle_frame_loop_5d30:	 ; start recycle frame loop
 18892 0000F014 4883FE04                	cmp rsi, 4
 18893 0000F018 7427                    	je .L_tc_recycle_frame_done_5d30
 18894 0000F01A B903000000              	mov rcx, 3
 18895 0000F01F 4829F1                  	sub rcx, rsi
 18896 0000F022 48C1E103                	shl rcx, 3
 18897 0000F026 4801E1                  	add rcx, rsp ; rcx is the address to move
 18898 0000F029 4889F3                  	mov rbx, rsi
 18899 0000F02C 48C1E303                	shl rbx, 3
 18900 0000F030 48F7DB                  	neg rbx
 18901 0000F033 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18902 0000F036 488B09                  	mov rcx, [rcx]
 18903 0000F039 48890B                  	mov [rbx], rcx
 18904 0000F03C 48FFC6                  	inc rsi
 18905 0000F03F EBD3                    	jmp .L_tc_recycle_frame_loop_5d30
 18906                                  .L_tc_recycle_frame_done_5d30:	 ; end recycle frame loop
 18907 0000F041 BB03000000              	mov rbx, 3
 18908 0000F046 48C1E303                	shl rbx, 3
 18909 0000F04A 48F7DB                  	neg rbx
 18910 0000F04D 4801FB                  	add rbx, rdi
 18911 0000F050 4889DC                  	mov rsp, rbx
 18912 0000F053 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18913 0000F057 FFE3                    	jmp rbx
 18914 0000F059 C9                      	leave
 18915 0000F05A C21800                  	ret 8 * (2 + 1)
 18916                                  .L_lambda_simple_end_4fa1:	; new closure is in rax
 18917                                  	assert_closure(rax)
    42 0000F05D 803805              <1>  cmp byte [%1], %2
    43 0000F060 0F85CE500000        <1>  jne L_error_incorrect_type
 18918 0000F066 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18919 0000F06A 53                      	push rbx
 18920 0000F06B FF7508                  	push RET_ADDR
 18921 0000F06E 488B7D18                	mov rdi, COUNT
 18922 0000F072 4883C703                	add rdi, 3
 18923 0000F076 48C1E703                	shl rdi, 3
 18924 0000F07A 4801EF                  	add rdi, rbp
 18925 0000F07D 488B6D00                	mov rbp, OLD_RDP
 18926 0000F081 BE00000000              	mov rsi, 0
 18927                                  .L_tc_recycle_frame_loop_5d2e:	 ; start recycle frame loop
 18928 0000F086 4883FE04                	cmp rsi, 4
 18929 0000F08A 7427                    	je .L_tc_recycle_frame_done_5d2e
 18930 0000F08C B903000000              	mov rcx, 3
 18931 0000F091 4829F1                  	sub rcx, rsi
 18932 0000F094 48C1E103                	shl rcx, 3
 18933 0000F098 4801E1                  	add rcx, rsp ; rcx is the address to move
 18934 0000F09B 4889F3                  	mov rbx, rsi
 18935 0000F09E 48C1E303                	shl rbx, 3
 18936 0000F0A2 48F7DB                  	neg rbx
 18937 0000F0A5 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18938 0000F0A8 488B09                  	mov rcx, [rcx]
 18939 0000F0AB 48890B                  	mov [rbx], rcx
 18940 0000F0AE 48FFC6                  	inc rsi
 18941 0000F0B1 EBD3                    	jmp .L_tc_recycle_frame_loop_5d2e
 18942                                  .L_tc_recycle_frame_done_5d2e:	 ; end recycle frame loop
 18943 0000F0B3 BB03000000              	mov rbx, 3
 18944 0000F0B8 48C1E303                	shl rbx, 3
 18945 0000F0BC 48F7DB                  	neg rbx
 18946 0000F0BF 4801FB                  	add rbx, rdi
 18947 0000F0C2 4889DC                  	mov rsp, rbx
 18948 0000F0C5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18949 0000F0C9 FFE3                    	jmp rbx
 18950 0000F0CB C9                      	leave
 18951 0000F0CC C21800                  	ret 8 * (2 + 1)
 18952                                  .L_lambda_simple_end_4fa0:	; new closure is in rax
 18953 0000F0CF 50                      	push rax
 18954 0000F0D0 6A01                    	push 1
 18955 0000F0D2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18956 0000F0D7 E8D8370000              	call malloc
 18957 0000F0DC 50                      	push rax
 18958 0000F0DD BF00000000              	mov rdi, 8 * 0	; new rib
 18959 0000F0E2 E8CD370000              	call malloc
 18960 0000F0E7 50                      	push rax
 18961 0000F0E8 BF08000000              	mov rdi, 8 * 1	; extended env
 18962 0000F0ED E8C2370000              	call malloc
 18963 0000F0F2 488B7D10                	mov rdi, ENV
 18964 0000F0F6 BE00000000              	mov rsi, 0
 18965 0000F0FB BA01000000              	mov rdx, 1
 18966                                  .L_lambda_simple_env_loop_4fa8:	; ext_env[i + 1] <-- env[i]
 18967 0000F100 4883FE00                	cmp rsi, 0
 18968 0000F104 7410                    	je .L_lambda_simple_env_end_4fa8
 18969 0000F106 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 18970 0000F10A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18971 0000F10E 48FFC6                  	inc rsi
 18972 0000F111 48FFC2                  	inc rdx
 18973 0000F114 EBEA                    	jmp .L_lambda_simple_env_loop_4fa8
 18974                                  .L_lambda_simple_env_end_4fa8:
 18975 0000F116 5B                      	pop rbx
 18976 0000F117 BE00000000              	mov rsi, 0
 18977                                  .L_lambda_simple_params_loop_4fa8:	; copy params
 18978 0000F11C 4883FE00                	cmp rsi, 0
 18979 0000F120 740E                    	je .L_lambda_simple_params_end_4fa8
 18980 0000F122 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18981 0000F127 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18982 0000F12B 48FFC6                  	inc rsi
 18983 0000F12E EBEC                    	jmp .L_lambda_simple_params_loop_4fa8
 18984                                  .L_lambda_simple_params_end_4fa8:
 18985 0000F130 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18986 0000F133 4889C3                  	mov rbx, rax
 18987 0000F136 58                      	pop rax
 18988 0000F137 C60005                  	mov byte [rax], T_closure
 18989 0000F13A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18990 0000F13E 48C74009[4BF10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa8
 18991 0000F146 E985000000              	jmp .L_lambda_simple_end_4fa8
 18992                                  .L_lambda_simple_code_4fa8:	; lambda-simple body
 18993 0000F14B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18994 0000F151 740B                    	je .L_lambda_simple_arity_check_ok_4fa8
 18995 0000F153 FF742410                	push qword [rsp + 8 * 2]
 18996 0000F157 6A01                    	push 1
 18997 0000F159 E90F370000              	jmp L_error_incorrect_arity_simple
 18998                                  .L_lambda_simple_arity_check_ok_4fa8:
 18999 0000F15E C8000000                	enter 0, 0
 19000 0000F162 488B0425[70030000]      	mov rax, qword [free_var_110]
 19001 0000F16A 50                      	push rax
 19002 0000F16B 6A01                    	push 1
 19003 0000F16D 488B4520                	mov rax, PARAM(0)
 19004                                  	assert_closure(rax)
    42 0000F171 803805              <1>  cmp byte [%1], %2
    43 0000F174 0F85BA4F0000        <1>  jne L_error_incorrect_type
 19005 0000F17A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19006 0000F17E 53                      	push rbx
 19007 0000F17F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19008 0000F183 FFD3                    	call rbx
 19009 0000F185 48890425[F0030000]      	mov qword [free_var_126], rax
 19010 0000F18D 48B8-                   	mov rax, sob_void
 19010 0000F18F [0000000000000000] 
 19011                                  
 19012 0000F197 488B0425[A8030000]      	mov rax, qword [free_var_117]
 19013 0000F19F 50                      	push rax
 19014 0000F1A0 6A01                    	push 1
 19015 0000F1A2 488B4520                	mov rax, PARAM(0)
 19016                                  	assert_closure(rax)
    42 0000F1A6 803805              <1>  cmp byte [%1], %2
    43 0000F1A9 0F85854F0000        <1>  jne L_error_incorrect_type
 19017 0000F1AF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19018 0000F1B3 53                      	push rbx
 19019 0000F1B4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19020 0000F1B8 FFD3                    	call rbx
 19021 0000F1BA 48890425[18040000]      	mov qword [free_var_131], rax
 19022 0000F1C2 48B8-                   	mov rax, sob_void
 19022 0000F1C4 [0000000000000000] 
 19023 0000F1CC C9                      	leave
 19024 0000F1CD C21800                  	ret 8 * (2 + 1)
 19025                                  .L_lambda_simple_end_4fa8:	; new closure is in rax
 19026                                  	assert_closure(rax)
    42 0000F1D0 803805              <1>  cmp byte [%1], %2
    43 0000F1D3 0F855B4F0000        <1>  jne L_error_incorrect_type
 19027 0000F1D9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19028 0000F1DD 53                      	push rbx
 19029 0000F1DE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19030 0000F1E2 FFD3                    	call rbx
 19031                                  
 19032 0000F1E4 4889C7                  	mov rdi, rax
 19033 0000F1E7 E8D9360000              	call print_sexpr_if_not_void
 19034                                  
 19035 0000F1EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19036 0000F1F1 E8BE360000              	call malloc
 19037 0000F1F6 50                      	push rax
 19038 0000F1F7 BF00000000              	mov rdi, 8 * 0	; new rib
 19039 0000F1FC E8B3360000              	call malloc
 19040 0000F201 50                      	push rax
 19041 0000F202 BF08000000              	mov rdi, 8 * 1	; extended env
 19042 0000F207 E8A8360000              	call malloc
 19043 0000F20C 488B7D10                	mov rdi, ENV
 19044 0000F210 BE00000000              	mov rsi, 0
 19045 0000F215 BA01000000              	mov rdx, 1
 19046                                  .L_lambda_simple_env_loop_4fa9:	; ext_env[i + 1] <-- env[i]
 19047 0000F21A 4883FE00                	cmp rsi, 0
 19048 0000F21E 7410                    	je .L_lambda_simple_env_end_4fa9
 19049 0000F220 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 19050 0000F224 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19051 0000F228 48FFC6                  	inc rsi
 19052 0000F22B 48FFC2                  	inc rdx
 19053 0000F22E EBEA                    	jmp .L_lambda_simple_env_loop_4fa9
 19054                                  .L_lambda_simple_env_end_4fa9:
 19055 0000F230 5B                      	pop rbx
 19056 0000F231 BE00000000              	mov rsi, 0
 19057                                  .L_lambda_simple_params_loop_4fa9:	; copy params
 19058 0000F236 4883FE00                	cmp rsi, 0
 19059 0000F23A 740E                    	je .L_lambda_simple_params_end_4fa9
 19060 0000F23C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19061 0000F241 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19062 0000F245 48FFC6                  	inc rsi
 19063 0000F248 EBEC                    	jmp .L_lambda_simple_params_loop_4fa9
 19064                                  .L_lambda_simple_params_end_4fa9:
 19065 0000F24A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19066 0000F24D 4889C3                  	mov rbx, rax
 19067 0000F250 58                      	pop rax
 19068 0000F251 C60005                  	mov byte [rax], T_closure
 19069 0000F254 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19070 0000F258 48C74009[65F20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa9
 19071 0000F260 E917010000              	jmp .L_lambda_simple_end_4fa9
 19072                                  .L_lambda_simple_code_4fa9:	; lambda-simple body
 19073 0000F265 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19074 0000F26B 740B                    	je .L_lambda_simple_arity_check_ok_4fa9
 19075 0000F26D FF742410                	push qword [rsp + 8 * 2]
 19076 0000F271 6A01                    	push 1
 19077 0000F273 E9F5350000              	jmp L_error_incorrect_arity_simple
 19078                                  .L_lambda_simple_arity_check_ok_4fa9:
 19079 0000F278 C8000000                	enter 0, 0
 19080 0000F27C 488B4520                	mov rax, PARAM(0)
 19081 0000F280 50                      	push rax
 19082 0000F281 6A01                    	push 1
 19083 0000F283 488B0425[00000000]      	mov rax, qword [free_var_0]
 19084                                  	assert_closure(rax)
    42 0000F28B 803805              <1>  cmp byte [%1], %2
    43 0000F28E 0F85A04E0000        <1>  jne L_error_incorrect_type
 19085 0000F294 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19086 0000F298 53                      	push rbx
 19087 0000F299 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19088 0000F29D FFD3                    	call rbx
 19089 0000F29F 483D[02000000]          	cmp rax, sob_boolean_false
 19090 0000F2A5 740D                    	je .L_if_else_56c2
 19091 0000F2A7 488D0425[20000000]      	lea rax, [32 + L_constants]
 19092 0000F2AF E9C4000000              	jmp .L_if_end_56c2
 19093                                  	.L_if_else_56c2:
 19094 0000F2B4 488B4520                	mov rax, PARAM(0)
 19095 0000F2B8 50                      	push rax
 19096 0000F2B9 6A01                    	push 1
 19097 0000F2BB 488B0425[88000000]      	mov rax, qword [free_var_17]
 19098                                  	assert_closure(rax)
    42 0000F2C3 803805              <1>  cmp byte [%1], %2
    43 0000F2C6 0F85684E0000        <1>  jne L_error_incorrect_type
 19099 0000F2CC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19100 0000F2D0 53                      	push rbx
 19101 0000F2D1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19102 0000F2D5 FFD3                    	call rbx
 19103 0000F2D7 50                      	push rax
 19104 0000F2D8 6A01                    	push 1
 19105 0000F2DA 488B0425[30040000]      	mov rax, qword [free_var_134]
 19106                                  	assert_closure(rax)
    42 0000F2E2 803805              <1>  cmp byte [%1], %2
    43 0000F2E5 0F85494E0000        <1>  jne L_error_incorrect_type
 19107 0000F2EB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19108 0000F2EF 53                      	push rbx
 19109 0000F2F0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19110 0000F2F4 FFD3                    	call rbx
 19111 0000F2F6 50                      	push rax
 19112 0000F2F7 488D0425[80000000]      	lea rax, [128 + L_constants]
 19113 0000F2FF 50                      	push rax
 19114 0000F300 6A02                    	push 2
 19115 0000F302 488B0425[08030000]      	mov rax, qword [free_var_97]
 19116                                  	assert_closure(rax)
    42 0000F30A 803805              <1>  cmp byte [%1], %2
    43 0000F30D 0F85214E0000        <1>  jne L_error_incorrect_type
 19117 0000F313 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19118 0000F317 53                      	push rbx
 19119 0000F318 FF7508                  	push RET_ADDR
 19120 0000F31B 488B7D18                	mov rdi, COUNT
 19121 0000F31F 4883C703                	add rdi, 3
 19122 0000F323 48C1E703                	shl rdi, 3
 19123 0000F327 4801EF                  	add rdi, rbp
 19124 0000F32A 488B6D00                	mov rbp, OLD_RDP
 19125 0000F32E BE00000000              	mov rsi, 0
 19126                                  .L_tc_recycle_frame_loop_5d36:	 ; start recycle frame loop
 19127 0000F333 4883FE05                	cmp rsi, 5
 19128 0000F337 7427                    	je .L_tc_recycle_frame_done_5d36
 19129 0000F339 B904000000              	mov rcx, 4
 19130 0000F33E 4829F1                  	sub rcx, rsi
 19131 0000F341 48C1E103                	shl rcx, 3
 19132 0000F345 4801E1                  	add rcx, rsp ; rcx is the address to move
 19133 0000F348 4889F3                  	mov rbx, rsi
 19134 0000F34B 48C1E303                	shl rbx, 3
 19135 0000F34F 48F7DB                  	neg rbx
 19136 0000F352 4801FB                  	add rbx, rdi ;rbx is the address to move to
 19137 0000F355 488B09                  	mov rcx, [rcx]
 19138 0000F358 48890B                  	mov [rbx], rcx
 19139 0000F35B 48FFC6                  	inc rsi
 19140 0000F35E EBD3                    	jmp .L_tc_recycle_frame_loop_5d36
 19141                                  .L_tc_recycle_frame_done_5d36:	 ; end recycle frame loop
 19142 0000F360 BB04000000              	mov rbx, 4
 19143 0000F365 48C1E303                	shl rbx, 3
 19144 0000F369 48F7DB                  	neg rbx
 19145 0000F36C 4801FB                  	add rbx, rdi
 19146 0000F36F 4889DC                  	mov rsp, rbx
 19147 0000F372 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19148 0000F376 FFE3                    	jmp rbx
 19149                                  	.L_if_end_56c2:
 19150 0000F378 C9                      	leave
 19151 0000F379 C21800                  	ret 8 * (2 + 1)
 19152                                  .L_lambda_simple_end_4fa9:	; new closure is in rax
 19153 0000F37C 48890425[30040000]      	mov qword [free_var_134], rax
 19154 0000F384 48B8-                   	mov rax, sob_void
 19154 0000F386 [0000000000000000] 
 19155                                  
 19156 0000F38E 4889C7                  	mov rdi, rax
 19157 0000F391 E82F350000              	call print_sexpr_if_not_void
 19158                                  
 19159 0000F396 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19160 0000F39B E814350000              	call malloc
 19161 0000F3A0 50                      	push rax
 19162 0000F3A1 BF00000000              	mov rdi, 8 * 0	; new rib
 19163 0000F3A6 E809350000              	call malloc
 19164 0000F3AB 50                      	push rax
 19165 0000F3AC BF08000000              	mov rdi, 8 * 1	; extended env
 19166 0000F3B1 E8FE340000              	call malloc
 19167 0000F3B6 488B7D10                	mov rdi, ENV
 19168 0000F3BA BE00000000              	mov rsi, 0
 19169 0000F3BF BA01000000              	mov rdx, 1
 19170                                  .L_lambda_simple_env_loop_4faa:	; ext_env[i + 1] <-- env[i]
 19171 0000F3C4 4883FE00                	cmp rsi, 0
 19172 0000F3C8 7410                    	je .L_lambda_simple_env_end_4faa
 19173 0000F3CA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 19174 0000F3CE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19175 0000F3D2 48FFC6                  	inc rsi
 19176 0000F3D5 48FFC2                  	inc rdx
 19177 0000F3D8 EBEA                    	jmp .L_lambda_simple_env_loop_4faa
 19178                                  .L_lambda_simple_env_end_4faa:
 19179 0000F3DA 5B                      	pop rbx
 19180 0000F3DB BE00000000              	mov rsi, 0
 19181                                  .L_lambda_simple_params_loop_4faa:	; copy params
 19182 0000F3E0 4883FE00                	cmp rsi, 0
 19183 0000F3E4 740E                    	je .L_lambda_simple_params_end_4faa
 19184 0000F3E6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19185 0000F3EB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19186 0000F3EF 48FFC6                  	inc rsi
 19187 0000F3F2 EBEC                    	jmp .L_lambda_simple_params_loop_4faa
 19188                                  .L_lambda_simple_params_end_4faa:
 19189 0000F3F4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19190 0000F3F7 4889C3                  	mov rbx, rax
 19191 0000F3FA 58                      	pop rax
 19192 0000F3FB C60005                  	mov byte [rax], T_closure
 19193 0000F3FE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19194 0000F402 48C74009[0FF40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4faa
 19195 0000F40A E91F010000              	jmp .L_lambda_simple_end_4faa
 19196                                  .L_lambda_simple_code_4faa:	; lambda-simple body
 19197 0000F40F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19198 0000F415 740B                    	je .L_lambda_simple_arity_check_ok_4faa
 19199 0000F417 FF742410                	push qword [rsp + 8 * 2]
 19200 0000F41B 6A01                    	push 1
 19201 0000F41D E94B340000              	jmp L_error_incorrect_arity_simple
 19202                                  .L_lambda_simple_arity_check_ok_4faa:
 19203 0000F422 C8000000                	enter 0, 0
 19204 0000F426 488B4520                	mov rax, PARAM(0)
 19205 0000F42A 50                      	push rax
 19206 0000F42B 6A01                    	push 1
 19207 0000F42D 488B0425[00000000]      	mov rax, qword [free_var_0]
 19208                                  	assert_closure(rax)
    42 0000F435 803805              <1>  cmp byte [%1], %2
    43 0000F438 0F85F64C0000        <1>  jne L_error_incorrect_type
 19209 0000F43E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19210 0000F442 53                      	push rbx
 19211 0000F443 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19212 0000F447 FFD3                    	call rbx
 19213 0000F449 483D[02000000]          	cmp rax, sob_boolean_false
 19214 0000F44F 0F85D5000000            	jne .L_or_end_061f
 19215 0000F455 488B4520                	mov rax, PARAM(0)
 19216 0000F459 50                      	push rax
 19217 0000F45A 6A01                    	push 1
 19218 0000F45C 488B0425[08000000]      	mov rax, qword [free_var_1]
 19219                                  	assert_closure(rax)
    42 0000F464 803805              <1>  cmp byte [%1], %2
    43 0000F467 0F85C74C0000        <1>  jne L_error_incorrect_type
 19220 0000F46D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19221 0000F471 53                      	push rbx
 19222 0000F472 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19223 0000F476 FFD3                    	call rbx
 19224 0000F478 483D[02000000]          	cmp rax, sob_boolean_false
 19225 0000F47E 0F849E000000            	je .L_if_else_56c3
 19226 0000F484 488B4520                	mov rax, PARAM(0)
 19227 0000F488 50                      	push rax
 19228 0000F489 6A01                    	push 1
 19229 0000F48B 488B0425[88000000]      	mov rax, qword [free_var_17]
 19230                                  	assert_closure(rax)
    42 0000F493 803805              <1>  cmp byte [%1], %2
    43 0000F496 0F85984C0000        <1>  jne L_error_incorrect_type
 19231 0000F49C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19232 0000F4A0 53                      	push rbx
 19233 0000F4A1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19234 0000F4A5 FFD3                    	call rbx
 19235 0000F4A7 50                      	push rax
 19236 0000F4A8 6A01                    	push 1
 19237 0000F4AA 488B0425[A0020000]      	mov rax, qword [free_var_84]
 19238                                  	assert_closure(rax)
    42 0000F4B2 803805              <1>  cmp byte [%1], %2
    43 0000F4B5 0F85794C0000        <1>  jne L_error_incorrect_type
 19239 0000F4BB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19240 0000F4BF 53                      	push rbx
 19241 0000F4C0 FF7508                  	push RET_ADDR
 19242 0000F4C3 488B7D18                	mov rdi, COUNT
 19243 0000F4C7 4883C703                	add rdi, 3
 19244 0000F4CB 48C1E703                	shl rdi, 3
 19245 0000F4CF 4801EF                  	add rdi, rbp
 19246 0000F4D2 488B6D00                	mov rbp, OLD_RDP
 19247 0000F4D6 BE00000000              	mov rsi, 0
 19248                                  .L_tc_recycle_frame_loop_5d37:	 ; start recycle frame loop
 19249 0000F4DB 4883FE04                	cmp rsi, 4
 19250 0000F4DF 7427                    	je .L_tc_recycle_frame_done_5d37
 19251 0000F4E1 B903000000              	mov rcx, 3
 19252 0000F4E6 4829F1                  	sub rcx, rsi
 19253 0000F4E9 48C1E103                	shl rcx, 3
 19254 0000F4ED 4801E1                  	add rcx, rsp ; rcx is the address to move
 19255 0000F4F0 4889F3                  	mov rbx, rsi
 19256 0000F4F3 48C1E303                	shl rbx, 3
 19257 0000F4F7 48F7DB                  	neg rbx
 19258 0000F4FA 4801FB                  	add rbx, rdi ;rbx is the address to move to
 19259 0000F4FD 488B09                  	mov rcx, [rcx]
 19260 0000F500 48890B                  	mov [rbx], rcx
 19261 0000F503 48FFC6                  	inc rsi
 19262 0000F506 EBD3                    	jmp .L_tc_recycle_frame_loop_5d37
 19263                                  .L_tc_recycle_frame_done_5d37:	 ; end recycle frame loop
 19264 0000F508 BB03000000              	mov rbx, 3
 19265 0000F50D 48C1E303                	shl rbx, 3
 19266 0000F511 48F7DB                  	neg rbx
 19267 0000F514 4801FB                  	add rbx, rdi
 19268 0000F517 4889DC                  	mov rsp, rbx
 19269 0000F51A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19270 0000F51E FFE3                    	jmp rbx
 19271 0000F520 EB08                    	jmp .L_if_end_56c3
 19272                                  	.L_if_else_56c3:
 19273 0000F522 488D0425[02000000]      	lea rax, [2 + L_constants]
 19274                                  	.L_if_end_56c3:
 19275                                  .L_or_end_061f:
 19276 0000F52A C9                      	leave
 19277 0000F52B C21800                  	ret 8 * (2 + 1)
 19278                                  .L_lambda_simple_end_4faa:	; new closure is in rax
 19279 0000F52E 48890425[A0020000]      	mov qword [free_var_84], rax
 19280 0000F536 48B8-                   	mov rax, sob_void
 19280 0000F538 [0000000000000000] 
 19281                                  
 19282 0000F540 4889C7                  	mov rdi, rax
 19283 0000F543 E87D330000              	call print_sexpr_if_not_void
 19284                                  
 19285 0000F548 488B0425[98010000]      	mov rax, qword [free_var_51]
 19286 0000F550 50                      	push rax
 19287 0000F551 6A01                    	push 1
 19288 0000F553 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19289 0000F558 E857330000              	call malloc
 19290 0000F55D 50                      	push rax
 19291 0000F55E BF00000000              	mov rdi, 8 * 0	; new rib
 19292 0000F563 E84C330000              	call malloc
 19293 0000F568 50                      	push rax
 19294 0000F569 BF08000000              	mov rdi, 8 * 1	; extended env
 19295 0000F56E E841330000              	call malloc
 19296 0000F573 488B7D10                	mov rdi, ENV
 19297 0000F577 BE00000000              	mov rsi, 0
 19298 0000F57C BA01000000              	mov rdx, 1
 19299                                  .L_lambda_simple_env_loop_4fab:	; ext_env[i + 1] <-- env[i]
 19300 0000F581 4883FE00                	cmp rsi, 0
 19301 0000F585 7410                    	je .L_lambda_simple_env_end_4fab
 19302 0000F587 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 19303 0000F58B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19304 0000F58F 48FFC6                  	inc rsi
 19305 0000F592 48FFC2                  	inc rdx
 19306 0000F595 EBEA                    	jmp .L_lambda_simple_env_loop_4fab
 19307                                  .L_lambda_simple_env_end_4fab:
 19308 0000F597 5B                      	pop rbx
 19309 0000F598 BE00000000              	mov rsi, 0
 19310                                  .L_lambda_simple_params_loop_4fab:	; copy params
 19311 0000F59D 4883FE00                	cmp rsi, 0
 19312 0000F5A1 740E                    	je .L_lambda_simple_params_end_4fab
 19313 0000F5A3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19314 0000F5A8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19315 0000F5AC 48FFC6                  	inc rsi
 19316 0000F5AF EBEC                    	jmp .L_lambda_simple_params_loop_4fab
 19317                                  .L_lambda_simple_params_end_4fab:
 19318 0000F5B1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19319 0000F5B4 4889C3                  	mov rbx, rax
 19320 0000F5B7 58                      	pop rax
 19321 0000F5B8 C60005                  	mov byte [rax], T_closure
 19322 0000F5BB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19323 0000F5BF 48C74009[CCF50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fab
 19324 0000F5C7 E92D040000              	jmp .L_lambda_simple_end_4fab
 19325                                  .L_lambda_simple_code_4fab:	; lambda-simple body
 19326 0000F5CC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19327 0000F5D2 740B                    	je .L_lambda_simple_arity_check_ok_4fab
 19328 0000F5D4 FF742410                	push qword [rsp + 8 * 2]
 19329 0000F5D8 6A01                    	push 1
 19330 0000F5DA E98E320000              	jmp L_error_incorrect_arity_simple
 19331                                  .L_lambda_simple_arity_check_ok_4fab:
 19332 0000F5DF C8000000                	enter 0, 0
 19333 0000F5E3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19334 0000F5E8 E8C7320000              	call malloc
 19335 0000F5ED 50                      	push rax
 19336 0000F5EE BF08000000              	mov rdi, 8 * 1	; new rib
 19337 0000F5F3 E8BC320000              	call malloc
 19338 0000F5F8 50                      	push rax
 19339 0000F5F9 BF10000000              	mov rdi, 8 * 2	; extended env
 19340 0000F5FE E8B1320000              	call malloc
 19341 0000F603 488B7D10                	mov rdi, ENV
 19342 0000F607 BE00000000              	mov rsi, 0
 19343 0000F60C BA01000000              	mov rdx, 1
 19344                                  .L_lambda_opt_env_loop_0c99:	; ext_env[i + 1] <-- env[i]
 19345 0000F611 4883FE01                	cmp rsi, 1
 19346 0000F615 7410                    	je .L_lambda_opt_env_end_0c99
 19347 0000F617 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19348 0000F61B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19349 0000F61F 48FFC6                  	inc rsi
 19350 0000F622 48FFC2                  	inc rdx
 19351 0000F625 EBEA                    	jmp .L_lambda_opt_env_loop_0c99
 19352                                  .L_lambda_opt_env_end_0c99:
 19353 0000F627 5B                      	pop rbx
 19354 0000F628 BE00000000              	mov rsi, 0
 19355                                  .L_lambda_opt_params_loop_0c99:	; copy params
 19356 0000F62D 4883FE01                	cmp rsi, 1
 19357 0000F631 740E                    	je .L_lambda_opt_params_end_0c99
 19358 0000F633 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19359 0000F638 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19360 0000F63C 48FFC6                  	inc rsi
 19361 0000F63F EBEC                    	jmp .L_lambda_opt_params_loop_0c99
 19362                                  .L_lambda_opt_params_end_0c99:
 19363 0000F641 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19364 0000F644 4889C3                  	mov rbx, rax
 19365 0000F647 58                      	pop rax
 19366 0000F648 C60005                  	mov byte [rax], T_closure
 19367 0000F64B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19368 0000F64F 48C74009[5CF60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c99
 19369 0000F657 E999030000              	jmp .L_lambda_opt_end_0c99
 19370                                  .L_lambda_opt_code_0c99:	; lambda-opt body
 19371 0000F65C 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 19372 0000F661 4889FB                  	mov rbx, rdi
 19373 0000F664 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 19374 0000F668 4883FB00                	cmp rbx, 0
 19375 0000F66C 7F45                    	jg .L_lambda_opt_arity_check_more_0c99
 19376                                  .L_lambda_opt_arity_check_exact_0c99:	 ; if params in opt is exact
 19377 0000F66E 4883EC08                	sub rsp, 8
 19378 0000F672 BE00000000              	mov rsi, 0 ; index
 19379                                  .L_lambda_opt_stack_enlarge_loop_0c99:	 ; stack loop enlarge start
 19380 0000F677 4883FE04                	cmp rsi, 4
 19381 0000F67B 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c99
 19382 0000F67D 4889F7                  	mov rdi, rsi
 19383 0000F680 48FFC7                  	inc rdi
 19384 0000F683 48C1E703                	shl rdi, 3
 19385 0000F687 4801E7                  	add rdi, rsp
 19386 0000F68A 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 19387 0000F68D 4883EB08                	sub rbx, 8
 19388 0000F691 488B3F                  	mov rdi, [rdi]
 19389 0000F694 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 19390 0000F697 48FFC6                  	inc rsi
 19391 0000F69A EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c99
 19392                                  .L_lambda_opt_stack_enlarge_loop_exit_0c99:	 ; end of stack enlarge loop
 19393 0000F69C 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 19393 0000F6A1 [01000000]         
 19394 0000F6A5 48C744241002000000      	mov qword [rsp + 2*8], 2
 19395 0000F6AE E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c99
 19396                                  .L_lambda_opt_arity_check_more_0c99:	 ; if params in opt is more
 19397 0000F6B3 48B8-                   	mov rax, sob_nil
 19397 0000F6B5 [0100000000000000] 
 19398 0000F6BD 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 19399 0000F6C0 48FFCE                  	dec rsi
 19400                                  .L_lambda_opt_list_create_loop_0c99:	; start of list creation loop
 19401 0000F6C3 4883FEFF                	cmp rsi, -1
 19402 0000F6C7 7422                    	je .L_lambda_opt_list_create_loop_exit_0c99
 19403 0000F6C9 488D4E04                	lea rcx, [rsi + (3 + 1)]
 19404 0000F6CD 48C1E103                	shl rcx, 3
 19405 0000F6D1 4801E1                  	add rcx, rsp
 19406 0000F6D4 488B09                  	mov rcx, [rcx]
 19407 0000F6D7 56                      	push rsi ; save params
 19408 0000F6D8 53                      	push rbx
 19409                                  
 19410 0000F6D9 50                      	push rax ; cdr
 19411 0000F6DA 51                      	push rcx ; car
 19412 0000F6DB 6A02                    	push qword 2 ; push num of args
 19413 0000F6DD 6A01                    	push qword 1 ; push garbage as env
 19414 0000F6DF E8573B0000              	call L_code_ptr_cons
 19415                                  
 19416 0000F6E4 5B                      	pop rbx ; restore params
 19417 0000F6E5 5E                      	pop rsi
 19418 0000F6E6 48FFCE                  	dec rsi
 19419 0000F6E9 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c99
 19420                                  .L_lambda_opt_list_create_loop_exit_0c99:	; end of list creation loop
 19421 0000F6EB 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 19422 0000F6F0 4883C302                	add rbx, 2
 19423 0000F6F4 4889DF                  	mov rdi, rbx
 19424 0000F6F7 48C1E703                	shl rdi,3
 19425 0000F6FB 4801E7                  	add rdi, rsp
 19426 0000F6FE 488907                  	mov [rdi], rax
 19427 0000F701 BE00000000              	mov rsi, 0 ;index
 19428                                  .L_lambda_opt_stack_shrink_loop_0c99:	; start of stack shrink loop
 19429 0000F706 4883FE04                	cmp rsi, 4
 19430 0000F70A 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c99
 19431 0000F70C BF03000000              	mov rdi, 3
 19432 0000F711 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 19433 0000F714 4889D9                  	mov rcx, rbx
 19434 0000F717 4829F1                  	sub rcx, rsi
 19435 0000F71A 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 19436 0000F71D 4889FA                  	mov rdx, rdi
 19437 0000F720 48C1E203                	shl rdx, 3
 19438 0000F724 4801E2                  	add rdx, rsp
 19439 0000F727 48C1E103                	shl rcx, 3
 19440 0000F72B 4801E1                  	add rcx, rsp
 19441 0000F72E 488B12                  	mov rdx, [rdx]
 19442 0000F731 488911                  	mov [rcx], rdx
 19443 0000F734 48FFC6                  	inc rsi
 19444 0000F737 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c99
 19445                                  .L_lambda_opt_stack_shrink_loop_exit_0c99:	; end of stack shrink loop
 19446 0000F739 4883EB02                	sub rbx, 2 ; rbx has number of args
 19447 0000F73D 4883EB02                	sub rbx, 2
 19448 0000F741 48C1E303                	shl rbx, 3
 19449 0000F745 4801DC                  	add rsp, rbx
 19450 0000F748 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 19451                                  .L_lambda_opt_stack_adjusted_0c99:
 19452 0000F751 C8000000                	enter 0, 0
 19453 0000F755 488B4528                	mov rax, PARAM(1)
 19454 0000F759 50                      	push rax
 19455 0000F75A 6A01                    	push 1
 19456 0000F75C 488B0425[00000000]      	mov rax, qword [free_var_0]
 19457                                  	assert_closure(rax)
    42 0000F764 803805              <1>  cmp byte [%1], %2
    43 0000F767 0F85C7490000        <1>  jne L_error_incorrect_type
 19458 0000F76D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19459 0000F771 53                      	push rbx
 19460 0000F772 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19461 0000F776 FFD3                    	call rbx
 19462 0000F778 483D[02000000]          	cmp rax, sob_boolean_false
 19463 0000F77E 740D                    	je .L_if_else_56c4
 19464 0000F780 488D0425[00000000]      	lea rax, [0 + L_constants]
 19465 0000F788 E9D4000000              	jmp .L_if_end_56c4
 19466                                  	.L_if_else_56c4:
 19467 0000F78D 488B4528                	mov rax, PARAM(1)
 19468 0000F791 50                      	push rax
 19469 0000F792 6A01                    	push 1
 19470 0000F794 488B0425[08000000]      	mov rax, qword [free_var_1]
 19471                                  	assert_closure(rax)
    42 0000F79C 803805              <1>  cmp byte [%1], %2
    43 0000F79F 0F858F490000        <1>  jne L_error_incorrect_type
 19472 0000F7A5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19473 0000F7A9 53                      	push rbx
 19474 0000F7AA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19475 0000F7AE FFD3                    	call rbx
 19476 0000F7B0 483D[02000000]          	cmp rax, sob_boolean_false
 19477 0000F7B6 7444                    	je .L_if_else_56c6
 19478 0000F7B8 488B4528                	mov rax, PARAM(1)
 19479 0000F7BC 50                      	push rax
 19480 0000F7BD 6A01                    	push 1
 19481 0000F7BF 488B0425[88000000]      	mov rax, qword [free_var_17]
 19482                                  	assert_closure(rax)
    42 0000F7C7 803805              <1>  cmp byte [%1], %2
    43 0000F7CA 0F8564490000        <1>  jne L_error_incorrect_type
 19483 0000F7D0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19484 0000F7D4 53                      	push rbx
 19485 0000F7D5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19486 0000F7D9 FFD3                    	call rbx
 19487 0000F7DB 50                      	push rax
 19488 0000F7DC 6A01                    	push 1
 19489 0000F7DE 488B0425[00000000]      	mov rax, qword [free_var_0]
 19490                                  	assert_closure(rax)
    42 0000F7E6 803805              <1>  cmp byte [%1], %2
    43 0000F7E9 0F8545490000        <1>  jne L_error_incorrect_type
 19491 0000F7EF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19492 0000F7F3 53                      	push rbx
 19493 0000F7F4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19494 0000F7F8 FFD3                    	call rbx
 19495 0000F7FA EB08                    	jmp .L_if_end_56c6
 19496                                  	.L_if_else_56c6:
 19497 0000F7FC 488D0425[02000000]      	lea rax, [2 + L_constants]
 19498                                  	.L_if_end_56c6:
 19499 0000F804 483D[02000000]          	cmp rax, sob_boolean_false
 19500 0000F80A 7425                    	je .L_if_else_56c5
 19501 0000F80C 488B4528                	mov rax, PARAM(1)
 19502 0000F810 50                      	push rax
 19503 0000F811 6A01                    	push 1
 19504 0000F813 488B0425[80000000]      	mov rax, qword [free_var_16]
 19505                                  	assert_closure(rax)
    42 0000F81B 803805              <1>  cmp byte [%1], %2
    43 0000F81E 0F8510490000        <1>  jne L_error_incorrect_type
 19506 0000F824 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19507 0000F828 53                      	push rbx
 19508 0000F829 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19509 0000F82D FFD3                    	call rbx
 19510 0000F82F EB30                    	jmp .L_if_end_56c5
 19511                                  	.L_if_else_56c5:
 19512 0000F831 488D0425[7B010000]      	lea rax, [379 + L_constants]
 19513 0000F839 50                      	push rax
 19514 0000F83A 488D0425[72010000]      	lea rax, [370 + L_constants]
 19515 0000F842 50                      	push rax
 19516 0000F843 6A02                    	push 2
 19517 0000F845 488B0425[30010000]      	mov rax, qword [free_var_38]
 19518                                  	assert_closure(rax)
    42 0000F84D 803805              <1>  cmp byte [%1], %2
    43 0000F850 0F85DE480000        <1>  jne L_error_incorrect_type
 19519 0000F856 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19520 0000F85A 53                      	push rbx
 19521 0000F85B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19522 0000F85F FFD3                    	call rbx
 19523                                  	.L_if_end_56c5:
 19524                                  	.L_if_end_56c4:
 19525 0000F861 50                      	push rax
 19526 0000F862 6A01                    	push 1
 19527 0000F864 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19528 0000F869 E846300000              	call malloc
 19529 0000F86E 50                      	push rax
 19530 0000F86F BF10000000              	mov rdi, 8 * 2	; new rib
 19531 0000F874 E83B300000              	call malloc
 19532 0000F879 50                      	push rax
 19533 0000F87A BF18000000              	mov rdi, 8 * 3	; extended env
 19534 0000F87F E830300000              	call malloc
 19535 0000F884 488B7D10                	mov rdi, ENV
 19536 0000F888 BE00000000              	mov rsi, 0
 19537 0000F88D BA01000000              	mov rdx, 1
 19538                                  .L_lambda_simple_env_loop_4fac:	; ext_env[i + 1] <-- env[i]
 19539 0000F892 4883FE02                	cmp rsi, 2
 19540 0000F896 7410                    	je .L_lambda_simple_env_end_4fac
 19541 0000F898 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 19542 0000F89C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19543 0000F8A0 48FFC6                  	inc rsi
 19544 0000F8A3 48FFC2                  	inc rdx
 19545 0000F8A6 EBEA                    	jmp .L_lambda_simple_env_loop_4fac
 19546                                  .L_lambda_simple_env_end_4fac:
 19547 0000F8A8 5B                      	pop rbx
 19548 0000F8A9 BE00000000              	mov rsi, 0
 19549                                  .L_lambda_simple_params_loop_4fac:	; copy params
 19550 0000F8AE 4883FE02                	cmp rsi, 2
 19551 0000F8B2 740E                    	je .L_lambda_simple_params_end_4fac
 19552 0000F8B4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19553 0000F8B9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19554 0000F8BD 48FFC6                  	inc rsi
 19555 0000F8C0 EBEC                    	jmp .L_lambda_simple_params_loop_4fac
 19556                                  .L_lambda_simple_params_end_4fac:
 19557 0000F8C2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19558 0000F8C5 4889C3                  	mov rbx, rax
 19559 0000F8C8 58                      	pop rax
 19560 0000F8C9 C60005                  	mov byte [rax], T_closure
 19561 0000F8CC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19562 0000F8D0 48C74009[DDF80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fac
 19563 0000F8D8 E9A6000000              	jmp .L_lambda_simple_end_4fac
 19564                                  .L_lambda_simple_code_4fac:	; lambda-simple body
 19565 0000F8DD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19566 0000F8E3 740B                    	je .L_lambda_simple_arity_check_ok_4fac
 19567 0000F8E5 FF742410                	push qword [rsp + 8 * 2]
 19568 0000F8E9 6A01                    	push 1
 19569 0000F8EB E97D2F0000              	jmp L_error_incorrect_arity_simple
 19570                                  .L_lambda_simple_arity_check_ok_4fac:
 19571 0000F8F0 C8000000                	enter 0, 0
 19572 0000F8F4 488B4520                	mov rax, PARAM(0)
 19573 0000F8F8 50                      	push rax
 19574 0000F8F9 488B4510                	mov rax, qword [rbp + 8*2]
 19575 0000F8FD 488B00                  	mov rax, qword [rax + 8*0]
 19576 0000F900 488B00                  	mov rax, qword [rax + 8*0]
 19577 0000F903 50                      	push rax
 19578 0000F904 6A02                    	push 2
 19579 0000F906 488B4510                	mov rax, qword [rbp + 8*2]
 19580 0000F90A 488B4008                	mov rax, qword [rax + 8*1]
 19581 0000F90E 488B00                  	mov rax, qword [rax + 8*0]
 19582                                  	assert_closure(rax)
    42 0000F911 803805              <1>  cmp byte [%1], %2
    43 0000F914 0F851A480000        <1>  jne L_error_incorrect_type
 19583 0000F91A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19584 0000F91E 53                      	push rbx
 19585 0000F91F FF7508                  	push RET_ADDR
 19586 0000F922 488B7D18                	mov rdi, COUNT
 19587 0000F926 4883C703                	add rdi, 3
 19588 0000F92A 48C1E703                	shl rdi, 3
 19589 0000F92E 4801EF                  	add rdi, rbp
 19590 0000F931 488B6D00                	mov rbp, OLD_RDP
 19591 0000F935 BE00000000              	mov rsi, 0
 19592                                  .L_tc_recycle_frame_loop_5d39:	 ; start recycle frame loop
 19593 0000F93A 4883FE05                	cmp rsi, 5
 19594 0000F93E 7427                    	je .L_tc_recycle_frame_done_5d39
 19595 0000F940 B904000000              	mov rcx, 4
 19596 0000F945 4829F1                  	sub rcx, rsi
 19597 0000F948 48C1E103                	shl rcx, 3
 19598 0000F94C 4801E1                  	add rcx, rsp ; rcx is the address to move
 19599 0000F94F 4889F3                  	mov rbx, rsi
 19600 0000F952 48C1E303                	shl rbx, 3
 19601 0000F956 48F7DB                  	neg rbx
 19602 0000F959 4801FB                  	add rbx, rdi ;rbx is the address to move to
 19603 0000F95C 488B09                  	mov rcx, [rcx]
 19604 0000F95F 48890B                  	mov [rbx], rcx
 19605 0000F962 48FFC6                  	inc rsi
 19606 0000F965 EBD3                    	jmp .L_tc_recycle_frame_loop_5d39
 19607                                  .L_tc_recycle_frame_done_5d39:	 ; end recycle frame loop
 19608 0000F967 BB04000000              	mov rbx, 4
 19609 0000F96C 48C1E303                	shl rbx, 3
 19610 0000F970 48F7DB                  	neg rbx
 19611 0000F973 4801FB                  	add rbx, rdi
 19612 0000F976 4889DC                  	mov rsp, rbx
 19613 0000F979 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19614 0000F97D FFE3                    	jmp rbx
 19615 0000F97F C9                      	leave
 19616 0000F980 C21800                  	ret 8 * (2 + 1)
 19617                                  .L_lambda_simple_end_4fac:	; new closure is in rax
 19618                                  	assert_closure(rax)
    42 0000F983 803805              <1>  cmp byte [%1], %2
    43 0000F986 0F85A8470000        <1>  jne L_error_incorrect_type
 19619 0000F98C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19620 0000F990 53                      	push rbx
 19621 0000F991 FF7508                  	push RET_ADDR
 19622 0000F994 488B7D18                	mov rdi, COUNT
 19623 0000F998 4883C703                	add rdi, 3
 19624 0000F99C 48C1E703                	shl rdi, 3
 19625 0000F9A0 4801EF                  	add rdi, rbp
 19626 0000F9A3 488B6D00                	mov rbp, OLD_RDP
 19627 0000F9A7 BE00000000              	mov rsi, 0
 19628                                  .L_tc_recycle_frame_loop_5d38:	 ; start recycle frame loop
 19629 0000F9AC 4883FE04                	cmp rsi, 4
 19630 0000F9B0 7427                    	je .L_tc_recycle_frame_done_5d38
 19631 0000F9B2 B903000000              	mov rcx, 3
 19632 0000F9B7 4829F1                  	sub rcx, rsi
 19633 0000F9BA 48C1E103                	shl rcx, 3
 19634 0000F9BE 4801E1                  	add rcx, rsp ; rcx is the address to move
 19635 0000F9C1 4889F3                  	mov rbx, rsi
 19636 0000F9C4 48C1E303                	shl rbx, 3
 19637 0000F9C8 48F7DB                  	neg rbx
 19638 0000F9CB 4801FB                  	add rbx, rdi ;rbx is the address to move to
 19639 0000F9CE 488B09                  	mov rcx, [rcx]
 19640 0000F9D1 48890B                  	mov [rbx], rcx
 19641 0000F9D4 48FFC6                  	inc rsi
 19642 0000F9D7 EBD3                    	jmp .L_tc_recycle_frame_loop_5d38
 19643                                  .L_tc_recycle_frame_done_5d38:	 ; end recycle frame loop
 19644 0000F9D9 BB03000000              	mov rbx, 3
 19645 0000F9DE 48C1E303                	shl rbx, 3
 19646 0000F9E2 48F7DB                  	neg rbx
 19647 0000F9E5 4801FB                  	add rbx, rdi
 19648 0000F9E8 4889DC                  	mov rsp, rbx
 19649 0000F9EB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19650 0000F9EF FFE3                    	jmp rbx
 19651 0000F9F1 C9                      	leave
 19652 0000F9F2 C22000                  	ret AND_KILL_FRAME(2)
 19653                                  .L_lambda_opt_end_0c99:	; new closure is in rax
 19654 0000F9F5 C9                      	leave
 19655 0000F9F6 C21800                  	ret 8 * (2 + 1)
 19656                                  .L_lambda_simple_end_4fab:	; new closure is in rax
 19657                                  	assert_closure(rax)
    42 0000F9F9 803805              <1>  cmp byte [%1], %2
    43 0000F9FC 0F8532470000        <1>  jne L_error_incorrect_type
 19658 0000FA02 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19659 0000FA06 53                      	push rbx
 19660 0000FA07 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19661 0000FA0B FFD3                    	call rbx
 19662 0000FA0D 48890425[98010000]      	mov qword [free_var_51], rax
 19663 0000FA15 48B8-                   	mov rax, sob_void
 19663 0000FA17 [0000000000000000] 
 19664                                  
 19665 0000FA1F 4889C7                  	mov rdi, rax
 19666 0000FA22 E89E2E0000              	call print_sexpr_if_not_void
 19667                                  
 19668 0000FA27 488B0425[A0010000]      	mov rax, qword [free_var_52]
 19669 0000FA2F 50                      	push rax
 19670 0000FA30 6A01                    	push 1
 19671 0000FA32 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19672 0000FA37 E8782E0000              	call malloc
 19673 0000FA3C 50                      	push rax
 19674 0000FA3D BF00000000              	mov rdi, 8 * 0	; new rib
 19675 0000FA42 E86D2E0000              	call malloc
 19676 0000FA47 50                      	push rax
 19677 0000FA48 BF08000000              	mov rdi, 8 * 1	; extended env
 19678 0000FA4D E8622E0000              	call malloc
 19679 0000FA52 488B7D10                	mov rdi, ENV
 19680 0000FA56 BE00000000              	mov rsi, 0
 19681 0000FA5B BA01000000              	mov rdx, 1
 19682                                  .L_lambda_simple_env_loop_4fad:	; ext_env[i + 1] <-- env[i]
 19683 0000FA60 4883FE00                	cmp rsi, 0
 19684 0000FA64 7410                    	je .L_lambda_simple_env_end_4fad
 19685 0000FA66 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 19686 0000FA6A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19687 0000FA6E 48FFC6                  	inc rsi
 19688 0000FA71 48FFC2                  	inc rdx
 19689 0000FA74 EBEA                    	jmp .L_lambda_simple_env_loop_4fad
 19690                                  .L_lambda_simple_env_end_4fad:
 19691 0000FA76 5B                      	pop rbx
 19692 0000FA77 BE00000000              	mov rsi, 0
 19693                                  .L_lambda_simple_params_loop_4fad:	; copy params
 19694 0000FA7C 4883FE00                	cmp rsi, 0
 19695 0000FA80 740E                    	je .L_lambda_simple_params_end_4fad
 19696 0000FA82 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19697 0000FA87 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19698 0000FA8B 48FFC6                  	inc rsi
 19699 0000FA8E EBEC                    	jmp .L_lambda_simple_params_loop_4fad
 19700                                  .L_lambda_simple_params_end_4fad:
 19701 0000FA90 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19702 0000FA93 4889C3                  	mov rbx, rax
 19703 0000FA96 58                      	pop rax
 19704 0000FA97 C60005                  	mov byte [rax], T_closure
 19705 0000FA9A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19706 0000FA9E 48C74009[ABFA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fad
 19707 0000FAA6 E92D040000              	jmp .L_lambda_simple_end_4fad
 19708                                  .L_lambda_simple_code_4fad:	; lambda-simple body
 19709 0000FAAB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19710 0000FAB1 740B                    	je .L_lambda_simple_arity_check_ok_4fad
 19711 0000FAB3 FF742410                	push qword [rsp + 8 * 2]
 19712 0000FAB7 6A01                    	push 1
 19713 0000FAB9 E9AF2D0000              	jmp L_error_incorrect_arity_simple
 19714                                  .L_lambda_simple_arity_check_ok_4fad:
 19715 0000FABE C8000000                	enter 0, 0
 19716 0000FAC2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19717 0000FAC7 E8E82D0000              	call malloc
 19718 0000FACC 50                      	push rax
 19719 0000FACD BF08000000              	mov rdi, 8 * 1	; new rib
 19720 0000FAD2 E8DD2D0000              	call malloc
 19721 0000FAD7 50                      	push rax
 19722 0000FAD8 BF10000000              	mov rdi, 8 * 2	; extended env
 19723 0000FADD E8D22D0000              	call malloc
 19724 0000FAE2 488B7D10                	mov rdi, ENV
 19725 0000FAE6 BE00000000              	mov rsi, 0
 19726 0000FAEB BA01000000              	mov rdx, 1
 19727                                  .L_lambda_opt_env_loop_0c9a:	; ext_env[i + 1] <-- env[i]
 19728 0000FAF0 4883FE01                	cmp rsi, 1
 19729 0000FAF4 7410                    	je .L_lambda_opt_env_end_0c9a
 19730 0000FAF6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19731 0000FAFA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19732 0000FAFE 48FFC6                  	inc rsi
 19733 0000FB01 48FFC2                  	inc rdx
 19734 0000FB04 EBEA                    	jmp .L_lambda_opt_env_loop_0c9a
 19735                                  .L_lambda_opt_env_end_0c9a:
 19736 0000FB06 5B                      	pop rbx
 19737 0000FB07 BE00000000              	mov rsi, 0
 19738                                  .L_lambda_opt_params_loop_0c9a:	; copy params
 19739 0000FB0C 4883FE01                	cmp rsi, 1
 19740 0000FB10 740E                    	je .L_lambda_opt_params_end_0c9a
 19741 0000FB12 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19742 0000FB17 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19743 0000FB1B 48FFC6                  	inc rsi
 19744 0000FB1E EBEC                    	jmp .L_lambda_opt_params_loop_0c9a
 19745                                  .L_lambda_opt_params_end_0c9a:
 19746 0000FB20 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19747 0000FB23 4889C3                  	mov rbx, rax
 19748 0000FB26 58                      	pop rax
 19749 0000FB27 C60005                  	mov byte [rax], T_closure
 19750 0000FB2A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19751 0000FB2E 48C74009[3BFB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c9a
 19752 0000FB36 E999030000              	jmp .L_lambda_opt_end_0c9a
 19753                                  .L_lambda_opt_code_0c9a:	; lambda-opt body
 19754 0000FB3B 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 19755 0000FB40 4889FB                  	mov rbx, rdi
 19756 0000FB43 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 19757 0000FB47 4883FB00                	cmp rbx, 0
 19758 0000FB4B 7F45                    	jg .L_lambda_opt_arity_check_more_0c9a
 19759                                  .L_lambda_opt_arity_check_exact_0c9a:	 ; if params in opt is exact
 19760 0000FB4D 4883EC08                	sub rsp, 8
 19761 0000FB51 BE00000000              	mov rsi, 0 ; index
 19762                                  .L_lambda_opt_stack_enlarge_loop_0c9a:	 ; stack loop enlarge start
 19763 0000FB56 4883FE04                	cmp rsi, 4
 19764 0000FB5A 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c9a
 19765 0000FB5C 4889F7                  	mov rdi, rsi
 19766 0000FB5F 48FFC7                  	inc rdi
 19767 0000FB62 48C1E703                	shl rdi, 3
 19768 0000FB66 4801E7                  	add rdi, rsp
 19769 0000FB69 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 19770 0000FB6C 4883EB08                	sub rbx, 8
 19771 0000FB70 488B3F                  	mov rdi, [rdi]
 19772 0000FB73 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 19773 0000FB76 48FFC6                  	inc rsi
 19774 0000FB79 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c9a
 19775                                  .L_lambda_opt_stack_enlarge_loop_exit_0c9a:	 ; end of stack enlarge loop
 19776 0000FB7B 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 19776 0000FB80 [01000000]         
 19777 0000FB84 48C744241002000000      	mov qword [rsp + 2*8], 2
 19778 0000FB8D E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c9a
 19779                                  .L_lambda_opt_arity_check_more_0c9a:	 ; if params in opt is more
 19780 0000FB92 48B8-                   	mov rax, sob_nil
 19780 0000FB94 [0100000000000000] 
 19781 0000FB9C 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 19782 0000FB9F 48FFCE                  	dec rsi
 19783                                  .L_lambda_opt_list_create_loop_0c9a:	; start of list creation loop
 19784 0000FBA2 4883FEFF                	cmp rsi, -1
 19785 0000FBA6 7422                    	je .L_lambda_opt_list_create_loop_exit_0c9a
 19786 0000FBA8 488D4E04                	lea rcx, [rsi + (3 + 1)]
 19787 0000FBAC 48C1E103                	shl rcx, 3
 19788 0000FBB0 4801E1                  	add rcx, rsp
 19789 0000FBB3 488B09                  	mov rcx, [rcx]
 19790 0000FBB6 56                      	push rsi ; save params
 19791 0000FBB7 53                      	push rbx
 19792                                  
 19793 0000FBB8 50                      	push rax ; cdr
 19794 0000FBB9 51                      	push rcx ; car
 19795 0000FBBA 6A02                    	push qword 2 ; push num of args
 19796 0000FBBC 6A01                    	push qword 1 ; push garbage as env
 19797 0000FBBE E878360000              	call L_code_ptr_cons
 19798                                  
 19799 0000FBC3 5B                      	pop rbx ; restore params
 19800 0000FBC4 5E                      	pop rsi
 19801 0000FBC5 48FFCE                  	dec rsi
 19802 0000FBC8 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c9a
 19803                                  .L_lambda_opt_list_create_loop_exit_0c9a:	; end of list creation loop
 19804 0000FBCA 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 19805 0000FBCF 4883C302                	add rbx, 2
 19806 0000FBD3 4889DF                  	mov rdi, rbx
 19807 0000FBD6 48C1E703                	shl rdi,3
 19808 0000FBDA 4801E7                  	add rdi, rsp
 19809 0000FBDD 488907                  	mov [rdi], rax
 19810 0000FBE0 BE00000000              	mov rsi, 0 ;index
 19811                                  .L_lambda_opt_stack_shrink_loop_0c9a:	; start of stack shrink loop
 19812 0000FBE5 4883FE04                	cmp rsi, 4
 19813 0000FBE9 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c9a
 19814 0000FBEB BF03000000              	mov rdi, 3
 19815 0000FBF0 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 19816 0000FBF3 4889D9                  	mov rcx, rbx
 19817 0000FBF6 4829F1                  	sub rcx, rsi
 19818 0000FBF9 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 19819 0000FBFC 4889FA                  	mov rdx, rdi
 19820 0000FBFF 48C1E203                	shl rdx, 3
 19821 0000FC03 4801E2                  	add rdx, rsp
 19822 0000FC06 48C1E103                	shl rcx, 3
 19823 0000FC0A 4801E1                  	add rcx, rsp
 19824 0000FC0D 488B12                  	mov rdx, [rdx]
 19825 0000FC10 488911                  	mov [rcx], rdx
 19826 0000FC13 48FFC6                  	inc rsi
 19827 0000FC16 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c9a
 19828                                  .L_lambda_opt_stack_shrink_loop_exit_0c9a:	; end of stack shrink loop
 19829 0000FC18 4883EB02                	sub rbx, 2 ; rbx has number of args
 19830 0000FC1C 4883EB02                	sub rbx, 2
 19831 0000FC20 48C1E303                	shl rbx, 3
 19832 0000FC24 4801DC                  	add rsp, rbx
 19833 0000FC27 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 19834                                  .L_lambda_opt_stack_adjusted_0c9a:
 19835 0000FC30 C8000000                	enter 0, 0
 19836 0000FC34 488B4528                	mov rax, PARAM(1)
 19837 0000FC38 50                      	push rax
 19838 0000FC39 6A01                    	push 1
 19839 0000FC3B 488B0425[00000000]      	mov rax, qword [free_var_0]
 19840                                  	assert_closure(rax)
    42 0000FC43 803805              <1>  cmp byte [%1], %2
    43 0000FC46 0F85E8440000        <1>  jne L_error_incorrect_type
 19841 0000FC4C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19842 0000FC50 53                      	push rbx
 19843 0000FC51 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19844 0000FC55 FFD3                    	call rbx
 19845 0000FC57 483D[02000000]          	cmp rax, sob_boolean_false
 19846 0000FC5D 740D                    	je .L_if_else_56c7
 19847 0000FC5F 488D0425[04000000]      	lea rax, [4 + L_constants]
 19848 0000FC67 E9D4000000              	jmp .L_if_end_56c7
 19849                                  	.L_if_else_56c7:
 19850 0000FC6C 488B4528                	mov rax, PARAM(1)
 19851 0000FC70 50                      	push rax
 19852 0000FC71 6A01                    	push 1
 19853 0000FC73 488B0425[08000000]      	mov rax, qword [free_var_1]
 19854                                  	assert_closure(rax)
    42 0000FC7B 803805              <1>  cmp byte [%1], %2
    43 0000FC7E 0F85B0440000        <1>  jne L_error_incorrect_type
 19855 0000FC84 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19856 0000FC88 53                      	push rbx
 19857 0000FC89 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19858 0000FC8D FFD3                    	call rbx
 19859 0000FC8F 483D[02000000]          	cmp rax, sob_boolean_false
 19860 0000FC95 7444                    	je .L_if_else_56c9
 19861 0000FC97 488B4528                	mov rax, PARAM(1)
 19862 0000FC9B 50                      	push rax
 19863 0000FC9C 6A01                    	push 1
 19864 0000FC9E 488B0425[88000000]      	mov rax, qword [free_var_17]
 19865                                  	assert_closure(rax)
    42 0000FCA6 803805              <1>  cmp byte [%1], %2
    43 0000FCA9 0F8585440000        <1>  jne L_error_incorrect_type
 19866 0000FCAF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19867 0000FCB3 53                      	push rbx
 19868 0000FCB4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19869 0000FCB8 FFD3                    	call rbx
 19870 0000FCBA 50                      	push rax
 19871 0000FCBB 6A01                    	push 1
 19872 0000FCBD 488B0425[00000000]      	mov rax, qword [free_var_0]
 19873                                  	assert_closure(rax)
    42 0000FCC5 803805              <1>  cmp byte [%1], %2
    43 0000FCC8 0F8566440000        <1>  jne L_error_incorrect_type
 19874 0000FCCE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19875 0000FCD2 53                      	push rbx
 19876 0000FCD3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19877 0000FCD7 FFD3                    	call rbx
 19878 0000FCD9 EB08                    	jmp .L_if_end_56c9
 19879                                  	.L_if_else_56c9:
 19880 0000FCDB 488D0425[02000000]      	lea rax, [2 + L_constants]
 19881                                  	.L_if_end_56c9:
 19882 0000FCE3 483D[02000000]          	cmp rax, sob_boolean_false
 19883 0000FCE9 7425                    	je .L_if_else_56c8
 19884 0000FCEB 488B4528                	mov rax, PARAM(1)
 19885 0000FCEF 50                      	push rax
 19886 0000FCF0 6A01                    	push 1
 19887 0000FCF2 488B0425[80000000]      	mov rax, qword [free_var_16]
 19888                                  	assert_closure(rax)
    42 0000FCFA 803805              <1>  cmp byte [%1], %2
    43 0000FCFD 0F8531440000        <1>  jne L_error_incorrect_type
 19889 0000FD03 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19890 0000FD07 53                      	push rbx
 19891 0000FD08 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19892 0000FD0C FFD3                    	call rbx
 19893 0000FD0E EB30                    	jmp .L_if_end_56c8
 19894                                  	.L_if_else_56c8:
 19895 0000FD10 488D0425[CC010000]      	lea rax, [460 + L_constants]
 19896 0000FD18 50                      	push rax
 19897 0000FD19 488D0425[C3010000]      	lea rax, [451 + L_constants]
 19898 0000FD21 50                      	push rax
 19899 0000FD22 6A02                    	push 2
 19900 0000FD24 488B0425[30010000]      	mov rax, qword [free_var_38]
 19901                                  	assert_closure(rax)
    42 0000FD2C 803805              <1>  cmp byte [%1], %2
    43 0000FD2F 0F85FF430000        <1>  jne L_error_incorrect_type
 19902 0000FD35 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19903 0000FD39 53                      	push rbx
 19904 0000FD3A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19905 0000FD3E FFD3                    	call rbx
 19906                                  	.L_if_end_56c8:
 19907                                  	.L_if_end_56c7:
 19908 0000FD40 50                      	push rax
 19909 0000FD41 6A01                    	push 1
 19910 0000FD43 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19911 0000FD48 E8672B0000              	call malloc
 19912 0000FD4D 50                      	push rax
 19913 0000FD4E BF10000000              	mov rdi, 8 * 2	; new rib
 19914 0000FD53 E85C2B0000              	call malloc
 19915 0000FD58 50                      	push rax
 19916 0000FD59 BF18000000              	mov rdi, 8 * 3	; extended env
 19917 0000FD5E E8512B0000              	call malloc
 19918 0000FD63 488B7D10                	mov rdi, ENV
 19919 0000FD67 BE00000000              	mov rsi, 0
 19920 0000FD6C BA01000000              	mov rdx, 1
 19921                                  .L_lambda_simple_env_loop_4fae:	; ext_env[i + 1] <-- env[i]
 19922 0000FD71 4883FE02                	cmp rsi, 2
 19923 0000FD75 7410                    	je .L_lambda_simple_env_end_4fae
 19924 0000FD77 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 19925 0000FD7B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19926 0000FD7F 48FFC6                  	inc rsi
 19927 0000FD82 48FFC2                  	inc rdx
 19928 0000FD85 EBEA                    	jmp .L_lambda_simple_env_loop_4fae
 19929                                  .L_lambda_simple_env_end_4fae:
 19930 0000FD87 5B                      	pop rbx
 19931 0000FD88 BE00000000              	mov rsi, 0
 19932                                  .L_lambda_simple_params_loop_4fae:	; copy params
 19933 0000FD8D 4883FE02                	cmp rsi, 2
 19934 0000FD91 740E                    	je .L_lambda_simple_params_end_4fae
 19935 0000FD93 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19936 0000FD98 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19937 0000FD9C 48FFC6                  	inc rsi
 19938 0000FD9F EBEC                    	jmp .L_lambda_simple_params_loop_4fae
 19939                                  .L_lambda_simple_params_end_4fae:
 19940 0000FDA1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19941 0000FDA4 4889C3                  	mov rbx, rax
 19942 0000FDA7 58                      	pop rax
 19943 0000FDA8 C60005                  	mov byte [rax], T_closure
 19944 0000FDAB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19945 0000FDAF 48C74009[BCFD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fae
 19946 0000FDB7 E9A6000000              	jmp .L_lambda_simple_end_4fae
 19947                                  .L_lambda_simple_code_4fae:	; lambda-simple body
 19948 0000FDBC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19949 0000FDC2 740B                    	je .L_lambda_simple_arity_check_ok_4fae
 19950 0000FDC4 FF742410                	push qword [rsp + 8 * 2]
 19951 0000FDC8 6A01                    	push 1
 19952 0000FDCA E99E2A0000              	jmp L_error_incorrect_arity_simple
 19953                                  .L_lambda_simple_arity_check_ok_4fae:
 19954 0000FDCF C8000000                	enter 0, 0
 19955 0000FDD3 488B4520                	mov rax, PARAM(0)
 19956 0000FDD7 50                      	push rax
 19957 0000FDD8 488B4510                	mov rax, qword [rbp + 8*2]
 19958 0000FDDC 488B00                  	mov rax, qword [rax + 8*0]
 19959 0000FDDF 488B00                  	mov rax, qword [rax + 8*0]
 19960 0000FDE2 50                      	push rax
 19961 0000FDE3 6A02                    	push 2
 19962 0000FDE5 488B4510                	mov rax, qword [rbp + 8*2]
 19963 0000FDE9 488B4008                	mov rax, qword [rax + 8*1]
 19964 0000FDED 488B00                  	mov rax, qword [rax + 8*0]
 19965                                  	assert_closure(rax)
    42 0000FDF0 803805              <1>  cmp byte [%1], %2
    43 0000FDF3 0F853B430000        <1>  jne L_error_incorrect_type
 19966 0000FDF9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19967 0000FDFD 53                      	push rbx
 19968 0000FDFE FF7508                  	push RET_ADDR
 19969 0000FE01 488B7D18                	mov rdi, COUNT
 19970 0000FE05 4883C703                	add rdi, 3
 19971 0000FE09 48C1E703                	shl rdi, 3
 19972 0000FE0D 4801EF                  	add rdi, rbp
 19973 0000FE10 488B6D00                	mov rbp, OLD_RDP
 19974 0000FE14 BE00000000              	mov rsi, 0
 19975                                  .L_tc_recycle_frame_loop_5d3b:	 ; start recycle frame loop
 19976 0000FE19 4883FE05                	cmp rsi, 5
 19977 0000FE1D 7427                    	je .L_tc_recycle_frame_done_5d3b
 19978 0000FE1F B904000000              	mov rcx, 4
 19979 0000FE24 4829F1                  	sub rcx, rsi
 19980 0000FE27 48C1E103                	shl rcx, 3
 19981 0000FE2B 4801E1                  	add rcx, rsp ; rcx is the address to move
 19982 0000FE2E 4889F3                  	mov rbx, rsi
 19983 0000FE31 48C1E303                	shl rbx, 3
 19984 0000FE35 48F7DB                  	neg rbx
 19985 0000FE38 4801FB                  	add rbx, rdi ;rbx is the address to move to
 19986 0000FE3B 488B09                  	mov rcx, [rcx]
 19987 0000FE3E 48890B                  	mov [rbx], rcx
 19988 0000FE41 48FFC6                  	inc rsi
 19989 0000FE44 EBD3                    	jmp .L_tc_recycle_frame_loop_5d3b
 19990                                  .L_tc_recycle_frame_done_5d3b:	 ; end recycle frame loop
 19991 0000FE46 BB04000000              	mov rbx, 4
 19992 0000FE4B 48C1E303                	shl rbx, 3
 19993 0000FE4F 48F7DB                  	neg rbx
 19994 0000FE52 4801FB                  	add rbx, rdi
 19995 0000FE55 4889DC                  	mov rsp, rbx
 19996 0000FE58 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19997 0000FE5C FFE3                    	jmp rbx
 19998 0000FE5E C9                      	leave
 19999 0000FE5F C21800                  	ret 8 * (2 + 1)
 20000                                  .L_lambda_simple_end_4fae:	; new closure is in rax
 20001                                  	assert_closure(rax)
    42 0000FE62 803805              <1>  cmp byte [%1], %2
    43 0000FE65 0F85C9420000        <1>  jne L_error_incorrect_type
 20002 0000FE6B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20003 0000FE6F 53                      	push rbx
 20004 0000FE70 FF7508                  	push RET_ADDR
 20005 0000FE73 488B7D18                	mov rdi, COUNT
 20006 0000FE77 4883C703                	add rdi, 3
 20007 0000FE7B 48C1E703                	shl rdi, 3
 20008 0000FE7F 4801EF                  	add rdi, rbp
 20009 0000FE82 488B6D00                	mov rbp, OLD_RDP
 20010 0000FE86 BE00000000              	mov rsi, 0
 20011                                  .L_tc_recycle_frame_loop_5d3a:	 ; start recycle frame loop
 20012 0000FE8B 4883FE04                	cmp rsi, 4
 20013 0000FE8F 7427                    	je .L_tc_recycle_frame_done_5d3a
 20014 0000FE91 B903000000              	mov rcx, 3
 20015 0000FE96 4829F1                  	sub rcx, rsi
 20016 0000FE99 48C1E103                	shl rcx, 3
 20017 0000FE9D 4801E1                  	add rcx, rsp ; rcx is the address to move
 20018 0000FEA0 4889F3                  	mov rbx, rsi
 20019 0000FEA3 48C1E303                	shl rbx, 3
 20020 0000FEA7 48F7DB                  	neg rbx
 20021 0000FEAA 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20022 0000FEAD 488B09                  	mov rcx, [rcx]
 20023 0000FEB0 48890B                  	mov [rbx], rcx
 20024 0000FEB3 48FFC6                  	inc rsi
 20025 0000FEB6 EBD3                    	jmp .L_tc_recycle_frame_loop_5d3a
 20026                                  .L_tc_recycle_frame_done_5d3a:	 ; end recycle frame loop
 20027 0000FEB8 BB03000000              	mov rbx, 3
 20028 0000FEBD 48C1E303                	shl rbx, 3
 20029 0000FEC1 48F7DB                  	neg rbx
 20030 0000FEC4 4801FB                  	add rbx, rdi
 20031 0000FEC7 4889DC                  	mov rsp, rbx
 20032 0000FECA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20033 0000FECE FFE3                    	jmp rbx
 20034 0000FED0 C9                      	leave
 20035 0000FED1 C22000                  	ret AND_KILL_FRAME(2)
 20036                                  .L_lambda_opt_end_0c9a:	; new closure is in rax
 20037 0000FED4 C9                      	leave
 20038 0000FED5 C21800                  	ret 8 * (2 + 1)
 20039                                  .L_lambda_simple_end_4fad:	; new closure is in rax
 20040                                  	assert_closure(rax)
    42 0000FED8 803805              <1>  cmp byte [%1], %2
    43 0000FEDB 0F8553420000        <1>  jne L_error_incorrect_type
 20041 0000FEE1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20042 0000FEE5 53                      	push rbx
 20043 0000FEE6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20044 0000FEEA FFD3                    	call rbx
 20045 0000FEEC 48890425[A0010000]      	mov qword [free_var_52], rax
 20046 0000FEF4 48B8-                   	mov rax, sob_void
 20046 0000FEF6 [0000000000000000] 
 20047                                  
 20048 0000FEFE 4889C7                  	mov rdi, rax
 20049 0000FF01 E8BF290000              	call print_sexpr_if_not_void
 20050                                  
 20051 0000FF06 488D0425[17000000]      	lea rax, [23 + L_constants]
 20052 0000FF0E 50                      	push rax
 20053 0000FF0F 6A01                    	push 1
 20054 0000FF11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20055 0000FF16 E899290000              	call malloc
 20056 0000FF1B 50                      	push rax
 20057 0000FF1C BF00000000              	mov rdi, 8 * 0	; new rib
 20058 0000FF21 E88E290000              	call malloc
 20059 0000FF26 50                      	push rax
 20060 0000FF27 BF08000000              	mov rdi, 8 * 1	; extended env
 20061 0000FF2C E883290000              	call malloc
 20062 0000FF31 488B7D10                	mov rdi, ENV
 20063 0000FF35 BE00000000              	mov rsi, 0
 20064 0000FF3A BA01000000              	mov rdx, 1
 20065                                  .L_lambda_simple_env_loop_4faf:	; ext_env[i + 1] <-- env[i]
 20066 0000FF3F 4883FE00                	cmp rsi, 0
 20067 0000FF43 7410                    	je .L_lambda_simple_env_end_4faf
 20068 0000FF45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 20069 0000FF49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20070 0000FF4D 48FFC6                  	inc rsi
 20071 0000FF50 48FFC2                  	inc rdx
 20072 0000FF53 EBEA                    	jmp .L_lambda_simple_env_loop_4faf
 20073                                  .L_lambda_simple_env_end_4faf:
 20074 0000FF55 5B                      	pop rbx
 20075 0000FF56 BE00000000              	mov rsi, 0
 20076                                  .L_lambda_simple_params_loop_4faf:	; copy params
 20077 0000FF5B 4883FE00                	cmp rsi, 0
 20078 0000FF5F 740E                    	je .L_lambda_simple_params_end_4faf
 20079 0000FF61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20080 0000FF66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20081 0000FF6A 48FFC6                  	inc rsi
 20082 0000FF6D EBEC                    	jmp .L_lambda_simple_params_loop_4faf
 20083                                  .L_lambda_simple_params_end_4faf:
 20084 0000FF6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20085 0000FF72 4889C3                  	mov rbx, rax
 20086 0000FF75 58                      	pop rax
 20087 0000FF76 C60005                  	mov byte [rax], T_closure
 20088 0000FF79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20089 0000FF7D 48C74009[8AFF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4faf
 20090 0000FF85 E984040000              	jmp .L_lambda_simple_end_4faf
 20091                                  .L_lambda_simple_code_4faf:	; lambda-simple body
 20092 0000FF8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20093 0000FF90 740B                    	je .L_lambda_simple_arity_check_ok_4faf
 20094 0000FF92 FF742410                	push qword [rsp + 8 * 2]
 20095 0000FF96 6A01                    	push 1
 20096 0000FF98 E9D0280000              	jmp L_error_incorrect_arity_simple
 20097                                  .L_lambda_simple_arity_check_ok_4faf:
 20098 0000FF9D C8000000                	enter 0, 0
 20099 0000FFA1 BF11000000              	mov qword rdi, (1 + 8 + 8)
 20100 0000FFA6 E809290000              	call malloc
 20101 0000FFAB 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 20102 0000FFAF 48B8-                   	mov rax, sob_void
 20102 0000FFB1 [0000000000000000] 
 20103                                  
 20104 0000FFB9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20105 0000FFBE E8F1280000              	call malloc
 20106 0000FFC3 50                      	push rax
 20107 0000FFC4 BF08000000              	mov rdi, 8 * 1	; new rib
 20108 0000FFC9 E8E6280000              	call malloc
 20109 0000FFCE 50                      	push rax
 20110 0000FFCF BF10000000              	mov rdi, 8 * 2	; extended env
 20111 0000FFD4 E8DB280000              	call malloc
 20112 0000FFD9 488B7D10                	mov rdi, ENV
 20113 0000FFDD BE00000000              	mov rsi, 0
 20114 0000FFE2 BA01000000              	mov rdx, 1
 20115                                  .L_lambda_simple_env_loop_4fb0:	; ext_env[i + 1] <-- env[i]
 20116 0000FFE7 4883FE01                	cmp rsi, 1
 20117 0000FFEB 7410                    	je .L_lambda_simple_env_end_4fb0
 20118 0000FFED 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 20119 0000FFF1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20120 0000FFF5 48FFC6                  	inc rsi
 20121 0000FFF8 48FFC2                  	inc rdx
 20122 0000FFFB EBEA                    	jmp .L_lambda_simple_env_loop_4fb0
 20123                                  .L_lambda_simple_env_end_4fb0:
 20124 0000FFFD 5B                      	pop rbx
 20125 0000FFFE BE00000000              	mov rsi, 0
 20126                                  .L_lambda_simple_params_loop_4fb0:	; copy params
 20127 00010003 4883FE01                	cmp rsi, 1
 20128 00010007 740E                    	je .L_lambda_simple_params_end_4fb0
 20129 00010009 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20130 0001000E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20131 00010012 48FFC6                  	inc rsi
 20132 00010015 EBEC                    	jmp .L_lambda_simple_params_loop_4fb0
 20133                                  .L_lambda_simple_params_end_4fb0:
 20134 00010017 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20135 0001001A 4889C3                  	mov rbx, rax
 20136 0001001D 58                      	pop rax
 20137 0001001E C60005                  	mov byte [rax], T_closure
 20138 00010021 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20139 00010025 48C74009[32000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb0
 20140 0001002D E9A8020000              	jmp .L_lambda_simple_end_4fb0
 20141                                  .L_lambda_simple_code_4fb0:	; lambda-simple body
 20142 00010032 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20143 00010038 740B                    	je .L_lambda_simple_arity_check_ok_4fb0
 20144 0001003A FF742410                	push qword [rsp + 8 * 2]
 20145 0001003E 6A02                    	push 2
 20146 00010040 E928280000              	jmp L_error_incorrect_arity_simple
 20147                                  .L_lambda_simple_arity_check_ok_4fb0:
 20148 00010045 C8000000                	enter 0, 0
 20149 00010049 488B4520                	mov rax, PARAM(0)
 20150 0001004D 50                      	push rax
 20151 0001004E 6A01                    	push 1
 20152 00010050 488B0425[00000000]      	mov rax, qword [free_var_0]
 20153                                  	assert_closure(rax)
    42 00010058 803805              <1>  cmp byte [%1], %2
    43 0001005B 0F85D3400000        <1>  jne L_error_incorrect_type
 20154 00010061 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20155 00010065 53                      	push rbx
 20156 00010066 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20157 0001006A FFD3                    	call rbx
 20158 0001006C 483D[02000000]          	cmp rax, sob_boolean_false
 20159 00010072 0F848B000000            	je .L_if_else_56ca
 20160 00010078 488D0425[00000000]      	lea rax, [0 + L_constants]
 20161 00010080 50                      	push rax
 20162 00010081 488B4528                	mov rax, PARAM(1)
 20163 00010085 50                      	push rax
 20164 00010086 6A02                    	push 2
 20165 00010088 488B0425[98010000]      	mov rax, qword [free_var_51]
 20166                                  	assert_closure(rax)
    42 00010090 803805              <1>  cmp byte [%1], %2
    43 00010093 0F859B400000        <1>  jne L_error_incorrect_type
 20167 00010099 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20168 0001009D 53                      	push rbx
 20169 0001009E FF7508                  	push RET_ADDR
 20170 000100A1 488B7D18                	mov rdi, COUNT
 20171 000100A5 4883C703                	add rdi, 3
 20172 000100A9 48C1E703                	shl rdi, 3
 20173 000100AD 4801EF                  	add rdi, rbp
 20174 000100B0 488B6D00                	mov rbp, OLD_RDP
 20175 000100B4 BE00000000              	mov rsi, 0
 20176                                  .L_tc_recycle_frame_loop_5d3c:	 ; start recycle frame loop
 20177 000100B9 4883FE05                	cmp rsi, 5
 20178 000100BD 7427                    	je .L_tc_recycle_frame_done_5d3c
 20179 000100BF B904000000              	mov rcx, 4
 20180 000100C4 4829F1                  	sub rcx, rsi
 20181 000100C7 48C1E103                	shl rcx, 3
 20182 000100CB 4801E1                  	add rcx, rsp ; rcx is the address to move
 20183 000100CE 4889F3                  	mov rbx, rsi
 20184 000100D1 48C1E303                	shl rbx, 3
 20185 000100D5 48F7DB                  	neg rbx
 20186 000100D8 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20187 000100DB 488B09                  	mov rcx, [rcx]
 20188 000100DE 48890B                  	mov [rbx], rcx
 20189 000100E1 48FFC6                  	inc rsi
 20190 000100E4 EBD3                    	jmp .L_tc_recycle_frame_loop_5d3c
 20191                                  .L_tc_recycle_frame_done_5d3c:	 ; end recycle frame loop
 20192 000100E6 BB04000000              	mov rbx, 4
 20193 000100EB 48C1E303                	shl rbx, 3
 20194 000100EF 48F7DB                  	neg rbx
 20195 000100F2 4801FB                  	add rbx, rdi
 20196 000100F5 4889DC                  	mov rsp, rbx
 20197 000100F8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20198 000100FC FFE3                    	jmp rbx
 20199 000100FE E9D3010000              	jmp .L_if_end_56ca
 20200                                  	.L_if_else_56ca:
 20201 00010103 488D0425[80000000]      	lea rax, [128 + L_constants]
 20202 0001010B 50                      	push rax
 20203 0001010C 488B4528                	mov rax, PARAM(1)
 20204 00010110 50                      	push rax
 20205 00010111 6A02                    	push 2
 20206 00010113 488B0425[08030000]      	mov rax, qword [free_var_97]
 20207                                  	assert_closure(rax)
    42 0001011B 803805              <1>  cmp byte [%1], %2
    43 0001011E 0F8510400000        <1>  jne L_error_incorrect_type
 20208 00010124 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20209 00010128 53                      	push rbx
 20210 00010129 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20211 0001012D FFD3                    	call rbx
 20212 0001012F 50                      	push rax
 20213 00010130 488B4520                	mov rax, PARAM(0)
 20214 00010134 50                      	push rax
 20215 00010135 6A01                    	push 1
 20216 00010137 488B0425[88000000]      	mov rax, qword [free_var_17]
 20217                                  	assert_closure(rax)
    42 0001013F 803805              <1>  cmp byte [%1], %2
    43 00010142 0F85EC3F0000        <1>  jne L_error_incorrect_type
 20218 00010148 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20219 0001014C 53                      	push rbx
 20220 0001014D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20221 00010151 FFD3                    	call rbx
 20222 00010153 50                      	push rax
 20223 00010154 6A02                    	push 2
 20224 00010156 488B4510                	mov rax, qword [rbp + 8*2]
 20225 0001015A 488B00                  	mov rax, qword [rax + 8*0]
 20226 0001015D 488B00                  	mov rax, qword [rax + 8*0]
 20227 00010160 488B00                  	mov rax, qword [rax]
 20228                                  	assert_closure(rax)
    42 00010163 803805              <1>  cmp byte [%1], %2
    43 00010166 0F85C83F0000        <1>  jne L_error_incorrect_type
 20229 0001016C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20230 00010170 53                      	push rbx
 20231 00010171 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20232 00010175 FFD3                    	call rbx
 20233 00010177 50                      	push rax
 20234 00010178 6A01                    	push 1
 20235 0001017A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20236 0001017F E830270000              	call malloc
 20237 00010184 50                      	push rax
 20238 00010185 BF10000000              	mov rdi, 8 * 2	; new rib
 20239 0001018A E825270000              	call malloc
 20240 0001018F 50                      	push rax
 20241 00010190 BF18000000              	mov rdi, 8 * 3	; extended env
 20242 00010195 E81A270000              	call malloc
 20243 0001019A 488B7D10                	mov rdi, ENV
 20244 0001019E BE00000000              	mov rsi, 0
 20245 000101A3 BA01000000              	mov rdx, 1
 20246                                  .L_lambda_simple_env_loop_4fb1:	; ext_env[i + 1] <-- env[i]
 20247 000101A8 4883FE02                	cmp rsi, 2
 20248 000101AC 7410                    	je .L_lambda_simple_env_end_4fb1
 20249 000101AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 20250 000101B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20251 000101B6 48FFC6                  	inc rsi
 20252 000101B9 48FFC2                  	inc rdx
 20253 000101BC EBEA                    	jmp .L_lambda_simple_env_loop_4fb1
 20254                                  .L_lambda_simple_env_end_4fb1:
 20255 000101BE 5B                      	pop rbx
 20256 000101BF BE00000000              	mov rsi, 0
 20257                                  .L_lambda_simple_params_loop_4fb1:	; copy params
 20258 000101C4 4883FE02                	cmp rsi, 2
 20259 000101C8 740E                    	je .L_lambda_simple_params_end_4fb1
 20260 000101CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20261 000101CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20262 000101D3 48FFC6                  	inc rsi
 20263 000101D6 EBEC                    	jmp .L_lambda_simple_params_loop_4fb1
 20264                                  .L_lambda_simple_params_end_4fb1:
 20265 000101D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20266 000101DB 4889C3                  	mov rbx, rax
 20267 000101DE 58                      	pop rax
 20268 000101DF C60005                  	mov byte [rax], T_closure
 20269 000101E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20270 000101E6 48C74009[F0010100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb1
 20271 000101EE EB78                    	jmp .L_lambda_simple_end_4fb1
 20272                                  .L_lambda_simple_code_4fb1:	; lambda-simple body
 20273 000101F0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20274 000101F6 740B                    	je .L_lambda_simple_arity_check_ok_4fb1
 20275 000101F8 FF742410                	push qword [rsp + 8 * 2]
 20276 000101FC 6A01                    	push 1
 20277 000101FE E96A260000              	jmp L_error_incorrect_arity_simple
 20278                                  .L_lambda_simple_arity_check_ok_4fb1:
 20279 00010203 C8000000                	enter 0, 0
 20280 00010207 488B4510                	mov rax, qword [rbp + 8*2]
 20281 0001020B 488B00                  	mov rax, qword [rax + 8*0]
 20282 0001020E 488B00                  	mov rax, qword [rax + 8*0]
 20283 00010211 50                      	push rax
 20284 00010212 6A01                    	push 1
 20285 00010214 488B0425[80000000]      	mov rax, qword [free_var_16]
 20286                                  	assert_closure(rax)
    42 0001021C 803805              <1>  cmp byte [%1], %2
    43 0001021F 0F850F3F0000        <1>  jne L_error_incorrect_type
 20287 00010225 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20288 00010229 53                      	push rbx
 20289 0001022A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20290 0001022E FFD3                    	call rbx
 20291 00010230 50                      	push rax
 20292 00010231 488B4510                	mov rax, qword [rbp + 8*2]
 20293 00010235 488B00                  	mov rax, qword [rax + 8*0]
 20294 00010238 488B4008                	mov rax, qword [rax + 8*1]
 20295 0001023C 50                      	push rax
 20296 0001023D 488B4520                	mov rax, PARAM(0)
 20297 00010241 50                      	push rax
 20298 00010242 6A03                    	push 3
 20299 00010244 488B0425[88010000]      	mov rax, qword [free_var_49]
 20300                                  	assert_closure(rax)
    42 0001024C 803805              <1>  cmp byte [%1], %2
    43 0001024F 0F85DF3E0000        <1>  jne L_error_incorrect_type
 20301 00010255 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20302 00010259 53                      	push rbx
 20303 0001025A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20304 0001025E FFD3                    	call rbx
 20305                                  
 20306 00010260 488B4520                	mov rax, PARAM(0)
 20307 00010264 C9                      	leave
 20308 00010265 C21800                  	ret 8 * (2 + 1)
 20309                                  .L_lambda_simple_end_4fb1:	; new closure is in rax
 20310                                  	assert_closure(rax)
    42 00010268 803805              <1>  cmp byte [%1], %2
    43 0001026B 0F85C33E0000        <1>  jne L_error_incorrect_type
 20311 00010271 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20312 00010275 53                      	push rbx
 20313 00010276 FF7508                  	push RET_ADDR
 20314 00010279 488B7D18                	mov rdi, COUNT
 20315 0001027D 4883C703                	add rdi, 3
 20316 00010281 48C1E703                	shl rdi, 3
 20317 00010285 4801EF                  	add rdi, rbp
 20318 00010288 488B6D00                	mov rbp, OLD_RDP
 20319 0001028C BE00000000              	mov rsi, 0
 20320                                  .L_tc_recycle_frame_loop_5d3d:	 ; start recycle frame loop
 20321 00010291 4883FE04                	cmp rsi, 4
 20322 00010295 7427                    	je .L_tc_recycle_frame_done_5d3d
 20323 00010297 B903000000              	mov rcx, 3
 20324 0001029C 4829F1                  	sub rcx, rsi
 20325 0001029F 48C1E103                	shl rcx, 3
 20326 000102A3 4801E1                  	add rcx, rsp ; rcx is the address to move
 20327 000102A6 4889F3                  	mov rbx, rsi
 20328 000102A9 48C1E303                	shl rbx, 3
 20329 000102AD 48F7DB                  	neg rbx
 20330 000102B0 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20331 000102B3 488B09                  	mov rcx, [rcx]
 20332 000102B6 48890B                  	mov [rbx], rcx
 20333 000102B9 48FFC6                  	inc rsi
 20334 000102BC EBD3                    	jmp .L_tc_recycle_frame_loop_5d3d
 20335                                  .L_tc_recycle_frame_done_5d3d:	 ; end recycle frame loop
 20336 000102BE BB03000000              	mov rbx, 3
 20337 000102C3 48C1E303                	shl rbx, 3
 20338 000102C7 48F7DB                  	neg rbx
 20339 000102CA 4801FB                  	add rbx, rdi
 20340 000102CD 4889DC                  	mov rsp, rbx
 20341 000102D0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20342 000102D4 FFE3                    	jmp rbx
 20343                                  	.L_if_end_56ca:
 20344 000102D6 C9                      	leave
 20345 000102D7 C22000                  	ret 8 * (2 + 2)
 20346                                  .L_lambda_simple_end_4fb0:	; new closure is in rax
 20347 000102DA 50                      	push rax
 20348 000102DB 488B4520                	mov rax, PARAM(0)
 20349 000102DF 8F00                    	pop qword [rax]
 20350 000102E1 48B8-                   	mov rax, sob_void
 20350 000102E3 [0000000000000000] 
 20351                                  
 20352 000102EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20353 000102F0 E8BF250000              	call malloc
 20354 000102F5 50                      	push rax
 20355 000102F6 BF08000000              	mov rdi, 8 * 1	; new rib
 20356 000102FB E8B4250000              	call malloc
 20357 00010300 50                      	push rax
 20358 00010301 BF10000000              	mov rdi, 8 * 2	; extended env
 20359 00010306 E8A9250000              	call malloc
 20360 0001030B 488B7D10                	mov rdi, ENV
 20361 0001030F BE00000000              	mov rsi, 0
 20362 00010314 BA01000000              	mov rdx, 1
 20363                                  .L_lambda_simple_env_loop_4fb2:	; ext_env[i + 1] <-- env[i]
 20364 00010319 4883FE01                	cmp rsi, 1
 20365 0001031D 7410                    	je .L_lambda_simple_env_end_4fb2
 20366 0001031F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 20367 00010323 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20368 00010327 48FFC6                  	inc rsi
 20369 0001032A 48FFC2                  	inc rdx
 20370 0001032D EBEA                    	jmp .L_lambda_simple_env_loop_4fb2
 20371                                  .L_lambda_simple_env_end_4fb2:
 20372 0001032F 5B                      	pop rbx
 20373 00010330 BE00000000              	mov rsi, 0
 20374                                  .L_lambda_simple_params_loop_4fb2:	; copy params
 20375 00010335 4883FE01                	cmp rsi, 1
 20376 00010339 740E                    	je .L_lambda_simple_params_end_4fb2
 20377 0001033B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20378 00010340 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20379 00010344 48FFC6                  	inc rsi
 20380 00010347 EBEC                    	jmp .L_lambda_simple_params_loop_4fb2
 20381                                  .L_lambda_simple_params_end_4fb2:
 20382 00010349 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20383 0001034C 4889C3                  	mov rbx, rax
 20384 0001034F 58                      	pop rax
 20385 00010350 C60005                  	mov byte [rax], T_closure
 20386 00010353 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20387 00010357 48C74009[64030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb2
 20388 0001035F E9A6000000              	jmp .L_lambda_simple_end_4fb2
 20389                                  .L_lambda_simple_code_4fb2:	; lambda-simple body
 20390 00010364 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20391 0001036A 740B                    	je .L_lambda_simple_arity_check_ok_4fb2
 20392 0001036C FF742410                	push qword [rsp + 8 * 2]
 20393 00010370 6A01                    	push 1
 20394 00010372 E9F6240000              	jmp L_error_incorrect_arity_simple
 20395                                  .L_lambda_simple_arity_check_ok_4fb2:
 20396 00010377 C8000000                	enter 0, 0
 20397 0001037B 488D0425[20000000]      	lea rax, [32 + L_constants]
 20398 00010383 50                      	push rax
 20399 00010384 488B4520                	mov rax, PARAM(0)
 20400 00010388 50                      	push rax
 20401 00010389 6A02                    	push 2
 20402 0001038B 488B4510                	mov rax, qword [rbp + 8*2]
 20403 0001038F 488B00                  	mov rax, qword [rax + 8*0]
 20404 00010392 488B00                  	mov rax, qword [rax + 8*0]
 20405 00010395 488B00                  	mov rax, qword [rax]
 20406                                  	assert_closure(rax)
    42 00010398 803805              <1>  cmp byte [%1], %2
    43 0001039B 0F85933D0000        <1>  jne L_error_incorrect_type
 20407 000103A1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20408 000103A5 53                      	push rbx
 20409 000103A6 FF7508                  	push RET_ADDR
 20410 000103A9 488B7D18                	mov rdi, COUNT
 20411 000103AD 4883C703                	add rdi, 3
 20412 000103B1 48C1E703                	shl rdi, 3
 20413 000103B5 4801EF                  	add rdi, rbp
 20414 000103B8 488B6D00                	mov rbp, OLD_RDP
 20415 000103BC BE00000000              	mov rsi, 0
 20416                                  .L_tc_recycle_frame_loop_5d3e:	 ; start recycle frame loop
 20417 000103C1 4883FE05                	cmp rsi, 5
 20418 000103C5 7427                    	je .L_tc_recycle_frame_done_5d3e
 20419 000103C7 B904000000              	mov rcx, 4
 20420 000103CC 4829F1                  	sub rcx, rsi
 20421 000103CF 48C1E103                	shl rcx, 3
 20422 000103D3 4801E1                  	add rcx, rsp ; rcx is the address to move
 20423 000103D6 4889F3                  	mov rbx, rsi
 20424 000103D9 48C1E303                	shl rbx, 3
 20425 000103DD 48F7DB                  	neg rbx
 20426 000103E0 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20427 000103E3 488B09                  	mov rcx, [rcx]
 20428 000103E6 48890B                  	mov [rbx], rcx
 20429 000103E9 48FFC6                  	inc rsi
 20430 000103EC EBD3                    	jmp .L_tc_recycle_frame_loop_5d3e
 20431                                  .L_tc_recycle_frame_done_5d3e:	 ; end recycle frame loop
 20432 000103EE BB04000000              	mov rbx, 4
 20433 000103F3 48C1E303                	shl rbx, 3
 20434 000103F7 48F7DB                  	neg rbx
 20435 000103FA 4801FB                  	add rbx, rdi
 20436 000103FD 4889DC                  	mov rsp, rbx
 20437 00010400 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20438 00010404 FFE3                    	jmp rbx
 20439 00010406 C9                      	leave
 20440 00010407 C21800                  	ret 8 * (2 + 1)
 20441                                  .L_lambda_simple_end_4fb2:	; new closure is in rax
 20442 0001040A C9                      	leave
 20443 0001040B C21800                  	ret 8 * (2 + 1)
 20444                                  .L_lambda_simple_end_4faf:	; new closure is in rax
 20445                                  	assert_closure(rax)
    42 0001040E 803805              <1>  cmp byte [%1], %2
    43 00010411 0F851D3D0000        <1>  jne L_error_incorrect_type
 20446 00010417 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20447 0001041B 53                      	push rbx
 20448 0001041C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20449 00010420 FFD3                    	call rbx
 20450 00010422 48890425[38040000]      	mov qword [free_var_135], rax
 20451 0001042A 48B8-                   	mov rax, sob_void
 20451 0001042C [0000000000000000] 
 20452                                  
 20453 00010434 4889C7                  	mov rdi, rax
 20454 00010437 E889240000              	call print_sexpr_if_not_void
 20455                                  
 20456 0001043C 488D0425[17000000]      	lea rax, [23 + L_constants]
 20457 00010444 50                      	push rax
 20458 00010445 6A01                    	push 1
 20459 00010447 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20460 0001044C E863240000              	call malloc
 20461 00010451 50                      	push rax
 20462 00010452 BF00000000              	mov rdi, 8 * 0	; new rib
 20463 00010457 E858240000              	call malloc
 20464 0001045C 50                      	push rax
 20465 0001045D BF08000000              	mov rdi, 8 * 1	; extended env
 20466 00010462 E84D240000              	call malloc
 20467 00010467 488B7D10                	mov rdi, ENV
 20468 0001046B BE00000000              	mov rsi, 0
 20469 00010470 BA01000000              	mov rdx, 1
 20470                                  .L_lambda_simple_env_loop_4fb3:	; ext_env[i + 1] <-- env[i]
 20471 00010475 4883FE00                	cmp rsi, 0
 20472 00010479 7410                    	je .L_lambda_simple_env_end_4fb3
 20473 0001047B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 20474 0001047F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20475 00010483 48FFC6                  	inc rsi
 20476 00010486 48FFC2                  	inc rdx
 20477 00010489 EBEA                    	jmp .L_lambda_simple_env_loop_4fb3
 20478                                  .L_lambda_simple_env_end_4fb3:
 20479 0001048B 5B                      	pop rbx
 20480 0001048C BE00000000              	mov rsi, 0
 20481                                  .L_lambda_simple_params_loop_4fb3:	; copy params
 20482 00010491 4883FE00                	cmp rsi, 0
 20483 00010495 740E                    	je .L_lambda_simple_params_end_4fb3
 20484 00010497 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20485 0001049C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20486 000104A0 48FFC6                  	inc rsi
 20487 000104A3 EBEC                    	jmp .L_lambda_simple_params_loop_4fb3
 20488                                  .L_lambda_simple_params_end_4fb3:
 20489 000104A5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20490 000104A8 4889C3                  	mov rbx, rax
 20491 000104AB 58                      	pop rax
 20492 000104AC C60005                  	mov byte [rax], T_closure
 20493 000104AF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20494 000104B3 48C74009[C0040100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb3
 20495 000104BB E984040000              	jmp .L_lambda_simple_end_4fb3
 20496                                  .L_lambda_simple_code_4fb3:	; lambda-simple body
 20497 000104C0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20498 000104C6 740B                    	je .L_lambda_simple_arity_check_ok_4fb3
 20499 000104C8 FF742410                	push qword [rsp + 8 * 2]
 20500 000104CC 6A01                    	push 1
 20501 000104CE E99A230000              	jmp L_error_incorrect_arity_simple
 20502                                  .L_lambda_simple_arity_check_ok_4fb3:
 20503 000104D3 C8000000                	enter 0, 0
 20504 000104D7 BF11000000              	mov qword rdi, (1 + 8 + 8)
 20505 000104DC E8D3230000              	call malloc
 20506 000104E1 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 20507 000104E5 48B8-                   	mov rax, sob_void
 20507 000104E7 [0000000000000000] 
 20508                                  
 20509 000104EF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20510 000104F4 E8BB230000              	call malloc
 20511 000104F9 50                      	push rax
 20512 000104FA BF08000000              	mov rdi, 8 * 1	; new rib
 20513 000104FF E8B0230000              	call malloc
 20514 00010504 50                      	push rax
 20515 00010505 BF10000000              	mov rdi, 8 * 2	; extended env
 20516 0001050A E8A5230000              	call malloc
 20517 0001050F 488B7D10                	mov rdi, ENV
 20518 00010513 BE00000000              	mov rsi, 0
 20519 00010518 BA01000000              	mov rdx, 1
 20520                                  .L_lambda_simple_env_loop_4fb4:	; ext_env[i + 1] <-- env[i]
 20521 0001051D 4883FE01                	cmp rsi, 1
 20522 00010521 7410                    	je .L_lambda_simple_env_end_4fb4
 20523 00010523 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 20524 00010527 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20525 0001052B 48FFC6                  	inc rsi
 20526 0001052E 48FFC2                  	inc rdx
 20527 00010531 EBEA                    	jmp .L_lambda_simple_env_loop_4fb4
 20528                                  .L_lambda_simple_env_end_4fb4:
 20529 00010533 5B                      	pop rbx
 20530 00010534 BE00000000              	mov rsi, 0
 20531                                  .L_lambda_simple_params_loop_4fb4:	; copy params
 20532 00010539 4883FE01                	cmp rsi, 1
 20533 0001053D 740E                    	je .L_lambda_simple_params_end_4fb4
 20534 0001053F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20535 00010544 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20536 00010548 48FFC6                  	inc rsi
 20537 0001054B EBEC                    	jmp .L_lambda_simple_params_loop_4fb4
 20538                                  .L_lambda_simple_params_end_4fb4:
 20539 0001054D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20540 00010550 4889C3                  	mov rbx, rax
 20541 00010553 58                      	pop rax
 20542 00010554 C60005                  	mov byte [rax], T_closure
 20543 00010557 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20544 0001055B 48C74009[68050100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb4
 20545 00010563 E9A8020000              	jmp .L_lambda_simple_end_4fb4
 20546                                  .L_lambda_simple_code_4fb4:	; lambda-simple body
 20547 00010568 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20548 0001056E 740B                    	je .L_lambda_simple_arity_check_ok_4fb4
 20549 00010570 FF742410                	push qword [rsp + 8 * 2]
 20550 00010574 6A02                    	push 2
 20551 00010576 E9F2220000              	jmp L_error_incorrect_arity_simple
 20552                                  .L_lambda_simple_arity_check_ok_4fb4:
 20553 0001057B C8000000                	enter 0, 0
 20554 0001057F 488B4520                	mov rax, PARAM(0)
 20555 00010583 50                      	push rax
 20556 00010584 6A01                    	push 1
 20557 00010586 488B0425[00000000]      	mov rax, qword [free_var_0]
 20558                                  	assert_closure(rax)
    42 0001058E 803805              <1>  cmp byte [%1], %2
    43 00010591 0F859D3B0000        <1>  jne L_error_incorrect_type
 20559 00010597 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20560 0001059B 53                      	push rbx
 20561 0001059C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20562 000105A0 FFD3                    	call rbx
 20563 000105A2 483D[02000000]          	cmp rax, sob_boolean_false
 20564 000105A8 0F848B000000            	je .L_if_else_56cb
 20565 000105AE 488D0425[04000000]      	lea rax, [4 + L_constants]
 20566 000105B6 50                      	push rax
 20567 000105B7 488B4528                	mov rax, PARAM(1)
 20568 000105BB 50                      	push rax
 20569 000105BC 6A02                    	push 2
 20570 000105BE 488B0425[A0010000]      	mov rax, qword [free_var_52]
 20571                                  	assert_closure(rax)
    42 000105C6 803805              <1>  cmp byte [%1], %2
    43 000105C9 0F85653B0000        <1>  jne L_error_incorrect_type
 20572 000105CF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20573 000105D3 53                      	push rbx
 20574 000105D4 FF7508                  	push RET_ADDR
 20575 000105D7 488B7D18                	mov rdi, COUNT
 20576 000105DB 4883C703                	add rdi, 3
 20577 000105DF 48C1E703                	shl rdi, 3
 20578 000105E3 4801EF                  	add rdi, rbp
 20579 000105E6 488B6D00                	mov rbp, OLD_RDP
 20580 000105EA BE00000000              	mov rsi, 0
 20581                                  .L_tc_recycle_frame_loop_5d3f:	 ; start recycle frame loop
 20582 000105EF 4883FE05                	cmp rsi, 5
 20583 000105F3 7427                    	je .L_tc_recycle_frame_done_5d3f
 20584 000105F5 B904000000              	mov rcx, 4
 20585 000105FA 4829F1                  	sub rcx, rsi
 20586 000105FD 48C1E103                	shl rcx, 3
 20587 00010601 4801E1                  	add rcx, rsp ; rcx is the address to move
 20588 00010604 4889F3                  	mov rbx, rsi
 20589 00010607 48C1E303                	shl rbx, 3
 20590 0001060B 48F7DB                  	neg rbx
 20591 0001060E 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20592 00010611 488B09                  	mov rcx, [rcx]
 20593 00010614 48890B                  	mov [rbx], rcx
 20594 00010617 48FFC6                  	inc rsi
 20595 0001061A EBD3                    	jmp .L_tc_recycle_frame_loop_5d3f
 20596                                  .L_tc_recycle_frame_done_5d3f:	 ; end recycle frame loop
 20597 0001061C BB04000000              	mov rbx, 4
 20598 00010621 48C1E303                	shl rbx, 3
 20599 00010625 48F7DB                  	neg rbx
 20600 00010628 4801FB                  	add rbx, rdi
 20601 0001062B 4889DC                  	mov rsp, rbx
 20602 0001062E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20603 00010632 FFE3                    	jmp rbx
 20604 00010634 E9D3010000              	jmp .L_if_end_56cb
 20605                                  	.L_if_else_56cb:
 20606 00010639 488D0425[80000000]      	lea rax, [128 + L_constants]
 20607 00010641 50                      	push rax
 20608 00010642 488B4528                	mov rax, PARAM(1)
 20609 00010646 50                      	push rax
 20610 00010647 6A02                    	push 2
 20611 00010649 488B0425[08030000]      	mov rax, qword [free_var_97]
 20612                                  	assert_closure(rax)
    42 00010651 803805              <1>  cmp byte [%1], %2
    43 00010654 0F85DA3A0000        <1>  jne L_error_incorrect_type
 20613 0001065A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20614 0001065E 53                      	push rbx
 20615 0001065F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20616 00010663 FFD3                    	call rbx
 20617 00010665 50                      	push rax
 20618 00010666 488B4520                	mov rax, PARAM(0)
 20619 0001066A 50                      	push rax
 20620 0001066B 6A01                    	push 1
 20621 0001066D 488B0425[88000000]      	mov rax, qword [free_var_17]
 20622                                  	assert_closure(rax)
    42 00010675 803805              <1>  cmp byte [%1], %2
    43 00010678 0F85B63A0000        <1>  jne L_error_incorrect_type
 20623 0001067E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20624 00010682 53                      	push rbx
 20625 00010683 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20626 00010687 FFD3                    	call rbx
 20627 00010689 50                      	push rax
 20628 0001068A 6A02                    	push 2
 20629 0001068C 488B4510                	mov rax, qword [rbp + 8*2]
 20630 00010690 488B00                  	mov rax, qword [rax + 8*0]
 20631 00010693 488B00                  	mov rax, qword [rax + 8*0]
 20632 00010696 488B00                  	mov rax, qword [rax]
 20633                                  	assert_closure(rax)
    42 00010699 803805              <1>  cmp byte [%1], %2
    43 0001069C 0F85923A0000        <1>  jne L_error_incorrect_type
 20634 000106A2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20635 000106A6 53                      	push rbx
 20636 000106A7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20637 000106AB FFD3                    	call rbx
 20638 000106AD 50                      	push rax
 20639 000106AE 6A01                    	push 1
 20640 000106B0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20641 000106B5 E8FA210000              	call malloc
 20642 000106BA 50                      	push rax
 20643 000106BB BF10000000              	mov rdi, 8 * 2	; new rib
 20644 000106C0 E8EF210000              	call malloc
 20645 000106C5 50                      	push rax
 20646 000106C6 BF18000000              	mov rdi, 8 * 3	; extended env
 20647 000106CB E8E4210000              	call malloc
 20648 000106D0 488B7D10                	mov rdi, ENV
 20649 000106D4 BE00000000              	mov rsi, 0
 20650 000106D9 BA01000000              	mov rdx, 1
 20651                                  .L_lambda_simple_env_loop_4fb5:	; ext_env[i + 1] <-- env[i]
 20652 000106DE 4883FE02                	cmp rsi, 2
 20653 000106E2 7410                    	je .L_lambda_simple_env_end_4fb5
 20654 000106E4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 20655 000106E8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20656 000106EC 48FFC6                  	inc rsi
 20657 000106EF 48FFC2                  	inc rdx
 20658 000106F2 EBEA                    	jmp .L_lambda_simple_env_loop_4fb5
 20659                                  .L_lambda_simple_env_end_4fb5:
 20660 000106F4 5B                      	pop rbx
 20661 000106F5 BE00000000              	mov rsi, 0
 20662                                  .L_lambda_simple_params_loop_4fb5:	; copy params
 20663 000106FA 4883FE02                	cmp rsi, 2
 20664 000106FE 740E                    	je .L_lambda_simple_params_end_4fb5
 20665 00010700 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20666 00010705 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20667 00010709 48FFC6                  	inc rsi
 20668 0001070C EBEC                    	jmp .L_lambda_simple_params_loop_4fb5
 20669                                  .L_lambda_simple_params_end_4fb5:
 20670 0001070E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20671 00010711 4889C3                  	mov rbx, rax
 20672 00010714 58                      	pop rax
 20673 00010715 C60005                  	mov byte [rax], T_closure
 20674 00010718 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20675 0001071C 48C74009[26070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb5
 20676 00010724 EB78                    	jmp .L_lambda_simple_end_4fb5
 20677                                  .L_lambda_simple_code_4fb5:	; lambda-simple body
 20678 00010726 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20679 0001072C 740B                    	je .L_lambda_simple_arity_check_ok_4fb5
 20680 0001072E FF742410                	push qword [rsp + 8 * 2]
 20681 00010732 6A01                    	push 1
 20682 00010734 E934210000              	jmp L_error_incorrect_arity_simple
 20683                                  .L_lambda_simple_arity_check_ok_4fb5:
 20684 00010739 C8000000                	enter 0, 0
 20685 0001073D 488B4510                	mov rax, qword [rbp + 8*2]
 20686 00010741 488B00                  	mov rax, qword [rax + 8*0]
 20687 00010744 488B00                  	mov rax, qword [rax + 8*0]
 20688 00010747 50                      	push rax
 20689 00010748 6A01                    	push 1
 20690 0001074A 488B0425[80000000]      	mov rax, qword [free_var_16]
 20691                                  	assert_closure(rax)
    42 00010752 803805              <1>  cmp byte [%1], %2
    43 00010755 0F85D9390000        <1>  jne L_error_incorrect_type
 20692 0001075B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20693 0001075F 53                      	push rbx
 20694 00010760 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20695 00010764 FFD3                    	call rbx
 20696 00010766 50                      	push rax
 20697 00010767 488B4510                	mov rax, qword [rbp + 8*2]
 20698 0001076B 488B00                  	mov rax, qword [rax + 8*0]
 20699 0001076E 488B4008                	mov rax, qword [rax + 8*1]
 20700 00010772 50                      	push rax
 20701 00010773 488B4520                	mov rax, PARAM(0)
 20702 00010777 50                      	push rax
 20703 00010778 6A03                    	push 3
 20704 0001077A 488B0425[90010000]      	mov rax, qword [free_var_50]
 20705                                  	assert_closure(rax)
    42 00010782 803805              <1>  cmp byte [%1], %2
    43 00010785 0F85A9390000        <1>  jne L_error_incorrect_type
 20706 0001078B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20707 0001078F 53                      	push rbx
 20708 00010790 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20709 00010794 FFD3                    	call rbx
 20710                                  
 20711 00010796 488B4520                	mov rax, PARAM(0)
 20712 0001079A C9                      	leave
 20713 0001079B C21800                  	ret 8 * (2 + 1)
 20714                                  .L_lambda_simple_end_4fb5:	; new closure is in rax
 20715                                  	assert_closure(rax)
    42 0001079E 803805              <1>  cmp byte [%1], %2
    43 000107A1 0F858D390000        <1>  jne L_error_incorrect_type
 20716 000107A7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20717 000107AB 53                      	push rbx
 20718 000107AC FF7508                  	push RET_ADDR
 20719 000107AF 488B7D18                	mov rdi, COUNT
 20720 000107B3 4883C703                	add rdi, 3
 20721 000107B7 48C1E703                	shl rdi, 3
 20722 000107BB 4801EF                  	add rdi, rbp
 20723 000107BE 488B6D00                	mov rbp, OLD_RDP
 20724 000107C2 BE00000000              	mov rsi, 0
 20725                                  .L_tc_recycle_frame_loop_5d40:	 ; start recycle frame loop
 20726 000107C7 4883FE04                	cmp rsi, 4
 20727 000107CB 7427                    	je .L_tc_recycle_frame_done_5d40
 20728 000107CD B903000000              	mov rcx, 3
 20729 000107D2 4829F1                  	sub rcx, rsi
 20730 000107D5 48C1E103                	shl rcx, 3
 20731 000107D9 4801E1                  	add rcx, rsp ; rcx is the address to move
 20732 000107DC 4889F3                  	mov rbx, rsi
 20733 000107DF 48C1E303                	shl rbx, 3
 20734 000107E3 48F7DB                  	neg rbx
 20735 000107E6 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20736 000107E9 488B09                  	mov rcx, [rcx]
 20737 000107EC 48890B                  	mov [rbx], rcx
 20738 000107EF 48FFC6                  	inc rsi
 20739 000107F2 EBD3                    	jmp .L_tc_recycle_frame_loop_5d40
 20740                                  .L_tc_recycle_frame_done_5d40:	 ; end recycle frame loop
 20741 000107F4 BB03000000              	mov rbx, 3
 20742 000107F9 48C1E303                	shl rbx, 3
 20743 000107FD 48F7DB                  	neg rbx
 20744 00010800 4801FB                  	add rbx, rdi
 20745 00010803 4889DC                  	mov rsp, rbx
 20746 00010806 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20747 0001080A FFE3                    	jmp rbx
 20748                                  	.L_if_end_56cb:
 20749 0001080C C9                      	leave
 20750 0001080D C22000                  	ret 8 * (2 + 2)
 20751                                  .L_lambda_simple_end_4fb4:	; new closure is in rax
 20752 00010810 50                      	push rax
 20753 00010811 488B4520                	mov rax, PARAM(0)
 20754 00010815 8F00                    	pop qword [rax]
 20755 00010817 48B8-                   	mov rax, sob_void
 20755 00010819 [0000000000000000] 
 20756                                  
 20757 00010821 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20758 00010826 E889200000              	call malloc
 20759 0001082B 50                      	push rax
 20760 0001082C BF08000000              	mov rdi, 8 * 1	; new rib
 20761 00010831 E87E200000              	call malloc
 20762 00010836 50                      	push rax
 20763 00010837 BF10000000              	mov rdi, 8 * 2	; extended env
 20764 0001083C E873200000              	call malloc
 20765 00010841 488B7D10                	mov rdi, ENV
 20766 00010845 BE00000000              	mov rsi, 0
 20767 0001084A BA01000000              	mov rdx, 1
 20768                                  .L_lambda_simple_env_loop_4fb6:	; ext_env[i + 1] <-- env[i]
 20769 0001084F 4883FE01                	cmp rsi, 1
 20770 00010853 7410                    	je .L_lambda_simple_env_end_4fb6
 20771 00010855 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 20772 00010859 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20773 0001085D 48FFC6                  	inc rsi
 20774 00010860 48FFC2                  	inc rdx
 20775 00010863 EBEA                    	jmp .L_lambda_simple_env_loop_4fb6
 20776                                  .L_lambda_simple_env_end_4fb6:
 20777 00010865 5B                      	pop rbx
 20778 00010866 BE00000000              	mov rsi, 0
 20779                                  .L_lambda_simple_params_loop_4fb6:	; copy params
 20780 0001086B 4883FE01                	cmp rsi, 1
 20781 0001086F 740E                    	je .L_lambda_simple_params_end_4fb6
 20782 00010871 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20783 00010876 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20784 0001087A 48FFC6                  	inc rsi
 20785 0001087D EBEC                    	jmp .L_lambda_simple_params_loop_4fb6
 20786                                  .L_lambda_simple_params_end_4fb6:
 20787 0001087F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20788 00010882 4889C3                  	mov rbx, rax
 20789 00010885 58                      	pop rax
 20790 00010886 C60005                  	mov byte [rax], T_closure
 20791 00010889 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20792 0001088D 48C74009[9A080100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb6
 20793 00010895 E9A6000000              	jmp .L_lambda_simple_end_4fb6
 20794                                  .L_lambda_simple_code_4fb6:	; lambda-simple body
 20795 0001089A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20796 000108A0 740B                    	je .L_lambda_simple_arity_check_ok_4fb6
 20797 000108A2 FF742410                	push qword [rsp + 8 * 2]
 20798 000108A6 6A01                    	push 1
 20799 000108A8 E9C01F0000              	jmp L_error_incorrect_arity_simple
 20800                                  .L_lambda_simple_arity_check_ok_4fb6:
 20801 000108AD C8000000                	enter 0, 0
 20802 000108B1 488D0425[20000000]      	lea rax, [32 + L_constants]
 20803 000108B9 50                      	push rax
 20804 000108BA 488B4520                	mov rax, PARAM(0)
 20805 000108BE 50                      	push rax
 20806 000108BF 6A02                    	push 2
 20807 000108C1 488B4510                	mov rax, qword [rbp + 8*2]
 20808 000108C5 488B00                  	mov rax, qword [rax + 8*0]
 20809 000108C8 488B00                  	mov rax, qword [rax + 8*0]
 20810 000108CB 488B00                  	mov rax, qword [rax]
 20811                                  	assert_closure(rax)
    42 000108CE 803805              <1>  cmp byte [%1], %2
    43 000108D1 0F855D380000        <1>  jne L_error_incorrect_type
 20812 000108D7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20813 000108DB 53                      	push rbx
 20814 000108DC FF7508                  	push RET_ADDR
 20815 000108DF 488B7D18                	mov rdi, COUNT
 20816 000108E3 4883C703                	add rdi, 3
 20817 000108E7 48C1E703                	shl rdi, 3
 20818 000108EB 4801EF                  	add rdi, rbp
 20819 000108EE 488B6D00                	mov rbp, OLD_RDP
 20820 000108F2 BE00000000              	mov rsi, 0
 20821                                  .L_tc_recycle_frame_loop_5d41:	 ; start recycle frame loop
 20822 000108F7 4883FE05                	cmp rsi, 5
 20823 000108FB 7427                    	je .L_tc_recycle_frame_done_5d41
 20824 000108FD B904000000              	mov rcx, 4
 20825 00010902 4829F1                  	sub rcx, rsi
 20826 00010905 48C1E103                	shl rcx, 3
 20827 00010909 4801E1                  	add rcx, rsp ; rcx is the address to move
 20828 0001090C 4889F3                  	mov rbx, rsi
 20829 0001090F 48C1E303                	shl rbx, 3
 20830 00010913 48F7DB                  	neg rbx
 20831 00010916 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20832 00010919 488B09                  	mov rcx, [rcx]
 20833 0001091C 48890B                  	mov [rbx], rcx
 20834 0001091F 48FFC6                  	inc rsi
 20835 00010922 EBD3                    	jmp .L_tc_recycle_frame_loop_5d41
 20836                                  .L_tc_recycle_frame_done_5d41:	 ; end recycle frame loop
 20837 00010924 BB04000000              	mov rbx, 4
 20838 00010929 48C1E303                	shl rbx, 3
 20839 0001092D 48F7DB                  	neg rbx
 20840 00010930 4801FB                  	add rbx, rdi
 20841 00010933 4889DC                  	mov rsp, rbx
 20842 00010936 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20843 0001093A FFE3                    	jmp rbx
 20844 0001093C C9                      	leave
 20845 0001093D C21800                  	ret 8 * (2 + 1)
 20846                                  .L_lambda_simple_end_4fb6:	; new closure is in rax
 20847 00010940 C9                      	leave
 20848 00010941 C21800                  	ret 8 * (2 + 1)
 20849                                  .L_lambda_simple_end_4fb3:	; new closure is in rax
 20850                                  	assert_closure(rax)
    42 00010944 803805              <1>  cmp byte [%1], %2
    43 00010947 0F85E7370000        <1>  jne L_error_incorrect_type
 20851 0001094D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20852 00010951 53                      	push rbx
 20853 00010952 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20854 00010956 FFD3                    	call rbx
 20855 00010958 48890425[D0030000]      	mov qword [free_var_122], rax
 20856 00010960 48B8-                   	mov rax, sob_void
 20856 00010962 [0000000000000000] 
 20857                                  
 20858 0001096A 4889C7                  	mov rdi, rax
 20859 0001096D E8531F0000              	call print_sexpr_if_not_void
 20860                                  
 20861 00010972 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20862 00010977 E8381F0000              	call malloc
 20863 0001097C 50                      	push rax
 20864 0001097D BF00000000              	mov rdi, 8 * 0	; new rib
 20865 00010982 E82D1F0000              	call malloc
 20866 00010987 50                      	push rax
 20867 00010988 BF08000000              	mov rdi, 8 * 1	; extended env
 20868 0001098D E8221F0000              	call malloc
 20869 00010992 488B7D10                	mov rdi, ENV
 20870 00010996 BE00000000              	mov rsi, 0
 20871 0001099B BA01000000              	mov rdx, 1
 20872                                  .L_lambda_opt_env_loop_0c9b:	; ext_env[i + 1] <-- env[i]
 20873 000109A0 4883FE00                	cmp rsi, 0
 20874 000109A4 7410                    	je .L_lambda_opt_env_end_0c9b
 20875 000109A6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20876 000109AA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20877 000109AE 48FFC6                  	inc rsi
 20878 000109B1 48FFC2                  	inc rdx
 20879 000109B4 EBEA                    	jmp .L_lambda_opt_env_loop_0c9b
 20880                                  .L_lambda_opt_env_end_0c9b:
 20881 000109B6 5B                      	pop rbx
 20882 000109B7 BE00000000              	mov rsi, 0
 20883                                  .L_lambda_opt_params_loop_0c9b:	; copy params
 20884 000109BC 4883FE00                	cmp rsi, 0
 20885 000109C0 740E                    	je .L_lambda_opt_params_end_0c9b
 20886 000109C2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20887 000109C7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20888 000109CB 48FFC6                  	inc rsi
 20889 000109CE EBEC                    	jmp .L_lambda_opt_params_loop_0c9b
 20890                                  .L_lambda_opt_params_end_0c9b:
 20891 000109D0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20892 000109D3 4889C3                  	mov rbx, rax
 20893 000109D6 58                      	pop rax
 20894 000109D7 C60005                  	mov byte [rax], T_closure
 20895 000109DA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20896 000109DE 48C74009[EB090100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c9b
 20897 000109E6 E97A010000              	jmp .L_lambda_opt_end_0c9b
 20898                                  .L_lambda_opt_code_0c9b:	; lambda-opt body
 20899 000109EB 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 20900 000109F0 4889FB                  	mov rbx, rdi
 20901 000109F3 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
 20902 000109F7 4883FB00                	cmp rbx, 0
 20903 000109FB 7F45                    	jg .L_lambda_opt_arity_check_more_0c9b
 20904                                  .L_lambda_opt_arity_check_exact_0c9b:	 ; if params in opt is exact
 20905 000109FD 4883EC08                	sub rsp, 8
 20906 00010A01 BE00000000              	mov rsi, 0 ; index
 20907                                  .L_lambda_opt_stack_enlarge_loop_0c9b:	 ; stack loop enlarge start
 20908 00010A06 4883FE03                	cmp rsi, 3
 20909 00010A0A 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c9b
 20910 00010A0C 4889F7                  	mov rdi, rsi
 20911 00010A0F 48FFC7                  	inc rdi
 20912 00010A12 48C1E703                	shl rdi, 3
 20913 00010A16 4801E7                  	add rdi, rsp
 20914 00010A19 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 20915 00010A1C 4883EB08                	sub rbx, 8
 20916 00010A20 488B3F                  	mov rdi, [rdi]
 20917 00010A23 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 20918 00010A26 48FFC6                  	inc rsi
 20919 00010A29 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c9b
 20920                                  .L_lambda_opt_stack_enlarge_loop_exit_0c9b:	 ; end of stack enlarge loop
 20921 00010A2B 48C7442418-             	mov qword [rsp + 3*8], sob_nil
 20921 00010A30 [01000000]         
 20922 00010A34 48C744241001000000      	mov qword [rsp + 2*8], 1
 20923 00010A3D E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c9b
 20924                                  .L_lambda_opt_arity_check_more_0c9b:	 ; if params in opt is more
 20925 00010A42 48B8-                   	mov rax, sob_nil
 20925 00010A44 [0100000000000000] 
 20926 00010A4C 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 20927 00010A4F 48FFCE                  	dec rsi
 20928                                  .L_lambda_opt_list_create_loop_0c9b:	; start of list creation loop
 20929 00010A52 4883FEFF                	cmp rsi, -1
 20930 00010A56 7422                    	je .L_lambda_opt_list_create_loop_exit_0c9b
 20931 00010A58 488D4E03                	lea rcx, [rsi + (3 + 0)]
 20932 00010A5C 48C1E103                	shl rcx, 3
 20933 00010A60 4801E1                  	add rcx, rsp
 20934 00010A63 488B09                  	mov rcx, [rcx]
 20935 00010A66 56                      	push rsi ; save params
 20936 00010A67 53                      	push rbx
 20937                                  
 20938 00010A68 50                      	push rax ; cdr
 20939 00010A69 51                      	push rcx ; car
 20940 00010A6A 6A02                    	push qword 2 ; push num of args
 20941 00010A6C 6A01                    	push qword 1 ; push garbage as env
 20942 00010A6E E8C8270000              	call L_code_ptr_cons
 20943                                  
 20944 00010A73 5B                      	pop rbx ; restore params
 20945 00010A74 5E                      	pop rsi
 20946 00010A75 48FFCE                  	dec rsi
 20947 00010A78 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c9b
 20948                                  .L_lambda_opt_list_create_loop_exit_0c9b:	; end of list creation loop
 20949 00010A7A 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 20950 00010A7F 4883C302                	add rbx, 2
 20951 00010A83 4889DF                  	mov rdi, rbx
 20952 00010A86 48C1E703                	shl rdi,3
 20953 00010A8A 4801E7                  	add rdi, rsp
 20954 00010A8D 488907                  	mov [rdi], rax
 20955 00010A90 BE00000000              	mov rsi, 0 ;index
 20956                                  .L_lambda_opt_stack_shrink_loop_0c9b:	; start of stack shrink loop
 20957 00010A95 4883FE03                	cmp rsi, 3
 20958 00010A99 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c9b
 20959 00010A9B BF02000000              	mov rdi, 2
 20960 00010AA0 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 20961 00010AA3 4889D9                  	mov rcx, rbx
 20962 00010AA6 4829F1                  	sub rcx, rsi
 20963 00010AA9 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 20964 00010AAC 4889FA                  	mov rdx, rdi
 20965 00010AAF 48C1E203                	shl rdx, 3
 20966 00010AB3 4801E2                  	add rdx, rsp
 20967 00010AB6 48C1E103                	shl rcx, 3
 20968 00010ABA 4801E1                  	add rcx, rsp
 20969 00010ABD 488B12                  	mov rdx, [rdx]
 20970 00010AC0 488911                  	mov [rcx], rdx
 20971 00010AC3 48FFC6                  	inc rsi
 20972 00010AC6 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c9b
 20973                                  .L_lambda_opt_stack_shrink_loop_exit_0c9b:	; end of stack shrink loop
 20974 00010AC8 4883EB02                	sub rbx, 2 ; rbx has number of args
 20975 00010ACC 4883EB01                	sub rbx, 1
 20976 00010AD0 48C1E303                	shl rbx, 3
 20977 00010AD4 4801DC                  	add rsp, rbx
 20978 00010AD7 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 20979                                  .L_lambda_opt_stack_adjusted_0c9b:
 20980 00010AE0 C8000000                	enter 0, 0
 20981 00010AE4 488B4520                	mov rax, PARAM(0)
 20982 00010AE8 50                      	push rax
 20983 00010AE9 6A01                    	push 1
 20984 00010AEB 488B0425[38040000]      	mov rax, qword [free_var_135]
 20985                                  	assert_closure(rax)
    42 00010AF3 803805              <1>  cmp byte [%1], %2
    43 00010AF6 0F8538360000        <1>  jne L_error_incorrect_type
 20986 00010AFC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20987 00010B00 53                      	push rbx
 20988 00010B01 FF7508                  	push RET_ADDR
 20989 00010B04 488B7D18                	mov rdi, COUNT
 20990 00010B08 4883C703                	add rdi, 3
 20991 00010B0C 48C1E703                	shl rdi, 3
 20992 00010B10 4801EF                  	add rdi, rbp
 20993 00010B13 488B6D00                	mov rbp, OLD_RDP
 20994 00010B17 BE00000000              	mov rsi, 0
 20995                                  .L_tc_recycle_frame_loop_5d42:	 ; start recycle frame loop
 20996 00010B1C 4883FE04                	cmp rsi, 4
 20997 00010B20 7427                    	je .L_tc_recycle_frame_done_5d42
 20998 00010B22 B903000000              	mov rcx, 3
 20999 00010B27 4829F1                  	sub rcx, rsi
 21000 00010B2A 48C1E103                	shl rcx, 3
 21001 00010B2E 4801E1                  	add rcx, rsp ; rcx is the address to move
 21002 00010B31 4889F3                  	mov rbx, rsi
 21003 00010B34 48C1E303                	shl rbx, 3
 21004 00010B38 48F7DB                  	neg rbx
 21005 00010B3B 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21006 00010B3E 488B09                  	mov rcx, [rcx]
 21007 00010B41 48890B                  	mov [rbx], rcx
 21008 00010B44 48FFC6                  	inc rsi
 21009 00010B47 EBD3                    	jmp .L_tc_recycle_frame_loop_5d42
 21010                                  .L_tc_recycle_frame_done_5d42:	 ; end recycle frame loop
 21011 00010B49 BB03000000              	mov rbx, 3
 21012 00010B4E 48C1E303                	shl rbx, 3
 21013 00010B52 48F7DB                  	neg rbx
 21014 00010B55 4801FB                  	add rbx, rdi
 21015 00010B58 4889DC                  	mov rsp, rbx
 21016 00010B5B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21017 00010B5F FFE3                    	jmp rbx
 21018 00010B61 C9                      	leave
 21019 00010B62 C21800                  	ret AND_KILL_FRAME(1)
 21020                                  .L_lambda_opt_end_0c9b:	; new closure is in rax
 21021 00010B65 48890425[40040000]      	mov qword [free_var_136], rax
 21022 00010B6D 48B8-                   	mov rax, sob_void
 21022 00010B6F [0000000000000000] 
 21023                                  
 21024 00010B77 4889C7                  	mov rdi, rax
 21025 00010B7A E8461D0000              	call print_sexpr_if_not_void
 21026                                  
 21027 00010B7F 488D0425[17000000]      	lea rax, [23 + L_constants]
 21028 00010B87 50                      	push rax
 21029 00010B88 6A01                    	push 1
 21030 00010B8A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21031 00010B8F E8201D0000              	call malloc
 21032 00010B94 50                      	push rax
 21033 00010B95 BF00000000              	mov rdi, 8 * 0	; new rib
 21034 00010B9A E8151D0000              	call malloc
 21035 00010B9F 50                      	push rax
 21036 00010BA0 BF08000000              	mov rdi, 8 * 1	; extended env
 21037 00010BA5 E80A1D0000              	call malloc
 21038 00010BAA 488B7D10                	mov rdi, ENV
 21039 00010BAE BE00000000              	mov rsi, 0
 21040 00010BB3 BA01000000              	mov rdx, 1
 21041                                  .L_lambda_simple_env_loop_4fb7:	; ext_env[i + 1] <-- env[i]
 21042 00010BB8 4883FE00                	cmp rsi, 0
 21043 00010BBC 7410                    	je .L_lambda_simple_env_end_4fb7
 21044 00010BBE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 21045 00010BC2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21046 00010BC6 48FFC6                  	inc rsi
 21047 00010BC9 48FFC2                  	inc rdx
 21048 00010BCC EBEA                    	jmp .L_lambda_simple_env_loop_4fb7
 21049                                  .L_lambda_simple_env_end_4fb7:
 21050 00010BCE 5B                      	pop rbx
 21051 00010BCF BE00000000              	mov rsi, 0
 21052                                  .L_lambda_simple_params_loop_4fb7:	; copy params
 21053 00010BD4 4883FE00                	cmp rsi, 0
 21054 00010BD8 740E                    	je .L_lambda_simple_params_end_4fb7
 21055 00010BDA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21056 00010BDF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21057 00010BE3 48FFC6                  	inc rsi
 21058 00010BE6 EBEC                    	jmp .L_lambda_simple_params_loop_4fb7
 21059                                  .L_lambda_simple_params_end_4fb7:
 21060 00010BE8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21061 00010BEB 4889C3                  	mov rbx, rax
 21062 00010BEE 58                      	pop rax
 21063 00010BEF C60005                  	mov byte [rax], T_closure
 21064 00010BF2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21065 00010BF6 48C74009[030C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb7
 21066 00010BFE E955030000              	jmp .L_lambda_simple_end_4fb7
 21067                                  .L_lambda_simple_code_4fb7:	; lambda-simple body
 21068 00010C03 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21069 00010C09 740B                    	je .L_lambda_simple_arity_check_ok_4fb7
 21070 00010C0B FF742410                	push qword [rsp + 8 * 2]
 21071 00010C0F 6A01                    	push 1
 21072 00010C11 E9571C0000              	jmp L_error_incorrect_arity_simple
 21073                                  .L_lambda_simple_arity_check_ok_4fb7:
 21074 00010C16 C8000000                	enter 0, 0
 21075 00010C1A BF11000000              	mov qword rdi, (1 + 8 + 8)
 21076 00010C1F E8901C0000              	call malloc
 21077 00010C24 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 21078 00010C28 48B8-                   	mov rax, sob_void
 21078 00010C2A [0000000000000000] 
 21079                                  
 21080 00010C32 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21081 00010C37 E8781C0000              	call malloc
 21082 00010C3C 50                      	push rax
 21083 00010C3D BF08000000              	mov rdi, 8 * 1	; new rib
 21084 00010C42 E86D1C0000              	call malloc
 21085 00010C47 50                      	push rax
 21086 00010C48 BF10000000              	mov rdi, 8 * 2	; extended env
 21087 00010C4D E8621C0000              	call malloc
 21088 00010C52 488B7D10                	mov rdi, ENV
 21089 00010C56 BE00000000              	mov rsi, 0
 21090 00010C5B BA01000000              	mov rdx, 1
 21091                                  .L_lambda_simple_env_loop_4fb8:	; ext_env[i + 1] <-- env[i]
 21092 00010C60 4883FE01                	cmp rsi, 1
 21093 00010C64 7410                    	je .L_lambda_simple_env_end_4fb8
 21094 00010C66 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 21095 00010C6A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21096 00010C6E 48FFC6                  	inc rsi
 21097 00010C71 48FFC2                  	inc rdx
 21098 00010C74 EBEA                    	jmp .L_lambda_simple_env_loop_4fb8
 21099                                  .L_lambda_simple_env_end_4fb8:
 21100 00010C76 5B                      	pop rbx
 21101 00010C77 BE00000000              	mov rsi, 0
 21102                                  .L_lambda_simple_params_loop_4fb8:	; copy params
 21103 00010C7C 4883FE01                	cmp rsi, 1
 21104 00010C80 740E                    	je .L_lambda_simple_params_end_4fb8
 21105 00010C82 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21106 00010C87 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21107 00010C8B 48FFC6                  	inc rsi
 21108 00010C8E EBEC                    	jmp .L_lambda_simple_params_loop_4fb8
 21109                                  .L_lambda_simple_params_end_4fb8:
 21110 00010C90 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21111 00010C93 4889C3                  	mov rbx, rax
 21112 00010C96 58                      	pop rax
 21113 00010C97 C60005                  	mov byte [rax], T_closure
 21114 00010C9A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21115 00010C9E 48C74009[AB0C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb8
 21116 00010CA6 E955010000              	jmp .L_lambda_simple_end_4fb8
 21117                                  .L_lambda_simple_code_4fb8:	; lambda-simple body
 21118 00010CAB 48837C241003            	cmp qword [rsp + 8 * 2], 3
 21119 00010CB1 740B                    	je .L_lambda_simple_arity_check_ok_4fb8
 21120 00010CB3 FF742410                	push qword [rsp + 8 * 2]
 21121 00010CB7 6A03                    	push 3
 21122 00010CB9 E9AF1B0000              	jmp L_error_incorrect_arity_simple
 21123                                  .L_lambda_simple_arity_check_ok_4fb8:
 21124 00010CBE C8000000                	enter 0, 0
 21125 00010CC2 488B4530                	mov rax, PARAM(2)
 21126 00010CC6 50                      	push rax
 21127 00010CC7 488B4528                	mov rax, PARAM(1)
 21128 00010CCB 50                      	push rax
 21129 00010CCC 6A02                    	push 2
 21130 00010CCE 488B0425[30030000]      	mov rax, qword [free_var_102]
 21131                                  	assert_closure(rax)
    42 00010CD6 803805              <1>  cmp byte [%1], %2
    43 00010CD9 0F8555340000        <1>  jne L_error_incorrect_type
 21132 00010CDF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21133 00010CE3 53                      	push rbx
 21134 00010CE4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21135 00010CE8 FFD3                    	call rbx
 21136 00010CEA 483D[02000000]          	cmp rax, sob_boolean_false
 21137 00010CF0 0F84FE000000            	je .L_if_else_56cc
 21138 00010CF6 488B4530                	mov rax, PARAM(2)
 21139 00010CFA 50                      	push rax
 21140 00010CFB 488D0425[80000000]      	lea rax, [128 + L_constants]
 21141 00010D03 50                      	push rax
 21142 00010D04 488B4528                	mov rax, PARAM(1)
 21143 00010D08 50                      	push rax
 21144 00010D09 6A02                    	push 2
 21145 00010D0B 488B0425[08030000]      	mov rax, qword [free_var_97]
 21146                                  	assert_closure(rax)
    42 00010D13 803805              <1>  cmp byte [%1], %2
    43 00010D16 0F8518340000        <1>  jne L_error_incorrect_type
 21147 00010D1C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21148 00010D20 53                      	push rbx
 21149 00010D21 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21150 00010D25 FFD3                    	call rbx
 21151 00010D27 50                      	push rax
 21152 00010D28 488B4520                	mov rax, PARAM(0)
 21153 00010D2C 50                      	push rax
 21154 00010D2D 6A03                    	push 3
 21155 00010D2F 488B4510                	mov rax, qword [rbp + 8*2]
 21156 00010D33 488B00                  	mov rax, qword [rax + 8*0]
 21157 00010D36 488B00                  	mov rax, qword [rax + 8*0]
 21158 00010D39 488B00                  	mov rax, qword [rax]
 21159                                  	assert_closure(rax)
    42 00010D3C 803805              <1>  cmp byte [%1], %2
    43 00010D3F 0F85EF330000        <1>  jne L_error_incorrect_type
 21160 00010D45 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21161 00010D49 53                      	push rbx
 21162 00010D4A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21163 00010D4E FFD3                    	call rbx
 21164 00010D50 50                      	push rax
 21165 00010D51 488B4528                	mov rax, PARAM(1)
 21166 00010D55 50                      	push rax
 21167 00010D56 488B4520                	mov rax, PARAM(0)
 21168 00010D5A 50                      	push rax
 21169 00010D5B 6A02                    	push 2
 21170 00010D5D 488B0425[78010000]      	mov rax, qword [free_var_47]
 21171                                  	assert_closure(rax)
    42 00010D65 803805              <1>  cmp byte [%1], %2
    43 00010D68 0F85C6330000        <1>  jne L_error_incorrect_type
 21172 00010D6E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21173 00010D72 53                      	push rbx
 21174 00010D73 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21175 00010D77 FFD3                    	call rbx
 21176 00010D79 50                      	push rax
 21177 00010D7A 6A02                    	push 2
 21178 00010D7C 488B0425[68000000]      	mov rax, qword [free_var_13]
 21179                                  	assert_closure(rax)
    42 00010D84 803805              <1>  cmp byte [%1], %2
    43 00010D87 0F85A7330000        <1>  jne L_error_incorrect_type
 21180 00010D8D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21181 00010D91 53                      	push rbx
 21182 00010D92 FF7508                  	push RET_ADDR
 21183 00010D95 488B7D18                	mov rdi, COUNT
 21184 00010D99 4883C703                	add rdi, 3
 21185 00010D9D 48C1E703                	shl rdi, 3
 21186 00010DA1 4801EF                  	add rdi, rbp
 21187 00010DA4 488B6D00                	mov rbp, OLD_RDP
 21188 00010DA8 BE00000000              	mov rsi, 0
 21189                                  .L_tc_recycle_frame_loop_5d43:	 ; start recycle frame loop
 21190 00010DAD 4883FE05                	cmp rsi, 5
 21191 00010DB1 7427                    	je .L_tc_recycle_frame_done_5d43
 21192 00010DB3 B904000000              	mov rcx, 4
 21193 00010DB8 4829F1                  	sub rcx, rsi
 21194 00010DBB 48C1E103                	shl rcx, 3
 21195 00010DBF 4801E1                  	add rcx, rsp ; rcx is the address to move
 21196 00010DC2 4889F3                  	mov rbx, rsi
 21197 00010DC5 48C1E303                	shl rbx, 3
 21198 00010DC9 48F7DB                  	neg rbx
 21199 00010DCC 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21200 00010DCF 488B09                  	mov rcx, [rcx]
 21201 00010DD2 48890B                  	mov [rbx], rcx
 21202 00010DD5 48FFC6                  	inc rsi
 21203 00010DD8 EBD3                    	jmp .L_tc_recycle_frame_loop_5d43
 21204                                  .L_tc_recycle_frame_done_5d43:	 ; end recycle frame loop
 21205 00010DDA BB04000000              	mov rbx, 4
 21206 00010DDF 48C1E303                	shl rbx, 3
 21207 00010DE3 48F7DB                  	neg rbx
 21208 00010DE6 4801FB                  	add rbx, rdi
 21209 00010DE9 4889DC                  	mov rsp, rbx
 21210 00010DEC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21211 00010DF0 FFE3                    	jmp rbx
 21212 00010DF2 EB08                    	jmp .L_if_end_56cc
 21213                                  	.L_if_else_56cc:
 21214 00010DF4 488D0425[01000000]      	lea rax, [1 + L_constants]
 21215                                  	.L_if_end_56cc:
 21216 00010DFC C9                      	leave
 21217 00010DFD C22800                  	ret 8 * (2 + 3)
 21218                                  .L_lambda_simple_end_4fb8:	; new closure is in rax
 21219 00010E00 50                      	push rax
 21220 00010E01 488B4520                	mov rax, PARAM(0)
 21221 00010E05 8F00                    	pop qword [rax]
 21222 00010E07 48B8-                   	mov rax, sob_void
 21222 00010E09 [0000000000000000] 
 21223                                  
 21224 00010E11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21225 00010E16 E8991A0000              	call malloc
 21226 00010E1B 50                      	push rax
 21227 00010E1C BF08000000              	mov rdi, 8 * 1	; new rib
 21228 00010E21 E88E1A0000              	call malloc
 21229 00010E26 50                      	push rax
 21230 00010E27 BF10000000              	mov rdi, 8 * 2	; extended env
 21231 00010E2C E8831A0000              	call malloc
 21232 00010E31 488B7D10                	mov rdi, ENV
 21233 00010E35 BE00000000              	mov rsi, 0
 21234 00010E3A BA01000000              	mov rdx, 1
 21235                                  .L_lambda_simple_env_loop_4fb9:	; ext_env[i + 1] <-- env[i]
 21236 00010E3F 4883FE01                	cmp rsi, 1
 21237 00010E43 7410                    	je .L_lambda_simple_env_end_4fb9
 21238 00010E45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 21239 00010E49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21240 00010E4D 48FFC6                  	inc rsi
 21241 00010E50 48FFC2                  	inc rdx
 21242 00010E53 EBEA                    	jmp .L_lambda_simple_env_loop_4fb9
 21243                                  .L_lambda_simple_env_end_4fb9:
 21244 00010E55 5B                      	pop rbx
 21245 00010E56 BE00000000              	mov rsi, 0
 21246                                  .L_lambda_simple_params_loop_4fb9:	; copy params
 21247 00010E5B 4883FE01                	cmp rsi, 1
 21248 00010E5F 740E                    	je .L_lambda_simple_params_end_4fb9
 21249 00010E61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21250 00010E66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21251 00010E6A 48FFC6                  	inc rsi
 21252 00010E6D EBEC                    	jmp .L_lambda_simple_params_loop_4fb9
 21253                                  .L_lambda_simple_params_end_4fb9:
 21254 00010E6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21255 00010E72 4889C3                  	mov rbx, rax
 21256 00010E75 58                      	pop rax
 21257 00010E76 C60005                  	mov byte [rax], T_closure
 21258 00010E79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21259 00010E7D 48C74009[8A0E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb9
 21260 00010E85 E9CA000000              	jmp .L_lambda_simple_end_4fb9
 21261                                  .L_lambda_simple_code_4fb9:	; lambda-simple body
 21262 00010E8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21263 00010E90 740B                    	je .L_lambda_simple_arity_check_ok_4fb9
 21264 00010E92 FF742410                	push qword [rsp + 8 * 2]
 21265 00010E96 6A01                    	push 1
 21266 00010E98 E9D0190000              	jmp L_error_incorrect_arity_simple
 21267                                  .L_lambda_simple_arity_check_ok_4fb9:
 21268 00010E9D C8000000                	enter 0, 0
 21269 00010EA1 488B4520                	mov rax, PARAM(0)
 21270 00010EA5 50                      	push rax
 21271 00010EA6 6A01                    	push 1
 21272 00010EA8 488B0425[90000000]      	mov rax, qword [free_var_18]
 21273                                  	assert_closure(rax)
    42 00010EB0 803805              <1>  cmp byte [%1], %2
    43 00010EB3 0F857B320000        <1>  jne L_error_incorrect_type
 21274 00010EB9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21275 00010EBD 53                      	push rbx
 21276 00010EBE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21277 00010EC2 FFD3                    	call rbx
 21278 00010EC4 50                      	push rax
 21279 00010EC5 488D0425[20000000]      	lea rax, [32 + L_constants]
 21280 00010ECD 50                      	push rax
 21281 00010ECE 488B4520                	mov rax, PARAM(0)
 21282 00010ED2 50                      	push rax
 21283 00010ED3 6A03                    	push 3
 21284 00010ED5 488B4510                	mov rax, qword [rbp + 8*2]
 21285 00010ED9 488B00                  	mov rax, qword [rax + 8*0]
 21286 00010EDC 488B00                  	mov rax, qword [rax + 8*0]
 21287 00010EDF 488B00                  	mov rax, qword [rax]
 21288                                  	assert_closure(rax)
    42 00010EE2 803805              <1>  cmp byte [%1], %2
    43 00010EE5 0F8549320000        <1>  jne L_error_incorrect_type
 21289 00010EEB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21290 00010EEF 53                      	push rbx
 21291 00010EF0 FF7508                  	push RET_ADDR
 21292 00010EF3 488B7D18                	mov rdi, COUNT
 21293 00010EF7 4883C703                	add rdi, 3
 21294 00010EFB 48C1E703                	shl rdi, 3
 21295 00010EFF 4801EF                  	add rdi, rbp
 21296 00010F02 488B6D00                	mov rbp, OLD_RDP
 21297 00010F06 BE00000000              	mov rsi, 0
 21298                                  .L_tc_recycle_frame_loop_5d44:	 ; start recycle frame loop
 21299 00010F0B 4883FE06                	cmp rsi, 6
 21300 00010F0F 7427                    	je .L_tc_recycle_frame_done_5d44
 21301 00010F11 B905000000              	mov rcx, 5
 21302 00010F16 4829F1                  	sub rcx, rsi
 21303 00010F19 48C1E103                	shl rcx, 3
 21304 00010F1D 4801E1                  	add rcx, rsp ; rcx is the address to move
 21305 00010F20 4889F3                  	mov rbx, rsi
 21306 00010F23 48C1E303                	shl rbx, 3
 21307 00010F27 48F7DB                  	neg rbx
 21308 00010F2A 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21309 00010F2D 488B09                  	mov rcx, [rcx]
 21310 00010F30 48890B                  	mov [rbx], rcx
 21311 00010F33 48FFC6                  	inc rsi
 21312 00010F36 EBD3                    	jmp .L_tc_recycle_frame_loop_5d44
 21313                                  .L_tc_recycle_frame_done_5d44:	 ; end recycle frame loop
 21314 00010F38 BB05000000              	mov rbx, 5
 21315 00010F3D 48C1E303                	shl rbx, 3
 21316 00010F41 48F7DB                  	neg rbx
 21317 00010F44 4801FB                  	add rbx, rdi
 21318 00010F47 4889DC                  	mov rsp, rbx
 21319 00010F4A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21320 00010F4E FFE3                    	jmp rbx
 21321 00010F50 C9                      	leave
 21322 00010F51 C21800                  	ret 8 * (2 + 1)
 21323                                  .L_lambda_simple_end_4fb9:	; new closure is in rax
 21324 00010F54 C9                      	leave
 21325 00010F55 C21800                  	ret 8 * (2 + 1)
 21326                                  .L_lambda_simple_end_4fb7:	; new closure is in rax
 21327                                  	assert_closure(rax)
    42 00010F58 803805              <1>  cmp byte [%1], %2
    43 00010F5B 0F85D3310000        <1>  jne L_error_incorrect_type
 21328 00010F61 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21329 00010F65 53                      	push rbx
 21330 00010F66 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21331 00010F6A FFD3                    	call rbx
 21332 00010F6C 48890425[D8030000]      	mov qword [free_var_123], rax
 21333 00010F74 48B8-                   	mov rax, sob_void
 21333 00010F76 [0000000000000000] 
 21334                                  
 21335 00010F7E 4889C7                  	mov rdi, rax
 21336 00010F81 E83F190000              	call print_sexpr_if_not_void
 21337                                  
 21338 00010F86 488D0425[17000000]      	lea rax, [23 + L_constants]
 21339 00010F8E 50                      	push rax
 21340 00010F8F 6A01                    	push 1
 21341 00010F91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21342 00010F96 E819190000              	call malloc
 21343 00010F9B 50                      	push rax
 21344 00010F9C BF00000000              	mov rdi, 8 * 0	; new rib
 21345 00010FA1 E80E190000              	call malloc
 21346 00010FA6 50                      	push rax
 21347 00010FA7 BF08000000              	mov rdi, 8 * 1	; extended env
 21348 00010FAC E803190000              	call malloc
 21349 00010FB1 488B7D10                	mov rdi, ENV
 21350 00010FB5 BE00000000              	mov rsi, 0
 21351 00010FBA BA01000000              	mov rdx, 1
 21352                                  .L_lambda_simple_env_loop_4fba:	; ext_env[i + 1] <-- env[i]
 21353 00010FBF 4883FE00                	cmp rsi, 0
 21354 00010FC3 7410                    	je .L_lambda_simple_env_end_4fba
 21355 00010FC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 21356 00010FC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21357 00010FCD 48FFC6                  	inc rsi
 21358 00010FD0 48FFC2                  	inc rdx
 21359 00010FD3 EBEA                    	jmp .L_lambda_simple_env_loop_4fba
 21360                                  .L_lambda_simple_env_end_4fba:
 21361 00010FD5 5B                      	pop rbx
 21362 00010FD6 BE00000000              	mov rsi, 0
 21363                                  .L_lambda_simple_params_loop_4fba:	; copy params
 21364 00010FDB 4883FE00                	cmp rsi, 0
 21365 00010FDF 740E                    	je .L_lambda_simple_params_end_4fba
 21366 00010FE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21367 00010FE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21368 00010FEA 48FFC6                  	inc rsi
 21369 00010FED EBEC                    	jmp .L_lambda_simple_params_loop_4fba
 21370                                  .L_lambda_simple_params_end_4fba:
 21371 00010FEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21372 00010FF2 4889C3                  	mov rbx, rax
 21373 00010FF5 58                      	pop rax
 21374 00010FF6 C60005                  	mov byte [rax], T_closure
 21375 00010FF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21376 00010FFD 48C74009[0A100100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fba
 21377 00011005 E955030000              	jmp .L_lambda_simple_end_4fba
 21378                                  .L_lambda_simple_code_4fba:	; lambda-simple body
 21379 0001100A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21380 00011010 740B                    	je .L_lambda_simple_arity_check_ok_4fba
 21381 00011012 FF742410                	push qword [rsp + 8 * 2]
 21382 00011016 6A01                    	push 1
 21383 00011018 E950180000              	jmp L_error_incorrect_arity_simple
 21384                                  .L_lambda_simple_arity_check_ok_4fba:
 21385 0001101D C8000000                	enter 0, 0
 21386 00011021 BF11000000              	mov qword rdi, (1 + 8 + 8)
 21387 00011026 E889180000              	call malloc
 21388 0001102B 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 21389 0001102F 48B8-                   	mov rax, sob_void
 21389 00011031 [0000000000000000] 
 21390                                  
 21391 00011039 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21392 0001103E E871180000              	call malloc
 21393 00011043 50                      	push rax
 21394 00011044 BF08000000              	mov rdi, 8 * 1	; new rib
 21395 00011049 E866180000              	call malloc
 21396 0001104E 50                      	push rax
 21397 0001104F BF10000000              	mov rdi, 8 * 2	; extended env
 21398 00011054 E85B180000              	call malloc
 21399 00011059 488B7D10                	mov rdi, ENV
 21400 0001105D BE00000000              	mov rsi, 0
 21401 00011062 BA01000000              	mov rdx, 1
 21402                                  .L_lambda_simple_env_loop_4fbb:	; ext_env[i + 1] <-- env[i]
 21403 00011067 4883FE01                	cmp rsi, 1
 21404 0001106B 7410                    	je .L_lambda_simple_env_end_4fbb
 21405 0001106D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 21406 00011071 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21407 00011075 48FFC6                  	inc rsi
 21408 00011078 48FFC2                  	inc rdx
 21409 0001107B EBEA                    	jmp .L_lambda_simple_env_loop_4fbb
 21410                                  .L_lambda_simple_env_end_4fbb:
 21411 0001107D 5B                      	pop rbx
 21412 0001107E BE00000000              	mov rsi, 0
 21413                                  .L_lambda_simple_params_loop_4fbb:	; copy params
 21414 00011083 4883FE01                	cmp rsi, 1
 21415 00011087 740E                    	je .L_lambda_simple_params_end_4fbb
 21416 00011089 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21417 0001108E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21418 00011092 48FFC6                  	inc rsi
 21419 00011095 EBEC                    	jmp .L_lambda_simple_params_loop_4fbb
 21420                                  .L_lambda_simple_params_end_4fbb:
 21421 00011097 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21422 0001109A 4889C3                  	mov rbx, rax
 21423 0001109D 58                      	pop rax
 21424 0001109E C60005                  	mov byte [rax], T_closure
 21425 000110A1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21426 000110A5 48C74009[B2100100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fbb
 21427 000110AD E955010000              	jmp .L_lambda_simple_end_4fbb
 21428                                  .L_lambda_simple_code_4fbb:	; lambda-simple body
 21429 000110B2 48837C241003            	cmp qword [rsp + 8 * 2], 3
 21430 000110B8 740B                    	je .L_lambda_simple_arity_check_ok_4fbb
 21431 000110BA FF742410                	push qword [rsp + 8 * 2]
 21432 000110BE 6A03                    	push 3
 21433 000110C0 E9A8170000              	jmp L_error_incorrect_arity_simple
 21434                                  .L_lambda_simple_arity_check_ok_4fbb:
 21435 000110C5 C8000000                	enter 0, 0
 21436 000110C9 488B4530                	mov rax, PARAM(2)
 21437 000110CD 50                      	push rax
 21438 000110CE 488B4528                	mov rax, PARAM(1)
 21439 000110D2 50                      	push rax
 21440 000110D3 6A02                    	push 2
 21441 000110D5 488B0425[30030000]      	mov rax, qword [free_var_102]
 21442                                  	assert_closure(rax)
    42 000110DD 803805              <1>  cmp byte [%1], %2
    43 000110E0 0F854E300000        <1>  jne L_error_incorrect_type
 21443 000110E6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21444 000110EA 53                      	push rbx
 21445 000110EB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21446 000110EF FFD3                    	call rbx
 21447 000110F1 483D[02000000]          	cmp rax, sob_boolean_false
 21448 000110F7 0F84FE000000            	je .L_if_else_56cd
 21449 000110FD 488B4530                	mov rax, PARAM(2)
 21450 00011101 50                      	push rax
 21451 00011102 488D0425[80000000]      	lea rax, [128 + L_constants]
 21452 0001110A 50                      	push rax
 21453 0001110B 488B4528                	mov rax, PARAM(1)
 21454 0001110F 50                      	push rax
 21455 00011110 6A02                    	push 2
 21456 00011112 488B0425[08030000]      	mov rax, qword [free_var_97]
 21457                                  	assert_closure(rax)
    42 0001111A 803805              <1>  cmp byte [%1], %2
    43 0001111D 0F8511300000        <1>  jne L_error_incorrect_type
 21458 00011123 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21459 00011127 53                      	push rbx
 21460 00011128 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21461 0001112C FFD3                    	call rbx
 21462 0001112E 50                      	push rax
 21463 0001112F 488B4520                	mov rax, PARAM(0)
 21464 00011133 50                      	push rax
 21465 00011134 6A03                    	push 3
 21466 00011136 488B4510                	mov rax, qword [rbp + 8*2]
 21467 0001113A 488B00                  	mov rax, qword [rax + 8*0]
 21468 0001113D 488B00                  	mov rax, qword [rax + 8*0]
 21469 00011140 488B00                  	mov rax, qword [rax]
 21470                                  	assert_closure(rax)
    42 00011143 803805              <1>  cmp byte [%1], %2
    43 00011146 0F85E82F0000        <1>  jne L_error_incorrect_type
 21471 0001114C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21472 00011150 53                      	push rbx
 21473 00011151 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21474 00011155 FFD3                    	call rbx
 21475 00011157 50                      	push rax
 21476 00011158 488B4528                	mov rax, PARAM(1)
 21477 0001115C 50                      	push rax
 21478 0001115D 488B4520                	mov rax, PARAM(0)
 21479 00011161 50                      	push rax
 21480 00011162 6A02                    	push 2
 21481 00011164 488B0425[80010000]      	mov rax, qword [free_var_48]
 21482                                  	assert_closure(rax)
    42 0001116C 803805              <1>  cmp byte [%1], %2
    43 0001116F 0F85BF2F0000        <1>  jne L_error_incorrect_type
 21483 00011175 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21484 00011179 53                      	push rbx
 21485 0001117A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21486 0001117E FFD3                    	call rbx
 21487 00011180 50                      	push rax
 21488 00011181 6A02                    	push 2
 21489 00011183 488B0425[68000000]      	mov rax, qword [free_var_13]
 21490                                  	assert_closure(rax)
    42 0001118B 803805              <1>  cmp byte [%1], %2
    43 0001118E 0F85A02F0000        <1>  jne L_error_incorrect_type
 21491 00011194 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21492 00011198 53                      	push rbx
 21493 00011199 FF7508                  	push RET_ADDR
 21494 0001119C 488B7D18                	mov rdi, COUNT
 21495 000111A0 4883C703                	add rdi, 3
 21496 000111A4 48C1E703                	shl rdi, 3
 21497 000111A8 4801EF                  	add rdi, rbp
 21498 000111AB 488B6D00                	mov rbp, OLD_RDP
 21499 000111AF BE00000000              	mov rsi, 0
 21500                                  .L_tc_recycle_frame_loop_5d45:	 ; start recycle frame loop
 21501 000111B4 4883FE05                	cmp rsi, 5
 21502 000111B8 7427                    	je .L_tc_recycle_frame_done_5d45
 21503 000111BA B904000000              	mov rcx, 4
 21504 000111BF 4829F1                  	sub rcx, rsi
 21505 000111C2 48C1E103                	shl rcx, 3
 21506 000111C6 4801E1                  	add rcx, rsp ; rcx is the address to move
 21507 000111C9 4889F3                  	mov rbx, rsi
 21508 000111CC 48C1E303                	shl rbx, 3
 21509 000111D0 48F7DB                  	neg rbx
 21510 000111D3 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21511 000111D6 488B09                  	mov rcx, [rcx]
 21512 000111D9 48890B                  	mov [rbx], rcx
 21513 000111DC 48FFC6                  	inc rsi
 21514 000111DF EBD3                    	jmp .L_tc_recycle_frame_loop_5d45
 21515                                  .L_tc_recycle_frame_done_5d45:	 ; end recycle frame loop
 21516 000111E1 BB04000000              	mov rbx, 4
 21517 000111E6 48C1E303                	shl rbx, 3
 21518 000111EA 48F7DB                  	neg rbx
 21519 000111ED 4801FB                  	add rbx, rdi
 21520 000111F0 4889DC                  	mov rsp, rbx
 21521 000111F3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21522 000111F7 FFE3                    	jmp rbx
 21523 000111F9 EB08                    	jmp .L_if_end_56cd
 21524                                  	.L_if_else_56cd:
 21525 000111FB 488D0425[01000000]      	lea rax, [1 + L_constants]
 21526                                  	.L_if_end_56cd:
 21527 00011203 C9                      	leave
 21528 00011204 C22800                  	ret 8 * (2 + 3)
 21529                                  .L_lambda_simple_end_4fbb:	; new closure is in rax
 21530 00011207 50                      	push rax
 21531 00011208 488B4520                	mov rax, PARAM(0)
 21532 0001120C 8F00                    	pop qword [rax]
 21533 0001120E 48B8-                   	mov rax, sob_void
 21533 00011210 [0000000000000000] 
 21534                                  
 21535 00011218 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21536 0001121D E892160000              	call malloc
 21537 00011222 50                      	push rax
 21538 00011223 BF08000000              	mov rdi, 8 * 1	; new rib
 21539 00011228 E887160000              	call malloc
 21540 0001122D 50                      	push rax
 21541 0001122E BF10000000              	mov rdi, 8 * 2	; extended env
 21542 00011233 E87C160000              	call malloc
 21543 00011238 488B7D10                	mov rdi, ENV
 21544 0001123C BE00000000              	mov rsi, 0
 21545 00011241 BA01000000              	mov rdx, 1
 21546                                  .L_lambda_simple_env_loop_4fbc:	; ext_env[i + 1] <-- env[i]
 21547 00011246 4883FE01                	cmp rsi, 1
 21548 0001124A 7410                    	je .L_lambda_simple_env_end_4fbc
 21549 0001124C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 21550 00011250 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21551 00011254 48FFC6                  	inc rsi
 21552 00011257 48FFC2                  	inc rdx
 21553 0001125A EBEA                    	jmp .L_lambda_simple_env_loop_4fbc
 21554                                  .L_lambda_simple_env_end_4fbc:
 21555 0001125C 5B                      	pop rbx
 21556 0001125D BE00000000              	mov rsi, 0
 21557                                  .L_lambda_simple_params_loop_4fbc:	; copy params
 21558 00011262 4883FE01                	cmp rsi, 1
 21559 00011266 740E                    	je .L_lambda_simple_params_end_4fbc
 21560 00011268 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21561 0001126D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21562 00011271 48FFC6                  	inc rsi
 21563 00011274 EBEC                    	jmp .L_lambda_simple_params_loop_4fbc
 21564                                  .L_lambda_simple_params_end_4fbc:
 21565 00011276 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21566 00011279 4889C3                  	mov rbx, rax
 21567 0001127C 58                      	pop rax
 21568 0001127D C60005                  	mov byte [rax], T_closure
 21569 00011280 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21570 00011284 48C74009[91120100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fbc
 21571 0001128C E9CA000000              	jmp .L_lambda_simple_end_4fbc
 21572                                  .L_lambda_simple_code_4fbc:	; lambda-simple body
 21573 00011291 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21574 00011297 740B                    	je .L_lambda_simple_arity_check_ok_4fbc
 21575 00011299 FF742410                	push qword [rsp + 8 * 2]
 21576 0001129D 6A01                    	push 1
 21577 0001129F E9C9150000              	jmp L_error_incorrect_arity_simple
 21578                                  .L_lambda_simple_arity_check_ok_4fbc:
 21579 000112A4 C8000000                	enter 0, 0
 21580 000112A8 488B4520                	mov rax, PARAM(0)
 21581 000112AC 50                      	push rax
 21582 000112AD 6A01                    	push 1
 21583 000112AF 488B0425[98000000]      	mov rax, qword [free_var_19]
 21584                                  	assert_closure(rax)
    42 000112B7 803805              <1>  cmp byte [%1], %2
    43 000112BA 0F85742E0000        <1>  jne L_error_incorrect_type
 21585 000112C0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21586 000112C4 53                      	push rbx
 21587 000112C5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21588 000112C9 FFD3                    	call rbx
 21589 000112CB 50                      	push rax
 21590 000112CC 488D0425[20000000]      	lea rax, [32 + L_constants]
 21591 000112D4 50                      	push rax
 21592 000112D5 488B4520                	mov rax, PARAM(0)
 21593 000112D9 50                      	push rax
 21594 000112DA 6A03                    	push 3
 21595 000112DC 488B4510                	mov rax, qword [rbp + 8*2]
 21596 000112E0 488B00                  	mov rax, qword [rax + 8*0]
 21597 000112E3 488B00                  	mov rax, qword [rax + 8*0]
 21598 000112E6 488B00                  	mov rax, qword [rax]
 21599                                  	assert_closure(rax)
    42 000112E9 803805              <1>  cmp byte [%1], %2
    43 000112EC 0F85422E0000        <1>  jne L_error_incorrect_type
 21600 000112F2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21601 000112F6 53                      	push rbx
 21602 000112F7 FF7508                  	push RET_ADDR
 21603 000112FA 488B7D18                	mov rdi, COUNT
 21604 000112FE 4883C703                	add rdi, 3
 21605 00011302 48C1E703                	shl rdi, 3
 21606 00011306 4801EF                  	add rdi, rbp
 21607 00011309 488B6D00                	mov rbp, OLD_RDP
 21608 0001130D BE00000000              	mov rsi, 0
 21609                                  .L_tc_recycle_frame_loop_5d46:	 ; start recycle frame loop
 21610 00011312 4883FE06                	cmp rsi, 6
 21611 00011316 7427                    	je .L_tc_recycle_frame_done_5d46
 21612 00011318 B905000000              	mov rcx, 5
 21613 0001131D 4829F1                  	sub rcx, rsi
 21614 00011320 48C1E103                	shl rcx, 3
 21615 00011324 4801E1                  	add rcx, rsp ; rcx is the address to move
 21616 00011327 4889F3                  	mov rbx, rsi
 21617 0001132A 48C1E303                	shl rbx, 3
 21618 0001132E 48F7DB                  	neg rbx
 21619 00011331 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21620 00011334 488B09                  	mov rcx, [rcx]
 21621 00011337 48890B                  	mov [rbx], rcx
 21622 0001133A 48FFC6                  	inc rsi
 21623 0001133D EBD3                    	jmp .L_tc_recycle_frame_loop_5d46
 21624                                  .L_tc_recycle_frame_done_5d46:	 ; end recycle frame loop
 21625 0001133F BB05000000              	mov rbx, 5
 21626 00011344 48C1E303                	shl rbx, 3
 21627 00011348 48F7DB                  	neg rbx
 21628 0001134B 4801FB                  	add rbx, rdi
 21629 0001134E 4889DC                  	mov rsp, rbx
 21630 00011351 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21631 00011355 FFE3                    	jmp rbx
 21632 00011357 C9                      	leave
 21633 00011358 C21800                  	ret 8 * (2 + 1)
 21634                                  .L_lambda_simple_end_4fbc:	; new closure is in rax
 21635 0001135B C9                      	leave
 21636 0001135C C21800                  	ret 8 * (2 + 1)
 21637                                  .L_lambda_simple_end_4fba:	; new closure is in rax
 21638                                  	assert_closure(rax)
    42 0001135F 803805              <1>  cmp byte [%1], %2
    43 00011362 0F85CC2D0000        <1>  jne L_error_incorrect_type
 21639 00011368 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21640 0001136C 53                      	push rbx
 21641 0001136D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21642 00011371 FFD3                    	call rbx
 21643 00011373 48890425[48040000]      	mov qword [free_var_137], rax
 21644 0001137B 48B8-                   	mov rax, sob_void
 21644 0001137D [0000000000000000] 
 21645                                  
 21646 00011385 4889C7                  	mov rdi, rax
 21647 00011388 E838150000              	call print_sexpr_if_not_void
 21648                                  
 21649 0001138D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21650 00011392 E81D150000              	call malloc
 21651 00011397 50                      	push rax
 21652 00011398 BF00000000              	mov rdi, 8 * 0	; new rib
 21653 0001139D E812150000              	call malloc
 21654 000113A2 50                      	push rax
 21655 000113A3 BF08000000              	mov rdi, 8 * 1	; extended env
 21656 000113A8 E807150000              	call malloc
 21657 000113AD 488B7D10                	mov rdi, ENV
 21658 000113B1 BE00000000              	mov rsi, 0
 21659 000113B6 BA01000000              	mov rdx, 1
 21660                                  .L_lambda_simple_env_loop_4fbd:	; ext_env[i + 1] <-- env[i]
 21661 000113BB 4883FE00                	cmp rsi, 0
 21662 000113BF 7410                    	je .L_lambda_simple_env_end_4fbd
 21663 000113C1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 21664 000113C5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21665 000113C9 48FFC6                  	inc rsi
 21666 000113CC 48FFC2                  	inc rdx
 21667 000113CF EBEA                    	jmp .L_lambda_simple_env_loop_4fbd
 21668                                  .L_lambda_simple_env_end_4fbd:
 21669 000113D1 5B                      	pop rbx
 21670 000113D2 BE00000000              	mov rsi, 0
 21671                                  .L_lambda_simple_params_loop_4fbd:	; copy params
 21672 000113D7 4883FE00                	cmp rsi, 0
 21673 000113DB 740E                    	je .L_lambda_simple_params_end_4fbd
 21674 000113DD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21675 000113E2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21676 000113E6 48FFC6                  	inc rsi
 21677 000113E9 EBEC                    	jmp .L_lambda_simple_params_loop_4fbd
 21678                                  .L_lambda_simple_params_end_4fbd:
 21679 000113EB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21680 000113EE 4889C3                  	mov rbx, rax
 21681 000113F1 58                      	pop rax
 21682 000113F2 C60005                  	mov byte [rax], T_closure
 21683 000113F5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21684 000113F9 48C74009[06140100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fbd
 21685 00011401 E9B7000000              	jmp .L_lambda_simple_end_4fbd
 21686                                  .L_lambda_simple_code_4fbd:	; lambda-simple body
 21687 00011406 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21688 0001140C 740B                    	je .L_lambda_simple_arity_check_ok_4fbd
 21689 0001140E FF742410                	push qword [rsp + 8 * 2]
 21690 00011412 6A01                    	push 1
 21691 00011414 E954140000              	jmp L_error_incorrect_arity_simple
 21692                                  .L_lambda_simple_arity_check_ok_4fbd:
 21693 00011419 C8000000                	enter 0, 0
 21694 0001141D 488B4520                	mov rax, PARAM(0)
 21695 00011421 50                      	push rax
 21696 00011422 6A00                    	push 0
 21697 00011424 488B0425[D0000000]      	mov rax, qword [free_var_26]
 21698                                  	assert_closure(rax)
    42 0001142C 803805              <1>  cmp byte [%1], %2
    43 0001142F 0F85FF2C0000        <1>  jne L_error_incorrect_type
 21699 00011435 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21700 00011439 53                      	push rbx
 21701 0001143A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21702 0001143E FFD3                    	call rbx
 21703 00011440 50                      	push rax
 21704 00011441 6A02                    	push 2
 21705 00011443 488B0425[60010000]      	mov rax, qword [free_var_44]
 21706                                  	assert_closure(rax)
    42 0001144B 803805              <1>  cmp byte [%1], %2
    43 0001144E 0F85E02C0000        <1>  jne L_error_incorrect_type
 21707 00011454 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21708 00011458 53                      	push rbx
 21709 00011459 FF7508                  	push RET_ADDR
 21710 0001145C 488B7D18                	mov rdi, COUNT
 21711 00011460 4883C703                	add rdi, 3
 21712 00011464 48C1E703                	shl rdi, 3
 21713 00011468 4801EF                  	add rdi, rbp
 21714 0001146B 488B6D00                	mov rbp, OLD_RDP
 21715 0001146F BE00000000              	mov rsi, 0
 21716                                  .L_tc_recycle_frame_loop_5d47:	 ; start recycle frame loop
 21717 00011474 4883FE05                	cmp rsi, 5
 21718 00011478 7427                    	je .L_tc_recycle_frame_done_5d47
 21719 0001147A B904000000              	mov rcx, 4
 21720 0001147F 4829F1                  	sub rcx, rsi
 21721 00011482 48C1E103                	shl rcx, 3
 21722 00011486 4801E1                  	add rcx, rsp ; rcx is the address to move
 21723 00011489 4889F3                  	mov rbx, rsi
 21724 0001148C 48C1E303                	shl rbx, 3
 21725 00011490 48F7DB                  	neg rbx
 21726 00011493 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21727 00011496 488B09                  	mov rcx, [rcx]
 21728 00011499 48890B                  	mov [rbx], rcx
 21729 0001149C 48FFC6                  	inc rsi
 21730 0001149F EBD3                    	jmp .L_tc_recycle_frame_loop_5d47
 21731                                  .L_tc_recycle_frame_done_5d47:	 ; end recycle frame loop
 21732 000114A1 BB04000000              	mov rbx, 4
 21733 000114A6 48C1E303                	shl rbx, 3
 21734 000114AA 48F7DB                  	neg rbx
 21735 000114AD 4801FB                  	add rbx, rdi
 21736 000114B0 4889DC                  	mov rsp, rbx
 21737 000114B3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21738 000114B7 FFE3                    	jmp rbx
 21739 000114B9 C9                      	leave
 21740 000114BA C21800                  	ret 8 * (2 + 1)
 21741                                  .L_lambda_simple_end_4fbd:	; new closure is in rax
 21742 000114BD 48890425[50040000]      	mov qword [free_var_138], rax
 21743 000114C5 48B8-                   	mov rax, sob_void
 21743 000114C7 [0000000000000000] 
 21744                                  
 21745 000114CF 4889C7                  	mov rdi, rax
 21746 000114D2 E8EE130000              	call print_sexpr_if_not_void
 21747                                  
 21748 000114D7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21749 000114DC E8D3130000              	call malloc
 21750 000114E1 50                      	push rax
 21751 000114E2 BF00000000              	mov rdi, 8 * 0	; new rib
 21752 000114E7 E8C8130000              	call malloc
 21753 000114EC 50                      	push rax
 21754 000114ED BF08000000              	mov rdi, 8 * 1	; extended env
 21755 000114F2 E8BD130000              	call malloc
 21756 000114F7 488B7D10                	mov rdi, ENV
 21757 000114FB BE00000000              	mov rsi, 0
 21758 00011500 BA01000000              	mov rdx, 1
 21759                                  .L_lambda_simple_env_loop_4fbe:	; ext_env[i + 1] <-- env[i]
 21760 00011505 4883FE00                	cmp rsi, 0
 21761 00011509 7410                    	je .L_lambda_simple_env_end_4fbe
 21762 0001150B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 21763 0001150F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21764 00011513 48FFC6                  	inc rsi
 21765 00011516 48FFC2                  	inc rdx
 21766 00011519 EBEA                    	jmp .L_lambda_simple_env_loop_4fbe
 21767                                  .L_lambda_simple_env_end_4fbe:
 21768 0001151B 5B                      	pop rbx
 21769 0001151C BE00000000              	mov rsi, 0
 21770                                  .L_lambda_simple_params_loop_4fbe:	; copy params
 21771 00011521 4883FE00                	cmp rsi, 0
 21772 00011525 740E                    	je .L_lambda_simple_params_end_4fbe
 21773 00011527 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21774 0001152C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21775 00011530 48FFC6                  	inc rsi
 21776 00011533 EBEC                    	jmp .L_lambda_simple_params_loop_4fbe
 21777                                  .L_lambda_simple_params_end_4fbe:
 21778 00011535 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21779 00011538 4889C3                  	mov rbx, rax
 21780 0001153B 58                      	pop rax
 21781 0001153C C60005                  	mov byte [rax], T_closure
 21782 0001153F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21783 00011543 48C74009[50150100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fbe
 21784 0001154B E9A1000000              	jmp .L_lambda_simple_end_4fbe
 21785                                  .L_lambda_simple_code_4fbe:	; lambda-simple body
 21786 00011550 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21787 00011556 740B                    	je .L_lambda_simple_arity_check_ok_4fbe
 21788 00011558 FF742410                	push qword [rsp + 8 * 2]
 21789 0001155C 6A01                    	push 1
 21790 0001155E E90A130000              	jmp L_error_incorrect_arity_simple
 21791                                  .L_lambda_simple_arity_check_ok_4fbe:
 21792 00011563 C8000000                	enter 0, 0
 21793 00011567 488B4520                	mov rax, PARAM(0)
 21794 0001156B 50                      	push rax
 21795 0001156C 488D0425[20000000]      	lea rax, [32 + L_constants]
 21796 00011574 50                      	push rax
 21797 00011575 6A02                    	push 2
 21798 00011577 488B0425[30030000]      	mov rax, qword [free_var_102]
 21799                                  	assert_closure(rax)
    42 0001157F 803805              <1>  cmp byte [%1], %2
    43 00011582 0F85AC2B0000        <1>  jne L_error_incorrect_type
 21800 00011588 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21801 0001158C 53                      	push rbx
 21802 0001158D FF7508                  	push RET_ADDR
 21803 00011590 488B7D18                	mov rdi, COUNT
 21804 00011594 4883C703                	add rdi, 3
 21805 00011598 48C1E703                	shl rdi, 3
 21806 0001159C 4801EF                  	add rdi, rbp
 21807 0001159F 488B6D00                	mov rbp, OLD_RDP
 21808 000115A3 BE00000000              	mov rsi, 0
 21809                                  .L_tc_recycle_frame_loop_5d48:	 ; start recycle frame loop
 21810 000115A8 4883FE05                	cmp rsi, 5
 21811 000115AC 7427                    	je .L_tc_recycle_frame_done_5d48
 21812 000115AE B904000000              	mov rcx, 4
 21813 000115B3 4829F1                  	sub rcx, rsi
 21814 000115B6 48C1E103                	shl rcx, 3
 21815 000115BA 4801E1                  	add rcx, rsp ; rcx is the address to move
 21816 000115BD 4889F3                  	mov rbx, rsi
 21817 000115C0 48C1E303                	shl rbx, 3
 21818 000115C4 48F7DB                  	neg rbx
 21819 000115C7 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21820 000115CA 488B09                  	mov rcx, [rcx]
 21821 000115CD 48890B                  	mov [rbx], rcx
 21822 000115D0 48FFC6                  	inc rsi
 21823 000115D3 EBD3                    	jmp .L_tc_recycle_frame_loop_5d48
 21824                                  .L_tc_recycle_frame_done_5d48:	 ; end recycle frame loop
 21825 000115D5 BB04000000              	mov rbx, 4
 21826 000115DA 48C1E303                	shl rbx, 3
 21827 000115DE 48F7DB                  	neg rbx
 21828 000115E1 4801FB                  	add rbx, rdi
 21829 000115E4 4889DC                  	mov rsp, rbx
 21830 000115E7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21831 000115EB FFE3                    	jmp rbx
 21832 000115ED C9                      	leave
 21833 000115EE C21800                  	ret 8 * (2 + 1)
 21834                                  .L_lambda_simple_end_4fbe:	; new closure is in rax
 21835 000115F1 48890425[58040000]      	mov qword [free_var_139], rax
 21836 000115F9 48B8-                   	mov rax, sob_void
 21836 000115FB [0000000000000000] 
 21837                                  
 21838 00011603 4889C7                  	mov rdi, rax
 21839 00011606 E8BA120000              	call print_sexpr_if_not_void
 21840                                  
 21841 0001160B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21842 00011610 E89F120000              	call malloc
 21843 00011615 50                      	push rax
 21844 00011616 BF00000000              	mov rdi, 8 * 0	; new rib
 21845 0001161B E894120000              	call malloc
 21846 00011620 50                      	push rax
 21847 00011621 BF08000000              	mov rdi, 8 * 1	; extended env
 21848 00011626 E889120000              	call malloc
 21849 0001162B 488B7D10                	mov rdi, ENV
 21850 0001162F BE00000000              	mov rsi, 0
 21851 00011634 BA01000000              	mov rdx, 1
 21852                                  .L_lambda_simple_env_loop_4fbf:	; ext_env[i + 1] <-- env[i]
 21853 00011639 4883FE00                	cmp rsi, 0
 21854 0001163D 7410                    	je .L_lambda_simple_env_end_4fbf
 21855 0001163F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 21856 00011643 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21857 00011647 48FFC6                  	inc rsi
 21858 0001164A 48FFC2                  	inc rdx
 21859 0001164D EBEA                    	jmp .L_lambda_simple_env_loop_4fbf
 21860                                  .L_lambda_simple_env_end_4fbf:
 21861 0001164F 5B                      	pop rbx
 21862 00011650 BE00000000              	mov rsi, 0
 21863                                  .L_lambda_simple_params_loop_4fbf:	; copy params
 21864 00011655 4883FE00                	cmp rsi, 0
 21865 00011659 740E                    	je .L_lambda_simple_params_end_4fbf
 21866 0001165B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21867 00011660 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21868 00011664 48FFC6                  	inc rsi
 21869 00011667 EBEC                    	jmp .L_lambda_simple_params_loop_4fbf
 21870                                  .L_lambda_simple_params_end_4fbf:
 21871 00011669 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21872 0001166C 4889C3                  	mov rbx, rax
 21873 0001166F 58                      	pop rax
 21874 00011670 C60005                  	mov byte [rax], T_closure
 21875 00011673 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21876 00011677 48C74009[84160100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fbf
 21877 0001167F E9A1000000              	jmp .L_lambda_simple_end_4fbf
 21878                                  .L_lambda_simple_code_4fbf:	; lambda-simple body
 21879 00011684 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21880 0001168A 740B                    	je .L_lambda_simple_arity_check_ok_4fbf
 21881 0001168C FF742410                	push qword [rsp + 8 * 2]
 21882 00011690 6A01                    	push 1
 21883 00011692 E9D6110000              	jmp L_error_incorrect_arity_simple
 21884                                  .L_lambda_simple_arity_check_ok_4fbf:
 21885 00011697 C8000000                	enter 0, 0
 21886 0001169B 488D0425[20000000]      	lea rax, [32 + L_constants]
 21887 000116A3 50                      	push rax
 21888 000116A4 488B4520                	mov rax, PARAM(0)
 21889 000116A8 50                      	push rax
 21890 000116A9 6A02                    	push 2
 21891 000116AB 488B0425[30030000]      	mov rax, qword [free_var_102]
 21892                                  	assert_closure(rax)
    42 000116B3 803805              <1>  cmp byte [%1], %2
    43 000116B6 0F85782A0000        <1>  jne L_error_incorrect_type
 21893 000116BC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21894 000116C0 53                      	push rbx
 21895 000116C1 FF7508                  	push RET_ADDR
 21896 000116C4 488B7D18                	mov rdi, COUNT
 21897 000116C8 4883C703                	add rdi, 3
 21898 000116CC 48C1E703                	shl rdi, 3
 21899 000116D0 4801EF                  	add rdi, rbp
 21900 000116D3 488B6D00                	mov rbp, OLD_RDP
 21901 000116D7 BE00000000              	mov rsi, 0
 21902                                  .L_tc_recycle_frame_loop_5d49:	 ; start recycle frame loop
 21903 000116DC 4883FE05                	cmp rsi, 5
 21904 000116E0 7427                    	je .L_tc_recycle_frame_done_5d49
 21905 000116E2 B904000000              	mov rcx, 4
 21906 000116E7 4829F1                  	sub rcx, rsi
 21907 000116EA 48C1E103                	shl rcx, 3
 21908 000116EE 4801E1                  	add rcx, rsp ; rcx is the address to move
 21909 000116F1 4889F3                  	mov rbx, rsi
 21910 000116F4 48C1E303                	shl rbx, 3
 21911 000116F8 48F7DB                  	neg rbx
 21912 000116FB 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21913 000116FE 488B09                  	mov rcx, [rcx]
 21914 00011701 48890B                  	mov [rbx], rcx
 21915 00011704 48FFC6                  	inc rsi
 21916 00011707 EBD3                    	jmp .L_tc_recycle_frame_loop_5d49
 21917                                  .L_tc_recycle_frame_done_5d49:	 ; end recycle frame loop
 21918 00011709 BB04000000              	mov rbx, 4
 21919 0001170E 48C1E303                	shl rbx, 3
 21920 00011712 48F7DB                  	neg rbx
 21921 00011715 4801FB                  	add rbx, rdi
 21922 00011718 4889DC                  	mov rsp, rbx
 21923 0001171B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21924 0001171F FFE3                    	jmp rbx
 21925 00011721 C9                      	leave
 21926 00011722 C21800                  	ret 8 * (2 + 1)
 21927                                  .L_lambda_simple_end_4fbf:	; new closure is in rax
 21928 00011725 48890425[60040000]      	mov qword [free_var_140], rax
 21929 0001172D 48B8-                   	mov rax, sob_void
 21929 0001172F [0000000000000000] 
 21930                                  
 21931 00011737 4889C7                  	mov rdi, rax
 21932 0001173A E886110000              	call print_sexpr_if_not_void
 21933                                  
 21934 0001173F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21935 00011744 E86B110000              	call malloc
 21936 00011749 50                      	push rax
 21937 0001174A BF00000000              	mov rdi, 8 * 0	; new rib
 21938 0001174F E860110000              	call malloc
 21939 00011754 50                      	push rax
 21940 00011755 BF08000000              	mov rdi, 8 * 1	; extended env
 21941 0001175A E855110000              	call malloc
 21942 0001175F 488B7D10                	mov rdi, ENV
 21943 00011763 BE00000000              	mov rsi, 0
 21944 00011768 BA01000000              	mov rdx, 1
 21945                                  .L_lambda_simple_env_loop_4fc0:	; ext_env[i + 1] <-- env[i]
 21946 0001176D 4883FE00                	cmp rsi, 0
 21947 00011771 7410                    	je .L_lambda_simple_env_end_4fc0
 21948 00011773 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 21949 00011777 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21950 0001177B 48FFC6                  	inc rsi
 21951 0001177E 48FFC2                  	inc rdx
 21952 00011781 EBEA                    	jmp .L_lambda_simple_env_loop_4fc0
 21953                                  .L_lambda_simple_env_end_4fc0:
 21954 00011783 5B                      	pop rbx
 21955 00011784 BE00000000              	mov rsi, 0
 21956                                  .L_lambda_simple_params_loop_4fc0:	; copy params
 21957 00011789 4883FE00                	cmp rsi, 0
 21958 0001178D 740E                    	je .L_lambda_simple_params_end_4fc0
 21959 0001178F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21960 00011794 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21961 00011798 48FFC6                  	inc rsi
 21962 0001179B EBEC                    	jmp .L_lambda_simple_params_loop_4fc0
 21963                                  .L_lambda_simple_params_end_4fc0:
 21964 0001179D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21965 000117A0 4889C3                  	mov rbx, rax
 21966 000117A3 58                      	pop rax
 21967 000117A4 C60005                  	mov byte [rax], T_closure
 21968 000117A7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21969 000117AB 48C74009[B8170100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc0
 21970 000117B3 E9C0000000              	jmp .L_lambda_simple_end_4fc0
 21971                                  .L_lambda_simple_code_4fc0:	; lambda-simple body
 21972 000117B8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21973 000117BE 740B                    	je .L_lambda_simple_arity_check_ok_4fc0
 21974 000117C0 FF742410                	push qword [rsp + 8 * 2]
 21975 000117C4 6A01                    	push 1
 21976 000117C6 E9A2100000              	jmp L_error_incorrect_arity_simple
 21977                                  .L_lambda_simple_arity_check_ok_4fc0:
 21978 000117CB C8000000                	enter 0, 0
 21979 000117CF 488D0425[00020000]      	lea rax, [512 + L_constants]
 21980 000117D7 50                      	push rax
 21981 000117D8 488B4520                	mov rax, PARAM(0)
 21982 000117DC 50                      	push rax
 21983 000117DD 6A02                    	push 2
 21984 000117DF 488B0425[60010000]      	mov rax, qword [free_var_44]
 21985                                  	assert_closure(rax)
    42 000117E7 803805              <1>  cmp byte [%1], %2
    43 000117EA 0F8544290000        <1>  jne L_error_incorrect_type
 21986 000117F0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21987 000117F4 53                      	push rbx
 21988 000117F5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21989 000117F9 FFD3                    	call rbx
 21990 000117FB 50                      	push rax
 21991 000117FC 6A01                    	push 1
 21992 000117FE 488B0425[D8000000]      	mov rax, qword [free_var_27]
 21993                                  	assert_closure(rax)
    42 00011806 803805              <1>  cmp byte [%1], %2
    43 00011809 0F8525290000        <1>  jne L_error_incorrect_type
 21994 0001180F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21995 00011813 53                      	push rbx
 21996 00011814 FF7508                  	push RET_ADDR
 21997 00011817 488B7D18                	mov rdi, COUNT
 21998 0001181B 4883C703                	add rdi, 3
 21999 0001181F 48C1E703                	shl rdi, 3
 22000 00011823 4801EF                  	add rdi, rbp
 22001 00011826 488B6D00                	mov rbp, OLD_RDP
 22002 0001182A BE00000000              	mov rsi, 0
 22003                                  .L_tc_recycle_frame_loop_5d4a:	 ; start recycle frame loop
 22004 0001182F 4883FE04                	cmp rsi, 4
 22005 00011833 7427                    	je .L_tc_recycle_frame_done_5d4a
 22006 00011835 B903000000              	mov rcx, 3
 22007 0001183A 4829F1                  	sub rcx, rsi
 22008 0001183D 48C1E103                	shl rcx, 3
 22009 00011841 4801E1                  	add rcx, rsp ; rcx is the address to move
 22010 00011844 4889F3                  	mov rbx, rsi
 22011 00011847 48C1E303                	shl rbx, 3
 22012 0001184B 48F7DB                  	neg rbx
 22013 0001184E 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22014 00011851 488B09                  	mov rcx, [rcx]
 22015 00011854 48890B                  	mov [rbx], rcx
 22016 00011857 48FFC6                  	inc rsi
 22017 0001185A EBD3                    	jmp .L_tc_recycle_frame_loop_5d4a
 22018                                  .L_tc_recycle_frame_done_5d4a:	 ; end recycle frame loop
 22019 0001185C BB03000000              	mov rbx, 3
 22020 00011861 48C1E303                	shl rbx, 3
 22021 00011865 48F7DB                  	neg rbx
 22022 00011868 4801FB                  	add rbx, rdi
 22023 0001186B 4889DC                  	mov rsp, rbx
 22024 0001186E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22025 00011872 FFE3                    	jmp rbx
 22026 00011874 C9                      	leave
 22027 00011875 C21800                  	ret 8 * (2 + 1)
 22028                                  .L_lambda_simple_end_4fc0:	; new closure is in rax
 22029 00011878 48890425[68040000]      	mov qword [free_var_141], rax
 22030 00011880 48B8-                   	mov rax, sob_void
 22030 00011882 [0000000000000000] 
 22031                                  
 22032 0001188A 4889C7                  	mov rdi, rax
 22033 0001188D E833100000              	call print_sexpr_if_not_void
 22034                                  
 22035 00011892 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22036 00011897 E818100000              	call malloc
 22037 0001189C 50                      	push rax
 22038 0001189D BF00000000              	mov rdi, 8 * 0	; new rib
 22039 000118A2 E80D100000              	call malloc
 22040 000118A7 50                      	push rax
 22041 000118A8 BF08000000              	mov rdi, 8 * 1	; extended env
 22042 000118AD E802100000              	call malloc
 22043 000118B2 488B7D10                	mov rdi, ENV
 22044 000118B6 BE00000000              	mov rsi, 0
 22045 000118BB BA01000000              	mov rdx, 1
 22046                                  .L_lambda_simple_env_loop_4fc1:	; ext_env[i + 1] <-- env[i]
 22047 000118C0 4883FE00                	cmp rsi, 0
 22048 000118C4 7410                    	je .L_lambda_simple_env_end_4fc1
 22049 000118C6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 22050 000118CA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22051 000118CE 48FFC6                  	inc rsi
 22052 000118D1 48FFC2                  	inc rdx
 22053 000118D4 EBEA                    	jmp .L_lambda_simple_env_loop_4fc1
 22054                                  .L_lambda_simple_env_end_4fc1:
 22055 000118D6 5B                      	pop rbx
 22056 000118D7 BE00000000              	mov rsi, 0
 22057                                  .L_lambda_simple_params_loop_4fc1:	; copy params
 22058 000118DC 4883FE00                	cmp rsi, 0
 22059 000118E0 740E                    	je .L_lambda_simple_params_end_4fc1
 22060 000118E2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22061 000118E7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22062 000118EB 48FFC6                  	inc rsi
 22063 000118EE EBEC                    	jmp .L_lambda_simple_params_loop_4fc1
 22064                                  .L_lambda_simple_params_end_4fc1:
 22065 000118F0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22066 000118F3 4889C3                  	mov rbx, rax
 22067 000118F6 58                      	pop rax
 22068 000118F7 C60005                  	mov byte [rax], T_closure
 22069 000118FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22070 000118FE 48C74009[0B190100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc1
 22071 00011906 E9B7000000              	jmp .L_lambda_simple_end_4fc1
 22072                                  .L_lambda_simple_code_4fc1:	; lambda-simple body
 22073 0001190B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22074 00011911 740B                    	je .L_lambda_simple_arity_check_ok_4fc1
 22075 00011913 FF742410                	push qword [rsp + 8 * 2]
 22076 00011917 6A01                    	push 1
 22077 00011919 E94F0F0000              	jmp L_error_incorrect_arity_simple
 22078                                  .L_lambda_simple_arity_check_ok_4fc1:
 22079 0001191E C8000000                	enter 0, 0
 22080 00011922 488B4520                	mov rax, PARAM(0)
 22081 00011926 50                      	push rax
 22082 00011927 6A01                    	push 1
 22083 00011929 488B0425[68040000]      	mov rax, qword [free_var_141]
 22084                                  	assert_closure(rax)
    42 00011931 803805              <1>  cmp byte [%1], %2
    43 00011934 0F85FA270000        <1>  jne L_error_incorrect_type
 22085 0001193A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22086 0001193E 53                      	push rbx
 22087 0001193F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22088 00011943 FFD3                    	call rbx
 22089 00011945 50                      	push rax
 22090 00011946 6A01                    	push 1
 22091 00011948 488B0425[B0020000]      	mov rax, qword [free_var_86]
 22092                                  	assert_closure(rax)
    42 00011950 803805              <1>  cmp byte [%1], %2
    43 00011953 0F85DB270000        <1>  jne L_error_incorrect_type
 22093 00011959 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22094 0001195D 53                      	push rbx
 22095 0001195E FF7508                  	push RET_ADDR
 22096 00011961 488B7D18                	mov rdi, COUNT
 22097 00011965 4883C703                	add rdi, 3
 22098 00011969 48C1E703                	shl rdi, 3
 22099 0001196D 4801EF                  	add rdi, rbp
 22100 00011970 488B6D00                	mov rbp, OLD_RDP
 22101 00011974 BE00000000              	mov rsi, 0
 22102                                  .L_tc_recycle_frame_loop_5d4b:	 ; start recycle frame loop
 22103 00011979 4883FE04                	cmp rsi, 4
 22104 0001197D 7427                    	je .L_tc_recycle_frame_done_5d4b
 22105 0001197F B903000000              	mov rcx, 3
 22106 00011984 4829F1                  	sub rcx, rsi
 22107 00011987 48C1E103                	shl rcx, 3
 22108 0001198B 4801E1                  	add rcx, rsp ; rcx is the address to move
 22109 0001198E 4889F3                  	mov rbx, rsi
 22110 00011991 48C1E303                	shl rbx, 3
 22111 00011995 48F7DB                  	neg rbx
 22112 00011998 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22113 0001199B 488B09                  	mov rcx, [rcx]
 22114 0001199E 48890B                  	mov [rbx], rcx
 22115 000119A1 48FFC6                  	inc rsi
 22116 000119A4 EBD3                    	jmp .L_tc_recycle_frame_loop_5d4b
 22117                                  .L_tc_recycle_frame_done_5d4b:	 ; end recycle frame loop
 22118 000119A6 BB03000000              	mov rbx, 3
 22119 000119AB 48C1E303                	shl rbx, 3
 22120 000119AF 48F7DB                  	neg rbx
 22121 000119B2 4801FB                  	add rbx, rdi
 22122 000119B5 4889DC                  	mov rsp, rbx
 22123 000119B8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22124 000119BC FFE3                    	jmp rbx
 22125 000119BE C9                      	leave
 22126 000119BF C21800                  	ret 8 * (2 + 1)
 22127                                  .L_lambda_simple_end_4fc1:	; new closure is in rax
 22128 000119C2 48890425[70040000]      	mov qword [free_var_142], rax
 22129 000119CA 48B8-                   	mov rax, sob_void
 22129 000119CC [0000000000000000] 
 22130                                  
 22131 000119D4 4889C7                  	mov rdi, rax
 22132 000119D7 E8E90E0000              	call print_sexpr_if_not_void
 22133                                  
 22134 000119DC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22135 000119E1 E8CE0E0000              	call malloc
 22136 000119E6 50                      	push rax
 22137 000119E7 BF00000000              	mov rdi, 8 * 0	; new rib
 22138 000119EC E8C30E0000              	call malloc
 22139 000119F1 50                      	push rax
 22140 000119F2 BF08000000              	mov rdi, 8 * 1	; extended env
 22141 000119F7 E8B80E0000              	call malloc
 22142 000119FC 488B7D10                	mov rdi, ENV
 22143 00011A00 BE00000000              	mov rsi, 0
 22144 00011A05 BA01000000              	mov rdx, 1
 22145                                  .L_lambda_simple_env_loop_4fc2:	; ext_env[i + 1] <-- env[i]
 22146 00011A0A 4883FE00                	cmp rsi, 0
 22147 00011A0E 7410                    	je .L_lambda_simple_env_end_4fc2
 22148 00011A10 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 22149 00011A14 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22150 00011A18 48FFC6                  	inc rsi
 22151 00011A1B 48FFC2                  	inc rdx
 22152 00011A1E EBEA                    	jmp .L_lambda_simple_env_loop_4fc2
 22153                                  .L_lambda_simple_env_end_4fc2:
 22154 00011A20 5B                      	pop rbx
 22155 00011A21 BE00000000              	mov rsi, 0
 22156                                  .L_lambda_simple_params_loop_4fc2:	; copy params
 22157 00011A26 4883FE00                	cmp rsi, 0
 22158 00011A2A 740E                    	je .L_lambda_simple_params_end_4fc2
 22159 00011A2C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22160 00011A31 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22161 00011A35 48FFC6                  	inc rsi
 22162 00011A38 EBEC                    	jmp .L_lambda_simple_params_loop_4fc2
 22163                                  .L_lambda_simple_params_end_4fc2:
 22164 00011A3A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22165 00011A3D 4889C3                  	mov rbx, rax
 22166 00011A40 58                      	pop rax
 22167 00011A41 C60005                  	mov byte [rax], T_closure
 22168 00011A44 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22169 00011A48 48C74009[551A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc2
 22170 00011A50 E9CD000000              	jmp .L_lambda_simple_end_4fc2
 22171                                  .L_lambda_simple_code_4fc2:	; lambda-simple body
 22172 00011A55 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22173 00011A5B 740B                    	je .L_lambda_simple_arity_check_ok_4fc2
 22174 00011A5D FF742410                	push qword [rsp + 8 * 2]
 22175 00011A61 6A01                    	push 1
 22176 00011A63 E9050E0000              	jmp L_error_incorrect_arity_simple
 22177                                  .L_lambda_simple_arity_check_ok_4fc2:
 22178 00011A68 C8000000                	enter 0, 0
 22179 00011A6C 488B4520                	mov rax, PARAM(0)
 22180 00011A70 50                      	push rax
 22181 00011A71 6A01                    	push 1
 22182 00011A73 488B0425[60040000]      	mov rax, qword [free_var_140]
 22183                                  	assert_closure(rax)
    42 00011A7B 803805              <1>  cmp byte [%1], %2
    43 00011A7E 0F85B0260000        <1>  jne L_error_incorrect_type
 22184 00011A84 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22185 00011A88 53                      	push rbx
 22186 00011A89 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22187 00011A8D FFD3                    	call rbx
 22188 00011A8F 483D[02000000]          	cmp rax, sob_boolean_false
 22189 00011A95 0F847F000000            	je .L_if_else_56ce
 22190 00011A9B 488B4520                	mov rax, PARAM(0)
 22191 00011A9F 50                      	push rax
 22192 00011AA0 6A01                    	push 1
 22193 00011AA2 488B0425[10030000]      	mov rax, qword [free_var_98]
 22194                                  	assert_closure(rax)
    42 00011AAA 803805              <1>  cmp byte [%1], %2
    43 00011AAD 0F8581260000        <1>  jne L_error_incorrect_type
 22195 00011AB3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22196 00011AB7 53                      	push rbx
 22197 00011AB8 FF7508                  	push RET_ADDR
 22198 00011ABB 488B7D18                	mov rdi, COUNT
 22199 00011ABF 4883C703                	add rdi, 3
 22200 00011AC3 48C1E703                	shl rdi, 3
 22201 00011AC7 4801EF                  	add rdi, rbp
 22202 00011ACA 488B6D00                	mov rbp, OLD_RDP
 22203 00011ACE BE00000000              	mov rsi, 0
 22204                                  .L_tc_recycle_frame_loop_5d4c:	 ; start recycle frame loop
 22205 00011AD3 4883FE04                	cmp rsi, 4
 22206 00011AD7 7427                    	je .L_tc_recycle_frame_done_5d4c
 22207 00011AD9 B903000000              	mov rcx, 3
 22208 00011ADE 4829F1                  	sub rcx, rsi
 22209 00011AE1 48C1E103                	shl rcx, 3
 22210 00011AE5 4801E1                  	add rcx, rsp ; rcx is the address to move
 22211 00011AE8 4889F3                  	mov rbx, rsi
 22212 00011AEB 48C1E303                	shl rbx, 3
 22213 00011AEF 48F7DB                  	neg rbx
 22214 00011AF2 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22215 00011AF5 488B09                  	mov rcx, [rcx]
 22216 00011AF8 48890B                  	mov [rbx], rcx
 22217 00011AFB 48FFC6                  	inc rsi
 22218 00011AFE EBD3                    	jmp .L_tc_recycle_frame_loop_5d4c
 22219                                  .L_tc_recycle_frame_done_5d4c:	 ; end recycle frame loop
 22220 00011B00 BB03000000              	mov rbx, 3
 22221 00011B05 48C1E303                	shl rbx, 3
 22222 00011B09 48F7DB                  	neg rbx
 22223 00011B0C 4801FB                  	add rbx, rdi
 22224 00011B0F 4889DC                  	mov rsp, rbx
 22225 00011B12 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22226 00011B16 FFE3                    	jmp rbx
 22227 00011B18 EB04                    	jmp .L_if_end_56ce
 22228                                  	.L_if_else_56ce:
 22229 00011B1A 488B4520                	mov rax, PARAM(0)
 22230                                  	.L_if_end_56ce:
 22231 00011B1E C9                      	leave
 22232 00011B1F C21800                  	ret 8 * (2 + 1)
 22233                                  .L_lambda_simple_end_4fc2:	; new closure is in rax
 22234 00011B22 48890425[78040000]      	mov qword [free_var_143], rax
 22235 00011B2A 48B8-                   	mov rax, sob_void
 22235 00011B2C [0000000000000000] 
 22236                                  
 22237 00011B34 4889C7                  	mov rdi, rax
 22238 00011B37 E8890D0000              	call print_sexpr_if_not_void
 22239                                  
 22240 00011B3C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22241 00011B41 E86E0D0000              	call malloc
 22242 00011B46 50                      	push rax
 22243 00011B47 BF00000000              	mov rdi, 8 * 0	; new rib
 22244 00011B4C E8630D0000              	call malloc
 22245 00011B51 50                      	push rax
 22246 00011B52 BF08000000              	mov rdi, 8 * 1	; extended env
 22247 00011B57 E8580D0000              	call malloc
 22248 00011B5C 488B7D10                	mov rdi, ENV
 22249 00011B60 BE00000000              	mov rsi, 0
 22250 00011B65 BA01000000              	mov rdx, 1
 22251                                  .L_lambda_simple_env_loop_4fc3:	; ext_env[i + 1] <-- env[i]
 22252 00011B6A 4883FE00                	cmp rsi, 0
 22253 00011B6E 7410                    	je .L_lambda_simple_env_end_4fc3
 22254 00011B70 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 22255 00011B74 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22256 00011B78 48FFC6                  	inc rsi
 22257 00011B7B 48FFC2                  	inc rdx
 22258 00011B7E EBEA                    	jmp .L_lambda_simple_env_loop_4fc3
 22259                                  .L_lambda_simple_env_end_4fc3:
 22260 00011B80 5B                      	pop rbx
 22261 00011B81 BE00000000              	mov rsi, 0
 22262                                  .L_lambda_simple_params_loop_4fc3:	; copy params
 22263 00011B86 4883FE00                	cmp rsi, 0
 22264 00011B8A 740E                    	je .L_lambda_simple_params_end_4fc3
 22265 00011B8C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22266 00011B91 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22267 00011B95 48FFC6                  	inc rsi
 22268 00011B98 EBEC                    	jmp .L_lambda_simple_params_loop_4fc3
 22269                                  .L_lambda_simple_params_end_4fc3:
 22270 00011B9A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22271 00011B9D 4889C3                  	mov rbx, rax
 22272 00011BA0 58                      	pop rax
 22273 00011BA1 C60005                  	mov byte [rax], T_closure
 22274 00011BA4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22275 00011BA8 48C74009[B51B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc3
 22276 00011BB0 E94E050000              	jmp .L_lambda_simple_end_4fc3
 22277                                  .L_lambda_simple_code_4fc3:	; lambda-simple body
 22278 00011BB5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22279 00011BBB 740B                    	je .L_lambda_simple_arity_check_ok_4fc3
 22280 00011BBD FF742410                	push qword [rsp + 8 * 2]
 22281 00011BC1 6A02                    	push 2
 22282 00011BC3 E9A50C0000              	jmp L_error_incorrect_arity_simple
 22283                                  .L_lambda_simple_arity_check_ok_4fc3:
 22284 00011BC8 C8000000                	enter 0, 0
 22285 00011BCC 488B4520                	mov rax, PARAM(0)
 22286 00011BD0 50                      	push rax
 22287 00011BD1 6A01                    	push 1
 22288 00011BD3 488B0425[08000000]      	mov rax, qword [free_var_1]
 22289                                  	assert_closure(rax)
    42 00011BDB 803805              <1>  cmp byte [%1], %2
    43 00011BDE 0F8550250000        <1>  jne L_error_incorrect_type
 22290 00011BE4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22291 00011BE8 53                      	push rbx
 22292 00011BE9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22293 00011BED FFD3                    	call rbx
 22294 00011BEF 483D[02000000]          	cmp rax, sob_boolean_false
 22295 00011BF5 7425                    	je .L_if_else_56d0
 22296 00011BF7 488B4528                	mov rax, PARAM(1)
 22297 00011BFB 50                      	push rax
 22298 00011BFC 6A01                    	push 1
 22299 00011BFE 488B0425[08000000]      	mov rax, qword [free_var_1]
 22300                                  	assert_closure(rax)
    42 00011C06 803805              <1>  cmp byte [%1], %2
    43 00011C09 0F8525250000        <1>  jne L_error_incorrect_type
 22301 00011C0F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22302 00011C13 53                      	push rbx
 22303 00011C14 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22304 00011C18 FFD3                    	call rbx
 22305 00011C1A EB08                    	jmp .L_if_end_56d0
 22306                                  	.L_if_else_56d0:
 22307 00011C1C 488D0425[02000000]      	lea rax, [2 + L_constants]
 22308                                  	.L_if_end_56d0:
 22309 00011C24 483D[02000000]          	cmp rax, sob_boolean_false
 22310 00011C2A 0F8441010000            	je .L_if_else_56cf
 22311 00011C30 488B4528                	mov rax, PARAM(1)
 22312 00011C34 50                      	push rax
 22313 00011C35 6A01                    	push 1
 22314 00011C37 488B0425[80000000]      	mov rax, qword [free_var_16]
 22315                                  	assert_closure(rax)
    42 00011C3F 803805              <1>  cmp byte [%1], %2
    43 00011C42 0F85EC240000        <1>  jne L_error_incorrect_type
 22316 00011C48 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22317 00011C4C 53                      	push rbx
 22318 00011C4D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22319 00011C51 FFD3                    	call rbx
 22320 00011C53 50                      	push rax
 22321 00011C54 488B4520                	mov rax, PARAM(0)
 22322 00011C58 50                      	push rax
 22323 00011C59 6A01                    	push 1
 22324 00011C5B 488B0425[80000000]      	mov rax, qword [free_var_16]
 22325                                  	assert_closure(rax)
    42 00011C63 803805              <1>  cmp byte [%1], %2
    43 00011C66 0F85C8240000        <1>  jne L_error_incorrect_type
 22326 00011C6C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22327 00011C70 53                      	push rbx
 22328 00011C71 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22329 00011C75 FFD3                    	call rbx
 22330 00011C77 50                      	push rax
 22331 00011C78 6A02                    	push 2
 22332 00011C7A 488B0425[80040000]      	mov rax, qword [free_var_144]
 22333                                  	assert_closure(rax)
    42 00011C82 803805              <1>  cmp byte [%1], %2
    43 00011C85 0F85A9240000        <1>  jne L_error_incorrect_type
 22334 00011C8B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22335 00011C8F 53                      	push rbx
 22336 00011C90 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22337 00011C94 FFD3                    	call rbx
 22338 00011C96 483D[02000000]          	cmp rax, sob_boolean_false
 22339 00011C9C 0F84C2000000            	je .L_if_else_56d1
 22340 00011CA2 488B4528                	mov rax, PARAM(1)
 22341 00011CA6 50                      	push rax
 22342 00011CA7 6A01                    	push 1
 22343 00011CA9 488B0425[88000000]      	mov rax, qword [free_var_17]
 22344                                  	assert_closure(rax)
    42 00011CB1 803805              <1>  cmp byte [%1], %2
    43 00011CB4 0F857A240000        <1>  jne L_error_incorrect_type
 22345 00011CBA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22346 00011CBE 53                      	push rbx
 22347 00011CBF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22348 00011CC3 FFD3                    	call rbx
 22349 00011CC5 50                      	push rax
 22350 00011CC6 488B4520                	mov rax, PARAM(0)
 22351 00011CCA 50                      	push rax
 22352 00011CCB 6A01                    	push 1
 22353 00011CCD 488B0425[88000000]      	mov rax, qword [free_var_17]
 22354                                  	assert_closure(rax)
    42 00011CD5 803805              <1>  cmp byte [%1], %2
    43 00011CD8 0F8556240000        <1>  jne L_error_incorrect_type
 22355 00011CDE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22356 00011CE2 53                      	push rbx
 22357 00011CE3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22358 00011CE7 FFD3                    	call rbx
 22359 00011CE9 50                      	push rax
 22360 00011CEA 6A02                    	push 2
 22361 00011CEC 488B0425[80040000]      	mov rax, qword [free_var_144]
 22362                                  	assert_closure(rax)
    42 00011CF4 803805              <1>  cmp byte [%1], %2
    43 00011CF7 0F8537240000        <1>  jne L_error_incorrect_type
 22363 00011CFD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22364 00011D01 53                      	push rbx
 22365 00011D02 FF7508                  	push RET_ADDR
 22366 00011D05 488B7D18                	mov rdi, COUNT
 22367 00011D09 4883C703                	add rdi, 3
 22368 00011D0D 48C1E703                	shl rdi, 3
 22369 00011D11 4801EF                  	add rdi, rbp
 22370 00011D14 488B6D00                	mov rbp, OLD_RDP
 22371 00011D18 BE00000000              	mov rsi, 0
 22372                                  .L_tc_recycle_frame_loop_5d4d:	 ; start recycle frame loop
 22373 00011D1D 4883FE05                	cmp rsi, 5
 22374 00011D21 7427                    	je .L_tc_recycle_frame_done_5d4d
 22375 00011D23 B904000000              	mov rcx, 4
 22376 00011D28 4829F1                  	sub rcx, rsi
 22377 00011D2B 48C1E103                	shl rcx, 3
 22378 00011D2F 4801E1                  	add rcx, rsp ; rcx is the address to move
 22379 00011D32 4889F3                  	mov rbx, rsi
 22380 00011D35 48C1E303                	shl rbx, 3
 22381 00011D39 48F7DB                  	neg rbx
 22382 00011D3C 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22383 00011D3F 488B09                  	mov rcx, [rcx]
 22384 00011D42 48890B                  	mov [rbx], rcx
 22385 00011D45 48FFC6                  	inc rsi
 22386 00011D48 EBD3                    	jmp .L_tc_recycle_frame_loop_5d4d
 22387                                  .L_tc_recycle_frame_done_5d4d:	 ; end recycle frame loop
 22388 00011D4A BB04000000              	mov rbx, 4
 22389 00011D4F 48C1E303                	shl rbx, 3
 22390 00011D53 48F7DB                  	neg rbx
 22391 00011D56 4801FB                  	add rbx, rdi
 22392 00011D59 4889DC                  	mov rsp, rbx
 22393 00011D5C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22394 00011D60 FFE3                    	jmp rbx
 22395 00011D62 EB08                    	jmp .L_if_end_56d1
 22396                                  	.L_if_else_56d1:
 22397 00011D64 488D0425[02000000]      	lea rax, [2 + L_constants]
 22398                                  	.L_if_end_56d1:
 22399 00011D6C E98E030000              	jmp .L_if_end_56cf
 22400                                  	.L_if_else_56cf:
 22401 00011D71 488B4520                	mov rax, PARAM(0)
 22402 00011D75 50                      	push rax
 22403 00011D76 6A01                    	push 1
 22404 00011D78 488B0425[30000000]      	mov rax, qword [free_var_6]
 22405                                  	assert_closure(rax)
    42 00011D80 803805              <1>  cmp byte [%1], %2
    43 00011D83 0F85AB230000        <1>  jne L_error_incorrect_type
 22406 00011D89 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22407 00011D8D 53                      	push rbx
 22408 00011D8E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22409 00011D92 FFD3                    	call rbx
 22410 00011D94 483D[02000000]          	cmp rax, sob_boolean_false
 22411 00011D9A 0F849D000000            	je .L_if_else_56d3
 22412 00011DA0 488B4528                	mov rax, PARAM(1)
 22413 00011DA4 50                      	push rax
 22414 00011DA5 6A01                    	push 1
 22415 00011DA7 488B0425[30000000]      	mov rax, qword [free_var_6]
 22416                                  	assert_closure(rax)
    42 00011DAF 803805              <1>  cmp byte [%1], %2
    43 00011DB2 0F857C230000        <1>  jne L_error_incorrect_type
 22417 00011DB8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22418 00011DBC 53                      	push rbx
 22419 00011DBD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22420 00011DC1 FFD3                    	call rbx
 22421 00011DC3 483D[02000000]          	cmp rax, sob_boolean_false
 22422 00011DC9 7468                    	je .L_if_else_56d4
 22423 00011DCB 488B4528                	mov rax, PARAM(1)
 22424 00011DCF 50                      	push rax
 22425 00011DD0 6A01                    	push 1
 22426 00011DD2 488B0425[98000000]      	mov rax, qword [free_var_19]
 22427                                  	assert_closure(rax)
    42 00011DDA 803805              <1>  cmp byte [%1], %2
    43 00011DDD 0F8551230000        <1>  jne L_error_incorrect_type
 22428 00011DE3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22429 00011DE7 53                      	push rbx
 22430 00011DE8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22431 00011DEC FFD3                    	call rbx
 22432 00011DEE 50                      	push rax
 22433 00011DEF 488B4520                	mov rax, PARAM(0)
 22434 00011DF3 50                      	push rax
 22435 00011DF4 6A01                    	push 1
 22436 00011DF6 488B0425[98000000]      	mov rax, qword [free_var_19]
 22437                                  	assert_closure(rax)
    42 00011DFE 803805              <1>  cmp byte [%1], %2
    43 00011E01 0F852D230000        <1>  jne L_error_incorrect_type
 22438 00011E07 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22439 00011E0B 53                      	push rbx
 22440 00011E0C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22441 00011E10 FFD3                    	call rbx
 22442 00011E12 50                      	push rax
 22443 00011E13 6A02                    	push 2
 22444 00011E15 488B0425[50030000]      	mov rax, qword [free_var_106]
 22445                                  	assert_closure(rax)
    42 00011E1D 803805              <1>  cmp byte [%1], %2
    43 00011E20 0F850E230000        <1>  jne L_error_incorrect_type
 22446 00011E26 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22447 00011E2A 53                      	push rbx
 22448 00011E2B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22449 00011E2F FFD3                    	call rbx
 22450 00011E31 EB08                    	jmp .L_if_end_56d4
 22451                                  	.L_if_else_56d4:
 22452 00011E33 488D0425[02000000]      	lea rax, [2 + L_constants]
 22453                                  	.L_if_end_56d4:
 22454 00011E3B EB08                    	jmp .L_if_end_56d3
 22455                                  	.L_if_else_56d3:
 22456 00011E3D 488D0425[02000000]      	lea rax, [2 + L_constants]
 22457                                  	.L_if_end_56d3:
 22458 00011E45 483D[02000000]          	cmp rax, sob_boolean_false
 22459 00011E4B 0F84C5000000            	je .L_if_else_56d2
 22460 00011E51 488B4528                	mov rax, PARAM(1)
 22461 00011E55 50                      	push rax
 22462 00011E56 6A01                    	push 1
 22463 00011E58 488B0425[48040000]      	mov rax, qword [free_var_137]
 22464                                  	assert_closure(rax)
    42 00011E60 803805              <1>  cmp byte [%1], %2
    43 00011E63 0F85CB220000        <1>  jne L_error_incorrect_type
 22465 00011E69 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22466 00011E6D 53                      	push rbx
 22467 00011E6E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22468 00011E72 FFD3                    	call rbx
 22469 00011E74 50                      	push rax
 22470 00011E75 488B4520                	mov rax, PARAM(0)
 22471 00011E79 50                      	push rax
 22472 00011E7A 6A01                    	push 1
 22473 00011E7C 488B0425[48040000]      	mov rax, qword [free_var_137]
 22474                                  	assert_closure(rax)
    42 00011E84 803805              <1>  cmp byte [%1], %2
    43 00011E87 0F85A7220000        <1>  jne L_error_incorrect_type
 22475 00011E8D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22476 00011E91 53                      	push rbx
 22477 00011E92 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22478 00011E96 FFD3                    	call rbx
 22479 00011E98 50                      	push rax
 22480 00011E99 6A02                    	push 2
 22481 00011E9B 488B0425[80040000]      	mov rax, qword [free_var_144]
 22482                                  	assert_closure(rax)
    42 00011EA3 803805              <1>  cmp byte [%1], %2
    43 00011EA6 0F8588220000        <1>  jne L_error_incorrect_type
 22483 00011EAC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22484 00011EB0 53                      	push rbx
 22485 00011EB1 FF7508                  	push RET_ADDR
 22486 00011EB4 488B7D18                	mov rdi, COUNT
 22487 00011EB8 4883C703                	add rdi, 3
 22488 00011EBC 48C1E703                	shl rdi, 3
 22489 00011EC0 4801EF                  	add rdi, rbp
 22490 00011EC3 488B6D00                	mov rbp, OLD_RDP
 22491 00011EC7 BE00000000              	mov rsi, 0
 22492                                  .L_tc_recycle_frame_loop_5d4e:	 ; start recycle frame loop
 22493 00011ECC 4883FE05                	cmp rsi, 5
 22494 00011ED0 7427                    	je .L_tc_recycle_frame_done_5d4e
 22495 00011ED2 B904000000              	mov rcx, 4
 22496 00011ED7 4829F1                  	sub rcx, rsi
 22497 00011EDA 48C1E103                	shl rcx, 3
 22498 00011EDE 4801E1                  	add rcx, rsp ; rcx is the address to move
 22499 00011EE1 4889F3                  	mov rbx, rsi
 22500 00011EE4 48C1E303                	shl rbx, 3
 22501 00011EE8 48F7DB                  	neg rbx
 22502 00011EEB 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22503 00011EEE 488B09                  	mov rcx, [rcx]
 22504 00011EF1 48890B                  	mov [rbx], rcx
 22505 00011EF4 48FFC6                  	inc rsi
 22506 00011EF7 EBD3                    	jmp .L_tc_recycle_frame_loop_5d4e
 22507                                  .L_tc_recycle_frame_done_5d4e:	 ; end recycle frame loop
 22508 00011EF9 BB04000000              	mov rbx, 4
 22509 00011EFE 48C1E303                	shl rbx, 3
 22510 00011F02 48F7DB                  	neg rbx
 22511 00011F05 4801FB                  	add rbx, rdi
 22512 00011F08 4889DC                  	mov rsp, rbx
 22513 00011F0B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22514 00011F0F FFE3                    	jmp rbx
 22515 00011F11 E9E9010000              	jmp .L_if_end_56d2
 22516                                  	.L_if_else_56d2:
 22517 00011F16 488B4520                	mov rax, PARAM(0)
 22518 00011F1A 50                      	push rax
 22519 00011F1B 6A01                    	push 1
 22520 00011F1D 488B0425[20000000]      	mov rax, qword [free_var_4]
 22521                                  	assert_closure(rax)
    42 00011F25 803805              <1>  cmp byte [%1], %2
    43 00011F28 0F8506220000        <1>  jne L_error_incorrect_type
 22522 00011F2E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22523 00011F32 53                      	push rbx
 22524 00011F33 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22525 00011F37 FFD3                    	call rbx
 22526 00011F39 483D[02000000]          	cmp rax, sob_boolean_false
 22527 00011F3F 0F849D000000            	je .L_if_else_56d6
 22528 00011F45 488B4528                	mov rax, PARAM(1)
 22529 00011F49 50                      	push rax
 22530 00011F4A 6A01                    	push 1
 22531 00011F4C 488B0425[20000000]      	mov rax, qword [free_var_4]
 22532                                  	assert_closure(rax)
    42 00011F54 803805              <1>  cmp byte [%1], %2
    43 00011F57 0F85D7210000        <1>  jne L_error_incorrect_type
 22533 00011F5D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22534 00011F61 53                      	push rbx
 22535 00011F62 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22536 00011F66 FFD3                    	call rbx
 22537 00011F68 483D[02000000]          	cmp rax, sob_boolean_false
 22538 00011F6E 7468                    	je .L_if_else_56d7
 22539 00011F70 488B4528                	mov rax, PARAM(1)
 22540 00011F74 50                      	push rax
 22541 00011F75 6A01                    	push 1
 22542 00011F77 488B0425[90000000]      	mov rax, qword [free_var_18]
 22543                                  	assert_closure(rax)
    42 00011F7F 803805              <1>  cmp byte [%1], %2
    43 00011F82 0F85AC210000        <1>  jne L_error_incorrect_type
 22544 00011F88 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22545 00011F8C 53                      	push rbx
 22546 00011F8D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22547 00011F91 FFD3                    	call rbx
 22548 00011F93 50                      	push rax
 22549 00011F94 488B4520                	mov rax, PARAM(0)
 22550 00011F98 50                      	push rax
 22551 00011F99 6A01                    	push 1
 22552 00011F9B 488B0425[90000000]      	mov rax, qword [free_var_18]
 22553                                  	assert_closure(rax)
    42 00011FA3 803805              <1>  cmp byte [%1], %2
    43 00011FA6 0F8588210000        <1>  jne L_error_incorrect_type
 22554 00011FAC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22555 00011FB0 53                      	push rbx
 22556 00011FB1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22557 00011FB5 FFD3                    	call rbx
 22558 00011FB7 50                      	push rax
 22559 00011FB8 6A02                    	push 2
 22560 00011FBA 488B0425[50030000]      	mov rax, qword [free_var_106]
 22561                                  	assert_closure(rax)
    42 00011FC2 803805              <1>  cmp byte [%1], %2
    43 00011FC5 0F8569210000        <1>  jne L_error_incorrect_type
 22562 00011FCB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22563 00011FCF 53                      	push rbx
 22564 00011FD0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22565 00011FD4 FFD3                    	call rbx
 22566 00011FD6 EB08                    	jmp .L_if_end_56d7
 22567                                  	.L_if_else_56d7:
 22568 00011FD8 488D0425[02000000]      	lea rax, [2 + L_constants]
 22569                                  	.L_if_end_56d7:
 22570 00011FE0 EB08                    	jmp .L_if_end_56d6
 22571                                  	.L_if_else_56d6:
 22572 00011FE2 488D0425[02000000]      	lea rax, [2 + L_constants]
 22573                                  	.L_if_end_56d6:
 22574 00011FEA 483D[02000000]          	cmp rax, sob_boolean_false
 22575 00011FF0 0F8487000000            	je .L_if_else_56d5
 22576 00011FF6 488B4528                	mov rax, PARAM(1)
 22577 00011FFA 50                      	push rax
 22578 00011FFB 488B4520                	mov rax, PARAM(0)
 22579 00011FFF 50                      	push rax
 22580 00012000 6A02                    	push 2
 22581 00012002 488B0425[F0030000]      	mov rax, qword [free_var_126]
 22582                                  	assert_closure(rax)
    42 0001200A 803805              <1>  cmp byte [%1], %2
    43 0001200D 0F8521210000        <1>  jne L_error_incorrect_type
 22583 00012013 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22584 00012017 53                      	push rbx
 22585 00012018 FF7508                  	push RET_ADDR
 22586 0001201B 488B7D18                	mov rdi, COUNT
 22587 0001201F 4883C703                	add rdi, 3
 22588 00012023 48C1E703                	shl rdi, 3
 22589 00012027 4801EF                  	add rdi, rbp
 22590 0001202A 488B6D00                	mov rbp, OLD_RDP
 22591 0001202E BE00000000              	mov rsi, 0
 22592                                  .L_tc_recycle_frame_loop_5d4f:	 ; start recycle frame loop
 22593 00012033 4883FE05                	cmp rsi, 5
 22594 00012037 7427                    	je .L_tc_recycle_frame_done_5d4f
 22595 00012039 B904000000              	mov rcx, 4
 22596 0001203E 4829F1                  	sub rcx, rsi
 22597 00012041 48C1E103                	shl rcx, 3
 22598 00012045 4801E1                  	add rcx, rsp ; rcx is the address to move
 22599 00012048 4889F3                  	mov rbx, rsi
 22600 0001204B 48C1E303                	shl rbx, 3
 22601 0001204F 48F7DB                  	neg rbx
 22602 00012052 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22603 00012055 488B09                  	mov rcx, [rcx]
 22604 00012058 48890B                  	mov [rbx], rcx
 22605 0001205B 48FFC6                  	inc rsi
 22606 0001205E EBD3                    	jmp .L_tc_recycle_frame_loop_5d4f
 22607                                  .L_tc_recycle_frame_done_5d4f:	 ; end recycle frame loop
 22608 00012060 BB04000000              	mov rbx, 4
 22609 00012065 48C1E303                	shl rbx, 3
 22610 00012069 48F7DB                  	neg rbx
 22611 0001206C 4801FB                  	add rbx, rdi
 22612 0001206F 4889DC                  	mov rsp, rbx
 22613 00012072 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22614 00012076 FFE3                    	jmp rbx
 22615 00012078 E982000000              	jmp .L_if_end_56d5
 22616                                  	.L_if_else_56d5:
 22617 0001207D 488B4528                	mov rax, PARAM(1)
 22618 00012081 50                      	push rax
 22619 00012082 488B4520                	mov rax, PARAM(0)
 22620 00012086 50                      	push rax
 22621 00012087 6A02                    	push 2
 22622 00012089 488B0425[B8010000]      	mov rax, qword [free_var_55]
 22623                                  	assert_closure(rax)
    42 00012091 803805              <1>  cmp byte [%1], %2
    43 00012094 0F859A200000        <1>  jne L_error_incorrect_type
 22624 0001209A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22625 0001209E 53                      	push rbx
 22626 0001209F FF7508                  	push RET_ADDR
 22627 000120A2 488B7D18                	mov rdi, COUNT
 22628 000120A6 4883C703                	add rdi, 3
 22629 000120AA 48C1E703                	shl rdi, 3
 22630 000120AE 4801EF                  	add rdi, rbp
 22631 000120B1 488B6D00                	mov rbp, OLD_RDP
 22632 000120B5 BE00000000              	mov rsi, 0
 22633                                  .L_tc_recycle_frame_loop_5d50:	 ; start recycle frame loop
 22634 000120BA 4883FE05                	cmp rsi, 5
 22635 000120BE 7427                    	je .L_tc_recycle_frame_done_5d50
 22636 000120C0 B904000000              	mov rcx, 4
 22637 000120C5 4829F1                  	sub rcx, rsi
 22638 000120C8 48C1E103                	shl rcx, 3
 22639 000120CC 4801E1                  	add rcx, rsp ; rcx is the address to move
 22640 000120CF 4889F3                  	mov rbx, rsi
 22641 000120D2 48C1E303                	shl rbx, 3
 22642 000120D6 48F7DB                  	neg rbx
 22643 000120D9 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22644 000120DC 488B09                  	mov rcx, [rcx]
 22645 000120DF 48890B                  	mov [rbx], rcx
 22646 000120E2 48FFC6                  	inc rsi
 22647 000120E5 EBD3                    	jmp .L_tc_recycle_frame_loop_5d50
 22648                                  .L_tc_recycle_frame_done_5d50:	 ; end recycle frame loop
 22649 000120E7 BB04000000              	mov rbx, 4
 22650 000120EC 48C1E303                	shl rbx, 3
 22651 000120F0 48F7DB                  	neg rbx
 22652 000120F3 4801FB                  	add rbx, rdi
 22653 000120F6 4889DC                  	mov rsp, rbx
 22654 000120F9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22655 000120FD FFE3                    	jmp rbx
 22656                                  	.L_if_end_56d5:
 22657                                  	.L_if_end_56d2:
 22658                                  	.L_if_end_56cf:
 22659 000120FF C9                      	leave
 22660 00012100 C22000                  	ret 8 * (2 + 2)
 22661                                  .L_lambda_simple_end_4fc3:	; new closure is in rax
 22662 00012103 48890425[80040000]      	mov qword [free_var_144], rax
 22663 0001210B 48B8-                   	mov rax, sob_void
 22663 0001210D [0000000000000000] 
 22664                                  
 22665 00012115 4889C7                  	mov rdi, rax
 22666 00012118 E8A8070000              	call print_sexpr_if_not_void
 22667                                  
 22668 0001211D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22669 00012122 E88D070000              	call malloc
 22670 00012127 50                      	push rax
 22671 00012128 BF00000000              	mov rdi, 8 * 0	; new rib
 22672 0001212D E882070000              	call malloc
 22673 00012132 50                      	push rax
 22674 00012133 BF08000000              	mov rdi, 8 * 1	; extended env
 22675 00012138 E877070000              	call malloc
 22676 0001213D 488B7D10                	mov rdi, ENV
 22677 00012141 BE00000000              	mov rsi, 0
 22678 00012146 BA01000000              	mov rdx, 1
 22679                                  .L_lambda_simple_env_loop_4fc4:	; ext_env[i + 1] <-- env[i]
 22680 0001214B 4883FE00                	cmp rsi, 0
 22681 0001214F 7410                    	je .L_lambda_simple_env_end_4fc4
 22682 00012151 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 22683 00012155 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22684 00012159 48FFC6                  	inc rsi
 22685 0001215C 48FFC2                  	inc rdx
 22686 0001215F EBEA                    	jmp .L_lambda_simple_env_loop_4fc4
 22687                                  .L_lambda_simple_env_end_4fc4:
 22688 00012161 5B                      	pop rbx
 22689 00012162 BE00000000              	mov rsi, 0
 22690                                  .L_lambda_simple_params_loop_4fc4:	; copy params
 22691 00012167 4883FE00                	cmp rsi, 0
 22692 0001216B 740E                    	je .L_lambda_simple_params_end_4fc4
 22693 0001216D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22694 00012172 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22695 00012176 48FFC6                  	inc rsi
 22696 00012179 EBEC                    	jmp .L_lambda_simple_params_loop_4fc4
 22697                                  .L_lambda_simple_params_end_4fc4:
 22698 0001217B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22699 0001217E 4889C3                  	mov rbx, rax
 22700 00012181 58                      	pop rax
 22701 00012182 C60005                  	mov byte [rax], T_closure
 22702 00012185 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22703 00012189 48C74009[96210100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc4
 22704 00012191 E9C9010000              	jmp .L_lambda_simple_end_4fc4
 22705                                  .L_lambda_simple_code_4fc4:	; lambda-simple body
 22706 00012196 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22707 0001219C 740B                    	je .L_lambda_simple_arity_check_ok_4fc4
 22708 0001219E FF742410                	push qword [rsp + 8 * 2]
 22709 000121A2 6A02                    	push 2
 22710 000121A4 E9C4060000              	jmp L_error_incorrect_arity_simple
 22711                                  .L_lambda_simple_arity_check_ok_4fc4:
 22712 000121A9 C8000000                	enter 0, 0
 22713 000121AD 488B4528                	mov rax, PARAM(1)
 22714 000121B1 50                      	push rax
 22715 000121B2 6A01                    	push 1
 22716 000121B4 488B0425[00000000]      	mov rax, qword [free_var_0]
 22717                                  	assert_closure(rax)
    42 000121BC 803805              <1>  cmp byte [%1], %2
    43 000121BF 0F856F1F0000        <1>  jne L_error_incorrect_type
 22718 000121C5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22719 000121C9 53                      	push rbx
 22720 000121CA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22721 000121CE FFD3                    	call rbx
 22722 000121D0 483D[02000000]          	cmp rax, sob_boolean_false
 22723 000121D6 740D                    	je .L_if_else_56d8
 22724 000121D8 488D0425[02000000]      	lea rax, [2 + L_constants]
 22725 000121E0 E976010000              	jmp .L_if_end_56d8
 22726                                  	.L_if_else_56d8:
 22727 000121E5 488B4520                	mov rax, PARAM(0)
 22728 000121E9 50                      	push rax
 22729 000121EA 488B4528                	mov rax, PARAM(1)
 22730 000121EE 50                      	push rax
 22731 000121EF 6A01                    	push 1
 22732 000121F1 488B0425[C0010000]      	mov rax, qword [free_var_56]
 22733                                  	assert_closure(rax)
    42 000121F9 803805              <1>  cmp byte [%1], %2
    43 000121FC 0F85321F0000        <1>  jne L_error_incorrect_type
 22734 00012202 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22735 00012206 53                      	push rbx
 22736 00012207 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22737 0001220B FFD3                    	call rbx
 22738 0001220D 50                      	push rax
 22739 0001220E 6A02                    	push 2
 22740 00012210 488B0425[B8010000]      	mov rax, qword [free_var_55]
 22741                                  	assert_closure(rax)
    42 00012218 803805              <1>  cmp byte [%1], %2
    43 0001221B 0F85131F0000        <1>  jne L_error_incorrect_type
 22742 00012221 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22743 00012225 53                      	push rbx
 22744 00012226 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22745 0001222A FFD3                    	call rbx
 22746 0001222C 483D[02000000]          	cmp rax, sob_boolean_false
 22747 00012232 0F8482000000            	je .L_if_else_56d9
 22748 00012238 488B4528                	mov rax, PARAM(1)
 22749 0001223C 50                      	push rax
 22750 0001223D 6A01                    	push 1
 22751 0001223F 488B0425[80000000]      	mov rax, qword [free_var_16]
 22752                                  	assert_closure(rax)
    42 00012247 803805              <1>  cmp byte [%1], %2
    43 0001224A 0F85E41E0000        <1>  jne L_error_incorrect_type
 22753 00012250 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22754 00012254 53                      	push rbx
 22755 00012255 FF7508                  	push RET_ADDR
 22756 00012258 488B7D18                	mov rdi, COUNT
 22757 0001225C 4883C703                	add rdi, 3
 22758 00012260 48C1E703                	shl rdi, 3
 22759 00012264 4801EF                  	add rdi, rbp
 22760 00012267 488B6D00                	mov rbp, OLD_RDP
 22761 0001226B BE00000000              	mov rsi, 0
 22762                                  .L_tc_recycle_frame_loop_5d51:	 ; start recycle frame loop
 22763 00012270 4883FE04                	cmp rsi, 4
 22764 00012274 7427                    	je .L_tc_recycle_frame_done_5d51
 22765 00012276 B903000000              	mov rcx, 3
 22766 0001227B 4829F1                  	sub rcx, rsi
 22767 0001227E 48C1E103                	shl rcx, 3
 22768 00012282 4801E1                  	add rcx, rsp ; rcx is the address to move
 22769 00012285 4889F3                  	mov rbx, rsi
 22770 00012288 48C1E303                	shl rbx, 3
 22771 0001228C 48F7DB                  	neg rbx
 22772 0001228F 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22773 00012292 488B09                  	mov rcx, [rcx]
 22774 00012295 48890B                  	mov [rbx], rcx
 22775 00012298 48FFC6                  	inc rsi
 22776 0001229B EBD3                    	jmp .L_tc_recycle_frame_loop_5d51
 22777                                  .L_tc_recycle_frame_done_5d51:	 ; end recycle frame loop
 22778 0001229D BB03000000              	mov rbx, 3
 22779 000122A2 48C1E303                	shl rbx, 3
 22780 000122A6 48F7DB                  	neg rbx
 22781 000122A9 4801FB                  	add rbx, rdi
 22782 000122AC 4889DC                  	mov rsp, rbx
 22783 000122AF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22784 000122B3 FFE3                    	jmp rbx
 22785 000122B5 E9A1000000              	jmp .L_if_end_56d9
 22786                                  	.L_if_else_56d9:
 22787 000122BA 488B4528                	mov rax, PARAM(1)
 22788 000122BE 50                      	push rax
 22789 000122BF 6A01                    	push 1
 22790 000122C1 488B0425[88000000]      	mov rax, qword [free_var_17]
 22791                                  	assert_closure(rax)
    42 000122C9 803805              <1>  cmp byte [%1], %2
    43 000122CC 0F85621E0000        <1>  jne L_error_incorrect_type
 22792 000122D2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22793 000122D6 53                      	push rbx
 22794 000122D7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22795 000122DB FFD3                    	call rbx
 22796 000122DD 50                      	push rax
 22797 000122DE 488B4520                	mov rax, PARAM(0)
 22798 000122E2 50                      	push rax
 22799 000122E3 6A02                    	push 2
 22800 000122E5 488B0425[88040000]      	mov rax, qword [free_var_145]
 22801                                  	assert_closure(rax)
    42 000122ED 803805              <1>  cmp byte [%1], %2
    43 000122F0 0F853E1E0000        <1>  jne L_error_incorrect_type
 22802 000122F6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22803 000122FA 53                      	push rbx
 22804 000122FB FF7508                  	push RET_ADDR
 22805 000122FE 488B7D18                	mov rdi, COUNT
 22806 00012302 4883C703                	add rdi, 3
 22807 00012306 48C1E703                	shl rdi, 3
 22808 0001230A 4801EF                  	add rdi, rbp
 22809 0001230D 488B6D00                	mov rbp, OLD_RDP
 22810 00012311 BE00000000              	mov rsi, 0
 22811                                  .L_tc_recycle_frame_loop_5d52:	 ; start recycle frame loop
 22812 00012316 4883FE05                	cmp rsi, 5
 22813 0001231A 7427                    	je .L_tc_recycle_frame_done_5d52
 22814 0001231C B904000000              	mov rcx, 4
 22815 00012321 4829F1                  	sub rcx, rsi
 22816 00012324 48C1E103                	shl rcx, 3
 22817 00012328 4801E1                  	add rcx, rsp ; rcx is the address to move
 22818 0001232B 4889F3                  	mov rbx, rsi
 22819 0001232E 48C1E303                	shl rbx, 3
 22820 00012332 48F7DB                  	neg rbx
 22821 00012335 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22822 00012338 488B09                  	mov rcx, [rcx]
 22823 0001233B 48890B                  	mov [rbx], rcx
 22824 0001233E 48FFC6                  	inc rsi
 22825 00012341 EBD3                    	jmp .L_tc_recycle_frame_loop_5d52
 22826                                  .L_tc_recycle_frame_done_5d52:	 ; end recycle frame loop
 22827 00012343 BB04000000              	mov rbx, 4
 22828 00012348 48C1E303                	shl rbx, 3
 22829 0001234C 48F7DB                  	neg rbx
 22830 0001234F 4801FB                  	add rbx, rdi
 22831 00012352 4889DC                  	mov rsp, rbx
 22832 00012355 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22833 00012359 FFE3                    	jmp rbx
 22834                                  	.L_if_end_56d9:
 22835                                  	.L_if_end_56d8:
 22836 0001235B C9                      	leave
 22837 0001235C C22000                  	ret 8 * (2 + 2)
 22838                                  .L_lambda_simple_end_4fc4:	; new closure is in rax
 22839 0001235F 48890425[88040000]      	mov qword [free_var_145], rax
 22840 00012367 48B8-                   	mov rax, sob_void
 22840 00012369 [0000000000000000] 
 22841                                  
 22842 00012371 4889C7                  	mov rdi, rax
 22843 00012374 E84C050000              	call print_sexpr_if_not_void
 22844                                  
 22845 00012379 488D0425[17000000]      	lea rax, [23 + L_constants]
 22846 00012381 50                      	push rax
 22847 00012382 488D0425[17000000]      	lea rax, [23 + L_constants]
 22848 0001238A 50                      	push rax
 22849 0001238B 6A02                    	push 2
 22850 0001238D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22851 00012392 E81D050000              	call malloc
 22852 00012397 50                      	push rax
 22853 00012398 BF00000000              	mov rdi, 8 * 0	; new rib
 22854 0001239D E812050000              	call malloc
 22855 000123A2 50                      	push rax
 22856 000123A3 BF08000000              	mov rdi, 8 * 1	; extended env
 22857 000123A8 E807050000              	call malloc
 22858 000123AD 488B7D10                	mov rdi, ENV
 22859 000123B1 BE00000000              	mov rsi, 0
 22860 000123B6 BA01000000              	mov rdx, 1
 22861                                  .L_lambda_simple_env_loop_4fc5:	; ext_env[i + 1] <-- env[i]
 22862 000123BB 4883FE00                	cmp rsi, 0
 22863 000123BF 7410                    	je .L_lambda_simple_env_end_4fc5
 22864 000123C1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 22865 000123C5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22866 000123C9 48FFC6                  	inc rsi
 22867 000123CC 48FFC2                  	inc rdx
 22868 000123CF EBEA                    	jmp .L_lambda_simple_env_loop_4fc5
 22869                                  .L_lambda_simple_env_end_4fc5:
 22870 000123D1 5B                      	pop rbx
 22871 000123D2 BE00000000              	mov rsi, 0
 22872                                  .L_lambda_simple_params_loop_4fc5:	; copy params
 22873 000123D7 4883FE00                	cmp rsi, 0
 22874 000123DB 740E                    	je .L_lambda_simple_params_end_4fc5
 22875 000123DD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22876 000123E2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22877 000123E6 48FFC6                  	inc rsi
 22878 000123E9 EBEC                    	jmp .L_lambda_simple_params_loop_4fc5
 22879                                  .L_lambda_simple_params_end_4fc5:
 22880 000123EB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22881 000123EE 4889C3                  	mov rbx, rax
 22882 000123F1 58                      	pop rax
 22883 000123F2 C60005                  	mov byte [rax], T_closure
 22884 000123F5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22885 000123F9 48C74009[06240100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc5
 22886 00012401 E9BB030000              	jmp .L_lambda_simple_end_4fc5
 22887                                  .L_lambda_simple_code_4fc5:	; lambda-simple body
 22888 00012406 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22889 0001240C 740B                    	je .L_lambda_simple_arity_check_ok_4fc5
 22890 0001240E FF742410                	push qword [rsp + 8 * 2]
 22891 00012412 6A02                    	push 2
 22892 00012414 E954040000              	jmp L_error_incorrect_arity_simple
 22893                                  .L_lambda_simple_arity_check_ok_4fc5:
 22894 00012419 C8000000                	enter 0, 0
 22895 0001241D BF11000000              	mov qword rdi, (1 + 8 + 8)
 22896 00012422 E88D040000              	call malloc
 22897 00012427 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 22898 0001242B 48B8-                   	mov rax, sob_void
 22898 0001242D [0000000000000000] 
 22899                                  
 22900 00012435 BF11000000              	mov qword rdi, (1 + 8 + 8)
 22901 0001243A E875040000              	call malloc
 22902 0001243F 48894528                	mov qword [rbp + 8*(4 + 1)], rax
 22903 00012443 48B8-                   	mov rax, sob_void
 22903 00012445 [0000000000000000] 
 22904                                  
 22905 0001244D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22906 00012452 E85D040000              	call malloc
 22907 00012457 50                      	push rax
 22908 00012458 BF10000000              	mov rdi, 8 * 2	; new rib
 22909 0001245D E852040000              	call malloc
 22910 00012462 50                      	push rax
 22911 00012463 BF10000000              	mov rdi, 8 * 2	; extended env
 22912 00012468 E847040000              	call malloc
 22913 0001246D 488B7D10                	mov rdi, ENV
 22914 00012471 BE00000000              	mov rsi, 0
 22915 00012476 BA01000000              	mov rdx, 1
 22916                                  .L_lambda_simple_env_loop_4fc6:	; ext_env[i + 1] <-- env[i]
 22917 0001247B 4883FE01                	cmp rsi, 1
 22918 0001247F 7410                    	je .L_lambda_simple_env_end_4fc6
 22919 00012481 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 22920 00012485 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22921 00012489 48FFC6                  	inc rsi
 22922 0001248C 48FFC2                  	inc rdx
 22923 0001248F EBEA                    	jmp .L_lambda_simple_env_loop_4fc6
 22924                                  .L_lambda_simple_env_end_4fc6:
 22925 00012491 5B                      	pop rbx
 22926 00012492 BE00000000              	mov rsi, 0
 22927                                  .L_lambda_simple_params_loop_4fc6:	; copy params
 22928 00012497 4883FE02                	cmp rsi, 2
 22929 0001249B 740E                    	je .L_lambda_simple_params_end_4fc6
 22930 0001249D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22931 000124A2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22932 000124A6 48FFC6                  	inc rsi
 22933 000124A9 EBEC                    	jmp .L_lambda_simple_params_loop_4fc6
 22934                                  .L_lambda_simple_params_end_4fc6:
 22935 000124AB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22936 000124AE 4889C3                  	mov rbx, rax
 22937 000124B1 58                      	pop rax
 22938 000124B2 C60005                  	mov byte [rax], T_closure
 22939 000124B5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22940 000124B9 48C74009[C6240100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc6
 22941 000124C1 E9E9000000              	jmp .L_lambda_simple_end_4fc6
 22942                                  .L_lambda_simple_code_4fc6:	; lambda-simple body
 22943 000124C6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22944 000124CC 740B                    	je .L_lambda_simple_arity_check_ok_4fc6
 22945 000124CE FF742410                	push qword [rsp + 8 * 2]
 22946 000124D2 6A02                    	push 2
 22947 000124D4 E994030000              	jmp L_error_incorrect_arity_simple
 22948                                  .L_lambda_simple_arity_check_ok_4fc6:
 22949 000124D9 C8000000                	enter 0, 0
 22950 000124DD 488B4528                	mov rax, PARAM(1)
 22951 000124E1 50                      	push rax
 22952 000124E2 6A01                    	push 1
 22953 000124E4 488B0425[D8000000]      	mov rax, qword [free_var_27]
 22954                                  	assert_closure(rax)
    42 000124EC 803805              <1>  cmp byte [%1], %2
    43 000124EF 0F853F1C0000        <1>  jne L_error_incorrect_type
 22955 000124F5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22956 000124F9 53                      	push rbx
 22957 000124FA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22958 000124FE FFD3                    	call rbx
 22959 00012500 483D[02000000]          	cmp rax, sob_boolean_false
 22960 00012506 7409                    	je .L_if_else_56da
 22961 00012508 488B4528                	mov rax, PARAM(1)
 22962 0001250C E99A000000              	jmp .L_if_end_56da
 22963                                  	.L_if_else_56da:
 22964 00012511 488D0425[01000000]      	lea rax, [1 + L_constants]
 22965 00012519 50                      	push rax
 22966 0001251A 488B4528                	mov rax, PARAM(1)
 22967 0001251E 50                      	push rax
 22968 0001251F 488B4520                	mov rax, PARAM(0)
 22969 00012523 50                      	push rax
 22970 00012524 488B4510                	mov rax, qword [rbp + 8*2]
 22971 00012528 488B00                  	mov rax, qword [rax + 8*0]
 22972 0001252B 488B4008                	mov rax, qword [rax + 8*1]
 22973 0001252F 488B00                  	mov rax, qword [rax]
 22974 00012532 50                      	push rax
 22975 00012533 6A04                    	push 4
 22976 00012535 488B0425[C8020000]      	mov rax, qword [free_var_89]
 22977                                  	assert_closure(rax)
    42 0001253D 803805              <1>  cmp byte [%1], %2
    43 00012540 0F85EE1B0000        <1>  jne L_error_incorrect_type
 22978 00012546 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22979 0001254A 53                      	push rbx
 22980 0001254B FF7508                  	push RET_ADDR
 22981 0001254E 488B7D18                	mov rdi, COUNT
 22982 00012552 4883C703                	add rdi, 3
 22983 00012556 48C1E703                	shl rdi, 3
 22984 0001255A 4801EF                  	add rdi, rbp
 22985 0001255D 488B6D00                	mov rbp, OLD_RDP
 22986 00012561 BE00000000              	mov rsi, 0
 22987                                  .L_tc_recycle_frame_loop_5d53:	 ; start recycle frame loop
 22988 00012566 4883FE07                	cmp rsi, 7
 22989 0001256A 7427                    	je .L_tc_recycle_frame_done_5d53
 22990 0001256C B906000000              	mov rcx, 6
 22991 00012571 4829F1                  	sub rcx, rsi
 22992 00012574 48C1E103                	shl rcx, 3
 22993 00012578 4801E1                  	add rcx, rsp ; rcx is the address to move
 22994 0001257B 4889F3                  	mov rbx, rsi
 22995 0001257E 48C1E303                	shl rbx, 3
 22996 00012582 48F7DB                  	neg rbx
 22997 00012585 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22998 00012588 488B09                  	mov rcx, [rcx]
 22999 0001258B 48890B                  	mov [rbx], rcx
 23000 0001258E 48FFC6                  	inc rsi
 23001 00012591 EBD3                    	jmp .L_tc_recycle_frame_loop_5d53
 23002                                  .L_tc_recycle_frame_done_5d53:	 ; end recycle frame loop
 23003 00012593 BB06000000              	mov rbx, 6
 23004 00012598 48C1E303                	shl rbx, 3
 23005 0001259C 48F7DB                  	neg rbx
 23006 0001259F 4801FB                  	add rbx, rdi
 23007 000125A2 4889DC                  	mov rsp, rbx
 23008 000125A5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 23009 000125A9 FFE3                    	jmp rbx
 23010                                  	.L_if_end_56da:
 23011 000125AB C9                      	leave
 23012 000125AC C22000                  	ret 8 * (2 + 2)
 23013                                  .L_lambda_simple_end_4fc6:	; new closure is in rax
 23014 000125AF 50                      	push rax
 23015 000125B0 488B4520                	mov rax, PARAM(0)
 23016 000125B4 8F00                    	pop qword [rax]
 23017 000125B6 48B8-                   	mov rax, sob_void
 23017 000125B8 [0000000000000000] 
 23018                                  
 23019 000125C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23020 000125C5 E8EA020000              	call malloc
 23021 000125CA 50                      	push rax
 23022 000125CB BF10000000              	mov rdi, 8 * 2	; new rib
 23023 000125D0 E8DF020000              	call malloc
 23024 000125D5 50                      	push rax
 23025 000125D6 BF10000000              	mov rdi, 8 * 2	; extended env
 23026 000125DB E8D4020000              	call malloc
 23027 000125E0 488B7D10                	mov rdi, ENV
 23028 000125E4 BE00000000              	mov rsi, 0
 23029 000125E9 BA01000000              	mov rdx, 1
 23030                                  .L_lambda_simple_env_loop_4fc7:	; ext_env[i + 1] <-- env[i]
 23031 000125EE 4883FE01                	cmp rsi, 1
 23032 000125F2 7410                    	je .L_lambda_simple_env_end_4fc7
 23033 000125F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] 
 23034 000125F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23035 000125FC 48FFC6                  	inc rsi
 23036 000125FF 48FFC2                  	inc rdx
 23037 00012602 EBEA                    	jmp .L_lambda_simple_env_loop_4fc7
 23038                                  .L_lambda_simple_env_end_4fc7:
 23039 00012604 5B                      	pop rbx
 23040 00012605 BE00000000              	mov rsi, 0
 23041                                  .L_lambda_simple_params_loop_4fc7:	; copy params
 23042 0001260A 4883FE02                	cmp rsi, 2
 23043 0001260E 740E                    	je .L_lambda_simple_params_end_4fc7
 23044 00012610 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23045 00012615 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23046 00012619 48FFC6                  	inc rsi
 23047 0001261C EBEC                    	jmp .L_lambda_simple_params_loop_4fc7
 23048                                  .L_lambda_simple_params_end_4fc7:
 23049 0001261E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23050 00012621 4889C3                  	mov rbx, rax
 23051 00012624 58                      	pop rax
 23052 00012625 C60005                  	mov byte [rax], T_closure
 23053 00012628 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23054 0001262C 48C74009[39260100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc7
 23055 00012634 E9D8000000              	jmp .L_lambda_simple_end_4fc7
 23056                                  .L_lambda_simple_code_4fc7:	; lambda-simple body
 23057 00012639 48837C241002            	cmp qword [rsp + 8 * 2], 2
 23058 0001263F 740B                    	je .L_lambda_simple_arity_check_ok_4fc7
 23059 00012641 FF742410                	push qword [rsp + 8 * 2]
 23060 00012645 6A02                    	push 2
 23061 00012647 E921020000              	jmp L_error_incorrect_arity_simple
 23062                                  .L_lambda_simple_arity_check_ok_4fc7:
 23063 0001264C C8000000                	enter 0, 0
 23064 00012650 488D0425[01000000]      	lea rax, [1 + L_constants]
 23065 00012658 50                      	push rax
 23066 00012659 488D0425[80000000]      	lea rax, [128 + L_constants]
 23067 00012661 50                      	push rax
 23068 00012662 488B4528                	mov rax, PARAM(1)
 23069 00012666 50                      	push rax
 23070 00012667 6A02                    	push 2
 23071 00012669 488B4520                	mov rax, PARAM(0)
 23072                                  	assert_closure(rax)
    42 0001266D 803805              <1>  cmp byte [%1], %2
    43 00012670 0F85BE1A0000        <1>  jne L_error_incorrect_type
 23073 00012676 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 23074 0001267A 53                      	push rbx
 23075 0001267B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 23076 0001267F FFD3                    	call rbx
 23077 00012681 50                      	push rax
 23078 00012682 488B4520                	mov rax, PARAM(0)
 23079 00012686 50                      	push rax
 23080 00012687 488B4510                	mov rax, qword [rbp + 8*2]
 23081 0001268B 488B00                  	mov rax, qword [rax + 8*0]
 23082 0001268E 488B00                  	mov rax, qword [rax + 8*0]
 23083 00012691 488B00                  	mov rax, qword [rax]
 23084 00012694 50                      	push rax
 23085 00012695 6A04                    	push 4
 23086 00012697 488B0425[C8020000]      	mov rax, qword [free_var_89]
 23087                                  	assert_closure(rax)
    42 0001269F 803805              <1>  cmp byte [%1], %2
    43 000126A2 0F858C1A0000        <1>  jne L_error_incorrect_type
 23088 000126A8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 23089 000126AC 53                      	push rbx
 23090 000126AD FF7508                  	push RET_ADDR
 23091 000126B0 488B7D18                	mov rdi, COUNT
 23092 000126B4 4883C703                	add rdi, 3
 23093 000126B8 48C1E703                	shl rdi, 3
 23094 000126BC 4801EF                  	add rdi, rbp
 23095 000126BF 488B6D00                	mov rbp, OLD_RDP
 23096 000126C3 BE00000000              	mov rsi, 0
 23097                                  .L_tc_recycle_frame_loop_5d54:	 ; start recycle frame loop
 23098 000126C8 4883FE07                	cmp rsi, 7
 23099 000126CC 7427                    	je .L_tc_recycle_frame_done_5d54
 23100 000126CE B906000000              	mov rcx, 6
 23101 000126D3 4829F1                  	sub rcx, rsi
 23102 000126D6 48C1E103                	shl rcx, 3
 23103 000126DA 4801E1                  	add rcx, rsp ; rcx is the address to move
 23104 000126DD 4889F3                  	mov rbx, rsi
 23105 000126E0 48C1E303                	shl rbx, 3
 23106 000126E4 48F7DB                  	neg rbx
 23107 000126E7 4801FB                  	add rbx, rdi ;rbx is the address to move to
 23108 000126EA 488B09                  	mov rcx, [rcx]
 23109 000126ED 48890B                  	mov [rbx], rcx
 23110 000126F0 48FFC6                  	inc rsi
 23111 000126F3 EBD3                    	jmp .L_tc_recycle_frame_loop_5d54
 23112                                  .L_tc_recycle_frame_done_5d54:	 ; end recycle frame loop
 23113 000126F5 BB06000000              	mov rbx, 6
 23114 000126FA 48C1E303                	shl rbx, 3
 23115 000126FE 48F7DB                  	neg rbx
 23116 00012701 4801FB                  	add rbx, rdi
 23117 00012704 4889DC                  	mov rsp, rbx
 23118 00012707 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 23119 0001270B FFE3                    	jmp rbx
 23120 0001270D C9                      	leave
 23121 0001270E C22000                  	ret 8 * (2 + 2)
 23122                                  .L_lambda_simple_end_4fc7:	; new closure is in rax
 23123 00012711 50                      	push rax
 23124 00012712 488B4528                	mov rax, PARAM(1)
 23125 00012716 8F00                    	pop qword [rax]
 23126 00012718 48B8-                   	mov rax, sob_void
 23126 0001271A [0000000000000000] 
 23127                                  
 23128 00012722 488D0425[01000000]      	lea rax, [1 + L_constants]
 23129 0001272A 50                      	push rax
 23130 0001272B 488D0425[11020000]      	lea rax, [529 + L_constants]
 23131 00012733 50                      	push rax
 23132 00012734 488B0425[18010000]      	mov rax, qword [free_var_35]
 23133 0001273C 50                      	push rax
 23134 0001273D 488B4520                	mov rax, PARAM(0)
 23135 00012741 488B00                  	mov rax, qword [rax]
 23136 00012744 50                      	push rax
 23137 00012745 6A04                    	push 4
 23138 00012747 488B0425[C8020000]      	mov rax, qword [free_var_89]
 23139                                  	assert_closure(rax)
    42 0001274F 803805              <1>  cmp byte [%1], %2
    43 00012752 0F85DC190000        <1>  jne L_error_incorrect_type
 23140 00012758 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 23141 0001275C 53                      	push rbx
 23142 0001275D FF7508                  	push RET_ADDR
 23143 00012760 488B7D18                	mov rdi, COUNT
 23144 00012764 4883C703                	add rdi, 3
 23145 00012768 48C1E703                	shl rdi, 3
 23146 0001276C 4801EF                  	add rdi, rbp
 23147 0001276F 488B6D00                	mov rbp, OLD_RDP
 23148 00012773 BE00000000              	mov rsi, 0
 23149                                  .L_tc_recycle_frame_loop_5d55:	 ; start recycle frame loop
 23150 00012778 4883FE07                	cmp rsi, 7
 23151 0001277C 7427                    	je .L_tc_recycle_frame_done_5d55
 23152 0001277E B906000000              	mov rcx, 6
 23153 00012783 4829F1                  	sub rcx, rsi
 23154 00012786 48C1E103                	shl rcx, 3
 23155 0001278A 4801E1                  	add rcx, rsp ; rcx is the address to move
 23156 0001278D 4889F3                  	mov rbx, rsi
 23157 00012790 48C1E303                	shl rbx, 3
 23158 00012794 48F7DB                  	neg rbx
 23159 00012797 4801FB                  	add rbx, rdi ;rbx is the address to move to
 23160 0001279A 488B09                  	mov rcx, [rcx]
 23161 0001279D 48890B                  	mov [rbx], rcx
 23162 000127A0 48FFC6                  	inc rsi
 23163 000127A3 EBD3                    	jmp .L_tc_recycle_frame_loop_5d55
 23164                                  .L_tc_recycle_frame_done_5d55:	 ; end recycle frame loop
 23165 000127A5 BB06000000              	mov rbx, 6
 23166 000127AA 48C1E303                	shl rbx, 3
 23167 000127AE 48F7DB                  	neg rbx
 23168 000127B1 4801FB                  	add rbx, rdi
 23169 000127B4 4889DC                  	mov rsp, rbx
 23170 000127B7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 23171 000127BB FFE3                    	jmp rbx
 23172 000127BD C9                      	leave
 23173 000127BE C22000                  	ret 8 * (2 + 2)
 23174                                  .L_lambda_simple_end_4fc5:	; new closure is in rax
 23175                                  	assert_closure(rax)
    42 000127C1 803805              <1>  cmp byte [%1], %2
    43 000127C4 0F856A190000        <1>  jne L_error_incorrect_type
 23176 000127CA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 23177 000127CE 53                      	push rbx
 23178 000127CF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 23179 000127D3 FFD3                    	call rbx
 23180                                  
 23181 000127D5 4889C7                  	mov rdi, rax
 23182 000127D8 E8E8000000              	call print_sexpr_if_not_void
 23183                                  
 23184 000127DD 48BF-                           mov rdi, fmt_memory_usage
 23184 000127DF [8102000000000000] 
 23185 000127E7 488B3425[08030000]              mov rsi, qword [top_of_memory]
 23186 000127EF 4881EE[90040000]                sub rsi, memory
 23187 000127F6 B800000000                      mov rax, 0
 23188                                  	ENTER
    33 000127FB C8000000            <1>  enter 0, 0
    34 000127FF 4883E4F0            <1>  and rsp, ~15
 23189 00012803 E8(00000000)                    call printf
 23190                                  	LEAVE
    38 00012808 C9                  <1>  leave
 23191 00012809 C9                      	leave
 23192 0001280A C3                      	ret
 23193                                  
 23194                                  L_error_non_closure:
 23195 0001280B 488B3C25[00000000]              mov rdi, qword [stderr]
 23196 00012813 48BE-                           mov rsi, fmt_non_closure
 23196 00012815 [B802000000000000] 
 23197 0001281D B800000000                      mov rax, 0
 23198                                  	ENTER
    33 00012822 C8000000            <1>  enter 0, 0
    34 00012826 4883E4F0            <1>  and rsp, ~15
 23199 0001282A E8(00000000)                    call fprintf
 23200                                  	LEAVE
    38 0001282F C9                  <1>  leave
 23201 00012830 48C7C0FEFFFFFF                  mov rax, -2
 23202 00012837 E8(00000000)                    call exit
 23203                                  
 23204                                  L_error_improper_list:
 23205 0001283C 488B3C25[00000000]      	mov rdi, qword [stderr]
 23206 00012844 48BE-                   	mov rsi, fmt_error_improper_list
 23206 00012846 [E002000000000000] 
 23207 0001284E B800000000              	mov rax, 0
 23208                                  	ENTER
    33 00012853 C8000000            <1>  enter 0, 0
    34 00012857 4883E4F0            <1>  and rsp, ~15
 23209 0001285B E8(00000000)            	call fprintf
 23210                                  	LEAVE
    38 00012860 C9                  <1>  leave
 23211 00012861 48C7C0F9FFFFFF          	mov rax, -7
 23212 00012868 E8(00000000)            	call exit
 23213                                  
 23214                                  L_error_incorrect_arity_simple:
 23215 0001286D 488B3C25[00000000]              mov rdi, qword [stderr]
 23216 00012875 48BE-                           mov rsi, fmt_incorrect_arity_simple
 23216 00012877 [2202000000000000] 
 23217 0001287F EB12                            jmp L_error_incorrect_arity_common
 23218                                  L_error_incorrect_arity_opt:
 23219 00012881 488B3C25[00000000]              mov rdi, qword [stderr]
 23220 00012889 48BE-                           mov rsi, fmt_incorrect_arity_opt
 23220 0001288B [4D02000000000000] 
 23221                                  L_error_incorrect_arity_common:
 23222 00012893 5A                              pop rdx
 23223 00012894 59                              pop rcx
 23224 00012895 B800000000                      mov rax, 0
 23225                                  	ENTER
    33 0001289A C8000000            <1>  enter 0, 0
    34 0001289E 4883E4F0            <1>  and rsp, ~15
 23226 000128A2 E8(00000000)                    call fprintf
 23227                                  	LEAVE
    38 000128A7 C9                  <1>  leave
 23228 000128A8 48C7C0FAFFFFFF                  mov rax, -6
 23229 000128AF E8(00000000)                    call exit
 23230                                  
 23231                                  section .data
 23232                                  fmt_incorrect_arity_simple:
 23233 00000222 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 23233 0000022B 74656420256C642061-
 23233 00000234 7267756D656E74732C-
 23233 0000023D 206275742067697665-
 23233 00000246 6E20256C640A00     
 23234                                  fmt_incorrect_arity_opt:
 23235 0000024D 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 23235 00000256 746564206174206C65-
 23235 0000025F 61737420256C642061-
 23235 00000268 7267756D656E74732C-
 23235 00000271 206275742067697665-
 23235 0000027A 6E20256C640A00     
 23236                                  fmt_memory_usage:
 23237 00000281 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 23237 0000028A 6420256C6420627974-
 23237 00000293 6573206F662064796E-
 23237 0000029C 616D6963616C6C792D-
 23237 000002A5 616C6C6F6361746564-
 23237 000002AE 206D656D6F72790A0A-
 23237 000002B7 00                 
 23238                                  fmt_non_closure:
 23239 000002B8 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 23239 000002C1 7074696E6720746F20-
 23239 000002CA 6170706C792061206E-
 23239 000002D3 6F6E2D636C6F737572-
 23239 000002DC 65210A00           
 23240                                  fmt_error_improper_list:
 23241 000002E0 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 23241 000002E9 7267756D656E742069-
 23241 000002F2 73206E6F7420612070-
 23241 000002FB 726F706572206C6973-
 23241 00000304 74210A00           
 23242                                  
 23243                                  section .bss
 23244                                  memory:
 23245 00000490 <res 40000000h>         	resb gbytes(1)
 23246                                  
 23247                                  section .data
 23248                                  top_of_memory:
 23249 00000308 [9004000000000000]              dq memory
 23250                                  
 23251                                  section .text
 23252                                  malloc:
 23253 000128B4 488B0425[08030000]              mov rax, qword [top_of_memory]
 23254 000128BC 48013C25[08030000]              add qword [top_of_memory], rdi
 23255 000128C4 C3                              ret
 23256                                          
 23257                                  print_sexpr_if_not_void:
 23258 000128C5 4881FF[00000000]        	cmp rdi, sob_void
 23259 000128CC 7501                    	jne print_sexpr
 23260 000128CE C3                      	ret
 23261                                  
 23262                                  section .data
 23263                                  fmt_void:
 23264 00000310 233C766F69643E00        	db `#<void>\0`
 23265                                  fmt_nil:
 23266 00000318 282900                  	db `()\0`
 23267                                  fmt_boolean_false:
 23268 0000031B 236600                  	db `#f\0`
 23269                                  fmt_boolean_true:
 23270 0000031E 237400                  	db `#t\0`
 23271                                  fmt_char_backslash:
 23272 00000321 235C5C00                	db `#\\\\\0`
 23273                                  fmt_char_dquote:
 23274 00000325 235C2200                	db `#\\"\0`
 23275                                  fmt_char_simple:
 23276 00000329 235C256300              	db `#\\%c\0`
 23277                                  fmt_char_null:
 23278 0000032E 235C6E756C00            	db `#\\nul\0`
 23279                                  fmt_char_bell:
 23280 00000334 235C62656C6C00          	db `#\\bell\0`
 23281                                  fmt_char_backspace:
 23282 0000033B 235C6261636B737061-     	db `#\\backspace\0`
 23282 00000344 636500             
 23283                                  fmt_char_tab:
 23284 00000347 235C74616200            	db `#\\tab\0`
 23285                                  fmt_char_newline:
 23286 0000034D 235C6E65776C696E65-     	db `#\\newline\0`
 23286 00000356 00                 
 23287                                  fmt_char_formfeed:
 23288 00000357 235C7061676500          	db `#\\page\0`
 23289                                  fmt_char_return:
 23290 0000035E 235C72657475726E00      	db `#\\return\0`
 23291                                  fmt_char_escape:
 23292 00000367 235C65736300            	db `#\\esc\0`
 23293                                  fmt_char_space:
 23294 0000036D 235C737061636500        	db `#\\space\0`
 23295                                  fmt_char_hex:
 23296 00000375 235C782530325800        	db `#\\x%02X\0`
 23297                                  fmt_closure:
 23298 0000037D 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 23298 00000386 206174203078253038-
 23298 0000038F 5820656E763D307825-
 23298 00000398 30385820636F64653D-
 23298 000003A1 3078253038583E00   
 23299                                  fmt_lparen:
 23300 000003A9 2800                    	db `(\0`
 23301                                  fmt_dotted_pair:
 23302 000003AB 202E2000                	db ` . \0`
 23303                                  fmt_rparen:
 23304 000003AF 2900                    	db `)\0`
 23305                                  fmt_space:
 23306 000003B1 2000                    	db ` \0`
 23307                                  fmt_empty_vector:
 23308 000003B3 23282900                	db `#()\0`
 23309                                  fmt_vector:
 23310 000003B7 232800                  	db `#(\0`
 23311                                  fmt_real:
 23312 000003BA 256600                  	db `%f\0`
 23313                                  fmt_fraction:
 23314 000003BD 256C642F256C6400        	db `%ld/%ld\0`
 23315                                  fmt_zero:
 23316 000003C5 3000                    	db `0\0`
 23317                                  fmt_int:
 23318 000003C7 256C6400                	db `%ld\0`
 23319                                  fmt_unknown_sexpr_error:
 23320 000003CB 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
 23320 000003D4 6F723A20556E6B6E6F-
 23320 000003DD 776E2074797065206F-
 23320 000003E6 662073657870722028-
 23320 000003EF 3078253032582920   
 23321 000003F7 617420616464726573-     	db `at address 0x%08X\n\n\0`
 23321 00000400 73203078253038580A-
 23321 00000409 0A00               
 23322                                  fmt_dquote:
 23323 0000040B 2200                    	db `\"\0`
 23324                                  fmt_string_char:
 23325 0000040D 256300                          db `%c\0`
 23326                                  fmt_string_char_7:
 23327 00000410 5C6100                          db `\\a\0`
 23328                                  fmt_string_char_8:
 23329 00000413 5C6200                          db `\\b\0`
 23330                                  fmt_string_char_9:
 23331 00000416 5C7400                          db `\\t\0`
 23332                                  fmt_string_char_10:
 23333 00000419 5C6E00                          db `\\n\0`
 23334                                  fmt_string_char_11:
 23335 0000041C 5C7600                          db `\\v\0`
 23336                                  fmt_string_char_12:
 23337 0000041F 5C6600                          db `\\f\0`
 23338                                  fmt_string_char_13:
 23339 00000422 5C7200                          db `\\r\0`
 23340                                  fmt_string_char_34:
 23341 00000425 5C2200                          db `\\"\0`
 23342                                  fmt_string_char_92:
 23343 00000428 5C5C00                          db `\\\\\0`
 23344                                  fmt_string_char_hex:
 23345 0000042B 5C7825583B00                    db `\\x%X;\0`
 23346                                  
 23347                                  section .text
 23348                                  
 23349                                  print_sexpr:
 23350                                  	ENTER
    33 000128CF C8000000            <1>  enter 0, 0
    34 000128D3 4883E4F0            <1>  and rsp, ~15
 23351 000128D7 8A07                    	mov al, byte [rdi]
 23352 000128D9 3C00                    	cmp al, T_void
 23353 000128DB 744D                    	je .Lvoid
 23354 000128DD 3C01                    	cmp al, T_nil
 23355 000128DF 7458                    	je .Lnil
 23356 000128E1 3C09                    	cmp al, T_boolean_false
 23357 000128E3 7463                    	je .Lboolean_false
 23358 000128E5 3C0A                    	cmp al, T_boolean_true
 23359 000128E7 746E                    	je .Lboolean_true
 23360 000128E9 3C02                    	cmp al, T_char
 23361 000128EB 7479                    	je .Lchar
 23362 000128ED 3C04                    	cmp al, T_symbol
 23363 000128EF 0F84BB010000            	je .Lsymbol
 23364 000128F5 3C21                    	cmp al, T_pair
 23365 000128F7 0F84D6010000            	je .Lpair
 23366 000128FD 3C22                    	cmp al, T_vector
 23367 000128FF 0F849F020000            	je .Lvector
 23368 00012905 3C05                    	cmp al, T_closure
 23369 00012907 0F8489010000            	je .Lclosure
 23370 0001290D 3C12                    	cmp al, T_real
 23371 0001290F 0F8430030000            	je .Lreal
 23372 00012915 3C11                    	cmp al, T_rational
 23373 00012917 0F8456030000            	je .Lrational
 23374 0001291D 3C03                    	cmp al, T_string
 23375 0001291F 0F848F030000            	je .Lstring
 23376                                  
 23377 00012925 E9C7040000              	jmp .Lunknown_sexpr_type
 23378                                  
 23379                                  .Lvoid:
 23380 0001292A 48BF-                   	mov rdi, fmt_void
 23380 0001292C [1003000000000000] 
 23381 00012934 E9F5040000              	jmp .Lemit
 23382                                  
 23383                                  .Lnil:
 23384 00012939 48BF-                   	mov rdi, fmt_nil
 23384 0001293B [1803000000000000] 
 23385 00012943 E9E6040000              	jmp .Lemit
 23386                                  
 23387                                  .Lboolean_false:
 23388 00012948 48BF-                   	mov rdi, fmt_boolean_false
 23388 0001294A [1B03000000000000] 
 23389 00012952 E9D7040000              	jmp .Lemit
 23390                                  
 23391                                  .Lboolean_true:
 23392 00012957 48BF-                   	mov rdi, fmt_boolean_true
 23392 00012959 [1E03000000000000] 
 23393 00012961 E9C8040000              	jmp .Lemit
 23394                                  
 23395                                  .Lchar:
 23396 00012966 8A4701                  	mov al, byte [rdi + 1]
 23397 00012969 3C20                    	cmp al, ' '
 23398 0001296B 7E28                    	jle .Lchar_whitespace
 23399 0001296D 3C5C                    	cmp al, 92 		; backslash
 23400 0001296F 0F847C000000            	je .Lchar_backslash
 23401 00012975 3C22                    	cmp al, '"'
 23402 00012977 0F8483000000            	je .Lchar_dquote
 23403 0001297D 4825FF000000            	and rax, 255
 23404 00012983 48BF-                   	mov rdi, fmt_char_simple
 23404 00012985 [2903000000000000] 
 23405 0001298D 4889C6                  	mov rsi, rax
 23406 00012990 E999040000              	jmp .Lemit
 23407                                  
 23408                                  .Lchar_whitespace:
 23409 00012995 3C00                    	cmp al, 0
 23410 00012997 7476                    	je .Lchar_null
 23411 00012999 3C07                    	cmp al, 7
 23412 0001299B 0F847D000000            	je .Lchar_bell
 23413 000129A1 3C08                    	cmp al, 8
 23414 000129A3 0F8484000000            	je .Lchar_backspace
 23415 000129A9 3C09                    	cmp al, 9
 23416 000129AB 0F848B000000            	je .Lchar_tab
 23417 000129B1 3C0A                    	cmp al, 10
 23418 000129B3 0F8492000000            	je .Lchar_newline
 23419 000129B9 3C0C                    	cmp al, 12
 23420 000129BB 0F8499000000            	je .Lchar_formfeed
 23421 000129C1 3C0D                    	cmp al, 13
 23422 000129C3 0F84A0000000            	je .Lchar_return
 23423 000129C9 3C1B                    	cmp al, 27
 23424 000129CB 0F84A7000000            	je .Lchar_escape
 23425 000129D1 4825FF000000            	and rax, 255
 23426 000129D7 3C20                    	cmp al, ' '
 23427 000129D9 0F84A8000000            	je .Lchar_space
 23428 000129DF 48BF-                   	mov rdi, fmt_char_hex
 23428 000129E1 [7503000000000000] 
 23429 000129E9 4889C6                  	mov rsi, rax
 23430 000129EC E93D040000              	jmp .Lemit	
 23431                                  
 23432                                  .Lchar_backslash:
 23433 000129F1 48BF-                   	mov rdi, fmt_char_backslash
 23433 000129F3 [2103000000000000] 
 23434 000129FB E92E040000              	jmp .Lemit
 23435                                  
 23436                                  .Lchar_dquote:
 23437 00012A00 48BF-                   	mov rdi, fmt_char_dquote
 23437 00012A02 [2503000000000000] 
 23438 00012A0A E91F040000              	jmp .Lemit
 23439                                  
 23440                                  .Lchar_null:
 23441 00012A0F 48BF-                   	mov rdi, fmt_char_null
 23441 00012A11 [2E03000000000000] 
 23442 00012A19 E910040000              	jmp .Lemit
 23443                                  
 23444                                  .Lchar_bell:
 23445 00012A1E 48BF-                   	mov rdi, fmt_char_bell
 23445 00012A20 [3403000000000000] 
 23446 00012A28 E901040000              	jmp .Lemit
 23447                                  
 23448                                  .Lchar_backspace:
 23449 00012A2D 48BF-                   	mov rdi, fmt_char_backspace
 23449 00012A2F [3B03000000000000] 
 23450 00012A37 E9F2030000              	jmp .Lemit
 23451                                  
 23452                                  .Lchar_tab:
 23453 00012A3C 48BF-                   	mov rdi, fmt_char_tab
 23453 00012A3E [4703000000000000] 
 23454 00012A46 E9E3030000              	jmp .Lemit
 23455                                  
 23456                                  .Lchar_newline:
 23457 00012A4B 48BF-                   	mov rdi, fmt_char_newline
 23457 00012A4D [4D03000000000000] 
 23458 00012A55 E9D4030000              	jmp .Lemit
 23459                                  
 23460                                  .Lchar_formfeed:
 23461 00012A5A 48BF-                   	mov rdi, fmt_char_formfeed
 23461 00012A5C [5703000000000000] 
 23462 00012A64 E9C5030000              	jmp .Lemit
 23463                                  
 23464                                  .Lchar_return:
 23465 00012A69 48BF-                   	mov rdi, fmt_char_return
 23465 00012A6B [5E03000000000000] 
 23466 00012A73 E9B6030000              	jmp .Lemit
 23467                                  
 23468                                  .Lchar_escape:
 23469 00012A78 48BF-                   	mov rdi, fmt_char_escape
 23469 00012A7A [6703000000000000] 
 23470 00012A82 E9A7030000              	jmp .Lemit
 23471                                  
 23472                                  .Lchar_space:
 23473 00012A87 48BF-                   	mov rdi, fmt_char_space
 23473 00012A89 [6D03000000000000] 
 23474 00012A91 E998030000              	jmp .Lemit
 23475                                  
 23476                                  .Lclosure:
 23477 00012A96 4889FE                  	mov rsi, qword rdi
 23478 00012A99 48BF-                   	mov rdi, fmt_closure
 23478 00012A9B [7D03000000000000] 
 23479 00012AA3 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 23480 00012AA7 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 23481 00012AAB E97E030000              	jmp .Lemit
 23482                                  
 23483                                  .Lsymbol:
 23484 00012AB0 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 23485 00012AB4 BE01000000              	mov rsi, 1		 ; size = 1 byte
 23486 00012AB9 488B5701                	mov rdx, qword [rdi + 1] ; length
 23487 00012ABD 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 23488 00012AC1 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 23489 00012AC9 E8(00000000)            	call fwrite
 23490 00012ACE E970030000              	jmp .Lend
 23491                                  	
 23492                                  .Lpair:
 23493 00012AD3 57                      	push rdi
 23494 00012AD4 48BF-                   	mov rdi, fmt_lparen
 23494 00012AD6 [A903000000000000] 
 23495 00012ADE B800000000              	mov rax, 0
 23496                                          ENTER
    33 00012AE3 C8000000            <1>  enter 0, 0
    34 00012AE7 4883E4F0            <1>  and rsp, ~15
 23497 00012AEB E8(00000000)            	call printf
 23498                                          LEAVE
    38 00012AF0 C9                  <1>  leave
 23499 00012AF1 488B3C24                	mov rdi, qword [rsp] 	; pair
 23500 00012AF5 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 23501 00012AF9 E8D1FDFFFF              	call print_sexpr
 23502 00012AFE 5F                      	pop rdi 		; pair
 23503 00012AFF 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 23504                                  .Lcdr:
 23505 00012B03 8A07                    	mov al, byte [rdi]
 23506 00012B05 3C01                    	cmp al, T_nil
 23507 00012B07 7447                    	je .Lcdr_nil
 23508 00012B09 3C21                    	cmp al, T_pair
 23509 00012B0B 7462                    	je .Lcdr_pair
 23510 00012B0D 57                      	push rdi
 23511 00012B0E 48BF-                   	mov rdi, fmt_dotted_pair
 23511 00012B10 [AB03000000000000] 
 23512 00012B18 B800000000              	mov rax, 0
 23513                                  	ENTER
    33 00012B1D C8000000            <1>  enter 0, 0
    34 00012B21 4883E4F0            <1>  and rsp, ~15
 23514 00012B25 E8(00000000)            	call printf
 23515                                  	LEAVE
    38 00012B2A C9                  <1>  leave
 23516 00012B2B 5F                      	pop rdi
 23517 00012B2C E89EFDFFFF              	call print_sexpr
 23518 00012B31 48BF-                   	mov rdi, fmt_rparen
 23518 00012B33 [AF03000000000000] 
 23519 00012B3B B800000000              	mov rax, 0
 23520                                  	ENTER
    33 00012B40 C8000000            <1>  enter 0, 0
    34 00012B44 4883E4F0            <1>  and rsp, ~15
 23521 00012B48 E8(00000000)            	call printf
 23522                                  	LEAVE
    38 00012B4D C9                  <1>  leave
 23523                                  	LEAVE
    38 00012B4E C9                  <1>  leave
 23524 00012B4F C3                      	ret
 23525                                  
 23526                                  .Lcdr_nil:
 23527 00012B50 48BF-                   	mov rdi, fmt_rparen
 23527 00012B52 [AF03000000000000] 
 23528 00012B5A B800000000              	mov rax, 0
 23529                                  	ENTER
    33 00012B5F C8000000            <1>  enter 0, 0
    34 00012B63 4883E4F0            <1>  and rsp, ~15
 23530 00012B67 E8(00000000)            	call printf
 23531                                  	LEAVE
    38 00012B6C C9                  <1>  leave
 23532                                  	LEAVE
    38 00012B6D C9                  <1>  leave
 23533 00012B6E C3                      	ret
 23534                                  
 23535                                  .Lcdr_pair:
 23536 00012B6F 57                      	push rdi
 23537 00012B70 48BF-                   	mov rdi, fmt_space
 23537 00012B72 [B103000000000000] 
 23538 00012B7A B800000000              	mov rax, 0
 23539                                  	ENTER
    33 00012B7F C8000000            <1>  enter 0, 0
    34 00012B83 4883E4F0            <1>  and rsp, ~15
 23540 00012B87 E8(00000000)            	call printf
 23541                                  	LEAVE
    38 00012B8C C9                  <1>  leave
 23542 00012B8D 488B3C24                	mov rdi, qword [rsp]
 23543 00012B91 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 23544 00012B95 E835FDFFFF              	call print_sexpr
 23545 00012B9A 5F                      	pop rdi
 23546 00012B9B 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 23547 00012B9F E95FFFFFFF              	jmp .Lcdr
 23548                                  
 23549                                  .Lvector:
 23550 00012BA4 488B4701                	mov rax, qword [rdi + 1] ; length
 23551 00012BA8 4883F800                	cmp rax, 0
 23552 00012BAC 0F8484000000            	je .Lvector_empty
 23553 00012BB2 57                      	push rdi
 23554 00012BB3 48BF-                   	mov rdi, fmt_vector
 23554 00012BB5 [B703000000000000] 
 23555 00012BBD B800000000              	mov rax, 0
 23556                                  	ENTER
    33 00012BC2 C8000000            <1>  enter 0, 0
    34 00012BC6 4883E4F0            <1>  and rsp, ~15
 23557 00012BCA E8(00000000)            	call printf
 23558                                  	LEAVE
    38 00012BCF C9                  <1>  leave
 23559 00012BD0 488B3C24                	mov rdi, qword [rsp]
 23560 00012BD4 FF7701                  	push qword [rdi + 1]
 23561 00012BD7 6A01                    	push 1
 23562 00012BD9 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 23563 00012BDD E8EDFCFFFF              	call print_sexpr
 23564                                  .Lvector_loop:
 23565                                  	; [rsp] index
 23566                                  	; [rsp + 8*1] limit
 23567                                  	; [rsp + 8*2] vector
 23568 00012BE2 488B0424                	mov rax, qword [rsp]
 23569 00012BE6 483B442408              	cmp rax, qword [rsp + 8*1]
 23570 00012BEB 7436                    	je .Lvector_end
 23571 00012BED 48BF-                   	mov rdi, fmt_space
 23571 00012BEF [B103000000000000] 
 23572 00012BF7 B800000000              	mov rax, 0
 23573                                  	ENTER
    33 00012BFC C8000000            <1>  enter 0, 0
    34 00012C00 4883E4F0            <1>  and rsp, ~15
 23574 00012C04 E8(00000000)            	call printf
 23575                                  	LEAVE
    38 00012C09 C9                  <1>  leave
 23576 00012C0A 488B0424                	mov rax, qword [rsp]
 23577 00012C0E 488B5C2410              	mov rbx, qword [rsp + 8*2]
 23578 00012C13 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 23579 00012C18 E8B2FCFFFF              	call print_sexpr
 23580 00012C1D 48FF0424                	inc qword [rsp]
 23581 00012C21 EBBF                    	jmp .Lvector_loop
 23582                                  
 23583                                  .Lvector_end:
 23584 00012C23 4883C418                	add rsp, 8*3
 23585 00012C27 48BF-                   	mov rdi, fmt_rparen
 23585 00012C29 [AF03000000000000] 
 23586 00012C31 E9F8010000              	jmp .Lemit	
 23587                                  
 23588                                  .Lvector_empty:
 23589 00012C36 48BF-                   	mov rdi, fmt_empty_vector
 23589 00012C38 [B303000000000000] 
 23590 00012C40 E9E9010000              	jmp .Lemit
 23591                                  
 23592                                  .Lreal:
 23593 00012C45 FF7701                  	push qword [rdi + 1]
 23594 00012C48 F20F100424              	movsd xmm0, qword [rsp]
 23595 00012C4D 4883C408                	add rsp, 8*1
 23596 00012C51 48BF-                   	mov rdi, fmt_real
 23596 00012C53 [BA03000000000000] 
 23597 00012C5B B801000000              	mov rax, 1
 23598                                  	ENTER
    33 00012C60 C8000000            <1>  enter 0, 0
    34 00012C64 4883E4F0            <1>  and rsp, ~15
 23599 00012C68 E8(00000000)            	call printf
 23600                                  	LEAVE
    38 00012C6D C9                  <1>  leave
 23601 00012C6E E9D0010000              	jmp .Lend
 23602                                  
 23603                                  .Lrational:
 23604 00012C73 488B7701                	mov rsi, qword [rdi + 1]
 23605 00012C77 488B5709                	mov rdx, qword [rdi + 1 + 8]
 23606 00012C7B 4883FE00                	cmp rsi, 0
 23607 00012C7F 7415                    	je .Lrat_zero
 23608 00012C81 4883FA01                	cmp rdx, 1
 23609 00012C85 741E                    	je .Lrat_int
 23610 00012C87 48BF-                   	mov rdi, fmt_fraction
 23610 00012C89 [BD03000000000000] 
 23611 00012C91 E998010000              	jmp .Lemit
 23612                                  
 23613                                  .Lrat_zero:
 23614 00012C96 48BF-                   	mov rdi, fmt_zero
 23614 00012C98 [C503000000000000] 
 23615 00012CA0 E989010000              	jmp .Lemit
 23616                                  
 23617                                  .Lrat_int:
 23618 00012CA5 48BF-                   	mov rdi, fmt_int
 23618 00012CA7 [C703000000000000] 
 23619 00012CAF E97A010000              	jmp .Lemit
 23620                                  
 23621                                  .Lstring:
 23622 00012CB4 488D4709                	lea rax, [rdi + 1 + 8]
 23623 00012CB8 50                      	push rax
 23624 00012CB9 FF7701                  	push qword [rdi + 1]
 23625 00012CBC 48BF-                   	mov rdi, fmt_dquote
 23625 00012CBE [0B04000000000000] 
 23626 00012CC6 B800000000              	mov rax, 0
 23627                                  	ENTER
    33 00012CCB C8000000            <1>  enter 0, 0
    34 00012CCF 4883E4F0            <1>  and rsp, ~15
 23628 00012CD3 E8(00000000)            	call printf
 23629                                  	LEAVE
    38 00012CD8 C9                  <1>  leave
 23630                                  .Lstring_loop:
 23631                                  	; qword [rsp]: limit
 23632                                  	; qword [rsp + 8*1]: char *
 23633 00012CD9 48833C2400              	cmp qword [rsp], 0
 23634 00012CDE 0F84FD000000            	je .Lstring_end
 23635 00012CE4 488B442408              	mov rax, qword [rsp + 8*1]
 23636 00012CE9 8A00                    	mov al, byte [rax]
 23637 00012CEB 4825FF000000            	and rax, 255
 23638 00012CF1 3C07                    	cmp al, 7
 23639 00012CF3 7468                            je .Lstring_char_7
 23640 00012CF5 3C08                            cmp al, 8
 23641 00012CF7 7470                            je .Lstring_char_8
 23642 00012CF9 3C09                            cmp al, 9
 23643 00012CFB 7478                            je .Lstring_char_9
 23644 00012CFD 3C0A                            cmp al, 10
 23645 00012CFF 0F847C000000                    je .Lstring_char_10
 23646 00012D05 3C0B                            cmp al, 11
 23647 00012D07 0F8480000000                    je .Lstring_char_11
 23648 00012D0D 3C0C                            cmp al, 12
 23649 00012D0F 0F8484000000                    je .Lstring_char_12
 23650 00012D15 3C0D                            cmp al, 13
 23651 00012D17 0F8488000000                    je .Lstring_char_13
 23652 00012D1D 3C22                            cmp al, 34
 23653 00012D1F 0F848C000000                    je .Lstring_char_34
 23654 00012D25 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 23656 00012D27 3C20                            cmp al, ' '
 23657 00012D29 0F8CA0000000                    jl .Lstring_char_hex
 23658 00012D2F 48BF-                           mov rdi, fmt_string_char
 23658 00012D31 [0D04000000000000] 
 23659 00012D39 4889C6                          mov rsi, rax
 23660                                  .Lstring_char_emit:
 23661 00012D3C B800000000                      mov rax, 0
 23662                                          ENTER
    33 00012D41 C8000000            <1>  enter 0, 0
    34 00012D45 4883E4F0            <1>  and rsp, ~15
 23663 00012D49 E8(00000000)                    call printf
 23664                                          LEAVE
    38 00012D4E C9                  <1>  leave
 23665 00012D4F 48FF0C24                        dec qword [rsp]
 23666 00012D53 48FF442408                      inc qword [rsp + 8*1]
 23667 00012D58 E97CFFFFFF                      jmp .Lstring_loop
 23668                                  
 23669                                  .Lstring_char_7:
 23670 00012D5D 48BF-                           mov rdi, fmt_string_char_7
 23670 00012D5F [1004000000000000] 
 23671 00012D67 EBD3                            jmp .Lstring_char_emit
 23672                                  
 23673                                  .Lstring_char_8:
 23674 00012D69 48BF-                           mov rdi, fmt_string_char_8
 23674 00012D6B [1304000000000000] 
 23675 00012D73 EBC7                            jmp .Lstring_char_emit
 23676                                          
 23677                                  .Lstring_char_9:
 23678 00012D75 48BF-                           mov rdi, fmt_string_char_9
 23678 00012D77 [1604000000000000] 
 23679 00012D7F EBBB                            jmp .Lstring_char_emit
 23680                                  
 23681                                  .Lstring_char_10:
 23682 00012D81 48BF-                           mov rdi, fmt_string_char_10
 23682 00012D83 [1904000000000000] 
 23683 00012D8B EBAF                            jmp .Lstring_char_emit
 23684                                  
 23685                                  .Lstring_char_11:
 23686 00012D8D 48BF-                           mov rdi, fmt_string_char_11
 23686 00012D8F [1C04000000000000] 
 23687 00012D97 EBA3                            jmp .Lstring_char_emit
 23688                                  
 23689                                  .Lstring_char_12:
 23690 00012D99 48BF-                           mov rdi, fmt_string_char_12
 23690 00012D9B [1F04000000000000] 
 23691 00012DA3 EB97                            jmp .Lstring_char_emit
 23692                                  
 23693                                  .Lstring_char_13:
 23694 00012DA5 48BF-                           mov rdi, fmt_string_char_13
 23694 00012DA7 [2204000000000000] 
 23695 00012DAF EB8B                            jmp .Lstring_char_emit
 23696                                  
 23697                                  .Lstring_char_34:
 23698 00012DB1 48BF-                           mov rdi, fmt_string_char_34
 23698 00012DB3 [2504000000000000] 
 23699 00012DBB E97CFFFFFF                      jmp .Lstring_char_emit
 23700                                  
 23701                                  .Lstring_char_92:
 23702 00012DC0 48BF-                           mov rdi, fmt_string_char_92
 23702 00012DC2 [2804000000000000] 
 23703 00012DCA E96DFFFFFF                      jmp .Lstring_char_emit
 23704                                  
 23705                                  .Lstring_char_hex:
 23706 00012DCF 48BF-                           mov rdi, fmt_string_char_hex
 23706 00012DD1 [2B04000000000000] 
 23707 00012DD9 4889C6                          mov rsi, rax
 23708 00012DDC E95BFFFFFF                      jmp .Lstring_char_emit        
 23709                                  
 23710                                  .Lstring_end:
 23711 00012DE1 4883C410                	add rsp, 8 * 2
 23712 00012DE5 48BF-                   	mov rdi, fmt_dquote
 23712 00012DE7 [0B04000000000000] 
 23713 00012DEF EB3D                    	jmp .Lemit
 23714                                  
 23715                                  .Lunknown_sexpr_type:
 23716 00012DF1 48BE-                   	mov rsi, fmt_unknown_sexpr_error
 23716 00012DF3 [CB03000000000000] 
 23717 00012DFB 4825FF000000            	and rax, 255
 23718 00012E01 4889C2                  	mov rdx, rax
 23719 00012E04 4889F9                  	mov rcx, rdi
 23720 00012E07 488B3C25[00000000]      	mov rdi, qword [stderr]
 23721 00012E0F B800000000              	mov rax, 0
 23722                                  	ENTER
    33 00012E14 C8000000            <1>  enter 0, 0
    34 00012E18 4883E4F0            <1>  and rsp, ~15
 23723 00012E1C E8(00000000)            	call fprintf
 23724                                  	LEAVE
    38 00012E21 C9                  <1>  leave
 23725 00012E22 48C7C0FFFFFFFF          	mov rax, -1
 23726 00012E29 E8(00000000)            	call exit
 23727                                  
 23728                                  .Lemit:
 23729 00012E2E B800000000              	mov rax, 0
 23730                                  	ENTER
    33 00012E33 C8000000            <1>  enter 0, 0
    34 00012E37 4883E4F0            <1>  and rsp, ~15
 23731 00012E3B E8(00000000)            	call printf
 23732                                  	LEAVE
    38 00012E40 C9                  <1>  leave
 23733 00012E41 EB00                    	jmp .Lend
 23734                                  
 23735                                  .Lend:
 23736                                  	LEAVE
    38 00012E43 C9                  <1>  leave
 23737 00012E44 C3                      	ret
 23738                                  
 23739                                  ;;; rdi: address of free variable
 23740                                  ;;; rsi: address of code-pointer
 23741                                  bind_primitive:
 23742                                          ENTER
    33 00012E45 C8000000            <1>  enter 0, 0
    34 00012E49 4883E4F0            <1>  and rsp, ~15
 23743 00012E4D 57                              push rdi
 23744 00012E4E BF11000000                      mov rdi, (1 + 8 + 8)
 23745 00012E53 E85CFAFFFF                      call malloc
 23746 00012E58 5F                              pop rdi
 23747 00012E59 C60005                          mov byte [rax], T_closure
 23748 00012E5C 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 23749 00012E64 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 23750 00012E68 488907                          mov qword [rdi], rax
 23751                                          LEAVE
    38 00012E6B C9                  <1>  leave
 23752 00012E6C C3                              ret
 23753                                  
 23754                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
 23755                                  L_code_ptr_bin_apply:
 23756 00012E6D C8000000                        enter 0,0
 23757                                          ; loop over the list and push all its members
 23758 00012E71 BE00000000                      mov rsi, 0
 23759 00012E76 488B5D18                        mov rbx, COUNT
 23760 00012E7A 48FFCB                          dec rbx
 23761 00012E7D 4883C304                        add rbx, 4
 23762 00012E81 48C1E303                        shl rbx, 3
 23763 00012E85 4801EB                          add rbx, rbp
 23764 00012E88 488B1B                          mov rbx, [rbx] ; rbx = [rbp + 8 * (4 + (COUNT-1))]
 23765                                  L_bin_apply_list_loop_start: ; start pushing list to stack
 23766 00012E8B 803B01                          cmp byte [rbx], T_nil
 23767 00012E8E 740C                            je L_bin_apply_list_loop_end
 23768 00012E90 48FFC6                          inc rsi
 23769 00012E93 FF7301                          push SOB_PAIR_CAR(rbx)
 23770 00012E96 488B5B09                        mov rbx, SOB_PAIR_CDR(rbx)
 23771 00012E9A EBEF                            jmp L_bin_apply_list_loop_start
 23772                                  L_bin_apply_list_loop_end: ; end pushing list to stack
 23773                                          ; flip the list on the stack
 23774 00012E9C BB00000000                      mov rbx, 0 ; index
 23775                                  L_bin_apply_list_flip_start:
 23776 00012EA1 4889F1                          mov rcx, rsi
 23777 00012EA4 48FFC9                          dec rcx
 23778 00012EA7 4829D9                          sub rcx, rbx ; rcx is the higher 
 23779 00012EAA 4829D9                          sub rcx, rbx
 23780 00012EAD 4883F900                        cmp rcx, 0
 23781 00012EB1 7E27                            jle L_bin_apply_list_flip_end
 23782 00012EB3 4801D9                          add rcx, rbx ; rcx is the relative higher. rbx is the relative lower
 23783 00012EB6 4889DF                          mov rdi, rbx
 23784 00012EB9 48C1E703                        shl rdi, 3
 23785 00012EBD 4801E7                          add rdi, rsp ; rdi is the absolute higher
 23786 00012EC0 488B07                          mov rax, [rdi] ; rdi = [rsp + 8*rsi] ->  rax is the absolute higher value
 23787 00012EC3 48C1E103                        shl rcx, 3
 23788 00012EC7 4801E1                          add rcx, rsp ; rcx = rsp + 8*(length-1-index) -> rcx is the absolute lower
 23789 00012ECA 53                              push rbx ; save rbx
 23790 00012ECB 488B19                          mov rbx, [rcx]
 23791 00012ECE 48891F                          mov [rdi], rbx ; [rsp + 8*rsi] = [rsp + 8*(length-1-index)]
 23792 00012ED1 488901                          mov [rcx], rax ; [rsp + 8*(length-1-index)] = [rsp + 8*rsi]
 23793 00012ED4 5B                              pop rbx ; restore rbx
 23794 00012ED5 48FFC3                          inc rbx
 23795 00012ED8 EBC7                            jmp L_bin_apply_list_flip_start
 23796                                  L_bin_apply_list_flip_end:
 23797                                          ; push all the rest of the arguments
 23798 00012EDA 488B4D18                        mov rcx, COUNT
 23799 00012EDE 4883E902                        sub rcx, 2
 23800                                  L_bin_apply_args_loop_start: ; start pushing the rest of args
 23801 00012EE2 4883F900                        cmp rcx, 0
 23802 00012EE6 741A                            je L_bin_apply_args_loop_end
 23803 00012EE8 48FFC6                          inc rsi ; for counting number of args
 23804 00012EEB 4889CB                          mov rbx, rcx
 23805 00012EEE 4883C304                        add rbx, 4
 23806 00012EF2 48C1E303                        shl rbx, 3
 23807 00012EF6 4801EB                          add rbx, rbp
 23808 00012EF9 488B1B                          mov rbx, [rbx] ; rbx = [rbp + 8 * (4 + rcx)]
 23809 00012EFC 53                              push rbx
 23810 00012EFD 48FFC9                          dec rcx
 23811 00012F00 EBE0                            jmp L_bin_apply_args_loop_start
 23812                                  L_bin_apply_args_loop_end:
 23813                                          ; push number of arguments
 23814 00012F02 56                              push rsi
 23815                                          ; push lex env
 23816 00012F03 488B4520                        mov rax, PARAM(0)
 23817 00012F07 FF7001                          push SOB_CLOSURE_ENV(rax)
 23818                                          ; push ret add
 23819 00012F0A FF7508                          push RET_ADDR
 23820                                          ; fix the stack
 23821                                          ; loop over the stack and move it to the top of the previos stack
 23822 00012F0D 4889F2                          mov rdx, rsi
 23823                                  
 23824 00012F10 488B7D18                        mov rdi, COUNT 
 23825 00012F14 4883C703                        add rdi, 3 ; rdi = COUNT + 3 = COUNT + (num_of_args, lex, ret)
 23826 00012F18 48C1E703                        shl rdi, 3
 23827 00012F1C 4801EF                          add rdi, rbp
 23828                                  
 23829 00012F1F 488B6D00                        mov rbp, OLD_RDP
 23830 00012F23 BE00000000                      mov rsi, 0
 23831                                  L_bin_apply_fix_stack_start:
 23832 00012F28 4889D1                          mov rcx, rdx
 23833 00012F2B 4883C103                        add rcx, 3
 23834 00012F2F 4839CE                          cmp rsi, rcx
 23835 00012F32 7429                            je L_bin_apply_fix_stack_end
 23836 00012F34 4889D1                          mov rcx, rdx 
 23837 00012F37 4883C102                        add rcx, 2 
 23838 00012F3B 4829F1                          sub rcx, rsi 
 23839 00012F3E 48C1E103                        shl rcx, 3
 23840 00012F42 4801E1                          add rcx, rsp ; rcx is the address to move.
 23841 00012F45 4889F3                          mov rbx, rsi
 23842 00012F48 48C1E303                        shl rbx, 3
 23843 00012F4C 48F7DB                          neg rbx
 23844 00012F4F 4801FB                          add rbx, rdi ; rbx is the address to move to.
 23845 00012F52 488B09                          mov rcx, [rcx]
 23846 00012F55 48890B                          mov [rbx], rcx
 23847 00012F58 48FFC6                          inc rsi
 23848 00012F5B EBCB                            jmp L_bin_apply_fix_stack_start
 23849                                  L_bin_apply_fix_stack_end:
 23850                                          ; fix rsp
 23851 00012F5D 4889D3                          mov rbx, rdx
 23852 00012F60 4883C302                        add rbx, 2
 23853 00012F64 48C1E303                        shl rbx, 3
 23854 00012F68 48F7DB                          neg rbx
 23855 00012F6B 4801FB                          add rbx, rdi
 23856 00012F6E 4889DC                          mov rsp, rbx
 23857 00012F71 488B5809                        mov rbx, SOB_CLOSURE_CODE(rax)
 23858 00012F75 FFE3                            jmp rbx
 23859                                  	
 23860                                  L_code_ptr_is_null:
 23861                                          ENTER
    33 00012F77 C8000000            <1>  enter 0, 0
    34 00012F7B 4883E4F0            <1>  and rsp, ~15
 23862 00012F7F 48837D1801                      cmp COUNT, 1
 23863 00012F84 0F85A5100000                    jne L_error_arg_count_1
 23864 00012F8A 488B4520                        mov rax, PARAM(0)
 23865 00012F8E 803801                          cmp byte [rax], T_nil
 23866 00012F91 750C                            jne .L_false
 23867 00012F93 48B8-                           mov rax, sob_boolean_true
 23867 00012F95 [0300000000000000] 
 23868 00012F9D EB0A                            jmp .L_end
 23869                                  .L_false:
 23870 00012F9F 48B8-                           mov rax, sob_boolean_false
 23870 00012FA1 [0200000000000000] 
 23871                                  .L_end:
 23872                                          LEAVE
    38 00012FA9 C9                  <1>  leave
 23873 00012FAA C21800                          ret AND_KILL_FRAME(1)
 23874                                  
 23875                                  L_code_ptr_is_pair:
 23876                                          ENTER
    33 00012FAD C8000000            <1>  enter 0, 0
    34 00012FB1 4883E4F0            <1>  and rsp, ~15
 23877 00012FB5 48837D1801                      cmp COUNT, 1
 23878 00012FBA 0F856F100000                    jne L_error_arg_count_1
 23879 00012FC0 488B4520                        mov rax, PARAM(0)
 23880 00012FC4 803821                          cmp byte [rax], T_pair
 23881 00012FC7 750C                            jne .L_false
 23882 00012FC9 48B8-                           mov rax, sob_boolean_true
 23882 00012FCB [0300000000000000] 
 23883 00012FD3 EB0A                            jmp .L_end
 23884                                  .L_false:
 23885 00012FD5 48B8-                           mov rax, sob_boolean_false
 23885 00012FD7 [0200000000000000] 
 23886                                  .L_end:
 23887                                          LEAVE
    38 00012FDF C9                  <1>  leave
 23888 00012FE0 C21800                          ret AND_KILL_FRAME(1)
 23889                                          
 23890                                  L_code_ptr_is_void:
 23891                                          ENTER
    33 00012FE3 C8000000            <1>  enter 0, 0
    34 00012FE7 4883E4F0            <1>  and rsp, ~15
 23892 00012FEB 48837D1801                      cmp COUNT, 1
 23893 00012FF0 0F8539100000                    jne L_error_arg_count_1
 23894 00012FF6 488B4520                        mov rax, PARAM(0)
 23895 00012FFA 803800                          cmp byte [rax], T_void
 23896 00012FFD 750C                            jne .L_false
 23897 00012FFF 48B8-                           mov rax, sob_boolean_true
 23897 00013001 [0300000000000000] 
 23898 00013009 EB0A                            jmp .L_end
 23899                                  .L_false:
 23900 0001300B 48B8-                           mov rax, sob_boolean_false
 23900 0001300D [0200000000000000] 
 23901                                  .L_end:
 23902                                          LEAVE
    38 00013015 C9                  <1>  leave
 23903 00013016 C21800                          ret AND_KILL_FRAME(1)
 23904                                  
 23905                                  L_code_ptr_is_char:
 23906                                          ENTER
    33 00013019 C8000000            <1>  enter 0, 0
    34 0001301D 4883E4F0            <1>  and rsp, ~15
 23907 00013021 48837D1801                      cmp COUNT, 1
 23908 00013026 0F8503100000                    jne L_error_arg_count_1
 23909 0001302C 488B4520                        mov rax, PARAM(0)
 23910 00013030 803802                          cmp byte [rax], T_char
 23911 00013033 750C                            jne .L_false
 23912 00013035 48B8-                           mov rax, sob_boolean_true
 23912 00013037 [0300000000000000] 
 23913 0001303F EB0A                            jmp .L_end
 23914                                  .L_false:
 23915 00013041 48B8-                           mov rax, sob_boolean_false
 23915 00013043 [0200000000000000] 
 23916                                  .L_end:
 23917                                          LEAVE
    38 0001304B C9                  <1>  leave
 23918 0001304C C21800                          ret AND_KILL_FRAME(1)
 23919                                  
 23920                                  L_code_ptr_is_string:
 23921                                          ENTER
    33 0001304F C8000000            <1>  enter 0, 0
    34 00013053 4883E4F0            <1>  and rsp, ~15
 23922 00013057 48837D1801                      cmp COUNT, 1
 23923 0001305C 0F85CD0F0000                    jne L_error_arg_count_1
 23924 00013062 488B4520                        mov rax, PARAM(0)
 23925 00013066 803803                          cmp byte [rax], T_string
 23926 00013069 750C                            jne .L_false
 23927 0001306B 48B8-                           mov rax, sob_boolean_true
 23927 0001306D [0300000000000000] 
 23928 00013075 EB0A                            jmp .L_end
 23929                                  .L_false:
 23930 00013077 48B8-                           mov rax, sob_boolean_false
 23930 00013079 [0200000000000000] 
 23931                                  .L_end:
 23932                                          LEAVE
    38 00013081 C9                  <1>  leave
 23933 00013082 C21800                          ret AND_KILL_FRAME(1)
 23934                                  
 23935                                  L_code_ptr_is_symbol:
 23936                                          ENTER
    33 00013085 C8000000            <1>  enter 0, 0
    34 00013089 4883E4F0            <1>  and rsp, ~15
 23937 0001308D 48837D1801                      cmp COUNT, 1
 23938 00013092 0F85970F0000                    jne L_error_arg_count_1
 23939 00013098 488B4520                        mov rax, PARAM(0)
 23940 0001309C 803804                          cmp byte [rax], T_symbol
 23941 0001309F 750C                            jne .L_false
 23942 000130A1 48B8-                           mov rax, sob_boolean_true
 23942 000130A3 [0300000000000000] 
 23943 000130AB EB0A                            jmp .L_end
 23944                                  .L_false:
 23945 000130AD 48B8-                           mov rax, sob_boolean_false
 23945 000130AF [0200000000000000] 
 23946                                  .L_end:
 23947                                          LEAVE
    38 000130B7 C9                  <1>  leave
 23948 000130B8 C21800                          ret AND_KILL_FRAME(1)
 23949                                  
 23950                                  L_code_ptr_is_vector:
 23951                                          ENTER
    33 000130BB C8000000            <1>  enter 0, 0
    34 000130BF 4883E4F0            <1>  and rsp, ~15
 23952 000130C3 48837D1801                      cmp COUNT, 1
 23953 000130C8 0F85610F0000                    jne L_error_arg_count_1
 23954 000130CE 488B4520                        mov rax, PARAM(0)
 23955 000130D2 803822                          cmp byte [rax], T_vector
 23956 000130D5 750C                            jne .L_false
 23957 000130D7 48B8-                           mov rax, sob_boolean_true
 23957 000130D9 [0300000000000000] 
 23958 000130E1 EB0A                            jmp .L_end
 23959                                  .L_false:
 23960 000130E3 48B8-                           mov rax, sob_boolean_false
 23960 000130E5 [0200000000000000] 
 23961                                  .L_end:
 23962                                          LEAVE
    38 000130ED C9                  <1>  leave
 23963 000130EE C21800                          ret AND_KILL_FRAME(1)
 23964                                  
 23965                                  L_code_ptr_is_closure:
 23966                                          ENTER
    33 000130F1 C8000000            <1>  enter 0, 0
    34 000130F5 4883E4F0            <1>  and rsp, ~15
 23967 000130F9 48837D1801                      cmp COUNT, 1
 23968 000130FE 0F852B0F0000                    jne L_error_arg_count_1
 23969 00013104 488B4520                        mov rax, PARAM(0)
 23970 00013108 803805                          cmp byte [rax], T_closure
 23971 0001310B 750C                            jne .L_false
 23972 0001310D 48B8-                           mov rax, sob_boolean_true
 23972 0001310F [0300000000000000] 
 23973 00013117 EB0A                            jmp .L_end
 23974                                  .L_false:
 23975 00013119 48B8-                           mov rax, sob_boolean_false
 23975 0001311B [0200000000000000] 
 23976                                  .L_end:
 23977                                          LEAVE
    38 00013123 C9                  <1>  leave
 23978 00013124 C21800                          ret AND_KILL_FRAME(1)
 23979                                  
 23980                                  L_code_ptr_is_real:
 23981                                          ENTER
    33 00013127 C8000000            <1>  enter 0, 0
    34 0001312B 4883E4F0            <1>  and rsp, ~15
 23982 0001312F 48837D1801                      cmp COUNT, 1
 23983 00013134 0F85F50E0000                    jne L_error_arg_count_1
 23984 0001313A 488B4520                        mov rax, PARAM(0)
 23985 0001313E 803812                          cmp byte [rax], T_real
 23986 00013141 750C                            jne .L_false
 23987 00013143 48B8-                           mov rax, sob_boolean_true
 23987 00013145 [0300000000000000] 
 23988 0001314D EB0A                            jmp .L_end
 23989                                  .L_false:
 23990 0001314F 48B8-                           mov rax, sob_boolean_false
 23990 00013151 [0200000000000000] 
 23991                                  .L_end:
 23992                                          LEAVE
    38 00013159 C9                  <1>  leave
 23993 0001315A C21800                          ret AND_KILL_FRAME(1)
 23994                                  
 23995                                  L_code_ptr_is_rational:
 23996                                          ENTER
    33 0001315D C8000000            <1>  enter 0, 0
    34 00013161 4883E4F0            <1>  and rsp, ~15
 23997 00013165 48837D1801                      cmp COUNT, 1
 23998 0001316A 0F85BF0E0000                    jne L_error_arg_count_1
 23999 00013170 488B4520                        mov rax, PARAM(0)
 24000 00013174 803811                          cmp byte [rax], T_rational
 24001 00013177 750C                            jne .L_false
 24002 00013179 48B8-                           mov rax, sob_boolean_true
 24002 0001317B [0300000000000000] 
 24003 00013183 EB0A                            jmp .L_end
 24004                                  .L_false:
 24005 00013185 48B8-                           mov rax, sob_boolean_false
 24005 00013187 [0200000000000000] 
 24006                                  .L_end:
 24007                                          LEAVE
    38 0001318F C9                  <1>  leave
 24008 00013190 C21800                          ret AND_KILL_FRAME(1)
 24009                                  
 24010                                  L_code_ptr_is_boolean:
 24011                                          ENTER
    33 00013193 C8000000            <1>  enter 0, 0
    34 00013197 4883E4F0            <1>  and rsp, ~15
 24012 0001319B 48837D1801                      cmp COUNT, 1
 24013 000131A0 0F85890E0000                    jne L_error_arg_count_1
 24014 000131A6 488B4520                        mov rax, PARAM(0)
 24015 000131AA 8A18                            mov bl, byte [rax]
 24016 000131AC 80E308                          and bl, T_boolean
 24017 000131AF 740C                            je .L_false
 24018 000131B1 48B8-                           mov rax, sob_boolean_true
 24018 000131B3 [0300000000000000] 
 24019 000131BB EB0A                            jmp .L_end
 24020                                  .L_false:
 24021 000131BD 48B8-                           mov rax, sob_boolean_false
 24021 000131BF [0200000000000000] 
 24022                                  .L_end:
 24023                                          LEAVE
    38 000131C7 C9                  <1>  leave
 24024 000131C8 C21800                          ret AND_KILL_FRAME(1)
 24025                                          
 24026                                  L_code_ptr_is_number:
 24027                                          ENTER
    33 000131CB C8000000            <1>  enter 0, 0
    34 000131CF 4883E4F0            <1>  and rsp, ~15
 24028 000131D3 48837D1801                      cmp COUNT, 1
 24029 000131D8 0F85510E0000                    jne L_error_arg_count_1
 24030 000131DE 488B4520                        mov rax, PARAM(0)
 24031 000131E2 8A18                            mov bl, byte [rax]
 24032 000131E4 80E310                          and bl, T_number
 24033 000131E7 740C                            je .L_false
 24034 000131E9 48B8-                           mov rax, sob_boolean_true
 24034 000131EB [0300000000000000] 
 24035 000131F3 EB0A                            jmp .L_end
 24036                                  .L_false:
 24037 000131F5 48B8-                           mov rax, sob_boolean_false
 24037 000131F7 [0200000000000000] 
 24038                                  .L_end:
 24039                                          LEAVE
    38 000131FF C9                  <1>  leave
 24040 00013200 C21800                          ret AND_KILL_FRAME(1)
 24041                                          
 24042                                  L_code_ptr_is_collection:
 24043                                          ENTER
    33 00013203 C8000000            <1>  enter 0, 0
    34 00013207 4883E4F0            <1>  and rsp, ~15
 24044 0001320B 48837D1801                      cmp COUNT, 1
 24045 00013210 0F85190E0000                    jne L_error_arg_count_1
 24046 00013216 488B4520                        mov rax, PARAM(0)
 24047 0001321A 8A18                            mov bl, byte [rax]
 24048 0001321C 80E320                          and bl, T_collection
 24049 0001321F 740C                            je .L_false
 24050 00013221 48B8-                           mov rax, sob_boolean_true
 24050 00013223 [0300000000000000] 
 24051 0001322B EB0A                            jmp .L_end
 24052                                  .L_false:
 24053 0001322D 48B8-                           mov rax, sob_boolean_false
 24053 0001322F [0200000000000000] 
 24054                                  .L_end:
 24055                                          LEAVE
    38 00013237 C9                  <1>  leave
 24056 00013238 C21800                          ret AND_KILL_FRAME(1)
 24057                                  
 24058                                  L_code_ptr_cons:
 24059                                          ENTER
    33 0001323B C8000000            <1>  enter 0, 0
    34 0001323F 4883E4F0            <1>  and rsp, ~15
 24060 00013243 48837D1802                      cmp COUNT, 2
 24061 00013248 0F85160E0000                    jne L_error_arg_count_2
 24062 0001324E BF11000000                      mov rdi, (1 + 8 + 8)
 24063 00013253 E85CF6FFFF                      call malloc
 24064 00013258 C60021                          mov byte [rax], T_pair
 24065 0001325B 488B5D20                        mov rbx, PARAM(0)
 24066 0001325F 48895801                        mov SOB_PAIR_CAR(rax), rbx
 24067 00013263 488B5D28                        mov rbx, PARAM(1)
 24068 00013267 48895809                        mov SOB_PAIR_CDR(rax), rbx
 24069                                          LEAVE
    38 0001326B C9                  <1>  leave
 24070 0001326C C22000                          ret AND_KILL_FRAME(2)
 24071                                  
 24072                                  L_code_ptr_display_sexpr:
 24073                                          ENTER
    33 0001326F C8000000            <1>  enter 0, 0
    34 00013273 4883E4F0            <1>  and rsp, ~15
 24074 00013277 48837D1801                      cmp COUNT, 1
 24075 0001327C 0F85AD0D0000                    jne L_error_arg_count_1
 24076 00013282 488B7D20                        mov rdi, PARAM(0)
 24077 00013286 E844F6FFFF                      call print_sexpr
 24078 0001328B 48B8-                           mov rax, sob_void
 24078 0001328D [0000000000000000] 
 24079                                          LEAVE
    38 00013295 C9                  <1>  leave
 24080 00013296 C21800                          ret AND_KILL_FRAME(1)
 24081                                  
 24082                                  L_code_ptr_write_char:
 24083                                          ENTER
    33 00013299 C8000000            <1>  enter 0, 0
    34 0001329D 4883E4F0            <1>  and rsp, ~15
 24084 000132A1 48837D1801                      cmp COUNT, 1
 24085 000132A6 0F85830D0000                    jne L_error_arg_count_1
 24086 000132AC 488B4520                        mov rax, PARAM(0)
 24087                                          assert_char(rax)
    42 000132B0 803802              <1>  cmp byte [%1], %2
    43 000132B3 0F857B0E0000        <1>  jne L_error_incorrect_type
 24088 000132B9 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 24089 000132BC 4825FF000000                    and rax, 255
 24090 000132C2 48BF-                           mov rdi, fmt_char
 24090 000132C4 [3104000000000000] 
 24091 000132CC 4889C6                          mov rsi, rax
 24092 000132CF B800000000                      mov rax, 0
 24093                                  	ENTER
    33 000132D4 C8000000            <1>  enter 0, 0
    34 000132D8 4883E4F0            <1>  and rsp, ~15
 24094 000132DC E8(00000000)                    call printf
 24095                                  	LEAVE
    38 000132E1 C9                  <1>  leave
 24096 000132E2 48B8-                           mov rax, sob_void
 24096 000132E4 [0000000000000000] 
 24097                                          LEAVE
    38 000132EC C9                  <1>  leave
 24098 000132ED C21800                          ret AND_KILL_FRAME(1)
 24099                                  
 24100                                  L_code_ptr_car:
 24101                                          ENTER
    33 000132F0 C8000000            <1>  enter 0, 0
    34 000132F4 4883E4F0            <1>  and rsp, ~15
 24102 000132F8 48837D1801                      cmp COUNT, 1
 24103 000132FD 0F852C0D0000                    jne L_error_arg_count_1
 24104 00013303 488B4520                        mov rax, PARAM(0)
 24105                                          assert_pair(rax)
    42 00013307 803821              <1>  cmp byte [%1], %2
    43 0001330A 0F85240E0000        <1>  jne L_error_incorrect_type
 24106 00013310 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 24107                                          LEAVE
    38 00013314 C9                  <1>  leave
 24108 00013315 C21800                          ret AND_KILL_FRAME(1)
 24109                                          
 24110                                  L_code_ptr_cdr:
 24111                                          ENTER
    33 00013318 C8000000            <1>  enter 0, 0
    34 0001331C 4883E4F0            <1>  and rsp, ~15
 24112 00013320 48837D1801                      cmp COUNT, 1
 24113 00013325 0F85040D0000                    jne L_error_arg_count_1
 24114 0001332B 488B4520                        mov rax, PARAM(0)
 24115                                          assert_pair(rax)
    42 0001332F 803821              <1>  cmp byte [%1], %2
    43 00013332 0F85FC0D0000        <1>  jne L_error_incorrect_type
 24116 00013338 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 24117                                          LEAVE
    38 0001333C C9                  <1>  leave
 24118 0001333D C21800                          ret AND_KILL_FRAME(1)
 24119                                          
 24120                                  L_code_ptr_string_length:
 24121                                          ENTER
    33 00013340 C8000000            <1>  enter 0, 0
    34 00013344 4883E4F0            <1>  and rsp, ~15
 24122 00013348 48837D1801                      cmp COUNT, 1
 24123 0001334D 0F85DC0C0000                    jne L_error_arg_count_1
 24124 00013353 488B4520                        mov rax, PARAM(0)
 24125                                          assert_string(rax)
    42 00013357 803803              <1>  cmp byte [%1], %2
    43 0001335A 0F85D40D0000        <1>  jne L_error_incorrect_type
 24126 00013360 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 24127 00013364 E83A0C0000                      call make_integer
 24128                                          LEAVE
    38 00013369 C9                  <1>  leave
 24129 0001336A C21800                          ret AND_KILL_FRAME(1)
 24130                                  
 24131                                  L_code_ptr_vector_length:
 24132                                          ENTER
    33 0001336D C8000000            <1>  enter 0, 0
    34 00013371 4883E4F0            <1>  and rsp, ~15
 24133 00013375 48837D1801                      cmp COUNT, 1
 24134 0001337A 0F85AF0C0000                    jne L_error_arg_count_1
 24135 00013380 488B4520                        mov rax, PARAM(0)
 24136                                          assert_vector(rax)
    42 00013384 803822              <1>  cmp byte [%1], %2
    43 00013387 0F85A70D0000        <1>  jne L_error_incorrect_type
 24137 0001338D 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 24138 00013391 E80D0C0000                      call make_integer
 24139                                          LEAVE
    38 00013396 C9                  <1>  leave
 24140 00013397 C21800                          ret AND_KILL_FRAME(1)
 24141                                  
 24142                                  L_code_ptr_real_to_integer:
 24143                                          ENTER
    33 0001339A C8000000            <1>  enter 0, 0
    34 0001339E 4883E4F0            <1>  and rsp, ~15
 24144 000133A2 48837D1801                      cmp COUNT, 1
 24145 000133A7 0F85820C0000                    jne L_error_arg_count_1
 24146 000133AD 488B5D20                        mov rbx, PARAM(0)
 24147                                          assert_real(rbx)
    42 000133B1 803B12              <1>  cmp byte [%1], %2
    43 000133B4 0F857A0D0000        <1>  jne L_error_incorrect_type
 24148 000133BA F20F104301                      movsd xmm0, qword [rbx + 1]
 24149 000133BF F2480F2CF8                      cvttsd2si rdi, xmm0
 24150 000133C4 E8DA0B0000                      call make_integer
 24151                                          LEAVE
    38 000133C9 C9                  <1>  leave
 24152 000133CA C21800                          ret AND_KILL_FRAME(1)
 24153                                  
 24154                                  L_code_ptr_exit:
 24155                                          ENTER
    33 000133CD C8000000            <1>  enter 0, 0
    34 000133D1 4883E4F0            <1>  and rsp, ~15
 24156 000133D5 48837D1800                      cmp COUNT, 0
 24157 000133DA 0F851A0C0000                    jne L_error_arg_count_0
 24158 000133E0 B800000000                      mov rax, 0
 24159 000133E5 E8(00000000)                    call exit
 24160                                  
 24161                                  L_code_ptr_integer_to_real:
 24162                                          ENTER
    33 000133EA C8000000            <1>  enter 0, 0
    34 000133EE 4883E4F0            <1>  and rsp, ~15
 24163 000133F2 48837D1801                      cmp COUNT, 1
 24164 000133F7 0F85320C0000                    jne L_error_arg_count_1
 24165 000133FD 488B4520                        mov rax, PARAM(0)
 24166                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00013401 803811              <2>  cmp byte [%1], %2
    43 00013404 0F852A0D0000        <2>  jne L_error_incorrect_type
    48 0001340A 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0001340F 0F851F0D0000        <1>  jne L_error_incorrect_type
 24167 00013415 FF7001                          push qword [rax + 1]
 24168 00013418 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 24169 0001341E E8640B0000                      call make_real
 24170                                          LEAVE
    38 00013423 C9                  <1>  leave
 24171 00013424 C21800                          ret AND_KILL_FRAME(1)
 24172                                  
 24173                                  L_code_ptr_rational_to_real:
 24174                                          ENTER
    33 00013427 C8000000            <1>  enter 0, 0
    34 0001342B 4883E4F0            <1>  and rsp, ~15
 24175 0001342F 48837D1801                      cmp COUNT, 1
 24176 00013434 0F85F50B0000                    jne L_error_arg_count_1
 24177 0001343A 488B4520                        mov rax, PARAM(0)
 24178                                          assert_rational(rax)
    42 0001343E 803811              <1>  cmp byte [%1], %2
    43 00013441 0F85ED0C0000        <1>  jne L_error_incorrect_type
 24179 00013447 FF7001                          push qword [rax + 1]
 24180 0001344A F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 24181 00013450 FF7009                          push qword [rax + 1 + 8]
 24182 00013453 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 24183 00013459 F20F5EC1                        divsd xmm0, xmm1
 24184 0001345D E8250B0000                      call make_real
 24185                                          LEAVE
    38 00013462 C9                  <1>  leave
 24186 00013463 C21800                          ret AND_KILL_FRAME(1)
 24187                                  
 24188                                  L_code_ptr_char_to_integer:
 24189                                          ENTER
    33 00013466 C8000000            <1>  enter 0, 0
    34 0001346A 4883E4F0            <1>  and rsp, ~15
 24190 0001346E 48837D1801                      cmp COUNT, 1
 24191 00013473 0F85B60B0000                    jne L_error_arg_count_1
 24192 00013479 488B4520                        mov rax, PARAM(0)
 24193                                          assert_char(rax)
    42 0001347D 803802              <1>  cmp byte [%1], %2
    43 00013480 0F85AE0C0000        <1>  jne L_error_incorrect_type
 24194 00013486 8A4001                          mov al, byte [rax + 1]
 24195 00013489 4825FF000000                    and rax, 255
 24196 0001348F 4889C7                          mov rdi, rax
 24197 00013492 E80C0B0000                      call make_integer
 24198                                          LEAVE
    38 00013497 C9                  <1>  leave
 24199 00013498 C21800                          ret AND_KILL_FRAME(1)
 24200                                  
 24201                                  L_code_ptr_integer_to_char:
 24202                                          ENTER
    33 0001349B C8000000            <1>  enter 0, 0
    34 0001349F 4883E4F0            <1>  and rsp, ~15
 24203 000134A3 48837D1801                      cmp COUNT, 1
 24204 000134A8 0F85810B0000                    jne L_error_arg_count_1
 24205 000134AE 488B4520                        mov rax, PARAM(0)
 24206                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000134B2 803811              <2>  cmp byte [%1], %2
    43 000134B5 0F85790C0000        <2>  jne L_error_incorrect_type
    48 000134BB 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000134C0 0F856E0C0000        <1>  jne L_error_incorrect_type
 24207 000134C6 488B5801                        mov rbx, qword [rax + 1]
 24208 000134CA 4883FB00                        cmp rbx, 0
 24209 000134CE 0F8EF50A0000                    jle L_error_integer_range
 24210 000134D4 4881FB00010000                  cmp rbx, 256
 24211 000134DB 0F8DE80A0000                    jge L_error_integer_range
 24212 000134E1 BF02000000                      mov rdi, (1 + 1)
 24213 000134E6 E8C9F3FFFF                      call malloc
 24214 000134EB C60002                          mov byte [rax], T_char
 24215 000134EE 885801                          mov byte [rax + 1], bl
 24216                                          LEAVE
    38 000134F1 C9                  <1>  leave
 24217 000134F2 C21800                          ret AND_KILL_FRAME(1)
 24218                                  
 24219                                  L_code_ptr_trng:
 24220                                          ENTER
    33 000134F5 C8000000            <1>  enter 0, 0
    34 000134F9 4883E4F0            <1>  and rsp, ~15
 24221 000134FD 48837D1800                      cmp COUNT, 0
 24222 00013502 0F85F20A0000                    jne L_error_arg_count_0
 24223 00013508 480FC7F7                        rdrand rdi
 24224 0001350C 48D1EF                          shr rdi, 1
 24225 0001350F E88F0A0000                      call make_integer
 24226                                          LEAVE
    38 00013514 C9                  <1>  leave
 24227 00013515 C21000                          ret AND_KILL_FRAME(0)
 24228                                  
 24229                                  L_code_ptr_is_zero:
 24230                                          ENTER
    33 00013518 C8000000            <1>  enter 0, 0
    34 0001351C 4883E4F0            <1>  and rsp, ~15
 24231 00013520 48837D1801                      cmp COUNT, 1
 24232 00013525 0F85040B0000                    jne L_error_arg_count_1
 24233 0001352B 488B4520                        mov rax, PARAM(0)
 24234 0001352F 803811                          cmp byte [rax], T_rational
 24235 00013532 740A                            je .L_rational
 24236 00013534 803812                          cmp byte [rax], T_real
 24237 00013537 740E                            je .L_real
 24238 00013539 E9F60B0000                      jmp L_error_incorrect_type
 24239                                  .L_rational:
 24240 0001353E 4883780100                      cmp qword [rax + 1], 0
 24241 00013543 7420                            je .L_zero
 24242 00013545 EB12                            jmp .L_not_zero
 24243                                  .L_real:
 24244 00013547 660FEFC0                        pxor xmm0, xmm0
 24245 0001354B FF7001                          push qword [rax + 1]
 24246 0001354E F20F100C24                      movsd xmm1, qword [rsp]
 24247 00013553 660F2EC1                        ucomisd xmm0, xmm1
 24248 00013557 740C                            je .L_zero
 24249                                  .L_not_zero:
 24250 00013559 48B8-                           mov rax, sob_boolean_false
 24250 0001355B [0200000000000000] 
 24251 00013563 EB0A                            jmp .L_end
 24252                                  .L_zero:
 24253 00013565 48B8-                           mov rax, sob_boolean_true
 24253 00013567 [0300000000000000] 
 24254                                  .L_end:
 24255                                          LEAVE
    38 0001356F C9                  <1>  leave
 24256 00013570 C21800                          ret AND_KILL_FRAME(1)
 24257                                  
 24258                                  L_code_ptr_is_integer:
 24259                                          ENTER
    33 00013573 C8000000            <1>  enter 0, 0
    34 00013577 4883E4F0            <1>  and rsp, ~15
 24260 0001357B 48837D1801                      cmp COUNT, 1
 24261 00013580 0F85A90A0000                    jne L_error_arg_count_1
 24262 00013586 488B4520                        mov rax, PARAM(0)
 24263 0001358A 803811                          cmp byte [rax], T_rational
 24264 0001358D 7513                            jne .L_false
 24265 0001358F 4883780901                      cmp qword [rax + 1 + 8], 1
 24266 00013594 750C                            jne .L_false
 24267 00013596 48B8-                           mov rax, sob_boolean_true
 24267 00013598 [0300000000000000] 
 24268 000135A0 EB0A                            jmp .L_exit
 24269                                  .L_false:
 24270 000135A2 48B8-                           mov rax, sob_boolean_false
 24270 000135A4 [0200000000000000] 
 24271                                  .L_exit:
 24272                                          LEAVE
    38 000135AC C9                  <1>  leave
 24273 000135AD C21800                          ret AND_KILL_FRAME(1)
 24274                                  
 24275                                  L_code_ptr_raw_bin_add_rr:
 24276                                          ENTER
    33 000135B0 C8000000            <1>  enter 0, 0
    34 000135B4 4883E4F0            <1>  and rsp, ~15
 24277 000135B8 48837D1802                      cmp COUNT, 2
 24278 000135BD 0F85A10A0000                    jne L_error_arg_count_2
 24279 000135C3 488B5D20                        mov rbx, PARAM(0)
 24280                                          assert_real(rbx)
    42 000135C7 803B12              <1>  cmp byte [%1], %2
    43 000135CA 0F85640B0000        <1>  jne L_error_incorrect_type
 24281 000135D0 488B4D28                        mov rcx, PARAM(1)
 24282                                          assert_real(rcx)
    42 000135D4 803912              <1>  cmp byte [%1], %2
    43 000135D7 0F85570B0000        <1>  jne L_error_incorrect_type
 24283 000135DD F20F104301                      movsd xmm0, qword [rbx + 1]
 24284 000135E2 F20F104901                      movsd xmm1, qword [rcx + 1]
 24285 000135E7 F20F58C1                        addsd xmm0, xmm1
 24286 000135EB E897090000                      call make_real
 24287                                          LEAVE
    38 000135F0 C9                  <1>  leave
 24288 000135F1 C22000                          ret AND_KILL_FRAME(2)
 24289                                  
 24290                                  L_code_ptr_raw_bin_sub_rr:
 24291                                          ENTER
    33 000135F4 C8000000            <1>  enter 0, 0
    34 000135F8 4883E4F0            <1>  and rsp, ~15
 24292 000135FC 48837D1802                      cmp COUNT, 2
 24293 00013601 0F855D0A0000                    jne L_error_arg_count_2
 24294 00013607 488B5D20                        mov rbx, PARAM(0)
 24295                                          assert_real(rbx)
    42 0001360B 803B12              <1>  cmp byte [%1], %2
    43 0001360E 0F85200B0000        <1>  jne L_error_incorrect_type
 24296 00013614 488B4D28                        mov rcx, PARAM(1)
 24297                                          assert_real(rcx)
    42 00013618 803912              <1>  cmp byte [%1], %2
    43 0001361B 0F85130B0000        <1>  jne L_error_incorrect_type
 24298 00013621 F20F104301                      movsd xmm0, qword [rbx + 1]
 24299 00013626 F20F104901                      movsd xmm1, qword [rcx + 1]
 24300 0001362B F20F5CC1                        subsd xmm0, xmm1
 24301 0001362F E853090000                      call make_real
 24302                                          LEAVE
    38 00013634 C9                  <1>  leave
 24303 00013635 C22000                          ret AND_KILL_FRAME(2)
 24304                                  
 24305                                  L_code_ptr_raw_bin_mul_rr:
 24306                                          ENTER
    33 00013638 C8000000            <1>  enter 0, 0
    34 0001363C 4883E4F0            <1>  and rsp, ~15
 24307 00013640 48837D1802                      cmp COUNT, 2
 24308 00013645 0F85190A0000                    jne L_error_arg_count_2
 24309 0001364B 488B5D20                        mov rbx, PARAM(0)
 24310                                          assert_real(rbx)
    42 0001364F 803B12              <1>  cmp byte [%1], %2
    43 00013652 0F85DC0A0000        <1>  jne L_error_incorrect_type
 24311 00013658 488B4D28                        mov rcx, PARAM(1)
 24312                                          assert_real(rcx)
    42 0001365C 803912              <1>  cmp byte [%1], %2
    43 0001365F 0F85CF0A0000        <1>  jne L_error_incorrect_type
 24313 00013665 F20F104301                      movsd xmm0, qword [rbx + 1]
 24314 0001366A F20F104901                      movsd xmm1, qword [rcx + 1]
 24315 0001366F F20F59C1                        mulsd xmm0, xmm1
 24316 00013673 E80F090000                      call make_real
 24317                                          LEAVE
    38 00013678 C9                  <1>  leave
 24318 00013679 C22000                          ret AND_KILL_FRAME(2)
 24319                                  
 24320                                  L_code_ptr_raw_bin_div_rr:
 24321                                          ENTER
    33 0001367C C8000000            <1>  enter 0, 0
    34 00013680 4883E4F0            <1>  and rsp, ~15
 24322 00013684 48837D1802                      cmp COUNT, 2
 24323 00013689 0F85D5090000                    jne L_error_arg_count_2
 24324 0001368F 488B5D20                        mov rbx, PARAM(0)
 24325                                          assert_real(rbx)
    42 00013693 803B12              <1>  cmp byte [%1], %2
    43 00013696 0F85980A0000        <1>  jne L_error_incorrect_type
 24326 0001369C 488B4D28                        mov rcx, PARAM(1)
 24327                                          assert_real(rcx)
    42 000136A0 803912              <1>  cmp byte [%1], %2
    43 000136A3 0F858B0A0000        <1>  jne L_error_incorrect_type
 24328 000136A9 F20F104301                      movsd xmm0, qword [rbx + 1]
 24329 000136AE F20F104901                      movsd xmm1, qword [rcx + 1]
 24330 000136B3 660FEFD2                        pxor xmm2, xmm2
 24331 000136B7 660F2ECA                        ucomisd xmm1, xmm2
 24332 000136BB 0F84A40A0000                    je L_error_division_by_zero
 24333 000136C1 F20F5EC1                        divsd xmm0, xmm1
 24334 000136C5 E8BD080000                      call make_real
 24335                                          LEAVE
    38 000136CA C9                  <1>  leave
 24336 000136CB C22000                          ret AND_KILL_FRAME(2)
 24337                                  
 24338                                  L_code_ptr_raw_bin_add_qq:
 24339                                          ENTER
    33 000136CE C8000000            <1>  enter 0, 0
    34 000136D2 4883E4F0            <1>  and rsp, ~15
 24340 000136D6 48837D1802                      cmp COUNT, 2
 24341 000136DB 0F8583090000                    jne L_error_arg_count_2
 24342 000136E1 4C8B4520                        mov r8, PARAM(0)
 24343                                          assert_rational(r8)
    42 000136E5 41803811            <1>  cmp byte [%1], %2
    43 000136E9 0F85450A0000        <1>  jne L_error_incorrect_type
 24344 000136EF 4C8B4D28                        mov r9, PARAM(1)
 24345                                          assert_rational(r9)
    42 000136F3 41803911            <1>  cmp byte [%1], %2
    43 000136F7 0F85370A0000        <1>  jne L_error_incorrect_type
 24346 000136FD 498B4001                        mov rax, qword [r8 + 1] ; num1
 24347 00013701 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 24348 00013705 4899                            cqo
 24349 00013707 48F7EB                          imul rbx
 24350 0001370A 4889C6                          mov rsi, rax
 24351 0001370D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24352 00013711 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 24353 00013715 4899                            cqo
 24354 00013717 48F7EB                          imul rbx
 24355 0001371A 4801C6                          add rsi, rax
 24356 0001371D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24357 00013721 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 24358 00013725 4899                            cqo
 24359 00013727 48F7EB                          imul rbx
 24360 0001372A 4889C7                          mov rdi, rax
 24361 0001372D E827010000                      call normalize_rational
 24362                                          LEAVE
    38 00013732 C9                  <1>  leave
 24363 00013733 C22000                          ret AND_KILL_FRAME(2)
 24364                                  
 24365                                  L_code_ptr_raw_bin_sub_qq:
 24366                                          ENTER
    33 00013736 C8000000            <1>  enter 0, 0
    34 0001373A 4883E4F0            <1>  and rsp, ~15
 24367 0001373E 48837D1802                      cmp COUNT, 2
 24368 00013743 0F851B090000                    jne L_error_arg_count_2
 24369 00013749 4C8B4520                        mov r8, PARAM(0)
 24370                                          assert_rational(r8)
    42 0001374D 41803811            <1>  cmp byte [%1], %2
    43 00013751 0F85DD090000        <1>  jne L_error_incorrect_type
 24371 00013757 4C8B4D28                        mov r9, PARAM(1)
 24372                                          assert_rational(r9)
    42 0001375B 41803911            <1>  cmp byte [%1], %2
    43 0001375F 0F85CF090000        <1>  jne L_error_incorrect_type
 24373 00013765 498B4001                        mov rax, qword [r8 + 1] ; num1
 24374 00013769 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 24375 0001376D 4899                            cqo
 24376 0001376F 48F7EB                          imul rbx
 24377 00013772 4889C6                          mov rsi, rax
 24378 00013775 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24379 00013779 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 24380 0001377D 4899                            cqo
 24381 0001377F 48F7EB                          imul rbx
 24382 00013782 4829C6                          sub rsi, rax
 24383 00013785 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24384 00013789 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 24385 0001378D 4899                            cqo
 24386 0001378F 48F7EB                          imul rbx
 24387 00013792 4889C7                          mov rdi, rax
 24388 00013795 E8BF000000                      call normalize_rational
 24389                                          LEAVE
    38 0001379A C9                  <1>  leave
 24390 0001379B C22000                          ret AND_KILL_FRAME(2)
 24391                                  
 24392                                  L_code_ptr_raw_bin_mul_qq:
 24393                                          ENTER
    33 0001379E C8000000            <1>  enter 0, 0
    34 000137A2 4883E4F0            <1>  and rsp, ~15
 24394 000137A6 48837D1802                      cmp COUNT, 2
 24395 000137AB 0F85B3080000                    jne L_error_arg_count_2
 24396 000137B1 4C8B4520                        mov r8, PARAM(0)
 24397                                          assert_rational(r8)
    42 000137B5 41803811            <1>  cmp byte [%1], %2
    43 000137B9 0F8575090000        <1>  jne L_error_incorrect_type
 24398 000137BF 4C8B4D28                        mov r9, PARAM(1)
 24399                                          assert_rational(r9)
    42 000137C3 41803911            <1>  cmp byte [%1], %2
    43 000137C7 0F8567090000        <1>  jne L_error_incorrect_type
 24400 000137CD 498B4001                        mov rax, qword [r8 + 1] ; num1
 24401 000137D1 498B5901                        mov rbx, qword [r9 + 1] ; num2
 24402 000137D5 4899                            cqo
 24403 000137D7 48F7EB                          imul rbx
 24404 000137DA 4889C6                          mov rsi, rax
 24405 000137DD 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24406 000137E1 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 24407 000137E5 4899                            cqo
 24408 000137E7 48F7EB                          imul rbx
 24409 000137EA 4889C7                          mov rdi, rax
 24410 000137ED E867000000                      call normalize_rational
 24411                                          LEAVE
    38 000137F2 C9                  <1>  leave
 24412 000137F3 C22000                          ret AND_KILL_FRAME(2)
 24413                                          
 24414                                  L_code_ptr_raw_bin_div_qq:
 24415                                          ENTER
    33 000137F6 C8000000            <1>  enter 0, 0
    34 000137FA 4883E4F0            <1>  and rsp, ~15
 24416 000137FE 48837D1802                      cmp COUNT, 2
 24417 00013803 0F855B080000                    jne L_error_arg_count_2
 24418 00013809 4C8B4520                        mov r8, PARAM(0)
 24419                                          assert_rational(r8)
    42 0001380D 41803811            <1>  cmp byte [%1], %2
    43 00013811 0F851D090000        <1>  jne L_error_incorrect_type
 24420 00013817 4C8B4D28                        mov r9, PARAM(1)
 24421                                          assert_rational(r9)
    42 0001381B 41803911            <1>  cmp byte [%1], %2
    43 0001381F 0F850F090000        <1>  jne L_error_incorrect_type
 24422 00013825 4983790100                      cmp qword [r9 + 1], 0
 24423 0001382A 0F8435090000                    je L_error_division_by_zero
 24424 00013830 498B4001                        mov rax, qword [r8 + 1] ; num1
 24425 00013834 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 24426 00013838 4899                            cqo
 24427 0001383A 48F7EB                          imul rbx
 24428 0001383D 4889C6                          mov rsi, rax
 24429 00013840 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24430 00013844 498B5901                        mov rbx, qword [r9 + 1] ; num2
 24431 00013848 4899                            cqo
 24432 0001384A 48F7EB                          imul rbx
 24433 0001384D 4889C7                          mov rdi, rax
 24434 00013850 E804000000                      call normalize_rational
 24435                                          LEAVE
    38 00013855 C9                  <1>  leave
 24436 00013856 C22000                          ret AND_KILL_FRAME(2)
 24437                                          
 24438                                  normalize_rational:
 24439 00013859 56                              push rsi
 24440 0001385A 57                              push rdi
 24441 0001385B E839000000                      call gcd
 24442 00013860 4889C3                          mov rbx, rax
 24443 00013863 58                              pop rax
 24444 00013864 4899                            cqo
 24445 00013866 48F7FB                          idiv rbx
 24446 00013869 4989C0                          mov r8, rax
 24447 0001386C 58                              pop rax
 24448 0001386D 4899                            cqo
 24449 0001386F 48F7FB                          idiv rbx
 24450 00013872 4989C1                          mov r9, rax
 24451 00013875 BF11000000                      mov rdi, (1 + 8 + 8)
 24452 0001387A E835F0FFFF                      call malloc
 24453 0001387F C60011                          mov byte [rax], T_rational
 24454 00013882 4C894801                        mov qword [rax + 1], r9
 24455 00013886 4C894009                        mov qword [rax + 1 + 8], r8
 24456 0001388A C3                              ret
 24457                                  
 24458                                  iabs:
 24459 0001388B 4889F8                          mov rax, rdi
 24460 0001388E 4883F800                        cmp rax, 0
 24461 00013892 7C01                            jl .Lneg
 24462 00013894 C3                              ret
 24463                                  .Lneg:
 24464 00013895 48F7D8                          neg rax
 24465 00013898 C3                              ret
 24466                                  
 24467                                  gcd:
 24468 00013899 E8EDFFFFFF                      call iabs
 24469 0001389E 4889C3                          mov rbx, rax
 24470 000138A1 4889F7                          mov rdi, rsi
 24471 000138A4 E8E2FFFFFF                      call iabs
 24472 000138A9 4883F800                        cmp rax, 0
 24473 000138AD 7502                            jne .L0
 24474 000138AF 4893                            xchg rax, rbx
 24475                                  .L0:
 24476 000138B1 4883FB00                        cmp rbx, 0
 24477 000138B5 740C                            je .L1
 24478 000138B7 4899                            cqo
 24479 000138B9 48F7F3                          div rbx
 24480 000138BC 4889D0                          mov rax, rdx
 24481 000138BF 4893                            xchg rax, rbx
 24482 000138C1 EBEE                            jmp .L0
 24483                                  .L1:
 24484 000138C3 C3                              ret
 24485                                  
 24486                                  L_code_ptr_error:
 24487                                          ENTER
    33 000138C4 C8000000            <1>  enter 0, 0
    34 000138C8 4883E4F0            <1>  and rsp, ~15
 24488 000138CC 48837D1802                      cmp COUNT, 2
 24489 000138D1 0F858D070000                    jne L_error_arg_count_2
 24490 000138D7 488B7520                        mov rsi, PARAM(0)
 24491                                          assert_symbol(rsi)
    42 000138DB 803E04              <1>  cmp byte [%1], %2
    43 000138DE 0F8550080000        <1>  jne L_error_incorrect_type
 24492 000138E4 488B7528                        mov rsi, PARAM(1)
 24493                                          assert_string(rsi)
    42 000138E8 803E03              <1>  cmp byte [%1], %2
    43 000138EB 0F8543080000        <1>  jne L_error_incorrect_type
 24494 000138F1 48BF-                           mov rdi, fmt_scheme_error_part_1
 24494 000138F3 [A105000000000000] 
 24495 000138FB B800000000                      mov rax, 0
 24496                                  	ENTER
    33 00013900 C8000000            <1>  enter 0, 0
    34 00013904 4883E4F0            <1>  and rsp, ~15
 24497 00013908 E8(00000000)                    call printf
 24498                                  	LEAVE
    38 0001390D C9                  <1>  leave
 24499 0001390E 488B7D20                        mov rdi, PARAM(0)
 24500 00013912 E8B8EFFFFF                      call print_sexpr
 24501 00013917 48BF-                           mov rdi, fmt_scheme_error_part_2
 24501 00013919 [B505000000000000] 
 24502 00013921 B800000000                      mov rax, 0
 24503                                  	ENTER
    33 00013926 C8000000            <1>  enter 0, 0
    34 0001392A 4883E4F0            <1>  and rsp, ~15
 24504 0001392E E8(00000000)                    call printf
 24505                                  	LEAVE
    38 00013933 C9                  <1>  leave
 24506 00013934 488B4528                        mov rax, PARAM(1)       ; sob_string
 24507 00013938 BE01000000                      mov rsi, 1              ; size = 1 byte
 24508 0001393D 488B5001                        mov rdx, qword [rax + 1] ; length
 24509 00013941 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 24510 00013945 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 24511 0001394D E8(00000000)                    call fwrite
 24512 00013952 48BF-                           mov rdi, fmt_scheme_error_part_3
 24512 00013954 [F705000000000000] 
 24513 0001395C B800000000                      mov rax, 0
 24514                                  	ENTER
    33 00013961 C8000000            <1>  enter 0, 0
    34 00013965 4883E4F0            <1>  and rsp, ~15
 24515 00013969 E8(00000000)                    call printf
 24516                                  	LEAVE
    38 0001396E C9                  <1>  leave
 24517 0001396F 48C7C0F7FFFFFF                  mov rax, -9
 24518 00013976 E8(00000000)                    call exit
 24519                                  
 24520                                  L_code_ptr_raw_less_than_rr:
 24521                                          ENTER
    33 0001397B C8000000            <1>  enter 0, 0
    34 0001397F 4883E4F0            <1>  and rsp, ~15
 24522 00013983 48837D1802                      cmp COUNT, 2
 24523 00013988 0F85D6060000                    jne L_error_arg_count_2
 24524 0001398E 488B7520                        mov rsi, PARAM(0)
 24525                                          assert_real(rsi)
    42 00013992 803E12              <1>  cmp byte [%1], %2
    43 00013995 0F8599070000        <1>  jne L_error_incorrect_type
 24526 0001399B 488B7D28                        mov rdi, PARAM(1)
 24527                                          assert_real(rdi)
    42 0001399F 803F12              <1>  cmp byte [%1], %2
    43 000139A2 0F858C070000        <1>  jne L_error_incorrect_type
 24528 000139A8 F20F104601                      movsd xmm0, qword [rsi + 1]
 24529 000139AD F20F104F01                      movsd xmm1, qword [rdi + 1]
 24530 000139B2 660F2FC1                        comisd xmm0, xmm1
 24531 000139B6 730C                            jae .L_false
 24532 000139B8 48B8-                           mov rax, sob_boolean_true
 24532 000139BA [0300000000000000] 
 24533 000139C2 EB0A                            jmp .L_exit
 24534                                  .L_false:
 24535 000139C4 48B8-                           mov rax, sob_boolean_false
 24535 000139C6 [0200000000000000] 
 24536                                  .L_exit:
 24537                                          LEAVE
    38 000139CE C9                  <1>  leave
 24538 000139CF C22000                          ret AND_KILL_FRAME(2)
 24539                                          
 24540                                  L_code_ptr_raw_less_than_qq:
 24541                                          ENTER
    33 000139D2 C8000000            <1>  enter 0, 0
    34 000139D6 4883E4F0            <1>  and rsp, ~15
 24542 000139DA 48837D1802                      cmp COUNT, 2
 24543 000139DF 0F857F060000                    jne L_error_arg_count_2
 24544 000139E5 488B7520                        mov rsi, PARAM(0)
 24545                                          assert_rational(rsi)
    42 000139E9 803E11              <1>  cmp byte [%1], %2
    43 000139EC 0F8542070000        <1>  jne L_error_incorrect_type
 24546 000139F2 488B7D28                        mov rdi, PARAM(1)
 24547                                          assert_rational(rdi)
    42 000139F6 803F11              <1>  cmp byte [%1], %2
    43 000139F9 0F8535070000        <1>  jne L_error_incorrect_type
 24548 000139FF 488B4601                        mov rax, qword [rsi + 1] ; num1
 24549 00013A03 4899                            cqo
 24550 00013A05 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 24551 00013A09 4889C1                          mov rcx, rax
 24552 00013A0C 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 24553 00013A10 4899                            cqo
 24554 00013A12 48F76F01                        imul qword [rdi + 1]          ; num2
 24555 00013A16 4829C1                          sub rcx, rax
 24556 00013A19 7D0C                            jge .L_false
 24557 00013A1B 48B8-                           mov rax, sob_boolean_true
 24557 00013A1D [0300000000000000] 
 24558 00013A25 EB0A                            jmp .L_exit
 24559                                  .L_false:
 24560 00013A27 48B8-                           mov rax, sob_boolean_false
 24560 00013A29 [0200000000000000] 
 24561                                  .L_exit:
 24562                                          LEAVE
    38 00013A31 C9                  <1>  leave
 24563 00013A32 C22000                          ret AND_KILL_FRAME(2)
 24564                                  
 24565                                  L_code_ptr_raw_equal_rr:
 24566                                          ENTER
    33 00013A35 C8000000            <1>  enter 0, 0
    34 00013A39 4883E4F0            <1>  and rsp, ~15
 24567 00013A3D 48837D1802                      cmp COUNT, 2
 24568 00013A42 0F851C060000                    jne L_error_arg_count_2
 24569 00013A48 488B7520                        mov rsi, PARAM(0)
 24570                                          assert_real(rsi)
    42 00013A4C 803E12              <1>  cmp byte [%1], %2
    43 00013A4F 0F85DF060000        <1>  jne L_error_incorrect_type
 24571 00013A55 488B7D28                        mov rdi, PARAM(1)
 24572                                          assert_real(rdi)
    42 00013A59 803F12              <1>  cmp byte [%1], %2
    43 00013A5C 0F85D2060000        <1>  jne L_error_incorrect_type
 24573 00013A62 F20F104601                      movsd xmm0, qword [rsi + 1]
 24574 00013A67 F20F104F01                      movsd xmm1, qword [rdi + 1]
 24575 00013A6C 660F2FC1                        comisd xmm0, xmm1
 24576 00013A70 750C                            jne .L_false
 24577 00013A72 48B8-                           mov rax, sob_boolean_true
 24577 00013A74 [0300000000000000] 
 24578 00013A7C EB0A                            jmp .L_exit
 24579                                  .L_false:
 24580 00013A7E 48B8-                           mov rax, sob_boolean_false
 24580 00013A80 [0200000000000000] 
 24581                                  .L_exit:
 24582                                          LEAVE
    38 00013A88 C9                  <1>  leave
 24583 00013A89 C22000                          ret AND_KILL_FRAME(2)
 24584                                          
 24585                                  L_code_ptr_raw_equal_qq:
 24586                                          ENTER
    33 00013A8C C8000000            <1>  enter 0, 0
    34 00013A90 4883E4F0            <1>  and rsp, ~15
 24587 00013A94 48837D1802                      cmp COUNT, 2
 24588 00013A99 0F85C5050000                    jne L_error_arg_count_2
 24589 00013A9F 488B7520                        mov rsi, PARAM(0)
 24590                                          assert_rational(rsi)
    42 00013AA3 803E11              <1>  cmp byte [%1], %2
    43 00013AA6 0F8588060000        <1>  jne L_error_incorrect_type
 24591 00013AAC 488B7D28                        mov rdi, PARAM(1)
 24592                                          assert_rational(rdi)
    42 00013AB0 803F11              <1>  cmp byte [%1], %2
    43 00013AB3 0F857B060000        <1>  jne L_error_incorrect_type
 24593 00013AB9 488B4601                        mov rax, qword [rsi + 1] ; num1
 24594 00013ABD 4899                            cqo
 24595 00013ABF 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 24596 00013AC3 4889C1                          mov rcx, rax
 24597 00013AC6 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 24598 00013ACA 4899                            cqo
 24599 00013ACC 48F76F01                        imul qword [rdi + 1]          ; num2
 24600 00013AD0 4829C1                          sub rcx, rax
 24601 00013AD3 750C                            jne .L_false
 24602 00013AD5 48B8-                           mov rax, sob_boolean_true
 24602 00013AD7 [0300000000000000] 
 24603 00013ADF EB0A                            jmp .L_exit
 24604                                  .L_false:
 24605 00013AE1 48B8-                           mov rax, sob_boolean_false
 24605 00013AE3 [0200000000000000] 
 24606                                  .L_exit:
 24607                                          LEAVE
    38 00013AEB C9                  <1>  leave
 24608 00013AEC C22000                          ret AND_KILL_FRAME(2)
 24609                                  
 24610                                  L_code_ptr_quotient:
 24611                                          ENTER
    33 00013AEF C8000000            <1>  enter 0, 0
    34 00013AF3 4883E4F0            <1>  and rsp, ~15
 24612 00013AF7 48837D1802                      cmp COUNT, 2
 24613 00013AFC 0F8562050000                    jne L_error_arg_count_2
 24614 00013B02 488B7520                        mov rsi, PARAM(0)
 24615                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00013B06 803E11              <2>  cmp byte [%1], %2
    43 00013B09 0F8525060000        <2>  jne L_error_incorrect_type
    48 00013B0F 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013B14 0F851A060000        <1>  jne L_error_incorrect_type
 24616 00013B1A 488B7D28                        mov rdi, PARAM(1)
 24617                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00013B1E 803F11              <2>  cmp byte [%1], %2
    43 00013B21 0F850D060000        <2>  jne L_error_incorrect_type
    48 00013B27 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013B2C 0F8502060000        <1>  jne L_error_incorrect_type
 24618 00013B32 488B4601                        mov rax, qword [rsi + 1]
 24619 00013B36 488B5F01                        mov rbx, qword [rdi + 1]
 24620 00013B3A 4883FB00                        cmp rbx, 0
 24621 00013B3E 0F8421060000                    je L_error_division_by_zero
 24622 00013B44 4899                            cqo
 24623 00013B46 48F7FB                          idiv rbx
 24624 00013B49 4889C7                          mov rdi, rax
 24625 00013B4C E852040000                      call make_integer
 24626                                          LEAVE
    38 00013B51 C9                  <1>  leave
 24627 00013B52 C22000                          ret AND_KILL_FRAME(2)
 24628                                          
 24629                                  L_code_ptr_remainder:
 24630                                          ENTER
    33 00013B55 C8000000            <1>  enter 0, 0
    34 00013B59 4883E4F0            <1>  and rsp, ~15
 24631 00013B5D 48837D1802                      cmp COUNT, 2
 24632 00013B62 0F85FC040000                    jne L_error_arg_count_2
 24633 00013B68 488B7520                        mov rsi, PARAM(0)
 24634                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00013B6C 803E11              <2>  cmp byte [%1], %2
    43 00013B6F 0F85BF050000        <2>  jne L_error_incorrect_type
    48 00013B75 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013B7A 0F85B4050000        <1>  jne L_error_incorrect_type
 24635 00013B80 488B7D28                        mov rdi, PARAM(1)
 24636                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00013B84 803F11              <2>  cmp byte [%1], %2
    43 00013B87 0F85A7050000        <2>  jne L_error_incorrect_type
    48 00013B8D 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013B92 0F859C050000        <1>  jne L_error_incorrect_type
 24637 00013B98 488B4601                        mov rax, qword [rsi + 1]
 24638 00013B9C 488B5F01                        mov rbx, qword [rdi + 1]
 24639 00013BA0 4883FB00                        cmp rbx, 0
 24640 00013BA4 0F84BB050000                    je L_error_division_by_zero
 24641 00013BAA 4899                            cqo
 24642 00013BAC 48F7FB                          idiv rbx
 24643 00013BAF 4889D7                          mov rdi, rdx
 24644 00013BB2 E8EC030000                      call make_integer
 24645                                          LEAVE
    38 00013BB7 C9                  <1>  leave
 24646 00013BB8 C22000                          ret AND_KILL_FRAME(2)
 24647                                  
 24648                                  L_code_ptr_set_car:
 24649                                          ENTER
    33 00013BBB C8000000            <1>  enter 0, 0
    34 00013BBF 4883E4F0            <1>  and rsp, ~15
 24650 00013BC3 48837D1802                      cmp COUNT, 2
 24651 00013BC8 0F8596040000                    jne L_error_arg_count_2
 24652 00013BCE 488B4520                        mov rax, PARAM(0)
 24653                                          assert_pair(rax)
    42 00013BD2 803821              <1>  cmp byte [%1], %2
    43 00013BD5 0F8559050000        <1>  jne L_error_incorrect_type
 24654 00013BDB 488B5D28                        mov rbx, PARAM(1)
 24655 00013BDF 48895801                        mov SOB_PAIR_CAR(rax), rbx
 24656 00013BE3 48B8-                           mov rax, sob_void
 24656 00013BE5 [0000000000000000] 
 24657                                          LEAVE
    38 00013BED C9                  <1>  leave
 24658 00013BEE C22000                          ret AND_KILL_FRAME(2)
 24659                                  
 24660                                  L_code_ptr_set_cdr:
 24661                                          ENTER
    33 00013BF1 C8000000            <1>  enter 0, 0
    34 00013BF5 4883E4F0            <1>  and rsp, ~15
 24662 00013BF9 48837D1802                      cmp COUNT, 2
 24663 00013BFE 0F8560040000                    jne L_error_arg_count_2
 24664 00013C04 488B4520                        mov rax, PARAM(0)
 24665                                          assert_pair(rax)
    42 00013C08 803821              <1>  cmp byte [%1], %2
    43 00013C0B 0F8523050000        <1>  jne L_error_incorrect_type
 24666 00013C11 488B5D28                        mov rbx, PARAM(1)
 24667 00013C15 48895809                        mov SOB_PAIR_CDR(rax), rbx
 24668 00013C19 48B8-                           mov rax, sob_void
 24668 00013C1B [0000000000000000] 
 24669                                          LEAVE
    38 00013C23 C9                  <1>  leave
 24670 00013C24 C22000                          ret AND_KILL_FRAME(2)
 24671                                  
 24672                                  L_code_ptr_string_ref:
 24673                                          ENTER
    33 00013C27 C8000000            <1>  enter 0, 0
    34 00013C2B 4883E4F0            <1>  and rsp, ~15
 24674 00013C2F 48837D1802                      cmp COUNT, 2
 24675 00013C34 0F852A040000                    jne L_error_arg_count_2
 24676 00013C3A 488B7D20                        mov rdi, PARAM(0)
 24677                                          assert_string(rdi)
    42 00013C3E 803F03              <1>  cmp byte [%1], %2
    43 00013C41 0F85ED040000        <1>  jne L_error_incorrect_type
 24678 00013C47 488B7528                        mov rsi, PARAM(1)
 24679                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00013C4B 803E11              <2>  cmp byte [%1], %2
    43 00013C4E 0F85E0040000        <2>  jne L_error_incorrect_type
    48 00013C54 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013C59 0F85D5040000        <1>  jne L_error_incorrect_type
 24680 00013C5F 488B5701                        mov rdx, qword [rdi + 1]
 24681 00013C63 488B4E01                        mov rcx, qword [rsi + 1]
 24682 00013C67 4839D1                          cmp rcx, rdx
 24683 00013C6A 0F8D59030000                    jge L_error_integer_range
 24684 00013C70 4883F900                        cmp rcx, 0
 24685 00013C74 0F8C4F030000                    jl L_error_integer_range
 24686 00013C7A 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 24687 00013C7E BF02000000                      mov rdi, 2
 24688 00013C83 E82CECFFFF                      call malloc
 24689 00013C88 C60002                          mov byte [rax], T_char
 24690 00013C8B 885801                          mov byte [rax + 1], bl
 24691                                          LEAVE
    38 00013C8E C9                  <1>  leave
 24692 00013C8F C22000                          ret AND_KILL_FRAME(2)
 24693                                  
 24694                                  L_code_ptr_vector_ref:
 24695                                          ENTER
    33 00013C92 C8000000            <1>  enter 0, 0
    34 00013C96 4883E4F0            <1>  and rsp, ~15
 24696 00013C9A 48837D1802                      cmp COUNT, 2
 24697 00013C9F 0F85BF030000                    jne L_error_arg_count_2
 24698 00013CA5 488B7D20                        mov rdi, PARAM(0)
 24699                                          assert_vector(rdi)
    42 00013CA9 803F22              <1>  cmp byte [%1], %2
    43 00013CAC 0F8582040000        <1>  jne L_error_incorrect_type
 24700 00013CB2 488B7528                        mov rsi, PARAM(1)
 24701                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00013CB6 803E11              <2>  cmp byte [%1], %2
    43 00013CB9 0F8575040000        <2>  jne L_error_incorrect_type
    48 00013CBF 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013CC4 0F856A040000        <1>  jne L_error_incorrect_type
 24702 00013CCA 488B5701                        mov rdx, qword [rdi + 1]
 24703 00013CCE 488B4E01                        mov rcx, qword [rsi + 1]
 24704 00013CD2 4839D1                          cmp rcx, rdx
 24705 00013CD5 0F8DEE020000                    jge L_error_integer_range
 24706 00013CDB 4883F900                        cmp rcx, 0
 24707 00013CDF 0F8CE4020000                    jl L_error_integer_range
 24708 00013CE5 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 24709                                          LEAVE
    38 00013CEA C9                  <1>  leave
 24710 00013CEB C22000                          ret AND_KILL_FRAME(2)
 24711                                  
 24712                                  L_code_ptr_vector_set:
 24713                                          ENTER
    33 00013CEE C8000000            <1>  enter 0, 0
    34 00013CF2 4883E4F0            <1>  and rsp, ~15
 24714 00013CF6 48837D1803                      cmp COUNT, 3
 24715 00013CFB 0F85CD030000                    jne L_error_arg_count_3
 24716 00013D01 488B7D20                        mov rdi, PARAM(0)
 24717                                          assert_vector(rdi)
    42 00013D05 803F22              <1>  cmp byte [%1], %2
    43 00013D08 0F8526040000        <1>  jne L_error_incorrect_type
 24718 00013D0E 488B7528                        mov rsi, PARAM(1)
 24719                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00013D12 803E11              <2>  cmp byte [%1], %2
    43 00013D15 0F8519040000        <2>  jne L_error_incorrect_type
    48 00013D1B 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013D20 0F850E040000        <1>  jne L_error_incorrect_type
 24720 00013D26 488B5701                        mov rdx, qword [rdi + 1]
 24721 00013D2A 488B4E01                        mov rcx, qword [rsi + 1]
 24722 00013D2E 4839D1                          cmp rcx, rdx
 24723 00013D31 0F8D92020000                    jge L_error_integer_range
 24724 00013D37 4883F900                        cmp rcx, 0
 24725 00013D3B 0F8C88020000                    jl L_error_integer_range
 24726 00013D41 488B4530                        mov rax, PARAM(2)
 24727 00013D45 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 24728 00013D4A 48B8-                           mov rax, sob_void
 24728 00013D4C [0000000000000000] 
 24729                                          LEAVE
    38 00013D54 C9                  <1>  leave
 24730 00013D55 C22800                          ret AND_KILL_FRAME(3)
 24731                                  
 24732                                  L_code_ptr_string_set:
 24733                                          ENTER
    33 00013D58 C8000000            <1>  enter 0, 0
    34 00013D5C 4883E4F0            <1>  and rsp, ~15
 24734 00013D60 48837D1803                      cmp COUNT, 3
 24735 00013D65 0F8563030000                    jne L_error_arg_count_3
 24736 00013D6B 488B7D20                        mov rdi, PARAM(0)
 24737                                          assert_string(rdi)
    42 00013D6F 803F03              <1>  cmp byte [%1], %2
    43 00013D72 0F85BC030000        <1>  jne L_error_incorrect_type
 24738 00013D78 488B7528                        mov rsi, PARAM(1)
 24739                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00013D7C 803E11              <2>  cmp byte [%1], %2
    43 00013D7F 0F85AF030000        <2>  jne L_error_incorrect_type
    48 00013D85 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013D8A 0F85A4030000        <1>  jne L_error_incorrect_type
 24740 00013D90 488B5701                        mov rdx, qword [rdi + 1]
 24741 00013D94 488B4E01                        mov rcx, qword [rsi + 1]
 24742 00013D98 4839D1                          cmp rcx, rdx
 24743 00013D9B 0F8D28020000                    jge L_error_integer_range
 24744 00013DA1 4883F900                        cmp rcx, 0
 24745 00013DA5 0F8C1E020000                    jl L_error_integer_range
 24746 00013DAB 488B4530                        mov rax, PARAM(2)
 24747                                          assert_char(rax)
    42 00013DAF 803802              <1>  cmp byte [%1], %2
    43 00013DB2 0F857C030000        <1>  jne L_error_incorrect_type
 24748 00013DB8 8A4001                          mov al, byte [rax + 1]
 24749 00013DBB 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 24750 00013DBF 48B8-                           mov rax, sob_void
 24750 00013DC1 [0000000000000000] 
 24751                                          LEAVE
    38 00013DC9 C9                  <1>  leave
 24752 00013DCA C22800                          ret AND_KILL_FRAME(3)
 24753                                  
 24754                                  L_code_ptr_make_vector:
 24755                                          ENTER
    33 00013DCD C8000000            <1>  enter 0, 0
    34 00013DD1 4883E4F0            <1>  and rsp, ~15
 24756 00013DD5 48837D1802                      cmp COUNT, 2
 24757 00013DDA 0F8584020000                    jne L_error_arg_count_2
 24758 00013DE0 488B4D20                        mov rcx, PARAM(0)
 24759                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00013DE4 803911              <2>  cmp byte [%1], %2
    43 00013DE7 0F8547030000        <2>  jne L_error_incorrect_type
    48 00013DED 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013DF2 0F853C030000        <1>  jne L_error_incorrect_type
 24760 00013DF8 488B4901                        mov rcx, qword [rcx + 1]
 24761 00013DFC 4883F900                        cmp rcx, 0
 24762 00013E00 0F8CC3010000                    jl L_error_integer_range
 24763 00013E06 488B5528                        mov rdx, PARAM(1)
 24764 00013E0A 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 24765 00013E12 E89DEAFFFF                      call malloc
 24766 00013E17 C60022                          mov byte [rax], T_vector
 24767 00013E1A 48894801                        mov qword [rax + 1], rcx
 24768 00013E1E 41B800000000                    mov r8, 0
 24769                                  .L0:
 24770 00013E24 4939C8                          cmp r8, rcx
 24771 00013E27 740A                            je .L1
 24772 00013E29 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 24773 00013E2E 49FFC0                          inc r8
 24774 00013E31 EBF1                            jmp .L0
 24775                                  .L1:
 24776                                          LEAVE
    38 00013E33 C9                  <1>  leave
 24777 00013E34 C22000                          ret AND_KILL_FRAME(2)
 24778                                          
 24779                                  L_code_ptr_make_string:
 24780                                          ENTER
    33 00013E37 C8000000            <1>  enter 0, 0
    34 00013E3B 4883E4F0            <1>  and rsp, ~15
 24781 00013E3F 48837D1802                      cmp COUNT, 2
 24782 00013E44 0F851A020000                    jne L_error_arg_count_2
 24783 00013E4A 488B4D20                        mov rcx, PARAM(0)
 24784                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00013E4E 803911              <2>  cmp byte [%1], %2
    43 00013E51 0F85DD020000        <2>  jne L_error_incorrect_type
    48 00013E57 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013E5C 0F85D2020000        <1>  jne L_error_incorrect_type
 24785 00013E62 488B4901                        mov rcx, qword [rcx + 1]
 24786 00013E66 4883F900                        cmp rcx, 0
 24787 00013E6A 0F8C59010000                    jl L_error_integer_range
 24788 00013E70 488B5528                        mov rdx, PARAM(1)
 24789                                          assert_char(rdx)
    42 00013E74 803A02              <1>  cmp byte [%1], %2
    43 00013E77 0F85B7020000        <1>  jne L_error_incorrect_type
 24790 00013E7D 8A5201                          mov dl, byte [rdx + 1]
 24791 00013E80 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 24792 00013E84 E82BEAFFFF                      call malloc
 24793 00013E89 C60003                          mov byte [rax], T_string
 24794 00013E8C 48894801                        mov qword [rax + 1], rcx
 24795 00013E90 41B800000000                    mov r8, 0
 24796                                  .L0:
 24797 00013E96 4939C8                          cmp r8, rcx
 24798 00013E99 740A                            je .L1
 24799 00013E9B 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 24800 00013EA0 49FFC0                          inc r8
 24801 00013EA3 EBF1                            jmp .L0
 24802                                  .L1:
 24803                                          LEAVE
    38 00013EA5 C9                  <1>  leave
 24804 00013EA6 C22000                          ret AND_KILL_FRAME(2)
 24805                                  
 24806                                  L_code_ptr_numerator:
 24807                                          ENTER
    33 00013EA9 C8000000            <1>  enter 0, 0
    34 00013EAD 4883E4F0            <1>  and rsp, ~15
 24808 00013EB1 48837D1801                      cmp COUNT, 1
 24809 00013EB6 0F8573010000                    jne L_error_arg_count_1
 24810 00013EBC 488B4520                        mov rax, PARAM(0)
 24811                                          assert_rational(rax)
    42 00013EC0 803811              <1>  cmp byte [%1], %2
    43 00013EC3 0F856B020000        <1>  jne L_error_incorrect_type
 24812 00013EC9 488B7801                        mov rdi, qword [rax + 1]
 24813 00013ECD E8D1000000                      call make_integer
 24814                                          LEAVE
    38 00013ED2 C9                  <1>  leave
 24815 00013ED3 C21800                          ret AND_KILL_FRAME(1)
 24816                                          
 24817                                  L_code_ptr_denominator:
 24818                                          ENTER
    33 00013ED6 C8000000            <1>  enter 0, 0
    34 00013EDA 4883E4F0            <1>  and rsp, ~15
 24819 00013EDE 48837D1801                      cmp COUNT, 1
 24820 00013EE3 0F8546010000                    jne L_error_arg_count_1
 24821 00013EE9 488B4520                        mov rax, PARAM(0)
 24822                                          assert_rational(rax)
    42 00013EED 803811              <1>  cmp byte [%1], %2
    43 00013EF0 0F853E020000        <1>  jne L_error_incorrect_type
 24823 00013EF6 488B7809                        mov rdi, qword [rax + 1 + 8]
 24824 00013EFA E8A4000000                      call make_integer
 24825                                          LEAVE
    38 00013EFF C9                  <1>  leave
 24826 00013F00 C21800                          ret AND_KILL_FRAME(1)
 24827                                  
 24828                                  L_code_ptr_eq:
 24829                                  	ENTER
    33 00013F03 C8000000            <1>  enter 0, 0
    34 00013F07 4883E4F0            <1>  and rsp, ~15
 24830 00013F0B 48837D1802              	cmp COUNT, 2
 24831 00013F10 0F854E010000            	jne L_error_arg_count_2
 24832 00013F16 488B7D20                	mov rdi, PARAM(0)
 24833 00013F1A 488B7528                	mov rsi, PARAM(1)
 24834 00013F1E 4839F7                  	cmp rdi, rsi
 24835 00013F21 744A                    	je .L_eq_true
 24836 00013F23 8A17                    	mov dl, byte [rdi]
 24837 00013F25 3A16                    	cmp dl, byte [rsi]
 24838 00013F27 7550                    	jne .L_eq_false
 24839 00013F29 80FA02                  	cmp dl, T_char
 24840 00013F2C 7437                    	je .L_char
 24841 00013F2E 80FA04                  	cmp dl, T_symbol
 24842 00013F31 742A                    	je .L_symbol
 24843 00013F33 80FA12                  	cmp dl, T_real
 24844 00013F36 741D                    	je .L_real
 24845 00013F38 80FA11                  	cmp dl, T_rational
 24846 00013F3B 7402                    	je .L_rational
 24847 00013F3D EB3A                    	jmp .L_eq_false
 24848                                  .L_rational:
 24849 00013F3F 488B4601                	mov rax, qword [rsi + 1]
 24850 00013F43 483B4701                	cmp rax, qword [rdi + 1]
 24851 00013F47 7530                    	jne .L_eq_false
 24852 00013F49 488B4609                	mov rax, qword [rsi + 1 + 8]
 24853 00013F4D 483B4709                	cmp rax, qword [rdi + 1 + 8]
 24854 00013F51 7526                    	jne .L_eq_false
 24855 00013F53 EB18                    	jmp .L_eq_true
 24856                                  .L_real:
 24857 00013F55 488B4601                	mov rax, qword [rsi + 1]
 24858 00013F59 483B4701                	cmp rax, qword [rdi + 1]
 24859                                  .L_symbol:
 24860                                  	; never reached, because symbols are static!
 24861                                  	; but I'm keeping it in case, I'll ever change
 24862                                  	; the implementation
 24863 00013F5D 488B4601                	mov rax, qword [rsi + 1]
 24864 00013F61 483B4701                	cmp rax, qword [rdi + 1]
 24865                                  .L_char:
 24866 00013F65 8A5E01                  	mov bl, byte [rsi + 1]
 24867 00013F68 3A5F01                  	cmp bl, byte [rdi + 1]
 24868 00013F6B 750C                    	jne .L_eq_false
 24869                                  .L_eq_true:
 24870 00013F6D 48B8-                   	mov rax, sob_boolean_true
 24870 00013F6F [0300000000000000] 
 24871 00013F77 EB0A                    	jmp .L_eq_exit
 24872                                  .L_eq_false:
 24873 00013F79 48B8-                   	mov rax, sob_boolean_false
 24873 00013F7B [0200000000000000] 
 24874                                  .L_eq_exit:
 24875                                  	LEAVE
    38 00013F83 C9                  <1>  leave
 24876 00013F84 C22000                  	ret AND_KILL_FRAME(2)
 24877                                  
 24878                                  make_real:
 24879                                          ENTER
    33 00013F87 C8000000            <1>  enter 0, 0
    34 00013F8B 4883E4F0            <1>  and rsp, ~15
 24880 00013F8F BF09000000                      mov rdi, (1 + 8)
 24881 00013F94 E81BE9FFFF                      call malloc
 24882 00013F99 C60012                          mov byte [rax], T_real
 24883 00013F9C F20F114001                      movsd qword [rax + 1], xmm0
 24884                                          LEAVE
    38 00013FA1 C9                  <1>  leave
 24885 00013FA2 C3                              ret
 24886                                          
 24887                                  make_integer:
 24888                                          ENTER
    33 00013FA3 C8000000            <1>  enter 0, 0
    34 00013FA7 4883E4F0            <1>  and rsp, ~15
 24889 00013FAB 4889FE                          mov rsi, rdi
 24890 00013FAE BF11000000                      mov rdi, (1 + 8 + 8)
 24891 00013FB3 E8FCE8FFFF                      call malloc
 24892 00013FB8 C60011                          mov byte [rax], T_rational
 24893 00013FBB 48897001                        mov qword [rax + 1], rsi
 24894 00013FBF 48C7400901000000                mov qword [rax + 1 + 8], 1
 24895                                          LEAVE
    38 00013FC7 C9                  <1>  leave
 24896 00013FC8 C3                              ret
 24897                                          
 24898                                  L_error_integer_range:
 24899 00013FC9 488B3C25[00000000]              mov rdi, qword [stderr]
 24900 00013FD1 48BE-                           mov rsi, fmt_integer_range
 24900 00013FD3 [6E05000000000000] 
 24901 00013FDB B800000000                      mov rax, 0
 24902                                  	ENTER
    33 00013FE0 C8000000            <1>  enter 0, 0
    34 00013FE4 4883E4F0            <1>  and rsp, ~15
 24903 00013FE8 E8(00000000)                    call fprintf
 24904                                  	LEAVE
    38 00013FED C9                  <1>  leave
 24905 00013FEE 48C7C0FBFFFFFF                  mov rax, -5
 24906 00013FF5 E8(00000000)                    call exit
 24907                                  
 24908                                  L_error_arg_count_0:
 24909 00013FFA 488B3C25[00000000]              mov rdi, qword [stderr]
 24910 00014002 48BE-                           mov rsi, fmt_arg_count_0
 24910 00014004 [3404000000000000] 
 24911 0001400C 488B5518                        mov rdx, COUNT
 24912 00014010 B800000000                      mov rax, 0
 24913                                  	ENTER
    33 00014015 C8000000            <1>  enter 0, 0
    34 00014019 4883E4F0            <1>  and rsp, ~15
 24914 0001401D E8(00000000)                    call fprintf
 24915                                  	LEAVE
    38 00014022 C9                  <1>  leave
 24916 00014023 48C7C0FDFFFFFF                  mov rax, -3
 24917 0001402A E8(00000000)                    call exit
 24918                                  
 24919                                  L_error_arg_count_1:
 24920 0001402F 488B3C25[00000000]              mov rdi, qword [stderr]
 24921 00014037 48BE-                           mov rsi, fmt_arg_count_1
 24921 00014039 [5C04000000000000] 
 24922 00014041 488B5518                        mov rdx, COUNT
 24923 00014045 B800000000                      mov rax, 0
 24924                                  	ENTER
    33 0001404A C8000000            <1>  enter 0, 0
    34 0001404E 4883E4F0            <1>  and rsp, ~15
 24925 00014052 E8(00000000)                    call fprintf
 24926                                  	LEAVE
    38 00014057 C9                  <1>  leave
 24927 00014058 48C7C0FDFFFFFF                  mov rax, -3
 24928 0001405F E8(00000000)                    call exit
 24929                                  
 24930                                  L_error_arg_count_2:
 24931 00014064 488B3C25[00000000]              mov rdi, qword [stderr]
 24932 0001406C 48BE-                           mov rsi, fmt_arg_count_2
 24932 0001406E [C204000000000000] 
 24933 00014076 488B5518                        mov rdx, COUNT
 24934 0001407A B800000000                      mov rax, 0
 24935                                  	ENTER
    33 0001407F C8000000            <1>  enter 0, 0
    34 00014083 4883E4F0            <1>  and rsp, ~15
 24936 00014087 E8(00000000)                    call fprintf
 24937                                  	LEAVE
    38 0001408C C9                  <1>  leave
 24938 0001408D 48C7C0FDFFFFFF                  mov rax, -3
 24939 00014094 E8(00000000)                    call exit
 24940                                  
 24941                                  L_error_arg_count_12:
 24942 00014099 488B3C25[00000000]              mov rdi, qword [stderr]
 24943 000140A1 48BE-                           mov rsi, fmt_arg_count_12
 24943 000140A3 [8204000000000000] 
 24944 000140AB 488B5518                        mov rdx, COUNT
 24945 000140AF B800000000                      mov rax, 0
 24946                                  	ENTER
    33 000140B4 C8000000            <1>  enter 0, 0
    34 000140B8 4883E4F0            <1>  and rsp, ~15
 24947 000140BC E8(00000000)                    call fprintf
 24948                                  	LEAVE
    38 000140C1 C9                  <1>  leave
 24949 000140C2 48C7C0FDFFFFFF                  mov rax, -3
 24950 000140C9 E8(00000000)                    call exit
 24951                                  
 24952                                  L_error_arg_count_3:
 24953 000140CE 488B3C25[00000000]              mov rdi, qword [stderr]
 24954 000140D6 48BE-                           mov rsi, fmt_arg_count_3
 24954 000140D8 [E904000000000000] 
 24955 000140E0 488B5518                        mov rdx, COUNT
 24956 000140E4 B800000000                      mov rax, 0
 24957                                  	ENTER
    33 000140E9 C8000000            <1>  enter 0, 0
    34 000140ED 4883E4F0            <1>  and rsp, ~15
 24958 000140F1 E8(00000000)                    call fprintf
 24959                                  	LEAVE
    38 000140F6 C9                  <1>  leave
 24960 000140F7 48C7C0FDFFFFFF                  mov rax, -3
 24961 000140FE E8(00000000)                    call exit
 24962                                  
 24963                                  L_error_arg_apply_no_list:
 24964 00014103 488B3C25[00000000]              mov rdi, qword [stderr]
 24965 0001410B 48BE-                           mov rsi, fmt_arg_apply_no_list
 24965 0001410D [1205000000000000] 
 24966 00014115 B800000000                      mov rax, 0
 24967                                  	ENTER
    33 0001411A C8000000            <1>  enter 0, 0
    34 0001411E 4883E4F0            <1>  and rsp, ~15
 24968 00014122 E8(00000000)                    call fprintf
 24969                                  	LEAVE
    38 00014127 C9                  <1>  leave
 24970 00014128 48C7C0FCFFFFFF                  mov rax, -4
 24971 0001412F E8(00000000)                    call exit  
 24972                                  
 24973                                  L_error_incorrect_type:
 24974 00014134 488B3C25[00000000]              mov rdi, qword [stderr]
 24975 0001413C 48BE-                           mov rsi, fmt_type
 24975 0001413E [4A05000000000000] 
 24976 00014146 B800000000                      mov rax, 0
 24977                                  	ENTER
    33 0001414B C8000000            <1>  enter 0, 0
    34 0001414F 4883E4F0            <1>  and rsp, ~15
 24978 00014153 E8(00000000)                    call fprintf
 24979                                  	LEAVE
    38 00014158 C9                  <1>  leave
 24980 00014159 48C7C0FCFFFFFF                  mov rax, -4
 24981 00014160 E8(00000000)                    call exit
 24982                                  
 24983                                  L_error_division_by_zero:
 24984 00014165 488B3C25[00000000]              mov rdi, qword [stderr]
 24985 0001416D 48BE-                           mov rsi, fmt_division_by_zero
 24985 0001416F [8B05000000000000] 
 24986 00014177 B800000000                      mov rax, 0
 24987                                  	ENTER
    33 0001417C C8000000            <1>  enter 0, 0
    34 00014180 4883E4F0            <1>  and rsp, ~15
 24988 00014184 E8(00000000)                    call fprintf
 24989                                  	LEAVE
    38 00014189 C9                  <1>  leave
 24990 0001418A 48C7C0F8FFFFFF                  mov rax, -8
 24991 00014191 E8(00000000)                    call exit
 24992                                  
 24993                                  section .data
 24994                                  fmt_char:
 24995 00000431 256300                          db `%c\0`
 24996                                  fmt_arg_count_0:
 24997 00000434 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 24997 0000043D 74696E67207A65726F-
 24997 00000446 20617267756D656E74-
 24997 0000044F 732E20466F756E6420-
 24997 00000458 25640A00           
 24998                                  fmt_arg_count_1:
 24999 0000045C 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 24999 00000465 74696E67206F6E6520-
 24999 0000046E 617267756D656E742E-
 24999 00000477 20466F756E64202564-
 24999 00000480 0A00               
 25000                                  fmt_arg_count_12:
 25001 00000482 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 25001 0000048B 74696E67206F6E6520-
 25001 00000494 726571756972656420-
 25001 0000049D 616E64206F6E65206F-
 25001 000004A6 7074696F6E616C2061-
 25001 000004AF 7267756D656E742E20-
 25001 000004B8 466F756E642025640A-
 25001 000004C1 00                 
 25002                                  fmt_arg_count_2:
 25003 000004C2 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 25003 000004CB 74696E672074776F20-
 25003 000004D4 617267756D656E7473-
 25003 000004DD 2E20466F756E642025-
 25003 000004E6 640A00             
 25004                                  fmt_arg_count_3:
 25005 000004E9 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 25005 000004F2 74696E672074687265-
 25005 000004FB 6520617267756D656E-
 25005 00000504 74732E20466F756E64-
 25005 0000050D 2025640A00         
 25006                                  fmt_arg_apply_no_list:
 25007 00000512 21212120546865206C-             db `!!! The last argument in apply should be a proper list\n\0`
 25007 0000051B 61737420617267756D-
 25007 00000524 656E7420696E206170-
 25007 0000052D 706C792073686F756C-
 25007 00000536 642062652061207072-
 25007 0000053F 6F706572206C697374-
 25007 00000548 0A00               
 25008                                  fmt_type:
 25009 0000054A 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 25009 00000553 696F6E207061737365-
 25009 0000055C 6420696E636F727265-
 25009 00000565 637420747970650A00 
 25010                                  fmt_integer_range:
 25011 0000056E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 25011 00000577 7265637420696E7465-
 25011 00000580 6765722072616E6765-
 25011 00000589 0A00               
 25012                                  fmt_division_by_zero:
 25013 0000058B 212121204469766973-             db `!!! Division by zero\n\0`
 25013 00000594 696F6E206279207A65-
 25013 0000059D 726F0A00           
 25014                                  fmt_scheme_error_part_1:
 25015 000005A1 0A2121212054686520-             db `\n!!! The procedure \0`
 25015 000005AA 70726F636564757265-
 25015 000005B3 2000               
 25016                                  fmt_scheme_error_part_2:
 25017 000005B5 2061736B656420746F-             db ` asked to terminate the program\n`
 25017 000005BE 207465726D696E6174-
 25017 000005C7 65207468652070726F-
 25017 000005D0 6772616D0A         
 25018 000005D5 202020207769746820-             db `    with the following message:\n\n\0`
 25018 000005DE 74686520666F6C6C6F-
 25018 000005E7 77696E67206D657373-
 25018 000005F0 6167653A0A0A00     
 25019                                  fmt_scheme_error_part_3:
 25020 000005F7 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 25020 00000600 210A0A00           
