     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %macro PRINT_TEST 2
    18                                          push rax
    19                                          push rbx
    20                                          push rcx
    21                                          push rdx
    22                                          push rdi
    23                                          push rsi
    24                                          mov rdi, qword [stderr]
    25                                          mov rsi, fmt_test
    26                                          mov rdx, %1
    27                                          mov rcx, %2
    28                                          mov rax, 0
    29                                          ENTER
    30                                          call fprintf
    31                                          LEAVE
    32                                          pop rsi
    33                                          pop rdi
    34                                          pop rdx
    35                                          pop rcx
    36                                          pop rbx
    37                                          pop rax
    38                                  %endmacro
    39                                  
    40                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    41                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    42                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    43                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    44                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    45                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    46                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    47                                  
    48                                  %define OLD_RDP 			qword [rbp]
    49                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    50                                  %define ENV 				qword [rbp + 8 * 2]
    51                                  %define COUNT 				qword [rbp + 8 * 3]
    52                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    53                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    54                                  
    55                                  %macro ENTER 0
    56                                  	enter 0, 0
    57                                  	and rsp, ~15
    58                                  %endmacro
    59                                  
    60                                  %macro LEAVE 0
    61                                  	leave
    62                                  %endmacro
    63                                  
    64                                  %macro assert_type 2
    65                                          cmp byte [%1], %2
    66                                          jne L_error_incorrect_type
    67                                  %endmacro
    68                                  
    69                                  %macro assert_type_integer 1
    70                                          assert_rational(%1)
    71                                          cmp qword [%1 + 1 + 8], 1
    72                                          jne L_error_incorrect_type
    73                                  %endmacro
    74                                  
    75                                  %define assert_void(reg)		assert_type reg, T_void
    76                                  %define assert_nil(reg)			assert_type reg, T_nil
    77                                  %define assert_char(reg)		assert_type reg, T_char
    78                                  %define assert_string(reg)		assert_type reg, T_string
    79                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    80                                  %define assert_closure(reg)		assert_type reg, T_closure
    81                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    82                                  %define assert_rational(reg)		assert_type reg, T_rational
    83                                  %define assert_integer(reg)		assert_type_integer reg
    84                                  %define assert_real(reg)		assert_type reg, T_real
    85                                  %define assert_pair(reg)		assert_type reg, T_pair
    86                                  %define assert_vector(reg)		assert_type reg, T_vector
    87                                  
    88                                  %define sob_void			(L_constants + 0)
    89                                  %define sob_nil				(L_constants + 1)
    90                                  %define sob_boolean_false		(L_constants + 2)
    91                                  %define sob_boolean_true		(L_constants + 3)
    92                                  %define sob_char_nul			(L_constants + 4)
    93                                  
    94                                  %define bytes(n)			(n)
    95                                  %define kbytes(n) 			(bytes(n) << 10)
    96                                  %define mbytes(n) 			(kbytes(n) << 10)
    97                                  %define gbytes(n) 			(mbytes(n) << 10)
    98                                  
    99                                  section .data
   100                                  L_constants:
   101 00000000 00                      	db T_void
   102 00000001 01                      	db T_nil
   103 00000002 09                      	db T_boolean_false
   104 00000003 0A                      	db T_boolean_true
   105 00000004 0200                    	db T_char, 0x00	; #\x0
   106 00000006 03                      	db T_string	; "whatever"
   107 00000007 0800000000000000        	dq 8
   108 0000000F 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   109 00000017 04                      	db T_symbol	; whatever
   110 00000018 [0600000000000000]      	dq L_constants + 6
   111 00000020 11                      	db T_rational	; 0
   112 00000021 000000000000000001-     	dq 0, 1
   112 0000002A 00000000000000     
   113 00000031 03                      	db T_string	; "+"
   114 00000032 0100000000000000        	dq 1
   115 0000003A 2B                      	db 0x2B
   116 0000003B 04                      	db T_symbol	; +
   117 0000003C [3100000000000000]      	dq L_constants + 49
   118 00000044 03                      	db T_string	; "all arguments need ...
   119 00000045 2000000000000000        	dq 32
   120 0000004D 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   121 00000055 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   122 0000005D 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   123 00000065 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   124 0000006D 03                      	db T_string	; "-"
   125 0000006E 0100000000000000        	dq 1
   126 00000076 2D                      	db 0x2D
   127 00000077 04                      	db T_symbol	; -
   128 00000078 [6D00000000000000]      	dq L_constants + 109
   129 00000080 11                      	db T_rational	; 1
   130 00000081 010000000000000001-     	dq 1, 1
   130 0000008A 00000000000000     
   131 00000091 03                      	db T_string	; "*"
   132 00000092 0100000000000000        	dq 1
   133 0000009A 2A                      	db 0x2A
   134 0000009B 04                      	db T_symbol	; *
   135 0000009C [9100000000000000]      	dq L_constants + 145
   136 000000A4 03                      	db T_string	; "/"
   137 000000A5 0100000000000000        	dq 1
   138 000000AD 2F                      	db 0x2F
   139 000000AE 04                      	db T_symbol	; /
   140 000000AF [A400000000000000]      	dq L_constants + 164
   141 000000B7 03                      	db T_string	; "generic-comparator"
   142 000000B8 1200000000000000        	dq 18
   143 000000C0 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   144 000000C8 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   145 000000D0 6F72                    	db 0x6F, 0x72
   146 000000D2 04                      	db T_symbol	; generic-comparator
   147 000000D3 [B700000000000000]      	dq L_constants + 183
   148 000000DB 03                      	db T_string	; "all the arguments m...
   149 000000DC 2100000000000000        	dq 33
   150 000000E4 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   151 000000EC 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   152 000000F4 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   153 000000FC 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   154 00000104 73                      	db 0x73
   155 00000105 03                      	db T_string	; "make-list"
   156 00000106 0900000000000000        	dq 9
   157 0000010E 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   158 00000116 74                      	db 0x74
   159 00000117 04                      	db T_symbol	; make-list
   160 00000118 [0501000000000000]      	dq L_constants + 261
   161 00000120 03                      	db T_string	; "Usage: (make-list l...
   162 00000121 2D00000000000000        	dq 45
   163 00000129 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   164 00000131 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   165 00000139 74206C656E677468        	db 0x74, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   166 00000141 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   167 00000149 616C2D696E69742D        	db 0x61, 0x6C, 0x2D, 0x69, 0x6E, 0x69, 0x74, 0x2D
   168 00000151 6368617229              	db 0x63, 0x68, 0x61, 0x72, 0x29
   169 00000156 0241                    	db T_char, 0x41	; #\A
   170 00000158 025A                    	db T_char, 0x5A	; #\Z
   171 0000015A 0261                    	db T_char, 0x61	; #\a
   172 0000015C 027A                    	db T_char, 0x7A	; #\z
   173 0000015E 03                      	db T_string	; "make-vector"
   174 0000015F 0B00000000000000        	dq 11
   175 00000167 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   176 0000016F 746F72                  	db 0x74, 0x6F, 0x72
   177 00000172 04                      	db T_symbol	; make-vector
   178 00000173 [5E01000000000000]      	dq L_constants + 350
   179 0000017B 03                      	db T_string	; "Usage: (make-vector...
   180 0000017C 2B00000000000000        	dq 43
   181 00000184 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   182 0000018C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   183 00000194 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   184 0000019C 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   185 000001A4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   186 000001AC 6C7429                  	db 0x6C, 0x74, 0x29
   187 000001AF 03                      	db T_string	; "make-string"
   188 000001B0 0B00000000000000        	dq 11
   189 000001B8 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   190 000001C0 696E67                  	db 0x69, 0x6E, 0x67
   191 000001C3 04                      	db T_symbol	; make-string
   192 000001C4 [AF01000000000000]      	dq L_constants + 431
   193 000001CC 03                      	db T_string	; "Usage: (make-string...
   194 000001CD 2B00000000000000        	dq 43
   195 000001D5 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   196 000001DD 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   197 000001E5 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   198 000001ED 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   199 000001F5 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   200 000001FD 6C7429                  	db 0x6C, 0x74, 0x29
   201 00000200 11                      	db T_rational	; 2
   202 00000201 020000000000000001-     	dq 2, 1
   202 0000020A 00000000000000     
   203 00000211 11                      	db T_rational	; 10
   204 00000212 0A0000000000000001-     	dq 10, 1
   204 0000021B 00000000000000     
   205                                  
   206                                  section .bss
   207                                  free_var_0:	; location of null?
   208 00000000 ????????????????        	resq 1
   209                                  free_var_1:	; location of pair?
   210 00000008 ????????????????        	resq 1
   211                                  free_var_2:	; location of void?
   212 00000010 ????????????????        	resq 1
   213                                  free_var_3:	; location of char?
   214 00000018 ????????????????        	resq 1
   215                                  free_var_4:	; location of string?
   216 00000020 ????????????????        	resq 1
   217                                  free_var_5:	; location of symbol?
   218 00000028 ????????????????        	resq 1
   219                                  free_var_6:	; location of vector?
   220 00000030 ????????????????        	resq 1
   221                                  free_var_7:	; location of procedure?
   222 00000038 ????????????????        	resq 1
   223                                  free_var_8:	; location of real?
   224 00000040 ????????????????        	resq 1
   225                                  free_var_9:	; location of rational?
   226 00000048 ????????????????        	resq 1
   227                                  free_var_10:	; location of boolean?
   228 00000050 ????????????????        	resq 1
   229                                  free_var_11:	; location of number?
   230 00000058 ????????????????        	resq 1
   231                                  free_var_12:	; location of collection?
   232 00000060 ????????????????        	resq 1
   233                                  free_var_13:	; location of cons
   234 00000068 ????????????????        	resq 1
   235                                  free_var_14:	; location of display-sexpr
   236 00000070 ????????????????        	resq 1
   237                                  free_var_15:	; location of write-char
   238 00000078 ????????????????        	resq 1
   239                                  free_var_16:	; location of car
   240 00000080 ????????????????        	resq 1
   241                                  free_var_17:	; location of cdr
   242 00000088 ????????????????        	resq 1
   243                                  free_var_18:	; location of string-length
   244 00000090 ????????????????        	resq 1
   245                                  free_var_19:	; location of vector-length
   246 00000098 ????????????????        	resq 1
   247                                  free_var_20:	; location of real->integer
   248 000000A0 ????????????????        	resq 1
   249                                  free_var_21:	; location of exit
   250 000000A8 ????????????????        	resq 1
   251                                  free_var_22:	; location of integer->real
   252 000000B0 ????????????????        	resq 1
   253                                  free_var_23:	; location of rational->real
   254 000000B8 ????????????????        	resq 1
   255                                  free_var_24:	; location of char->integer
   256 000000C0 ????????????????        	resq 1
   257                                  free_var_25:	; location of integer->char
   258 000000C8 ????????????????        	resq 1
   259                                  free_var_26:	; location of trng
   260 000000D0 ????????????????        	resq 1
   261                                  free_var_27:	; location of zero?
   262 000000D8 ????????????????        	resq 1
   263                                  free_var_28:	; location of integer?
   264 000000E0 ????????????????        	resq 1
   265                                  free_var_29:	; location of __bin-apply
   266 000000E8 ????????????????        	resq 1
   267                                  free_var_30:	; location of __bin-add-rr
   268 000000F0 ????????????????        	resq 1
   269                                  free_var_31:	; location of __bin-sub-rr
   270 000000F8 ????????????????        	resq 1
   271                                  free_var_32:	; location of __bin-mul-rr
   272 00000100 ????????????????        	resq 1
   273                                  free_var_33:	; location of __bin-div-rr
   274 00000108 ????????????????        	resq 1
   275                                  free_var_34:	; location of __bin-add-qq
   276 00000110 ????????????????        	resq 1
   277                                  free_var_35:	; location of __bin-sub-qq
   278 00000118 ????????????????        	resq 1
   279                                  free_var_36:	; location of __bin-mul-qq
   280 00000120 ????????????????        	resq 1
   281                                  free_var_37:	; location of __bin-div-qq
   282 00000128 ????????????????        	resq 1
   283                                  free_var_38:	; location of error
   284 00000130 ????????????????        	resq 1
   285                                  free_var_39:	; location of __bin-less-than-rr
   286 00000138 ????????????????        	resq 1
   287                                  free_var_40:	; location of __bin-less-than-qq
   288 00000140 ????????????????        	resq 1
   289                                  free_var_41:	; location of __bin-equal-rr
   290 00000148 ????????????????        	resq 1
   291                                  free_var_42:	; location of __bin-equal-qq
   292 00000150 ????????????????        	resq 1
   293                                  free_var_43:	; location of quotient
   294 00000158 ????????????????        	resq 1
   295                                  free_var_44:	; location of remainder
   296 00000160 ????????????????        	resq 1
   297                                  free_var_45:	; location of set-car!
   298 00000168 ????????????????        	resq 1
   299                                  free_var_46:	; location of set-cdr!
   300 00000170 ????????????????        	resq 1
   301                                  free_var_47:	; location of string-ref
   302 00000178 ????????????????        	resq 1
   303                                  free_var_48:	; location of vector-ref
   304 00000180 ????????????????        	resq 1
   305                                  free_var_49:	; location of vector-set!
   306 00000188 ????????????????        	resq 1
   307                                  free_var_50:	; location of string-set!
   308 00000190 ????????????????        	resq 1
   309                                  free_var_51:	; location of make-vector
   310 00000198 ????????????????        	resq 1
   311                                  free_var_52:	; location of make-string
   312 000001A0 ????????????????        	resq 1
   313                                  free_var_53:	; location of numerator
   314 000001A8 ????????????????        	resq 1
   315                                  free_var_54:	; location of denominator
   316 000001B0 ????????????????        	resq 1
   317                                  free_var_55:	; location of eq?
   318 000001B8 ????????????????        	resq 1
   319                                  free_var_56:	; location of caar
   320 000001C0 ????????????????        	resq 1
   321                                  free_var_57:	; location of cadr
   322 000001C8 ????????????????        	resq 1
   323                                  free_var_58:	; location of cdar
   324 000001D0 ????????????????        	resq 1
   325                                  free_var_59:	; location of cddr
   326 000001D8 ????????????????        	resq 1
   327                                  free_var_60:	; location of caaar
   328 000001E0 ????????????????        	resq 1
   329                                  free_var_61:	; location of caadr
   330 000001E8 ????????????????        	resq 1
   331                                  free_var_62:	; location of cadar
   332 000001F0 ????????????????        	resq 1
   333                                  free_var_63:	; location of caddr
   334 000001F8 ????????????????        	resq 1
   335                                  free_var_64:	; location of cdaar
   336 00000200 ????????????????        	resq 1
   337                                  free_var_65:	; location of cdadr
   338 00000208 ????????????????        	resq 1
   339                                  free_var_66:	; location of cddar
   340 00000210 ????????????????        	resq 1
   341                                  free_var_67:	; location of cdddr
   342 00000218 ????????????????        	resq 1
   343                                  free_var_68:	; location of caaaar
   344 00000220 ????????????????        	resq 1
   345                                  free_var_69:	; location of caaadr
   346 00000228 ????????????????        	resq 1
   347                                  free_var_70:	; location of caadar
   348 00000230 ????????????????        	resq 1
   349                                  free_var_71:	; location of caaddr
   350 00000238 ????????????????        	resq 1
   351                                  free_var_72:	; location of cadaar
   352 00000240 ????????????????        	resq 1
   353                                  free_var_73:	; location of cadadr
   354 00000248 ????????????????        	resq 1
   355                                  free_var_74:	; location of caddar
   356 00000250 ????????????????        	resq 1
   357                                  free_var_75:	; location of cadddr
   358 00000258 ????????????????        	resq 1
   359                                  free_var_76:	; location of cdaaar
   360 00000260 ????????????????        	resq 1
   361                                  free_var_77:	; location of cdaadr
   362 00000268 ????????????????        	resq 1
   363                                  free_var_78:	; location of cdadar
   364 00000270 ????????????????        	resq 1
   365                                  free_var_79:	; location of cdaddr
   366 00000278 ????????????????        	resq 1
   367                                  free_var_80:	; location of cddaar
   368 00000280 ????????????????        	resq 1
   369                                  free_var_81:	; location of cddadr
   370 00000288 ????????????????        	resq 1
   371                                  free_var_82:	; location of cdddar
   372 00000290 ????????????????        	resq 1
   373                                  free_var_83:	; location of cddddr
   374 00000298 ????????????????        	resq 1
   375                                  free_var_84:	; location of list?
   376 000002A0 ????????????????        	resq 1
   377                                  free_var_85:	; location of list
   378 000002A8 ????????????????        	resq 1
   379                                  free_var_86:	; location of not
   380 000002B0 ????????????????        	resq 1
   381                                  free_var_87:	; location of fraction?
   382 000002B8 ????????????????        	resq 1
   383                                  free_var_88:	; location of list*
   384 000002C0 ????????????????        	resq 1
   385                                  free_var_89:	; location of apply
   386 000002C8 ????????????????        	resq 1
   387                                  free_var_90:	; location of ormap
   388 000002D0 ????????????????        	resq 1
   389                                  free_var_91:	; location of map
   390 000002D8 ????????????????        	resq 1
   391                                  free_var_92:	; location of andmap
   392 000002E0 ????????????????        	resq 1
   393                                  free_var_93:	; location of reverse
   394 000002E8 ????????????????        	resq 1
   395                                  free_var_94:	; location of append
   396 000002F0 ????????????????        	resq 1
   397                                  free_var_95:	; location of fold-left
   398 000002F8 ????????????????        	resq 1
   399                                  free_var_96:	; location of fold-right
   400 00000300 ????????????????        	resq 1
   401                                  free_var_97:	; location of +
   402 00000308 ????????????????        	resq 1
   403                                  free_var_98:	; location of -
   404 00000310 ????????????????        	resq 1
   405                                  free_var_99:	; location of *
   406 00000318 ????????????????        	resq 1
   407                                  free_var_100:	; location of /
   408 00000320 ????????????????        	resq 1
   409                                  free_var_101:	; location of fact
   410 00000328 ????????????????        	resq 1
   411                                  free_var_102:	; location of <
   412 00000330 ????????????????        	resq 1
   413                                  free_var_103:	; location of <=
   414 00000338 ????????????????        	resq 1
   415                                  free_var_104:	; location of >
   416 00000340 ????????????????        	resq 1
   417                                  free_var_105:	; location of >=
   418 00000348 ????????????????        	resq 1
   419                                  free_var_106:	; location of =
   420 00000350 ????????????????        	resq 1
   421                                  free_var_107:	; location of make-list
   422 00000358 ????????????????        	resq 1
   423                                  free_var_108:	; location of char<?
   424 00000360 ????????????????        	resq 1
   425                                  free_var_109:	; location of char<=?
   426 00000368 ????????????????        	resq 1
   427                                  free_var_110:	; location of char=?
   428 00000370 ????????????????        	resq 1
   429                                  free_var_111:	; location of char>?
   430 00000378 ????????????????        	resq 1
   431                                  free_var_112:	; location of char>=?
   432 00000380 ????????????????        	resq 1
   433                                  free_var_113:	; location of char-downcase
   434 00000388 ????????????????        	resq 1
   435                                  free_var_114:	; location of char-upcase
   436 00000390 ????????????????        	resq 1
   437                                  free_var_115:	; location of char-ci<?
   438 00000398 ????????????????        	resq 1
   439                                  free_var_116:	; location of char-ci<=?
   440 000003A0 ????????????????        	resq 1
   441                                  free_var_117:	; location of char-ci=?
   442 000003A8 ????????????????        	resq 1
   443                                  free_var_118:	; location of char-ci>?
   444 000003B0 ????????????????        	resq 1
   445                                  free_var_119:	; location of char-ci>=?
   446 000003B8 ????????????????        	resq 1
   447                                  free_var_120:	; location of string-downcase
   448 000003C0 ????????????????        	resq 1
   449                                  free_var_121:	; location of string-upcase
   450 000003C8 ????????????????        	resq 1
   451                                  free_var_122:	; location of list->string
   452 000003D0 ????????????????        	resq 1
   453                                  free_var_123:	; location of string->list
   454 000003D8 ????????????????        	resq 1
   455                                  free_var_124:	; location of string<?
   456 000003E0 ????????????????        	resq 1
   457                                  free_var_125:	; location of string<=?
   458 000003E8 ????????????????        	resq 1
   459                                  free_var_126:	; location of string=?
   460 000003F0 ????????????????        	resq 1
   461                                  free_var_127:	; location of string>=?
   462 000003F8 ????????????????        	resq 1
   463                                  free_var_128:	; location of string>?
   464 00000400 ????????????????        	resq 1
   465                                  free_var_129:	; location of string-ci<?
   466 00000408 ????????????????        	resq 1
   467                                  free_var_130:	; location of string-ci<=?
   468 00000410 ????????????????        	resq 1
   469                                  free_var_131:	; location of string-ci=?
   470 00000418 ????????????????        	resq 1
   471                                  free_var_132:	; location of string-ci>=?
   472 00000420 ????????????????        	resq 1
   473                                  free_var_133:	; location of string-ci>?
   474 00000428 ????????????????        	resq 1
   475                                  free_var_134:	; location of length
   476 00000430 ????????????????        	resq 1
   477                                  free_var_135:	; location of list->vector
   478 00000438 ????????????????        	resq 1
   479                                  free_var_136:	; location of vector
   480 00000440 ????????????????        	resq 1
   481                                  free_var_137:	; location of vector->list
   482 00000448 ????????????????        	resq 1
   483                                  free_var_138:	; location of random
   484 00000450 ????????????????        	resq 1
   485                                  free_var_139:	; location of positive?
   486 00000458 ????????????????        	resq 1
   487                                  free_var_140:	; location of negative?
   488 00000460 ????????????????        	resq 1
   489                                  free_var_141:	; location of even?
   490 00000468 ????????????????        	resq 1
   491                                  free_var_142:	; location of odd?
   492 00000470 ????????????????        	resq 1
   493                                  free_var_143:	; location of abs
   494 00000478 ????????????????        	resq 1
   495                                  free_var_144:	; location of equal?
   496 00000480 ????????????????        	resq 1
   497                                  free_var_145:	; location of assoc
   498 00000488 ????????????????        	resq 1
   499                                  
   500                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   501                                  global main
   502                                  section .text
   503                                  main:
   504 00000000 C8000000                        enter 0, 0
   505                                          
   506                                  	; building closure for null?
   507 00000004 48BF-                   	mov rdi, free_var_0
   507 00000006 [0000000000000000] 
   508 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   508 00000010 [772F010000000000] 
   509 00000018 E8282E0100              	call bind_primitive
   510                                  
   511                                  	; building closure for pair?
   512 0000001D 48BF-                   	mov rdi, free_var_1
   512 0000001F [0800000000000000] 
   513 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   513 00000029 [AD2F010000000000] 
   514 00000031 E80F2E0100              	call bind_primitive
   515                                  
   516                                  	; building closure for void?
   517 00000036 48BF-                   	mov rdi, free_var_2
   517 00000038 [1000000000000000] 
   518 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   518 00000042 [E32F010000000000] 
   519 0000004A E8F62D0100              	call bind_primitive
   520                                  
   521                                  	; building closure for char?
   522 0000004F 48BF-                   	mov rdi, free_var_3
   522 00000051 [1800000000000000] 
   523 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   523 0000005B [1930010000000000] 
   524 00000063 E8DD2D0100              	call bind_primitive
   525                                  
   526                                  	; building closure for string?
   527 00000068 48BF-                   	mov rdi, free_var_4
   527 0000006A [2000000000000000] 
   528 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   528 00000074 [4F30010000000000] 
   529 0000007C E8C42D0100              	call bind_primitive
   530                                  
   531                                  	; building closure for symbol?
   532 00000081 48BF-                   	mov rdi, free_var_5
   532 00000083 [2800000000000000] 
   533 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   533 0000008D [8530010000000000] 
   534 00000095 E8AB2D0100              	call bind_primitive
   535                                  
   536                                  	; building closure for vector?
   537 0000009A 48BF-                   	mov rdi, free_var_6
   537 0000009C [3000000000000000] 
   538 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   538 000000A6 [BB30010000000000] 
   539 000000AE E8922D0100              	call bind_primitive
   540                                  
   541                                  	; building closure for procedure?
   542 000000B3 48BF-                   	mov rdi, free_var_7
   542 000000B5 [3800000000000000] 
   543 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   543 000000BF [F130010000000000] 
   544 000000C7 E8792D0100              	call bind_primitive
   545                                  
   546                                  	; building closure for real?
   547 000000CC 48BF-                   	mov rdi, free_var_8
   547 000000CE [4000000000000000] 
   548 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   548 000000D8 [2731010000000000] 
   549 000000E0 E8602D0100              	call bind_primitive
   550                                  
   551                                  	; building closure for rational?
   552 000000E5 48BF-                   	mov rdi, free_var_9
   552 000000E7 [4800000000000000] 
   553 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   553 000000F1 [5D31010000000000] 
   554 000000F9 E8472D0100              	call bind_primitive
   555                                  
   556                                  	; building closure for boolean?
   557 000000FE 48BF-                   	mov rdi, free_var_10
   557 00000100 [5000000000000000] 
   558 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   558 0000010A [9331010000000000] 
   559 00000112 E82E2D0100              	call bind_primitive
   560                                  
   561                                  	; building closure for number?
   562 00000117 48BF-                   	mov rdi, free_var_11
   562 00000119 [5800000000000000] 
   563 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   563 00000123 [CB31010000000000] 
   564 0000012B E8152D0100              	call bind_primitive
   565                                  
   566                                  	; building closure for collection?
   567 00000130 48BF-                   	mov rdi, free_var_12
   567 00000132 [6000000000000000] 
   568 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   568 0000013C [0332010000000000] 
   569 00000144 E8FC2C0100              	call bind_primitive
   570                                  
   571                                  	; building closure for cons
   572 00000149 48BF-                   	mov rdi, free_var_13
   572 0000014B [6800000000000000] 
   573 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   573 00000155 [3B32010000000000] 
   574 0000015D E8E32C0100              	call bind_primitive
   575                                  
   576                                  	; building closure for display-sexpr
   577 00000162 48BF-                   	mov rdi, free_var_14
   577 00000164 [7000000000000000] 
   578 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   578 0000016E [6F32010000000000] 
   579 00000176 E8CA2C0100              	call bind_primitive
   580                                  
   581                                  	; building closure for write-char
   582 0000017B 48BF-                   	mov rdi, free_var_15
   582 0000017D [7800000000000000] 
   583 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   583 00000187 [9932010000000000] 
   584 0000018F E8B12C0100              	call bind_primitive
   585                                  
   586                                  	; building closure for car
   587 00000194 48BF-                   	mov rdi, free_var_16
   587 00000196 [8000000000000000] 
   588 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   588 000001A0 [F032010000000000] 
   589 000001A8 E8982C0100              	call bind_primitive
   590                                  
   591                                  	; building closure for cdr
   592 000001AD 48BF-                   	mov rdi, free_var_17
   592 000001AF [8800000000000000] 
   593 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   593 000001B9 [1833010000000000] 
   594 000001C1 E87F2C0100              	call bind_primitive
   595                                  
   596                                  	; building closure for string-length
   597 000001C6 48BF-                   	mov rdi, free_var_18
   597 000001C8 [9000000000000000] 
   598 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   598 000001D2 [4033010000000000] 
   599 000001DA E8662C0100              	call bind_primitive
   600                                  
   601                                  	; building closure for vector-length
   602 000001DF 48BF-                   	mov rdi, free_var_19
   602 000001E1 [9800000000000000] 
   603 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   603 000001EB [6D33010000000000] 
   604 000001F3 E84D2C0100              	call bind_primitive
   605                                  
   606                                  	; building closure for real->integer
   607 000001F8 48BF-                   	mov rdi, free_var_20
   607 000001FA [A000000000000000] 
   608 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   608 00000204 [9A33010000000000] 
   609 0000020C E8342C0100              	call bind_primitive
   610                                  
   611                                  	; building closure for exit
   612 00000211 48BF-                   	mov rdi, free_var_21
   612 00000213 [A800000000000000] 
   613 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   613 0000021D [CD33010000000000] 
   614 00000225 E81B2C0100              	call bind_primitive
   615                                  
   616                                  	; building closure for integer->real
   617 0000022A 48BF-                   	mov rdi, free_var_22
   617 0000022C [B000000000000000] 
   618 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   618 00000236 [EA33010000000000] 
   619 0000023E E8022C0100              	call bind_primitive
   620                                  
   621                                  	; building closure for rational->real
   622 00000243 48BF-                   	mov rdi, free_var_23
   622 00000245 [B800000000000000] 
   623 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   623 0000024F [2734010000000000] 
   624 00000257 E8E92B0100              	call bind_primitive
   625                                  
   626                                  	; building closure for char->integer
   627 0000025C 48BF-                   	mov rdi, free_var_24
   627 0000025E [C000000000000000] 
   628 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   628 00000268 [6634010000000000] 
   629 00000270 E8D02B0100              	call bind_primitive
   630                                  
   631                                  	; building closure for integer->char
   632 00000275 48BF-                   	mov rdi, free_var_25
   632 00000277 [C800000000000000] 
   633 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   633 00000281 [9B34010000000000] 
   634 00000289 E8B72B0100              	call bind_primitive
   635                                  
   636                                  	; building closure for trng
   637 0000028E 48BF-                   	mov rdi, free_var_26
   637 00000290 [D000000000000000] 
   638 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   638 0000029A [F534010000000000] 
   639 000002A2 E89E2B0100              	call bind_primitive
   640                                  
   641                                  	; building closure for zero?
   642 000002A7 48BF-                   	mov rdi, free_var_27
   642 000002A9 [D800000000000000] 
   643 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   643 000002B3 [1835010000000000] 
   644 000002BB E8852B0100              	call bind_primitive
   645                                  
   646                                  	; building closure for integer?
   647 000002C0 48BF-                   	mov rdi, free_var_28
   647 000002C2 [E000000000000000] 
   648 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   648 000002CC [7335010000000000] 
   649 000002D4 E86C2B0100              	call bind_primitive
   650                                  
   651                                  	; building closure for __bin-apply
   652 000002D9 48BF-                   	mov rdi, free_var_29
   652 000002DB [E800000000000000] 
   653 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   653 000002E5 [6D2E010000000000] 
   654 000002ED E8532B0100              	call bind_primitive
   655                                  
   656                                  	; building closure for __bin-add-rr
   657 000002F2 48BF-                   	mov rdi, free_var_30
   657 000002F4 [F000000000000000] 
   658 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   658 000002FE [B035010000000000] 
   659 00000306 E83A2B0100              	call bind_primitive
   660                                  
   661                                  	; building closure for __bin-sub-rr
   662 0000030B 48BF-                   	mov rdi, free_var_31
   662 0000030D [F800000000000000] 
   663 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   663 00000317 [F435010000000000] 
   664 0000031F E8212B0100              	call bind_primitive
   665                                  
   666                                  	; building closure for __bin-mul-rr
   667 00000324 48BF-                   	mov rdi, free_var_32
   667 00000326 [0001000000000000] 
   668 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   668 00000330 [3836010000000000] 
   669 00000338 E8082B0100              	call bind_primitive
   670                                  
   671                                  	; building closure for __bin-div-rr
   672 0000033D 48BF-                   	mov rdi, free_var_33
   672 0000033F [0801000000000000] 
   673 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   673 00000349 [7C36010000000000] 
   674 00000351 E8EF2A0100              	call bind_primitive
   675                                  
   676                                  	; building closure for __bin-add-qq
   677 00000356 48BF-                   	mov rdi, free_var_34
   677 00000358 [1001000000000000] 
   678 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   678 00000362 [CE36010000000000] 
   679 0000036A E8D62A0100              	call bind_primitive
   680                                  
   681                                  	; building closure for __bin-sub-qq
   682 0000036F 48BF-                   	mov rdi, free_var_35
   682 00000371 [1801000000000000] 
   683 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   683 0000037B [3637010000000000] 
   684 00000383 E8BD2A0100              	call bind_primitive
   685                                  
   686                                  	; building closure for __bin-mul-qq
   687 00000388 48BF-                   	mov rdi, free_var_36
   687 0000038A [2001000000000000] 
   688 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   688 00000394 [9E37010000000000] 
   689 0000039C E8A42A0100              	call bind_primitive
   690                                  
   691                                  	; building closure for __bin-div-qq
   692 000003A1 48BF-                   	mov rdi, free_var_37
   692 000003A3 [2801000000000000] 
   693 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   693 000003AD [F637010000000000] 
   694 000003B5 E88B2A0100              	call bind_primitive
   695                                  
   696                                  	; building closure for error
   697 000003BA 48BF-                   	mov rdi, free_var_38
   697 000003BC [3001000000000000] 
   698 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   698 000003C6 [C438010000000000] 
   699 000003CE E8722A0100              	call bind_primitive
   700                                  
   701                                  	; building closure for __bin-less-than-rr
   702 000003D3 48BF-                   	mov rdi, free_var_39
   702 000003D5 [3801000000000000] 
   703 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   703 000003DF [7B39010000000000] 
   704 000003E7 E8592A0100              	call bind_primitive
   705                                  
   706                                  	; building closure for __bin-less-than-qq
   707 000003EC 48BF-                   	mov rdi, free_var_40
   707 000003EE [4001000000000000] 
   708 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   708 000003F8 [D239010000000000] 
   709 00000400 E8402A0100              	call bind_primitive
   710                                  
   711                                  	; building closure for __bin-equal-rr
   712 00000405 48BF-                   	mov rdi, free_var_41
   712 00000407 [4801000000000000] 
   713 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   713 00000411 [353A010000000000] 
   714 00000419 E8272A0100              	call bind_primitive
   715                                  
   716                                  	; building closure for __bin-equal-qq
   717 0000041E 48BF-                   	mov rdi, free_var_42
   717 00000420 [5001000000000000] 
   718 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   718 0000042A [8C3A010000000000] 
   719 00000432 E80E2A0100              	call bind_primitive
   720                                  
   721                                  	; building closure for quotient
   722 00000437 48BF-                   	mov rdi, free_var_43
   722 00000439 [5801000000000000] 
   723 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   723 00000443 [EF3A010000000000] 
   724 0000044B E8F5290100              	call bind_primitive
   725                                  
   726                                  	; building closure for remainder
   727 00000450 48BF-                   	mov rdi, free_var_44
   727 00000452 [6001000000000000] 
   728 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   728 0000045C [553B010000000000] 
   729 00000464 E8DC290100              	call bind_primitive
   730                                  
   731                                  	; building closure for set-car!
   732 00000469 48BF-                   	mov rdi, free_var_45
   732 0000046B [6801000000000000] 
   733 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   733 00000475 [BB3B010000000000] 
   734 0000047D E8C3290100              	call bind_primitive
   735                                  
   736                                  	; building closure for set-cdr!
   737 00000482 48BF-                   	mov rdi, free_var_46
   737 00000484 [7001000000000000] 
   738 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   738 0000048E [F13B010000000000] 
   739 00000496 E8AA290100              	call bind_primitive
   740                                  
   741                                  	; building closure for string-ref
   742 0000049B 48BF-                   	mov rdi, free_var_47
   742 0000049D [7801000000000000] 
   743 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   743 000004A7 [273C010000000000] 
   744 000004AF E891290100              	call bind_primitive
   745                                  
   746                                  	; building closure for vector-ref
   747 000004B4 48BF-                   	mov rdi, free_var_48
   747 000004B6 [8001000000000000] 
   748 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   748 000004C0 [923C010000000000] 
   749 000004C8 E878290100              	call bind_primitive
   750                                  
   751                                  	; building closure for vector-set!
   752 000004CD 48BF-                   	mov rdi, free_var_49
   752 000004CF [8801000000000000] 
   753 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   753 000004D9 [EE3C010000000000] 
   754 000004E1 E85F290100              	call bind_primitive
   755                                  
   756                                  	; building closure for string-set!
   757 000004E6 48BF-                   	mov rdi, free_var_50
   757 000004E8 [9001000000000000] 
   758 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   758 000004F2 [583D010000000000] 
   759 000004FA E846290100              	call bind_primitive
   760                                  
   761                                  	; building closure for make-vector
   762 000004FF 48BF-                   	mov rdi, free_var_51
   762 00000501 [9801000000000000] 
   763 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   763 0000050B [CD3D010000000000] 
   764 00000513 E82D290100              	call bind_primitive
   765                                  
   766                                  	; building closure for make-string
   767 00000518 48BF-                   	mov rdi, free_var_52
   767 0000051A [A001000000000000] 
   768 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   768 00000524 [373E010000000000] 
   769 0000052C E814290100              	call bind_primitive
   770                                  
   771                                  	; building closure for numerator
   772 00000531 48BF-                   	mov rdi, free_var_53
   772 00000533 [A801000000000000] 
   773 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   773 0000053D [A93E010000000000] 
   774 00000545 E8FB280100              	call bind_primitive
   775                                  
   776                                  	; building closure for denominator
   777 0000054A 48BF-                   	mov rdi, free_var_54
   777 0000054C [B001000000000000] 
   778 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   778 00000556 [D63E010000000000] 
   779 0000055E E8E2280100              	call bind_primitive
   780                                  
   781                                  	; building closure for eq?
   782 00000563 48BF-                   	mov rdi, free_var_55
   782 00000565 [B801000000000000] 
   783 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   783 0000056F [033F010000000000] 
   784 00000577 E8C9280100              	call bind_primitive
   785                                  
   786 0000057C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   787 00000581 E82E230100              	call malloc
   788 00000586 50                      	push rax
   789 00000587 BF00000000              	mov rdi, 8 * 0	; new rib
   790 0000058C E823230100              	call malloc
   791 00000591 50                      	push rax
   792 00000592 BF08000000              	mov rdi, 8 * 1	; extended env
   793 00000597 E818230100              	call malloc
   794 0000059C 488B7D10                	mov rdi, ENV
   795 000005A0 BE00000000              	mov rsi, 0
   796 000005A5 BA01000000              	mov rdx, 1
   797                                  .L_lambda_simple_env_loop_4f29:	; ext_env[i + 1] <-- env[i]
   798 000005AA 4883FE00                	cmp rsi, 0
   799 000005AE 7410                    	je .L_lambda_simple_env_end_4f29
   800 000005B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
   801 000005B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
   802 000005B8 48FFC6                  	inc rsi
   803 000005BB 48FFC2                  	inc rdx
   804 000005BE EBEA                    	jmp .L_lambda_simple_env_loop_4f29
   805                                  .L_lambda_simple_env_end_4f29:
   806 000005C0 5B                      	pop rbx
   807 000005C1 BE00000000              	mov rsi, 0
   808                                  .L_lambda_simple_params_loop_4f29:	; copy params
   809 000005C6 4883FE00                	cmp rsi, 0
   810 000005CA 740E                    	je .L_lambda_simple_params_end_4f29
   811 000005CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   812 000005D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
   813 000005D5 48FFC6                  	inc rsi
   814 000005D8 EBEC                    	jmp .L_lambda_simple_params_loop_4f29
   815                                  .L_lambda_simple_params_end_4f29:
   816 000005DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   817 000005DD 4889C3                  	mov rbx, rax
   818 000005E0 58                      	pop rax
   819 000005E1 C60005                  	mov byte [rax], T_closure
   820 000005E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   821 000005E8 48C74009[F5050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f29
   822 000005F0 E9B7000000              	jmp .L_lambda_simple_end_4f29
   823                                  .L_lambda_simple_code_4f29:	; lambda-simple body
   824 000005F5 48837C241001            	cmp qword [rsp + 8 * 2], 1
   825 000005FB 740B                    	je .L_lambda_simple_arity_check_ok_4f29
   826 000005FD FF742410                	push qword [rsp + 8 * 2]
   827 00000601 6A01                    	push 1
   828 00000603 E965220100              	jmp L_error_incorrect_arity_simple
   829                                  .L_lambda_simple_arity_check_ok_4f29:
   830 00000608 C8000000                	enter 0, 0
   831 0000060C 488B4520                	mov rax, PARAM(0)
   832 00000610 50                      	push rax
   833 00000611 6A01                    	push 1
   834 00000613 488B0425[80000000]      	mov rax, qword [free_var_16]
   835                                  	assert_closure(rax)
    65 0000061B 803805              <1>  cmp byte [%1], %2
    66 0000061E 0F85103B0100        <1>  jne L_error_incorrect_type
   836 00000624 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   837 00000628 53                      	push rbx
   838 00000629 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   839 0000062D FFD3                    	call rbx
   840 0000062F 50                      	push rax
   841 00000630 6A01                    	push 1
   842 00000632 488B0425[80000000]      	mov rax, qword [free_var_16]
   843                                  	assert_closure(rax)
    65 0000063A 803805              <1>  cmp byte [%1], %2
    66 0000063D 0F85F13A0100        <1>  jne L_error_incorrect_type
   844 00000643 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   845 00000647 53                      	push rbx
   846 00000648 FF7508                  	push RET_ADDR
   847 0000064B 488B7D18                	mov rdi, COUNT
   848 0000064F 4883C703                	add rdi, 3
   849 00000653 48C1E703                	shl rdi, 3
   850 00000657 4801EF                  	add rdi, rbp
   851 0000065A 488B6D00                	mov rbp, OLD_RDP
   852 0000065E BE00000000              	mov rsi, 0
   853                                  .L_tc_recycle_frame_loop_5c9d:	 ; start recycle frame loop
   854 00000663 4883FE04                	cmp rsi, 4
   855 00000667 7427                    	je .L_tc_recycle_frame_done_5c9d
   856 00000669 B903000000              	mov rcx, 3
   857 0000066E 4829F1                  	sub rcx, rsi
   858 00000671 48C1E103                	shl rcx, 3
   859 00000675 4801E1                  	add rcx, rsp ; rcx is the address to move
   860 00000678 4889F3                  	mov rbx, rsi
   861 0000067B 48C1E303                	shl rbx, 3
   862 0000067F 48F7DB                  	neg rbx
   863 00000682 4801FB                  	add rbx, rdi ;rbx is the address to move to
   864 00000685 488B09                  	mov rcx, [rcx]
   865 00000688 48890B                  	mov [rbx], rcx
   866 0000068B 48FFC6                  	inc rsi
   867 0000068E EBD3                    	jmp .L_tc_recycle_frame_loop_5c9d
   868                                  .L_tc_recycle_frame_done_5c9d:	 ; end recycle frame loop
   869 00000690 BB03000000              	mov rbx, 3
   870 00000695 48C1E303                	shl rbx, 3
   871 00000699 48F7DB                  	neg rbx
   872 0000069C 4801FB                  	add rbx, rdi
   873 0000069F 4889DC                  	mov rsp, rbx
   874 000006A2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   875 000006A6 FFE3                    	jmp rbx
   876 000006A8 C9                      	leave
   877 000006A9 C21800                  	ret 8 * (2 + 1)
   878                                  .L_lambda_simple_end_4f29:	; new closure is in rax
   879 000006AC 48890425[C0010000]      	mov qword [free_var_56], rax
   880 000006B4 48B8-                   	mov rax, sob_void
   880 000006B6 [0000000000000000] 
   881                                  
   882 000006BE 4889C7                  	mov rdi, rax
   883 000006C1 E8FF210100              	call print_sexpr_if_not_void
   884                                  
   885 000006C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   886 000006CB E8E4210100              	call malloc
   887 000006D0 50                      	push rax
   888 000006D1 BF00000000              	mov rdi, 8 * 0	; new rib
   889 000006D6 E8D9210100              	call malloc
   890 000006DB 50                      	push rax
   891 000006DC BF08000000              	mov rdi, 8 * 1	; extended env
   892 000006E1 E8CE210100              	call malloc
   893 000006E6 488B7D10                	mov rdi, ENV
   894 000006EA BE00000000              	mov rsi, 0
   895 000006EF BA01000000              	mov rdx, 1
   896                                  .L_lambda_simple_env_loop_4f2a:	; ext_env[i + 1] <-- env[i]
   897 000006F4 4883FE00                	cmp rsi, 0
   898 000006F8 7410                    	je .L_lambda_simple_env_end_4f2a
   899 000006FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
   900 000006FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
   901 00000702 48FFC6                  	inc rsi
   902 00000705 48FFC2                  	inc rdx
   903 00000708 EBEA                    	jmp .L_lambda_simple_env_loop_4f2a
   904                                  .L_lambda_simple_env_end_4f2a:
   905 0000070A 5B                      	pop rbx
   906 0000070B BE00000000              	mov rsi, 0
   907                                  .L_lambda_simple_params_loop_4f2a:	; copy params
   908 00000710 4883FE00                	cmp rsi, 0
   909 00000714 740E                    	je .L_lambda_simple_params_end_4f2a
   910 00000716 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   911 0000071B 488914F3                	mov qword [rbx + 8 * rsi], rdx
   912 0000071F 48FFC6                  	inc rsi
   913 00000722 EBEC                    	jmp .L_lambda_simple_params_loop_4f2a
   914                                  .L_lambda_simple_params_end_4f2a:
   915 00000724 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   916 00000727 4889C3                  	mov rbx, rax
   917 0000072A 58                      	pop rax
   918 0000072B C60005                  	mov byte [rax], T_closure
   919 0000072E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   920 00000732 48C74009[3F070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f2a
   921 0000073A E9B7000000              	jmp .L_lambda_simple_end_4f2a
   922                                  .L_lambda_simple_code_4f2a:	; lambda-simple body
   923 0000073F 48837C241001            	cmp qword [rsp + 8 * 2], 1
   924 00000745 740B                    	je .L_lambda_simple_arity_check_ok_4f2a
   925 00000747 FF742410                	push qword [rsp + 8 * 2]
   926 0000074B 6A01                    	push 1
   927 0000074D E91B210100              	jmp L_error_incorrect_arity_simple
   928                                  .L_lambda_simple_arity_check_ok_4f2a:
   929 00000752 C8000000                	enter 0, 0
   930 00000756 488B4520                	mov rax, PARAM(0)
   931 0000075A 50                      	push rax
   932 0000075B 6A01                    	push 1
   933 0000075D 488B0425[88000000]      	mov rax, qword [free_var_17]
   934                                  	assert_closure(rax)
    65 00000765 803805              <1>  cmp byte [%1], %2
    66 00000768 0F85C6390100        <1>  jne L_error_incorrect_type
   935 0000076E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   936 00000772 53                      	push rbx
   937 00000773 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   938 00000777 FFD3                    	call rbx
   939 00000779 50                      	push rax
   940 0000077A 6A01                    	push 1
   941 0000077C 488B0425[80000000]      	mov rax, qword [free_var_16]
   942                                  	assert_closure(rax)
    65 00000784 803805              <1>  cmp byte [%1], %2
    66 00000787 0F85A7390100        <1>  jne L_error_incorrect_type
   943 0000078D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   944 00000791 53                      	push rbx
   945 00000792 FF7508                  	push RET_ADDR
   946 00000795 488B7D18                	mov rdi, COUNT
   947 00000799 4883C703                	add rdi, 3
   948 0000079D 48C1E703                	shl rdi, 3
   949 000007A1 4801EF                  	add rdi, rbp
   950 000007A4 488B6D00                	mov rbp, OLD_RDP
   951 000007A8 BE00000000              	mov rsi, 0
   952                                  .L_tc_recycle_frame_loop_5c9e:	 ; start recycle frame loop
   953 000007AD 4883FE04                	cmp rsi, 4
   954 000007B1 7427                    	je .L_tc_recycle_frame_done_5c9e
   955 000007B3 B903000000              	mov rcx, 3
   956 000007B8 4829F1                  	sub rcx, rsi
   957 000007BB 48C1E103                	shl rcx, 3
   958 000007BF 4801E1                  	add rcx, rsp ; rcx is the address to move
   959 000007C2 4889F3                  	mov rbx, rsi
   960 000007C5 48C1E303                	shl rbx, 3
   961 000007C9 48F7DB                  	neg rbx
   962 000007CC 4801FB                  	add rbx, rdi ;rbx is the address to move to
   963 000007CF 488B09                  	mov rcx, [rcx]
   964 000007D2 48890B                  	mov [rbx], rcx
   965 000007D5 48FFC6                  	inc rsi
   966 000007D8 EBD3                    	jmp .L_tc_recycle_frame_loop_5c9e
   967                                  .L_tc_recycle_frame_done_5c9e:	 ; end recycle frame loop
   968 000007DA BB03000000              	mov rbx, 3
   969 000007DF 48C1E303                	shl rbx, 3
   970 000007E3 48F7DB                  	neg rbx
   971 000007E6 4801FB                  	add rbx, rdi
   972 000007E9 4889DC                  	mov rsp, rbx
   973 000007EC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   974 000007F0 FFE3                    	jmp rbx
   975 000007F2 C9                      	leave
   976 000007F3 C21800                  	ret 8 * (2 + 1)
   977                                  .L_lambda_simple_end_4f2a:	; new closure is in rax
   978 000007F6 48890425[C8010000]      	mov qword [free_var_57], rax
   979 000007FE 48B8-                   	mov rax, sob_void
   979 00000800 [0000000000000000] 
   980                                  
   981 00000808 4889C7                  	mov rdi, rax
   982 0000080B E8B5200100              	call print_sexpr_if_not_void
   983                                  
   984 00000810 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   985 00000815 E89A200100              	call malloc
   986 0000081A 50                      	push rax
   987 0000081B BF00000000              	mov rdi, 8 * 0	; new rib
   988 00000820 E88F200100              	call malloc
   989 00000825 50                      	push rax
   990 00000826 BF08000000              	mov rdi, 8 * 1	; extended env
   991 0000082B E884200100              	call malloc
   992 00000830 488B7D10                	mov rdi, ENV
   993 00000834 BE00000000              	mov rsi, 0
   994 00000839 BA01000000              	mov rdx, 1
   995                                  .L_lambda_simple_env_loop_4f2b:	; ext_env[i + 1] <-- env[i]
   996 0000083E 4883FE00                	cmp rsi, 0
   997 00000842 7410                    	je .L_lambda_simple_env_end_4f2b
   998 00000844 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
   999 00000848 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1000 0000084C 48FFC6                  	inc rsi
  1001 0000084F 48FFC2                  	inc rdx
  1002 00000852 EBEA                    	jmp .L_lambda_simple_env_loop_4f2b
  1003                                  .L_lambda_simple_env_end_4f2b:
  1004 00000854 5B                      	pop rbx
  1005 00000855 BE00000000              	mov rsi, 0
  1006                                  .L_lambda_simple_params_loop_4f2b:	; copy params
  1007 0000085A 4883FE00                	cmp rsi, 0
  1008 0000085E 740E                    	je .L_lambda_simple_params_end_4f2b
  1009 00000860 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1010 00000865 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1011 00000869 48FFC6                  	inc rsi
  1012 0000086C EBEC                    	jmp .L_lambda_simple_params_loop_4f2b
  1013                                  .L_lambda_simple_params_end_4f2b:
  1014 0000086E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1015 00000871 4889C3                  	mov rbx, rax
  1016 00000874 58                      	pop rax
  1017 00000875 C60005                  	mov byte [rax], T_closure
  1018 00000878 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1019 0000087C 48C74009[89080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f2b
  1020 00000884 E9B7000000              	jmp .L_lambda_simple_end_4f2b
  1021                                  .L_lambda_simple_code_4f2b:	; lambda-simple body
  1022 00000889 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1023 0000088F 740B                    	je .L_lambda_simple_arity_check_ok_4f2b
  1024 00000891 FF742410                	push qword [rsp + 8 * 2]
  1025 00000895 6A01                    	push 1
  1026 00000897 E9D11F0100              	jmp L_error_incorrect_arity_simple
  1027                                  .L_lambda_simple_arity_check_ok_4f2b:
  1028 0000089C C8000000                	enter 0, 0
  1029 000008A0 488B4520                	mov rax, PARAM(0)
  1030 000008A4 50                      	push rax
  1031 000008A5 6A01                    	push 1
  1032 000008A7 488B0425[80000000]      	mov rax, qword [free_var_16]
  1033                                  	assert_closure(rax)
    65 000008AF 803805              <1>  cmp byte [%1], %2
    66 000008B2 0F857C380100        <1>  jne L_error_incorrect_type
  1034 000008B8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1035 000008BC 53                      	push rbx
  1036 000008BD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1037 000008C1 FFD3                    	call rbx
  1038 000008C3 50                      	push rax
  1039 000008C4 6A01                    	push 1
  1040 000008C6 488B0425[88000000]      	mov rax, qword [free_var_17]
  1041                                  	assert_closure(rax)
    65 000008CE 803805              <1>  cmp byte [%1], %2
    66 000008D1 0F855D380100        <1>  jne L_error_incorrect_type
  1042 000008D7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1043 000008DB 53                      	push rbx
  1044 000008DC FF7508                  	push RET_ADDR
  1045 000008DF 488B7D18                	mov rdi, COUNT
  1046 000008E3 4883C703                	add rdi, 3
  1047 000008E7 48C1E703                	shl rdi, 3
  1048 000008EB 4801EF                  	add rdi, rbp
  1049 000008EE 488B6D00                	mov rbp, OLD_RDP
  1050 000008F2 BE00000000              	mov rsi, 0
  1051                                  .L_tc_recycle_frame_loop_5c9f:	 ; start recycle frame loop
  1052 000008F7 4883FE04                	cmp rsi, 4
  1053 000008FB 7427                    	je .L_tc_recycle_frame_done_5c9f
  1054 000008FD B903000000              	mov rcx, 3
  1055 00000902 4829F1                  	sub rcx, rsi
  1056 00000905 48C1E103                	shl rcx, 3
  1057 00000909 4801E1                  	add rcx, rsp ; rcx is the address to move
  1058 0000090C 4889F3                  	mov rbx, rsi
  1059 0000090F 48C1E303                	shl rbx, 3
  1060 00000913 48F7DB                  	neg rbx
  1061 00000916 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1062 00000919 488B09                  	mov rcx, [rcx]
  1063 0000091C 48890B                  	mov [rbx], rcx
  1064 0000091F 48FFC6                  	inc rsi
  1065 00000922 EBD3                    	jmp .L_tc_recycle_frame_loop_5c9f
  1066                                  .L_tc_recycle_frame_done_5c9f:	 ; end recycle frame loop
  1067 00000924 BB03000000              	mov rbx, 3
  1068 00000929 48C1E303                	shl rbx, 3
  1069 0000092D 48F7DB                  	neg rbx
  1070 00000930 4801FB                  	add rbx, rdi
  1071 00000933 4889DC                  	mov rsp, rbx
  1072 00000936 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1073 0000093A FFE3                    	jmp rbx
  1074 0000093C C9                      	leave
  1075 0000093D C21800                  	ret 8 * (2 + 1)
  1076                                  .L_lambda_simple_end_4f2b:	; new closure is in rax
  1077 00000940 48890425[D0010000]      	mov qword [free_var_58], rax
  1078 00000948 48B8-                   	mov rax, sob_void
  1078 0000094A [0000000000000000] 
  1079                                  
  1080 00000952 4889C7                  	mov rdi, rax
  1081 00000955 E86B1F0100              	call print_sexpr_if_not_void
  1082                                  
  1083 0000095A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1084 0000095F E8501F0100              	call malloc
  1085 00000964 50                      	push rax
  1086 00000965 BF00000000              	mov rdi, 8 * 0	; new rib
  1087 0000096A E8451F0100              	call malloc
  1088 0000096F 50                      	push rax
  1089 00000970 BF08000000              	mov rdi, 8 * 1	; extended env
  1090 00000975 E83A1F0100              	call malloc
  1091 0000097A 488B7D10                	mov rdi, ENV
  1092 0000097E BE00000000              	mov rsi, 0
  1093 00000983 BA01000000              	mov rdx, 1
  1094                                  .L_lambda_simple_env_loop_4f2c:	; ext_env[i + 1] <-- env[i]
  1095 00000988 4883FE00                	cmp rsi, 0
  1096 0000098C 7410                    	je .L_lambda_simple_env_end_4f2c
  1097 0000098E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1098 00000992 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1099 00000996 48FFC6                  	inc rsi
  1100 00000999 48FFC2                  	inc rdx
  1101 0000099C EBEA                    	jmp .L_lambda_simple_env_loop_4f2c
  1102                                  .L_lambda_simple_env_end_4f2c:
  1103 0000099E 5B                      	pop rbx
  1104 0000099F BE00000000              	mov rsi, 0
  1105                                  .L_lambda_simple_params_loop_4f2c:	; copy params
  1106 000009A4 4883FE00                	cmp rsi, 0
  1107 000009A8 740E                    	je .L_lambda_simple_params_end_4f2c
  1108 000009AA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1109 000009AF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1110 000009B3 48FFC6                  	inc rsi
  1111 000009B6 EBEC                    	jmp .L_lambda_simple_params_loop_4f2c
  1112                                  .L_lambda_simple_params_end_4f2c:
  1113 000009B8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1114 000009BB 4889C3                  	mov rbx, rax
  1115 000009BE 58                      	pop rax
  1116 000009BF C60005                  	mov byte [rax], T_closure
  1117 000009C2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1118 000009C6 48C74009[D3090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f2c
  1119 000009CE E9B7000000              	jmp .L_lambda_simple_end_4f2c
  1120                                  .L_lambda_simple_code_4f2c:	; lambda-simple body
  1121 000009D3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1122 000009D9 740B                    	je .L_lambda_simple_arity_check_ok_4f2c
  1123 000009DB FF742410                	push qword [rsp + 8 * 2]
  1124 000009DF 6A01                    	push 1
  1125 000009E1 E9871E0100              	jmp L_error_incorrect_arity_simple
  1126                                  .L_lambda_simple_arity_check_ok_4f2c:
  1127 000009E6 C8000000                	enter 0, 0
  1128 000009EA 488B4520                	mov rax, PARAM(0)
  1129 000009EE 50                      	push rax
  1130 000009EF 6A01                    	push 1
  1131 000009F1 488B0425[88000000]      	mov rax, qword [free_var_17]
  1132                                  	assert_closure(rax)
    65 000009F9 803805              <1>  cmp byte [%1], %2
    66 000009FC 0F8532370100        <1>  jne L_error_incorrect_type
  1133 00000A02 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1134 00000A06 53                      	push rbx
  1135 00000A07 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1136 00000A0B FFD3                    	call rbx
  1137 00000A0D 50                      	push rax
  1138 00000A0E 6A01                    	push 1
  1139 00000A10 488B0425[88000000]      	mov rax, qword [free_var_17]
  1140                                  	assert_closure(rax)
    65 00000A18 803805              <1>  cmp byte [%1], %2
    66 00000A1B 0F8513370100        <1>  jne L_error_incorrect_type
  1141 00000A21 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1142 00000A25 53                      	push rbx
  1143 00000A26 FF7508                  	push RET_ADDR
  1144 00000A29 488B7D18                	mov rdi, COUNT
  1145 00000A2D 4883C703                	add rdi, 3
  1146 00000A31 48C1E703                	shl rdi, 3
  1147 00000A35 4801EF                  	add rdi, rbp
  1148 00000A38 488B6D00                	mov rbp, OLD_RDP
  1149 00000A3C BE00000000              	mov rsi, 0
  1150                                  .L_tc_recycle_frame_loop_5ca0:	 ; start recycle frame loop
  1151 00000A41 4883FE04                	cmp rsi, 4
  1152 00000A45 7427                    	je .L_tc_recycle_frame_done_5ca0
  1153 00000A47 B903000000              	mov rcx, 3
  1154 00000A4C 4829F1                  	sub rcx, rsi
  1155 00000A4F 48C1E103                	shl rcx, 3
  1156 00000A53 4801E1                  	add rcx, rsp ; rcx is the address to move
  1157 00000A56 4889F3                  	mov rbx, rsi
  1158 00000A59 48C1E303                	shl rbx, 3
  1159 00000A5D 48F7DB                  	neg rbx
  1160 00000A60 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1161 00000A63 488B09                  	mov rcx, [rcx]
  1162 00000A66 48890B                  	mov [rbx], rcx
  1163 00000A69 48FFC6                  	inc rsi
  1164 00000A6C EBD3                    	jmp .L_tc_recycle_frame_loop_5ca0
  1165                                  .L_tc_recycle_frame_done_5ca0:	 ; end recycle frame loop
  1166 00000A6E BB03000000              	mov rbx, 3
  1167 00000A73 48C1E303                	shl rbx, 3
  1168 00000A77 48F7DB                  	neg rbx
  1169 00000A7A 4801FB                  	add rbx, rdi
  1170 00000A7D 4889DC                  	mov rsp, rbx
  1171 00000A80 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1172 00000A84 FFE3                    	jmp rbx
  1173 00000A86 C9                      	leave
  1174 00000A87 C21800                  	ret 8 * (2 + 1)
  1175                                  .L_lambda_simple_end_4f2c:	; new closure is in rax
  1176 00000A8A 48890425[D8010000]      	mov qword [free_var_59], rax
  1177 00000A92 48B8-                   	mov rax, sob_void
  1177 00000A94 [0000000000000000] 
  1178                                  
  1179 00000A9C 4889C7                  	mov rdi, rax
  1180 00000A9F E8211E0100              	call print_sexpr_if_not_void
  1181                                  
  1182 00000AA4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1183 00000AA9 E8061E0100              	call malloc
  1184 00000AAE 50                      	push rax
  1185 00000AAF BF00000000              	mov rdi, 8 * 0	; new rib
  1186 00000AB4 E8FB1D0100              	call malloc
  1187 00000AB9 50                      	push rax
  1188 00000ABA BF08000000              	mov rdi, 8 * 1	; extended env
  1189 00000ABF E8F01D0100              	call malloc
  1190 00000AC4 488B7D10                	mov rdi, ENV
  1191 00000AC8 BE00000000              	mov rsi, 0
  1192 00000ACD BA01000000              	mov rdx, 1
  1193                                  .L_lambda_simple_env_loop_4f2d:	; ext_env[i + 1] <-- env[i]
  1194 00000AD2 4883FE00                	cmp rsi, 0
  1195 00000AD6 7410                    	je .L_lambda_simple_env_end_4f2d
  1196 00000AD8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1197 00000ADC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1198 00000AE0 48FFC6                  	inc rsi
  1199 00000AE3 48FFC2                  	inc rdx
  1200 00000AE6 EBEA                    	jmp .L_lambda_simple_env_loop_4f2d
  1201                                  .L_lambda_simple_env_end_4f2d:
  1202 00000AE8 5B                      	pop rbx
  1203 00000AE9 BE00000000              	mov rsi, 0
  1204                                  .L_lambda_simple_params_loop_4f2d:	; copy params
  1205 00000AEE 4883FE00                	cmp rsi, 0
  1206 00000AF2 740E                    	je .L_lambda_simple_params_end_4f2d
  1207 00000AF4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1208 00000AF9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1209 00000AFD 48FFC6                  	inc rsi
  1210 00000B00 EBEC                    	jmp .L_lambda_simple_params_loop_4f2d
  1211                                  .L_lambda_simple_params_end_4f2d:
  1212 00000B02 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1213 00000B05 4889C3                  	mov rbx, rax
  1214 00000B08 58                      	pop rax
  1215 00000B09 C60005                  	mov byte [rax], T_closure
  1216 00000B0C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1217 00000B10 48C74009[1D0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f2d
  1218 00000B18 E9B7000000              	jmp .L_lambda_simple_end_4f2d
  1219                                  .L_lambda_simple_code_4f2d:	; lambda-simple body
  1220 00000B1D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1221 00000B23 740B                    	je .L_lambda_simple_arity_check_ok_4f2d
  1222 00000B25 FF742410                	push qword [rsp + 8 * 2]
  1223 00000B29 6A01                    	push 1
  1224 00000B2B E93D1D0100              	jmp L_error_incorrect_arity_simple
  1225                                  .L_lambda_simple_arity_check_ok_4f2d:
  1226 00000B30 C8000000                	enter 0, 0
  1227 00000B34 488B4520                	mov rax, PARAM(0)
  1228 00000B38 50                      	push rax
  1229 00000B39 6A01                    	push 1
  1230 00000B3B 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1231                                  	assert_closure(rax)
    65 00000B43 803805              <1>  cmp byte [%1], %2
    66 00000B46 0F85E8350100        <1>  jne L_error_incorrect_type
  1232 00000B4C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1233 00000B50 53                      	push rbx
  1234 00000B51 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1235 00000B55 FFD3                    	call rbx
  1236 00000B57 50                      	push rax
  1237 00000B58 6A01                    	push 1
  1238 00000B5A 488B0425[80000000]      	mov rax, qword [free_var_16]
  1239                                  	assert_closure(rax)
    65 00000B62 803805              <1>  cmp byte [%1], %2
    66 00000B65 0F85C9350100        <1>  jne L_error_incorrect_type
  1240 00000B6B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1241 00000B6F 53                      	push rbx
  1242 00000B70 FF7508                  	push RET_ADDR
  1243 00000B73 488B7D18                	mov rdi, COUNT
  1244 00000B77 4883C703                	add rdi, 3
  1245 00000B7B 48C1E703                	shl rdi, 3
  1246 00000B7F 4801EF                  	add rdi, rbp
  1247 00000B82 488B6D00                	mov rbp, OLD_RDP
  1248 00000B86 BE00000000              	mov rsi, 0
  1249                                  .L_tc_recycle_frame_loop_5ca1:	 ; start recycle frame loop
  1250 00000B8B 4883FE04                	cmp rsi, 4
  1251 00000B8F 7427                    	je .L_tc_recycle_frame_done_5ca1
  1252 00000B91 B903000000              	mov rcx, 3
  1253 00000B96 4829F1                  	sub rcx, rsi
  1254 00000B99 48C1E103                	shl rcx, 3
  1255 00000B9D 4801E1                  	add rcx, rsp ; rcx is the address to move
  1256 00000BA0 4889F3                  	mov rbx, rsi
  1257 00000BA3 48C1E303                	shl rbx, 3
  1258 00000BA7 48F7DB                  	neg rbx
  1259 00000BAA 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1260 00000BAD 488B09                  	mov rcx, [rcx]
  1261 00000BB0 48890B                  	mov [rbx], rcx
  1262 00000BB3 48FFC6                  	inc rsi
  1263 00000BB6 EBD3                    	jmp .L_tc_recycle_frame_loop_5ca1
  1264                                  .L_tc_recycle_frame_done_5ca1:	 ; end recycle frame loop
  1265 00000BB8 BB03000000              	mov rbx, 3
  1266 00000BBD 48C1E303                	shl rbx, 3
  1267 00000BC1 48F7DB                  	neg rbx
  1268 00000BC4 4801FB                  	add rbx, rdi
  1269 00000BC7 4889DC                  	mov rsp, rbx
  1270 00000BCA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1271 00000BCE FFE3                    	jmp rbx
  1272 00000BD0 C9                      	leave
  1273 00000BD1 C21800                  	ret 8 * (2 + 1)
  1274                                  .L_lambda_simple_end_4f2d:	; new closure is in rax
  1275 00000BD4 48890425[E0010000]      	mov qword [free_var_60], rax
  1276 00000BDC 48B8-                   	mov rax, sob_void
  1276 00000BDE [0000000000000000] 
  1277                                  
  1278 00000BE6 4889C7                  	mov rdi, rax
  1279 00000BE9 E8D71C0100              	call print_sexpr_if_not_void
  1280                                  
  1281 00000BEE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1282 00000BF3 E8BC1C0100              	call malloc
  1283 00000BF8 50                      	push rax
  1284 00000BF9 BF00000000              	mov rdi, 8 * 0	; new rib
  1285 00000BFE E8B11C0100              	call malloc
  1286 00000C03 50                      	push rax
  1287 00000C04 BF08000000              	mov rdi, 8 * 1	; extended env
  1288 00000C09 E8A61C0100              	call malloc
  1289 00000C0E 488B7D10                	mov rdi, ENV
  1290 00000C12 BE00000000              	mov rsi, 0
  1291 00000C17 BA01000000              	mov rdx, 1
  1292                                  .L_lambda_simple_env_loop_4f2e:	; ext_env[i + 1] <-- env[i]
  1293 00000C1C 4883FE00                	cmp rsi, 0
  1294 00000C20 7410                    	je .L_lambda_simple_env_end_4f2e
  1295 00000C22 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1296 00000C26 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1297 00000C2A 48FFC6                  	inc rsi
  1298 00000C2D 48FFC2                  	inc rdx
  1299 00000C30 EBEA                    	jmp .L_lambda_simple_env_loop_4f2e
  1300                                  .L_lambda_simple_env_end_4f2e:
  1301 00000C32 5B                      	pop rbx
  1302 00000C33 BE00000000              	mov rsi, 0
  1303                                  .L_lambda_simple_params_loop_4f2e:	; copy params
  1304 00000C38 4883FE00                	cmp rsi, 0
  1305 00000C3C 740E                    	je .L_lambda_simple_params_end_4f2e
  1306 00000C3E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1307 00000C43 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1308 00000C47 48FFC6                  	inc rsi
  1309 00000C4A EBEC                    	jmp .L_lambda_simple_params_loop_4f2e
  1310                                  .L_lambda_simple_params_end_4f2e:
  1311 00000C4C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1312 00000C4F 4889C3                  	mov rbx, rax
  1313 00000C52 58                      	pop rax
  1314 00000C53 C60005                  	mov byte [rax], T_closure
  1315 00000C56 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1316 00000C5A 48C74009[670C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f2e
  1317 00000C62 E9B7000000              	jmp .L_lambda_simple_end_4f2e
  1318                                  .L_lambda_simple_code_4f2e:	; lambda-simple body
  1319 00000C67 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1320 00000C6D 740B                    	je .L_lambda_simple_arity_check_ok_4f2e
  1321 00000C6F FF742410                	push qword [rsp + 8 * 2]
  1322 00000C73 6A01                    	push 1
  1323 00000C75 E9F31B0100              	jmp L_error_incorrect_arity_simple
  1324                                  .L_lambda_simple_arity_check_ok_4f2e:
  1325 00000C7A C8000000                	enter 0, 0
  1326 00000C7E 488B4520                	mov rax, PARAM(0)
  1327 00000C82 50                      	push rax
  1328 00000C83 6A01                    	push 1
  1329 00000C85 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1330                                  	assert_closure(rax)
    65 00000C8D 803805              <1>  cmp byte [%1], %2
    66 00000C90 0F859E340100        <1>  jne L_error_incorrect_type
  1331 00000C96 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1332 00000C9A 53                      	push rbx
  1333 00000C9B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1334 00000C9F FFD3                    	call rbx
  1335 00000CA1 50                      	push rax
  1336 00000CA2 6A01                    	push 1
  1337 00000CA4 488B0425[80000000]      	mov rax, qword [free_var_16]
  1338                                  	assert_closure(rax)
    65 00000CAC 803805              <1>  cmp byte [%1], %2
    66 00000CAF 0F857F340100        <1>  jne L_error_incorrect_type
  1339 00000CB5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1340 00000CB9 53                      	push rbx
  1341 00000CBA FF7508                  	push RET_ADDR
  1342 00000CBD 488B7D18                	mov rdi, COUNT
  1343 00000CC1 4883C703                	add rdi, 3
  1344 00000CC5 48C1E703                	shl rdi, 3
  1345 00000CC9 4801EF                  	add rdi, rbp
  1346 00000CCC 488B6D00                	mov rbp, OLD_RDP
  1347 00000CD0 BE00000000              	mov rsi, 0
  1348                                  .L_tc_recycle_frame_loop_5ca2:	 ; start recycle frame loop
  1349 00000CD5 4883FE04                	cmp rsi, 4
  1350 00000CD9 7427                    	je .L_tc_recycle_frame_done_5ca2
  1351 00000CDB B903000000              	mov rcx, 3
  1352 00000CE0 4829F1                  	sub rcx, rsi
  1353 00000CE3 48C1E103                	shl rcx, 3
  1354 00000CE7 4801E1                  	add rcx, rsp ; rcx is the address to move
  1355 00000CEA 4889F3                  	mov rbx, rsi
  1356 00000CED 48C1E303                	shl rbx, 3
  1357 00000CF1 48F7DB                  	neg rbx
  1358 00000CF4 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1359 00000CF7 488B09                  	mov rcx, [rcx]
  1360 00000CFA 48890B                  	mov [rbx], rcx
  1361 00000CFD 48FFC6                  	inc rsi
  1362 00000D00 EBD3                    	jmp .L_tc_recycle_frame_loop_5ca2
  1363                                  .L_tc_recycle_frame_done_5ca2:	 ; end recycle frame loop
  1364 00000D02 BB03000000              	mov rbx, 3
  1365 00000D07 48C1E303                	shl rbx, 3
  1366 00000D0B 48F7DB                  	neg rbx
  1367 00000D0E 4801FB                  	add rbx, rdi
  1368 00000D11 4889DC                  	mov rsp, rbx
  1369 00000D14 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1370 00000D18 FFE3                    	jmp rbx
  1371 00000D1A C9                      	leave
  1372 00000D1B C21800                  	ret 8 * (2 + 1)
  1373                                  .L_lambda_simple_end_4f2e:	; new closure is in rax
  1374 00000D1E 48890425[E8010000]      	mov qword [free_var_61], rax
  1375 00000D26 48B8-                   	mov rax, sob_void
  1375 00000D28 [0000000000000000] 
  1376                                  
  1377 00000D30 4889C7                  	mov rdi, rax
  1378 00000D33 E88D1B0100              	call print_sexpr_if_not_void
  1379                                  
  1380 00000D38 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1381 00000D3D E8721B0100              	call malloc
  1382 00000D42 50                      	push rax
  1383 00000D43 BF00000000              	mov rdi, 8 * 0	; new rib
  1384 00000D48 E8671B0100              	call malloc
  1385 00000D4D 50                      	push rax
  1386 00000D4E BF08000000              	mov rdi, 8 * 1	; extended env
  1387 00000D53 E85C1B0100              	call malloc
  1388 00000D58 488B7D10                	mov rdi, ENV
  1389 00000D5C BE00000000              	mov rsi, 0
  1390 00000D61 BA01000000              	mov rdx, 1
  1391                                  .L_lambda_simple_env_loop_4f2f:	; ext_env[i + 1] <-- env[i]
  1392 00000D66 4883FE00                	cmp rsi, 0
  1393 00000D6A 7410                    	je .L_lambda_simple_env_end_4f2f
  1394 00000D6C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1395 00000D70 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1396 00000D74 48FFC6                  	inc rsi
  1397 00000D77 48FFC2                  	inc rdx
  1398 00000D7A EBEA                    	jmp .L_lambda_simple_env_loop_4f2f
  1399                                  .L_lambda_simple_env_end_4f2f:
  1400 00000D7C 5B                      	pop rbx
  1401 00000D7D BE00000000              	mov rsi, 0
  1402                                  .L_lambda_simple_params_loop_4f2f:	; copy params
  1403 00000D82 4883FE00                	cmp rsi, 0
  1404 00000D86 740E                    	je .L_lambda_simple_params_end_4f2f
  1405 00000D88 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1406 00000D8D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1407 00000D91 48FFC6                  	inc rsi
  1408 00000D94 EBEC                    	jmp .L_lambda_simple_params_loop_4f2f
  1409                                  .L_lambda_simple_params_end_4f2f:
  1410 00000D96 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1411 00000D99 4889C3                  	mov rbx, rax
  1412 00000D9C 58                      	pop rax
  1413 00000D9D C60005                  	mov byte [rax], T_closure
  1414 00000DA0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1415 00000DA4 48C74009[B10D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f2f
  1416 00000DAC E9B7000000              	jmp .L_lambda_simple_end_4f2f
  1417                                  .L_lambda_simple_code_4f2f:	; lambda-simple body
  1418 00000DB1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1419 00000DB7 740B                    	je .L_lambda_simple_arity_check_ok_4f2f
  1420 00000DB9 FF742410                	push qword [rsp + 8 * 2]
  1421 00000DBD 6A01                    	push 1
  1422 00000DBF E9A91A0100              	jmp L_error_incorrect_arity_simple
  1423                                  .L_lambda_simple_arity_check_ok_4f2f:
  1424 00000DC4 C8000000                	enter 0, 0
  1425 00000DC8 488B4520                	mov rax, PARAM(0)
  1426 00000DCC 50                      	push rax
  1427 00000DCD 6A01                    	push 1
  1428 00000DCF 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1429                                  	assert_closure(rax)
    65 00000DD7 803805              <1>  cmp byte [%1], %2
    66 00000DDA 0F8554330100        <1>  jne L_error_incorrect_type
  1430 00000DE0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1431 00000DE4 53                      	push rbx
  1432 00000DE5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1433 00000DE9 FFD3                    	call rbx
  1434 00000DEB 50                      	push rax
  1435 00000DEC 6A01                    	push 1
  1436 00000DEE 488B0425[80000000]      	mov rax, qword [free_var_16]
  1437                                  	assert_closure(rax)
    65 00000DF6 803805              <1>  cmp byte [%1], %2
    66 00000DF9 0F8535330100        <1>  jne L_error_incorrect_type
  1438 00000DFF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1439 00000E03 53                      	push rbx
  1440 00000E04 FF7508                  	push RET_ADDR
  1441 00000E07 488B7D18                	mov rdi, COUNT
  1442 00000E0B 4883C703                	add rdi, 3
  1443 00000E0F 48C1E703                	shl rdi, 3
  1444 00000E13 4801EF                  	add rdi, rbp
  1445 00000E16 488B6D00                	mov rbp, OLD_RDP
  1446 00000E1A BE00000000              	mov rsi, 0
  1447                                  .L_tc_recycle_frame_loop_5ca3:	 ; start recycle frame loop
  1448 00000E1F 4883FE04                	cmp rsi, 4
  1449 00000E23 7427                    	je .L_tc_recycle_frame_done_5ca3
  1450 00000E25 B903000000              	mov rcx, 3
  1451 00000E2A 4829F1                  	sub rcx, rsi
  1452 00000E2D 48C1E103                	shl rcx, 3
  1453 00000E31 4801E1                  	add rcx, rsp ; rcx is the address to move
  1454 00000E34 4889F3                  	mov rbx, rsi
  1455 00000E37 48C1E303                	shl rbx, 3
  1456 00000E3B 48F7DB                  	neg rbx
  1457 00000E3E 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1458 00000E41 488B09                  	mov rcx, [rcx]
  1459 00000E44 48890B                  	mov [rbx], rcx
  1460 00000E47 48FFC6                  	inc rsi
  1461 00000E4A EBD3                    	jmp .L_tc_recycle_frame_loop_5ca3
  1462                                  .L_tc_recycle_frame_done_5ca3:	 ; end recycle frame loop
  1463 00000E4C BB03000000              	mov rbx, 3
  1464 00000E51 48C1E303                	shl rbx, 3
  1465 00000E55 48F7DB                  	neg rbx
  1466 00000E58 4801FB                  	add rbx, rdi
  1467 00000E5B 4889DC                  	mov rsp, rbx
  1468 00000E5E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1469 00000E62 FFE3                    	jmp rbx
  1470 00000E64 C9                      	leave
  1471 00000E65 C21800                  	ret 8 * (2 + 1)
  1472                                  .L_lambda_simple_end_4f2f:	; new closure is in rax
  1473 00000E68 48890425[F0010000]      	mov qword [free_var_62], rax
  1474 00000E70 48B8-                   	mov rax, sob_void
  1474 00000E72 [0000000000000000] 
  1475                                  
  1476 00000E7A 4889C7                  	mov rdi, rax
  1477 00000E7D E8431A0100              	call print_sexpr_if_not_void
  1478                                  
  1479 00000E82 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1480 00000E87 E8281A0100              	call malloc
  1481 00000E8C 50                      	push rax
  1482 00000E8D BF00000000              	mov rdi, 8 * 0	; new rib
  1483 00000E92 E81D1A0100              	call malloc
  1484 00000E97 50                      	push rax
  1485 00000E98 BF08000000              	mov rdi, 8 * 1	; extended env
  1486 00000E9D E8121A0100              	call malloc
  1487 00000EA2 488B7D10                	mov rdi, ENV
  1488 00000EA6 BE00000000              	mov rsi, 0
  1489 00000EAB BA01000000              	mov rdx, 1
  1490                                  .L_lambda_simple_env_loop_4f30:	; ext_env[i + 1] <-- env[i]
  1491 00000EB0 4883FE00                	cmp rsi, 0
  1492 00000EB4 7410                    	je .L_lambda_simple_env_end_4f30
  1493 00000EB6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1494 00000EBA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1495 00000EBE 48FFC6                  	inc rsi
  1496 00000EC1 48FFC2                  	inc rdx
  1497 00000EC4 EBEA                    	jmp .L_lambda_simple_env_loop_4f30
  1498                                  .L_lambda_simple_env_end_4f30:
  1499 00000EC6 5B                      	pop rbx
  1500 00000EC7 BE00000000              	mov rsi, 0
  1501                                  .L_lambda_simple_params_loop_4f30:	; copy params
  1502 00000ECC 4883FE00                	cmp rsi, 0
  1503 00000ED0 740E                    	je .L_lambda_simple_params_end_4f30
  1504 00000ED2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1505 00000ED7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1506 00000EDB 48FFC6                  	inc rsi
  1507 00000EDE EBEC                    	jmp .L_lambda_simple_params_loop_4f30
  1508                                  .L_lambda_simple_params_end_4f30:
  1509 00000EE0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1510 00000EE3 4889C3                  	mov rbx, rax
  1511 00000EE6 58                      	pop rax
  1512 00000EE7 C60005                  	mov byte [rax], T_closure
  1513 00000EEA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1514 00000EEE 48C74009[FB0E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f30
  1515 00000EF6 E9B7000000              	jmp .L_lambda_simple_end_4f30
  1516                                  .L_lambda_simple_code_4f30:	; lambda-simple body
  1517 00000EFB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1518 00000F01 740B                    	je .L_lambda_simple_arity_check_ok_4f30
  1519 00000F03 FF742410                	push qword [rsp + 8 * 2]
  1520 00000F07 6A01                    	push 1
  1521 00000F09 E95F190100              	jmp L_error_incorrect_arity_simple
  1522                                  .L_lambda_simple_arity_check_ok_4f30:
  1523 00000F0E C8000000                	enter 0, 0
  1524 00000F12 488B4520                	mov rax, PARAM(0)
  1525 00000F16 50                      	push rax
  1526 00000F17 6A01                    	push 1
  1527 00000F19 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1528                                  	assert_closure(rax)
    65 00000F21 803805              <1>  cmp byte [%1], %2
    66 00000F24 0F850A320100        <1>  jne L_error_incorrect_type
  1529 00000F2A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1530 00000F2E 53                      	push rbx
  1531 00000F2F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1532 00000F33 FFD3                    	call rbx
  1533 00000F35 50                      	push rax
  1534 00000F36 6A01                    	push 1
  1535 00000F38 488B0425[80000000]      	mov rax, qword [free_var_16]
  1536                                  	assert_closure(rax)
    65 00000F40 803805              <1>  cmp byte [%1], %2
    66 00000F43 0F85EB310100        <1>  jne L_error_incorrect_type
  1537 00000F49 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1538 00000F4D 53                      	push rbx
  1539 00000F4E FF7508                  	push RET_ADDR
  1540 00000F51 488B7D18                	mov rdi, COUNT
  1541 00000F55 4883C703                	add rdi, 3
  1542 00000F59 48C1E703                	shl rdi, 3
  1543 00000F5D 4801EF                  	add rdi, rbp
  1544 00000F60 488B6D00                	mov rbp, OLD_RDP
  1545 00000F64 BE00000000              	mov rsi, 0
  1546                                  .L_tc_recycle_frame_loop_5ca4:	 ; start recycle frame loop
  1547 00000F69 4883FE04                	cmp rsi, 4
  1548 00000F6D 7427                    	je .L_tc_recycle_frame_done_5ca4
  1549 00000F6F B903000000              	mov rcx, 3
  1550 00000F74 4829F1                  	sub rcx, rsi
  1551 00000F77 48C1E103                	shl rcx, 3
  1552 00000F7B 4801E1                  	add rcx, rsp ; rcx is the address to move
  1553 00000F7E 4889F3                  	mov rbx, rsi
  1554 00000F81 48C1E303                	shl rbx, 3
  1555 00000F85 48F7DB                  	neg rbx
  1556 00000F88 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1557 00000F8B 488B09                  	mov rcx, [rcx]
  1558 00000F8E 48890B                  	mov [rbx], rcx
  1559 00000F91 48FFC6                  	inc rsi
  1560 00000F94 EBD3                    	jmp .L_tc_recycle_frame_loop_5ca4
  1561                                  .L_tc_recycle_frame_done_5ca4:	 ; end recycle frame loop
  1562 00000F96 BB03000000              	mov rbx, 3
  1563 00000F9B 48C1E303                	shl rbx, 3
  1564 00000F9F 48F7DB                  	neg rbx
  1565 00000FA2 4801FB                  	add rbx, rdi
  1566 00000FA5 4889DC                  	mov rsp, rbx
  1567 00000FA8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1568 00000FAC FFE3                    	jmp rbx
  1569 00000FAE C9                      	leave
  1570 00000FAF C21800                  	ret 8 * (2 + 1)
  1571                                  .L_lambda_simple_end_4f30:	; new closure is in rax
  1572 00000FB2 48890425[F8010000]      	mov qword [free_var_63], rax
  1573 00000FBA 48B8-                   	mov rax, sob_void
  1573 00000FBC [0000000000000000] 
  1574                                  
  1575 00000FC4 4889C7                  	mov rdi, rax
  1576 00000FC7 E8F9180100              	call print_sexpr_if_not_void
  1577                                  
  1578 00000FCC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1579 00000FD1 E8DE180100              	call malloc
  1580 00000FD6 50                      	push rax
  1581 00000FD7 BF00000000              	mov rdi, 8 * 0	; new rib
  1582 00000FDC E8D3180100              	call malloc
  1583 00000FE1 50                      	push rax
  1584 00000FE2 BF08000000              	mov rdi, 8 * 1	; extended env
  1585 00000FE7 E8C8180100              	call malloc
  1586 00000FEC 488B7D10                	mov rdi, ENV
  1587 00000FF0 BE00000000              	mov rsi, 0
  1588 00000FF5 BA01000000              	mov rdx, 1
  1589                                  .L_lambda_simple_env_loop_4f31:	; ext_env[i + 1] <-- env[i]
  1590 00000FFA 4883FE00                	cmp rsi, 0
  1591 00000FFE 7410                    	je .L_lambda_simple_env_end_4f31
  1592 00001000 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1593 00001004 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1594 00001008 48FFC6                  	inc rsi
  1595 0000100B 48FFC2                  	inc rdx
  1596 0000100E EBEA                    	jmp .L_lambda_simple_env_loop_4f31
  1597                                  .L_lambda_simple_env_end_4f31:
  1598 00001010 5B                      	pop rbx
  1599 00001011 BE00000000              	mov rsi, 0
  1600                                  .L_lambda_simple_params_loop_4f31:	; copy params
  1601 00001016 4883FE00                	cmp rsi, 0
  1602 0000101A 740E                    	je .L_lambda_simple_params_end_4f31
  1603 0000101C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1604 00001021 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1605 00001025 48FFC6                  	inc rsi
  1606 00001028 EBEC                    	jmp .L_lambda_simple_params_loop_4f31
  1607                                  .L_lambda_simple_params_end_4f31:
  1608 0000102A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1609 0000102D 4889C3                  	mov rbx, rax
  1610 00001030 58                      	pop rax
  1611 00001031 C60005                  	mov byte [rax], T_closure
  1612 00001034 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1613 00001038 48C74009[45100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f31
  1614 00001040 E9B7000000              	jmp .L_lambda_simple_end_4f31
  1615                                  .L_lambda_simple_code_4f31:	; lambda-simple body
  1616 00001045 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1617 0000104B 740B                    	je .L_lambda_simple_arity_check_ok_4f31
  1618 0000104D FF742410                	push qword [rsp + 8 * 2]
  1619 00001051 6A01                    	push 1
  1620 00001053 E915180100              	jmp L_error_incorrect_arity_simple
  1621                                  .L_lambda_simple_arity_check_ok_4f31:
  1622 00001058 C8000000                	enter 0, 0
  1623 0000105C 488B4520                	mov rax, PARAM(0)
  1624 00001060 50                      	push rax
  1625 00001061 6A01                    	push 1
  1626 00001063 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1627                                  	assert_closure(rax)
    65 0000106B 803805              <1>  cmp byte [%1], %2
    66 0000106E 0F85C0300100        <1>  jne L_error_incorrect_type
  1628 00001074 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1629 00001078 53                      	push rbx
  1630 00001079 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1631 0000107D FFD3                    	call rbx
  1632 0000107F 50                      	push rax
  1633 00001080 6A01                    	push 1
  1634 00001082 488B0425[88000000]      	mov rax, qword [free_var_17]
  1635                                  	assert_closure(rax)
    65 0000108A 803805              <1>  cmp byte [%1], %2
    66 0000108D 0F85A1300100        <1>  jne L_error_incorrect_type
  1636 00001093 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1637 00001097 53                      	push rbx
  1638 00001098 FF7508                  	push RET_ADDR
  1639 0000109B 488B7D18                	mov rdi, COUNT
  1640 0000109F 4883C703                	add rdi, 3
  1641 000010A3 48C1E703                	shl rdi, 3
  1642 000010A7 4801EF                  	add rdi, rbp
  1643 000010AA 488B6D00                	mov rbp, OLD_RDP
  1644 000010AE BE00000000              	mov rsi, 0
  1645                                  .L_tc_recycle_frame_loop_5ca5:	 ; start recycle frame loop
  1646 000010B3 4883FE04                	cmp rsi, 4
  1647 000010B7 7427                    	je .L_tc_recycle_frame_done_5ca5
  1648 000010B9 B903000000              	mov rcx, 3
  1649 000010BE 4829F1                  	sub rcx, rsi
  1650 000010C1 48C1E103                	shl rcx, 3
  1651 000010C5 4801E1                  	add rcx, rsp ; rcx is the address to move
  1652 000010C8 4889F3                  	mov rbx, rsi
  1653 000010CB 48C1E303                	shl rbx, 3
  1654 000010CF 48F7DB                  	neg rbx
  1655 000010D2 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1656 000010D5 488B09                  	mov rcx, [rcx]
  1657 000010D8 48890B                  	mov [rbx], rcx
  1658 000010DB 48FFC6                  	inc rsi
  1659 000010DE EBD3                    	jmp .L_tc_recycle_frame_loop_5ca5
  1660                                  .L_tc_recycle_frame_done_5ca5:	 ; end recycle frame loop
  1661 000010E0 BB03000000              	mov rbx, 3
  1662 000010E5 48C1E303                	shl rbx, 3
  1663 000010E9 48F7DB                  	neg rbx
  1664 000010EC 4801FB                  	add rbx, rdi
  1665 000010EF 4889DC                  	mov rsp, rbx
  1666 000010F2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1667 000010F6 FFE3                    	jmp rbx
  1668 000010F8 C9                      	leave
  1669 000010F9 C21800                  	ret 8 * (2 + 1)
  1670                                  .L_lambda_simple_end_4f31:	; new closure is in rax
  1671 000010FC 48890425[00020000]      	mov qword [free_var_64], rax
  1672 00001104 48B8-                   	mov rax, sob_void
  1672 00001106 [0000000000000000] 
  1673                                  
  1674 0000110E 4889C7                  	mov rdi, rax
  1675 00001111 E8AF170100              	call print_sexpr_if_not_void
  1676                                  
  1677 00001116 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1678 0000111B E894170100              	call malloc
  1679 00001120 50                      	push rax
  1680 00001121 BF00000000              	mov rdi, 8 * 0	; new rib
  1681 00001126 E889170100              	call malloc
  1682 0000112B 50                      	push rax
  1683 0000112C BF08000000              	mov rdi, 8 * 1	; extended env
  1684 00001131 E87E170100              	call malloc
  1685 00001136 488B7D10                	mov rdi, ENV
  1686 0000113A BE00000000              	mov rsi, 0
  1687 0000113F BA01000000              	mov rdx, 1
  1688                                  .L_lambda_simple_env_loop_4f32:	; ext_env[i + 1] <-- env[i]
  1689 00001144 4883FE00                	cmp rsi, 0
  1690 00001148 7410                    	je .L_lambda_simple_env_end_4f32
  1691 0000114A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1692 0000114E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1693 00001152 48FFC6                  	inc rsi
  1694 00001155 48FFC2                  	inc rdx
  1695 00001158 EBEA                    	jmp .L_lambda_simple_env_loop_4f32
  1696                                  .L_lambda_simple_env_end_4f32:
  1697 0000115A 5B                      	pop rbx
  1698 0000115B BE00000000              	mov rsi, 0
  1699                                  .L_lambda_simple_params_loop_4f32:	; copy params
  1700 00001160 4883FE00                	cmp rsi, 0
  1701 00001164 740E                    	je .L_lambda_simple_params_end_4f32
  1702 00001166 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1703 0000116B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1704 0000116F 48FFC6                  	inc rsi
  1705 00001172 EBEC                    	jmp .L_lambda_simple_params_loop_4f32
  1706                                  .L_lambda_simple_params_end_4f32:
  1707 00001174 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1708 00001177 4889C3                  	mov rbx, rax
  1709 0000117A 58                      	pop rax
  1710 0000117B C60005                  	mov byte [rax], T_closure
  1711 0000117E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1712 00001182 48C74009[8F110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f32
  1713 0000118A E9B7000000              	jmp .L_lambda_simple_end_4f32
  1714                                  .L_lambda_simple_code_4f32:	; lambda-simple body
  1715 0000118F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1716 00001195 740B                    	je .L_lambda_simple_arity_check_ok_4f32
  1717 00001197 FF742410                	push qword [rsp + 8 * 2]
  1718 0000119B 6A01                    	push 1
  1719 0000119D E9CB160100              	jmp L_error_incorrect_arity_simple
  1720                                  .L_lambda_simple_arity_check_ok_4f32:
  1721 000011A2 C8000000                	enter 0, 0
  1722 000011A6 488B4520                	mov rax, PARAM(0)
  1723 000011AA 50                      	push rax
  1724 000011AB 6A01                    	push 1
  1725 000011AD 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1726                                  	assert_closure(rax)
    65 000011B5 803805              <1>  cmp byte [%1], %2
    66 000011B8 0F85762F0100        <1>  jne L_error_incorrect_type
  1727 000011BE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1728 000011C2 53                      	push rbx
  1729 000011C3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1730 000011C7 FFD3                    	call rbx
  1731 000011C9 50                      	push rax
  1732 000011CA 6A01                    	push 1
  1733 000011CC 488B0425[88000000]      	mov rax, qword [free_var_17]
  1734                                  	assert_closure(rax)
    65 000011D4 803805              <1>  cmp byte [%1], %2
    66 000011D7 0F85572F0100        <1>  jne L_error_incorrect_type
  1735 000011DD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1736 000011E1 53                      	push rbx
  1737 000011E2 FF7508                  	push RET_ADDR
  1738 000011E5 488B7D18                	mov rdi, COUNT
  1739 000011E9 4883C703                	add rdi, 3
  1740 000011ED 48C1E703                	shl rdi, 3
  1741 000011F1 4801EF                  	add rdi, rbp
  1742 000011F4 488B6D00                	mov rbp, OLD_RDP
  1743 000011F8 BE00000000              	mov rsi, 0
  1744                                  .L_tc_recycle_frame_loop_5ca6:	 ; start recycle frame loop
  1745 000011FD 4883FE04                	cmp rsi, 4
  1746 00001201 7427                    	je .L_tc_recycle_frame_done_5ca6
  1747 00001203 B903000000              	mov rcx, 3
  1748 00001208 4829F1                  	sub rcx, rsi
  1749 0000120B 48C1E103                	shl rcx, 3
  1750 0000120F 4801E1                  	add rcx, rsp ; rcx is the address to move
  1751 00001212 4889F3                  	mov rbx, rsi
  1752 00001215 48C1E303                	shl rbx, 3
  1753 00001219 48F7DB                  	neg rbx
  1754 0000121C 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1755 0000121F 488B09                  	mov rcx, [rcx]
  1756 00001222 48890B                  	mov [rbx], rcx
  1757 00001225 48FFC6                  	inc rsi
  1758 00001228 EBD3                    	jmp .L_tc_recycle_frame_loop_5ca6
  1759                                  .L_tc_recycle_frame_done_5ca6:	 ; end recycle frame loop
  1760 0000122A BB03000000              	mov rbx, 3
  1761 0000122F 48C1E303                	shl rbx, 3
  1762 00001233 48F7DB                  	neg rbx
  1763 00001236 4801FB                  	add rbx, rdi
  1764 00001239 4889DC                  	mov rsp, rbx
  1765 0000123C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1766 00001240 FFE3                    	jmp rbx
  1767 00001242 C9                      	leave
  1768 00001243 C21800                  	ret 8 * (2 + 1)
  1769                                  .L_lambda_simple_end_4f32:	; new closure is in rax
  1770 00001246 48890425[08020000]      	mov qword [free_var_65], rax
  1771 0000124E 48B8-                   	mov rax, sob_void
  1771 00001250 [0000000000000000] 
  1772                                  
  1773 00001258 4889C7                  	mov rdi, rax
  1774 0000125B E865160100              	call print_sexpr_if_not_void
  1775                                  
  1776 00001260 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1777 00001265 E84A160100              	call malloc
  1778 0000126A 50                      	push rax
  1779 0000126B BF00000000              	mov rdi, 8 * 0	; new rib
  1780 00001270 E83F160100              	call malloc
  1781 00001275 50                      	push rax
  1782 00001276 BF08000000              	mov rdi, 8 * 1	; extended env
  1783 0000127B E834160100              	call malloc
  1784 00001280 488B7D10                	mov rdi, ENV
  1785 00001284 BE00000000              	mov rsi, 0
  1786 00001289 BA01000000              	mov rdx, 1
  1787                                  .L_lambda_simple_env_loop_4f33:	; ext_env[i + 1] <-- env[i]
  1788 0000128E 4883FE00                	cmp rsi, 0
  1789 00001292 7410                    	je .L_lambda_simple_env_end_4f33
  1790 00001294 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1791 00001298 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1792 0000129C 48FFC6                  	inc rsi
  1793 0000129F 48FFC2                  	inc rdx
  1794 000012A2 EBEA                    	jmp .L_lambda_simple_env_loop_4f33
  1795                                  .L_lambda_simple_env_end_4f33:
  1796 000012A4 5B                      	pop rbx
  1797 000012A5 BE00000000              	mov rsi, 0
  1798                                  .L_lambda_simple_params_loop_4f33:	; copy params
  1799 000012AA 4883FE00                	cmp rsi, 0
  1800 000012AE 740E                    	je .L_lambda_simple_params_end_4f33
  1801 000012B0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1802 000012B5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1803 000012B9 48FFC6                  	inc rsi
  1804 000012BC EBEC                    	jmp .L_lambda_simple_params_loop_4f33
  1805                                  .L_lambda_simple_params_end_4f33:
  1806 000012BE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1807 000012C1 4889C3                  	mov rbx, rax
  1808 000012C4 58                      	pop rax
  1809 000012C5 C60005                  	mov byte [rax], T_closure
  1810 000012C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1811 000012CC 48C74009[D9120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f33
  1812 000012D4 E9B7000000              	jmp .L_lambda_simple_end_4f33
  1813                                  .L_lambda_simple_code_4f33:	; lambda-simple body
  1814 000012D9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1815 000012DF 740B                    	je .L_lambda_simple_arity_check_ok_4f33
  1816 000012E1 FF742410                	push qword [rsp + 8 * 2]
  1817 000012E5 6A01                    	push 1
  1818 000012E7 E981150100              	jmp L_error_incorrect_arity_simple
  1819                                  .L_lambda_simple_arity_check_ok_4f33:
  1820 000012EC C8000000                	enter 0, 0
  1821 000012F0 488B4520                	mov rax, PARAM(0)
  1822 000012F4 50                      	push rax
  1823 000012F5 6A01                    	push 1
  1824 000012F7 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1825                                  	assert_closure(rax)
    65 000012FF 803805              <1>  cmp byte [%1], %2
    66 00001302 0F852C2E0100        <1>  jne L_error_incorrect_type
  1826 00001308 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1827 0000130C 53                      	push rbx
  1828 0000130D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1829 00001311 FFD3                    	call rbx
  1830 00001313 50                      	push rax
  1831 00001314 6A01                    	push 1
  1832 00001316 488B0425[88000000]      	mov rax, qword [free_var_17]
  1833                                  	assert_closure(rax)
    65 0000131E 803805              <1>  cmp byte [%1], %2
    66 00001321 0F850D2E0100        <1>  jne L_error_incorrect_type
  1834 00001327 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1835 0000132B 53                      	push rbx
  1836 0000132C FF7508                  	push RET_ADDR
  1837 0000132F 488B7D18                	mov rdi, COUNT
  1838 00001333 4883C703                	add rdi, 3
  1839 00001337 48C1E703                	shl rdi, 3
  1840 0000133B 4801EF                  	add rdi, rbp
  1841 0000133E 488B6D00                	mov rbp, OLD_RDP
  1842 00001342 BE00000000              	mov rsi, 0
  1843                                  .L_tc_recycle_frame_loop_5ca7:	 ; start recycle frame loop
  1844 00001347 4883FE04                	cmp rsi, 4
  1845 0000134B 7427                    	je .L_tc_recycle_frame_done_5ca7
  1846 0000134D B903000000              	mov rcx, 3
  1847 00001352 4829F1                  	sub rcx, rsi
  1848 00001355 48C1E103                	shl rcx, 3
  1849 00001359 4801E1                  	add rcx, rsp ; rcx is the address to move
  1850 0000135C 4889F3                  	mov rbx, rsi
  1851 0000135F 48C1E303                	shl rbx, 3
  1852 00001363 48F7DB                  	neg rbx
  1853 00001366 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1854 00001369 488B09                  	mov rcx, [rcx]
  1855 0000136C 48890B                  	mov [rbx], rcx
  1856 0000136F 48FFC6                  	inc rsi
  1857 00001372 EBD3                    	jmp .L_tc_recycle_frame_loop_5ca7
  1858                                  .L_tc_recycle_frame_done_5ca7:	 ; end recycle frame loop
  1859 00001374 BB03000000              	mov rbx, 3
  1860 00001379 48C1E303                	shl rbx, 3
  1861 0000137D 48F7DB                  	neg rbx
  1862 00001380 4801FB                  	add rbx, rdi
  1863 00001383 4889DC                  	mov rsp, rbx
  1864 00001386 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1865 0000138A FFE3                    	jmp rbx
  1866 0000138C C9                      	leave
  1867 0000138D C21800                  	ret 8 * (2 + 1)
  1868                                  .L_lambda_simple_end_4f33:	; new closure is in rax
  1869 00001390 48890425[10020000]      	mov qword [free_var_66], rax
  1870 00001398 48B8-                   	mov rax, sob_void
  1870 0000139A [0000000000000000] 
  1871                                  
  1872 000013A2 4889C7                  	mov rdi, rax
  1873 000013A5 E81B150100              	call print_sexpr_if_not_void
  1874                                  
  1875 000013AA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1876 000013AF E800150100              	call malloc
  1877 000013B4 50                      	push rax
  1878 000013B5 BF00000000              	mov rdi, 8 * 0	; new rib
  1879 000013BA E8F5140100              	call malloc
  1880 000013BF 50                      	push rax
  1881 000013C0 BF08000000              	mov rdi, 8 * 1	; extended env
  1882 000013C5 E8EA140100              	call malloc
  1883 000013CA 488B7D10                	mov rdi, ENV
  1884 000013CE BE00000000              	mov rsi, 0
  1885 000013D3 BA01000000              	mov rdx, 1
  1886                                  .L_lambda_simple_env_loop_4f34:	; ext_env[i + 1] <-- env[i]
  1887 000013D8 4883FE00                	cmp rsi, 0
  1888 000013DC 7410                    	je .L_lambda_simple_env_end_4f34
  1889 000013DE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1890 000013E2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1891 000013E6 48FFC6                  	inc rsi
  1892 000013E9 48FFC2                  	inc rdx
  1893 000013EC EBEA                    	jmp .L_lambda_simple_env_loop_4f34
  1894                                  .L_lambda_simple_env_end_4f34:
  1895 000013EE 5B                      	pop rbx
  1896 000013EF BE00000000              	mov rsi, 0
  1897                                  .L_lambda_simple_params_loop_4f34:	; copy params
  1898 000013F4 4883FE00                	cmp rsi, 0
  1899 000013F8 740E                    	je .L_lambda_simple_params_end_4f34
  1900 000013FA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1901 000013FF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1902 00001403 48FFC6                  	inc rsi
  1903 00001406 EBEC                    	jmp .L_lambda_simple_params_loop_4f34
  1904                                  .L_lambda_simple_params_end_4f34:
  1905 00001408 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1906 0000140B 4889C3                  	mov rbx, rax
  1907 0000140E 58                      	pop rax
  1908 0000140F C60005                  	mov byte [rax], T_closure
  1909 00001412 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1910 00001416 48C74009[23140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f34
  1911 0000141E E9B7000000              	jmp .L_lambda_simple_end_4f34
  1912                                  .L_lambda_simple_code_4f34:	; lambda-simple body
  1913 00001423 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1914 00001429 740B                    	je .L_lambda_simple_arity_check_ok_4f34
  1915 0000142B FF742410                	push qword [rsp + 8 * 2]
  1916 0000142F 6A01                    	push 1
  1917 00001431 E937140100              	jmp L_error_incorrect_arity_simple
  1918                                  .L_lambda_simple_arity_check_ok_4f34:
  1919 00001436 C8000000                	enter 0, 0
  1920 0000143A 488B4520                	mov rax, PARAM(0)
  1921 0000143E 50                      	push rax
  1922 0000143F 6A01                    	push 1
  1923 00001441 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1924                                  	assert_closure(rax)
    65 00001449 803805              <1>  cmp byte [%1], %2
    66 0000144C 0F85E22C0100        <1>  jne L_error_incorrect_type
  1925 00001452 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1926 00001456 53                      	push rbx
  1927 00001457 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1928 0000145B FFD3                    	call rbx
  1929 0000145D 50                      	push rax
  1930 0000145E 6A01                    	push 1
  1931 00001460 488B0425[88000000]      	mov rax, qword [free_var_17]
  1932                                  	assert_closure(rax)
    65 00001468 803805              <1>  cmp byte [%1], %2
    66 0000146B 0F85C32C0100        <1>  jne L_error_incorrect_type
  1933 00001471 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1934 00001475 53                      	push rbx
  1935 00001476 FF7508                  	push RET_ADDR
  1936 00001479 488B7D18                	mov rdi, COUNT
  1937 0000147D 4883C703                	add rdi, 3
  1938 00001481 48C1E703                	shl rdi, 3
  1939 00001485 4801EF                  	add rdi, rbp
  1940 00001488 488B6D00                	mov rbp, OLD_RDP
  1941 0000148C BE00000000              	mov rsi, 0
  1942                                  .L_tc_recycle_frame_loop_5ca8:	 ; start recycle frame loop
  1943 00001491 4883FE04                	cmp rsi, 4
  1944 00001495 7427                    	je .L_tc_recycle_frame_done_5ca8
  1945 00001497 B903000000              	mov rcx, 3
  1946 0000149C 4829F1                  	sub rcx, rsi
  1947 0000149F 48C1E103                	shl rcx, 3
  1948 000014A3 4801E1                  	add rcx, rsp ; rcx is the address to move
  1949 000014A6 4889F3                  	mov rbx, rsi
  1950 000014A9 48C1E303                	shl rbx, 3
  1951 000014AD 48F7DB                  	neg rbx
  1952 000014B0 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1953 000014B3 488B09                  	mov rcx, [rcx]
  1954 000014B6 48890B                  	mov [rbx], rcx
  1955 000014B9 48FFC6                  	inc rsi
  1956 000014BC EBD3                    	jmp .L_tc_recycle_frame_loop_5ca8
  1957                                  .L_tc_recycle_frame_done_5ca8:	 ; end recycle frame loop
  1958 000014BE BB03000000              	mov rbx, 3
  1959 000014C3 48C1E303                	shl rbx, 3
  1960 000014C7 48F7DB                  	neg rbx
  1961 000014CA 4801FB                  	add rbx, rdi
  1962 000014CD 4889DC                  	mov rsp, rbx
  1963 000014D0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1964 000014D4 FFE3                    	jmp rbx
  1965 000014D6 C9                      	leave
  1966 000014D7 C21800                  	ret 8 * (2 + 1)
  1967                                  .L_lambda_simple_end_4f34:	; new closure is in rax
  1968 000014DA 48890425[18020000]      	mov qword [free_var_67], rax
  1969 000014E2 48B8-                   	mov rax, sob_void
  1969 000014E4 [0000000000000000] 
  1970                                  
  1971 000014EC 4889C7                  	mov rdi, rax
  1972 000014EF E8D1130100              	call print_sexpr_if_not_void
  1973                                  
  1974 000014F4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1975 000014F9 E8B6130100              	call malloc
  1976 000014FE 50                      	push rax
  1977 000014FF BF00000000              	mov rdi, 8 * 0	; new rib
  1978 00001504 E8AB130100              	call malloc
  1979 00001509 50                      	push rax
  1980 0000150A BF08000000              	mov rdi, 8 * 1	; extended env
  1981 0000150F E8A0130100              	call malloc
  1982 00001514 488B7D10                	mov rdi, ENV
  1983 00001518 BE00000000              	mov rsi, 0
  1984 0000151D BA01000000              	mov rdx, 1
  1985                                  .L_lambda_simple_env_loop_4f35:	; ext_env[i + 1] <-- env[i]
  1986 00001522 4883FE00                	cmp rsi, 0
  1987 00001526 7410                    	je .L_lambda_simple_env_end_4f35
  1988 00001528 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1989 0000152C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1990 00001530 48FFC6                  	inc rsi
  1991 00001533 48FFC2                  	inc rdx
  1992 00001536 EBEA                    	jmp .L_lambda_simple_env_loop_4f35
  1993                                  .L_lambda_simple_env_end_4f35:
  1994 00001538 5B                      	pop rbx
  1995 00001539 BE00000000              	mov rsi, 0
  1996                                  .L_lambda_simple_params_loop_4f35:	; copy params
  1997 0000153E 4883FE00                	cmp rsi, 0
  1998 00001542 740E                    	je .L_lambda_simple_params_end_4f35
  1999 00001544 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2000 00001549 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2001 0000154D 48FFC6                  	inc rsi
  2002 00001550 EBEC                    	jmp .L_lambda_simple_params_loop_4f35
  2003                                  .L_lambda_simple_params_end_4f35:
  2004 00001552 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2005 00001555 4889C3                  	mov rbx, rax
  2006 00001558 58                      	pop rax
  2007 00001559 C60005                  	mov byte [rax], T_closure
  2008 0000155C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2009 00001560 48C74009[6D150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f35
  2010 00001568 E9B7000000              	jmp .L_lambda_simple_end_4f35
  2011                                  .L_lambda_simple_code_4f35:	; lambda-simple body
  2012 0000156D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2013 00001573 740B                    	je .L_lambda_simple_arity_check_ok_4f35
  2014 00001575 FF742410                	push qword [rsp + 8 * 2]
  2015 00001579 6A01                    	push 1
  2016 0000157B E9ED120100              	jmp L_error_incorrect_arity_simple
  2017                                  .L_lambda_simple_arity_check_ok_4f35:
  2018 00001580 C8000000                	enter 0, 0
  2019 00001584 488B4520                	mov rax, PARAM(0)
  2020 00001588 50                      	push rax
  2021 00001589 6A01                    	push 1
  2022 0000158B 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2023                                  	assert_closure(rax)
    65 00001593 803805              <1>  cmp byte [%1], %2
    66 00001596 0F85982B0100        <1>  jne L_error_incorrect_type
  2024 0000159C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2025 000015A0 53                      	push rbx
  2026 000015A1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2027 000015A5 FFD3                    	call rbx
  2028 000015A7 50                      	push rax
  2029 000015A8 6A01                    	push 1
  2030 000015AA 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2031                                  	assert_closure(rax)
    65 000015B2 803805              <1>  cmp byte [%1], %2
    66 000015B5 0F85792B0100        <1>  jne L_error_incorrect_type
  2032 000015BB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2033 000015BF 53                      	push rbx
  2034 000015C0 FF7508                  	push RET_ADDR
  2035 000015C3 488B7D18                	mov rdi, COUNT
  2036 000015C7 4883C703                	add rdi, 3
  2037 000015CB 48C1E703                	shl rdi, 3
  2038 000015CF 4801EF                  	add rdi, rbp
  2039 000015D2 488B6D00                	mov rbp, OLD_RDP
  2040 000015D6 BE00000000              	mov rsi, 0
  2041                                  .L_tc_recycle_frame_loop_5ca9:	 ; start recycle frame loop
  2042 000015DB 4883FE04                	cmp rsi, 4
  2043 000015DF 7427                    	je .L_tc_recycle_frame_done_5ca9
  2044 000015E1 B903000000              	mov rcx, 3
  2045 000015E6 4829F1                  	sub rcx, rsi
  2046 000015E9 48C1E103                	shl rcx, 3
  2047 000015ED 4801E1                  	add rcx, rsp ; rcx is the address to move
  2048 000015F0 4889F3                  	mov rbx, rsi
  2049 000015F3 48C1E303                	shl rbx, 3
  2050 000015F7 48F7DB                  	neg rbx
  2051 000015FA 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2052 000015FD 488B09                  	mov rcx, [rcx]
  2053 00001600 48890B                  	mov [rbx], rcx
  2054 00001603 48FFC6                  	inc rsi
  2055 00001606 EBD3                    	jmp .L_tc_recycle_frame_loop_5ca9
  2056                                  .L_tc_recycle_frame_done_5ca9:	 ; end recycle frame loop
  2057 00001608 BB03000000              	mov rbx, 3
  2058 0000160D 48C1E303                	shl rbx, 3
  2059 00001611 48F7DB                  	neg rbx
  2060 00001614 4801FB                  	add rbx, rdi
  2061 00001617 4889DC                  	mov rsp, rbx
  2062 0000161A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2063 0000161E FFE3                    	jmp rbx
  2064 00001620 C9                      	leave
  2065 00001621 C21800                  	ret 8 * (2 + 1)
  2066                                  .L_lambda_simple_end_4f35:	; new closure is in rax
  2067 00001624 48890425[20020000]      	mov qword [free_var_68], rax
  2068 0000162C 48B8-                   	mov rax, sob_void
  2068 0000162E [0000000000000000] 
  2069                                  
  2070 00001636 4889C7                  	mov rdi, rax
  2071 00001639 E887120100              	call print_sexpr_if_not_void
  2072                                  
  2073 0000163E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2074 00001643 E86C120100              	call malloc
  2075 00001648 50                      	push rax
  2076 00001649 BF00000000              	mov rdi, 8 * 0	; new rib
  2077 0000164E E861120100              	call malloc
  2078 00001653 50                      	push rax
  2079 00001654 BF08000000              	mov rdi, 8 * 1	; extended env
  2080 00001659 E856120100              	call malloc
  2081 0000165E 488B7D10                	mov rdi, ENV
  2082 00001662 BE00000000              	mov rsi, 0
  2083 00001667 BA01000000              	mov rdx, 1
  2084                                  .L_lambda_simple_env_loop_4f36:	; ext_env[i + 1] <-- env[i]
  2085 0000166C 4883FE00                	cmp rsi, 0
  2086 00001670 7410                    	je .L_lambda_simple_env_end_4f36
  2087 00001672 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2088 00001676 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2089 0000167A 48FFC6                  	inc rsi
  2090 0000167D 48FFC2                  	inc rdx
  2091 00001680 EBEA                    	jmp .L_lambda_simple_env_loop_4f36
  2092                                  .L_lambda_simple_env_end_4f36:
  2093 00001682 5B                      	pop rbx
  2094 00001683 BE00000000              	mov rsi, 0
  2095                                  .L_lambda_simple_params_loop_4f36:	; copy params
  2096 00001688 4883FE00                	cmp rsi, 0
  2097 0000168C 740E                    	je .L_lambda_simple_params_end_4f36
  2098 0000168E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2099 00001693 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2100 00001697 48FFC6                  	inc rsi
  2101 0000169A EBEC                    	jmp .L_lambda_simple_params_loop_4f36
  2102                                  .L_lambda_simple_params_end_4f36:
  2103 0000169C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2104 0000169F 4889C3                  	mov rbx, rax
  2105 000016A2 58                      	pop rax
  2106 000016A3 C60005                  	mov byte [rax], T_closure
  2107 000016A6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2108 000016AA 48C74009[B7160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f36
  2109 000016B2 E9B7000000              	jmp .L_lambda_simple_end_4f36
  2110                                  .L_lambda_simple_code_4f36:	; lambda-simple body
  2111 000016B7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2112 000016BD 740B                    	je .L_lambda_simple_arity_check_ok_4f36
  2113 000016BF FF742410                	push qword [rsp + 8 * 2]
  2114 000016C3 6A01                    	push 1
  2115 000016C5 E9A3110100              	jmp L_error_incorrect_arity_simple
  2116                                  .L_lambda_simple_arity_check_ok_4f36:
  2117 000016CA C8000000                	enter 0, 0
  2118 000016CE 488B4520                	mov rax, PARAM(0)
  2119 000016D2 50                      	push rax
  2120 000016D3 6A01                    	push 1
  2121 000016D5 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2122                                  	assert_closure(rax)
    65 000016DD 803805              <1>  cmp byte [%1], %2
    66 000016E0 0F854E2A0100        <1>  jne L_error_incorrect_type
  2123 000016E6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2124 000016EA 53                      	push rbx
  2125 000016EB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2126 000016EF FFD3                    	call rbx
  2127 000016F1 50                      	push rax
  2128 000016F2 6A01                    	push 1
  2129 000016F4 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2130                                  	assert_closure(rax)
    65 000016FC 803805              <1>  cmp byte [%1], %2
    66 000016FF 0F852F2A0100        <1>  jne L_error_incorrect_type
  2131 00001705 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2132 00001709 53                      	push rbx
  2133 0000170A FF7508                  	push RET_ADDR
  2134 0000170D 488B7D18                	mov rdi, COUNT
  2135 00001711 4883C703                	add rdi, 3
  2136 00001715 48C1E703                	shl rdi, 3
  2137 00001719 4801EF                  	add rdi, rbp
  2138 0000171C 488B6D00                	mov rbp, OLD_RDP
  2139 00001720 BE00000000              	mov rsi, 0
  2140                                  .L_tc_recycle_frame_loop_5caa:	 ; start recycle frame loop
  2141 00001725 4883FE04                	cmp rsi, 4
  2142 00001729 7427                    	je .L_tc_recycle_frame_done_5caa
  2143 0000172B B903000000              	mov rcx, 3
  2144 00001730 4829F1                  	sub rcx, rsi
  2145 00001733 48C1E103                	shl rcx, 3
  2146 00001737 4801E1                  	add rcx, rsp ; rcx is the address to move
  2147 0000173A 4889F3                  	mov rbx, rsi
  2148 0000173D 48C1E303                	shl rbx, 3
  2149 00001741 48F7DB                  	neg rbx
  2150 00001744 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2151 00001747 488B09                  	mov rcx, [rcx]
  2152 0000174A 48890B                  	mov [rbx], rcx
  2153 0000174D 48FFC6                  	inc rsi
  2154 00001750 EBD3                    	jmp .L_tc_recycle_frame_loop_5caa
  2155                                  .L_tc_recycle_frame_done_5caa:	 ; end recycle frame loop
  2156 00001752 BB03000000              	mov rbx, 3
  2157 00001757 48C1E303                	shl rbx, 3
  2158 0000175B 48F7DB                  	neg rbx
  2159 0000175E 4801FB                  	add rbx, rdi
  2160 00001761 4889DC                  	mov rsp, rbx
  2161 00001764 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2162 00001768 FFE3                    	jmp rbx
  2163 0000176A C9                      	leave
  2164 0000176B C21800                  	ret 8 * (2 + 1)
  2165                                  .L_lambda_simple_end_4f36:	; new closure is in rax
  2166 0000176E 48890425[28020000]      	mov qword [free_var_69], rax
  2167 00001776 48B8-                   	mov rax, sob_void
  2167 00001778 [0000000000000000] 
  2168                                  
  2169 00001780 4889C7                  	mov rdi, rax
  2170 00001783 E83D110100              	call print_sexpr_if_not_void
  2171                                  
  2172 00001788 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2173 0000178D E822110100              	call malloc
  2174 00001792 50                      	push rax
  2175 00001793 BF00000000              	mov rdi, 8 * 0	; new rib
  2176 00001798 E817110100              	call malloc
  2177 0000179D 50                      	push rax
  2178 0000179E BF08000000              	mov rdi, 8 * 1	; extended env
  2179 000017A3 E80C110100              	call malloc
  2180 000017A8 488B7D10                	mov rdi, ENV
  2181 000017AC BE00000000              	mov rsi, 0
  2182 000017B1 BA01000000              	mov rdx, 1
  2183                                  .L_lambda_simple_env_loop_4f37:	; ext_env[i + 1] <-- env[i]
  2184 000017B6 4883FE00                	cmp rsi, 0
  2185 000017BA 7410                    	je .L_lambda_simple_env_end_4f37
  2186 000017BC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2187 000017C0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2188 000017C4 48FFC6                  	inc rsi
  2189 000017C7 48FFC2                  	inc rdx
  2190 000017CA EBEA                    	jmp .L_lambda_simple_env_loop_4f37
  2191                                  .L_lambda_simple_env_end_4f37:
  2192 000017CC 5B                      	pop rbx
  2193 000017CD BE00000000              	mov rsi, 0
  2194                                  .L_lambda_simple_params_loop_4f37:	; copy params
  2195 000017D2 4883FE00                	cmp rsi, 0
  2196 000017D6 740E                    	je .L_lambda_simple_params_end_4f37
  2197 000017D8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2198 000017DD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2199 000017E1 48FFC6                  	inc rsi
  2200 000017E4 EBEC                    	jmp .L_lambda_simple_params_loop_4f37
  2201                                  .L_lambda_simple_params_end_4f37:
  2202 000017E6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2203 000017E9 4889C3                  	mov rbx, rax
  2204 000017EC 58                      	pop rax
  2205 000017ED C60005                  	mov byte [rax], T_closure
  2206 000017F0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2207 000017F4 48C74009[01180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f37
  2208 000017FC E9B7000000              	jmp .L_lambda_simple_end_4f37
  2209                                  .L_lambda_simple_code_4f37:	; lambda-simple body
  2210 00001801 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2211 00001807 740B                    	je .L_lambda_simple_arity_check_ok_4f37
  2212 00001809 FF742410                	push qword [rsp + 8 * 2]
  2213 0000180D 6A01                    	push 1
  2214 0000180F E959100100              	jmp L_error_incorrect_arity_simple
  2215                                  .L_lambda_simple_arity_check_ok_4f37:
  2216 00001814 C8000000                	enter 0, 0
  2217 00001818 488B4520                	mov rax, PARAM(0)
  2218 0000181C 50                      	push rax
  2219 0000181D 6A01                    	push 1
  2220 0000181F 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2221                                  	assert_closure(rax)
    65 00001827 803805              <1>  cmp byte [%1], %2
    66 0000182A 0F8504290100        <1>  jne L_error_incorrect_type
  2222 00001830 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2223 00001834 53                      	push rbx
  2224 00001835 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2225 00001839 FFD3                    	call rbx
  2226 0000183B 50                      	push rax
  2227 0000183C 6A01                    	push 1
  2228 0000183E 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2229                                  	assert_closure(rax)
    65 00001846 803805              <1>  cmp byte [%1], %2
    66 00001849 0F85E5280100        <1>  jne L_error_incorrect_type
  2230 0000184F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2231 00001853 53                      	push rbx
  2232 00001854 FF7508                  	push RET_ADDR
  2233 00001857 488B7D18                	mov rdi, COUNT
  2234 0000185B 4883C703                	add rdi, 3
  2235 0000185F 48C1E703                	shl rdi, 3
  2236 00001863 4801EF                  	add rdi, rbp
  2237 00001866 488B6D00                	mov rbp, OLD_RDP
  2238 0000186A BE00000000              	mov rsi, 0
  2239                                  .L_tc_recycle_frame_loop_5cab:	 ; start recycle frame loop
  2240 0000186F 4883FE04                	cmp rsi, 4
  2241 00001873 7427                    	je .L_tc_recycle_frame_done_5cab
  2242 00001875 B903000000              	mov rcx, 3
  2243 0000187A 4829F1                  	sub rcx, rsi
  2244 0000187D 48C1E103                	shl rcx, 3
  2245 00001881 4801E1                  	add rcx, rsp ; rcx is the address to move
  2246 00001884 4889F3                  	mov rbx, rsi
  2247 00001887 48C1E303                	shl rbx, 3
  2248 0000188B 48F7DB                  	neg rbx
  2249 0000188E 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2250 00001891 488B09                  	mov rcx, [rcx]
  2251 00001894 48890B                  	mov [rbx], rcx
  2252 00001897 48FFC6                  	inc rsi
  2253 0000189A EBD3                    	jmp .L_tc_recycle_frame_loop_5cab
  2254                                  .L_tc_recycle_frame_done_5cab:	 ; end recycle frame loop
  2255 0000189C BB03000000              	mov rbx, 3
  2256 000018A1 48C1E303                	shl rbx, 3
  2257 000018A5 48F7DB                  	neg rbx
  2258 000018A8 4801FB                  	add rbx, rdi
  2259 000018AB 4889DC                  	mov rsp, rbx
  2260 000018AE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2261 000018B2 FFE3                    	jmp rbx
  2262 000018B4 C9                      	leave
  2263 000018B5 C21800                  	ret 8 * (2 + 1)
  2264                                  .L_lambda_simple_end_4f37:	; new closure is in rax
  2265 000018B8 48890425[30020000]      	mov qword [free_var_70], rax
  2266 000018C0 48B8-                   	mov rax, sob_void
  2266 000018C2 [0000000000000000] 
  2267                                  
  2268 000018CA 4889C7                  	mov rdi, rax
  2269 000018CD E8F30F0100              	call print_sexpr_if_not_void
  2270                                  
  2271 000018D2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2272 000018D7 E8D80F0100              	call malloc
  2273 000018DC 50                      	push rax
  2274 000018DD BF00000000              	mov rdi, 8 * 0	; new rib
  2275 000018E2 E8CD0F0100              	call malloc
  2276 000018E7 50                      	push rax
  2277 000018E8 BF08000000              	mov rdi, 8 * 1	; extended env
  2278 000018ED E8C20F0100              	call malloc
  2279 000018F2 488B7D10                	mov rdi, ENV
  2280 000018F6 BE00000000              	mov rsi, 0
  2281 000018FB BA01000000              	mov rdx, 1
  2282                                  .L_lambda_simple_env_loop_4f38:	; ext_env[i + 1] <-- env[i]
  2283 00001900 4883FE00                	cmp rsi, 0
  2284 00001904 7410                    	je .L_lambda_simple_env_end_4f38
  2285 00001906 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2286 0000190A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2287 0000190E 48FFC6                  	inc rsi
  2288 00001911 48FFC2                  	inc rdx
  2289 00001914 EBEA                    	jmp .L_lambda_simple_env_loop_4f38
  2290                                  .L_lambda_simple_env_end_4f38:
  2291 00001916 5B                      	pop rbx
  2292 00001917 BE00000000              	mov rsi, 0
  2293                                  .L_lambda_simple_params_loop_4f38:	; copy params
  2294 0000191C 4883FE00                	cmp rsi, 0
  2295 00001920 740E                    	je .L_lambda_simple_params_end_4f38
  2296 00001922 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2297 00001927 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2298 0000192B 48FFC6                  	inc rsi
  2299 0000192E EBEC                    	jmp .L_lambda_simple_params_loop_4f38
  2300                                  .L_lambda_simple_params_end_4f38:
  2301 00001930 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2302 00001933 4889C3                  	mov rbx, rax
  2303 00001936 58                      	pop rax
  2304 00001937 C60005                  	mov byte [rax], T_closure
  2305 0000193A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2306 0000193E 48C74009[4B190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f38
  2307 00001946 E9B7000000              	jmp .L_lambda_simple_end_4f38
  2308                                  .L_lambda_simple_code_4f38:	; lambda-simple body
  2309 0000194B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2310 00001951 740B                    	je .L_lambda_simple_arity_check_ok_4f38
  2311 00001953 FF742410                	push qword [rsp + 8 * 2]
  2312 00001957 6A01                    	push 1
  2313 00001959 E90F0F0100              	jmp L_error_incorrect_arity_simple
  2314                                  .L_lambda_simple_arity_check_ok_4f38:
  2315 0000195E C8000000                	enter 0, 0
  2316 00001962 488B4520                	mov rax, PARAM(0)
  2317 00001966 50                      	push rax
  2318 00001967 6A01                    	push 1
  2319 00001969 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2320                                  	assert_closure(rax)
    65 00001971 803805              <1>  cmp byte [%1], %2
    66 00001974 0F85BA270100        <1>  jne L_error_incorrect_type
  2321 0000197A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2322 0000197E 53                      	push rbx
  2323 0000197F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2324 00001983 FFD3                    	call rbx
  2325 00001985 50                      	push rax
  2326 00001986 6A01                    	push 1
  2327 00001988 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2328                                  	assert_closure(rax)
    65 00001990 803805              <1>  cmp byte [%1], %2
    66 00001993 0F859B270100        <1>  jne L_error_incorrect_type
  2329 00001999 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2330 0000199D 53                      	push rbx
  2331 0000199E FF7508                  	push RET_ADDR
  2332 000019A1 488B7D18                	mov rdi, COUNT
  2333 000019A5 4883C703                	add rdi, 3
  2334 000019A9 48C1E703                	shl rdi, 3
  2335 000019AD 4801EF                  	add rdi, rbp
  2336 000019B0 488B6D00                	mov rbp, OLD_RDP
  2337 000019B4 BE00000000              	mov rsi, 0
  2338                                  .L_tc_recycle_frame_loop_5cac:	 ; start recycle frame loop
  2339 000019B9 4883FE04                	cmp rsi, 4
  2340 000019BD 7427                    	je .L_tc_recycle_frame_done_5cac
  2341 000019BF B903000000              	mov rcx, 3
  2342 000019C4 4829F1                  	sub rcx, rsi
  2343 000019C7 48C1E103                	shl rcx, 3
  2344 000019CB 4801E1                  	add rcx, rsp ; rcx is the address to move
  2345 000019CE 4889F3                  	mov rbx, rsi
  2346 000019D1 48C1E303                	shl rbx, 3
  2347 000019D5 48F7DB                  	neg rbx
  2348 000019D8 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2349 000019DB 488B09                  	mov rcx, [rcx]
  2350 000019DE 48890B                  	mov [rbx], rcx
  2351 000019E1 48FFC6                  	inc rsi
  2352 000019E4 EBD3                    	jmp .L_tc_recycle_frame_loop_5cac
  2353                                  .L_tc_recycle_frame_done_5cac:	 ; end recycle frame loop
  2354 000019E6 BB03000000              	mov rbx, 3
  2355 000019EB 48C1E303                	shl rbx, 3
  2356 000019EF 48F7DB                  	neg rbx
  2357 000019F2 4801FB                  	add rbx, rdi
  2358 000019F5 4889DC                  	mov rsp, rbx
  2359 000019F8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2360 000019FC FFE3                    	jmp rbx
  2361 000019FE C9                      	leave
  2362 000019FF C21800                  	ret 8 * (2 + 1)
  2363                                  .L_lambda_simple_end_4f38:	; new closure is in rax
  2364 00001A02 48890425[38020000]      	mov qword [free_var_71], rax
  2365 00001A0A 48B8-                   	mov rax, sob_void
  2365 00001A0C [0000000000000000] 
  2366                                  
  2367 00001A14 4889C7                  	mov rdi, rax
  2368 00001A17 E8A90E0100              	call print_sexpr_if_not_void
  2369                                  
  2370 00001A1C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2371 00001A21 E88E0E0100              	call malloc
  2372 00001A26 50                      	push rax
  2373 00001A27 BF00000000              	mov rdi, 8 * 0	; new rib
  2374 00001A2C E8830E0100              	call malloc
  2375 00001A31 50                      	push rax
  2376 00001A32 BF08000000              	mov rdi, 8 * 1	; extended env
  2377 00001A37 E8780E0100              	call malloc
  2378 00001A3C 488B7D10                	mov rdi, ENV
  2379 00001A40 BE00000000              	mov rsi, 0
  2380 00001A45 BA01000000              	mov rdx, 1
  2381                                  .L_lambda_simple_env_loop_4f39:	; ext_env[i + 1] <-- env[i]
  2382 00001A4A 4883FE00                	cmp rsi, 0
  2383 00001A4E 7410                    	je .L_lambda_simple_env_end_4f39
  2384 00001A50 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2385 00001A54 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2386 00001A58 48FFC6                  	inc rsi
  2387 00001A5B 48FFC2                  	inc rdx
  2388 00001A5E EBEA                    	jmp .L_lambda_simple_env_loop_4f39
  2389                                  .L_lambda_simple_env_end_4f39:
  2390 00001A60 5B                      	pop rbx
  2391 00001A61 BE00000000              	mov rsi, 0
  2392                                  .L_lambda_simple_params_loop_4f39:	; copy params
  2393 00001A66 4883FE00                	cmp rsi, 0
  2394 00001A6A 740E                    	je .L_lambda_simple_params_end_4f39
  2395 00001A6C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2396 00001A71 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2397 00001A75 48FFC6                  	inc rsi
  2398 00001A78 EBEC                    	jmp .L_lambda_simple_params_loop_4f39
  2399                                  .L_lambda_simple_params_end_4f39:
  2400 00001A7A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2401 00001A7D 4889C3                  	mov rbx, rax
  2402 00001A80 58                      	pop rax
  2403 00001A81 C60005                  	mov byte [rax], T_closure
  2404 00001A84 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2405 00001A88 48C74009[951A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f39
  2406 00001A90 E9B7000000              	jmp .L_lambda_simple_end_4f39
  2407                                  .L_lambda_simple_code_4f39:	; lambda-simple body
  2408 00001A95 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2409 00001A9B 740B                    	je .L_lambda_simple_arity_check_ok_4f39
  2410 00001A9D FF742410                	push qword [rsp + 8 * 2]
  2411 00001AA1 6A01                    	push 1
  2412 00001AA3 E9C50D0100              	jmp L_error_incorrect_arity_simple
  2413                                  .L_lambda_simple_arity_check_ok_4f39:
  2414 00001AA8 C8000000                	enter 0, 0
  2415 00001AAC 488B4520                	mov rax, PARAM(0)
  2416 00001AB0 50                      	push rax
  2417 00001AB1 6A01                    	push 1
  2418 00001AB3 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2419                                  	assert_closure(rax)
    65 00001ABB 803805              <1>  cmp byte [%1], %2
    66 00001ABE 0F8570260100        <1>  jne L_error_incorrect_type
  2420 00001AC4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2421 00001AC8 53                      	push rbx
  2422 00001AC9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2423 00001ACD FFD3                    	call rbx
  2424 00001ACF 50                      	push rax
  2425 00001AD0 6A01                    	push 1
  2426 00001AD2 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2427                                  	assert_closure(rax)
    65 00001ADA 803805              <1>  cmp byte [%1], %2
    66 00001ADD 0F8551260100        <1>  jne L_error_incorrect_type
  2428 00001AE3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2429 00001AE7 53                      	push rbx
  2430 00001AE8 FF7508                  	push RET_ADDR
  2431 00001AEB 488B7D18                	mov rdi, COUNT
  2432 00001AEF 4883C703                	add rdi, 3
  2433 00001AF3 48C1E703                	shl rdi, 3
  2434 00001AF7 4801EF                  	add rdi, rbp
  2435 00001AFA 488B6D00                	mov rbp, OLD_RDP
  2436 00001AFE BE00000000              	mov rsi, 0
  2437                                  .L_tc_recycle_frame_loop_5cad:	 ; start recycle frame loop
  2438 00001B03 4883FE04                	cmp rsi, 4
  2439 00001B07 7427                    	je .L_tc_recycle_frame_done_5cad
  2440 00001B09 B903000000              	mov rcx, 3
  2441 00001B0E 4829F1                  	sub rcx, rsi
  2442 00001B11 48C1E103                	shl rcx, 3
  2443 00001B15 4801E1                  	add rcx, rsp ; rcx is the address to move
  2444 00001B18 4889F3                  	mov rbx, rsi
  2445 00001B1B 48C1E303                	shl rbx, 3
  2446 00001B1F 48F7DB                  	neg rbx
  2447 00001B22 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2448 00001B25 488B09                  	mov rcx, [rcx]
  2449 00001B28 48890B                  	mov [rbx], rcx
  2450 00001B2B 48FFC6                  	inc rsi
  2451 00001B2E EBD3                    	jmp .L_tc_recycle_frame_loop_5cad
  2452                                  .L_tc_recycle_frame_done_5cad:	 ; end recycle frame loop
  2453 00001B30 BB03000000              	mov rbx, 3
  2454 00001B35 48C1E303                	shl rbx, 3
  2455 00001B39 48F7DB                  	neg rbx
  2456 00001B3C 4801FB                  	add rbx, rdi
  2457 00001B3F 4889DC                  	mov rsp, rbx
  2458 00001B42 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2459 00001B46 FFE3                    	jmp rbx
  2460 00001B48 C9                      	leave
  2461 00001B49 C21800                  	ret 8 * (2 + 1)
  2462                                  .L_lambda_simple_end_4f39:	; new closure is in rax
  2463 00001B4C 48890425[40020000]      	mov qword [free_var_72], rax
  2464 00001B54 48B8-                   	mov rax, sob_void
  2464 00001B56 [0000000000000000] 
  2465                                  
  2466 00001B5E 4889C7                  	mov rdi, rax
  2467 00001B61 E85F0D0100              	call print_sexpr_if_not_void
  2468                                  
  2469 00001B66 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2470 00001B6B E8440D0100              	call malloc
  2471 00001B70 50                      	push rax
  2472 00001B71 BF00000000              	mov rdi, 8 * 0	; new rib
  2473 00001B76 E8390D0100              	call malloc
  2474 00001B7B 50                      	push rax
  2475 00001B7C BF08000000              	mov rdi, 8 * 1	; extended env
  2476 00001B81 E82E0D0100              	call malloc
  2477 00001B86 488B7D10                	mov rdi, ENV
  2478 00001B8A BE00000000              	mov rsi, 0
  2479 00001B8F BA01000000              	mov rdx, 1
  2480                                  .L_lambda_simple_env_loop_4f3a:	; ext_env[i + 1] <-- env[i]
  2481 00001B94 4883FE00                	cmp rsi, 0
  2482 00001B98 7410                    	je .L_lambda_simple_env_end_4f3a
  2483 00001B9A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2484 00001B9E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2485 00001BA2 48FFC6                  	inc rsi
  2486 00001BA5 48FFC2                  	inc rdx
  2487 00001BA8 EBEA                    	jmp .L_lambda_simple_env_loop_4f3a
  2488                                  .L_lambda_simple_env_end_4f3a:
  2489 00001BAA 5B                      	pop rbx
  2490 00001BAB BE00000000              	mov rsi, 0
  2491                                  .L_lambda_simple_params_loop_4f3a:	; copy params
  2492 00001BB0 4883FE00                	cmp rsi, 0
  2493 00001BB4 740E                    	je .L_lambda_simple_params_end_4f3a
  2494 00001BB6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2495 00001BBB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2496 00001BBF 48FFC6                  	inc rsi
  2497 00001BC2 EBEC                    	jmp .L_lambda_simple_params_loop_4f3a
  2498                                  .L_lambda_simple_params_end_4f3a:
  2499 00001BC4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2500 00001BC7 4889C3                  	mov rbx, rax
  2501 00001BCA 58                      	pop rax
  2502 00001BCB C60005                  	mov byte [rax], T_closure
  2503 00001BCE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2504 00001BD2 48C74009[DF1B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f3a
  2505 00001BDA E9B7000000              	jmp .L_lambda_simple_end_4f3a
  2506                                  .L_lambda_simple_code_4f3a:	; lambda-simple body
  2507 00001BDF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2508 00001BE5 740B                    	je .L_lambda_simple_arity_check_ok_4f3a
  2509 00001BE7 FF742410                	push qword [rsp + 8 * 2]
  2510 00001BEB 6A01                    	push 1
  2511 00001BED E97B0C0100              	jmp L_error_incorrect_arity_simple
  2512                                  .L_lambda_simple_arity_check_ok_4f3a:
  2513 00001BF2 C8000000                	enter 0, 0
  2514 00001BF6 488B4520                	mov rax, PARAM(0)
  2515 00001BFA 50                      	push rax
  2516 00001BFB 6A01                    	push 1
  2517 00001BFD 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2518                                  	assert_closure(rax)
    65 00001C05 803805              <1>  cmp byte [%1], %2
    66 00001C08 0F8526250100        <1>  jne L_error_incorrect_type
  2519 00001C0E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2520 00001C12 53                      	push rbx
  2521 00001C13 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2522 00001C17 FFD3                    	call rbx
  2523 00001C19 50                      	push rax
  2524 00001C1A 6A01                    	push 1
  2525 00001C1C 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2526                                  	assert_closure(rax)
    65 00001C24 803805              <1>  cmp byte [%1], %2
    66 00001C27 0F8507250100        <1>  jne L_error_incorrect_type
  2527 00001C2D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2528 00001C31 53                      	push rbx
  2529 00001C32 FF7508                  	push RET_ADDR
  2530 00001C35 488B7D18                	mov rdi, COUNT
  2531 00001C39 4883C703                	add rdi, 3
  2532 00001C3D 48C1E703                	shl rdi, 3
  2533 00001C41 4801EF                  	add rdi, rbp
  2534 00001C44 488B6D00                	mov rbp, OLD_RDP
  2535 00001C48 BE00000000              	mov rsi, 0
  2536                                  .L_tc_recycle_frame_loop_5cae:	 ; start recycle frame loop
  2537 00001C4D 4883FE04                	cmp rsi, 4
  2538 00001C51 7427                    	je .L_tc_recycle_frame_done_5cae
  2539 00001C53 B903000000              	mov rcx, 3
  2540 00001C58 4829F1                  	sub rcx, rsi
  2541 00001C5B 48C1E103                	shl rcx, 3
  2542 00001C5F 4801E1                  	add rcx, rsp ; rcx is the address to move
  2543 00001C62 4889F3                  	mov rbx, rsi
  2544 00001C65 48C1E303                	shl rbx, 3
  2545 00001C69 48F7DB                  	neg rbx
  2546 00001C6C 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2547 00001C6F 488B09                  	mov rcx, [rcx]
  2548 00001C72 48890B                  	mov [rbx], rcx
  2549 00001C75 48FFC6                  	inc rsi
  2550 00001C78 EBD3                    	jmp .L_tc_recycle_frame_loop_5cae
  2551                                  .L_tc_recycle_frame_done_5cae:	 ; end recycle frame loop
  2552 00001C7A BB03000000              	mov rbx, 3
  2553 00001C7F 48C1E303                	shl rbx, 3
  2554 00001C83 48F7DB                  	neg rbx
  2555 00001C86 4801FB                  	add rbx, rdi
  2556 00001C89 4889DC                  	mov rsp, rbx
  2557 00001C8C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2558 00001C90 FFE3                    	jmp rbx
  2559 00001C92 C9                      	leave
  2560 00001C93 C21800                  	ret 8 * (2 + 1)
  2561                                  .L_lambda_simple_end_4f3a:	; new closure is in rax
  2562 00001C96 48890425[48020000]      	mov qword [free_var_73], rax
  2563 00001C9E 48B8-                   	mov rax, sob_void
  2563 00001CA0 [0000000000000000] 
  2564                                  
  2565 00001CA8 4889C7                  	mov rdi, rax
  2566 00001CAB E8150C0100              	call print_sexpr_if_not_void
  2567                                  
  2568 00001CB0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2569 00001CB5 E8FA0B0100              	call malloc
  2570 00001CBA 50                      	push rax
  2571 00001CBB BF00000000              	mov rdi, 8 * 0	; new rib
  2572 00001CC0 E8EF0B0100              	call malloc
  2573 00001CC5 50                      	push rax
  2574 00001CC6 BF08000000              	mov rdi, 8 * 1	; extended env
  2575 00001CCB E8E40B0100              	call malloc
  2576 00001CD0 488B7D10                	mov rdi, ENV
  2577 00001CD4 BE00000000              	mov rsi, 0
  2578 00001CD9 BA01000000              	mov rdx, 1
  2579                                  .L_lambda_simple_env_loop_4f3b:	; ext_env[i + 1] <-- env[i]
  2580 00001CDE 4883FE00                	cmp rsi, 0
  2581 00001CE2 7410                    	je .L_lambda_simple_env_end_4f3b
  2582 00001CE4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2583 00001CE8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2584 00001CEC 48FFC6                  	inc rsi
  2585 00001CEF 48FFC2                  	inc rdx
  2586 00001CF2 EBEA                    	jmp .L_lambda_simple_env_loop_4f3b
  2587                                  .L_lambda_simple_env_end_4f3b:
  2588 00001CF4 5B                      	pop rbx
  2589 00001CF5 BE00000000              	mov rsi, 0
  2590                                  .L_lambda_simple_params_loop_4f3b:	; copy params
  2591 00001CFA 4883FE00                	cmp rsi, 0
  2592 00001CFE 740E                    	je .L_lambda_simple_params_end_4f3b
  2593 00001D00 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2594 00001D05 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2595 00001D09 48FFC6                  	inc rsi
  2596 00001D0C EBEC                    	jmp .L_lambda_simple_params_loop_4f3b
  2597                                  .L_lambda_simple_params_end_4f3b:
  2598 00001D0E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2599 00001D11 4889C3                  	mov rbx, rax
  2600 00001D14 58                      	pop rax
  2601 00001D15 C60005                  	mov byte [rax], T_closure
  2602 00001D18 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2603 00001D1C 48C74009[291D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f3b
  2604 00001D24 E9B7000000              	jmp .L_lambda_simple_end_4f3b
  2605                                  .L_lambda_simple_code_4f3b:	; lambda-simple body
  2606 00001D29 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2607 00001D2F 740B                    	je .L_lambda_simple_arity_check_ok_4f3b
  2608 00001D31 FF742410                	push qword [rsp + 8 * 2]
  2609 00001D35 6A01                    	push 1
  2610 00001D37 E9310B0100              	jmp L_error_incorrect_arity_simple
  2611                                  .L_lambda_simple_arity_check_ok_4f3b:
  2612 00001D3C C8000000                	enter 0, 0
  2613 00001D40 488B4520                	mov rax, PARAM(0)
  2614 00001D44 50                      	push rax
  2615 00001D45 6A01                    	push 1
  2616 00001D47 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2617                                  	assert_closure(rax)
    65 00001D4F 803805              <1>  cmp byte [%1], %2
    66 00001D52 0F85DC230100        <1>  jne L_error_incorrect_type
  2618 00001D58 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2619 00001D5C 53                      	push rbx
  2620 00001D5D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2621 00001D61 FFD3                    	call rbx
  2622 00001D63 50                      	push rax
  2623 00001D64 6A01                    	push 1
  2624 00001D66 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2625                                  	assert_closure(rax)
    65 00001D6E 803805              <1>  cmp byte [%1], %2
    66 00001D71 0F85BD230100        <1>  jne L_error_incorrect_type
  2626 00001D77 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2627 00001D7B 53                      	push rbx
  2628 00001D7C FF7508                  	push RET_ADDR
  2629 00001D7F 488B7D18                	mov rdi, COUNT
  2630 00001D83 4883C703                	add rdi, 3
  2631 00001D87 48C1E703                	shl rdi, 3
  2632 00001D8B 4801EF                  	add rdi, rbp
  2633 00001D8E 488B6D00                	mov rbp, OLD_RDP
  2634 00001D92 BE00000000              	mov rsi, 0
  2635                                  .L_tc_recycle_frame_loop_5caf:	 ; start recycle frame loop
  2636 00001D97 4883FE04                	cmp rsi, 4
  2637 00001D9B 7427                    	je .L_tc_recycle_frame_done_5caf
  2638 00001D9D B903000000              	mov rcx, 3
  2639 00001DA2 4829F1                  	sub rcx, rsi
  2640 00001DA5 48C1E103                	shl rcx, 3
  2641 00001DA9 4801E1                  	add rcx, rsp ; rcx is the address to move
  2642 00001DAC 4889F3                  	mov rbx, rsi
  2643 00001DAF 48C1E303                	shl rbx, 3
  2644 00001DB3 48F7DB                  	neg rbx
  2645 00001DB6 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2646 00001DB9 488B09                  	mov rcx, [rcx]
  2647 00001DBC 48890B                  	mov [rbx], rcx
  2648 00001DBF 48FFC6                  	inc rsi
  2649 00001DC2 EBD3                    	jmp .L_tc_recycle_frame_loop_5caf
  2650                                  .L_tc_recycle_frame_done_5caf:	 ; end recycle frame loop
  2651 00001DC4 BB03000000              	mov rbx, 3
  2652 00001DC9 48C1E303                	shl rbx, 3
  2653 00001DCD 48F7DB                  	neg rbx
  2654 00001DD0 4801FB                  	add rbx, rdi
  2655 00001DD3 4889DC                  	mov rsp, rbx
  2656 00001DD6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2657 00001DDA FFE3                    	jmp rbx
  2658 00001DDC C9                      	leave
  2659 00001DDD C21800                  	ret 8 * (2 + 1)
  2660                                  .L_lambda_simple_end_4f3b:	; new closure is in rax
  2661 00001DE0 48890425[50020000]      	mov qword [free_var_74], rax
  2662 00001DE8 48B8-                   	mov rax, sob_void
  2662 00001DEA [0000000000000000] 
  2663                                  
  2664 00001DF2 4889C7                  	mov rdi, rax
  2665 00001DF5 E8CB0A0100              	call print_sexpr_if_not_void
  2666                                  
  2667 00001DFA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2668 00001DFF E8B00A0100              	call malloc
  2669 00001E04 50                      	push rax
  2670 00001E05 BF00000000              	mov rdi, 8 * 0	; new rib
  2671 00001E0A E8A50A0100              	call malloc
  2672 00001E0F 50                      	push rax
  2673 00001E10 BF08000000              	mov rdi, 8 * 1	; extended env
  2674 00001E15 E89A0A0100              	call malloc
  2675 00001E1A 488B7D10                	mov rdi, ENV
  2676 00001E1E BE00000000              	mov rsi, 0
  2677 00001E23 BA01000000              	mov rdx, 1
  2678                                  .L_lambda_simple_env_loop_4f3c:	; ext_env[i + 1] <-- env[i]
  2679 00001E28 4883FE00                	cmp rsi, 0
  2680 00001E2C 7410                    	je .L_lambda_simple_env_end_4f3c
  2681 00001E2E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2682 00001E32 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2683 00001E36 48FFC6                  	inc rsi
  2684 00001E39 48FFC2                  	inc rdx
  2685 00001E3C EBEA                    	jmp .L_lambda_simple_env_loop_4f3c
  2686                                  .L_lambda_simple_env_end_4f3c:
  2687 00001E3E 5B                      	pop rbx
  2688 00001E3F BE00000000              	mov rsi, 0
  2689                                  .L_lambda_simple_params_loop_4f3c:	; copy params
  2690 00001E44 4883FE00                	cmp rsi, 0
  2691 00001E48 740E                    	je .L_lambda_simple_params_end_4f3c
  2692 00001E4A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2693 00001E4F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2694 00001E53 48FFC6                  	inc rsi
  2695 00001E56 EBEC                    	jmp .L_lambda_simple_params_loop_4f3c
  2696                                  .L_lambda_simple_params_end_4f3c:
  2697 00001E58 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2698 00001E5B 4889C3                  	mov rbx, rax
  2699 00001E5E 58                      	pop rax
  2700 00001E5F C60005                  	mov byte [rax], T_closure
  2701 00001E62 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2702 00001E66 48C74009[731E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f3c
  2703 00001E6E E9B7000000              	jmp .L_lambda_simple_end_4f3c
  2704                                  .L_lambda_simple_code_4f3c:	; lambda-simple body
  2705 00001E73 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2706 00001E79 740B                    	je .L_lambda_simple_arity_check_ok_4f3c
  2707 00001E7B FF742410                	push qword [rsp + 8 * 2]
  2708 00001E7F 6A01                    	push 1
  2709 00001E81 E9E7090100              	jmp L_error_incorrect_arity_simple
  2710                                  .L_lambda_simple_arity_check_ok_4f3c:
  2711 00001E86 C8000000                	enter 0, 0
  2712 00001E8A 488B4520                	mov rax, PARAM(0)
  2713 00001E8E 50                      	push rax
  2714 00001E8F 6A01                    	push 1
  2715 00001E91 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2716                                  	assert_closure(rax)
    65 00001E99 803805              <1>  cmp byte [%1], %2
    66 00001E9C 0F8592220100        <1>  jne L_error_incorrect_type
  2717 00001EA2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2718 00001EA6 53                      	push rbx
  2719 00001EA7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2720 00001EAB FFD3                    	call rbx
  2721 00001EAD 50                      	push rax
  2722 00001EAE 6A01                    	push 1
  2723 00001EB0 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2724                                  	assert_closure(rax)
    65 00001EB8 803805              <1>  cmp byte [%1], %2
    66 00001EBB 0F8573220100        <1>  jne L_error_incorrect_type
  2725 00001EC1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2726 00001EC5 53                      	push rbx
  2727 00001EC6 FF7508                  	push RET_ADDR
  2728 00001EC9 488B7D18                	mov rdi, COUNT
  2729 00001ECD 4883C703                	add rdi, 3
  2730 00001ED1 48C1E703                	shl rdi, 3
  2731 00001ED5 4801EF                  	add rdi, rbp
  2732 00001ED8 488B6D00                	mov rbp, OLD_RDP
  2733 00001EDC BE00000000              	mov rsi, 0
  2734                                  .L_tc_recycle_frame_loop_5cb0:	 ; start recycle frame loop
  2735 00001EE1 4883FE04                	cmp rsi, 4
  2736 00001EE5 7427                    	je .L_tc_recycle_frame_done_5cb0
  2737 00001EE7 B903000000              	mov rcx, 3
  2738 00001EEC 4829F1                  	sub rcx, rsi
  2739 00001EEF 48C1E103                	shl rcx, 3
  2740 00001EF3 4801E1                  	add rcx, rsp ; rcx is the address to move
  2741 00001EF6 4889F3                  	mov rbx, rsi
  2742 00001EF9 48C1E303                	shl rbx, 3
  2743 00001EFD 48F7DB                  	neg rbx
  2744 00001F00 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2745 00001F03 488B09                  	mov rcx, [rcx]
  2746 00001F06 48890B                  	mov [rbx], rcx
  2747 00001F09 48FFC6                  	inc rsi
  2748 00001F0C EBD3                    	jmp .L_tc_recycle_frame_loop_5cb0
  2749                                  .L_tc_recycle_frame_done_5cb0:	 ; end recycle frame loop
  2750 00001F0E BB03000000              	mov rbx, 3
  2751 00001F13 48C1E303                	shl rbx, 3
  2752 00001F17 48F7DB                  	neg rbx
  2753 00001F1A 4801FB                  	add rbx, rdi
  2754 00001F1D 4889DC                  	mov rsp, rbx
  2755 00001F20 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2756 00001F24 FFE3                    	jmp rbx
  2757 00001F26 C9                      	leave
  2758 00001F27 C21800                  	ret 8 * (2 + 1)
  2759                                  .L_lambda_simple_end_4f3c:	; new closure is in rax
  2760 00001F2A 48890425[58020000]      	mov qword [free_var_75], rax
  2761 00001F32 48B8-                   	mov rax, sob_void
  2761 00001F34 [0000000000000000] 
  2762                                  
  2763 00001F3C 4889C7                  	mov rdi, rax
  2764 00001F3F E881090100              	call print_sexpr_if_not_void
  2765                                  
  2766 00001F44 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2767 00001F49 E866090100              	call malloc
  2768 00001F4E 50                      	push rax
  2769 00001F4F BF00000000              	mov rdi, 8 * 0	; new rib
  2770 00001F54 E85B090100              	call malloc
  2771 00001F59 50                      	push rax
  2772 00001F5A BF08000000              	mov rdi, 8 * 1	; extended env
  2773 00001F5F E850090100              	call malloc
  2774 00001F64 488B7D10                	mov rdi, ENV
  2775 00001F68 BE00000000              	mov rsi, 0
  2776 00001F6D BA01000000              	mov rdx, 1
  2777                                  .L_lambda_simple_env_loop_4f3d:	; ext_env[i + 1] <-- env[i]
  2778 00001F72 4883FE00                	cmp rsi, 0
  2779 00001F76 7410                    	je .L_lambda_simple_env_end_4f3d
  2780 00001F78 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2781 00001F7C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2782 00001F80 48FFC6                  	inc rsi
  2783 00001F83 48FFC2                  	inc rdx
  2784 00001F86 EBEA                    	jmp .L_lambda_simple_env_loop_4f3d
  2785                                  .L_lambda_simple_env_end_4f3d:
  2786 00001F88 5B                      	pop rbx
  2787 00001F89 BE00000000              	mov rsi, 0
  2788                                  .L_lambda_simple_params_loop_4f3d:	; copy params
  2789 00001F8E 4883FE00                	cmp rsi, 0
  2790 00001F92 740E                    	je .L_lambda_simple_params_end_4f3d
  2791 00001F94 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2792 00001F99 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2793 00001F9D 48FFC6                  	inc rsi
  2794 00001FA0 EBEC                    	jmp .L_lambda_simple_params_loop_4f3d
  2795                                  .L_lambda_simple_params_end_4f3d:
  2796 00001FA2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2797 00001FA5 4889C3                  	mov rbx, rax
  2798 00001FA8 58                      	pop rax
  2799 00001FA9 C60005                  	mov byte [rax], T_closure
  2800 00001FAC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2801 00001FB0 48C74009[BD1F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f3d
  2802 00001FB8 E9B7000000              	jmp .L_lambda_simple_end_4f3d
  2803                                  .L_lambda_simple_code_4f3d:	; lambda-simple body
  2804 00001FBD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2805 00001FC3 740B                    	je .L_lambda_simple_arity_check_ok_4f3d
  2806 00001FC5 FF742410                	push qword [rsp + 8 * 2]
  2807 00001FC9 6A01                    	push 1
  2808 00001FCB E99D080100              	jmp L_error_incorrect_arity_simple
  2809                                  .L_lambda_simple_arity_check_ok_4f3d:
  2810 00001FD0 C8000000                	enter 0, 0
  2811 00001FD4 488B4520                	mov rax, PARAM(0)
  2812 00001FD8 50                      	push rax
  2813 00001FD9 6A01                    	push 1
  2814 00001FDB 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2815                                  	assert_closure(rax)
    65 00001FE3 803805              <1>  cmp byte [%1], %2
    66 00001FE6 0F8548210100        <1>  jne L_error_incorrect_type
  2816 00001FEC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2817 00001FF0 53                      	push rbx
  2818 00001FF1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2819 00001FF5 FFD3                    	call rbx
  2820 00001FF7 50                      	push rax
  2821 00001FF8 6A01                    	push 1
  2822 00001FFA 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2823                                  	assert_closure(rax)
    65 00002002 803805              <1>  cmp byte [%1], %2
    66 00002005 0F8529210100        <1>  jne L_error_incorrect_type
  2824 0000200B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2825 0000200F 53                      	push rbx
  2826 00002010 FF7508                  	push RET_ADDR
  2827 00002013 488B7D18                	mov rdi, COUNT
  2828 00002017 4883C703                	add rdi, 3
  2829 0000201B 48C1E703                	shl rdi, 3
  2830 0000201F 4801EF                  	add rdi, rbp
  2831 00002022 488B6D00                	mov rbp, OLD_RDP
  2832 00002026 BE00000000              	mov rsi, 0
  2833                                  .L_tc_recycle_frame_loop_5cb1:	 ; start recycle frame loop
  2834 0000202B 4883FE04                	cmp rsi, 4
  2835 0000202F 7427                    	je .L_tc_recycle_frame_done_5cb1
  2836 00002031 B903000000              	mov rcx, 3
  2837 00002036 4829F1                  	sub rcx, rsi
  2838 00002039 48C1E103                	shl rcx, 3
  2839 0000203D 4801E1                  	add rcx, rsp ; rcx is the address to move
  2840 00002040 4889F3                  	mov rbx, rsi
  2841 00002043 48C1E303                	shl rbx, 3
  2842 00002047 48F7DB                  	neg rbx
  2843 0000204A 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2844 0000204D 488B09                  	mov rcx, [rcx]
  2845 00002050 48890B                  	mov [rbx], rcx
  2846 00002053 48FFC6                  	inc rsi
  2847 00002056 EBD3                    	jmp .L_tc_recycle_frame_loop_5cb1
  2848                                  .L_tc_recycle_frame_done_5cb1:	 ; end recycle frame loop
  2849 00002058 BB03000000              	mov rbx, 3
  2850 0000205D 48C1E303                	shl rbx, 3
  2851 00002061 48F7DB                  	neg rbx
  2852 00002064 4801FB                  	add rbx, rdi
  2853 00002067 4889DC                  	mov rsp, rbx
  2854 0000206A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2855 0000206E FFE3                    	jmp rbx
  2856 00002070 C9                      	leave
  2857 00002071 C21800                  	ret 8 * (2 + 1)
  2858                                  .L_lambda_simple_end_4f3d:	; new closure is in rax
  2859 00002074 48890425[60020000]      	mov qword [free_var_76], rax
  2860 0000207C 48B8-                   	mov rax, sob_void
  2860 0000207E [0000000000000000] 
  2861                                  
  2862 00002086 4889C7                  	mov rdi, rax
  2863 00002089 E837080100              	call print_sexpr_if_not_void
  2864                                  
  2865 0000208E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2866 00002093 E81C080100              	call malloc
  2867 00002098 50                      	push rax
  2868 00002099 BF00000000              	mov rdi, 8 * 0	; new rib
  2869 0000209E E811080100              	call malloc
  2870 000020A3 50                      	push rax
  2871 000020A4 BF08000000              	mov rdi, 8 * 1	; extended env
  2872 000020A9 E806080100              	call malloc
  2873 000020AE 488B7D10                	mov rdi, ENV
  2874 000020B2 BE00000000              	mov rsi, 0
  2875 000020B7 BA01000000              	mov rdx, 1
  2876                                  .L_lambda_simple_env_loop_4f3e:	; ext_env[i + 1] <-- env[i]
  2877 000020BC 4883FE00                	cmp rsi, 0
  2878 000020C0 7410                    	je .L_lambda_simple_env_end_4f3e
  2879 000020C2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2880 000020C6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2881 000020CA 48FFC6                  	inc rsi
  2882 000020CD 48FFC2                  	inc rdx
  2883 000020D0 EBEA                    	jmp .L_lambda_simple_env_loop_4f3e
  2884                                  .L_lambda_simple_env_end_4f3e:
  2885 000020D2 5B                      	pop rbx
  2886 000020D3 BE00000000              	mov rsi, 0
  2887                                  .L_lambda_simple_params_loop_4f3e:	; copy params
  2888 000020D8 4883FE00                	cmp rsi, 0
  2889 000020DC 740E                    	je .L_lambda_simple_params_end_4f3e
  2890 000020DE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2891 000020E3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2892 000020E7 48FFC6                  	inc rsi
  2893 000020EA EBEC                    	jmp .L_lambda_simple_params_loop_4f3e
  2894                                  .L_lambda_simple_params_end_4f3e:
  2895 000020EC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2896 000020EF 4889C3                  	mov rbx, rax
  2897 000020F2 58                      	pop rax
  2898 000020F3 C60005                  	mov byte [rax], T_closure
  2899 000020F6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2900 000020FA 48C74009[07210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f3e
  2901 00002102 E9B7000000              	jmp .L_lambda_simple_end_4f3e
  2902                                  .L_lambda_simple_code_4f3e:	; lambda-simple body
  2903 00002107 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2904 0000210D 740B                    	je .L_lambda_simple_arity_check_ok_4f3e
  2905 0000210F FF742410                	push qword [rsp + 8 * 2]
  2906 00002113 6A01                    	push 1
  2907 00002115 E953070100              	jmp L_error_incorrect_arity_simple
  2908                                  .L_lambda_simple_arity_check_ok_4f3e:
  2909 0000211A C8000000                	enter 0, 0
  2910 0000211E 488B4520                	mov rax, PARAM(0)
  2911 00002122 50                      	push rax
  2912 00002123 6A01                    	push 1
  2913 00002125 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2914                                  	assert_closure(rax)
    65 0000212D 803805              <1>  cmp byte [%1], %2
    66 00002130 0F85FE1F0100        <1>  jne L_error_incorrect_type
  2915 00002136 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2916 0000213A 53                      	push rbx
  2917 0000213B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2918 0000213F FFD3                    	call rbx
  2919 00002141 50                      	push rax
  2920 00002142 6A01                    	push 1
  2921 00002144 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2922                                  	assert_closure(rax)
    65 0000214C 803805              <1>  cmp byte [%1], %2
    66 0000214F 0F85DF1F0100        <1>  jne L_error_incorrect_type
  2923 00002155 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2924 00002159 53                      	push rbx
  2925 0000215A FF7508                  	push RET_ADDR
  2926 0000215D 488B7D18                	mov rdi, COUNT
  2927 00002161 4883C703                	add rdi, 3
  2928 00002165 48C1E703                	shl rdi, 3
  2929 00002169 4801EF                  	add rdi, rbp
  2930 0000216C 488B6D00                	mov rbp, OLD_RDP
  2931 00002170 BE00000000              	mov rsi, 0
  2932                                  .L_tc_recycle_frame_loop_5cb2:	 ; start recycle frame loop
  2933 00002175 4883FE04                	cmp rsi, 4
  2934 00002179 7427                    	je .L_tc_recycle_frame_done_5cb2
  2935 0000217B B903000000              	mov rcx, 3
  2936 00002180 4829F1                  	sub rcx, rsi
  2937 00002183 48C1E103                	shl rcx, 3
  2938 00002187 4801E1                  	add rcx, rsp ; rcx is the address to move
  2939 0000218A 4889F3                  	mov rbx, rsi
  2940 0000218D 48C1E303                	shl rbx, 3
  2941 00002191 48F7DB                  	neg rbx
  2942 00002194 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2943 00002197 488B09                  	mov rcx, [rcx]
  2944 0000219A 48890B                  	mov [rbx], rcx
  2945 0000219D 48FFC6                  	inc rsi
  2946 000021A0 EBD3                    	jmp .L_tc_recycle_frame_loop_5cb2
  2947                                  .L_tc_recycle_frame_done_5cb2:	 ; end recycle frame loop
  2948 000021A2 BB03000000              	mov rbx, 3
  2949 000021A7 48C1E303                	shl rbx, 3
  2950 000021AB 48F7DB                  	neg rbx
  2951 000021AE 4801FB                  	add rbx, rdi
  2952 000021B1 4889DC                  	mov rsp, rbx
  2953 000021B4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2954 000021B8 FFE3                    	jmp rbx
  2955 000021BA C9                      	leave
  2956 000021BB C21800                  	ret 8 * (2 + 1)
  2957                                  .L_lambda_simple_end_4f3e:	; new closure is in rax
  2958 000021BE 48890425[68020000]      	mov qword [free_var_77], rax
  2959 000021C6 48B8-                   	mov rax, sob_void
  2959 000021C8 [0000000000000000] 
  2960                                  
  2961 000021D0 4889C7                  	mov rdi, rax
  2962 000021D3 E8ED060100              	call print_sexpr_if_not_void
  2963                                  
  2964 000021D8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2965 000021DD E8D2060100              	call malloc
  2966 000021E2 50                      	push rax
  2967 000021E3 BF00000000              	mov rdi, 8 * 0	; new rib
  2968 000021E8 E8C7060100              	call malloc
  2969 000021ED 50                      	push rax
  2970 000021EE BF08000000              	mov rdi, 8 * 1	; extended env
  2971 000021F3 E8BC060100              	call malloc
  2972 000021F8 488B7D10                	mov rdi, ENV
  2973 000021FC BE00000000              	mov rsi, 0
  2974 00002201 BA01000000              	mov rdx, 1
  2975                                  .L_lambda_simple_env_loop_4f3f:	; ext_env[i + 1] <-- env[i]
  2976 00002206 4883FE00                	cmp rsi, 0
  2977 0000220A 7410                    	je .L_lambda_simple_env_end_4f3f
  2978 0000220C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2979 00002210 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2980 00002214 48FFC6                  	inc rsi
  2981 00002217 48FFC2                  	inc rdx
  2982 0000221A EBEA                    	jmp .L_lambda_simple_env_loop_4f3f
  2983                                  .L_lambda_simple_env_end_4f3f:
  2984 0000221C 5B                      	pop rbx
  2985 0000221D BE00000000              	mov rsi, 0
  2986                                  .L_lambda_simple_params_loop_4f3f:	; copy params
  2987 00002222 4883FE00                	cmp rsi, 0
  2988 00002226 740E                    	je .L_lambda_simple_params_end_4f3f
  2989 00002228 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2990 0000222D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2991 00002231 48FFC6                  	inc rsi
  2992 00002234 EBEC                    	jmp .L_lambda_simple_params_loop_4f3f
  2993                                  .L_lambda_simple_params_end_4f3f:
  2994 00002236 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2995 00002239 4889C3                  	mov rbx, rax
  2996 0000223C 58                      	pop rax
  2997 0000223D C60005                  	mov byte [rax], T_closure
  2998 00002240 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2999 00002244 48C74009[51220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f3f
  3000 0000224C E9B7000000              	jmp .L_lambda_simple_end_4f3f
  3001                                  .L_lambda_simple_code_4f3f:	; lambda-simple body
  3002 00002251 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3003 00002257 740B                    	je .L_lambda_simple_arity_check_ok_4f3f
  3004 00002259 FF742410                	push qword [rsp + 8 * 2]
  3005 0000225D 6A01                    	push 1
  3006 0000225F E909060100              	jmp L_error_incorrect_arity_simple
  3007                                  .L_lambda_simple_arity_check_ok_4f3f:
  3008 00002264 C8000000                	enter 0, 0
  3009 00002268 488B4520                	mov rax, PARAM(0)
  3010 0000226C 50                      	push rax
  3011 0000226D 6A01                    	push 1
  3012 0000226F 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3013                                  	assert_closure(rax)
    65 00002277 803805              <1>  cmp byte [%1], %2
    66 0000227A 0F85B41E0100        <1>  jne L_error_incorrect_type
  3014 00002280 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3015 00002284 53                      	push rbx
  3016 00002285 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3017 00002289 FFD3                    	call rbx
  3018 0000228B 50                      	push rax
  3019 0000228C 6A01                    	push 1
  3020 0000228E 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3021                                  	assert_closure(rax)
    65 00002296 803805              <1>  cmp byte [%1], %2
    66 00002299 0F85951E0100        <1>  jne L_error_incorrect_type
  3022 0000229F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3023 000022A3 53                      	push rbx
  3024 000022A4 FF7508                  	push RET_ADDR
  3025 000022A7 488B7D18                	mov rdi, COUNT
  3026 000022AB 4883C703                	add rdi, 3
  3027 000022AF 48C1E703                	shl rdi, 3
  3028 000022B3 4801EF                  	add rdi, rbp
  3029 000022B6 488B6D00                	mov rbp, OLD_RDP
  3030 000022BA BE00000000              	mov rsi, 0
  3031                                  .L_tc_recycle_frame_loop_5cb3:	 ; start recycle frame loop
  3032 000022BF 4883FE04                	cmp rsi, 4
  3033 000022C3 7427                    	je .L_tc_recycle_frame_done_5cb3
  3034 000022C5 B903000000              	mov rcx, 3
  3035 000022CA 4829F1                  	sub rcx, rsi
  3036 000022CD 48C1E103                	shl rcx, 3
  3037 000022D1 4801E1                  	add rcx, rsp ; rcx is the address to move
  3038 000022D4 4889F3                  	mov rbx, rsi
  3039 000022D7 48C1E303                	shl rbx, 3
  3040 000022DB 48F7DB                  	neg rbx
  3041 000022DE 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3042 000022E1 488B09                  	mov rcx, [rcx]
  3043 000022E4 48890B                  	mov [rbx], rcx
  3044 000022E7 48FFC6                  	inc rsi
  3045 000022EA EBD3                    	jmp .L_tc_recycle_frame_loop_5cb3
  3046                                  .L_tc_recycle_frame_done_5cb3:	 ; end recycle frame loop
  3047 000022EC BB03000000              	mov rbx, 3
  3048 000022F1 48C1E303                	shl rbx, 3
  3049 000022F5 48F7DB                  	neg rbx
  3050 000022F8 4801FB                  	add rbx, rdi
  3051 000022FB 4889DC                  	mov rsp, rbx
  3052 000022FE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3053 00002302 FFE3                    	jmp rbx
  3054 00002304 C9                      	leave
  3055 00002305 C21800                  	ret 8 * (2 + 1)
  3056                                  .L_lambda_simple_end_4f3f:	; new closure is in rax
  3057 00002308 48890425[70020000]      	mov qword [free_var_78], rax
  3058 00002310 48B8-                   	mov rax, sob_void
  3058 00002312 [0000000000000000] 
  3059                                  
  3060 0000231A 4889C7                  	mov rdi, rax
  3061 0000231D E8A3050100              	call print_sexpr_if_not_void
  3062                                  
  3063 00002322 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3064 00002327 E888050100              	call malloc
  3065 0000232C 50                      	push rax
  3066 0000232D BF00000000              	mov rdi, 8 * 0	; new rib
  3067 00002332 E87D050100              	call malloc
  3068 00002337 50                      	push rax
  3069 00002338 BF08000000              	mov rdi, 8 * 1	; extended env
  3070 0000233D E872050100              	call malloc
  3071 00002342 488B7D10                	mov rdi, ENV
  3072 00002346 BE00000000              	mov rsi, 0
  3073 0000234B BA01000000              	mov rdx, 1
  3074                                  .L_lambda_simple_env_loop_4f40:	; ext_env[i + 1] <-- env[i]
  3075 00002350 4883FE00                	cmp rsi, 0
  3076 00002354 7410                    	je .L_lambda_simple_env_end_4f40
  3077 00002356 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3078 0000235A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3079 0000235E 48FFC6                  	inc rsi
  3080 00002361 48FFC2                  	inc rdx
  3081 00002364 EBEA                    	jmp .L_lambda_simple_env_loop_4f40
  3082                                  .L_lambda_simple_env_end_4f40:
  3083 00002366 5B                      	pop rbx
  3084 00002367 BE00000000              	mov rsi, 0
  3085                                  .L_lambda_simple_params_loop_4f40:	; copy params
  3086 0000236C 4883FE00                	cmp rsi, 0
  3087 00002370 740E                    	je .L_lambda_simple_params_end_4f40
  3088 00002372 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3089 00002377 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3090 0000237B 48FFC6                  	inc rsi
  3091 0000237E EBEC                    	jmp .L_lambda_simple_params_loop_4f40
  3092                                  .L_lambda_simple_params_end_4f40:
  3093 00002380 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3094 00002383 4889C3                  	mov rbx, rax
  3095 00002386 58                      	pop rax
  3096 00002387 C60005                  	mov byte [rax], T_closure
  3097 0000238A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3098 0000238E 48C74009[9B230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f40
  3099 00002396 E9B7000000              	jmp .L_lambda_simple_end_4f40
  3100                                  .L_lambda_simple_code_4f40:	; lambda-simple body
  3101 0000239B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3102 000023A1 740B                    	je .L_lambda_simple_arity_check_ok_4f40
  3103 000023A3 FF742410                	push qword [rsp + 8 * 2]
  3104 000023A7 6A01                    	push 1
  3105 000023A9 E9BF040100              	jmp L_error_incorrect_arity_simple
  3106                                  .L_lambda_simple_arity_check_ok_4f40:
  3107 000023AE C8000000                	enter 0, 0
  3108 000023B2 488B4520                	mov rax, PARAM(0)
  3109 000023B6 50                      	push rax
  3110 000023B7 6A01                    	push 1
  3111 000023B9 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3112                                  	assert_closure(rax)
    65 000023C1 803805              <1>  cmp byte [%1], %2
    66 000023C4 0F856A1D0100        <1>  jne L_error_incorrect_type
  3113 000023CA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3114 000023CE 53                      	push rbx
  3115 000023CF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3116 000023D3 FFD3                    	call rbx
  3117 000023D5 50                      	push rax
  3118 000023D6 6A01                    	push 1
  3119 000023D8 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3120                                  	assert_closure(rax)
    65 000023E0 803805              <1>  cmp byte [%1], %2
    66 000023E3 0F854B1D0100        <1>  jne L_error_incorrect_type
  3121 000023E9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3122 000023ED 53                      	push rbx
  3123 000023EE FF7508                  	push RET_ADDR
  3124 000023F1 488B7D18                	mov rdi, COUNT
  3125 000023F5 4883C703                	add rdi, 3
  3126 000023F9 48C1E703                	shl rdi, 3
  3127 000023FD 4801EF                  	add rdi, rbp
  3128 00002400 488B6D00                	mov rbp, OLD_RDP
  3129 00002404 BE00000000              	mov rsi, 0
  3130                                  .L_tc_recycle_frame_loop_5cb4:	 ; start recycle frame loop
  3131 00002409 4883FE04                	cmp rsi, 4
  3132 0000240D 7427                    	je .L_tc_recycle_frame_done_5cb4
  3133 0000240F B903000000              	mov rcx, 3
  3134 00002414 4829F1                  	sub rcx, rsi
  3135 00002417 48C1E103                	shl rcx, 3
  3136 0000241B 4801E1                  	add rcx, rsp ; rcx is the address to move
  3137 0000241E 4889F3                  	mov rbx, rsi
  3138 00002421 48C1E303                	shl rbx, 3
  3139 00002425 48F7DB                  	neg rbx
  3140 00002428 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3141 0000242B 488B09                  	mov rcx, [rcx]
  3142 0000242E 48890B                  	mov [rbx], rcx
  3143 00002431 48FFC6                  	inc rsi
  3144 00002434 EBD3                    	jmp .L_tc_recycle_frame_loop_5cb4
  3145                                  .L_tc_recycle_frame_done_5cb4:	 ; end recycle frame loop
  3146 00002436 BB03000000              	mov rbx, 3
  3147 0000243B 48C1E303                	shl rbx, 3
  3148 0000243F 48F7DB                  	neg rbx
  3149 00002442 4801FB                  	add rbx, rdi
  3150 00002445 4889DC                  	mov rsp, rbx
  3151 00002448 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3152 0000244C FFE3                    	jmp rbx
  3153 0000244E C9                      	leave
  3154 0000244F C21800                  	ret 8 * (2 + 1)
  3155                                  .L_lambda_simple_end_4f40:	; new closure is in rax
  3156 00002452 48890425[78020000]      	mov qword [free_var_79], rax
  3157 0000245A 48B8-                   	mov rax, sob_void
  3157 0000245C [0000000000000000] 
  3158                                  
  3159 00002464 4889C7                  	mov rdi, rax
  3160 00002467 E859040100              	call print_sexpr_if_not_void
  3161                                  
  3162 0000246C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3163 00002471 E83E040100              	call malloc
  3164 00002476 50                      	push rax
  3165 00002477 BF00000000              	mov rdi, 8 * 0	; new rib
  3166 0000247C E833040100              	call malloc
  3167 00002481 50                      	push rax
  3168 00002482 BF08000000              	mov rdi, 8 * 1	; extended env
  3169 00002487 E828040100              	call malloc
  3170 0000248C 488B7D10                	mov rdi, ENV
  3171 00002490 BE00000000              	mov rsi, 0
  3172 00002495 BA01000000              	mov rdx, 1
  3173                                  .L_lambda_simple_env_loop_4f41:	; ext_env[i + 1] <-- env[i]
  3174 0000249A 4883FE00                	cmp rsi, 0
  3175 0000249E 7410                    	je .L_lambda_simple_env_end_4f41
  3176 000024A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3177 000024A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3178 000024A8 48FFC6                  	inc rsi
  3179 000024AB 48FFC2                  	inc rdx
  3180 000024AE EBEA                    	jmp .L_lambda_simple_env_loop_4f41
  3181                                  .L_lambda_simple_env_end_4f41:
  3182 000024B0 5B                      	pop rbx
  3183 000024B1 BE00000000              	mov rsi, 0
  3184                                  .L_lambda_simple_params_loop_4f41:	; copy params
  3185 000024B6 4883FE00                	cmp rsi, 0
  3186 000024BA 740E                    	je .L_lambda_simple_params_end_4f41
  3187 000024BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3188 000024C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3189 000024C5 48FFC6                  	inc rsi
  3190 000024C8 EBEC                    	jmp .L_lambda_simple_params_loop_4f41
  3191                                  .L_lambda_simple_params_end_4f41:
  3192 000024CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3193 000024CD 4889C3                  	mov rbx, rax
  3194 000024D0 58                      	pop rax
  3195 000024D1 C60005                  	mov byte [rax], T_closure
  3196 000024D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3197 000024D8 48C74009[E5240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f41
  3198 000024E0 E9B7000000              	jmp .L_lambda_simple_end_4f41
  3199                                  .L_lambda_simple_code_4f41:	; lambda-simple body
  3200 000024E5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3201 000024EB 740B                    	je .L_lambda_simple_arity_check_ok_4f41
  3202 000024ED FF742410                	push qword [rsp + 8 * 2]
  3203 000024F1 6A01                    	push 1
  3204 000024F3 E975030100              	jmp L_error_incorrect_arity_simple
  3205                                  .L_lambda_simple_arity_check_ok_4f41:
  3206 000024F8 C8000000                	enter 0, 0
  3207 000024FC 488B4520                	mov rax, PARAM(0)
  3208 00002500 50                      	push rax
  3209 00002501 6A01                    	push 1
  3210 00002503 488B0425[C0010000]      	mov rax, qword [free_var_56]
  3211                                  	assert_closure(rax)
    65 0000250B 803805              <1>  cmp byte [%1], %2
    66 0000250E 0F85201C0100        <1>  jne L_error_incorrect_type
  3212 00002514 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3213 00002518 53                      	push rbx
  3214 00002519 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3215 0000251D FFD3                    	call rbx
  3216 0000251F 50                      	push rax
  3217 00002520 6A01                    	push 1
  3218 00002522 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3219                                  	assert_closure(rax)
    65 0000252A 803805              <1>  cmp byte [%1], %2
    66 0000252D 0F85011C0100        <1>  jne L_error_incorrect_type
  3220 00002533 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3221 00002537 53                      	push rbx
  3222 00002538 FF7508                  	push RET_ADDR
  3223 0000253B 488B7D18                	mov rdi, COUNT
  3224 0000253F 4883C703                	add rdi, 3
  3225 00002543 48C1E703                	shl rdi, 3
  3226 00002547 4801EF                  	add rdi, rbp
  3227 0000254A 488B6D00                	mov rbp, OLD_RDP
  3228 0000254E BE00000000              	mov rsi, 0
  3229                                  .L_tc_recycle_frame_loop_5cb5:	 ; start recycle frame loop
  3230 00002553 4883FE04                	cmp rsi, 4
  3231 00002557 7427                    	je .L_tc_recycle_frame_done_5cb5
  3232 00002559 B903000000              	mov rcx, 3
  3233 0000255E 4829F1                  	sub rcx, rsi
  3234 00002561 48C1E103                	shl rcx, 3
  3235 00002565 4801E1                  	add rcx, rsp ; rcx is the address to move
  3236 00002568 4889F3                  	mov rbx, rsi
  3237 0000256B 48C1E303                	shl rbx, 3
  3238 0000256F 48F7DB                  	neg rbx
  3239 00002572 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3240 00002575 488B09                  	mov rcx, [rcx]
  3241 00002578 48890B                  	mov [rbx], rcx
  3242 0000257B 48FFC6                  	inc rsi
  3243 0000257E EBD3                    	jmp .L_tc_recycle_frame_loop_5cb5
  3244                                  .L_tc_recycle_frame_done_5cb5:	 ; end recycle frame loop
  3245 00002580 BB03000000              	mov rbx, 3
  3246 00002585 48C1E303                	shl rbx, 3
  3247 00002589 48F7DB                  	neg rbx
  3248 0000258C 4801FB                  	add rbx, rdi
  3249 0000258F 4889DC                  	mov rsp, rbx
  3250 00002592 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3251 00002596 FFE3                    	jmp rbx
  3252 00002598 C9                      	leave
  3253 00002599 C21800                  	ret 8 * (2 + 1)
  3254                                  .L_lambda_simple_end_4f41:	; new closure is in rax
  3255 0000259C 48890425[80020000]      	mov qword [free_var_80], rax
  3256 000025A4 48B8-                   	mov rax, sob_void
  3256 000025A6 [0000000000000000] 
  3257                                  
  3258 000025AE 4889C7                  	mov rdi, rax
  3259 000025B1 E80F030100              	call print_sexpr_if_not_void
  3260                                  
  3261 000025B6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3262 000025BB E8F4020100              	call malloc
  3263 000025C0 50                      	push rax
  3264 000025C1 BF00000000              	mov rdi, 8 * 0	; new rib
  3265 000025C6 E8E9020100              	call malloc
  3266 000025CB 50                      	push rax
  3267 000025CC BF08000000              	mov rdi, 8 * 1	; extended env
  3268 000025D1 E8DE020100              	call malloc
  3269 000025D6 488B7D10                	mov rdi, ENV
  3270 000025DA BE00000000              	mov rsi, 0
  3271 000025DF BA01000000              	mov rdx, 1
  3272                                  .L_lambda_simple_env_loop_4f42:	; ext_env[i + 1] <-- env[i]
  3273 000025E4 4883FE00                	cmp rsi, 0
  3274 000025E8 7410                    	je .L_lambda_simple_env_end_4f42
  3275 000025EA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3276 000025EE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3277 000025F2 48FFC6                  	inc rsi
  3278 000025F5 48FFC2                  	inc rdx
  3279 000025F8 EBEA                    	jmp .L_lambda_simple_env_loop_4f42
  3280                                  .L_lambda_simple_env_end_4f42:
  3281 000025FA 5B                      	pop rbx
  3282 000025FB BE00000000              	mov rsi, 0
  3283                                  .L_lambda_simple_params_loop_4f42:	; copy params
  3284 00002600 4883FE00                	cmp rsi, 0
  3285 00002604 740E                    	je .L_lambda_simple_params_end_4f42
  3286 00002606 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3287 0000260B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3288 0000260F 48FFC6                  	inc rsi
  3289 00002612 EBEC                    	jmp .L_lambda_simple_params_loop_4f42
  3290                                  .L_lambda_simple_params_end_4f42:
  3291 00002614 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3292 00002617 4889C3                  	mov rbx, rax
  3293 0000261A 58                      	pop rax
  3294 0000261B C60005                  	mov byte [rax], T_closure
  3295 0000261E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3296 00002622 48C74009[2F260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f42
  3297 0000262A E9B7000000              	jmp .L_lambda_simple_end_4f42
  3298                                  .L_lambda_simple_code_4f42:	; lambda-simple body
  3299 0000262F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3300 00002635 740B                    	je .L_lambda_simple_arity_check_ok_4f42
  3301 00002637 FF742410                	push qword [rsp + 8 * 2]
  3302 0000263B 6A01                    	push 1
  3303 0000263D E92B020100              	jmp L_error_incorrect_arity_simple
  3304                                  .L_lambda_simple_arity_check_ok_4f42:
  3305 00002642 C8000000                	enter 0, 0
  3306 00002646 488B4520                	mov rax, PARAM(0)
  3307 0000264A 50                      	push rax
  3308 0000264B 6A01                    	push 1
  3309 0000264D 488B0425[C8010000]      	mov rax, qword [free_var_57]
  3310                                  	assert_closure(rax)
    65 00002655 803805              <1>  cmp byte [%1], %2
    66 00002658 0F85D61A0100        <1>  jne L_error_incorrect_type
  3311 0000265E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3312 00002662 53                      	push rbx
  3313 00002663 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3314 00002667 FFD3                    	call rbx
  3315 00002669 50                      	push rax
  3316 0000266A 6A01                    	push 1
  3317 0000266C 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3318                                  	assert_closure(rax)
    65 00002674 803805              <1>  cmp byte [%1], %2
    66 00002677 0F85B71A0100        <1>  jne L_error_incorrect_type
  3319 0000267D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3320 00002681 53                      	push rbx
  3321 00002682 FF7508                  	push RET_ADDR
  3322 00002685 488B7D18                	mov rdi, COUNT
  3323 00002689 4883C703                	add rdi, 3
  3324 0000268D 48C1E703                	shl rdi, 3
  3325 00002691 4801EF                  	add rdi, rbp
  3326 00002694 488B6D00                	mov rbp, OLD_RDP
  3327 00002698 BE00000000              	mov rsi, 0
  3328                                  .L_tc_recycle_frame_loop_5cb6:	 ; start recycle frame loop
  3329 0000269D 4883FE04                	cmp rsi, 4
  3330 000026A1 7427                    	je .L_tc_recycle_frame_done_5cb6
  3331 000026A3 B903000000              	mov rcx, 3
  3332 000026A8 4829F1                  	sub rcx, rsi
  3333 000026AB 48C1E103                	shl rcx, 3
  3334 000026AF 4801E1                  	add rcx, rsp ; rcx is the address to move
  3335 000026B2 4889F3                  	mov rbx, rsi
  3336 000026B5 48C1E303                	shl rbx, 3
  3337 000026B9 48F7DB                  	neg rbx
  3338 000026BC 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3339 000026BF 488B09                  	mov rcx, [rcx]
  3340 000026C2 48890B                  	mov [rbx], rcx
  3341 000026C5 48FFC6                  	inc rsi
  3342 000026C8 EBD3                    	jmp .L_tc_recycle_frame_loop_5cb6
  3343                                  .L_tc_recycle_frame_done_5cb6:	 ; end recycle frame loop
  3344 000026CA BB03000000              	mov rbx, 3
  3345 000026CF 48C1E303                	shl rbx, 3
  3346 000026D3 48F7DB                  	neg rbx
  3347 000026D6 4801FB                  	add rbx, rdi
  3348 000026D9 4889DC                  	mov rsp, rbx
  3349 000026DC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3350 000026E0 FFE3                    	jmp rbx
  3351 000026E2 C9                      	leave
  3352 000026E3 C21800                  	ret 8 * (2 + 1)
  3353                                  .L_lambda_simple_end_4f42:	; new closure is in rax
  3354 000026E6 48890425[88020000]      	mov qword [free_var_81], rax
  3355 000026EE 48B8-                   	mov rax, sob_void
  3355 000026F0 [0000000000000000] 
  3356                                  
  3357 000026F8 4889C7                  	mov rdi, rax
  3358 000026FB E8C5010100              	call print_sexpr_if_not_void
  3359                                  
  3360 00002700 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3361 00002705 E8AA010100              	call malloc
  3362 0000270A 50                      	push rax
  3363 0000270B BF00000000              	mov rdi, 8 * 0	; new rib
  3364 00002710 E89F010100              	call malloc
  3365 00002715 50                      	push rax
  3366 00002716 BF08000000              	mov rdi, 8 * 1	; extended env
  3367 0000271B E894010100              	call malloc
  3368 00002720 488B7D10                	mov rdi, ENV
  3369 00002724 BE00000000              	mov rsi, 0
  3370 00002729 BA01000000              	mov rdx, 1
  3371                                  .L_lambda_simple_env_loop_4f43:	; ext_env[i + 1] <-- env[i]
  3372 0000272E 4883FE00                	cmp rsi, 0
  3373 00002732 7410                    	je .L_lambda_simple_env_end_4f43
  3374 00002734 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3375 00002738 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3376 0000273C 48FFC6                  	inc rsi
  3377 0000273F 48FFC2                  	inc rdx
  3378 00002742 EBEA                    	jmp .L_lambda_simple_env_loop_4f43
  3379                                  .L_lambda_simple_env_end_4f43:
  3380 00002744 5B                      	pop rbx
  3381 00002745 BE00000000              	mov rsi, 0
  3382                                  .L_lambda_simple_params_loop_4f43:	; copy params
  3383 0000274A 4883FE00                	cmp rsi, 0
  3384 0000274E 740E                    	je .L_lambda_simple_params_end_4f43
  3385 00002750 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3386 00002755 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3387 00002759 48FFC6                  	inc rsi
  3388 0000275C EBEC                    	jmp .L_lambda_simple_params_loop_4f43
  3389                                  .L_lambda_simple_params_end_4f43:
  3390 0000275E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3391 00002761 4889C3                  	mov rbx, rax
  3392 00002764 58                      	pop rax
  3393 00002765 C60005                  	mov byte [rax], T_closure
  3394 00002768 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3395 0000276C 48C74009[79270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f43
  3396 00002774 E9B7000000              	jmp .L_lambda_simple_end_4f43
  3397                                  .L_lambda_simple_code_4f43:	; lambda-simple body
  3398 00002779 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3399 0000277F 740B                    	je .L_lambda_simple_arity_check_ok_4f43
  3400 00002781 FF742410                	push qword [rsp + 8 * 2]
  3401 00002785 6A01                    	push 1
  3402 00002787 E9E1000100              	jmp L_error_incorrect_arity_simple
  3403                                  .L_lambda_simple_arity_check_ok_4f43:
  3404 0000278C C8000000                	enter 0, 0
  3405 00002790 488B4520                	mov rax, PARAM(0)
  3406 00002794 50                      	push rax
  3407 00002795 6A01                    	push 1
  3408 00002797 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3409                                  	assert_closure(rax)
    65 0000279F 803805              <1>  cmp byte [%1], %2
    66 000027A2 0F858C190100        <1>  jne L_error_incorrect_type
  3410 000027A8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3411 000027AC 53                      	push rbx
  3412 000027AD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3413 000027B1 FFD3                    	call rbx
  3414 000027B3 50                      	push rax
  3415 000027B4 6A01                    	push 1
  3416 000027B6 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3417                                  	assert_closure(rax)
    65 000027BE 803805              <1>  cmp byte [%1], %2
    66 000027C1 0F856D190100        <1>  jne L_error_incorrect_type
  3418 000027C7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3419 000027CB 53                      	push rbx
  3420 000027CC FF7508                  	push RET_ADDR
  3421 000027CF 488B7D18                	mov rdi, COUNT
  3422 000027D3 4883C703                	add rdi, 3
  3423 000027D7 48C1E703                	shl rdi, 3
  3424 000027DB 4801EF                  	add rdi, rbp
  3425 000027DE 488B6D00                	mov rbp, OLD_RDP
  3426 000027E2 BE00000000              	mov rsi, 0
  3427                                  .L_tc_recycle_frame_loop_5cb7:	 ; start recycle frame loop
  3428 000027E7 4883FE04                	cmp rsi, 4
  3429 000027EB 7427                    	je .L_tc_recycle_frame_done_5cb7
  3430 000027ED B903000000              	mov rcx, 3
  3431 000027F2 4829F1                  	sub rcx, rsi
  3432 000027F5 48C1E103                	shl rcx, 3
  3433 000027F9 4801E1                  	add rcx, rsp ; rcx is the address to move
  3434 000027FC 4889F3                  	mov rbx, rsi
  3435 000027FF 48C1E303                	shl rbx, 3
  3436 00002803 48F7DB                  	neg rbx
  3437 00002806 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3438 00002809 488B09                  	mov rcx, [rcx]
  3439 0000280C 48890B                  	mov [rbx], rcx
  3440 0000280F 48FFC6                  	inc rsi
  3441 00002812 EBD3                    	jmp .L_tc_recycle_frame_loop_5cb7
  3442                                  .L_tc_recycle_frame_done_5cb7:	 ; end recycle frame loop
  3443 00002814 BB03000000              	mov rbx, 3
  3444 00002819 48C1E303                	shl rbx, 3
  3445 0000281D 48F7DB                  	neg rbx
  3446 00002820 4801FB                  	add rbx, rdi
  3447 00002823 4889DC                  	mov rsp, rbx
  3448 00002826 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3449 0000282A FFE3                    	jmp rbx
  3450 0000282C C9                      	leave
  3451 0000282D C21800                  	ret 8 * (2 + 1)
  3452                                  .L_lambda_simple_end_4f43:	; new closure is in rax
  3453 00002830 48890425[90020000]      	mov qword [free_var_82], rax
  3454 00002838 48B8-                   	mov rax, sob_void
  3454 0000283A [0000000000000000] 
  3455                                  
  3456 00002842 4889C7                  	mov rdi, rax
  3457 00002845 E87B000100              	call print_sexpr_if_not_void
  3458                                  
  3459 0000284A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3460 0000284F E860000100              	call malloc
  3461 00002854 50                      	push rax
  3462 00002855 BF00000000              	mov rdi, 8 * 0	; new rib
  3463 0000285A E855000100              	call malloc
  3464 0000285F 50                      	push rax
  3465 00002860 BF08000000              	mov rdi, 8 * 1	; extended env
  3466 00002865 E84A000100              	call malloc
  3467 0000286A 488B7D10                	mov rdi, ENV
  3468 0000286E BE00000000              	mov rsi, 0
  3469 00002873 BA01000000              	mov rdx, 1
  3470                                  .L_lambda_simple_env_loop_4f44:	; ext_env[i + 1] <-- env[i]
  3471 00002878 4883FE00                	cmp rsi, 0
  3472 0000287C 7410                    	je .L_lambda_simple_env_end_4f44
  3473 0000287E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3474 00002882 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3475 00002886 48FFC6                  	inc rsi
  3476 00002889 48FFC2                  	inc rdx
  3477 0000288C EBEA                    	jmp .L_lambda_simple_env_loop_4f44
  3478                                  .L_lambda_simple_env_end_4f44:
  3479 0000288E 5B                      	pop rbx
  3480 0000288F BE00000000              	mov rsi, 0
  3481                                  .L_lambda_simple_params_loop_4f44:	; copy params
  3482 00002894 4883FE00                	cmp rsi, 0
  3483 00002898 740E                    	je .L_lambda_simple_params_end_4f44
  3484 0000289A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3485 0000289F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3486 000028A3 48FFC6                  	inc rsi
  3487 000028A6 EBEC                    	jmp .L_lambda_simple_params_loop_4f44
  3488                                  .L_lambda_simple_params_end_4f44:
  3489 000028A8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3490 000028AB 4889C3                  	mov rbx, rax
  3491 000028AE 58                      	pop rax
  3492 000028AF C60005                  	mov byte [rax], T_closure
  3493 000028B2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3494 000028B6 48C74009[C3280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f44
  3495 000028BE E9B7000000              	jmp .L_lambda_simple_end_4f44
  3496                                  .L_lambda_simple_code_4f44:	; lambda-simple body
  3497 000028C3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3498 000028C9 740B                    	je .L_lambda_simple_arity_check_ok_4f44
  3499 000028CB FF742410                	push qword [rsp + 8 * 2]
  3500 000028CF 6A01                    	push 1
  3501 000028D1 E997FF0000              	jmp L_error_incorrect_arity_simple
  3502                                  .L_lambda_simple_arity_check_ok_4f44:
  3503 000028D6 C8000000                	enter 0, 0
  3504 000028DA 488B4520                	mov rax, PARAM(0)
  3505 000028DE 50                      	push rax
  3506 000028DF 6A01                    	push 1
  3507 000028E1 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3508                                  	assert_closure(rax)
    65 000028E9 803805              <1>  cmp byte [%1], %2
    66 000028EC 0F8542180100        <1>  jne L_error_incorrect_type
  3509 000028F2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3510 000028F6 53                      	push rbx
  3511 000028F7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3512 000028FB FFD3                    	call rbx
  3513 000028FD 50                      	push rax
  3514 000028FE 6A01                    	push 1
  3515 00002900 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3516                                  	assert_closure(rax)
    65 00002908 803805              <1>  cmp byte [%1], %2
    66 0000290B 0F8523180100        <1>  jne L_error_incorrect_type
  3517 00002911 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3518 00002915 53                      	push rbx
  3519 00002916 FF7508                  	push RET_ADDR
  3520 00002919 488B7D18                	mov rdi, COUNT
  3521 0000291D 4883C703                	add rdi, 3
  3522 00002921 48C1E703                	shl rdi, 3
  3523 00002925 4801EF                  	add rdi, rbp
  3524 00002928 488B6D00                	mov rbp, OLD_RDP
  3525 0000292C BE00000000              	mov rsi, 0
  3526                                  .L_tc_recycle_frame_loop_5cb8:	 ; start recycle frame loop
  3527 00002931 4883FE04                	cmp rsi, 4
  3528 00002935 7427                    	je .L_tc_recycle_frame_done_5cb8
  3529 00002937 B903000000              	mov rcx, 3
  3530 0000293C 4829F1                  	sub rcx, rsi
  3531 0000293F 48C1E103                	shl rcx, 3
  3532 00002943 4801E1                  	add rcx, rsp ; rcx is the address to move
  3533 00002946 4889F3                  	mov rbx, rsi
  3534 00002949 48C1E303                	shl rbx, 3
  3535 0000294D 48F7DB                  	neg rbx
  3536 00002950 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3537 00002953 488B09                  	mov rcx, [rcx]
  3538 00002956 48890B                  	mov [rbx], rcx
  3539 00002959 48FFC6                  	inc rsi
  3540 0000295C EBD3                    	jmp .L_tc_recycle_frame_loop_5cb8
  3541                                  .L_tc_recycle_frame_done_5cb8:	 ; end recycle frame loop
  3542 0000295E BB03000000              	mov rbx, 3
  3543 00002963 48C1E303                	shl rbx, 3
  3544 00002967 48F7DB                  	neg rbx
  3545 0000296A 4801FB                  	add rbx, rdi
  3546 0000296D 4889DC                  	mov rsp, rbx
  3547 00002970 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3548 00002974 FFE3                    	jmp rbx
  3549 00002976 C9                      	leave
  3550 00002977 C21800                  	ret 8 * (2 + 1)
  3551                                  .L_lambda_simple_end_4f44:	; new closure is in rax
  3552 0000297A 48890425[98020000]      	mov qword [free_var_83], rax
  3553 00002982 48B8-                   	mov rax, sob_void
  3553 00002984 [0000000000000000] 
  3554                                  
  3555 0000298C 4889C7                  	mov rdi, rax
  3556 0000298F E831FF0000              	call print_sexpr_if_not_void
  3557                                  
  3558 00002994 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3559 00002999 E816FF0000              	call malloc
  3560 0000299E 50                      	push rax
  3561 0000299F BF00000000              	mov rdi, 8 * 0	; new rib
  3562 000029A4 E80BFF0000              	call malloc
  3563 000029A9 50                      	push rax
  3564 000029AA BF08000000              	mov rdi, 8 * 1	; extended env
  3565 000029AF E800FF0000              	call malloc
  3566 000029B4 488B7D10                	mov rdi, ENV
  3567 000029B8 BE00000000              	mov rsi, 0
  3568 000029BD BA01000000              	mov rdx, 1
  3569                                  .L_lambda_simple_env_loop_4f45:	; ext_env[i + 1] <-- env[i]
  3570 000029C2 4883FE00                	cmp rsi, 0
  3571 000029C6 7410                    	je .L_lambda_simple_env_end_4f45
  3572 000029C8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3573 000029CC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3574 000029D0 48FFC6                  	inc rsi
  3575 000029D3 48FFC2                  	inc rdx
  3576 000029D6 EBEA                    	jmp .L_lambda_simple_env_loop_4f45
  3577                                  .L_lambda_simple_env_end_4f45:
  3578 000029D8 5B                      	pop rbx
  3579 000029D9 BE00000000              	mov rsi, 0
  3580                                  .L_lambda_simple_params_loop_4f45:	; copy params
  3581 000029DE 4883FE00                	cmp rsi, 0
  3582 000029E2 740E                    	je .L_lambda_simple_params_end_4f45
  3583 000029E4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3584 000029E9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3585 000029ED 48FFC6                  	inc rsi
  3586 000029F0 EBEC                    	jmp .L_lambda_simple_params_loop_4f45
  3587                                  .L_lambda_simple_params_end_4f45:
  3588 000029F2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3589 000029F5 4889C3                  	mov rbx, rax
  3590 000029F8 58                      	pop rax
  3591 000029F9 C60005                  	mov byte [rax], T_closure
  3592 000029FC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3593 00002A00 48C74009[0D2A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f45
  3594 00002A08 E91F010000              	jmp .L_lambda_simple_end_4f45
  3595                                  .L_lambda_simple_code_4f45:	; lambda-simple body
  3596 00002A0D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3597 00002A13 740B                    	je .L_lambda_simple_arity_check_ok_4f45
  3598 00002A15 FF742410                	push qword [rsp + 8 * 2]
  3599 00002A19 6A01                    	push 1
  3600 00002A1B E94DFE0000              	jmp L_error_incorrect_arity_simple
  3601                                  .L_lambda_simple_arity_check_ok_4f45:
  3602 00002A20 C8000000                	enter 0, 0
  3603 00002A24 488B4520                	mov rax, PARAM(0)
  3604 00002A28 50                      	push rax
  3605 00002A29 6A01                    	push 1
  3606 00002A2B 488B0425[00000000]      	mov rax, qword [free_var_0]
  3607                                  	assert_closure(rax)
    65 00002A33 803805              <1>  cmp byte [%1], %2
    66 00002A36 0F85F8160100        <1>  jne L_error_incorrect_type
  3608 00002A3C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3609 00002A40 53                      	push rbx
  3610 00002A41 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3611 00002A45 FFD3                    	call rbx
  3612 00002A47 483D[02000000]          	cmp rax, sob_boolean_false
  3613 00002A4D 0F85D5000000            	jne .L_or_end_0614
  3614 00002A53 488B4520                	mov rax, PARAM(0)
  3615 00002A57 50                      	push rax
  3616 00002A58 6A01                    	push 1
  3617 00002A5A 488B0425[08000000]      	mov rax, qword [free_var_1]
  3618                                  	assert_closure(rax)
    65 00002A62 803805              <1>  cmp byte [%1], %2
    66 00002A65 0F85C9160100        <1>  jne L_error_incorrect_type
  3619 00002A6B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3620 00002A6F 53                      	push rbx
  3621 00002A70 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3622 00002A74 FFD3                    	call rbx
  3623 00002A76 483D[02000000]          	cmp rax, sob_boolean_false
  3624 00002A7C 0F849E000000            	je .L_if_else_567c
  3625 00002A82 488B4520                	mov rax, PARAM(0)
  3626 00002A86 50                      	push rax
  3627 00002A87 6A01                    	push 1
  3628 00002A89 488B0425[88000000]      	mov rax, qword [free_var_17]
  3629                                  	assert_closure(rax)
    65 00002A91 803805              <1>  cmp byte [%1], %2
    66 00002A94 0F859A160100        <1>  jne L_error_incorrect_type
  3630 00002A9A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3631 00002A9E 53                      	push rbx
  3632 00002A9F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3633 00002AA3 FFD3                    	call rbx
  3634 00002AA5 50                      	push rax
  3635 00002AA6 6A01                    	push 1
  3636 00002AA8 488B0425[A0020000]      	mov rax, qword [free_var_84]
  3637                                  	assert_closure(rax)
    65 00002AB0 803805              <1>  cmp byte [%1], %2
    66 00002AB3 0F857B160100        <1>  jne L_error_incorrect_type
  3638 00002AB9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3639 00002ABD 53                      	push rbx
  3640 00002ABE FF7508                  	push RET_ADDR
  3641 00002AC1 488B7D18                	mov rdi, COUNT
  3642 00002AC5 4883C703                	add rdi, 3
  3643 00002AC9 48C1E703                	shl rdi, 3
  3644 00002ACD 4801EF                  	add rdi, rbp
  3645 00002AD0 488B6D00                	mov rbp, OLD_RDP
  3646 00002AD4 BE00000000              	mov rsi, 0
  3647                                  .L_tc_recycle_frame_loop_5cb9:	 ; start recycle frame loop
  3648 00002AD9 4883FE04                	cmp rsi, 4
  3649 00002ADD 7427                    	je .L_tc_recycle_frame_done_5cb9
  3650 00002ADF B903000000              	mov rcx, 3
  3651 00002AE4 4829F1                  	sub rcx, rsi
  3652 00002AE7 48C1E103                	shl rcx, 3
  3653 00002AEB 4801E1                  	add rcx, rsp ; rcx is the address to move
  3654 00002AEE 4889F3                  	mov rbx, rsi
  3655 00002AF1 48C1E303                	shl rbx, 3
  3656 00002AF5 48F7DB                  	neg rbx
  3657 00002AF8 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3658 00002AFB 488B09                  	mov rcx, [rcx]
  3659 00002AFE 48890B                  	mov [rbx], rcx
  3660 00002B01 48FFC6                  	inc rsi
  3661 00002B04 EBD3                    	jmp .L_tc_recycle_frame_loop_5cb9
  3662                                  .L_tc_recycle_frame_done_5cb9:	 ; end recycle frame loop
  3663 00002B06 BB03000000              	mov rbx, 3
  3664 00002B0B 48C1E303                	shl rbx, 3
  3665 00002B0F 48F7DB                  	neg rbx
  3666 00002B12 4801FB                  	add rbx, rdi
  3667 00002B15 4889DC                  	mov rsp, rbx
  3668 00002B18 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3669 00002B1C FFE3                    	jmp rbx
  3670 00002B1E EB08                    	jmp .L_if_end_567c
  3671                                  	.L_if_else_567c:
  3672 00002B20 488D0425[02000000]      	lea rax, [2 + L_constants]
  3673                                  	.L_if_end_567c:
  3674                                  .L_or_end_0614:
  3675 00002B28 C9                      	leave
  3676 00002B29 C21800                  	ret 8 * (2 + 1)
  3677                                  .L_lambda_simple_end_4f45:	; new closure is in rax
  3678 00002B2C 48890425[A0020000]      	mov qword [free_var_84], rax
  3679 00002B34 48B8-                   	mov rax, sob_void
  3679 00002B36 [0000000000000000] 
  3680                                  
  3681 00002B3E 4889C7                  	mov rdi, rax
  3682 00002B41 E87FFD0000              	call print_sexpr_if_not_void
  3683                                  
  3684 00002B46 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3685 00002B4B E864FD0000              	call malloc
  3686 00002B50 50                      	push rax
  3687 00002B51 BF00000000              	mov rdi, 8 * 0	; new rib
  3688 00002B56 E859FD0000              	call malloc
  3689 00002B5B 50                      	push rax
  3690 00002B5C BF08000000              	mov rdi, 8 * 1	; extended env
  3691 00002B61 E84EFD0000              	call malloc
  3692 00002B66 488B7D10                	mov rdi, ENV
  3693 00002B6A BE00000000              	mov rsi, 0
  3694 00002B6F BA01000000              	mov rdx, 1
  3695                                  .L_lambda_opt_env_loop_0c85:	; ext_env[i + 1] <-- env[i]
  3696 00002B74 4883FE00                	cmp rsi, 0
  3697 00002B78 7410                    	je .L_lambda_opt_env_end_0c85
  3698 00002B7A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3699 00002B7E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3700 00002B82 48FFC6                  	inc rsi
  3701 00002B85 48FFC2                  	inc rdx
  3702 00002B88 EBEA                    	jmp .L_lambda_opt_env_loop_0c85
  3703                                  .L_lambda_opt_env_end_0c85:
  3704 00002B8A 5B                      	pop rbx
  3705 00002B8B BE00000000              	mov rsi, 0
  3706                                  .L_lambda_opt_params_loop_0c85:	; copy params
  3707 00002B90 4883FE00                	cmp rsi, 0
  3708 00002B94 740E                    	je .L_lambda_opt_params_end_0c85
  3709 00002B96 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3710 00002B9B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3711 00002B9F 48FFC6                  	inc rsi
  3712 00002BA2 EBEC                    	jmp .L_lambda_opt_params_loop_0c85
  3713                                  .L_lambda_opt_params_end_0c85:
  3714 00002BA4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3715 00002BA7 4889C3                  	mov rbx, rax
  3716 00002BAA 58                      	pop rax
  3717 00002BAB C60005                  	mov byte [rax], T_closure
  3718 00002BAE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3719 00002BB2 48C74009[BF2B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c85
  3720 00002BBA E901010000              	jmp .L_lambda_opt_end_0c85
  3721                                  .L_lambda_opt_code_0c85:	; lambda-opt body
  3722 00002BBF 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  3723 00002BC4 4889FB                  	mov rbx, rdi
  3724 00002BC7 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
  3725 00002BCB 4883FB00                	cmp rbx, 0
  3726 00002BCF 7F45                    	jg .L_lambda_opt_arity_check_more_0c85
  3727                                  .L_lambda_opt_arity_check_exact_0c85:	 ; if params in opt is exact
  3728 00002BD1 4883EC08                	sub rsp, 8
  3729 00002BD5 BE00000000              	mov rsi, 0 ; index
  3730                                  .L_lambda_opt_stack_enlarge_loop_0c85:	 ; stack loop enlarge start
  3731 00002BDA 4883FE03                	cmp rsi, 3
  3732 00002BDE 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c85
  3733 00002BE0 4889F7                  	mov rdi, rsi
  3734 00002BE3 48FFC7                  	inc rdi
  3735 00002BE6 48C1E703                	shl rdi, 3
  3736 00002BEA 4801E7                  	add rdi, rsp
  3737 00002BED 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  3738 00002BF0 4883EB08                	sub rbx, 8
  3739 00002BF4 488B3F                  	mov rdi, [rdi]
  3740 00002BF7 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  3741 00002BFA 48FFC6                  	inc rsi
  3742 00002BFD EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c85
  3743                                  .L_lambda_opt_stack_enlarge_loop_exit_0c85:	 ; end of stack enlarge loop
  3744 00002BFF 48C7442418-             	mov qword [rsp + 3*8], sob_nil
  3744 00002C04 [01000000]         
  3745 00002C08 48C744241001000000      	mov qword [rsp + 2*8], 1
  3746 00002C11 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c85
  3747                                  .L_lambda_opt_arity_check_more_0c85:	 ; if params in opt is more
  3748 00002C16 48B8-                   	mov rax, sob_nil
  3748 00002C18 [0100000000000000] 
  3749 00002C20 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  3750 00002C23 48FFCE                  	dec rsi
  3751                                  .L_lambda_opt_list_create_loop_0c85:	; start of list creation loop
  3752 00002C26 4883FEFF                	cmp rsi, -1
  3753 00002C2A 7422                    	je .L_lambda_opt_list_create_loop_exit_0c85
  3754 00002C2C 488D4E03                	lea rcx, [rsi + (3 + 0)]
  3755 00002C30 48C1E103                	shl rcx, 3
  3756 00002C34 4801E1                  	add rcx, rsp
  3757 00002C37 488B09                  	mov rcx, [rcx]
  3758 00002C3A 56                      	push rsi ; save params
  3759 00002C3B 53                      	push rbx
  3760                                  
  3761 00002C3C 50                      	push rax ; cdr
  3762 00002C3D 51                      	push rcx ; car
  3763 00002C3E 6A02                    	push qword 2 ; push num of args
  3764 00002C40 6A01                    	push qword 1 ; push garbage as env
  3765 00002C42 E8F4050100              	call L_code_ptr_cons
  3766                                  
  3767 00002C47 5B                      	pop rbx ; restore params
  3768 00002C48 5E                      	pop rsi
  3769 00002C49 48FFCE                  	dec rsi
  3770 00002C4C EBD8                    	jmp .L_lambda_opt_list_create_loop_0c85
  3771                                  .L_lambda_opt_list_create_loop_exit_0c85:	; end of list creation loop
  3772 00002C4E 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  3773 00002C53 4883C302                	add rbx, 2
  3774 00002C57 4889DF                  	mov rdi, rbx
  3775 00002C5A 48C1E703                	shl rdi,3
  3776 00002C5E 4801E7                  	add rdi, rsp
  3777 00002C61 488907                  	mov [rdi], rax
  3778 00002C64 BE00000000              	mov rsi, 0 ;index
  3779                                  .L_lambda_opt_stack_shrink_loop_0c85:	; start of stack shrink loop
  3780 00002C69 4883FE03                	cmp rsi, 3
  3781 00002C6D 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c85
  3782 00002C6F BF02000000              	mov rdi, 2
  3783 00002C74 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  3784 00002C77 4889D9                  	mov rcx, rbx
  3785 00002C7A 4829F1                  	sub rcx, rsi
  3786 00002C7D 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  3787 00002C80 4889FA                  	mov rdx, rdi
  3788 00002C83 48C1E203                	shl rdx, 3
  3789 00002C87 4801E2                  	add rdx, rsp
  3790 00002C8A 48C1E103                	shl rcx, 3
  3791 00002C8E 4801E1                  	add rcx, rsp
  3792 00002C91 488B12                  	mov rdx, [rdx]
  3793 00002C94 488911                  	mov [rcx], rdx
  3794 00002C97 48FFC6                  	inc rsi
  3795 00002C9A EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c85
  3796                                  .L_lambda_opt_stack_shrink_loop_exit_0c85:	; end of stack shrink loop
  3797 00002C9C 4883EB02                	sub rbx, 2 ; rbx has number of args
  3798 00002CA0 4883EB01                	sub rbx, 1
  3799 00002CA4 48C1E303                	shl rbx, 3
  3800 00002CA8 4801DC                  	add rsp, rbx
  3801 00002CAB 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  3802                                  .L_lambda_opt_stack_adjusted_0c85:
  3803 00002CB4 C8000000                	enter 0, 0
  3804 00002CB8 488B4520                	mov rax, PARAM(0)
  3805 00002CBC C9                      	leave
  3806 00002CBD C21800                  	ret AND_KILL_FRAME(1)
  3807                                  .L_lambda_opt_end_0c85:	; new closure is in rax
  3808 00002CC0 48890425[A8020000]      	mov qword [free_var_85], rax
  3809 00002CC8 48B8-                   	mov rax, sob_void
  3809 00002CCA [0000000000000000] 
  3810                                  
  3811 00002CD2 4889C7                  	mov rdi, rax
  3812 00002CD5 E8EBFB0000              	call print_sexpr_if_not_void
  3813                                  
  3814 00002CDA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3815 00002CDF E8D0FB0000              	call malloc
  3816 00002CE4 50                      	push rax
  3817 00002CE5 BF00000000              	mov rdi, 8 * 0	; new rib
  3818 00002CEA E8C5FB0000              	call malloc
  3819 00002CEF 50                      	push rax
  3820 00002CF0 BF08000000              	mov rdi, 8 * 1	; extended env
  3821 00002CF5 E8BAFB0000              	call malloc
  3822 00002CFA 488B7D10                	mov rdi, ENV
  3823 00002CFE BE00000000              	mov rsi, 0
  3824 00002D03 BA01000000              	mov rdx, 1
  3825                                  .L_lambda_simple_env_loop_4f46:	; ext_env[i + 1] <-- env[i]
  3826 00002D08 4883FE00                	cmp rsi, 0
  3827 00002D0C 7410                    	je .L_lambda_simple_env_end_4f46
  3828 00002D0E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3829 00002D12 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3830 00002D16 48FFC6                  	inc rsi
  3831 00002D19 48FFC2                  	inc rdx
  3832 00002D1C EBEA                    	jmp .L_lambda_simple_env_loop_4f46
  3833                                  .L_lambda_simple_env_end_4f46:
  3834 00002D1E 5B                      	pop rbx
  3835 00002D1F BE00000000              	mov rsi, 0
  3836                                  .L_lambda_simple_params_loop_4f46:	; copy params
  3837 00002D24 4883FE00                	cmp rsi, 0
  3838 00002D28 740E                    	je .L_lambda_simple_params_end_4f46
  3839 00002D2A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3840 00002D2F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3841 00002D33 48FFC6                  	inc rsi
  3842 00002D36 EBEC                    	jmp .L_lambda_simple_params_loop_4f46
  3843                                  .L_lambda_simple_params_end_4f46:
  3844 00002D38 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3845 00002D3B 4889C3                  	mov rbx, rax
  3846 00002D3E 58                      	pop rax
  3847 00002D3F C60005                  	mov byte [rax], T_closure
  3848 00002D42 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3849 00002D46 48C74009[502D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f46
  3850 00002D4E EB39                    	jmp .L_lambda_simple_end_4f46
  3851                                  .L_lambda_simple_code_4f46:	; lambda-simple body
  3852 00002D50 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3853 00002D56 740B                    	je .L_lambda_simple_arity_check_ok_4f46
  3854 00002D58 FF742410                	push qword [rsp + 8 * 2]
  3855 00002D5C 6A01                    	push 1
  3856 00002D5E E90AFB0000              	jmp L_error_incorrect_arity_simple
  3857                                  .L_lambda_simple_arity_check_ok_4f46:
  3858 00002D63 C8000000                	enter 0, 0
  3859 00002D67 488B4520                	mov rax, PARAM(0)
  3860 00002D6B 483D[02000000]          	cmp rax, sob_boolean_false
  3861 00002D71 740A                    	je .L_if_else_567d
  3862 00002D73 488D0425[02000000]      	lea rax, [2 + L_constants]
  3863 00002D7B EB08                    	jmp .L_if_end_567d
  3864                                  	.L_if_else_567d:
  3865 00002D7D 488D0425[03000000]      	lea rax, [3 + L_constants]
  3866                                  	.L_if_end_567d:
  3867 00002D85 C9                      	leave
  3868 00002D86 C21800                  	ret 8 * (2 + 1)
  3869                                  .L_lambda_simple_end_4f46:	; new closure is in rax
  3870 00002D89 48890425[B0020000]      	mov qword [free_var_86], rax
  3871 00002D91 48B8-                   	mov rax, sob_void
  3871 00002D93 [0000000000000000] 
  3872                                  
  3873 00002D9B 4889C7                  	mov rdi, rax
  3874 00002D9E E822FB0000              	call print_sexpr_if_not_void
  3875                                  
  3876 00002DA3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3877 00002DA8 E807FB0000              	call malloc
  3878 00002DAD 50                      	push rax
  3879 00002DAE BF00000000              	mov rdi, 8 * 0	; new rib
  3880 00002DB3 E8FCFA0000              	call malloc
  3881 00002DB8 50                      	push rax
  3882 00002DB9 BF08000000              	mov rdi, 8 * 1	; extended env
  3883 00002DBE E8F1FA0000              	call malloc
  3884 00002DC3 488B7D10                	mov rdi, ENV
  3885 00002DC7 BE00000000              	mov rsi, 0
  3886 00002DCC BA01000000              	mov rdx, 1
  3887                                  .L_lambda_simple_env_loop_4f47:	; ext_env[i + 1] <-- env[i]
  3888 00002DD1 4883FE00                	cmp rsi, 0
  3889 00002DD5 7410                    	je .L_lambda_simple_env_end_4f47
  3890 00002DD7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3891 00002DDB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3892 00002DDF 48FFC6                  	inc rsi
  3893 00002DE2 48FFC2                  	inc rdx
  3894 00002DE5 EBEA                    	jmp .L_lambda_simple_env_loop_4f47
  3895                                  .L_lambda_simple_env_end_4f47:
  3896 00002DE7 5B                      	pop rbx
  3897 00002DE8 BE00000000              	mov rsi, 0
  3898                                  .L_lambda_simple_params_loop_4f47:	; copy params
  3899 00002DED 4883FE00                	cmp rsi, 0
  3900 00002DF1 740E                    	je .L_lambda_simple_params_end_4f47
  3901 00002DF3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3902 00002DF8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3903 00002DFC 48FFC6                  	inc rsi
  3904 00002DFF EBEC                    	jmp .L_lambda_simple_params_loop_4f47
  3905                                  .L_lambda_simple_params_end_4f47:
  3906 00002E01 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3907 00002E04 4889C3                  	mov rbx, rax
  3908 00002E07 58                      	pop rax
  3909 00002E08 C60005                  	mov byte [rax], T_closure
  3910 00002E0B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3911 00002E0F 48C74009[1C2E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f47
  3912 00002E17 E9F0000000              	jmp .L_lambda_simple_end_4f47
  3913                                  .L_lambda_simple_code_4f47:	; lambda-simple body
  3914 00002E1C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3915 00002E22 740B                    	je .L_lambda_simple_arity_check_ok_4f47
  3916 00002E24 FF742410                	push qword [rsp + 8 * 2]
  3917 00002E28 6A01                    	push 1
  3918 00002E2A E93EFA0000              	jmp L_error_incorrect_arity_simple
  3919                                  .L_lambda_simple_arity_check_ok_4f47:
  3920 00002E2F C8000000                	enter 0, 0
  3921 00002E33 488B4520                	mov rax, PARAM(0)
  3922 00002E37 50                      	push rax
  3923 00002E38 6A01                    	push 1
  3924 00002E3A 488B0425[48000000]      	mov rax, qword [free_var_9]
  3925                                  	assert_closure(rax)
    65 00002E42 803805              <1>  cmp byte [%1], %2
    66 00002E45 0F85E9120100        <1>  jne L_error_incorrect_type
  3926 00002E4B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3927 00002E4F 53                      	push rbx
  3928 00002E50 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3929 00002E54 FFD3                    	call rbx
  3930 00002E56 483D[02000000]          	cmp rax, sob_boolean_false
  3931 00002E5C 0F849E000000            	je .L_if_else_567e
  3932 00002E62 488B4520                	mov rax, PARAM(0)
  3933 00002E66 50                      	push rax
  3934 00002E67 6A01                    	push 1
  3935 00002E69 488B0425[E0000000]      	mov rax, qword [free_var_28]
  3936                                  	assert_closure(rax)
    65 00002E71 803805              <1>  cmp byte [%1], %2
    66 00002E74 0F85BA120100        <1>  jne L_error_incorrect_type
  3937 00002E7A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3938 00002E7E 53                      	push rbx
  3939 00002E7F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3940 00002E83 FFD3                    	call rbx
  3941 00002E85 50                      	push rax
  3942 00002E86 6A01                    	push 1
  3943 00002E88 488B0425[B0020000]      	mov rax, qword [free_var_86]
  3944                                  	assert_closure(rax)
    65 00002E90 803805              <1>  cmp byte [%1], %2
    66 00002E93 0F859B120100        <1>  jne L_error_incorrect_type
  3945 00002E99 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3946 00002E9D 53                      	push rbx
  3947 00002E9E FF7508                  	push RET_ADDR
  3948 00002EA1 488B7D18                	mov rdi, COUNT
  3949 00002EA5 4883C703                	add rdi, 3
  3950 00002EA9 48C1E703                	shl rdi, 3
  3951 00002EAD 4801EF                  	add rdi, rbp
  3952 00002EB0 488B6D00                	mov rbp, OLD_RDP
  3953 00002EB4 BE00000000              	mov rsi, 0
  3954                                  .L_tc_recycle_frame_loop_5cba:	 ; start recycle frame loop
  3955 00002EB9 4883FE04                	cmp rsi, 4
  3956 00002EBD 7427                    	je .L_tc_recycle_frame_done_5cba
  3957 00002EBF B903000000              	mov rcx, 3
  3958 00002EC4 4829F1                  	sub rcx, rsi
  3959 00002EC7 48C1E103                	shl rcx, 3
  3960 00002ECB 4801E1                  	add rcx, rsp ; rcx is the address to move
  3961 00002ECE 4889F3                  	mov rbx, rsi
  3962 00002ED1 48C1E303                	shl rbx, 3
  3963 00002ED5 48F7DB                  	neg rbx
  3964 00002ED8 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3965 00002EDB 488B09                  	mov rcx, [rcx]
  3966 00002EDE 48890B                  	mov [rbx], rcx
  3967 00002EE1 48FFC6                  	inc rsi
  3968 00002EE4 EBD3                    	jmp .L_tc_recycle_frame_loop_5cba
  3969                                  .L_tc_recycle_frame_done_5cba:	 ; end recycle frame loop
  3970 00002EE6 BB03000000              	mov rbx, 3
  3971 00002EEB 48C1E303                	shl rbx, 3
  3972 00002EEF 48F7DB                  	neg rbx
  3973 00002EF2 4801FB                  	add rbx, rdi
  3974 00002EF5 4889DC                  	mov rsp, rbx
  3975 00002EF8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3976 00002EFC FFE3                    	jmp rbx
  3977 00002EFE EB08                    	jmp .L_if_end_567e
  3978                                  	.L_if_else_567e:
  3979 00002F00 488D0425[02000000]      	lea rax, [2 + L_constants]
  3980                                  	.L_if_end_567e:
  3981 00002F08 C9                      	leave
  3982 00002F09 C21800                  	ret 8 * (2 + 1)
  3983                                  .L_lambda_simple_end_4f47:	; new closure is in rax
  3984 00002F0C 48890425[B8020000]      	mov qword [free_var_87], rax
  3985 00002F14 48B8-                   	mov rax, sob_void
  3985 00002F16 [0000000000000000] 
  3986                                  
  3987 00002F1E 4889C7                  	mov rdi, rax
  3988 00002F21 E89FF90000              	call print_sexpr_if_not_void
  3989                                  
  3990 00002F26 488D0425[17000000]      	lea rax, [23 + L_constants]
  3991 00002F2E 50                      	push rax
  3992 00002F2F 6A01                    	push 1
  3993 00002F31 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3994 00002F36 E879F90000              	call malloc
  3995 00002F3B 50                      	push rax
  3996 00002F3C BF00000000              	mov rdi, 8 * 0	; new rib
  3997 00002F41 E86EF90000              	call malloc
  3998 00002F46 50                      	push rax
  3999 00002F47 BF08000000              	mov rdi, 8 * 1	; extended env
  4000 00002F4C E863F90000              	call malloc
  4001 00002F51 488B7D10                	mov rdi, ENV
  4002 00002F55 BE00000000              	mov rsi, 0
  4003 00002F5A BA01000000              	mov rdx, 1
  4004                                  .L_lambda_simple_env_loop_4f48:	; ext_env[i + 1] <-- env[i]
  4005 00002F5F 4883FE00                	cmp rsi, 0
  4006 00002F63 7410                    	je .L_lambda_simple_env_end_4f48
  4007 00002F65 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4008 00002F69 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4009 00002F6D 48FFC6                  	inc rsi
  4010 00002F70 48FFC2                  	inc rdx
  4011 00002F73 EBEA                    	jmp .L_lambda_simple_env_loop_4f48
  4012                                  .L_lambda_simple_env_end_4f48:
  4013 00002F75 5B                      	pop rbx
  4014 00002F76 BE00000000              	mov rsi, 0
  4015                                  .L_lambda_simple_params_loop_4f48:	; copy params
  4016 00002F7B 4883FE00                	cmp rsi, 0
  4017 00002F7F 740E                    	je .L_lambda_simple_params_end_4f48
  4018 00002F81 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4019 00002F86 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4020 00002F8A 48FFC6                  	inc rsi
  4021 00002F8D EBEC                    	jmp .L_lambda_simple_params_loop_4f48
  4022                                  .L_lambda_simple_params_end_4f48:
  4023 00002F8F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4024 00002F92 4889C3                  	mov rbx, rax
  4025 00002F95 58                      	pop rax
  4026 00002F96 C60005                  	mov byte [rax], T_closure
  4027 00002F99 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4028 00002F9D 48C74009[AA2F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f48
  4029 00002FA5 E9F2030000              	jmp .L_lambda_simple_end_4f48
  4030                                  .L_lambda_simple_code_4f48:	; lambda-simple body
  4031 00002FAA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4032 00002FB0 740B                    	je .L_lambda_simple_arity_check_ok_4f48
  4033 00002FB2 FF742410                	push qword [rsp + 8 * 2]
  4034 00002FB6 6A01                    	push 1
  4035 00002FB8 E9B0F80000              	jmp L_error_incorrect_arity_simple
  4036                                  .L_lambda_simple_arity_check_ok_4f48:
  4037 00002FBD C8000000                	enter 0, 0
  4038 00002FC1 BF11000000              	mov qword rdi, (1 + 8 + 8)
  4039 00002FC6 E8E9F80000              	call malloc
  4040 00002FCB 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  4041 00002FCF 48B8-                   	mov rax, sob_void
  4041 00002FD1 [0000000000000000] 
  4042                                  
  4043 00002FD9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4044 00002FDE E8D1F80000              	call malloc
  4045 00002FE3 50                      	push rax
  4046 00002FE4 BF08000000              	mov rdi, 8 * 1	; new rib
  4047 00002FE9 E8C6F80000              	call malloc
  4048 00002FEE 50                      	push rax
  4049 00002FEF BF10000000              	mov rdi, 8 * 2	; extended env
  4050 00002FF4 E8BBF80000              	call malloc
  4051 00002FF9 488B7D10                	mov rdi, ENV
  4052 00002FFD BE00000000              	mov rsi, 0
  4053 00003002 BA01000000              	mov rdx, 1
  4054                                  .L_lambda_simple_env_loop_4f49:	; ext_env[i + 1] <-- env[i]
  4055 00003007 4883FE01                	cmp rsi, 1
  4056 0000300B 7410                    	je .L_lambda_simple_env_end_4f49
  4057 0000300D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4058 00003011 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4059 00003015 48FFC6                  	inc rsi
  4060 00003018 48FFC2                  	inc rdx
  4061 0000301B EBEA                    	jmp .L_lambda_simple_env_loop_4f49
  4062                                  .L_lambda_simple_env_end_4f49:
  4063 0000301D 5B                      	pop rbx
  4064 0000301E BE00000000              	mov rsi, 0
  4065                                  .L_lambda_simple_params_loop_4f49:	; copy params
  4066 00003023 4883FE01                	cmp rsi, 1
  4067 00003027 740E                    	je .L_lambda_simple_params_end_4f49
  4068 00003029 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4069 0000302E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4070 00003032 48FFC6                  	inc rsi
  4071 00003035 EBEC                    	jmp .L_lambda_simple_params_loop_4f49
  4072                                  .L_lambda_simple_params_end_4f49:
  4073 00003037 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4074 0000303A 4889C3                  	mov rbx, rax
  4075 0000303D 58                      	pop rax
  4076 0000303E C60005                  	mov byte [rax], T_closure
  4077 00003041 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4078 00003045 48C74009[52300000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f49
  4079 0000304D E938010000              	jmp .L_lambda_simple_end_4f49
  4080                                  .L_lambda_simple_code_4f49:	; lambda-simple body
  4081 00003052 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4082 00003058 740B                    	je .L_lambda_simple_arity_check_ok_4f49
  4083 0000305A FF742410                	push qword [rsp + 8 * 2]
  4084 0000305E 6A02                    	push 2
  4085 00003060 E908F80000              	jmp L_error_incorrect_arity_simple
  4086                                  .L_lambda_simple_arity_check_ok_4f49:
  4087 00003065 C8000000                	enter 0, 0
  4088 00003069 488B4528                	mov rax, PARAM(1)
  4089 0000306D 50                      	push rax
  4090 0000306E 6A01                    	push 1
  4091 00003070 488B0425[00000000]      	mov rax, qword [free_var_0]
  4092                                  	assert_closure(rax)
    65 00003078 803805              <1>  cmp byte [%1], %2
    66 0000307B 0F85B3100100        <1>  jne L_error_incorrect_type
  4093 00003081 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4094 00003085 53                      	push rbx
  4095 00003086 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4096 0000308A FFD3                    	call rbx
  4097 0000308C 483D[02000000]          	cmp rax, sob_boolean_false
  4098 00003092 7409                    	je .L_if_else_567f
  4099 00003094 488B4520                	mov rax, PARAM(0)
  4100 00003098 E9E9000000              	jmp .L_if_end_567f
  4101                                  	.L_if_else_567f:
  4102 0000309D 488B4528                	mov rax, PARAM(1)
  4103 000030A1 50                      	push rax
  4104 000030A2 6A01                    	push 1
  4105 000030A4 488B0425[88000000]      	mov rax, qword [free_var_17]
  4106                                  	assert_closure(rax)
    65 000030AC 803805              <1>  cmp byte [%1], %2
    66 000030AF 0F857F100100        <1>  jne L_error_incorrect_type
  4107 000030B5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4108 000030B9 53                      	push rbx
  4109 000030BA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4110 000030BE FFD3                    	call rbx
  4111 000030C0 50                      	push rax
  4112 000030C1 488B4528                	mov rax, PARAM(1)
  4113 000030C5 50                      	push rax
  4114 000030C6 6A01                    	push 1
  4115 000030C8 488B0425[80000000]      	mov rax, qword [free_var_16]
  4116                                  	assert_closure(rax)
    65 000030D0 803805              <1>  cmp byte [%1], %2
    66 000030D3 0F855B100100        <1>  jne L_error_incorrect_type
  4117 000030D9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4118 000030DD 53                      	push rbx
  4119 000030DE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4120 000030E2 FFD3                    	call rbx
  4121 000030E4 50                      	push rax
  4122 000030E5 6A02                    	push 2
  4123 000030E7 488B4510                	mov rax, qword [rbp + 8*2]
  4124 000030EB 488B00                  	mov rax, qword [rax + 8*0]
  4125 000030EE 488B00                  	mov rax, qword [rax + 8*0]
  4126 000030F1 488B00                  	mov rax, qword [rax]
  4127                                  	assert_closure(rax)
    65 000030F4 803805              <1>  cmp byte [%1], %2
    66 000030F7 0F8537100100        <1>  jne L_error_incorrect_type
  4128 000030FD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4129 00003101 53                      	push rbx
  4130 00003102 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4131 00003106 FFD3                    	call rbx
  4132 00003108 50                      	push rax
  4133 00003109 488B4520                	mov rax, PARAM(0)
  4134 0000310D 50                      	push rax
  4135 0000310E 6A02                    	push 2
  4136 00003110 488B0425[68000000]      	mov rax, qword [free_var_13]
  4137                                  	assert_closure(rax)
    65 00003118 803805              <1>  cmp byte [%1], %2
    66 0000311B 0F8513100100        <1>  jne L_error_incorrect_type
  4138 00003121 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4139 00003125 53                      	push rbx
  4140 00003126 FF7508                  	push RET_ADDR
  4141 00003129 488B7D18                	mov rdi, COUNT
  4142 0000312D 4883C703                	add rdi, 3
  4143 00003131 48C1E703                	shl rdi, 3
  4144 00003135 4801EF                  	add rdi, rbp
  4145 00003138 488B6D00                	mov rbp, OLD_RDP
  4146 0000313C BE00000000              	mov rsi, 0
  4147                                  .L_tc_recycle_frame_loop_5cbb:	 ; start recycle frame loop
  4148 00003141 4883FE05                	cmp rsi, 5
  4149 00003145 7427                    	je .L_tc_recycle_frame_done_5cbb
  4150 00003147 B904000000              	mov rcx, 4
  4151 0000314C 4829F1                  	sub rcx, rsi
  4152 0000314F 48C1E103                	shl rcx, 3
  4153 00003153 4801E1                  	add rcx, rsp ; rcx is the address to move
  4154 00003156 4889F3                  	mov rbx, rsi
  4155 00003159 48C1E303                	shl rbx, 3
  4156 0000315D 48F7DB                  	neg rbx
  4157 00003160 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4158 00003163 488B09                  	mov rcx, [rcx]
  4159 00003166 48890B                  	mov [rbx], rcx
  4160 00003169 48FFC6                  	inc rsi
  4161 0000316C EBD3                    	jmp .L_tc_recycle_frame_loop_5cbb
  4162                                  .L_tc_recycle_frame_done_5cbb:	 ; end recycle frame loop
  4163 0000316E BB04000000              	mov rbx, 4
  4164 00003173 48C1E303                	shl rbx, 3
  4165 00003177 48F7DB                  	neg rbx
  4166 0000317A 4801FB                  	add rbx, rdi
  4167 0000317D 4889DC                  	mov rsp, rbx
  4168 00003180 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4169 00003184 FFE3                    	jmp rbx
  4170                                  	.L_if_end_567f:
  4171 00003186 C9                      	leave
  4172 00003187 C22000                  	ret 8 * (2 + 2)
  4173                                  .L_lambda_simple_end_4f49:	; new closure is in rax
  4174 0000318A 50                      	push rax
  4175 0000318B 488B4520                	mov rax, PARAM(0)
  4176 0000318F 8F00                    	pop qword [rax]
  4177 00003191 48B8-                   	mov rax, sob_void
  4177 00003193 [0000000000000000] 
  4178                                  
  4179 0000319B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4180 000031A0 E80FF70000              	call malloc
  4181 000031A5 50                      	push rax
  4182 000031A6 BF08000000              	mov rdi, 8 * 1	; new rib
  4183 000031AB E804F70000              	call malloc
  4184 000031B0 50                      	push rax
  4185 000031B1 BF10000000              	mov rdi, 8 * 2	; extended env
  4186 000031B6 E8F9F60000              	call malloc
  4187 000031BB 488B7D10                	mov rdi, ENV
  4188 000031BF BE00000000              	mov rsi, 0
  4189 000031C4 BA01000000              	mov rdx, 1
  4190                                  .L_lambda_opt_env_loop_0c86:	; ext_env[i + 1] <-- env[i]
  4191 000031C9 4883FE01                	cmp rsi, 1
  4192 000031CD 7410                    	je .L_lambda_opt_env_end_0c86
  4193 000031CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4194 000031D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4195 000031D7 48FFC6                  	inc rsi
  4196 000031DA 48FFC2                  	inc rdx
  4197 000031DD EBEA                    	jmp .L_lambda_opt_env_loop_0c86
  4198                                  .L_lambda_opt_env_end_0c86:
  4199 000031DF 5B                      	pop rbx
  4200 000031E0 BE00000000              	mov rsi, 0
  4201                                  .L_lambda_opt_params_loop_0c86:	; copy params
  4202 000031E5 4883FE01                	cmp rsi, 1
  4203 000031E9 740E                    	je .L_lambda_opt_params_end_0c86
  4204 000031EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4205 000031F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4206 000031F4 48FFC6                  	inc rsi
  4207 000031F7 EBEC                    	jmp .L_lambda_opt_params_loop_0c86
  4208                                  .L_lambda_opt_params_end_0c86:
  4209 000031F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4210 000031FC 4889C3                  	mov rbx, rax
  4211 000031FF 58                      	pop rax
  4212 00003200 C60005                  	mov byte [rax], T_closure
  4213 00003203 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4214 00003207 48C74009[14320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c86
  4215 0000320F E984010000              	jmp .L_lambda_opt_end_0c86
  4216                                  .L_lambda_opt_code_0c86:	; lambda-opt body
  4217 00003214 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  4218 00003219 4889FB                  	mov rbx, rdi
  4219 0000321C 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  4220 00003220 4883FB00                	cmp rbx, 0
  4221 00003224 7F45                    	jg .L_lambda_opt_arity_check_more_0c86
  4222                                  .L_lambda_opt_arity_check_exact_0c86:	 ; if params in opt is exact
  4223 00003226 4883EC08                	sub rsp, 8
  4224 0000322A BE00000000              	mov rsi, 0 ; index
  4225                                  .L_lambda_opt_stack_enlarge_loop_0c86:	 ; stack loop enlarge start
  4226 0000322F 4883FE04                	cmp rsi, 4
  4227 00003233 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c86
  4228 00003235 4889F7                  	mov rdi, rsi
  4229 00003238 48FFC7                  	inc rdi
  4230 0000323B 48C1E703                	shl rdi, 3
  4231 0000323F 4801E7                  	add rdi, rsp
  4232 00003242 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  4233 00003245 4883EB08                	sub rbx, 8
  4234 00003249 488B3F                  	mov rdi, [rdi]
  4235 0000324C 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  4236 0000324F 48FFC6                  	inc rsi
  4237 00003252 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c86
  4238                                  .L_lambda_opt_stack_enlarge_loop_exit_0c86:	 ; end of stack enlarge loop
  4239 00003254 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  4239 00003259 [01000000]         
  4240 0000325D 48C744241002000000      	mov qword [rsp + 2*8], 2
  4241 00003266 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c86
  4242                                  .L_lambda_opt_arity_check_more_0c86:	 ; if params in opt is more
  4243 0000326B 48B8-                   	mov rax, sob_nil
  4243 0000326D [0100000000000000] 
  4244 00003275 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  4245 00003278 48FFCE                  	dec rsi
  4246                                  .L_lambda_opt_list_create_loop_0c86:	; start of list creation loop
  4247 0000327B 4883FEFF                	cmp rsi, -1
  4248 0000327F 7422                    	je .L_lambda_opt_list_create_loop_exit_0c86
  4249 00003281 488D4E04                	lea rcx, [rsi + (3 + 1)]
  4250 00003285 48C1E103                	shl rcx, 3
  4251 00003289 4801E1                  	add rcx, rsp
  4252 0000328C 488B09                  	mov rcx, [rcx]
  4253 0000328F 56                      	push rsi ; save params
  4254 00003290 53                      	push rbx
  4255                                  
  4256 00003291 50                      	push rax ; cdr
  4257 00003292 51                      	push rcx ; car
  4258 00003293 6A02                    	push qword 2 ; push num of args
  4259 00003295 6A01                    	push qword 1 ; push garbage as env
  4260 00003297 E89FFF0000              	call L_code_ptr_cons
  4261                                  
  4262 0000329C 5B                      	pop rbx ; restore params
  4263 0000329D 5E                      	pop rsi
  4264 0000329E 48FFCE                  	dec rsi
  4265 000032A1 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c86
  4266                                  .L_lambda_opt_list_create_loop_exit_0c86:	; end of list creation loop
  4267 000032A3 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  4268 000032A8 4883C302                	add rbx, 2
  4269 000032AC 4889DF                  	mov rdi, rbx
  4270 000032AF 48C1E703                	shl rdi,3
  4271 000032B3 4801E7                  	add rdi, rsp
  4272 000032B6 488907                  	mov [rdi], rax
  4273 000032B9 BE00000000              	mov rsi, 0 ;index
  4274                                  .L_lambda_opt_stack_shrink_loop_0c86:	; start of stack shrink loop
  4275 000032BE 4883FE04                	cmp rsi, 4
  4276 000032C2 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c86
  4277 000032C4 BF03000000              	mov rdi, 3
  4278 000032C9 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  4279 000032CC 4889D9                  	mov rcx, rbx
  4280 000032CF 4829F1                  	sub rcx, rsi
  4281 000032D2 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  4282 000032D5 4889FA                  	mov rdx, rdi
  4283 000032D8 48C1E203                	shl rdx, 3
  4284 000032DC 4801E2                  	add rdx, rsp
  4285 000032DF 48C1E103                	shl rcx, 3
  4286 000032E3 4801E1                  	add rcx, rsp
  4287 000032E6 488B12                  	mov rdx, [rdx]
  4288 000032E9 488911                  	mov [rcx], rdx
  4289 000032EC 48FFC6                  	inc rsi
  4290 000032EF EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c86
  4291                                  .L_lambda_opt_stack_shrink_loop_exit_0c86:	; end of stack shrink loop
  4292 000032F1 4883EB02                	sub rbx, 2 ; rbx has number of args
  4293 000032F5 4883EB02                	sub rbx, 2
  4294 000032F9 48C1E303                	shl rbx, 3
  4295 000032FD 4801DC                  	add rsp, rbx
  4296 00003300 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4297                                  .L_lambda_opt_stack_adjusted_0c86:
  4298 00003309 C8000000                	enter 0, 0
  4299 0000330D 488B4528                	mov rax, PARAM(1)
  4300 00003311 50                      	push rax
  4301 00003312 488B4520                	mov rax, PARAM(0)
  4302 00003316 50                      	push rax
  4303 00003317 6A02                    	push 2
  4304 00003319 488B4510                	mov rax, qword [rbp + 8*2]
  4305 0000331D 488B00                  	mov rax, qword [rax + 8*0]
  4306 00003320 488B00                  	mov rax, qword [rax + 8*0]
  4307 00003323 488B00                  	mov rax, qword [rax]
  4308                                  	assert_closure(rax)
    65 00003326 803805              <1>  cmp byte [%1], %2
    66 00003329 0F85050E0100        <1>  jne L_error_incorrect_type
  4309 0000332F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4310 00003333 53                      	push rbx
  4311 00003334 FF7508                  	push RET_ADDR
  4312 00003337 488B7D18                	mov rdi, COUNT
  4313 0000333B 4883C703                	add rdi, 3
  4314 0000333F 48C1E703                	shl rdi, 3
  4315 00003343 4801EF                  	add rdi, rbp
  4316 00003346 488B6D00                	mov rbp, OLD_RDP
  4317 0000334A BE00000000              	mov rsi, 0
  4318                                  .L_tc_recycle_frame_loop_5cbc:	 ; start recycle frame loop
  4319 0000334F 4883FE05                	cmp rsi, 5
  4320 00003353 7427                    	je .L_tc_recycle_frame_done_5cbc
  4321 00003355 B904000000              	mov rcx, 4
  4322 0000335A 4829F1                  	sub rcx, rsi
  4323 0000335D 48C1E103                	shl rcx, 3
  4324 00003361 4801E1                  	add rcx, rsp ; rcx is the address to move
  4325 00003364 4889F3                  	mov rbx, rsi
  4326 00003367 48C1E303                	shl rbx, 3
  4327 0000336B 48F7DB                  	neg rbx
  4328 0000336E 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4329 00003371 488B09                  	mov rcx, [rcx]
  4330 00003374 48890B                  	mov [rbx], rcx
  4331 00003377 48FFC6                  	inc rsi
  4332 0000337A EBD3                    	jmp .L_tc_recycle_frame_loop_5cbc
  4333                                  .L_tc_recycle_frame_done_5cbc:	 ; end recycle frame loop
  4334 0000337C BB04000000              	mov rbx, 4
  4335 00003381 48C1E303                	shl rbx, 3
  4336 00003385 48F7DB                  	neg rbx
  4337 00003388 4801FB                  	add rbx, rdi
  4338 0000338B 4889DC                  	mov rsp, rbx
  4339 0000338E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4340 00003392 FFE3                    	jmp rbx
  4341 00003394 C9                      	leave
  4342 00003395 C22000                  	ret AND_KILL_FRAME(2)
  4343                                  .L_lambda_opt_end_0c86:	; new closure is in rax
  4344 00003398 C9                      	leave
  4345 00003399 C21800                  	ret 8 * (2 + 1)
  4346                                  .L_lambda_simple_end_4f48:	; new closure is in rax
  4347                                  	assert_closure(rax)
    65 0000339C 803805              <1>  cmp byte [%1], %2
    66 0000339F 0F858F0D0100        <1>  jne L_error_incorrect_type
  4348 000033A5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4349 000033A9 53                      	push rbx
  4350 000033AA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4351 000033AE FFD3                    	call rbx
  4352 000033B0 48890425[C0020000]      	mov qword [free_var_88], rax
  4353 000033B8 48B8-                   	mov rax, sob_void
  4353 000033BA [0000000000000000] 
  4354                                  
  4355 000033C2 4889C7                  	mov rdi, rax
  4356 000033C5 E8FBF40000              	call print_sexpr_if_not_void
  4357                                  
  4358 000033CA 488D0425[17000000]      	lea rax, [23 + L_constants]
  4359 000033D2 50                      	push rax
  4360 000033D3 6A01                    	push 1
  4361 000033D5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4362 000033DA E8D5F40000              	call malloc
  4363 000033DF 50                      	push rax
  4364 000033E0 BF00000000              	mov rdi, 8 * 0	; new rib
  4365 000033E5 E8CAF40000              	call malloc
  4366 000033EA 50                      	push rax
  4367 000033EB BF08000000              	mov rdi, 8 * 1	; extended env
  4368 000033F0 E8BFF40000              	call malloc
  4369 000033F5 488B7D10                	mov rdi, ENV
  4370 000033F9 BE00000000              	mov rsi, 0
  4371 000033FE BA01000000              	mov rdx, 1
  4372                                  .L_lambda_simple_env_loop_4f4a:	; ext_env[i + 1] <-- env[i]
  4373 00003403 4883FE00                	cmp rsi, 0
  4374 00003407 7410                    	je .L_lambda_simple_env_end_4f4a
  4375 00003409 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4376 0000340D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4377 00003411 48FFC6                  	inc rsi
  4378 00003414 48FFC2                  	inc rdx
  4379 00003417 EBEA                    	jmp .L_lambda_simple_env_loop_4f4a
  4380                                  .L_lambda_simple_env_end_4f4a:
  4381 00003419 5B                      	pop rbx
  4382 0000341A BE00000000              	mov rsi, 0
  4383                                  .L_lambda_simple_params_loop_4f4a:	; copy params
  4384 0000341F 4883FE00                	cmp rsi, 0
  4385 00003423 740E                    	je .L_lambda_simple_params_end_4f4a
  4386 00003425 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4387 0000342A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4388 0000342E 48FFC6                  	inc rsi
  4389 00003431 EBEC                    	jmp .L_lambda_simple_params_loop_4f4a
  4390                                  .L_lambda_simple_params_end_4f4a:
  4391 00003433 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4392 00003436 4889C3                  	mov rbx, rax
  4393 00003439 58                      	pop rax
  4394 0000343A C60005                  	mov byte [rax], T_closure
  4395 0000343D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4396 00003441 48C74009[4E340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f4a
  4397 00003449 E955040000              	jmp .L_lambda_simple_end_4f4a
  4398                                  .L_lambda_simple_code_4f4a:	; lambda-simple body
  4399 0000344E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4400 00003454 740B                    	je .L_lambda_simple_arity_check_ok_4f4a
  4401 00003456 FF742410                	push qword [rsp + 8 * 2]
  4402 0000345A 6A01                    	push 1
  4403 0000345C E90CF40000              	jmp L_error_incorrect_arity_simple
  4404                                  .L_lambda_simple_arity_check_ok_4f4a:
  4405 00003461 C8000000                	enter 0, 0
  4406 00003465 BF11000000              	mov qword rdi, (1 + 8 + 8)
  4407 0000346A E845F40000              	call malloc
  4408 0000346F 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  4409 00003473 48B8-                   	mov rax, sob_void
  4409 00003475 [0000000000000000] 
  4410                                  
  4411 0000347D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4412 00003482 E82DF40000              	call malloc
  4413 00003487 50                      	push rax
  4414 00003488 BF08000000              	mov rdi, 8 * 1	; new rib
  4415 0000348D E822F40000              	call malloc
  4416 00003492 50                      	push rax
  4417 00003493 BF10000000              	mov rdi, 8 * 2	; extended env
  4418 00003498 E817F40000              	call malloc
  4419 0000349D 488B7D10                	mov rdi, ENV
  4420 000034A1 BE00000000              	mov rsi, 0
  4421 000034A6 BA01000000              	mov rdx, 1
  4422                                  .L_lambda_simple_env_loop_4f4b:	; ext_env[i + 1] <-- env[i]
  4423 000034AB 4883FE01                	cmp rsi, 1
  4424 000034AF 7410                    	je .L_lambda_simple_env_end_4f4b
  4425 000034B1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4426 000034B5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4427 000034B9 48FFC6                  	inc rsi
  4428 000034BC 48FFC2                  	inc rdx
  4429 000034BF EBEA                    	jmp .L_lambda_simple_env_loop_4f4b
  4430                                  .L_lambda_simple_env_end_4f4b:
  4431 000034C1 5B                      	pop rbx
  4432 000034C2 BE00000000              	mov rsi, 0
  4433                                  .L_lambda_simple_params_loop_4f4b:	; copy params
  4434 000034C7 4883FE01                	cmp rsi, 1
  4435 000034CB 740E                    	je .L_lambda_simple_params_end_4f4b
  4436 000034CD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4437 000034D2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4438 000034D6 48FFC6                  	inc rsi
  4439 000034D9 EBEC                    	jmp .L_lambda_simple_params_loop_4f4b
  4440                                  .L_lambda_simple_params_end_4f4b:
  4441 000034DB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4442 000034DE 4889C3                  	mov rbx, rax
  4443 000034E1 58                      	pop rax
  4444 000034E2 C60005                  	mov byte [rax], T_closure
  4445 000034E5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4446 000034E9 48C74009[F6340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f4b
  4447 000034F1 E939010000              	jmp .L_lambda_simple_end_4f4b
  4448                                  .L_lambda_simple_code_4f4b:	; lambda-simple body
  4449 000034F6 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4450 000034FC 740B                    	je .L_lambda_simple_arity_check_ok_4f4b
  4451 000034FE FF742410                	push qword [rsp + 8 * 2]
  4452 00003502 6A02                    	push 2
  4453 00003504 E964F30000              	jmp L_error_incorrect_arity_simple
  4454                                  .L_lambda_simple_arity_check_ok_4f4b:
  4455 00003509 C8000000                	enter 0, 0
  4456 0000350D 488B4528                	mov rax, PARAM(1)
  4457 00003511 50                      	push rax
  4458 00003512 6A01                    	push 1
  4459 00003514 488B0425[08000000]      	mov rax, qword [free_var_1]
  4460                                  	assert_closure(rax)
    65 0000351C 803805              <1>  cmp byte [%1], %2
    66 0000351F 0F850F0C0100        <1>  jne L_error_incorrect_type
  4461 00003525 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4462 00003529 53                      	push rbx
  4463 0000352A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4464 0000352E FFD3                    	call rbx
  4465 00003530 483D[02000000]          	cmp rax, sob_boolean_false
  4466 00003536 0F84EB000000            	je .L_if_else_5680
  4467 0000353C 488B4528                	mov rax, PARAM(1)
  4468 00003540 50                      	push rax
  4469 00003541 6A01                    	push 1
  4470 00003543 488B0425[88000000]      	mov rax, qword [free_var_17]
  4471                                  	assert_closure(rax)
    65 0000354B 803805              <1>  cmp byte [%1], %2
    66 0000354E 0F85E00B0100        <1>  jne L_error_incorrect_type
  4472 00003554 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4473 00003558 53                      	push rbx
  4474 00003559 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4475 0000355D FFD3                    	call rbx
  4476 0000355F 50                      	push rax
  4477 00003560 488B4528                	mov rax, PARAM(1)
  4478 00003564 50                      	push rax
  4479 00003565 6A01                    	push 1
  4480 00003567 488B0425[80000000]      	mov rax, qword [free_var_16]
  4481                                  	assert_closure(rax)
    65 0000356F 803805              <1>  cmp byte [%1], %2
    66 00003572 0F85BC0B0100        <1>  jne L_error_incorrect_type
  4482 00003578 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4483 0000357C 53                      	push rbx
  4484 0000357D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4485 00003581 FFD3                    	call rbx
  4486 00003583 50                      	push rax
  4487 00003584 6A02                    	push 2
  4488 00003586 488B4510                	mov rax, qword [rbp + 8*2]
  4489 0000358A 488B00                  	mov rax, qword [rax + 8*0]
  4490 0000358D 488B00                  	mov rax, qword [rax + 8*0]
  4491 00003590 488B00                  	mov rax, qword [rax]
  4492                                  	assert_closure(rax)
    65 00003593 803805              <1>  cmp byte [%1], %2
    66 00003596 0F85980B0100        <1>  jne L_error_incorrect_type
  4493 0000359C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4494 000035A0 53                      	push rbx
  4495 000035A1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4496 000035A5 FFD3                    	call rbx
  4497 000035A7 50                      	push rax
  4498 000035A8 488B4520                	mov rax, PARAM(0)
  4499 000035AC 50                      	push rax
  4500 000035AD 6A02                    	push 2
  4501 000035AF 488B0425[68000000]      	mov rax, qword [free_var_13]
  4502                                  	assert_closure(rax)
    65 000035B7 803805              <1>  cmp byte [%1], %2
    66 000035BA 0F85740B0100        <1>  jne L_error_incorrect_type
  4503 000035C0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4504 000035C4 53                      	push rbx
  4505 000035C5 FF7508                  	push RET_ADDR
  4506 000035C8 488B7D18                	mov rdi, COUNT
  4507 000035CC 4883C703                	add rdi, 3
  4508 000035D0 48C1E703                	shl rdi, 3
  4509 000035D4 4801EF                  	add rdi, rbp
  4510 000035D7 488B6D00                	mov rbp, OLD_RDP
  4511 000035DB BE00000000              	mov rsi, 0
  4512                                  .L_tc_recycle_frame_loop_5cbd:	 ; start recycle frame loop
  4513 000035E0 4883FE05                	cmp rsi, 5
  4514 000035E4 7427                    	je .L_tc_recycle_frame_done_5cbd
  4515 000035E6 B904000000              	mov rcx, 4
  4516 000035EB 4829F1                  	sub rcx, rsi
  4517 000035EE 48C1E103                	shl rcx, 3
  4518 000035F2 4801E1                  	add rcx, rsp ; rcx is the address to move
  4519 000035F5 4889F3                  	mov rbx, rsi
  4520 000035F8 48C1E303                	shl rbx, 3
  4521 000035FC 48F7DB                  	neg rbx
  4522 000035FF 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4523 00003602 488B09                  	mov rcx, [rcx]
  4524 00003605 48890B                  	mov [rbx], rcx
  4525 00003608 48FFC6                  	inc rsi
  4526 0000360B EBD3                    	jmp .L_tc_recycle_frame_loop_5cbd
  4527                                  .L_tc_recycle_frame_done_5cbd:	 ; end recycle frame loop
  4528 0000360D BB04000000              	mov rbx, 4
  4529 00003612 48C1E303                	shl rbx, 3
  4530 00003616 48F7DB                  	neg rbx
  4531 00003619 4801FB                  	add rbx, rdi
  4532 0000361C 4889DC                  	mov rsp, rbx
  4533 0000361F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4534 00003623 FFE3                    	jmp rbx
  4535 00003625 EB04                    	jmp .L_if_end_5680
  4536                                  	.L_if_else_5680:
  4537 00003627 488B4520                	mov rax, PARAM(0)
  4538                                  	.L_if_end_5680:
  4539 0000362B C9                      	leave
  4540 0000362C C22000                  	ret 8 * (2 + 2)
  4541                                  .L_lambda_simple_end_4f4b:	; new closure is in rax
  4542 0000362F 50                      	push rax
  4543 00003630 488B4520                	mov rax, PARAM(0)
  4544 00003634 8F00                    	pop qword [rax]
  4545 00003636 48B8-                   	mov rax, sob_void
  4545 00003638 [0000000000000000] 
  4546                                  
  4547 00003640 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4548 00003645 E86AF20000              	call malloc
  4549 0000364A 50                      	push rax
  4550 0000364B BF08000000              	mov rdi, 8 * 1	; new rib
  4551 00003650 E85FF20000              	call malloc
  4552 00003655 50                      	push rax
  4553 00003656 BF10000000              	mov rdi, 8 * 2	; extended env
  4554 0000365B E854F20000              	call malloc
  4555 00003660 488B7D10                	mov rdi, ENV
  4556 00003664 BE00000000              	mov rsi, 0
  4557 00003669 BA01000000              	mov rdx, 1
  4558                                  .L_lambda_opt_env_loop_0c87:	; ext_env[i + 1] <-- env[i]
  4559 0000366E 4883FE01                	cmp rsi, 1
  4560 00003672 7410                    	je .L_lambda_opt_env_end_0c87
  4561 00003674 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4562 00003678 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4563 0000367C 48FFC6                  	inc rsi
  4564 0000367F 48FFC2                  	inc rdx
  4565 00003682 EBEA                    	jmp .L_lambda_opt_env_loop_0c87
  4566                                  .L_lambda_opt_env_end_0c87:
  4567 00003684 5B                      	pop rbx
  4568 00003685 BE00000000              	mov rsi, 0
  4569                                  .L_lambda_opt_params_loop_0c87:	; copy params
  4570 0000368A 4883FE01                	cmp rsi, 1
  4571 0000368E 740E                    	je .L_lambda_opt_params_end_0c87
  4572 00003690 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4573 00003695 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4574 00003699 48FFC6                  	inc rsi
  4575 0000369C EBEC                    	jmp .L_lambda_opt_params_loop_0c87
  4576                                  .L_lambda_opt_params_end_0c87:
  4577 0000369E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4578 000036A1 4889C3                  	mov rbx, rax
  4579 000036A4 58                      	pop rax
  4580 000036A5 C60005                  	mov byte [rax], T_closure
  4581 000036A8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4582 000036AC 48C74009[B9360000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c87
  4583 000036B4 E9E6010000              	jmp .L_lambda_opt_end_0c87
  4584                                  .L_lambda_opt_code_0c87:	; lambda-opt body
  4585 000036B9 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  4586 000036BE 4889FB                  	mov rbx, rdi
  4587 000036C1 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  4588 000036C5 4883FB00                	cmp rbx, 0
  4589 000036C9 7F45                    	jg .L_lambda_opt_arity_check_more_0c87
  4590                                  .L_lambda_opt_arity_check_exact_0c87:	 ; if params in opt is exact
  4591 000036CB 4883EC08                	sub rsp, 8
  4592 000036CF BE00000000              	mov rsi, 0 ; index
  4593                                  .L_lambda_opt_stack_enlarge_loop_0c87:	 ; stack loop enlarge start
  4594 000036D4 4883FE04                	cmp rsi, 4
  4595 000036D8 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c87
  4596 000036DA 4889F7                  	mov rdi, rsi
  4597 000036DD 48FFC7                  	inc rdi
  4598 000036E0 48C1E703                	shl rdi, 3
  4599 000036E4 4801E7                  	add rdi, rsp
  4600 000036E7 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  4601 000036EA 4883EB08                	sub rbx, 8
  4602 000036EE 488B3F                  	mov rdi, [rdi]
  4603 000036F1 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  4604 000036F4 48FFC6                  	inc rsi
  4605 000036F7 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c87
  4606                                  .L_lambda_opt_stack_enlarge_loop_exit_0c87:	 ; end of stack enlarge loop
  4607 000036F9 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  4607 000036FE [01000000]         
  4608 00003702 48C744241002000000      	mov qword [rsp + 2*8], 2
  4609 0000370B E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c87
  4610                                  .L_lambda_opt_arity_check_more_0c87:	 ; if params in opt is more
  4611 00003710 48B8-                   	mov rax, sob_nil
  4611 00003712 [0100000000000000] 
  4612 0000371A 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  4613 0000371D 48FFCE                  	dec rsi
  4614                                  .L_lambda_opt_list_create_loop_0c87:	; start of list creation loop
  4615 00003720 4883FEFF                	cmp rsi, -1
  4616 00003724 7422                    	je .L_lambda_opt_list_create_loop_exit_0c87
  4617 00003726 488D4E04                	lea rcx, [rsi + (3 + 1)]
  4618 0000372A 48C1E103                	shl rcx, 3
  4619 0000372E 4801E1                  	add rcx, rsp
  4620 00003731 488B09                  	mov rcx, [rcx]
  4621 00003734 56                      	push rsi ; save params
  4622 00003735 53                      	push rbx
  4623                                  
  4624 00003736 50                      	push rax ; cdr
  4625 00003737 51                      	push rcx ; car
  4626 00003738 6A02                    	push qword 2 ; push num of args
  4627 0000373A 6A01                    	push qword 1 ; push garbage as env
  4628 0000373C E8FAFA0000              	call L_code_ptr_cons
  4629                                  
  4630 00003741 5B                      	pop rbx ; restore params
  4631 00003742 5E                      	pop rsi
  4632 00003743 48FFCE                  	dec rsi
  4633 00003746 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c87
  4634                                  .L_lambda_opt_list_create_loop_exit_0c87:	; end of list creation loop
  4635 00003748 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  4636 0000374D 4883C302                	add rbx, 2
  4637 00003751 4889DF                  	mov rdi, rbx
  4638 00003754 48C1E703                	shl rdi,3
  4639 00003758 4801E7                  	add rdi, rsp
  4640 0000375B 488907                  	mov [rdi], rax
  4641 0000375E BE00000000              	mov rsi, 0 ;index
  4642                                  .L_lambda_opt_stack_shrink_loop_0c87:	; start of stack shrink loop
  4643 00003763 4883FE04                	cmp rsi, 4
  4644 00003767 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c87
  4645 00003769 BF03000000              	mov rdi, 3
  4646 0000376E 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  4647 00003771 4889D9                  	mov rcx, rbx
  4648 00003774 4829F1                  	sub rcx, rsi
  4649 00003777 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  4650 0000377A 4889FA                  	mov rdx, rdi
  4651 0000377D 48C1E203                	shl rdx, 3
  4652 00003781 4801E2                  	add rdx, rsp
  4653 00003784 48C1E103                	shl rcx, 3
  4654 00003788 4801E1                  	add rcx, rsp
  4655 0000378B 488B12                  	mov rdx, [rdx]
  4656 0000378E 488911                  	mov [rcx], rdx
  4657 00003791 48FFC6                  	inc rsi
  4658 00003794 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c87
  4659                                  .L_lambda_opt_stack_shrink_loop_exit_0c87:	; end of stack shrink loop
  4660 00003796 4883EB02                	sub rbx, 2 ; rbx has number of args
  4661 0000379A 4883EB02                	sub rbx, 2
  4662 0000379E 48C1E303                	shl rbx, 3
  4663 000037A2 4801DC                  	add rsp, rbx
  4664 000037A5 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4665                                  .L_lambda_opt_stack_adjusted_0c87:
  4666 000037AE C8000000                	enter 0, 0
  4667 000037B2 488B4528                	mov rax, PARAM(1)
  4668 000037B6 50                      	push rax
  4669 000037B7 6A01                    	push 1
  4670 000037B9 488B0425[88000000]      	mov rax, qword [free_var_17]
  4671                                  	assert_closure(rax)
    65 000037C1 803805              <1>  cmp byte [%1], %2
    66 000037C4 0F856A090100        <1>  jne L_error_incorrect_type
  4672 000037CA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4673 000037CE 53                      	push rbx
  4674 000037CF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4675 000037D3 FFD3                    	call rbx
  4676 000037D5 50                      	push rax
  4677 000037D6 488B4528                	mov rax, PARAM(1)
  4678 000037DA 50                      	push rax
  4679 000037DB 6A01                    	push 1
  4680 000037DD 488B0425[80000000]      	mov rax, qword [free_var_16]
  4681                                  	assert_closure(rax)
    65 000037E5 803805              <1>  cmp byte [%1], %2
    66 000037E8 0F8546090100        <1>  jne L_error_incorrect_type
  4682 000037EE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4683 000037F2 53                      	push rbx
  4684 000037F3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4685 000037F7 FFD3                    	call rbx
  4686 000037F9 50                      	push rax
  4687 000037FA 6A02                    	push 2
  4688 000037FC 488B4510                	mov rax, qword [rbp + 8*2]
  4689 00003800 488B00                  	mov rax, qword [rax + 8*0]
  4690 00003803 488B00                  	mov rax, qword [rax + 8*0]
  4691 00003806 488B00                  	mov rax, qword [rax]
  4692                                  	assert_closure(rax)
    65 00003809 803805              <1>  cmp byte [%1], %2
    66 0000380C 0F8522090100        <1>  jne L_error_incorrect_type
  4693 00003812 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4694 00003816 53                      	push rbx
  4695 00003817 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4696 0000381B FFD3                    	call rbx
  4697 0000381D 50                      	push rax
  4698 0000381E 488B4520                	mov rax, PARAM(0)
  4699 00003822 50                      	push rax
  4700 00003823 6A02                    	push 2
  4701 00003825 488B0425[E8000000]      	mov rax, qword [free_var_29]
  4702                                  	assert_closure(rax)
    65 0000382D 803805              <1>  cmp byte [%1], %2
    66 00003830 0F85FE080100        <1>  jne L_error_incorrect_type
  4703 00003836 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4704 0000383A 53                      	push rbx
  4705 0000383B FF7508                  	push RET_ADDR
  4706 0000383E 488B7D18                	mov rdi, COUNT
  4707 00003842 4883C703                	add rdi, 3
  4708 00003846 48C1E703                	shl rdi, 3
  4709 0000384A 4801EF                  	add rdi, rbp
  4710 0000384D 488B6D00                	mov rbp, OLD_RDP
  4711 00003851 BE00000000              	mov rsi, 0
  4712                                  .L_tc_recycle_frame_loop_5cbe:	 ; start recycle frame loop
  4713 00003856 4883FE05                	cmp rsi, 5
  4714 0000385A 7427                    	je .L_tc_recycle_frame_done_5cbe
  4715 0000385C B904000000              	mov rcx, 4
  4716 00003861 4829F1                  	sub rcx, rsi
  4717 00003864 48C1E103                	shl rcx, 3
  4718 00003868 4801E1                  	add rcx, rsp ; rcx is the address to move
  4719 0000386B 4889F3                  	mov rbx, rsi
  4720 0000386E 48C1E303                	shl rbx, 3
  4721 00003872 48F7DB                  	neg rbx
  4722 00003875 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4723 00003878 488B09                  	mov rcx, [rcx]
  4724 0000387B 48890B                  	mov [rbx], rcx
  4725 0000387E 48FFC6                  	inc rsi
  4726 00003881 EBD3                    	jmp .L_tc_recycle_frame_loop_5cbe
  4727                                  .L_tc_recycle_frame_done_5cbe:	 ; end recycle frame loop
  4728 00003883 BB04000000              	mov rbx, 4
  4729 00003888 48C1E303                	shl rbx, 3
  4730 0000388C 48F7DB                  	neg rbx
  4731 0000388F 4801FB                  	add rbx, rdi
  4732 00003892 4889DC                  	mov rsp, rbx
  4733 00003895 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4734 00003899 FFE3                    	jmp rbx
  4735 0000389B C9                      	leave
  4736 0000389C C22000                  	ret AND_KILL_FRAME(2)
  4737                                  .L_lambda_opt_end_0c87:	; new closure is in rax
  4738 0000389F C9                      	leave
  4739 000038A0 C21800                  	ret 8 * (2 + 1)
  4740                                  .L_lambda_simple_end_4f4a:	; new closure is in rax
  4741                                  	assert_closure(rax)
    65 000038A3 803805              <1>  cmp byte [%1], %2
    66 000038A6 0F8588080100        <1>  jne L_error_incorrect_type
  4742 000038AC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4743 000038B0 53                      	push rbx
  4744 000038B1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4745 000038B5 FFD3                    	call rbx
  4746 000038B7 48890425[C8020000]      	mov qword [free_var_89], rax
  4747 000038BF 48B8-                   	mov rax, sob_void
  4747 000038C1 [0000000000000000] 
  4748                                  
  4749 000038C9 4889C7                  	mov rdi, rax
  4750 000038CC E8F4EF0000              	call print_sexpr_if_not_void
  4751                                  
  4752 000038D1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4753 000038D6 E8D9EF0000              	call malloc
  4754 000038DB 50                      	push rax
  4755 000038DC BF00000000              	mov rdi, 8 * 0	; new rib
  4756 000038E1 E8CEEF0000              	call malloc
  4757 000038E6 50                      	push rax
  4758 000038E7 BF08000000              	mov rdi, 8 * 1	; extended env
  4759 000038EC E8C3EF0000              	call malloc
  4760 000038F1 488B7D10                	mov rdi, ENV
  4761 000038F5 BE00000000              	mov rsi, 0
  4762 000038FA BA01000000              	mov rdx, 1
  4763                                  .L_lambda_opt_env_loop_0c88:	; ext_env[i + 1] <-- env[i]
  4764 000038FF 4883FE00                	cmp rsi, 0
  4765 00003903 7410                    	je .L_lambda_opt_env_end_0c88
  4766 00003905 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4767 00003909 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4768 0000390D 48FFC6                  	inc rsi
  4769 00003910 48FFC2                  	inc rdx
  4770 00003913 EBEA                    	jmp .L_lambda_opt_env_loop_0c88
  4771                                  .L_lambda_opt_env_end_0c88:
  4772 00003915 5B                      	pop rbx
  4773 00003916 BE00000000              	mov rsi, 0
  4774                                  .L_lambda_opt_params_loop_0c88:	; copy params
  4775 0000391B 4883FE00                	cmp rsi, 0
  4776 0000391F 740E                    	je .L_lambda_opt_params_end_0c88
  4777 00003921 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4778 00003926 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4779 0000392A 48FFC6                  	inc rsi
  4780 0000392D EBEC                    	jmp .L_lambda_opt_params_loop_0c88
  4781                                  .L_lambda_opt_params_end_0c88:
  4782 0000392F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4783 00003932 4889C3                  	mov rbx, rax
  4784 00003935 58                      	pop rax
  4785 00003936 C60005                  	mov byte [rax], T_closure
  4786 00003939 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4787 0000393D 48C74009[4A390000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c88
  4788 00003945 E9AF040000              	jmp .L_lambda_opt_end_0c88
  4789                                  .L_lambda_opt_code_0c88:	; lambda-opt body
  4790 0000394A 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  4791 0000394F 4889FB                  	mov rbx, rdi
  4792 00003952 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  4793 00003956 4883FB00                	cmp rbx, 0
  4794 0000395A 7F45                    	jg .L_lambda_opt_arity_check_more_0c88
  4795                                  .L_lambda_opt_arity_check_exact_0c88:	 ; if params in opt is exact
  4796 0000395C 4883EC08                	sub rsp, 8
  4797 00003960 BE00000000              	mov rsi, 0 ; index
  4798                                  .L_lambda_opt_stack_enlarge_loop_0c88:	 ; stack loop enlarge start
  4799 00003965 4883FE04                	cmp rsi, 4
  4800 00003969 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c88
  4801 0000396B 4889F7                  	mov rdi, rsi
  4802 0000396E 48FFC7                  	inc rdi
  4803 00003971 48C1E703                	shl rdi, 3
  4804 00003975 4801E7                  	add rdi, rsp
  4805 00003978 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  4806 0000397B 4883EB08                	sub rbx, 8
  4807 0000397F 488B3F                  	mov rdi, [rdi]
  4808 00003982 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  4809 00003985 48FFC6                  	inc rsi
  4810 00003988 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c88
  4811                                  .L_lambda_opt_stack_enlarge_loop_exit_0c88:	 ; end of stack enlarge loop
  4812 0000398A 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  4812 0000398F [01000000]         
  4813 00003993 48C744241002000000      	mov qword [rsp + 2*8], 2
  4814 0000399C E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c88
  4815                                  .L_lambda_opt_arity_check_more_0c88:	 ; if params in opt is more
  4816 000039A1 48B8-                   	mov rax, sob_nil
  4816 000039A3 [0100000000000000] 
  4817 000039AB 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  4818 000039AE 48FFCE                  	dec rsi
  4819                                  .L_lambda_opt_list_create_loop_0c88:	; start of list creation loop
  4820 000039B1 4883FEFF                	cmp rsi, -1
  4821 000039B5 7422                    	je .L_lambda_opt_list_create_loop_exit_0c88
  4822 000039B7 488D4E04                	lea rcx, [rsi + (3 + 1)]
  4823 000039BB 48C1E103                	shl rcx, 3
  4824 000039BF 4801E1                  	add rcx, rsp
  4825 000039C2 488B09                  	mov rcx, [rcx]
  4826 000039C5 56                      	push rsi ; save params
  4827 000039C6 53                      	push rbx
  4828                                  
  4829 000039C7 50                      	push rax ; cdr
  4830 000039C8 51                      	push rcx ; car
  4831 000039C9 6A02                    	push qword 2 ; push num of args
  4832 000039CB 6A01                    	push qword 1 ; push garbage as env
  4833 000039CD E869F80000              	call L_code_ptr_cons
  4834                                  
  4835 000039D2 5B                      	pop rbx ; restore params
  4836 000039D3 5E                      	pop rsi
  4837 000039D4 48FFCE                  	dec rsi
  4838 000039D7 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c88
  4839                                  .L_lambda_opt_list_create_loop_exit_0c88:	; end of list creation loop
  4840 000039D9 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  4841 000039DE 4883C302                	add rbx, 2
  4842 000039E2 4889DF                  	mov rdi, rbx
  4843 000039E5 48C1E703                	shl rdi,3
  4844 000039E9 4801E7                  	add rdi, rsp
  4845 000039EC 488907                  	mov [rdi], rax
  4846 000039EF BE00000000              	mov rsi, 0 ;index
  4847                                  .L_lambda_opt_stack_shrink_loop_0c88:	; start of stack shrink loop
  4848 000039F4 4883FE04                	cmp rsi, 4
  4849 000039F8 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c88
  4850 000039FA BF03000000              	mov rdi, 3
  4851 000039FF 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  4852 00003A02 4889D9                  	mov rcx, rbx
  4853 00003A05 4829F1                  	sub rcx, rsi
  4854 00003A08 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  4855 00003A0B 4889FA                  	mov rdx, rdi
  4856 00003A0E 48C1E203                	shl rdx, 3
  4857 00003A12 4801E2                  	add rdx, rsp
  4858 00003A15 48C1E103                	shl rcx, 3
  4859 00003A19 4801E1                  	add rcx, rsp
  4860 00003A1C 488B12                  	mov rdx, [rdx]
  4861 00003A1F 488911                  	mov [rcx], rdx
  4862 00003A22 48FFC6                  	inc rsi
  4863 00003A25 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c88
  4864                                  .L_lambda_opt_stack_shrink_loop_exit_0c88:	; end of stack shrink loop
  4865 00003A27 4883EB02                	sub rbx, 2 ; rbx has number of args
  4866 00003A2B 4883EB02                	sub rbx, 2
  4867 00003A2F 48C1E303                	shl rbx, 3
  4868 00003A33 4801DC                  	add rsp, rbx
  4869 00003A36 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4870                                  .L_lambda_opt_stack_adjusted_0c88:
  4871 00003A3F C8000000                	enter 0, 0
  4872 00003A43 488D0425[17000000]      	lea rax, [23 + L_constants]
  4873 00003A4B 50                      	push rax
  4874 00003A4C 6A01                    	push 1
  4875 00003A4E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4876 00003A53 E85CEE0000              	call malloc
  4877 00003A58 50                      	push rax
  4878 00003A59 BF10000000              	mov rdi, 8 * 2	; new rib
  4879 00003A5E E851EE0000              	call malloc
  4880 00003A63 50                      	push rax
  4881 00003A64 BF10000000              	mov rdi, 8 * 2	; extended env
  4882 00003A69 E846EE0000              	call malloc
  4883 00003A6E 488B7D10                	mov rdi, ENV
  4884 00003A72 BE00000000              	mov rsi, 0
  4885 00003A77 BA01000000              	mov rdx, 1
  4886                                  .L_lambda_simple_env_loop_4f4c:	; ext_env[i + 1] <-- env[i]
  4887 00003A7C 4883FE01                	cmp rsi, 1
  4888 00003A80 7410                    	je .L_lambda_simple_env_end_4f4c
  4889 00003A82 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4890 00003A86 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4891 00003A8A 48FFC6                  	inc rsi
  4892 00003A8D 48FFC2                  	inc rdx
  4893 00003A90 EBEA                    	jmp .L_lambda_simple_env_loop_4f4c
  4894                                  .L_lambda_simple_env_end_4f4c:
  4895 00003A92 5B                      	pop rbx
  4896 00003A93 BE00000000              	mov rsi, 0
  4897                                  .L_lambda_simple_params_loop_4f4c:	; copy params
  4898 00003A98 4883FE02                	cmp rsi, 2
  4899 00003A9C 740E                    	je .L_lambda_simple_params_end_4f4c
  4900 00003A9E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4901 00003AA3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4902 00003AA7 48FFC6                  	inc rsi
  4903 00003AAA EBEC                    	jmp .L_lambda_simple_params_loop_4f4c
  4904                                  .L_lambda_simple_params_end_4f4c:
  4905 00003AAC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4906 00003AAF 4889C3                  	mov rbx, rax
  4907 00003AB2 58                      	pop rax
  4908 00003AB3 C60005                  	mov byte [rax], T_closure
  4909 00003AB6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4910 00003ABA 48C74009[C73A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f4c
  4911 00003AC2 E9C0020000              	jmp .L_lambda_simple_end_4f4c
  4912                                  .L_lambda_simple_code_4f4c:	; lambda-simple body
  4913 00003AC7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4914 00003ACD 740B                    	je .L_lambda_simple_arity_check_ok_4f4c
  4915 00003ACF FF742410                	push qword [rsp + 8 * 2]
  4916 00003AD3 6A01                    	push 1
  4917 00003AD5 E993ED0000              	jmp L_error_incorrect_arity_simple
  4918                                  .L_lambda_simple_arity_check_ok_4f4c:
  4919 00003ADA C8000000                	enter 0, 0
  4920 00003ADE BF11000000              	mov qword rdi, (1 + 8 + 8)
  4921 00003AE3 E8CCED0000              	call malloc
  4922 00003AE8 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  4923 00003AEC 48B8-                   	mov rax, sob_void
  4923 00003AEE [0000000000000000] 
  4924                                  
  4925 00003AF6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4926 00003AFB E8B4ED0000              	call malloc
  4927 00003B00 50                      	push rax
  4928 00003B01 BF08000000              	mov rdi, 8 * 1	; new rib
  4929 00003B06 E8A9ED0000              	call malloc
  4930 00003B0B 50                      	push rax
  4931 00003B0C BF18000000              	mov rdi, 8 * 3	; extended env
  4932 00003B11 E89EED0000              	call malloc
  4933 00003B16 488B7D10                	mov rdi, ENV
  4934 00003B1A BE00000000              	mov rsi, 0
  4935 00003B1F BA01000000              	mov rdx, 1
  4936                                  .L_lambda_simple_env_loop_4f4d:	; ext_env[i + 1] <-- env[i]
  4937 00003B24 4883FE02                	cmp rsi, 2
  4938 00003B28 7410                    	je .L_lambda_simple_env_end_4f4d
  4939 00003B2A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4940 00003B2E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4941 00003B32 48FFC6                  	inc rsi
  4942 00003B35 48FFC2                  	inc rdx
  4943 00003B38 EBEA                    	jmp .L_lambda_simple_env_loop_4f4d
  4944                                  .L_lambda_simple_env_end_4f4d:
  4945 00003B3A 5B                      	pop rbx
  4946 00003B3B BE00000000              	mov rsi, 0
  4947                                  .L_lambda_simple_params_loop_4f4d:	; copy params
  4948 00003B40 4883FE01                	cmp rsi, 1
  4949 00003B44 740E                    	je .L_lambda_simple_params_end_4f4d
  4950 00003B46 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4951 00003B4B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4952 00003B4F 48FFC6                  	inc rsi
  4953 00003B52 EBEC                    	jmp .L_lambda_simple_params_loop_4f4d
  4954                                  .L_lambda_simple_params_end_4f4d:
  4955 00003B54 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4956 00003B57 4889C3                  	mov rbx, rax
  4957 00003B5A 58                      	pop rax
  4958 00003B5B C60005                  	mov byte [rax], T_closure
  4959 00003B5E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4960 00003B62 48C74009[6F3B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f4d
  4961 00003B6A E980010000              	jmp .L_lambda_simple_end_4f4d
  4962                                  .L_lambda_simple_code_4f4d:	; lambda-simple body
  4963 00003B6F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4964 00003B75 740B                    	je .L_lambda_simple_arity_check_ok_4f4d
  4965 00003B77 FF742410                	push qword [rsp + 8 * 2]
  4966 00003B7B 6A01                    	push 1
  4967 00003B7D E9EBEC0000              	jmp L_error_incorrect_arity_simple
  4968                                  .L_lambda_simple_arity_check_ok_4f4d:
  4969 00003B82 C8000000                	enter 0, 0
  4970 00003B86 488B4520                	mov rax, PARAM(0)
  4971 00003B8A 50                      	push rax
  4972 00003B8B 6A01                    	push 1
  4973 00003B8D 488B0425[80000000]      	mov rax, qword [free_var_16]
  4974                                  	assert_closure(rax)
    65 00003B95 803805              <1>  cmp byte [%1], %2
    66 00003B98 0F8596050100        <1>  jne L_error_incorrect_type
  4975 00003B9E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4976 00003BA2 53                      	push rbx
  4977 00003BA3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4978 00003BA7 FFD3                    	call rbx
  4979 00003BA9 50                      	push rax
  4980 00003BAA 6A01                    	push 1
  4981 00003BAC 488B0425[08000000]      	mov rax, qword [free_var_1]
  4982                                  	assert_closure(rax)
    65 00003BB4 803805              <1>  cmp byte [%1], %2
    66 00003BB7 0F8577050100        <1>  jne L_error_incorrect_type
  4983 00003BBD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4984 00003BC1 53                      	push rbx
  4985 00003BC2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4986 00003BC6 FFD3                    	call rbx
  4987 00003BC8 483D[02000000]          	cmp rax, sob_boolean_false
  4988 00003BCE 0F840F010000            	je .L_if_else_5681
  4989 00003BD4 488B4520                	mov rax, PARAM(0)
  4990 00003BD8 50                      	push rax
  4991 00003BD9 488B0425[80000000]      	mov rax, qword [free_var_16]
  4992 00003BE1 50                      	push rax
  4993 00003BE2 6A02                    	push 2
  4994 00003BE4 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4995                                  	assert_closure(rax)
    65 00003BEC 803805              <1>  cmp byte [%1], %2
    66 00003BEF 0F853F050100        <1>  jne L_error_incorrect_type
  4996 00003BF5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4997 00003BF9 53                      	push rbx
  4998 00003BFA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4999 00003BFE FFD3                    	call rbx
  5000 00003C00 50                      	push rax
  5001 00003C01 488B4510                	mov rax, qword [rbp + 8*2]
  5002 00003C05 488B4008                	mov rax, qword [rax + 8*1]
  5003 00003C09 488B00                  	mov rax, qword [rax + 8*0]
  5004 00003C0C 50                      	push rax
  5005 00003C0D 6A02                    	push 2
  5006 00003C0F 488B0425[C8020000]      	mov rax, qword [free_var_89]
  5007                                  	assert_closure(rax)
    65 00003C17 803805              <1>  cmp byte [%1], %2
    66 00003C1A 0F8514050100        <1>  jne L_error_incorrect_type
  5008 00003C20 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5009 00003C24 53                      	push rbx
  5010 00003C25 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5011 00003C29 FFD3                    	call rbx
  5012 00003C2B 483D[02000000]          	cmp rax, sob_boolean_false
  5013 00003C31 0F85AA000000            	jne .L_or_end_0615
  5014 00003C37 488B4520                	mov rax, PARAM(0)
  5015 00003C3B 50                      	push rax
  5016 00003C3C 488B0425[88000000]      	mov rax, qword [free_var_17]
  5017 00003C44 50                      	push rax
  5018 00003C45 6A02                    	push 2
  5019 00003C47 488B0425[D8020000]      	mov rax, qword [free_var_91]
  5020                                  	assert_closure(rax)
    65 00003C4F 803805              <1>  cmp byte [%1], %2
    66 00003C52 0F85DC040100        <1>  jne L_error_incorrect_type
  5021 00003C58 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5022 00003C5C 53                      	push rbx
  5023 00003C5D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5024 00003C61 FFD3                    	call rbx
  5025 00003C63 50                      	push rax
  5026 00003C64 6A01                    	push 1
  5027 00003C66 488B4510                	mov rax, qword [rbp + 8*2]
  5028 00003C6A 488B00                  	mov rax, qword [rax + 8*0]
  5029 00003C6D 488B00                  	mov rax, qword [rax + 8*0]
  5030 00003C70 488B00                  	mov rax, qword [rax]
  5031                                  	assert_closure(rax)
    65 00003C73 803805              <1>  cmp byte [%1], %2
    66 00003C76 0F85B8040100        <1>  jne L_error_incorrect_type
  5032 00003C7C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5033 00003C80 53                      	push rbx
  5034 00003C81 FF7508                  	push RET_ADDR
  5035 00003C84 488B7D18                	mov rdi, COUNT
  5036 00003C88 4883C703                	add rdi, 3
  5037 00003C8C 48C1E703                	shl rdi, 3
  5038 00003C90 4801EF                  	add rdi, rbp
  5039 00003C93 488B6D00                	mov rbp, OLD_RDP
  5040 00003C97 BE00000000              	mov rsi, 0
  5041                                  .L_tc_recycle_frame_loop_5cc0:	 ; start recycle frame loop
  5042 00003C9C 4883FE04                	cmp rsi, 4
  5043 00003CA0 7427                    	je .L_tc_recycle_frame_done_5cc0
  5044 00003CA2 B903000000              	mov rcx, 3
  5045 00003CA7 4829F1                  	sub rcx, rsi
  5046 00003CAA 48C1E103                	shl rcx, 3
  5047 00003CAE 4801E1                  	add rcx, rsp ; rcx is the address to move
  5048 00003CB1 4889F3                  	mov rbx, rsi
  5049 00003CB4 48C1E303                	shl rbx, 3
  5050 00003CB8 48F7DB                  	neg rbx
  5051 00003CBB 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5052 00003CBE 488B09                  	mov rcx, [rcx]
  5053 00003CC1 48890B                  	mov [rbx], rcx
  5054 00003CC4 48FFC6                  	inc rsi
  5055 00003CC7 EBD3                    	jmp .L_tc_recycle_frame_loop_5cc0
  5056                                  .L_tc_recycle_frame_done_5cc0:	 ; end recycle frame loop
  5057 00003CC9 BB03000000              	mov rbx, 3
  5058 00003CCE 48C1E303                	shl rbx, 3
  5059 00003CD2 48F7DB                  	neg rbx
  5060 00003CD5 4801FB                  	add rbx, rdi
  5061 00003CD8 4889DC                  	mov rsp, rbx
  5062 00003CDB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5063 00003CDF FFE3                    	jmp rbx
  5064                                  .L_or_end_0615:
  5065 00003CE1 EB08                    	jmp .L_if_end_5681
  5066                                  	.L_if_else_5681:
  5067 00003CE3 488D0425[02000000]      	lea rax, [2 + L_constants]
  5068                                  	.L_if_end_5681:
  5069 00003CEB C9                      	leave
  5070 00003CEC C21800                  	ret 8 * (2 + 1)
  5071                                  .L_lambda_simple_end_4f4d:	; new closure is in rax
  5072 00003CEF 50                      	push rax
  5073 00003CF0 488B4520                	mov rax, PARAM(0)
  5074 00003CF4 8F00                    	pop qword [rax]
  5075 00003CF6 48B8-                   	mov rax, sob_void
  5075 00003CF8 [0000000000000000] 
  5076                                  
  5077 00003D00 488B4510                	mov rax, qword [rbp + 8*2]
  5078 00003D04 488B00                  	mov rax, qword [rax + 8*0]
  5079 00003D07 488B4008                	mov rax, qword [rax + 8*1]
  5080 00003D0B 50                      	push rax
  5081 00003D0C 6A01                    	push 1
  5082 00003D0E 488B4520                	mov rax, PARAM(0)
  5083 00003D12 488B00                  	mov rax, qword [rax]
  5084                                  	assert_closure(rax)
    65 00003D15 803805              <1>  cmp byte [%1], %2
    66 00003D18 0F8516040100        <1>  jne L_error_incorrect_type
  5085 00003D1E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5086 00003D22 53                      	push rbx
  5087 00003D23 FF7508                  	push RET_ADDR
  5088 00003D26 488B7D18                	mov rdi, COUNT
  5089 00003D2A 4883C703                	add rdi, 3
  5090 00003D2E 48C1E703                	shl rdi, 3
  5091 00003D32 4801EF                  	add rdi, rbp
  5092 00003D35 488B6D00                	mov rbp, OLD_RDP
  5093 00003D39 BE00000000              	mov rsi, 0
  5094                                  .L_tc_recycle_frame_loop_5cc1:	 ; start recycle frame loop
  5095 00003D3E 4883FE04                	cmp rsi, 4
  5096 00003D42 7427                    	je .L_tc_recycle_frame_done_5cc1
  5097 00003D44 B903000000              	mov rcx, 3
  5098 00003D49 4829F1                  	sub rcx, rsi
  5099 00003D4C 48C1E103                	shl rcx, 3
  5100 00003D50 4801E1                  	add rcx, rsp ; rcx is the address to move
  5101 00003D53 4889F3                  	mov rbx, rsi
  5102 00003D56 48C1E303                	shl rbx, 3
  5103 00003D5A 48F7DB                  	neg rbx
  5104 00003D5D 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5105 00003D60 488B09                  	mov rcx, [rcx]
  5106 00003D63 48890B                  	mov [rbx], rcx
  5107 00003D66 48FFC6                  	inc rsi
  5108 00003D69 EBD3                    	jmp .L_tc_recycle_frame_loop_5cc1
  5109                                  .L_tc_recycle_frame_done_5cc1:	 ; end recycle frame loop
  5110 00003D6B BB03000000              	mov rbx, 3
  5111 00003D70 48C1E303                	shl rbx, 3
  5112 00003D74 48F7DB                  	neg rbx
  5113 00003D77 4801FB                  	add rbx, rdi
  5114 00003D7A 4889DC                  	mov rsp, rbx
  5115 00003D7D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5116 00003D81 FFE3                    	jmp rbx
  5117 00003D83 C9                      	leave
  5118 00003D84 C21800                  	ret 8 * (2 + 1)
  5119                                  .L_lambda_simple_end_4f4c:	; new closure is in rax
  5120                                  	assert_closure(rax)
    65 00003D87 803805              <1>  cmp byte [%1], %2
    66 00003D8A 0F85A4030100        <1>  jne L_error_incorrect_type
  5121 00003D90 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5122 00003D94 53                      	push rbx
  5123 00003D95 FF7508                  	push RET_ADDR
  5124 00003D98 488B7D18                	mov rdi, COUNT
  5125 00003D9C 4883C703                	add rdi, 3
  5126 00003DA0 48C1E703                	shl rdi, 3
  5127 00003DA4 4801EF                  	add rdi, rbp
  5128 00003DA7 488B6D00                	mov rbp, OLD_RDP
  5129 00003DAB BE00000000              	mov rsi, 0
  5130                                  .L_tc_recycle_frame_loop_5cbf:	 ; start recycle frame loop
  5131 00003DB0 4883FE04                	cmp rsi, 4
  5132 00003DB4 7427                    	je .L_tc_recycle_frame_done_5cbf
  5133 00003DB6 B903000000              	mov rcx, 3
  5134 00003DBB 4829F1                  	sub rcx, rsi
  5135 00003DBE 48C1E103                	shl rcx, 3
  5136 00003DC2 4801E1                  	add rcx, rsp ; rcx is the address to move
  5137 00003DC5 4889F3                  	mov rbx, rsi
  5138 00003DC8 48C1E303                	shl rbx, 3
  5139 00003DCC 48F7DB                  	neg rbx
  5140 00003DCF 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5141 00003DD2 488B09                  	mov rcx, [rcx]
  5142 00003DD5 48890B                  	mov [rbx], rcx
  5143 00003DD8 48FFC6                  	inc rsi
  5144 00003DDB EBD3                    	jmp .L_tc_recycle_frame_loop_5cbf
  5145                                  .L_tc_recycle_frame_done_5cbf:	 ; end recycle frame loop
  5146 00003DDD BB03000000              	mov rbx, 3
  5147 00003DE2 48C1E303                	shl rbx, 3
  5148 00003DE6 48F7DB                  	neg rbx
  5149 00003DE9 4801FB                  	add rbx, rdi
  5150 00003DEC 4889DC                  	mov rsp, rbx
  5151 00003DEF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5152 00003DF3 FFE3                    	jmp rbx
  5153 00003DF5 C9                      	leave
  5154 00003DF6 C22000                  	ret AND_KILL_FRAME(2)
  5155                                  .L_lambda_opt_end_0c88:	; new closure is in rax
  5156 00003DF9 48890425[D0020000]      	mov qword [free_var_90], rax
  5157 00003E01 48B8-                   	mov rax, sob_void
  5157 00003E03 [0000000000000000] 
  5158                                  
  5159 00003E0B 4889C7                  	mov rdi, rax
  5160 00003E0E E8B2EA0000              	call print_sexpr_if_not_void
  5161                                  
  5162 00003E13 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5163 00003E18 E897EA0000              	call malloc
  5164 00003E1D 50                      	push rax
  5165 00003E1E BF00000000              	mov rdi, 8 * 0	; new rib
  5166 00003E23 E88CEA0000              	call malloc
  5167 00003E28 50                      	push rax
  5168 00003E29 BF08000000              	mov rdi, 8 * 1	; extended env
  5169 00003E2E E881EA0000              	call malloc
  5170 00003E33 488B7D10                	mov rdi, ENV
  5171 00003E37 BE00000000              	mov rsi, 0
  5172 00003E3C BA01000000              	mov rdx, 1
  5173                                  .L_lambda_opt_env_loop_0c89:	; ext_env[i + 1] <-- env[i]
  5174 00003E41 4883FE00                	cmp rsi, 0
  5175 00003E45 7410                    	je .L_lambda_opt_env_end_0c89
  5176 00003E47 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  5177 00003E4B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5178 00003E4F 48FFC6                  	inc rsi
  5179 00003E52 48FFC2                  	inc rdx
  5180 00003E55 EBEA                    	jmp .L_lambda_opt_env_loop_0c89
  5181                                  .L_lambda_opt_env_end_0c89:
  5182 00003E57 5B                      	pop rbx
  5183 00003E58 BE00000000              	mov rsi, 0
  5184                                  .L_lambda_opt_params_loop_0c89:	; copy params
  5185 00003E5D 4883FE00                	cmp rsi, 0
  5186 00003E61 740E                    	je .L_lambda_opt_params_end_0c89
  5187 00003E63 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5188 00003E68 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5189 00003E6C 48FFC6                  	inc rsi
  5190 00003E6F EBEC                    	jmp .L_lambda_opt_params_loop_0c89
  5191                                  .L_lambda_opt_params_end_0c89:
  5192 00003E71 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5193 00003E74 4889C3                  	mov rbx, rax
  5194 00003E77 58                      	pop rax
  5195 00003E78 C60005                  	mov byte [rax], T_closure
  5196 00003E7B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5197 00003E7F 48C74009[8C3E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c89
  5198 00003E87 E9AF040000              	jmp .L_lambda_opt_end_0c89
  5199                                  .L_lambda_opt_code_0c89:	; lambda-opt body
  5200 00003E8C 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  5201 00003E91 4889FB                  	mov rbx, rdi
  5202 00003E94 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  5203 00003E98 4883FB00                	cmp rbx, 0
  5204 00003E9C 7F45                    	jg .L_lambda_opt_arity_check_more_0c89
  5205                                  .L_lambda_opt_arity_check_exact_0c89:	 ; if params in opt is exact
  5206 00003E9E 4883EC08                	sub rsp, 8
  5207 00003EA2 BE00000000              	mov rsi, 0 ; index
  5208                                  .L_lambda_opt_stack_enlarge_loop_0c89:	 ; stack loop enlarge start
  5209 00003EA7 4883FE04                	cmp rsi, 4
  5210 00003EAB 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c89
  5211 00003EAD 4889F7                  	mov rdi, rsi
  5212 00003EB0 48FFC7                  	inc rdi
  5213 00003EB3 48C1E703                	shl rdi, 3
  5214 00003EB7 4801E7                  	add rdi, rsp
  5215 00003EBA 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  5216 00003EBD 4883EB08                	sub rbx, 8
  5217 00003EC1 488B3F                  	mov rdi, [rdi]
  5218 00003EC4 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  5219 00003EC7 48FFC6                  	inc rsi
  5220 00003ECA EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c89
  5221                                  .L_lambda_opt_stack_enlarge_loop_exit_0c89:	 ; end of stack enlarge loop
  5222 00003ECC 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  5222 00003ED1 [01000000]         
  5223 00003ED5 48C744241002000000      	mov qword [rsp + 2*8], 2
  5224 00003EDE E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c89
  5225                                  .L_lambda_opt_arity_check_more_0c89:	 ; if params in opt is more
  5226 00003EE3 48B8-                   	mov rax, sob_nil
  5226 00003EE5 [0100000000000000] 
  5227 00003EED 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  5228 00003EF0 48FFCE                  	dec rsi
  5229                                  .L_lambda_opt_list_create_loop_0c89:	; start of list creation loop
  5230 00003EF3 4883FEFF                	cmp rsi, -1
  5231 00003EF7 7422                    	je .L_lambda_opt_list_create_loop_exit_0c89
  5232 00003EF9 488D4E04                	lea rcx, [rsi + (3 + 1)]
  5233 00003EFD 48C1E103                	shl rcx, 3
  5234 00003F01 4801E1                  	add rcx, rsp
  5235 00003F04 488B09                  	mov rcx, [rcx]
  5236 00003F07 56                      	push rsi ; save params
  5237 00003F08 53                      	push rbx
  5238                                  
  5239 00003F09 50                      	push rax ; cdr
  5240 00003F0A 51                      	push rcx ; car
  5241 00003F0B 6A02                    	push qword 2 ; push num of args
  5242 00003F0D 6A01                    	push qword 1 ; push garbage as env
  5243 00003F0F E827F30000              	call L_code_ptr_cons
  5244                                  
  5245 00003F14 5B                      	pop rbx ; restore params
  5246 00003F15 5E                      	pop rsi
  5247 00003F16 48FFCE                  	dec rsi
  5248 00003F19 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c89
  5249                                  .L_lambda_opt_list_create_loop_exit_0c89:	; end of list creation loop
  5250 00003F1B 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  5251 00003F20 4883C302                	add rbx, 2
  5252 00003F24 4889DF                  	mov rdi, rbx
  5253 00003F27 48C1E703                	shl rdi,3
  5254 00003F2B 4801E7                  	add rdi, rsp
  5255 00003F2E 488907                  	mov [rdi], rax
  5256 00003F31 BE00000000              	mov rsi, 0 ;index
  5257                                  .L_lambda_opt_stack_shrink_loop_0c89:	; start of stack shrink loop
  5258 00003F36 4883FE04                	cmp rsi, 4
  5259 00003F3A 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c89
  5260 00003F3C BF03000000              	mov rdi, 3
  5261 00003F41 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  5262 00003F44 4889D9                  	mov rcx, rbx
  5263 00003F47 4829F1                  	sub rcx, rsi
  5264 00003F4A 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  5265 00003F4D 4889FA                  	mov rdx, rdi
  5266 00003F50 48C1E203                	shl rdx, 3
  5267 00003F54 4801E2                  	add rdx, rsp
  5268 00003F57 48C1E103                	shl rcx, 3
  5269 00003F5B 4801E1                  	add rcx, rsp
  5270 00003F5E 488B12                  	mov rdx, [rdx]
  5271 00003F61 488911                  	mov [rcx], rdx
  5272 00003F64 48FFC6                  	inc rsi
  5273 00003F67 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c89
  5274                                  .L_lambda_opt_stack_shrink_loop_exit_0c89:	; end of stack shrink loop
  5275 00003F69 4883EB02                	sub rbx, 2 ; rbx has number of args
  5276 00003F6D 4883EB02                	sub rbx, 2
  5277 00003F71 48C1E303                	shl rbx, 3
  5278 00003F75 4801DC                  	add rsp, rbx
  5279 00003F78 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  5280                                  .L_lambda_opt_stack_adjusted_0c89:
  5281 00003F81 C8000000                	enter 0, 0
  5282 00003F85 488D0425[17000000]      	lea rax, [23 + L_constants]
  5283 00003F8D 50                      	push rax
  5284 00003F8E 6A01                    	push 1
  5285 00003F90 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5286 00003F95 E81AE90000              	call malloc
  5287 00003F9A 50                      	push rax
  5288 00003F9B BF10000000              	mov rdi, 8 * 2	; new rib
  5289 00003FA0 E80FE90000              	call malloc
  5290 00003FA5 50                      	push rax
  5291 00003FA6 BF10000000              	mov rdi, 8 * 2	; extended env
  5292 00003FAB E804E90000              	call malloc
  5293 00003FB0 488B7D10                	mov rdi, ENV
  5294 00003FB4 BE00000000              	mov rsi, 0
  5295 00003FB9 BA01000000              	mov rdx, 1
  5296                                  .L_lambda_simple_env_loop_4f4e:	; ext_env[i + 1] <-- env[i]
  5297 00003FBE 4883FE01                	cmp rsi, 1
  5298 00003FC2 7410                    	je .L_lambda_simple_env_end_4f4e
  5299 00003FC4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  5300 00003FC8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5301 00003FCC 48FFC6                  	inc rsi
  5302 00003FCF 48FFC2                  	inc rdx
  5303 00003FD2 EBEA                    	jmp .L_lambda_simple_env_loop_4f4e
  5304                                  .L_lambda_simple_env_end_4f4e:
  5305 00003FD4 5B                      	pop rbx
  5306 00003FD5 BE00000000              	mov rsi, 0
  5307                                  .L_lambda_simple_params_loop_4f4e:	; copy params
  5308 00003FDA 4883FE02                	cmp rsi, 2
  5309 00003FDE 740E                    	je .L_lambda_simple_params_end_4f4e
  5310 00003FE0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5311 00003FE5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5312 00003FE9 48FFC6                  	inc rsi
  5313 00003FEC EBEC                    	jmp .L_lambda_simple_params_loop_4f4e
  5314                                  .L_lambda_simple_params_end_4f4e:
  5315 00003FEE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5316 00003FF1 4889C3                  	mov rbx, rax
  5317 00003FF4 58                      	pop rax
  5318 00003FF5 C60005                  	mov byte [rax], T_closure
  5319 00003FF8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5320 00003FFC 48C74009[09400000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f4e
  5321 00004004 E9C0020000              	jmp .L_lambda_simple_end_4f4e
  5322                                  .L_lambda_simple_code_4f4e:	; lambda-simple body
  5323 00004009 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5324 0000400F 740B                    	je .L_lambda_simple_arity_check_ok_4f4e
  5325 00004011 FF742410                	push qword [rsp + 8 * 2]
  5326 00004015 6A01                    	push 1
  5327 00004017 E951E80000              	jmp L_error_incorrect_arity_simple
  5328                                  .L_lambda_simple_arity_check_ok_4f4e:
  5329 0000401C C8000000                	enter 0, 0
  5330 00004020 BF11000000              	mov qword rdi, (1 + 8 + 8)
  5331 00004025 E88AE80000              	call malloc
  5332 0000402A 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  5333 0000402E 48B8-                   	mov rax, sob_void
  5333 00004030 [0000000000000000] 
  5334                                  
  5335 00004038 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5336 0000403D E872E80000              	call malloc
  5337 00004042 50                      	push rax
  5338 00004043 BF08000000              	mov rdi, 8 * 1	; new rib
  5339 00004048 E867E80000              	call malloc
  5340 0000404D 50                      	push rax
  5341 0000404E BF18000000              	mov rdi, 8 * 3	; extended env
  5342 00004053 E85CE80000              	call malloc
  5343 00004058 488B7D10                	mov rdi, ENV
  5344 0000405C BE00000000              	mov rsi, 0
  5345 00004061 BA01000000              	mov rdx, 1
  5346                                  .L_lambda_simple_env_loop_4f4f:	; ext_env[i + 1] <-- env[i]
  5347 00004066 4883FE02                	cmp rsi, 2
  5348 0000406A 7410                    	je .L_lambda_simple_env_end_4f4f
  5349 0000406C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  5350 00004070 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5351 00004074 48FFC6                  	inc rsi
  5352 00004077 48FFC2                  	inc rdx
  5353 0000407A EBEA                    	jmp .L_lambda_simple_env_loop_4f4f
  5354                                  .L_lambda_simple_env_end_4f4f:
  5355 0000407C 5B                      	pop rbx
  5356 0000407D BE00000000              	mov rsi, 0
  5357                                  .L_lambda_simple_params_loop_4f4f:	; copy params
  5358 00004082 4883FE01                	cmp rsi, 1
  5359 00004086 740E                    	je .L_lambda_simple_params_end_4f4f
  5360 00004088 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5361 0000408D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5362 00004091 48FFC6                  	inc rsi
  5363 00004094 EBEC                    	jmp .L_lambda_simple_params_loop_4f4f
  5364                                  .L_lambda_simple_params_end_4f4f:
  5365 00004096 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5366 00004099 4889C3                  	mov rbx, rax
  5367 0000409C 58                      	pop rax
  5368 0000409D C60005                  	mov byte [rax], T_closure
  5369 000040A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5370 000040A4 48C74009[B1400000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f4f
  5371 000040AC E980010000              	jmp .L_lambda_simple_end_4f4f
  5372                                  .L_lambda_simple_code_4f4f:	; lambda-simple body
  5373 000040B1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5374 000040B7 740B                    	je .L_lambda_simple_arity_check_ok_4f4f
  5375 000040B9 FF742410                	push qword [rsp + 8 * 2]
  5376 000040BD 6A01                    	push 1
  5377 000040BF E9A9E70000              	jmp L_error_incorrect_arity_simple
  5378                                  .L_lambda_simple_arity_check_ok_4f4f:
  5379 000040C4 C8000000                	enter 0, 0
  5380 000040C8 488B4520                	mov rax, PARAM(0)
  5381 000040CC 50                      	push rax
  5382 000040CD 6A01                    	push 1
  5383 000040CF 488B0425[80000000]      	mov rax, qword [free_var_16]
  5384                                  	assert_closure(rax)
    65 000040D7 803805              <1>  cmp byte [%1], %2
    66 000040DA 0F8554000100        <1>  jne L_error_incorrect_type
  5385 000040E0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5386 000040E4 53                      	push rbx
  5387 000040E5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5388 000040E9 FFD3                    	call rbx
  5389 000040EB 50                      	push rax
  5390 000040EC 6A01                    	push 1
  5391 000040EE 488B0425[00000000]      	mov rax, qword [free_var_0]
  5392                                  	assert_closure(rax)
    65 000040F6 803805              <1>  cmp byte [%1], %2
    66 000040F9 0F8535000100        <1>  jne L_error_incorrect_type
  5393 000040FF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5394 00004103 53                      	push rbx
  5395 00004104 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5396 00004108 FFD3                    	call rbx
  5397 0000410A 483D[02000000]          	cmp rax, sob_boolean_false
  5398 00004110 0F8517010000            	jne .L_or_end_0616
  5399 00004116 488B4520                	mov rax, PARAM(0)
  5400 0000411A 50                      	push rax
  5401 0000411B 488B0425[80000000]      	mov rax, qword [free_var_16]
  5402 00004123 50                      	push rax
  5403 00004124 6A02                    	push 2
  5404 00004126 488B0425[D8020000]      	mov rax, qword [free_var_91]
  5405                                  	assert_closure(rax)
    65 0000412E 803805              <1>  cmp byte [%1], %2
    66 00004131 0F85FDFF0000        <1>  jne L_error_incorrect_type
  5406 00004137 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5407 0000413B 53                      	push rbx
  5408 0000413C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5409 00004140 FFD3                    	call rbx
  5410 00004142 50                      	push rax
  5411 00004143 488B4510                	mov rax, qword [rbp + 8*2]
  5412 00004147 488B4008                	mov rax, qword [rax + 8*1]
  5413 0000414B 488B00                  	mov rax, qword [rax + 8*0]
  5414 0000414E 50                      	push rax
  5415 0000414F 6A02                    	push 2
  5416 00004151 488B0425[C8020000]      	mov rax, qword [free_var_89]
  5417                                  	assert_closure(rax)
    65 00004159 803805              <1>  cmp byte [%1], %2
    66 0000415C 0F85D2FF0000        <1>  jne L_error_incorrect_type
  5418 00004162 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5419 00004166 53                      	push rbx
  5420 00004167 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5421 0000416B FFD3                    	call rbx
  5422 0000416D 483D[02000000]          	cmp rax, sob_boolean_false
  5423 00004173 0F84AC000000            	je .L_if_else_5682
  5424 00004179 488B4520                	mov rax, PARAM(0)
  5425 0000417D 50                      	push rax
  5426 0000417E 488B0425[88000000]      	mov rax, qword [free_var_17]
  5427 00004186 50                      	push rax
  5428 00004187 6A02                    	push 2
  5429 00004189 488B0425[D8020000]      	mov rax, qword [free_var_91]
  5430                                  	assert_closure(rax)
    65 00004191 803805              <1>  cmp byte [%1], %2
    66 00004194 0F859AFF0000        <1>  jne L_error_incorrect_type
  5431 0000419A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5432 0000419E 53                      	push rbx
  5433 0000419F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5434 000041A3 FFD3                    	call rbx
  5435 000041A5 50                      	push rax
  5436 000041A6 6A01                    	push 1
  5437 000041A8 488B4510                	mov rax, qword [rbp + 8*2]
  5438 000041AC 488B00                  	mov rax, qword [rax + 8*0]
  5439 000041AF 488B00                  	mov rax, qword [rax + 8*0]
  5440 000041B2 488B00                  	mov rax, qword [rax]
  5441                                  	assert_closure(rax)
    65 000041B5 803805              <1>  cmp byte [%1], %2
    66 000041B8 0F8576FF0000        <1>  jne L_error_incorrect_type
  5442 000041BE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5443 000041C2 53                      	push rbx
  5444 000041C3 FF7508                  	push RET_ADDR
  5445 000041C6 488B7D18                	mov rdi, COUNT
  5446 000041CA 4883C703                	add rdi, 3
  5447 000041CE 48C1E703                	shl rdi, 3
  5448 000041D2 4801EF                  	add rdi, rbp
  5449 000041D5 488B6D00                	mov rbp, OLD_RDP
  5450 000041D9 BE00000000              	mov rsi, 0
  5451                                  .L_tc_recycle_frame_loop_5cc3:	 ; start recycle frame loop
  5452 000041DE 4883FE04                	cmp rsi, 4
  5453 000041E2 7427                    	je .L_tc_recycle_frame_done_5cc3
  5454 000041E4 B903000000              	mov rcx, 3
  5455 000041E9 4829F1                  	sub rcx, rsi
  5456 000041EC 48C1E103                	shl rcx, 3
  5457 000041F0 4801E1                  	add rcx, rsp ; rcx is the address to move
  5458 000041F3 4889F3                  	mov rbx, rsi
  5459 000041F6 48C1E303                	shl rbx, 3
  5460 000041FA 48F7DB                  	neg rbx
  5461 000041FD 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5462 00004200 488B09                  	mov rcx, [rcx]
  5463 00004203 48890B                  	mov [rbx], rcx
  5464 00004206 48FFC6                  	inc rsi
  5465 00004209 EBD3                    	jmp .L_tc_recycle_frame_loop_5cc3
  5466                                  .L_tc_recycle_frame_done_5cc3:	 ; end recycle frame loop
  5467 0000420B BB03000000              	mov rbx, 3
  5468 00004210 48C1E303                	shl rbx, 3
  5469 00004214 48F7DB                  	neg rbx
  5470 00004217 4801FB                  	add rbx, rdi
  5471 0000421A 4889DC                  	mov rsp, rbx
  5472 0000421D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5473 00004221 FFE3                    	jmp rbx
  5474 00004223 EB08                    	jmp .L_if_end_5682
  5475                                  	.L_if_else_5682:
  5476 00004225 488D0425[02000000]      	lea rax, [2 + L_constants]
  5477                                  	.L_if_end_5682:
  5478                                  .L_or_end_0616:
  5479 0000422D C9                      	leave
  5480 0000422E C21800                  	ret 8 * (2 + 1)
  5481                                  .L_lambda_simple_end_4f4f:	; new closure is in rax
  5482 00004231 50                      	push rax
  5483 00004232 488B4520                	mov rax, PARAM(0)
  5484 00004236 8F00                    	pop qword [rax]
  5485 00004238 48B8-                   	mov rax, sob_void
  5485 0000423A [0000000000000000] 
  5486                                  
  5487 00004242 488B4510                	mov rax, qword [rbp + 8*2]
  5488 00004246 488B00                  	mov rax, qword [rax + 8*0]
  5489 00004249 488B4008                	mov rax, qword [rax + 8*1]
  5490 0000424D 50                      	push rax
  5491 0000424E 6A01                    	push 1
  5492 00004250 488B4520                	mov rax, PARAM(0)
  5493 00004254 488B00                  	mov rax, qword [rax]
  5494                                  	assert_closure(rax)
    65 00004257 803805              <1>  cmp byte [%1], %2
    66 0000425A 0F85D4FE0000        <1>  jne L_error_incorrect_type
  5495 00004260 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5496 00004264 53                      	push rbx
  5497 00004265 FF7508                  	push RET_ADDR
  5498 00004268 488B7D18                	mov rdi, COUNT
  5499 0000426C 4883C703                	add rdi, 3
  5500 00004270 48C1E703                	shl rdi, 3
  5501 00004274 4801EF                  	add rdi, rbp
  5502 00004277 488B6D00                	mov rbp, OLD_RDP
  5503 0000427B BE00000000              	mov rsi, 0
  5504                                  .L_tc_recycle_frame_loop_5cc4:	 ; start recycle frame loop
  5505 00004280 4883FE04                	cmp rsi, 4
  5506 00004284 7427                    	je .L_tc_recycle_frame_done_5cc4
  5507 00004286 B903000000              	mov rcx, 3
  5508 0000428B 4829F1                  	sub rcx, rsi
  5509 0000428E 48C1E103                	shl rcx, 3
  5510 00004292 4801E1                  	add rcx, rsp ; rcx is the address to move
  5511 00004295 4889F3                  	mov rbx, rsi
  5512 00004298 48C1E303                	shl rbx, 3
  5513 0000429C 48F7DB                  	neg rbx
  5514 0000429F 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5515 000042A2 488B09                  	mov rcx, [rcx]
  5516 000042A5 48890B                  	mov [rbx], rcx
  5517 000042A8 48FFC6                  	inc rsi
  5518 000042AB EBD3                    	jmp .L_tc_recycle_frame_loop_5cc4
  5519                                  .L_tc_recycle_frame_done_5cc4:	 ; end recycle frame loop
  5520 000042AD BB03000000              	mov rbx, 3
  5521 000042B2 48C1E303                	shl rbx, 3
  5522 000042B6 48F7DB                  	neg rbx
  5523 000042B9 4801FB                  	add rbx, rdi
  5524 000042BC 4889DC                  	mov rsp, rbx
  5525 000042BF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5526 000042C3 FFE3                    	jmp rbx
  5527 000042C5 C9                      	leave
  5528 000042C6 C21800                  	ret 8 * (2 + 1)
  5529                                  .L_lambda_simple_end_4f4e:	; new closure is in rax
  5530                                  	assert_closure(rax)
    65 000042C9 803805              <1>  cmp byte [%1], %2
    66 000042CC 0F8562FE0000        <1>  jne L_error_incorrect_type
  5531 000042D2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5532 000042D6 53                      	push rbx
  5533 000042D7 FF7508                  	push RET_ADDR
  5534 000042DA 488B7D18                	mov rdi, COUNT
  5535 000042DE 4883C703                	add rdi, 3
  5536 000042E2 48C1E703                	shl rdi, 3
  5537 000042E6 4801EF                  	add rdi, rbp
  5538 000042E9 488B6D00                	mov rbp, OLD_RDP
  5539 000042ED BE00000000              	mov rsi, 0
  5540                                  .L_tc_recycle_frame_loop_5cc2:	 ; start recycle frame loop
  5541 000042F2 4883FE04                	cmp rsi, 4
  5542 000042F6 7427                    	je .L_tc_recycle_frame_done_5cc2
  5543 000042F8 B903000000              	mov rcx, 3
  5544 000042FD 4829F1                  	sub rcx, rsi
  5545 00004300 48C1E103                	shl rcx, 3
  5546 00004304 4801E1                  	add rcx, rsp ; rcx is the address to move
  5547 00004307 4889F3                  	mov rbx, rsi
  5548 0000430A 48C1E303                	shl rbx, 3
  5549 0000430E 48F7DB                  	neg rbx
  5550 00004311 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5551 00004314 488B09                  	mov rcx, [rcx]
  5552 00004317 48890B                  	mov [rbx], rcx
  5553 0000431A 48FFC6                  	inc rsi
  5554 0000431D EBD3                    	jmp .L_tc_recycle_frame_loop_5cc2
  5555                                  .L_tc_recycle_frame_done_5cc2:	 ; end recycle frame loop
  5556 0000431F BB03000000              	mov rbx, 3
  5557 00004324 48C1E303                	shl rbx, 3
  5558 00004328 48F7DB                  	neg rbx
  5559 0000432B 4801FB                  	add rbx, rdi
  5560 0000432E 4889DC                  	mov rsp, rbx
  5561 00004331 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5562 00004335 FFE3                    	jmp rbx
  5563 00004337 C9                      	leave
  5564 00004338 C22000                  	ret AND_KILL_FRAME(2)
  5565                                  .L_lambda_opt_end_0c89:	; new closure is in rax
  5566 0000433B 48890425[E0020000]      	mov qword [free_var_92], rax
  5567 00004343 48B8-                   	mov rax, sob_void
  5567 00004345 [0000000000000000] 
  5568                                  
  5569 0000434D 4889C7                  	mov rdi, rax
  5570 00004350 E870E50000              	call print_sexpr_if_not_void
  5571                                  
  5572 00004355 488D0425[17000000]      	lea rax, [23 + L_constants]
  5573 0000435D 50                      	push rax
  5574 0000435E 488D0425[17000000]      	lea rax, [23 + L_constants]
  5575 00004366 50                      	push rax
  5576 00004367 6A02                    	push 2
  5577 00004369 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5578 0000436E E841E50000              	call malloc
  5579 00004373 50                      	push rax
  5580 00004374 BF00000000              	mov rdi, 8 * 0	; new rib
  5581 00004379 E836E50000              	call malloc
  5582 0000437E 50                      	push rax
  5583 0000437F BF08000000              	mov rdi, 8 * 1	; extended env
  5584 00004384 E82BE50000              	call malloc
  5585 00004389 488B7D10                	mov rdi, ENV
  5586 0000438D BE00000000              	mov rsi, 0
  5587 00004392 BA01000000              	mov rdx, 1
  5588                                  .L_lambda_simple_env_loop_4f50:	; ext_env[i + 1] <-- env[i]
  5589 00004397 4883FE00                	cmp rsi, 0
  5590 0000439B 7410                    	je .L_lambda_simple_env_end_4f50
  5591 0000439D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  5592 000043A1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5593 000043A5 48FFC6                  	inc rsi
  5594 000043A8 48FFC2                  	inc rdx
  5595 000043AB EBEA                    	jmp .L_lambda_simple_env_loop_4f50
  5596                                  .L_lambda_simple_env_end_4f50:
  5597 000043AD 5B                      	pop rbx
  5598 000043AE BE00000000              	mov rsi, 0
  5599                                  .L_lambda_simple_params_loop_4f50:	; copy params
  5600 000043B3 4883FE00                	cmp rsi, 0
  5601 000043B7 740E                    	je .L_lambda_simple_params_end_4f50
  5602 000043B9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5603 000043BE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5604 000043C2 48FFC6                  	inc rsi
  5605 000043C5 EBEC                    	jmp .L_lambda_simple_params_loop_4f50
  5606                                  .L_lambda_simple_params_end_4f50:
  5607 000043C7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5608 000043CA 4889C3                  	mov rbx, rax
  5609 000043CD 58                      	pop rax
  5610 000043CE C60005                  	mov byte [rax], T_closure
  5611 000043D1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5612 000043D5 48C74009[E2430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f50
  5613 000043DD E988060000              	jmp .L_lambda_simple_end_4f50
  5614                                  .L_lambda_simple_code_4f50:	; lambda-simple body
  5615 000043E2 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5616 000043E8 740B                    	je .L_lambda_simple_arity_check_ok_4f50
  5617 000043EA FF742410                	push qword [rsp + 8 * 2]
  5618 000043EE 6A02                    	push 2
  5619 000043F0 E978E40000              	jmp L_error_incorrect_arity_simple
  5620                                  .L_lambda_simple_arity_check_ok_4f50:
  5621 000043F5 C8000000                	enter 0, 0
  5622 000043F9 BF11000000              	mov qword rdi, (1 + 8 + 8)
  5623 000043FE E8B1E40000              	call malloc
  5624 00004403 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  5625 00004407 48B8-                   	mov rax, sob_void
  5625 00004409 [0000000000000000] 
  5626                                  
  5627 00004411 BF11000000              	mov qword rdi, (1 + 8 + 8)
  5628 00004416 E899E40000              	call malloc
  5629 0000441B 48894528                	mov qword [rbp + 8*(4 + 1)], rax
  5630 0000441F 48B8-                   	mov rax, sob_void
  5630 00004421 [0000000000000000] 
  5631                                  
  5632 00004429 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5633 0000442E E881E40000              	call malloc
  5634 00004433 50                      	push rax
  5635 00004434 BF10000000              	mov rdi, 8 * 2	; new rib
  5636 00004439 E876E40000              	call malloc
  5637 0000443E 50                      	push rax
  5638 0000443F BF10000000              	mov rdi, 8 * 2	; extended env
  5639 00004444 E86BE40000              	call malloc
  5640 00004449 488B7D10                	mov rdi, ENV
  5641 0000444D BE00000000              	mov rsi, 0
  5642 00004452 BA01000000              	mov rdx, 1
  5643                                  .L_lambda_simple_env_loop_4f51:	; ext_env[i + 1] <-- env[i]
  5644 00004457 4883FE01                	cmp rsi, 1
  5645 0000445B 7410                    	je .L_lambda_simple_env_end_4f51
  5646 0000445D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  5647 00004461 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5648 00004465 48FFC6                  	inc rsi
  5649 00004468 48FFC2                  	inc rdx
  5650 0000446B EBEA                    	jmp .L_lambda_simple_env_loop_4f51
  5651                                  .L_lambda_simple_env_end_4f51:
  5652 0000446D 5B                      	pop rbx
  5653 0000446E BE00000000              	mov rsi, 0
  5654                                  .L_lambda_simple_params_loop_4f51:	; copy params
  5655 00004473 4883FE02                	cmp rsi, 2
  5656 00004477 740E                    	je .L_lambda_simple_params_end_4f51
  5657 00004479 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5658 0000447E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5659 00004482 48FFC6                  	inc rsi
  5660 00004485 EBEC                    	jmp .L_lambda_simple_params_loop_4f51
  5661                                  .L_lambda_simple_params_end_4f51:
  5662 00004487 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5663 0000448A 4889C3                  	mov rbx, rax
  5664 0000448D 58                      	pop rax
  5665 0000448E C60005                  	mov byte [rax], T_closure
  5666 00004491 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5667 00004495 48C74009[A2440000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f51
  5668 0000449D E957010000              	jmp .L_lambda_simple_end_4f51
  5669                                  .L_lambda_simple_code_4f51:	; lambda-simple body
  5670 000044A2 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5671 000044A8 740B                    	je .L_lambda_simple_arity_check_ok_4f51
  5672 000044AA FF742410                	push qword [rsp + 8 * 2]
  5673 000044AE 6A02                    	push 2
  5674 000044B0 E9B8E30000              	jmp L_error_incorrect_arity_simple
  5675                                  .L_lambda_simple_arity_check_ok_4f51:
  5676 000044B5 C8000000                	enter 0, 0
  5677 000044B9 488B4528                	mov rax, PARAM(1)
  5678 000044BD 50                      	push rax
  5679 000044BE 6A01                    	push 1
  5680 000044C0 488B0425[00000000]      	mov rax, qword [free_var_0]
  5681                                  	assert_closure(rax)
    65 000044C8 803805              <1>  cmp byte [%1], %2
    66 000044CB 0F8563FC0000        <1>  jne L_error_incorrect_type
  5682 000044D1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5683 000044D5 53                      	push rbx
  5684 000044D6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5685 000044DA FFD3                    	call rbx
  5686 000044DC 483D[02000000]          	cmp rax, sob_boolean_false
  5687 000044E2 740D                    	je .L_if_else_5683
  5688 000044E4 488D0425[01000000]      	lea rax, [1 + L_constants]
  5689 000044EC E904010000              	jmp .L_if_end_5683
  5690                                  	.L_if_else_5683:
  5691 000044F1 488B4528                	mov rax, PARAM(1)
  5692 000044F5 50                      	push rax
  5693 000044F6 6A01                    	push 1
  5694 000044F8 488B0425[88000000]      	mov rax, qword [free_var_17]
  5695                                  	assert_closure(rax)
    65 00004500 803805              <1>  cmp byte [%1], %2
    66 00004503 0F852BFC0000        <1>  jne L_error_incorrect_type
  5696 00004509 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5697 0000450D 53                      	push rbx
  5698 0000450E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5699 00004512 FFD3                    	call rbx
  5700 00004514 50                      	push rax
  5701 00004515 488B4520                	mov rax, PARAM(0)
  5702 00004519 50                      	push rax
  5703 0000451A 6A02                    	push 2
  5704 0000451C 488B4510                	mov rax, qword [rbp + 8*2]
  5705 00004520 488B00                  	mov rax, qword [rax + 8*0]
  5706 00004523 488B00                  	mov rax, qword [rax + 8*0]
  5707 00004526 488B00                  	mov rax, qword [rax]
  5708                                  	assert_closure(rax)
    65 00004529 803805              <1>  cmp byte [%1], %2
    66 0000452C 0F8502FC0000        <1>  jne L_error_incorrect_type
  5709 00004532 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5710 00004536 53                      	push rbx
  5711 00004537 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5712 0000453B FFD3                    	call rbx
  5713 0000453D 50                      	push rax
  5714 0000453E 488B4528                	mov rax, PARAM(1)
  5715 00004542 50                      	push rax
  5716 00004543 6A01                    	push 1
  5717 00004545 488B0425[80000000]      	mov rax, qword [free_var_16]
  5718                                  	assert_closure(rax)
    65 0000454D 803805              <1>  cmp byte [%1], %2
    66 00004550 0F85DEFB0000        <1>  jne L_error_incorrect_type
  5719 00004556 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5720 0000455A 53                      	push rbx
  5721 0000455B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5722 0000455F FFD3                    	call rbx
  5723 00004561 50                      	push rax
  5724 00004562 6A01                    	push 1
  5725 00004564 488B4520                	mov rax, PARAM(0)
  5726                                  	assert_closure(rax)
    65 00004568 803805              <1>  cmp byte [%1], %2
    66 0000456B 0F85C3FB0000        <1>  jne L_error_incorrect_type
  5727 00004571 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5728 00004575 53                      	push rbx
  5729 00004576 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5730 0000457A FFD3                    	call rbx
  5731 0000457C 50                      	push rax
  5732 0000457D 6A02                    	push 2
  5733 0000457F 488B0425[68000000]      	mov rax, qword [free_var_13]
  5734                                  	assert_closure(rax)
    65 00004587 803805              <1>  cmp byte [%1], %2
    66 0000458A 0F85A4FB0000        <1>  jne L_error_incorrect_type
  5735 00004590 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5736 00004594 53                      	push rbx
  5737 00004595 FF7508                  	push RET_ADDR
  5738 00004598 488B7D18                	mov rdi, COUNT
  5739 0000459C 4883C703                	add rdi, 3
  5740 000045A0 48C1E703                	shl rdi, 3
  5741 000045A4 4801EF                  	add rdi, rbp
  5742 000045A7 488B6D00                	mov rbp, OLD_RDP
  5743 000045AB BE00000000              	mov rsi, 0
  5744                                  .L_tc_recycle_frame_loop_5cc5:	 ; start recycle frame loop
  5745 000045B0 4883FE05                	cmp rsi, 5
  5746 000045B4 7427                    	je .L_tc_recycle_frame_done_5cc5
  5747 000045B6 B904000000              	mov rcx, 4
  5748 000045BB 4829F1                  	sub rcx, rsi
  5749 000045BE 48C1E103                	shl rcx, 3
  5750 000045C2 4801E1                  	add rcx, rsp ; rcx is the address to move
  5751 000045C5 4889F3                  	mov rbx, rsi
  5752 000045C8 48C1E303                	shl rbx, 3
  5753 000045CC 48F7DB                  	neg rbx
  5754 000045CF 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5755 000045D2 488B09                  	mov rcx, [rcx]
  5756 000045D5 48890B                  	mov [rbx], rcx
  5757 000045D8 48FFC6                  	inc rsi
  5758 000045DB EBD3                    	jmp .L_tc_recycle_frame_loop_5cc5
  5759                                  .L_tc_recycle_frame_done_5cc5:	 ; end recycle frame loop
  5760 000045DD BB04000000              	mov rbx, 4
  5761 000045E2 48C1E303                	shl rbx, 3
  5762 000045E6 48F7DB                  	neg rbx
  5763 000045E9 4801FB                  	add rbx, rdi
  5764 000045EC 4889DC                  	mov rsp, rbx
  5765 000045EF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5766 000045F3 FFE3                    	jmp rbx
  5767                                  	.L_if_end_5683:
  5768 000045F5 C9                      	leave
  5769 000045F6 C22000                  	ret 8 * (2 + 2)
  5770                                  .L_lambda_simple_end_4f51:	; new closure is in rax
  5771 000045F9 50                      	push rax
  5772 000045FA 488B4520                	mov rax, PARAM(0)
  5773 000045FE 8F00                    	pop qword [rax]
  5774 00004600 48B8-                   	mov rax, sob_void
  5774 00004602 [0000000000000000] 
  5775                                  
  5776 0000460A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5777 0000460F E8A0E20000              	call malloc
  5778 00004614 50                      	push rax
  5779 00004615 BF10000000              	mov rdi, 8 * 2	; new rib
  5780 0000461A E895E20000              	call malloc
  5781 0000461F 50                      	push rax
  5782 00004620 BF10000000              	mov rdi, 8 * 2	; extended env
  5783 00004625 E88AE20000              	call malloc
  5784 0000462A 488B7D10                	mov rdi, ENV
  5785 0000462E BE00000000              	mov rsi, 0
  5786 00004633 BA01000000              	mov rdx, 1
  5787                                  .L_lambda_simple_env_loop_4f52:	; ext_env[i + 1] <-- env[i]
  5788 00004638 4883FE01                	cmp rsi, 1
  5789 0000463C 7410                    	je .L_lambda_simple_env_end_4f52
  5790 0000463E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  5791 00004642 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5792 00004646 48FFC6                  	inc rsi
  5793 00004649 48FFC2                  	inc rdx
  5794 0000464C EBEA                    	jmp .L_lambda_simple_env_loop_4f52
  5795                                  .L_lambda_simple_env_end_4f52:
  5796 0000464E 5B                      	pop rbx
  5797 0000464F BE00000000              	mov rsi, 0
  5798                                  .L_lambda_simple_params_loop_4f52:	; copy params
  5799 00004654 4883FE02                	cmp rsi, 2
  5800 00004658 740E                    	je .L_lambda_simple_params_end_4f52
  5801 0000465A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5802 0000465F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5803 00004663 48FFC6                  	inc rsi
  5804 00004666 EBEC                    	jmp .L_lambda_simple_params_loop_4f52
  5805                                  .L_lambda_simple_params_end_4f52:
  5806 00004668 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5807 0000466B 4889C3                  	mov rbx, rax
  5808 0000466E 58                      	pop rax
  5809 0000466F C60005                  	mov byte [rax], T_closure
  5810 00004672 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5811 00004676 48C74009[83460000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f52
  5812 0000467E E99C010000              	jmp .L_lambda_simple_end_4f52
  5813                                  .L_lambda_simple_code_4f52:	; lambda-simple body
  5814 00004683 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5815 00004689 740B                    	je .L_lambda_simple_arity_check_ok_4f52
  5816 0000468B FF742410                	push qword [rsp + 8 * 2]
  5817 0000468F 6A02                    	push 2
  5818 00004691 E9D7E10000              	jmp L_error_incorrect_arity_simple
  5819                                  .L_lambda_simple_arity_check_ok_4f52:
  5820 00004696 C8000000                	enter 0, 0
  5821 0000469A 488B4528                	mov rax, PARAM(1)
  5822 0000469E 50                      	push rax
  5823 0000469F 6A01                    	push 1
  5824 000046A1 488B0425[80000000]      	mov rax, qword [free_var_16]
  5825                                  	assert_closure(rax)
    65 000046A9 803805              <1>  cmp byte [%1], %2
    66 000046AC 0F8582FA0000        <1>  jne L_error_incorrect_type
  5826 000046B2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5827 000046B6 53                      	push rbx
  5828 000046B7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5829 000046BB FFD3                    	call rbx
  5830 000046BD 50                      	push rax
  5831 000046BE 6A01                    	push 1
  5832 000046C0 488B0425[00000000]      	mov rax, qword [free_var_0]
  5833                                  	assert_closure(rax)
    65 000046C8 803805              <1>  cmp byte [%1], %2
    66 000046CB 0F8563FA0000        <1>  jne L_error_incorrect_type
  5834 000046D1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5835 000046D5 53                      	push rbx
  5836 000046D6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5837 000046DA FFD3                    	call rbx
  5838 000046DC 483D[02000000]          	cmp rax, sob_boolean_false
  5839 000046E2 740D                    	je .L_if_else_5684
  5840 000046E4 488D0425[01000000]      	lea rax, [1 + L_constants]
  5841 000046EC E92A010000              	jmp .L_if_end_5684
  5842                                  	.L_if_else_5684:
  5843 000046F1 488B4528                	mov rax, PARAM(1)
  5844 000046F5 50                      	push rax
  5845 000046F6 488B0425[88000000]      	mov rax, qword [free_var_17]
  5846 000046FE 50                      	push rax
  5847 000046FF 6A02                    	push 2
  5848 00004701 488B4510                	mov rax, qword [rbp + 8*2]
  5849 00004705 488B00                  	mov rax, qword [rax + 8*0]
  5850 00004708 488B00                  	mov rax, qword [rax + 8*0]
  5851 0000470B 488B00                  	mov rax, qword [rax]
  5852                                  	assert_closure(rax)
    65 0000470E 803805              <1>  cmp byte [%1], %2
    66 00004711 0F851DFA0000        <1>  jne L_error_incorrect_type
  5853 00004717 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5854 0000471B 53                      	push rbx
  5855 0000471C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5856 00004720 FFD3                    	call rbx
  5857 00004722 50                      	push rax
  5858 00004723 488B4520                	mov rax, PARAM(0)
  5859 00004727 50                      	push rax
  5860 00004728 6A02                    	push 2
  5861 0000472A 488B4510                	mov rax, qword [rbp + 8*2]
  5862 0000472E 488B00                  	mov rax, qword [rax + 8*0]
  5863 00004731 488B4008                	mov rax, qword [rax + 8*1]
  5864 00004735 488B00                  	mov rax, qword [rax]
  5865                                  	assert_closure(rax)
    65 00004738 803805              <1>  cmp byte [%1], %2
    66 0000473B 0F85F3F90000        <1>  jne L_error_incorrect_type
  5866 00004741 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5867 00004745 53                      	push rbx
  5868 00004746 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5869 0000474A FFD3                    	call rbx
  5870 0000474C 50                      	push rax
  5871 0000474D 488B4528                	mov rax, PARAM(1)
  5872 00004751 50                      	push rax
  5873 00004752 488B0425[80000000]      	mov rax, qword [free_var_16]
  5874 0000475A 50                      	push rax
  5875 0000475B 6A02                    	push 2
  5876 0000475D 488B4510                	mov rax, qword [rbp + 8*2]
  5877 00004761 488B00                  	mov rax, qword [rax + 8*0]
  5878 00004764 488B00                  	mov rax, qword [rax + 8*0]
  5879 00004767 488B00                  	mov rax, qword [rax]
  5880                                  	assert_closure(rax)
    65 0000476A 803805              <1>  cmp byte [%1], %2
    66 0000476D 0F85C1F90000        <1>  jne L_error_incorrect_type
  5881 00004773 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5882 00004777 53                      	push rbx
  5883 00004778 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5884 0000477C FFD3                    	call rbx
  5885 0000477E 50                      	push rax
  5886 0000477F 488B4520                	mov rax, PARAM(0)
  5887 00004783 50                      	push rax
  5888 00004784 6A02                    	push 2
  5889 00004786 488B0425[C8020000]      	mov rax, qword [free_var_89]
  5890                                  	assert_closure(rax)
    65 0000478E 803805              <1>  cmp byte [%1], %2
    66 00004791 0F859DF90000        <1>  jne L_error_incorrect_type
  5891 00004797 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5892 0000479B 53                      	push rbx
  5893 0000479C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5894 000047A0 FFD3                    	call rbx
  5895 000047A2 50                      	push rax
  5896 000047A3 6A02                    	push 2
  5897 000047A5 488B0425[68000000]      	mov rax, qword [free_var_13]
  5898                                  	assert_closure(rax)
    65 000047AD 803805              <1>  cmp byte [%1], %2
    66 000047B0 0F857EF90000        <1>  jne L_error_incorrect_type
  5899 000047B6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5900 000047BA 53                      	push rbx
  5901 000047BB FF7508                  	push RET_ADDR
  5902 000047BE 488B7D18                	mov rdi, COUNT
  5903 000047C2 4883C703                	add rdi, 3
  5904 000047C6 48C1E703                	shl rdi, 3
  5905 000047CA 4801EF                  	add rdi, rbp
  5906 000047CD 488B6D00                	mov rbp, OLD_RDP
  5907 000047D1 BE00000000              	mov rsi, 0
  5908                                  .L_tc_recycle_frame_loop_5cc6:	 ; start recycle frame loop
  5909 000047D6 4883FE05                	cmp rsi, 5
  5910 000047DA 7427                    	je .L_tc_recycle_frame_done_5cc6
  5911 000047DC B904000000              	mov rcx, 4
  5912 000047E1 4829F1                  	sub rcx, rsi
  5913 000047E4 48C1E103                	shl rcx, 3
  5914 000047E8 4801E1                  	add rcx, rsp ; rcx is the address to move
  5915 000047EB 4889F3                  	mov rbx, rsi
  5916 000047EE 48C1E303                	shl rbx, 3
  5917 000047F2 48F7DB                  	neg rbx
  5918 000047F5 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5919 000047F8 488B09                  	mov rcx, [rcx]
  5920 000047FB 48890B                  	mov [rbx], rcx
  5921 000047FE 48FFC6                  	inc rsi
  5922 00004801 EBD3                    	jmp .L_tc_recycle_frame_loop_5cc6
  5923                                  .L_tc_recycle_frame_done_5cc6:	 ; end recycle frame loop
  5924 00004803 BB04000000              	mov rbx, 4
  5925 00004808 48C1E303                	shl rbx, 3
  5926 0000480C 48F7DB                  	neg rbx
  5927 0000480F 4801FB                  	add rbx, rdi
  5928 00004812 4889DC                  	mov rsp, rbx
  5929 00004815 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5930 00004819 FFE3                    	jmp rbx
  5931                                  	.L_if_end_5684:
  5932 0000481B C9                      	leave
  5933 0000481C C22000                  	ret 8 * (2 + 2)
  5934                                  .L_lambda_simple_end_4f52:	; new closure is in rax
  5935 0000481F 50                      	push rax
  5936 00004820 488B4528                	mov rax, PARAM(1)
  5937 00004824 8F00                    	pop qword [rax]
  5938 00004826 48B8-                   	mov rax, sob_void
  5938 00004828 [0000000000000000] 
  5939                                  
  5940 00004830 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5941 00004835 E87AE00000              	call malloc
  5942 0000483A 50                      	push rax
  5943 0000483B BF10000000              	mov rdi, 8 * 2	; new rib
  5944 00004840 E86FE00000              	call malloc
  5945 00004845 50                      	push rax
  5946 00004846 BF10000000              	mov rdi, 8 * 2	; extended env
  5947 0000484B E864E00000              	call malloc
  5948 00004850 488B7D10                	mov rdi, ENV
  5949 00004854 BE00000000              	mov rsi, 0
  5950 00004859 BA01000000              	mov rdx, 1
  5951                                  .L_lambda_opt_env_loop_0c8a:	; ext_env[i + 1] <-- env[i]
  5952 0000485E 4883FE01                	cmp rsi, 1
  5953 00004862 7410                    	je .L_lambda_opt_env_end_0c8a
  5954 00004864 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  5955 00004868 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5956 0000486C 48FFC6                  	inc rsi
  5957 0000486F 48FFC2                  	inc rdx
  5958 00004872 EBEA                    	jmp .L_lambda_opt_env_loop_0c8a
  5959                                  .L_lambda_opt_env_end_0c8a:
  5960 00004874 5B                      	pop rbx
  5961 00004875 BE00000000              	mov rsi, 0
  5962                                  .L_lambda_opt_params_loop_0c8a:	; copy params
  5963 0000487A 4883FE02                	cmp rsi, 2
  5964 0000487E 740E                    	je .L_lambda_opt_params_end_0c8a
  5965 00004880 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5966 00004885 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5967 00004889 48FFC6                  	inc rsi
  5968 0000488C EBEC                    	jmp .L_lambda_opt_params_loop_0c8a
  5969                                  .L_lambda_opt_params_end_0c8a:
  5970 0000488E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5971 00004891 4889C3                  	mov rbx, rax
  5972 00004894 58                      	pop rax
  5973 00004895 C60005                  	mov byte [rax], T_closure
  5974 00004898 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5975 0000489C 48C74009[A9480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c8a
  5976 000048A4 E9BD010000              	jmp .L_lambda_opt_end_0c8a
  5977                                  .L_lambda_opt_code_0c8a:	; lambda-opt body
  5978 000048A9 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  5979 000048AE 4889FB                  	mov rbx, rdi
  5980 000048B1 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  5981 000048B5 4883FB00                	cmp rbx, 0
  5982 000048B9 7F45                    	jg .L_lambda_opt_arity_check_more_0c8a
  5983                                  .L_lambda_opt_arity_check_exact_0c8a:	 ; if params in opt is exact
  5984 000048BB 4883EC08                	sub rsp, 8
  5985 000048BF BE00000000              	mov rsi, 0 ; index
  5986                                  .L_lambda_opt_stack_enlarge_loop_0c8a:	 ; stack loop enlarge start
  5987 000048C4 4883FE04                	cmp rsi, 4
  5988 000048C8 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c8a
  5989 000048CA 4889F7                  	mov rdi, rsi
  5990 000048CD 48FFC7                  	inc rdi
  5991 000048D0 48C1E703                	shl rdi, 3
  5992 000048D4 4801E7                  	add rdi, rsp
  5993 000048D7 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  5994 000048DA 4883EB08                	sub rbx, 8
  5995 000048DE 488B3F                  	mov rdi, [rdi]
  5996 000048E1 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  5997 000048E4 48FFC6                  	inc rsi
  5998 000048E7 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c8a
  5999                                  .L_lambda_opt_stack_enlarge_loop_exit_0c8a:	 ; end of stack enlarge loop
  6000 000048E9 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  6000 000048EE [01000000]         
  6001 000048F2 48C744241002000000      	mov qword [rsp + 2*8], 2
  6002 000048FB E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c8a
  6003                                  .L_lambda_opt_arity_check_more_0c8a:	 ; if params in opt is more
  6004 00004900 48B8-                   	mov rax, sob_nil
  6004 00004902 [0100000000000000] 
  6005 0000490A 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  6006 0000490D 48FFCE                  	dec rsi
  6007                                  .L_lambda_opt_list_create_loop_0c8a:	; start of list creation loop
  6008 00004910 4883FEFF                	cmp rsi, -1
  6009 00004914 7422                    	je .L_lambda_opt_list_create_loop_exit_0c8a
  6010 00004916 488D4E04                	lea rcx, [rsi + (3 + 1)]
  6011 0000491A 48C1E103                	shl rcx, 3
  6012 0000491E 4801E1                  	add rcx, rsp
  6013 00004921 488B09                  	mov rcx, [rcx]
  6014 00004924 56                      	push rsi ; save params
  6015 00004925 53                      	push rbx
  6016                                  
  6017 00004926 50                      	push rax ; cdr
  6018 00004927 51                      	push rcx ; car
  6019 00004928 6A02                    	push qword 2 ; push num of args
  6020 0000492A 6A01                    	push qword 1 ; push garbage as env
  6021 0000492C E80AE90000              	call L_code_ptr_cons
  6022                                  
  6023 00004931 5B                      	pop rbx ; restore params
  6024 00004932 5E                      	pop rsi
  6025 00004933 48FFCE                  	dec rsi
  6026 00004936 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c8a
  6027                                  .L_lambda_opt_list_create_loop_exit_0c8a:	; end of list creation loop
  6028 00004938 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  6029 0000493D 4883C302                	add rbx, 2
  6030 00004941 4889DF                  	mov rdi, rbx
  6031 00004944 48C1E703                	shl rdi,3
  6032 00004948 4801E7                  	add rdi, rsp
  6033 0000494B 488907                  	mov [rdi], rax
  6034 0000494E BE00000000              	mov rsi, 0 ;index
  6035                                  .L_lambda_opt_stack_shrink_loop_0c8a:	; start of stack shrink loop
  6036 00004953 4883FE04                	cmp rsi, 4
  6037 00004957 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c8a
  6038 00004959 BF03000000              	mov rdi, 3
  6039 0000495E 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  6040 00004961 4889D9                  	mov rcx, rbx
  6041 00004964 4829F1                  	sub rcx, rsi
  6042 00004967 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  6043 0000496A 4889FA                  	mov rdx, rdi
  6044 0000496D 48C1E203                	shl rdx, 3
  6045 00004971 4801E2                  	add rdx, rsp
  6046 00004974 48C1E103                	shl rcx, 3
  6047 00004978 4801E1                  	add rcx, rsp
  6048 0000497B 488B12                  	mov rdx, [rdx]
  6049 0000497E 488911                  	mov [rcx], rdx
  6050 00004981 48FFC6                  	inc rsi
  6051 00004984 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c8a
  6052                                  .L_lambda_opt_stack_shrink_loop_exit_0c8a:	; end of stack shrink loop
  6053 00004986 4883EB02                	sub rbx, 2 ; rbx has number of args
  6054 0000498A 4883EB02                	sub rbx, 2
  6055 0000498E 48C1E303                	shl rbx, 3
  6056 00004992 4801DC                  	add rsp, rbx
  6057 00004995 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  6058                                  .L_lambda_opt_stack_adjusted_0c8a:
  6059 0000499E C8000000                	enter 0, 0
  6060 000049A2 488B4528                	mov rax, PARAM(1)
  6061 000049A6 50                      	push rax
  6062 000049A7 6A01                    	push 1
  6063 000049A9 488B0425[00000000]      	mov rax, qword [free_var_0]
  6064                                  	assert_closure(rax)
    65 000049B1 803805              <1>  cmp byte [%1], %2
    66 000049B4 0F857AF70000        <1>  jne L_error_incorrect_type
  6065 000049BA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6066 000049BE 53                      	push rbx
  6067 000049BF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6068 000049C3 FFD3                    	call rbx
  6069 000049C5 483D[02000000]          	cmp rax, sob_boolean_false
  6070 000049CB 740D                    	je .L_if_else_5685
  6071 000049CD 488D0425[01000000]      	lea rax, [1 + L_constants]
  6072 000049D5 E988000000              	jmp .L_if_end_5685
  6073                                  	.L_if_else_5685:
  6074 000049DA 488B4528                	mov rax, PARAM(1)
  6075 000049DE 50                      	push rax
  6076 000049DF 488B4520                	mov rax, PARAM(0)
  6077 000049E3 50                      	push rax
  6078 000049E4 6A02                    	push 2
  6079 000049E6 488B4510                	mov rax, qword [rbp + 8*2]
  6080 000049EA 488B00                  	mov rax, qword [rax + 8*0]
  6081 000049ED 488B4008                	mov rax, qword [rax + 8*1]
  6082 000049F1 488B00                  	mov rax, qword [rax]
  6083                                  	assert_closure(rax)
    65 000049F4 803805              <1>  cmp byte [%1], %2
    66 000049F7 0F8537F70000        <1>  jne L_error_incorrect_type
  6084 000049FD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6085 00004A01 53                      	push rbx
  6086 00004A02 FF7508                  	push RET_ADDR
  6087 00004A05 488B7D18                	mov rdi, COUNT
  6088 00004A09 4883C703                	add rdi, 3
  6089 00004A0D 48C1E703                	shl rdi, 3
  6090 00004A11 4801EF                  	add rdi, rbp
  6091 00004A14 488B6D00                	mov rbp, OLD_RDP
  6092 00004A18 BE00000000              	mov rsi, 0
  6093                                  .L_tc_recycle_frame_loop_5cc7:	 ; start recycle frame loop
  6094 00004A1D 4883FE05                	cmp rsi, 5
  6095 00004A21 7427                    	je .L_tc_recycle_frame_done_5cc7
  6096 00004A23 B904000000              	mov rcx, 4
  6097 00004A28 4829F1                  	sub rcx, rsi
  6098 00004A2B 48C1E103                	shl rcx, 3
  6099 00004A2F 4801E1                  	add rcx, rsp ; rcx is the address to move
  6100 00004A32 4889F3                  	mov rbx, rsi
  6101 00004A35 48C1E303                	shl rbx, 3
  6102 00004A39 48F7DB                  	neg rbx
  6103 00004A3C 4801FB                  	add rbx, rdi ;rbx is the address to move to
  6104 00004A3F 488B09                  	mov rcx, [rcx]
  6105 00004A42 48890B                  	mov [rbx], rcx
  6106 00004A45 48FFC6                  	inc rsi
  6107 00004A48 EBD3                    	jmp .L_tc_recycle_frame_loop_5cc7
  6108                                  .L_tc_recycle_frame_done_5cc7:	 ; end recycle frame loop
  6109 00004A4A BB04000000              	mov rbx, 4
  6110 00004A4F 48C1E303                	shl rbx, 3
  6111 00004A53 48F7DB                  	neg rbx
  6112 00004A56 4801FB                  	add rbx, rdi
  6113 00004A59 4889DC                  	mov rsp, rbx
  6114 00004A5C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6115 00004A60 FFE3                    	jmp rbx
  6116                                  	.L_if_end_5685:
  6117 00004A62 C9                      	leave
  6118 00004A63 C22000                  	ret AND_KILL_FRAME(2)
  6119                                  .L_lambda_opt_end_0c8a:	; new closure is in rax
  6120 00004A66 C9                      	leave
  6121 00004A67 C22000                  	ret 8 * (2 + 2)
  6122                                  .L_lambda_simple_end_4f50:	; new closure is in rax
  6123                                  	assert_closure(rax)
    65 00004A6A 803805              <1>  cmp byte [%1], %2
    66 00004A6D 0F85C1F60000        <1>  jne L_error_incorrect_type
  6124 00004A73 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6125 00004A77 53                      	push rbx
  6126 00004A78 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6127 00004A7C FFD3                    	call rbx
  6128 00004A7E 48890425[D8020000]      	mov qword [free_var_91], rax
  6129 00004A86 48B8-                   	mov rax, sob_void
  6129 00004A88 [0000000000000000] 
  6130                                  
  6131 00004A90 4889C7                  	mov rdi, rax
  6132 00004A93 E82DDE0000              	call print_sexpr_if_not_void
  6133                                  
  6134 00004A98 488D0425[17000000]      	lea rax, [23 + L_constants]
  6135 00004AA0 50                      	push rax
  6136 00004AA1 6A01                    	push 1
  6137 00004AA3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6138 00004AA8 E807DE0000              	call malloc
  6139 00004AAD 50                      	push rax
  6140 00004AAE BF00000000              	mov rdi, 8 * 0	; new rib
  6141 00004AB3 E8FCDD0000              	call malloc
  6142 00004AB8 50                      	push rax
  6143 00004AB9 BF08000000              	mov rdi, 8 * 1	; extended env
  6144 00004ABE E8F1DD0000              	call malloc
  6145 00004AC3 488B7D10                	mov rdi, ENV
  6146 00004AC7 BE00000000              	mov rsi, 0
  6147 00004ACC BA01000000              	mov rdx, 1
  6148                                  .L_lambda_simple_env_loop_4f53:	; ext_env[i + 1] <-- env[i]
  6149 00004AD1 4883FE00                	cmp rsi, 0
  6150 00004AD5 7410                    	je .L_lambda_simple_env_end_4f53
  6151 00004AD7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  6152 00004ADB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6153 00004ADF 48FFC6                  	inc rsi
  6154 00004AE2 48FFC2                  	inc rdx
  6155 00004AE5 EBEA                    	jmp .L_lambda_simple_env_loop_4f53
  6156                                  .L_lambda_simple_env_end_4f53:
  6157 00004AE7 5B                      	pop rbx
  6158 00004AE8 BE00000000              	mov rsi, 0
  6159                                  .L_lambda_simple_params_loop_4f53:	; copy params
  6160 00004AED 4883FE00                	cmp rsi, 0
  6161 00004AF1 740E                    	je .L_lambda_simple_params_end_4f53
  6162 00004AF3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6163 00004AF8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6164 00004AFC 48FFC6                  	inc rsi
  6165 00004AFF EBEC                    	jmp .L_lambda_simple_params_loop_4f53
  6166                                  .L_lambda_simple_params_end_4f53:
  6167 00004B01 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6168 00004B04 4889C3                  	mov rbx, rax
  6169 00004B07 58                      	pop rax
  6170 00004B08 C60005                  	mov byte [rax], T_closure
  6171 00004B0B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6172 00004B0F 48C74009[1C4B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f53
  6173 00004B17 E914030000              	jmp .L_lambda_simple_end_4f53
  6174                                  .L_lambda_simple_code_4f53:	; lambda-simple body
  6175 00004B1C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6176 00004B22 740B                    	je .L_lambda_simple_arity_check_ok_4f53
  6177 00004B24 FF742410                	push qword [rsp + 8 * 2]
  6178 00004B28 6A01                    	push 1
  6179 00004B2A E93EDD0000              	jmp L_error_incorrect_arity_simple
  6180                                  .L_lambda_simple_arity_check_ok_4f53:
  6181 00004B2F C8000000                	enter 0, 0
  6182 00004B33 BF11000000              	mov qword rdi, (1 + 8 + 8)
  6183 00004B38 E877DD0000              	call malloc
  6184 00004B3D 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  6185 00004B41 48B8-                   	mov rax, sob_void
  6185 00004B43 [0000000000000000] 
  6186                                  
  6187 00004B4B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6188 00004B50 E85FDD0000              	call malloc
  6189 00004B55 50                      	push rax
  6190 00004B56 BF08000000              	mov rdi, 8 * 1	; new rib
  6191 00004B5B E854DD0000              	call malloc
  6192 00004B60 50                      	push rax
  6193 00004B61 BF10000000              	mov rdi, 8 * 2	; extended env
  6194 00004B66 E849DD0000              	call malloc
  6195 00004B6B 488B7D10                	mov rdi, ENV
  6196 00004B6F BE00000000              	mov rsi, 0
  6197 00004B74 BA01000000              	mov rdx, 1
  6198                                  .L_lambda_simple_env_loop_4f54:	; ext_env[i + 1] <-- env[i]
  6199 00004B79 4883FE01                	cmp rsi, 1
  6200 00004B7D 7410                    	je .L_lambda_simple_env_end_4f54
  6201 00004B7F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  6202 00004B83 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6203 00004B87 48FFC6                  	inc rsi
  6204 00004B8A 48FFC2                  	inc rdx
  6205 00004B8D EBEA                    	jmp .L_lambda_simple_env_loop_4f54
  6206                                  .L_lambda_simple_env_end_4f54:
  6207 00004B8F 5B                      	pop rbx
  6208 00004B90 BE00000000              	mov rsi, 0
  6209                                  .L_lambda_simple_params_loop_4f54:	; copy params
  6210 00004B95 4883FE01                	cmp rsi, 1
  6211 00004B99 740E                    	je .L_lambda_simple_params_end_4f54
  6212 00004B9B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6213 00004BA0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6214 00004BA4 48FFC6                  	inc rsi
  6215 00004BA7 EBEC                    	jmp .L_lambda_simple_params_loop_4f54
  6216                                  .L_lambda_simple_params_end_4f54:
  6217 00004BA9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6218 00004BAC 4889C3                  	mov rbx, rax
  6219 00004BAF 58                      	pop rax
  6220 00004BB0 C60005                  	mov byte [rax], T_closure
  6221 00004BB3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6222 00004BB7 48C74009[C44B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f54
  6223 00004BBF E938010000              	jmp .L_lambda_simple_end_4f54
  6224                                  .L_lambda_simple_code_4f54:	; lambda-simple body
  6225 00004BC4 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6226 00004BCA 740B                    	je .L_lambda_simple_arity_check_ok_4f54
  6227 00004BCC FF742410                	push qword [rsp + 8 * 2]
  6228 00004BD0 6A02                    	push 2
  6229 00004BD2 E996DC0000              	jmp L_error_incorrect_arity_simple
  6230                                  .L_lambda_simple_arity_check_ok_4f54:
  6231 00004BD7 C8000000                	enter 0, 0
  6232 00004BDB 488B4520                	mov rax, PARAM(0)
  6233 00004BDF 50                      	push rax
  6234 00004BE0 6A01                    	push 1
  6235 00004BE2 488B0425[00000000]      	mov rax, qword [free_var_0]
  6236                                  	assert_closure(rax)
    65 00004BEA 803805              <1>  cmp byte [%1], %2
    66 00004BED 0F8541F50000        <1>  jne L_error_incorrect_type
  6237 00004BF3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6238 00004BF7 53                      	push rbx
  6239 00004BF8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6240 00004BFC FFD3                    	call rbx
  6241 00004BFE 483D[02000000]          	cmp rax, sob_boolean_false
  6242 00004C04 7409                    	je .L_if_else_5686
  6243 00004C06 488B4528                	mov rax, PARAM(1)
  6244 00004C0A E9E9000000              	jmp .L_if_end_5686
  6245                                  	.L_if_else_5686:
  6246 00004C0F 488B4528                	mov rax, PARAM(1)
  6247 00004C13 50                      	push rax
  6248 00004C14 488B4520                	mov rax, PARAM(0)
  6249 00004C18 50                      	push rax
  6250 00004C19 6A01                    	push 1
  6251 00004C1B 488B0425[80000000]      	mov rax, qword [free_var_16]
  6252                                  	assert_closure(rax)
    65 00004C23 803805              <1>  cmp byte [%1], %2
    66 00004C26 0F8508F50000        <1>  jne L_error_incorrect_type
  6253 00004C2C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6254 00004C30 53                      	push rbx
  6255 00004C31 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6256 00004C35 FFD3                    	call rbx
  6257 00004C37 50                      	push rax
  6258 00004C38 6A02                    	push 2
  6259 00004C3A 488B0425[68000000]      	mov rax, qword [free_var_13]
  6260                                  	assert_closure(rax)
    65 00004C42 803805              <1>  cmp byte [%1], %2
    66 00004C45 0F85E9F40000        <1>  jne L_error_incorrect_type
  6261 00004C4B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6262 00004C4F 53                      	push rbx
  6263 00004C50 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6264 00004C54 FFD3                    	call rbx
  6265 00004C56 50                      	push rax
  6266 00004C57 488B4520                	mov rax, PARAM(0)
  6267 00004C5B 50                      	push rax
  6268 00004C5C 6A01                    	push 1
  6269 00004C5E 488B0425[88000000]      	mov rax, qword [free_var_17]
  6270                                  	assert_closure(rax)
    65 00004C66 803805              <1>  cmp byte [%1], %2
    66 00004C69 0F85C5F40000        <1>  jne L_error_incorrect_type
  6271 00004C6F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6272 00004C73 53                      	push rbx
  6273 00004C74 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6274 00004C78 FFD3                    	call rbx
  6275 00004C7A 50                      	push rax
  6276 00004C7B 6A02                    	push 2
  6277 00004C7D 488B4510                	mov rax, qword [rbp + 8*2]
  6278 00004C81 488B00                  	mov rax, qword [rax + 8*0]
  6279 00004C84 488B00                  	mov rax, qword [rax + 8*0]
  6280 00004C87 488B00                  	mov rax, qword [rax]
  6281                                  	assert_closure(rax)
    65 00004C8A 803805              <1>  cmp byte [%1], %2
    66 00004C8D 0F85A1F40000        <1>  jne L_error_incorrect_type
  6282 00004C93 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6283 00004C97 53                      	push rbx
  6284 00004C98 FF7508                  	push RET_ADDR
  6285 00004C9B 488B7D18                	mov rdi, COUNT
  6286 00004C9F 4883C703                	add rdi, 3
  6287 00004CA3 48C1E703                	shl rdi, 3
  6288 00004CA7 4801EF                  	add rdi, rbp
  6289 00004CAA 488B6D00                	mov rbp, OLD_RDP
  6290 00004CAE BE00000000              	mov rsi, 0
  6291                                  .L_tc_recycle_frame_loop_5cc8:	 ; start recycle frame loop
  6292 00004CB3 4883FE05                	cmp rsi, 5
  6293 00004CB7 7427                    	je .L_tc_recycle_frame_done_5cc8
  6294 00004CB9 B904000000              	mov rcx, 4
  6295 00004CBE 4829F1                  	sub rcx, rsi
  6296 00004CC1 48C1E103                	shl rcx, 3
  6297 00004CC5 4801E1                  	add rcx, rsp ; rcx is the address to move
  6298 00004CC8 4889F3                  	mov rbx, rsi
  6299 00004CCB 48C1E303                	shl rbx, 3
  6300 00004CCF 48F7DB                  	neg rbx
  6301 00004CD2 4801FB                  	add rbx, rdi ;rbx is the address to move to
  6302 00004CD5 488B09                  	mov rcx, [rcx]
  6303 00004CD8 48890B                  	mov [rbx], rcx
  6304 00004CDB 48FFC6                  	inc rsi
  6305 00004CDE EBD3                    	jmp .L_tc_recycle_frame_loop_5cc8
  6306                                  .L_tc_recycle_frame_done_5cc8:	 ; end recycle frame loop
  6307 00004CE0 BB04000000              	mov rbx, 4
  6308 00004CE5 48C1E303                	shl rbx, 3
  6309 00004CE9 48F7DB                  	neg rbx
  6310 00004CEC 4801FB                  	add rbx, rdi
  6311 00004CEF 4889DC                  	mov rsp, rbx
  6312 00004CF2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6313 00004CF6 FFE3                    	jmp rbx
  6314                                  	.L_if_end_5686:
  6315 00004CF8 C9                      	leave
  6316 00004CF9 C22000                  	ret 8 * (2 + 2)
  6317                                  .L_lambda_simple_end_4f54:	; new closure is in rax
  6318 00004CFC 50                      	push rax
  6319 00004CFD 488B4520                	mov rax, PARAM(0)
  6320 00004D01 8F00                    	pop qword [rax]
  6321 00004D03 48B8-                   	mov rax, sob_void
  6321 00004D05 [0000000000000000] 
  6322                                  
  6323 00004D0D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6324 00004D12 E89DDB0000              	call malloc
  6325 00004D17 50                      	push rax
  6326 00004D18 BF08000000              	mov rdi, 8 * 1	; new rib
  6327 00004D1D E892DB0000              	call malloc
  6328 00004D22 50                      	push rax
  6329 00004D23 BF10000000              	mov rdi, 8 * 2	; extended env
  6330 00004D28 E887DB0000              	call malloc
  6331 00004D2D 488B7D10                	mov rdi, ENV
  6332 00004D31 BE00000000              	mov rsi, 0
  6333 00004D36 BA01000000              	mov rdx, 1
  6334                                  .L_lambda_simple_env_loop_4f55:	; ext_env[i + 1] <-- env[i]
  6335 00004D3B 4883FE01                	cmp rsi, 1
  6336 00004D3F 7410                    	je .L_lambda_simple_env_end_4f55
  6337 00004D41 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  6338 00004D45 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6339 00004D49 48FFC6                  	inc rsi
  6340 00004D4C 48FFC2                  	inc rdx
  6341 00004D4F EBEA                    	jmp .L_lambda_simple_env_loop_4f55
  6342                                  .L_lambda_simple_env_end_4f55:
  6343 00004D51 5B                      	pop rbx
  6344 00004D52 BE00000000              	mov rsi, 0
  6345                                  .L_lambda_simple_params_loop_4f55:	; copy params
  6346 00004D57 4883FE01                	cmp rsi, 1
  6347 00004D5B 740E                    	je .L_lambda_simple_params_end_4f55
  6348 00004D5D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6349 00004D62 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6350 00004D66 48FFC6                  	inc rsi
  6351 00004D69 EBEC                    	jmp .L_lambda_simple_params_loop_4f55
  6352                                  .L_lambda_simple_params_end_4f55:
  6353 00004D6B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6354 00004D6E 4889C3                  	mov rbx, rax
  6355 00004D71 58                      	pop rax
  6356 00004D72 C60005                  	mov byte [rax], T_closure
  6357 00004D75 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6358 00004D79 48C74009[864D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f55
  6359 00004D81 E9A6000000              	jmp .L_lambda_simple_end_4f55
  6360                                  .L_lambda_simple_code_4f55:	; lambda-simple body
  6361 00004D86 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6362 00004D8C 740B                    	je .L_lambda_simple_arity_check_ok_4f55
  6363 00004D8E FF742410                	push qword [rsp + 8 * 2]
  6364 00004D92 6A01                    	push 1
  6365 00004D94 E9D4DA0000              	jmp L_error_incorrect_arity_simple
  6366                                  .L_lambda_simple_arity_check_ok_4f55:
  6367 00004D99 C8000000                	enter 0, 0
  6368 00004D9D 488D0425[01000000]      	lea rax, [1 + L_constants]
  6369 00004DA5 50                      	push rax
  6370 00004DA6 488B4520                	mov rax, PARAM(0)
  6371 00004DAA 50                      	push rax
  6372 00004DAB 6A02                    	push 2
  6373 00004DAD 488B4510                	mov rax, qword [rbp + 8*2]
  6374 00004DB1 488B00                  	mov rax, qword [rax + 8*0]
  6375 00004DB4 488B00                  	mov rax, qword [rax + 8*0]
  6376 00004DB7 488B00                  	mov rax, qword [rax]
  6377                                  	assert_closure(rax)
    65 00004DBA 803805              <1>  cmp byte [%1], %2
    66 00004DBD 0F8571F30000        <1>  jne L_error_incorrect_type
  6378 00004DC3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6379 00004DC7 53                      	push rbx
  6380 00004DC8 FF7508                  	push RET_ADDR
  6381 00004DCB 488B7D18                	mov rdi, COUNT
  6382 00004DCF 4883C703                	add rdi, 3
  6383 00004DD3 48C1E703                	shl rdi, 3
  6384 00004DD7 4801EF                  	add rdi, rbp
  6385 00004DDA 488B6D00                	mov rbp, OLD_RDP
  6386 00004DDE BE00000000              	mov rsi, 0
  6387                                  .L_tc_recycle_frame_loop_5cc9:	 ; start recycle frame loop
  6388 00004DE3 4883FE05                	cmp rsi, 5
  6389 00004DE7 7427                    	je .L_tc_recycle_frame_done_5cc9
  6390 00004DE9 B904000000              	mov rcx, 4
  6391 00004DEE 4829F1                  	sub rcx, rsi
  6392 00004DF1 48C1E103                	shl rcx, 3
  6393 00004DF5 4801E1                  	add rcx, rsp ; rcx is the address to move
  6394 00004DF8 4889F3                  	mov rbx, rsi
  6395 00004DFB 48C1E303                	shl rbx, 3
  6396 00004DFF 48F7DB                  	neg rbx
  6397 00004E02 4801FB                  	add rbx, rdi ;rbx is the address to move to
  6398 00004E05 488B09                  	mov rcx, [rcx]
  6399 00004E08 48890B                  	mov [rbx], rcx
  6400 00004E0B 48FFC6                  	inc rsi
  6401 00004E0E EBD3                    	jmp .L_tc_recycle_frame_loop_5cc9
  6402                                  .L_tc_recycle_frame_done_5cc9:	 ; end recycle frame loop
  6403 00004E10 BB04000000              	mov rbx, 4
  6404 00004E15 48C1E303                	shl rbx, 3
  6405 00004E19 48F7DB                  	neg rbx
  6406 00004E1C 4801FB                  	add rbx, rdi
  6407 00004E1F 4889DC                  	mov rsp, rbx
  6408 00004E22 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6409 00004E26 FFE3                    	jmp rbx
  6410 00004E28 C9                      	leave
  6411 00004E29 C21800                  	ret 8 * (2 + 1)
  6412                                  .L_lambda_simple_end_4f55:	; new closure is in rax
  6413 00004E2C C9                      	leave
  6414 00004E2D C21800                  	ret 8 * (2 + 1)
  6415                                  .L_lambda_simple_end_4f53:	; new closure is in rax
  6416                                  	assert_closure(rax)
    65 00004E30 803805              <1>  cmp byte [%1], %2
    66 00004E33 0F85FBF20000        <1>  jne L_error_incorrect_type
  6417 00004E39 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6418 00004E3D 53                      	push rbx
  6419 00004E3E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6420 00004E42 FFD3                    	call rbx
  6421 00004E44 48890425[E8020000]      	mov qword [free_var_93], rax
  6422 00004E4C 48B8-                   	mov rax, sob_void
  6422 00004E4E [0000000000000000] 
  6423                                  
  6424 00004E56 4889C7                  	mov rdi, rax
  6425 00004E59 E867DA0000              	call print_sexpr_if_not_void
  6426                                  
  6427 00004E5E 488D0425[17000000]      	lea rax, [23 + L_constants]
  6428 00004E66 50                      	push rax
  6429 00004E67 488D0425[17000000]      	lea rax, [23 + L_constants]
  6430 00004E6F 50                      	push rax
  6431 00004E70 6A02                    	push 2
  6432 00004E72 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6433 00004E77 E838DA0000              	call malloc
  6434 00004E7C 50                      	push rax
  6435 00004E7D BF00000000              	mov rdi, 8 * 0	; new rib
  6436 00004E82 E82DDA0000              	call malloc
  6437 00004E87 50                      	push rax
  6438 00004E88 BF08000000              	mov rdi, 8 * 1	; extended env
  6439 00004E8D E822DA0000              	call malloc
  6440 00004E92 488B7D10                	mov rdi, ENV
  6441 00004E96 BE00000000              	mov rsi, 0
  6442 00004E9B BA01000000              	mov rdx, 1
  6443                                  .L_lambda_simple_env_loop_4f56:	; ext_env[i + 1] <-- env[i]
  6444 00004EA0 4883FE00                	cmp rsi, 0
  6445 00004EA4 7410                    	je .L_lambda_simple_env_end_4f56
  6446 00004EA6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  6447 00004EAA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6448 00004EAE 48FFC6                  	inc rsi
  6449 00004EB1 48FFC2                  	inc rdx
  6450 00004EB4 EBEA                    	jmp .L_lambda_simple_env_loop_4f56
  6451                                  .L_lambda_simple_env_end_4f56:
  6452 00004EB6 5B                      	pop rbx
  6453 00004EB7 BE00000000              	mov rsi, 0
  6454                                  .L_lambda_simple_params_loop_4f56:	; copy params
  6455 00004EBC 4883FE00                	cmp rsi, 0
  6456 00004EC0 740E                    	je .L_lambda_simple_params_end_4f56
  6457 00004EC2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6458 00004EC7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6459 00004ECB 48FFC6                  	inc rsi
  6460 00004ECE EBEC                    	jmp .L_lambda_simple_params_loop_4f56
  6461                                  .L_lambda_simple_params_end_4f56:
  6462 00004ED0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6463 00004ED3 4889C3                  	mov rbx, rax
  6464 00004ED6 58                      	pop rax
  6465 00004ED7 C60005                  	mov byte [rax], T_closure
  6466 00004EDA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6467 00004EDE 48C74009[EB4E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f56
  6468 00004EE6 E949060000              	jmp .L_lambda_simple_end_4f56
  6469                                  .L_lambda_simple_code_4f56:	; lambda-simple body
  6470 00004EEB 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6471 00004EF1 740B                    	je .L_lambda_simple_arity_check_ok_4f56
  6472 00004EF3 FF742410                	push qword [rsp + 8 * 2]
  6473 00004EF7 6A02                    	push 2
  6474 00004EF9 E96FD90000              	jmp L_error_incorrect_arity_simple
  6475                                  .L_lambda_simple_arity_check_ok_4f56:
  6476 00004EFE C8000000                	enter 0, 0
  6477 00004F02 BF11000000              	mov qword rdi, (1 + 8 + 8)
  6478 00004F07 E8A8D90000              	call malloc
  6479 00004F0C 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  6480 00004F10 48B8-                   	mov rax, sob_void
  6480 00004F12 [0000000000000000] 
  6481                                  
  6482 00004F1A BF11000000              	mov qword rdi, (1 + 8 + 8)
  6483 00004F1F E890D90000              	call malloc
  6484 00004F24 48894528                	mov qword [rbp + 8*(4 + 1)], rax
  6485 00004F28 48B8-                   	mov rax, sob_void
  6485 00004F2A [0000000000000000] 
  6486                                  
  6487 00004F32 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6488 00004F37 E878D90000              	call malloc
  6489 00004F3C 50                      	push rax
  6490 00004F3D BF10000000              	mov rdi, 8 * 2	; new rib
  6491 00004F42 E86DD90000              	call malloc
  6492 00004F47 50                      	push rax
  6493 00004F48 BF10000000              	mov rdi, 8 * 2	; extended env
  6494 00004F4D E862D90000              	call malloc
  6495 00004F52 488B7D10                	mov rdi, ENV
  6496 00004F56 BE00000000              	mov rsi, 0
  6497 00004F5B BA01000000              	mov rdx, 1
  6498                                  .L_lambda_simple_env_loop_4f57:	; ext_env[i + 1] <-- env[i]
  6499 00004F60 4883FE01                	cmp rsi, 1
  6500 00004F64 7410                    	je .L_lambda_simple_env_end_4f57
  6501 00004F66 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  6502 00004F6A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6503 00004F6E 48FFC6                  	inc rsi
  6504 00004F71 48FFC2                  	inc rdx
  6505 00004F74 EBEA                    	jmp .L_lambda_simple_env_loop_4f57
  6506                                  .L_lambda_simple_env_end_4f57:
  6507 00004F76 5B                      	pop rbx
  6508 00004F77 BE00000000              	mov rsi, 0
  6509                                  .L_lambda_simple_params_loop_4f57:	; copy params
  6510 00004F7C 4883FE02                	cmp rsi, 2
  6511 00004F80 740E                    	je .L_lambda_simple_params_end_4f57
  6512 00004F82 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6513 00004F87 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6514 00004F8B 48FFC6                  	inc rsi
  6515 00004F8E EBEC                    	jmp .L_lambda_simple_params_loop_4f57
  6516                                  .L_lambda_simple_params_end_4f57:
  6517 00004F90 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6518 00004F93 4889C3                  	mov rbx, rax
  6519 00004F96 58                      	pop rax
  6520 00004F97 C60005                  	mov byte [rax], T_closure
  6521 00004F9A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6522 00004F9E 48C74009[AB4F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f57
  6523 00004FA6 E93E010000              	jmp .L_lambda_simple_end_4f57
  6524                                  .L_lambda_simple_code_4f57:	; lambda-simple body
  6525 00004FAB 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6526 00004FB1 740B                    	je .L_lambda_simple_arity_check_ok_4f57
  6527 00004FB3 FF742410                	push qword [rsp + 8 * 2]
  6528 00004FB7 6A02                    	push 2
  6529 00004FB9 E9AFD80000              	jmp L_error_incorrect_arity_simple
  6530                                  .L_lambda_simple_arity_check_ok_4f57:
  6531 00004FBE C8000000                	enter 0, 0
  6532 00004FC2 488B4528                	mov rax, PARAM(1)
  6533 00004FC6 50                      	push rax
  6534 00004FC7 6A01                    	push 1
  6535 00004FC9 488B0425[00000000]      	mov rax, qword [free_var_0]
  6536                                  	assert_closure(rax)
    65 00004FD1 803805              <1>  cmp byte [%1], %2
    66 00004FD4 0F855AF10000        <1>  jne L_error_incorrect_type
  6537 00004FDA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6538 00004FDE 53                      	push rbx
  6539 00004FDF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6540 00004FE3 FFD3                    	call rbx
  6541 00004FE5 483D[02000000]          	cmp rax, sob_boolean_false
  6542 00004FEB 7409                    	je .L_if_else_5687
  6543 00004FED 488B4520                	mov rax, PARAM(0)
  6544 00004FF1 E9EF000000              	jmp .L_if_end_5687
  6545                                  	.L_if_else_5687:
  6546 00004FF6 488B4528                	mov rax, PARAM(1)
  6547 00004FFA 50                      	push rax
  6548 00004FFB 6A01                    	push 1
  6549 00004FFD 488B0425[88000000]      	mov rax, qword [free_var_17]
  6550                                  	assert_closure(rax)
    65 00005005 803805              <1>  cmp byte [%1], %2
    66 00005008 0F8526F10000        <1>  jne L_error_incorrect_type
  6551 0000500E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6552 00005012 53                      	push rbx
  6553 00005013 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6554 00005017 FFD3                    	call rbx
  6555 00005019 50                      	push rax
  6556 0000501A 488B4528                	mov rax, PARAM(1)
  6557 0000501E 50                      	push rax
  6558 0000501F 6A01                    	push 1
  6559 00005021 488B0425[80000000]      	mov rax, qword [free_var_16]
  6560                                  	assert_closure(rax)
    65 00005029 803805              <1>  cmp byte [%1], %2
    66 0000502C 0F8502F10000        <1>  jne L_error_incorrect_type
  6561 00005032 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6562 00005036 53                      	push rbx
  6563 00005037 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6564 0000503B FFD3                    	call rbx
  6565 0000503D 50                      	push rax
  6566 0000503E 6A02                    	push 2
  6567 00005040 488B4510                	mov rax, qword [rbp + 8*2]
  6568 00005044 488B00                  	mov rax, qword [rax + 8*0]
  6569 00005047 488B00                  	mov rax, qword [rax + 8*0]
  6570 0000504A 488B00                  	mov rax, qword [rax]
  6571                                  	assert_closure(rax)
    65 0000504D 803805              <1>  cmp byte [%1], %2
    66 00005050 0F85DEF00000        <1>  jne L_error_incorrect_type
  6572 00005056 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6573 0000505A 53                      	push rbx
  6574 0000505B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6575 0000505F FFD3                    	call rbx
  6576 00005061 50                      	push rax
  6577 00005062 488B4520                	mov rax, PARAM(0)
  6578 00005066 50                      	push rax
  6579 00005067 6A02                    	push 2
  6580 00005069 488B4510                	mov rax, qword [rbp + 8*2]
  6581 0000506D 488B00                  	mov rax, qword [rax + 8*0]
  6582 00005070 488B4008                	mov rax, qword [rax + 8*1]
  6583 00005074 488B00                  	mov rax, qword [rax]
  6584                                  	assert_closure(rax)
    65 00005077 803805              <1>  cmp byte [%1], %2
    66 0000507A 0F85B4F00000        <1>  jne L_error_incorrect_type
  6585 00005080 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6586 00005084 53                      	push rbx
  6587 00005085 FF7508                  	push RET_ADDR
  6588 00005088 488B7D18                	mov rdi, COUNT
  6589 0000508C 4883C703                	add rdi, 3
  6590 00005090 48C1E703                	shl rdi, 3
  6591 00005094 4801EF                  	add rdi, rbp
  6592 00005097 488B6D00                	mov rbp, OLD_RDP
  6593 0000509B BE00000000              	mov rsi, 0
  6594                                  .L_tc_recycle_frame_loop_5cca:	 ; start recycle frame loop
  6595 000050A0 4883FE05                	cmp rsi, 5
  6596 000050A4 7427                    	je .L_tc_recycle_frame_done_5cca
  6597 000050A6 B904000000              	mov rcx, 4
  6598 000050AB 4829F1                  	sub rcx, rsi
  6599 000050AE 48C1E103                	shl rcx, 3
  6600 000050B2 4801E1                  	add rcx, rsp ; rcx is the address to move
  6601 000050B5 4889F3                  	mov rbx, rsi
  6602 000050B8 48C1E303                	shl rbx, 3
  6603 000050BC 48F7DB                  	neg rbx
  6604 000050BF 4801FB                  	add rbx, rdi ;rbx is the address to move to
  6605 000050C2 488B09                  	mov rcx, [rcx]
  6606 000050C5 48890B                  	mov [rbx], rcx
  6607 000050C8 48FFC6                  	inc rsi
  6608 000050CB EBD3                    	jmp .L_tc_recycle_frame_loop_5cca
  6609                                  .L_tc_recycle_frame_done_5cca:	 ; end recycle frame loop
  6610 000050CD BB04000000              	mov rbx, 4
  6611 000050D2 48C1E303                	shl rbx, 3
  6612 000050D6 48F7DB                  	neg rbx
  6613 000050D9 4801FB                  	add rbx, rdi
  6614 000050DC 4889DC                  	mov rsp, rbx
  6615 000050DF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6616 000050E3 FFE3                    	jmp rbx
  6617                                  	.L_if_end_5687:
  6618 000050E5 C9                      	leave
  6619 000050E6 C22000                  	ret 8 * (2 + 2)
  6620                                  .L_lambda_simple_end_4f57:	; new closure is in rax
  6621 000050E9 50                      	push rax
  6622 000050EA 488B4520                	mov rax, PARAM(0)
  6623 000050EE 8F00                    	pop qword [rax]
  6624 000050F0 48B8-                   	mov rax, sob_void
  6624 000050F2 [0000000000000000] 
  6625                                  
  6626 000050FA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6627 000050FF E8B0D70000              	call malloc
  6628 00005104 50                      	push rax
  6629 00005105 BF10000000              	mov rdi, 8 * 2	; new rib
  6630 0000510A E8A5D70000              	call malloc
  6631 0000510F 50                      	push rax
  6632 00005110 BF10000000              	mov rdi, 8 * 2	; extended env
  6633 00005115 E89AD70000              	call malloc
  6634 0000511A 488B7D10                	mov rdi, ENV
  6635 0000511E BE00000000              	mov rsi, 0
  6636 00005123 BA01000000              	mov rdx, 1
  6637                                  .L_lambda_simple_env_loop_4f58:	; ext_env[i + 1] <-- env[i]
  6638 00005128 4883FE01                	cmp rsi, 1
  6639 0000512C 7410                    	je .L_lambda_simple_env_end_4f58
  6640 0000512E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  6641 00005132 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6642 00005136 48FFC6                  	inc rsi
  6643 00005139 48FFC2                  	inc rdx
  6644 0000513C EBEA                    	jmp .L_lambda_simple_env_loop_4f58
  6645                                  .L_lambda_simple_env_end_4f58:
  6646 0000513E 5B                      	pop rbx
  6647 0000513F BE00000000              	mov rsi, 0
  6648                                  .L_lambda_simple_params_loop_4f58:	; copy params
  6649 00005144 4883FE02                	cmp rsi, 2
  6650 00005148 740E                    	je .L_lambda_simple_params_end_4f58
  6651 0000514A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6652 0000514F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6653 00005153 48FFC6                  	inc rsi
  6654 00005156 EBEC                    	jmp .L_lambda_simple_params_loop_4f58
  6655                                  .L_lambda_simple_params_end_4f58:
  6656 00005158 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6657 0000515B 4889C3                  	mov rbx, rax
  6658 0000515E 58                      	pop rax
  6659 0000515F C60005                  	mov byte [rax], T_closure
  6660 00005162 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6661 00005166 48C74009[73510000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f58
  6662 0000516E E939010000              	jmp .L_lambda_simple_end_4f58
  6663                                  .L_lambda_simple_code_4f58:	; lambda-simple body
  6664 00005173 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6665 00005179 740B                    	je .L_lambda_simple_arity_check_ok_4f58
  6666 0000517B FF742410                	push qword [rsp + 8 * 2]
  6667 0000517F 6A02                    	push 2
  6668 00005181 E9E7D60000              	jmp L_error_incorrect_arity_simple
  6669                                  .L_lambda_simple_arity_check_ok_4f58:
  6670 00005186 C8000000                	enter 0, 0
  6671 0000518A 488B4520                	mov rax, PARAM(0)
  6672 0000518E 50                      	push rax
  6673 0000518F 6A01                    	push 1
  6674 00005191 488B0425[00000000]      	mov rax, qword [free_var_0]
  6675                                  	assert_closure(rax)
    65 00005199 803805              <1>  cmp byte [%1], %2
    66 0000519C 0F8592EF0000        <1>  jne L_error_incorrect_type
  6676 000051A2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6677 000051A6 53                      	push rbx
  6678 000051A7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6679 000051AB FFD3                    	call rbx
  6680 000051AD 483D[02000000]          	cmp rax, sob_boolean_false
  6681 000051B3 7409                    	je .L_if_else_5688
  6682 000051B5 488B4528                	mov rax, PARAM(1)
  6683 000051B9 E9EA000000              	jmp .L_if_end_5688
  6684                                  	.L_if_else_5688:
  6685 000051BE 488B4528                	mov rax, PARAM(1)
  6686 000051C2 50                      	push rax
  6687 000051C3 488B4520                	mov rax, PARAM(0)
  6688 000051C7 50                      	push rax
  6689 000051C8 6A01                    	push 1
  6690 000051CA 488B0425[88000000]      	mov rax, qword [free_var_17]
  6691                                  	assert_closure(rax)
    65 000051D2 803805              <1>  cmp byte [%1], %2
    66 000051D5 0F8559EF0000        <1>  jne L_error_incorrect_type
  6692 000051DB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6693 000051DF 53                      	push rbx
  6694 000051E0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6695 000051E4 FFD3                    	call rbx
  6696 000051E6 50                      	push rax
  6697 000051E7 6A02                    	push 2
  6698 000051E9 488B4510                	mov rax, qword [rbp + 8*2]
  6699 000051ED 488B00                  	mov rax, qword [rax + 8*0]
  6700 000051F0 488B4008                	mov rax, qword [rax + 8*1]
  6701 000051F4 488B00                  	mov rax, qword [rax]
  6702                                  	assert_closure(rax)
    65 000051F7 803805              <1>  cmp byte [%1], %2
    66 000051FA 0F8534EF0000        <1>  jne L_error_incorrect_type
  6703 00005200 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6704 00005204 53                      	push rbx
  6705 00005205 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6706 00005209 FFD3                    	call rbx
  6707 0000520B 50                      	push rax
  6708 0000520C 488B4520                	mov rax, PARAM(0)
  6709 00005210 50                      	push rax
  6710 00005211 6A01                    	push 1
  6711 00005213 488B0425[80000000]      	mov rax, qword [free_var_16]
  6712                                  	assert_closure(rax)
    65 0000521B 803805              <1>  cmp byte [%1], %2
    66 0000521E 0F8510EF0000        <1>  jne L_error_incorrect_type
  6713 00005224 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6714 00005228 53                      	push rbx
  6715 00005229 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6716 0000522D FFD3                    	call rbx
  6717 0000522F 50                      	push rax
  6718 00005230 6A02                    	push 2
  6719 00005232 488B0425[68000000]      	mov rax, qword [free_var_13]
  6720                                  	assert_closure(rax)
    65 0000523A 803805              <1>  cmp byte [%1], %2
    66 0000523D 0F85F1EE0000        <1>  jne L_error_incorrect_type
  6721 00005243 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6722 00005247 53                      	push rbx
  6723 00005248 FF7508                  	push RET_ADDR
  6724 0000524B 488B7D18                	mov rdi, COUNT
  6725 0000524F 4883C703                	add rdi, 3
  6726 00005253 48C1E703                	shl rdi, 3
  6727 00005257 4801EF                  	add rdi, rbp
  6728 0000525A 488B6D00                	mov rbp, OLD_RDP
  6729 0000525E BE00000000              	mov rsi, 0
  6730                                  .L_tc_recycle_frame_loop_5ccb:	 ; start recycle frame loop
  6731 00005263 4883FE05                	cmp rsi, 5
  6732 00005267 7427                    	je .L_tc_recycle_frame_done_5ccb
  6733 00005269 B904000000              	mov rcx, 4
  6734 0000526E 4829F1                  	sub rcx, rsi
  6735 00005271 48C1E103                	shl rcx, 3
  6736 00005275 4801E1                  	add rcx, rsp ; rcx is the address to move
  6737 00005278 4889F3                  	mov rbx, rsi
  6738 0000527B 48C1E303                	shl rbx, 3
  6739 0000527F 48F7DB                  	neg rbx
  6740 00005282 4801FB                  	add rbx, rdi ;rbx is the address to move to
  6741 00005285 488B09                  	mov rcx, [rcx]
  6742 00005288 48890B                  	mov [rbx], rcx
  6743 0000528B 48FFC6                  	inc rsi
  6744 0000528E EBD3                    	jmp .L_tc_recycle_frame_loop_5ccb
  6745                                  .L_tc_recycle_frame_done_5ccb:	 ; end recycle frame loop
  6746 00005290 BB04000000              	mov rbx, 4
  6747 00005295 48C1E303                	shl rbx, 3
  6748 00005299 48F7DB                  	neg rbx
  6749 0000529C 4801FB                  	add rbx, rdi
  6750 0000529F 4889DC                  	mov rsp, rbx
  6751 000052A2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6752 000052A6 FFE3                    	jmp rbx
  6753                                  	.L_if_end_5688:
  6754 000052A8 C9                      	leave
  6755 000052A9 C22000                  	ret 8 * (2 + 2)
  6756                                  .L_lambda_simple_end_4f58:	; new closure is in rax
  6757 000052AC 50                      	push rax
  6758 000052AD 488B4528                	mov rax, PARAM(1)
  6759 000052B1 8F00                    	pop qword [rax]
  6760 000052B3 48B8-                   	mov rax, sob_void
  6760 000052B5 [0000000000000000] 
  6761                                  
  6762 000052BD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6763 000052C2 E8EDD50000              	call malloc
  6764 000052C7 50                      	push rax
  6765 000052C8 BF10000000              	mov rdi, 8 * 2	; new rib
  6766 000052CD E8E2D50000              	call malloc
  6767 000052D2 50                      	push rax
  6768 000052D3 BF10000000              	mov rdi, 8 * 2	; extended env
  6769 000052D8 E8D7D50000              	call malloc
  6770 000052DD 488B7D10                	mov rdi, ENV
  6771 000052E1 BE00000000              	mov rsi, 0
  6772 000052E6 BA01000000              	mov rdx, 1
  6773                                  .L_lambda_opt_env_loop_0c8b:	; ext_env[i + 1] <-- env[i]
  6774 000052EB 4883FE01                	cmp rsi, 1
  6775 000052EF 7410                    	je .L_lambda_opt_env_end_0c8b
  6776 000052F1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  6777 000052F5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6778 000052F9 48FFC6                  	inc rsi
  6779 000052FC 48FFC2                  	inc rdx
  6780 000052FF EBEA                    	jmp .L_lambda_opt_env_loop_0c8b
  6781                                  .L_lambda_opt_env_end_0c8b:
  6782 00005301 5B                      	pop rbx
  6783 00005302 BE00000000              	mov rsi, 0
  6784                                  .L_lambda_opt_params_loop_0c8b:	; copy params
  6785 00005307 4883FE02                	cmp rsi, 2
  6786 0000530B 740E                    	je .L_lambda_opt_params_end_0c8b
  6787 0000530D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6788 00005312 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6789 00005316 48FFC6                  	inc rsi
  6790 00005319 EBEC                    	jmp .L_lambda_opt_params_loop_0c8b
  6791                                  .L_lambda_opt_params_end_0c8b:
  6792 0000531B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6793 0000531E 4889C3                  	mov rbx, rax
  6794 00005321 58                      	pop rax
  6795 00005322 C60005                  	mov byte [rax], T_closure
  6796 00005325 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6797 00005329 48C74009[36530000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c8b
  6798 00005331 E9FA010000              	jmp .L_lambda_opt_end_0c8b
  6799                                  .L_lambda_opt_code_0c8b:	; lambda-opt body
  6800 00005336 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  6801 0000533B 4889FB                  	mov rbx, rdi
  6802 0000533E 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
  6803 00005342 4883FB00                	cmp rbx, 0
  6804 00005346 7F45                    	jg .L_lambda_opt_arity_check_more_0c8b
  6805                                  .L_lambda_opt_arity_check_exact_0c8b:	 ; if params in opt is exact
  6806 00005348 4883EC08                	sub rsp, 8
  6807 0000534C BE00000000              	mov rsi, 0 ; index
  6808                                  .L_lambda_opt_stack_enlarge_loop_0c8b:	 ; stack loop enlarge start
  6809 00005351 4883FE03                	cmp rsi, 3
  6810 00005355 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c8b
  6811 00005357 4889F7                  	mov rdi, rsi
  6812 0000535A 48FFC7                  	inc rdi
  6813 0000535D 48C1E703                	shl rdi, 3
  6814 00005361 4801E7                  	add rdi, rsp
  6815 00005364 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  6816 00005367 4883EB08                	sub rbx, 8
  6817 0000536B 488B3F                  	mov rdi, [rdi]
  6818 0000536E 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  6819 00005371 48FFC6                  	inc rsi
  6820 00005374 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c8b
  6821                                  .L_lambda_opt_stack_enlarge_loop_exit_0c8b:	 ; end of stack enlarge loop
  6822 00005376 48C7442418-             	mov qword [rsp + 3*8], sob_nil
  6822 0000537B [01000000]         
  6823 0000537F 48C744241001000000      	mov qword [rsp + 2*8], 1
  6824 00005388 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c8b
  6825                                  .L_lambda_opt_arity_check_more_0c8b:	 ; if params in opt is more
  6826 0000538D 48B8-                   	mov rax, sob_nil
  6826 0000538F [0100000000000000] 
  6827 00005397 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  6828 0000539A 48FFCE                  	dec rsi
  6829                                  .L_lambda_opt_list_create_loop_0c8b:	; start of list creation loop
  6830 0000539D 4883FEFF                	cmp rsi, -1
  6831 000053A1 7422                    	je .L_lambda_opt_list_create_loop_exit_0c8b
  6832 000053A3 488D4E03                	lea rcx, [rsi + (3 + 0)]
  6833 000053A7 48C1E103                	shl rcx, 3
  6834 000053AB 4801E1                  	add rcx, rsp
  6835 000053AE 488B09                  	mov rcx, [rcx]
  6836 000053B1 56                      	push rsi ; save params
  6837 000053B2 53                      	push rbx
  6838                                  
  6839 000053B3 50                      	push rax ; cdr
  6840 000053B4 51                      	push rcx ; car
  6841 000053B5 6A02                    	push qword 2 ; push num of args
  6842 000053B7 6A01                    	push qword 1 ; push garbage as env
  6843 000053B9 E87DDE0000              	call L_code_ptr_cons
  6844                                  
  6845 000053BE 5B                      	pop rbx ; restore params
  6846 000053BF 5E                      	pop rsi
  6847 000053C0 48FFCE                  	dec rsi
  6848 000053C3 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c8b
  6849                                  .L_lambda_opt_list_create_loop_exit_0c8b:	; end of list creation loop
  6850 000053C5 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  6851 000053CA 4883C302                	add rbx, 2
  6852 000053CE 4889DF                  	mov rdi, rbx
  6853 000053D1 48C1E703                	shl rdi,3
  6854 000053D5 4801E7                  	add rdi, rsp
  6855 000053D8 488907                  	mov [rdi], rax
  6856 000053DB BE00000000              	mov rsi, 0 ;index
  6857                                  .L_lambda_opt_stack_shrink_loop_0c8b:	; start of stack shrink loop
  6858 000053E0 4883FE03                	cmp rsi, 3
  6859 000053E4 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c8b
  6860 000053E6 BF02000000              	mov rdi, 2
  6861 000053EB 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  6862 000053EE 4889D9                  	mov rcx, rbx
  6863 000053F1 4829F1                  	sub rcx, rsi
  6864 000053F4 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  6865 000053F7 4889FA                  	mov rdx, rdi
  6866 000053FA 48C1E203                	shl rdx, 3
  6867 000053FE 4801E2                  	add rdx, rsp
  6868 00005401 48C1E103                	shl rcx, 3
  6869 00005405 4801E1                  	add rcx, rsp
  6870 00005408 488B12                  	mov rdx, [rdx]
  6871 0000540B 488911                  	mov [rcx], rdx
  6872 0000540E 48FFC6                  	inc rsi
  6873 00005411 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c8b
  6874                                  .L_lambda_opt_stack_shrink_loop_exit_0c8b:	; end of stack shrink loop
  6875 00005413 4883EB02                	sub rbx, 2 ; rbx has number of args
  6876 00005417 4883EB01                	sub rbx, 1
  6877 0000541B 48C1E303                	shl rbx, 3
  6878 0000541F 4801DC                  	add rsp, rbx
  6879 00005422 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  6880                                  .L_lambda_opt_stack_adjusted_0c8b:
  6881 0000542B C8000000                	enter 0, 0
  6882 0000542F 488B4520                	mov rax, PARAM(0)
  6883 00005433 50                      	push rax
  6884 00005434 6A01                    	push 1
  6885 00005436 488B0425[00000000]      	mov rax, qword [free_var_0]
  6886                                  	assert_closure(rax)
    65 0000543E 803805              <1>  cmp byte [%1], %2
    66 00005441 0F85EDEC0000        <1>  jne L_error_incorrect_type
  6887 00005447 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6888 0000544B 53                      	push rbx
  6889 0000544C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6890 00005450 FFD3                    	call rbx
  6891 00005452 483D[02000000]          	cmp rax, sob_boolean_false
  6892 00005458 740D                    	je .L_if_else_5689
  6893 0000545A 488D0425[01000000]      	lea rax, [1 + L_constants]
  6894 00005462 E9C5000000              	jmp .L_if_end_5689
  6895                                  	.L_if_else_5689:
  6896 00005467 488B4520                	mov rax, PARAM(0)
  6897 0000546B 50                      	push rax
  6898 0000546C 6A01                    	push 1
  6899 0000546E 488B0425[88000000]      	mov rax, qword [free_var_17]
  6900                                  	assert_closure(rax)
    65 00005476 803805              <1>  cmp byte [%1], %2
    66 00005479 0F85B5EC0000        <1>  jne L_error_incorrect_type
  6901 0000547F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6902 00005483 53                      	push rbx
  6903 00005484 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6904 00005488 FFD3                    	call rbx
  6905 0000548A 50                      	push rax
  6906 0000548B 488B4520                	mov rax, PARAM(0)
  6907 0000548F 50                      	push rax
  6908 00005490 6A01                    	push 1
  6909 00005492 488B0425[80000000]      	mov rax, qword [free_var_16]
  6910                                  	assert_closure(rax)
    65 0000549A 803805              <1>  cmp byte [%1], %2
    66 0000549D 0F8591EC0000        <1>  jne L_error_incorrect_type
  6911 000054A3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6912 000054A7 53                      	push rbx
  6913 000054A8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6914 000054AC FFD3                    	call rbx
  6915 000054AE 50                      	push rax
  6916 000054AF 6A02                    	push 2
  6917 000054B1 488B4510                	mov rax, qword [rbp + 8*2]
  6918 000054B5 488B00                  	mov rax, qword [rax + 8*0]
  6919 000054B8 488B00                  	mov rax, qword [rax + 8*0]
  6920 000054BB 488B00                  	mov rax, qword [rax]
  6921                                  	assert_closure(rax)
    65 000054BE 803805              <1>  cmp byte [%1], %2
    66 000054C1 0F856DEC0000        <1>  jne L_error_incorrect_type
  6922 000054C7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6923 000054CB 53                      	push rbx
  6924 000054CC FF7508                  	push RET_ADDR
  6925 000054CF 488B7D18                	mov rdi, COUNT
  6926 000054D3 4883C703                	add rdi, 3
  6927 000054D7 48C1E703                	shl rdi, 3
  6928 000054DB 4801EF                  	add rdi, rbp
  6929 000054DE 488B6D00                	mov rbp, OLD_RDP
  6930 000054E2 BE00000000              	mov rsi, 0
  6931                                  .L_tc_recycle_frame_loop_5ccc:	 ; start recycle frame loop
  6932 000054E7 4883FE05                	cmp rsi, 5
  6933 000054EB 7427                    	je .L_tc_recycle_frame_done_5ccc
  6934 000054ED B904000000              	mov rcx, 4
  6935 000054F2 4829F1                  	sub rcx, rsi
  6936 000054F5 48C1E103                	shl rcx, 3
  6937 000054F9 4801E1                  	add rcx, rsp ; rcx is the address to move
  6938 000054FC 4889F3                  	mov rbx, rsi
  6939 000054FF 48C1E303                	shl rbx, 3
  6940 00005503 48F7DB                  	neg rbx
  6941 00005506 4801FB                  	add rbx, rdi ;rbx is the address to move to
  6942 00005509 488B09                  	mov rcx, [rcx]
  6943 0000550C 48890B                  	mov [rbx], rcx
  6944 0000550F 48FFC6                  	inc rsi
  6945 00005512 EBD3                    	jmp .L_tc_recycle_frame_loop_5ccc
  6946                                  .L_tc_recycle_frame_done_5ccc:	 ; end recycle frame loop
  6947 00005514 BB04000000              	mov rbx, 4
  6948 00005519 48C1E303                	shl rbx, 3
  6949 0000551D 48F7DB                  	neg rbx
  6950 00005520 4801FB                  	add rbx, rdi
  6951 00005523 4889DC                  	mov rsp, rbx
  6952 00005526 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6953 0000552A FFE3                    	jmp rbx
  6954                                  	.L_if_end_5689:
  6955 0000552C C9                      	leave
  6956 0000552D C21800                  	ret AND_KILL_FRAME(1)
  6957                                  .L_lambda_opt_end_0c8b:	; new closure is in rax
  6958 00005530 C9                      	leave
  6959 00005531 C22000                  	ret 8 * (2 + 2)
  6960                                  .L_lambda_simple_end_4f56:	; new closure is in rax
  6961                                  	assert_closure(rax)
    65 00005534 803805              <1>  cmp byte [%1], %2
    66 00005537 0F85F7EB0000        <1>  jne L_error_incorrect_type
  6962 0000553D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6963 00005541 53                      	push rbx
  6964 00005542 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6965 00005546 FFD3                    	call rbx
  6966 00005548 48890425[F0020000]      	mov qword [free_var_94], rax
  6967 00005550 48B8-                   	mov rax, sob_void
  6967 00005552 [0000000000000000] 
  6968                                  
  6969 0000555A 4889C7                  	mov rdi, rax
  6970 0000555D E863D30000              	call print_sexpr_if_not_void
  6971                                  
  6972 00005562 488D0425[17000000]      	lea rax, [23 + L_constants]
  6973 0000556A 50                      	push rax
  6974 0000556B 6A01                    	push 1
  6975 0000556D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6976 00005572 E83DD30000              	call malloc
  6977 00005577 50                      	push rax
  6978 00005578 BF00000000              	mov rdi, 8 * 0	; new rib
  6979 0000557D E832D30000              	call malloc
  6980 00005582 50                      	push rax
  6981 00005583 BF08000000              	mov rdi, 8 * 1	; extended env
  6982 00005588 E827D30000              	call malloc
  6983 0000558D 488B7D10                	mov rdi, ENV
  6984 00005591 BE00000000              	mov rsi, 0
  6985 00005596 BA01000000              	mov rdx, 1
  6986                                  .L_lambda_simple_env_loop_4f59:	; ext_env[i + 1] <-- env[i]
  6987 0000559B 4883FE00                	cmp rsi, 0
  6988 0000559F 7410                    	je .L_lambda_simple_env_end_4f59
  6989 000055A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  6990 000055A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6991 000055A9 48FFC6                  	inc rsi
  6992 000055AC 48FFC2                  	inc rdx
  6993 000055AF EBEA                    	jmp .L_lambda_simple_env_loop_4f59
  6994                                  .L_lambda_simple_env_end_4f59:
  6995 000055B1 5B                      	pop rbx
  6996 000055B2 BE00000000              	mov rsi, 0
  6997                                  .L_lambda_simple_params_loop_4f59:	; copy params
  6998 000055B7 4883FE00                	cmp rsi, 0
  6999 000055BB 740E                    	je .L_lambda_simple_params_end_4f59
  7000 000055BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7001 000055C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7002 000055C6 48FFC6                  	inc rsi
  7003 000055C9 EBEC                    	jmp .L_lambda_simple_params_loop_4f59
  7004                                  .L_lambda_simple_params_end_4f59:
  7005 000055CB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7006 000055CE 4889C3                  	mov rbx, rax
  7007 000055D1 58                      	pop rax
  7008 000055D2 C60005                  	mov byte [rax], T_closure
  7009 000055D5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7010 000055D9 48C74009[E6550000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f59
  7011 000055E1 E91C040000              	jmp .L_lambda_simple_end_4f59
  7012                                  .L_lambda_simple_code_4f59:	; lambda-simple body
  7013 000055E6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7014 000055EC 740B                    	je .L_lambda_simple_arity_check_ok_4f59
  7015 000055EE FF742410                	push qword [rsp + 8 * 2]
  7016 000055F2 6A01                    	push 1
  7017 000055F4 E974D20000              	jmp L_error_incorrect_arity_simple
  7018                                  .L_lambda_simple_arity_check_ok_4f59:
  7019 000055F9 C8000000                	enter 0, 0
  7020 000055FD BF11000000              	mov qword rdi, (1 + 8 + 8)
  7021 00005602 E8ADD20000              	call malloc
  7022 00005607 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  7023 0000560B 48B8-                   	mov rax, sob_void
  7023 0000560D [0000000000000000] 
  7024                                  
  7025 00005615 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7026 0000561A E895D20000              	call malloc
  7027 0000561F 50                      	push rax
  7028 00005620 BF08000000              	mov rdi, 8 * 1	; new rib
  7029 00005625 E88AD20000              	call malloc
  7030 0000562A 50                      	push rax
  7031 0000562B BF10000000              	mov rdi, 8 * 2	; extended env
  7032 00005630 E87FD20000              	call malloc
  7033 00005635 488B7D10                	mov rdi, ENV
  7034 00005639 BE00000000              	mov rsi, 0
  7035 0000563E BA01000000              	mov rdx, 1
  7036                                  .L_lambda_simple_env_loop_4f5a:	; ext_env[i + 1] <-- env[i]
  7037 00005643 4883FE01                	cmp rsi, 1
  7038 00005647 7410                    	je .L_lambda_simple_env_end_4f5a
  7039 00005649 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  7040 0000564D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7041 00005651 48FFC6                  	inc rsi
  7042 00005654 48FFC2                  	inc rdx
  7043 00005657 EBEA                    	jmp .L_lambda_simple_env_loop_4f5a
  7044                                  .L_lambda_simple_env_end_4f5a:
  7045 00005659 5B                      	pop rbx
  7046 0000565A BE00000000              	mov rsi, 0
  7047                                  .L_lambda_simple_params_loop_4f5a:	; copy params
  7048 0000565F 4883FE01                	cmp rsi, 1
  7049 00005663 740E                    	je .L_lambda_simple_params_end_4f5a
  7050 00005665 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7051 0000566A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7052 0000566E 48FFC6                  	inc rsi
  7053 00005671 EBEC                    	jmp .L_lambda_simple_params_loop_4f5a
  7054                                  .L_lambda_simple_params_end_4f5a:
  7055 00005673 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7056 00005676 4889C3                  	mov rbx, rax
  7057 00005679 58                      	pop rax
  7058 0000567A C60005                  	mov byte [rax], T_closure
  7059 0000567D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7060 00005681 48C74009[8E560000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f5a
  7061 00005689 E95D010000              	jmp .L_lambda_simple_end_4f5a
  7062                                  .L_lambda_simple_code_4f5a:	; lambda-simple body
  7063 0000568E 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7064 00005694 740B                    	je .L_lambda_simple_arity_check_ok_4f5a
  7065 00005696 FF742410                	push qword [rsp + 8 * 2]
  7066 0000569A 6A03                    	push 3
  7067 0000569C E9CCD10000              	jmp L_error_incorrect_arity_simple
  7068                                  .L_lambda_simple_arity_check_ok_4f5a:
  7069 000056A1 C8000000                	enter 0, 0
  7070 000056A5 488B4530                	mov rax, PARAM(2)
  7071 000056A9 50                      	push rax
  7072 000056AA 488B0425[00000000]      	mov rax, qword [free_var_0]
  7073 000056B2 50                      	push rax
  7074 000056B3 6A02                    	push 2
  7075 000056B5 488B0425[D0020000]      	mov rax, qword [free_var_90]
  7076                                  	assert_closure(rax)
    65 000056BD 803805              <1>  cmp byte [%1], %2
    66 000056C0 0F856EEA0000        <1>  jne L_error_incorrect_type
  7077 000056C6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7078 000056CA 53                      	push rbx
  7079 000056CB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7080 000056CF FFD3                    	call rbx
  7081 000056D1 483D[02000000]          	cmp rax, sob_boolean_false
  7082 000056D7 7409                    	je .L_if_else_568a
  7083 000056D9 488B4528                	mov rax, PARAM(1)
  7084 000056DD E905010000              	jmp .L_if_end_568a
  7085                                  	.L_if_else_568a:
  7086 000056E2 488B4530                	mov rax, PARAM(2)
  7087 000056E6 50                      	push rax
  7088 000056E7 488B0425[88000000]      	mov rax, qword [free_var_17]
  7089 000056EF 50                      	push rax
  7090 000056F0 6A02                    	push 2
  7091 000056F2 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7092                                  	assert_closure(rax)
    65 000056FA 803805              <1>  cmp byte [%1], %2
    66 000056FD 0F8531EA0000        <1>  jne L_error_incorrect_type
  7093 00005703 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7094 00005707 53                      	push rbx
  7095 00005708 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7096 0000570C FFD3                    	call rbx
  7097 0000570E 50                      	push rax
  7098 0000570F 488B4530                	mov rax, PARAM(2)
  7099 00005713 50                      	push rax
  7100 00005714 488B0425[80000000]      	mov rax, qword [free_var_16]
  7101 0000571C 50                      	push rax
  7102 0000571D 6A02                    	push 2
  7103 0000571F 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7104                                  	assert_closure(rax)
    65 00005727 803805              <1>  cmp byte [%1], %2
    66 0000572A 0F8504EA0000        <1>  jne L_error_incorrect_type
  7105 00005730 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7106 00005734 53                      	push rbx
  7107 00005735 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7108 00005739 FFD3                    	call rbx
  7109 0000573B 50                      	push rax
  7110 0000573C 488B4528                	mov rax, PARAM(1)
  7111 00005740 50                      	push rax
  7112 00005741 488B4520                	mov rax, PARAM(0)
  7113 00005745 50                      	push rax
  7114 00005746 6A03                    	push 3
  7115 00005748 488B0425[C8020000]      	mov rax, qword [free_var_89]
  7116                                  	assert_closure(rax)
    65 00005750 803805              <1>  cmp byte [%1], %2
    66 00005753 0F85DBE90000        <1>  jne L_error_incorrect_type
  7117 00005759 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7118 0000575D 53                      	push rbx
  7119 0000575E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7120 00005762 FFD3                    	call rbx
  7121 00005764 50                      	push rax
  7122 00005765 488B4520                	mov rax, PARAM(0)
  7123 00005769 50                      	push rax
  7124 0000576A 6A03                    	push 3
  7125 0000576C 488B4510                	mov rax, qword [rbp + 8*2]
  7126 00005770 488B00                  	mov rax, qword [rax + 8*0]
  7127 00005773 488B00                  	mov rax, qword [rax + 8*0]
  7128 00005776 488B00                  	mov rax, qword [rax]
  7129                                  	assert_closure(rax)
    65 00005779 803805              <1>  cmp byte [%1], %2
    66 0000577C 0F85B2E90000        <1>  jne L_error_incorrect_type
  7130 00005782 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7131 00005786 53                      	push rbx
  7132 00005787 FF7508                  	push RET_ADDR
  7133 0000578A 488B7D18                	mov rdi, COUNT
  7134 0000578E 4883C703                	add rdi, 3
  7135 00005792 48C1E703                	shl rdi, 3
  7136 00005796 4801EF                  	add rdi, rbp
  7137 00005799 488B6D00                	mov rbp, OLD_RDP
  7138 0000579D BE00000000              	mov rsi, 0
  7139                                  .L_tc_recycle_frame_loop_5ccd:	 ; start recycle frame loop
  7140 000057A2 4883FE06                	cmp rsi, 6
  7141 000057A6 7427                    	je .L_tc_recycle_frame_done_5ccd
  7142 000057A8 B905000000              	mov rcx, 5
  7143 000057AD 4829F1                  	sub rcx, rsi
  7144 000057B0 48C1E103                	shl rcx, 3
  7145 000057B4 4801E1                  	add rcx, rsp ; rcx is the address to move
  7146 000057B7 4889F3                  	mov rbx, rsi
  7147 000057BA 48C1E303                	shl rbx, 3
  7148 000057BE 48F7DB                  	neg rbx
  7149 000057C1 4801FB                  	add rbx, rdi ;rbx is the address to move to
  7150 000057C4 488B09                  	mov rcx, [rcx]
  7151 000057C7 48890B                  	mov [rbx], rcx
  7152 000057CA 48FFC6                  	inc rsi
  7153 000057CD EBD3                    	jmp .L_tc_recycle_frame_loop_5ccd
  7154                                  .L_tc_recycle_frame_done_5ccd:	 ; end recycle frame loop
  7155 000057CF BB05000000              	mov rbx, 5
  7156 000057D4 48C1E303                	shl rbx, 3
  7157 000057D8 48F7DB                  	neg rbx
  7158 000057DB 4801FB                  	add rbx, rdi
  7159 000057DE 4889DC                  	mov rsp, rbx
  7160 000057E1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7161 000057E5 FFE3                    	jmp rbx
  7162                                  	.L_if_end_568a:
  7163 000057E7 C9                      	leave
  7164 000057E8 C22800                  	ret 8 * (2 + 3)
  7165                                  .L_lambda_simple_end_4f5a:	; new closure is in rax
  7166 000057EB 50                      	push rax
  7167 000057EC 488B4520                	mov rax, PARAM(0)
  7168 000057F0 8F00                    	pop qword [rax]
  7169 000057F2 48B8-                   	mov rax, sob_void
  7169 000057F4 [0000000000000000] 
  7170                                  
  7171 000057FC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7172 00005801 E8AED00000              	call malloc
  7173 00005806 50                      	push rax
  7174 00005807 BF08000000              	mov rdi, 8 * 1	; new rib
  7175 0000580C E8A3D00000              	call malloc
  7176 00005811 50                      	push rax
  7177 00005812 BF10000000              	mov rdi, 8 * 2	; extended env
  7178 00005817 E898D00000              	call malloc
  7179 0000581C 488B7D10                	mov rdi, ENV
  7180 00005820 BE00000000              	mov rsi, 0
  7181 00005825 BA01000000              	mov rdx, 1
  7182                                  .L_lambda_opt_env_loop_0c8c:	; ext_env[i + 1] <-- env[i]
  7183 0000582A 4883FE01                	cmp rsi, 1
  7184 0000582E 7410                    	je .L_lambda_opt_env_end_0c8c
  7185 00005830 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  7186 00005834 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7187 00005838 48FFC6                  	inc rsi
  7188 0000583B 48FFC2                  	inc rdx
  7189 0000583E EBEA                    	jmp .L_lambda_opt_env_loop_0c8c
  7190                                  .L_lambda_opt_env_end_0c8c:
  7191 00005840 5B                      	pop rbx
  7192 00005841 BE00000000              	mov rsi, 0
  7193                                  .L_lambda_opt_params_loop_0c8c:	; copy params
  7194 00005846 4883FE01                	cmp rsi, 1
  7195 0000584A 740E                    	je .L_lambda_opt_params_end_0c8c
  7196 0000584C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7197 00005851 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7198 00005855 48FFC6                  	inc rsi
  7199 00005858 EBEC                    	jmp .L_lambda_opt_params_loop_0c8c
  7200                                  .L_lambda_opt_params_end_0c8c:
  7201 0000585A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7202 0000585D 4889C3                  	mov rbx, rax
  7203 00005860 58                      	pop rax
  7204 00005861 C60005                  	mov byte [rax], T_closure
  7205 00005864 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7206 00005868 48C74009[75580000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c8c
  7207 00005870 E989010000              	jmp .L_lambda_opt_end_0c8c
  7208                                  .L_lambda_opt_code_0c8c:	; lambda-opt body
  7209 00005875 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  7210 0000587A 4889FB                  	mov rbx, rdi
  7211 0000587D 4883EB02                	sub rbx, 2 ; rbx is the num of extra args
  7212 00005881 4883FB00                	cmp rbx, 0
  7213 00005885 7F45                    	jg .L_lambda_opt_arity_check_more_0c8c
  7214                                  .L_lambda_opt_arity_check_exact_0c8c:	 ; if params in opt is exact
  7215 00005887 4883EC08                	sub rsp, 8
  7216 0000588B BE00000000              	mov rsi, 0 ; index
  7217                                  .L_lambda_opt_stack_enlarge_loop_0c8c:	 ; stack loop enlarge start
  7218 00005890 4883FE05                	cmp rsi, 5
  7219 00005894 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c8c
  7220 00005896 4889F7                  	mov rdi, rsi
  7221 00005899 48FFC7                  	inc rdi
  7222 0000589C 48C1E703                	shl rdi, 3
  7223 000058A0 4801E7                  	add rdi, rsp
  7224 000058A3 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  7225 000058A6 4883EB08                	sub rbx, 8
  7226 000058AA 488B3F                  	mov rdi, [rdi]
  7227 000058AD 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  7228 000058B0 48FFC6                  	inc rsi
  7229 000058B3 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c8c
  7230                                  .L_lambda_opt_stack_enlarge_loop_exit_0c8c:	 ; end of stack enlarge loop
  7231 000058B5 48C7442428-             	mov qword [rsp + 5*8], sob_nil
  7231 000058BA [01000000]         
  7232 000058BE 48C744241003000000      	mov qword [rsp + 2*8], 3
  7233 000058C7 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c8c
  7234                                  .L_lambda_opt_arity_check_more_0c8c:	 ; if params in opt is more
  7235 000058CC 48B8-                   	mov rax, sob_nil
  7235 000058CE [0100000000000000] 
  7236 000058D6 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  7237 000058D9 48FFCE                  	dec rsi
  7238                                  .L_lambda_opt_list_create_loop_0c8c:	; start of list creation loop
  7239 000058DC 4883FEFF                	cmp rsi, -1
  7240 000058E0 7422                    	je .L_lambda_opt_list_create_loop_exit_0c8c
  7241 000058E2 488D4E05                	lea rcx, [rsi + (3 + 2)]
  7242 000058E6 48C1E103                	shl rcx, 3
  7243 000058EA 4801E1                  	add rcx, rsp
  7244 000058ED 488B09                  	mov rcx, [rcx]
  7245 000058F0 56                      	push rsi ; save params
  7246 000058F1 53                      	push rbx
  7247                                  
  7248 000058F2 50                      	push rax ; cdr
  7249 000058F3 51                      	push rcx ; car
  7250 000058F4 6A02                    	push qword 2 ; push num of args
  7251 000058F6 6A01                    	push qword 1 ; push garbage as env
  7252 000058F8 E83ED90000              	call L_code_ptr_cons
  7253                                  
  7254 000058FD 5B                      	pop rbx ; restore params
  7255 000058FE 5E                      	pop rsi
  7256 000058FF 48FFCE                  	dec rsi
  7257 00005902 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c8c
  7258                                  .L_lambda_opt_list_create_loop_exit_0c8c:	; end of list creation loop
  7259 00005904 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  7260 00005909 4883C302                	add rbx, 2
  7261 0000590D 4889DF                  	mov rdi, rbx
  7262 00005910 48C1E703                	shl rdi,3
  7263 00005914 4801E7                  	add rdi, rsp
  7264 00005917 488907                  	mov [rdi], rax
  7265 0000591A BE00000000              	mov rsi, 0 ;index
  7266                                  .L_lambda_opt_stack_shrink_loop_0c8c:	; start of stack shrink loop
  7267 0000591F 4883FE05                	cmp rsi, 5
  7268 00005923 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c8c
  7269 00005925 BF04000000              	mov rdi, 4
  7270 0000592A 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  7271 0000592D 4889D9                  	mov rcx, rbx
  7272 00005930 4829F1                  	sub rcx, rsi
  7273 00005933 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  7274 00005936 4889FA                  	mov rdx, rdi
  7275 00005939 48C1E203                	shl rdx, 3
  7276 0000593D 4801E2                  	add rdx, rsp
  7277 00005940 48C1E103                	shl rcx, 3
  7278 00005944 4801E1                  	add rcx, rsp
  7279 00005947 488B12                  	mov rdx, [rdx]
  7280 0000594A 488911                  	mov [rcx], rdx
  7281 0000594D 48FFC6                  	inc rsi
  7282 00005950 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c8c
  7283                                  .L_lambda_opt_stack_shrink_loop_exit_0c8c:	; end of stack shrink loop
  7284 00005952 4883EB02                	sub rbx, 2 ; rbx has number of args
  7285 00005956 4883EB03                	sub rbx, 3
  7286 0000595A 48C1E303                	shl rbx, 3
  7287 0000595E 4801DC                  	add rsp, rbx
  7288 00005961 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  7289                                  .L_lambda_opt_stack_adjusted_0c8c:
  7290 0000596A C8000000                	enter 0, 0
  7291 0000596E 488B4530                	mov rax, PARAM(2)
  7292 00005972 50                      	push rax
  7293 00005973 488B4528                	mov rax, PARAM(1)
  7294 00005977 50                      	push rax
  7295 00005978 488B4520                	mov rax, PARAM(0)
  7296 0000597C 50                      	push rax
  7297 0000597D 6A03                    	push 3
  7298 0000597F 488B4510                	mov rax, qword [rbp + 8*2]
  7299 00005983 488B00                  	mov rax, qword [rax + 8*0]
  7300 00005986 488B00                  	mov rax, qword [rax + 8*0]
  7301 00005989 488B00                  	mov rax, qword [rax]
  7302                                  	assert_closure(rax)
    65 0000598C 803805              <1>  cmp byte [%1], %2
    66 0000598F 0F859FE70000        <1>  jne L_error_incorrect_type
  7303 00005995 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7304 00005999 53                      	push rbx
  7305 0000599A FF7508                  	push RET_ADDR
  7306 0000599D 488B7D18                	mov rdi, COUNT
  7307 000059A1 4883C703                	add rdi, 3
  7308 000059A5 48C1E703                	shl rdi, 3
  7309 000059A9 4801EF                  	add rdi, rbp
  7310 000059AC 488B6D00                	mov rbp, OLD_RDP
  7311 000059B0 BE00000000              	mov rsi, 0
  7312                                  .L_tc_recycle_frame_loop_5cce:	 ; start recycle frame loop
  7313 000059B5 4883FE06                	cmp rsi, 6
  7314 000059B9 7427                    	je .L_tc_recycle_frame_done_5cce
  7315 000059BB B905000000              	mov rcx, 5
  7316 000059C0 4829F1                  	sub rcx, rsi
  7317 000059C3 48C1E103                	shl rcx, 3
  7318 000059C7 4801E1                  	add rcx, rsp ; rcx is the address to move
  7319 000059CA 4889F3                  	mov rbx, rsi
  7320 000059CD 48C1E303                	shl rbx, 3
  7321 000059D1 48F7DB                  	neg rbx
  7322 000059D4 4801FB                  	add rbx, rdi ;rbx is the address to move to
  7323 000059D7 488B09                  	mov rcx, [rcx]
  7324 000059DA 48890B                  	mov [rbx], rcx
  7325 000059DD 48FFC6                  	inc rsi
  7326 000059E0 EBD3                    	jmp .L_tc_recycle_frame_loop_5cce
  7327                                  .L_tc_recycle_frame_done_5cce:	 ; end recycle frame loop
  7328 000059E2 BB05000000              	mov rbx, 5
  7329 000059E7 48C1E303                	shl rbx, 3
  7330 000059EB 48F7DB                  	neg rbx
  7331 000059EE 4801FB                  	add rbx, rdi
  7332 000059F1 4889DC                  	mov rsp, rbx
  7333 000059F4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7334 000059F8 FFE3                    	jmp rbx
  7335 000059FA C9                      	leave
  7336 000059FB C22800                  	ret AND_KILL_FRAME(3)
  7337                                  .L_lambda_opt_end_0c8c:	; new closure is in rax
  7338 000059FE C9                      	leave
  7339 000059FF C21800                  	ret 8 * (2 + 1)
  7340                                  .L_lambda_simple_end_4f59:	; new closure is in rax
  7341                                  	assert_closure(rax)
    65 00005A02 803805              <1>  cmp byte [%1], %2
    66 00005A05 0F8529E70000        <1>  jne L_error_incorrect_type
  7342 00005A0B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7343 00005A0F 53                      	push rbx
  7344 00005A10 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7345 00005A14 FFD3                    	call rbx
  7346 00005A16 48890425[F8020000]      	mov qword [free_var_95], rax
  7347 00005A1E 48B8-                   	mov rax, sob_void
  7347 00005A20 [0000000000000000] 
  7348                                  
  7349 00005A28 4889C7                  	mov rdi, rax
  7350 00005A2B E895CE0000              	call print_sexpr_if_not_void
  7351                                  
  7352 00005A30 488D0425[17000000]      	lea rax, [23 + L_constants]
  7353 00005A38 50                      	push rax
  7354 00005A39 6A01                    	push 1
  7355 00005A3B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7356 00005A40 E86FCE0000              	call malloc
  7357 00005A45 50                      	push rax
  7358 00005A46 BF00000000              	mov rdi, 8 * 0	; new rib
  7359 00005A4B E864CE0000              	call malloc
  7360 00005A50 50                      	push rax
  7361 00005A51 BF08000000              	mov rdi, 8 * 1	; extended env
  7362 00005A56 E859CE0000              	call malloc
  7363 00005A5B 488B7D10                	mov rdi, ENV
  7364 00005A5F BE00000000              	mov rsi, 0
  7365 00005A64 BA01000000              	mov rdx, 1
  7366                                  .L_lambda_simple_env_loop_4f5b:	; ext_env[i + 1] <-- env[i]
  7367 00005A69 4883FE00                	cmp rsi, 0
  7368 00005A6D 7410                    	je .L_lambda_simple_env_end_4f5b
  7369 00005A6F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  7370 00005A73 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7371 00005A77 48FFC6                  	inc rsi
  7372 00005A7A 48FFC2                  	inc rdx
  7373 00005A7D EBEA                    	jmp .L_lambda_simple_env_loop_4f5b
  7374                                  .L_lambda_simple_env_end_4f5b:
  7375 00005A7F 5B                      	pop rbx
  7376 00005A80 BE00000000              	mov rsi, 0
  7377                                  .L_lambda_simple_params_loop_4f5b:	; copy params
  7378 00005A85 4883FE00                	cmp rsi, 0
  7379 00005A89 740E                    	je .L_lambda_simple_params_end_4f5b
  7380 00005A8B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7381 00005A90 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7382 00005A94 48FFC6                  	inc rsi
  7383 00005A97 EBEC                    	jmp .L_lambda_simple_params_loop_4f5b
  7384                                  .L_lambda_simple_params_end_4f5b:
  7385 00005A99 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7386 00005A9C 4889C3                  	mov rbx, rax
  7387 00005A9F 58                      	pop rax
  7388 00005AA0 C60005                  	mov byte [rax], T_closure
  7389 00005AA3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7390 00005AA7 48C74009[B45A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f5b
  7391 00005AAF E963040000              	jmp .L_lambda_simple_end_4f5b
  7392                                  .L_lambda_simple_code_4f5b:	; lambda-simple body
  7393 00005AB4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7394 00005ABA 740B                    	je .L_lambda_simple_arity_check_ok_4f5b
  7395 00005ABC FF742410                	push qword [rsp + 8 * 2]
  7396 00005AC0 6A01                    	push 1
  7397 00005AC2 E9A6CD0000              	jmp L_error_incorrect_arity_simple
  7398                                  .L_lambda_simple_arity_check_ok_4f5b:
  7399 00005AC7 C8000000                	enter 0, 0
  7400 00005ACB BF11000000              	mov qword rdi, (1 + 8 + 8)
  7401 00005AD0 E8DFCD0000              	call malloc
  7402 00005AD5 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  7403 00005AD9 48B8-                   	mov rax, sob_void
  7403 00005ADB [0000000000000000] 
  7404                                  
  7405 00005AE3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7406 00005AE8 E8C7CD0000              	call malloc
  7407 00005AED 50                      	push rax
  7408 00005AEE BF08000000              	mov rdi, 8 * 1	; new rib
  7409 00005AF3 E8BCCD0000              	call malloc
  7410 00005AF8 50                      	push rax
  7411 00005AF9 BF10000000              	mov rdi, 8 * 2	; extended env
  7412 00005AFE E8B1CD0000              	call malloc
  7413 00005B03 488B7D10                	mov rdi, ENV
  7414 00005B07 BE00000000              	mov rsi, 0
  7415 00005B0C BA01000000              	mov rdx, 1
  7416                                  .L_lambda_simple_env_loop_4f5c:	; ext_env[i + 1] <-- env[i]
  7417 00005B11 4883FE01                	cmp rsi, 1
  7418 00005B15 7410                    	je .L_lambda_simple_env_end_4f5c
  7419 00005B17 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  7420 00005B1B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7421 00005B1F 48FFC6                  	inc rsi
  7422 00005B22 48FFC2                  	inc rdx
  7423 00005B25 EBEA                    	jmp .L_lambda_simple_env_loop_4f5c
  7424                                  .L_lambda_simple_env_end_4f5c:
  7425 00005B27 5B                      	pop rbx
  7426 00005B28 BE00000000              	mov rsi, 0
  7427                                  .L_lambda_simple_params_loop_4f5c:	; copy params
  7428 00005B2D 4883FE01                	cmp rsi, 1
  7429 00005B31 740E                    	je .L_lambda_simple_params_end_4f5c
  7430 00005B33 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7431 00005B38 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7432 00005B3C 48FFC6                  	inc rsi
  7433 00005B3F EBEC                    	jmp .L_lambda_simple_params_loop_4f5c
  7434                                  .L_lambda_simple_params_end_4f5c:
  7435 00005B41 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7436 00005B44 4889C3                  	mov rbx, rax
  7437 00005B47 58                      	pop rax
  7438 00005B48 C60005                  	mov byte [rax], T_closure
  7439 00005B4B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7440 00005B4F 48C74009[5C5B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f5c
  7441 00005B57 E9A4010000              	jmp .L_lambda_simple_end_4f5c
  7442                                  .L_lambda_simple_code_4f5c:	; lambda-simple body
  7443 00005B5C 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7444 00005B62 740B                    	je .L_lambda_simple_arity_check_ok_4f5c
  7445 00005B64 FF742410                	push qword [rsp + 8 * 2]
  7446 00005B68 6A03                    	push 3
  7447 00005B6A E9FECC0000              	jmp L_error_incorrect_arity_simple
  7448                                  .L_lambda_simple_arity_check_ok_4f5c:
  7449 00005B6F C8000000                	enter 0, 0
  7450 00005B73 488B4530                	mov rax, PARAM(2)
  7451 00005B77 50                      	push rax
  7452 00005B78 488B0425[00000000]      	mov rax, qword [free_var_0]
  7453 00005B80 50                      	push rax
  7454 00005B81 6A02                    	push 2
  7455 00005B83 488B0425[D0020000]      	mov rax, qword [free_var_90]
  7456                                  	assert_closure(rax)
    65 00005B8B 803805              <1>  cmp byte [%1], %2
    66 00005B8E 0F85A0E50000        <1>  jne L_error_incorrect_type
  7457 00005B94 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7458 00005B98 53                      	push rbx
  7459 00005B99 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7460 00005B9D FFD3                    	call rbx
  7461 00005B9F 483D[02000000]          	cmp rax, sob_boolean_false
  7462 00005BA5 7409                    	je .L_if_else_568b
  7463 00005BA7 488B4528                	mov rax, PARAM(1)
  7464 00005BAB E94C010000              	jmp .L_if_end_568b
  7465                                  	.L_if_else_568b:
  7466 00005BB0 488D0425[01000000]      	lea rax, [1 + L_constants]
  7467 00005BB8 50                      	push rax
  7468 00005BB9 488B4530                	mov rax, PARAM(2)
  7469 00005BBD 50                      	push rax
  7470 00005BBE 488B0425[88000000]      	mov rax, qword [free_var_17]
  7471 00005BC6 50                      	push rax
  7472 00005BC7 6A02                    	push 2
  7473 00005BC9 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7474                                  	assert_closure(rax)
    65 00005BD1 803805              <1>  cmp byte [%1], %2
    66 00005BD4 0F855AE50000        <1>  jne L_error_incorrect_type
  7475 00005BDA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7476 00005BDE 53                      	push rbx
  7477 00005BDF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7478 00005BE3 FFD3                    	call rbx
  7479 00005BE5 50                      	push rax
  7480 00005BE6 488B4528                	mov rax, PARAM(1)
  7481 00005BEA 50                      	push rax
  7482 00005BEB 488B4520                	mov rax, PARAM(0)
  7483 00005BEF 50                      	push rax
  7484 00005BF0 6A03                    	push 3
  7485 00005BF2 488B4510                	mov rax, qword [rbp + 8*2]
  7486 00005BF6 488B00                  	mov rax, qword [rax + 8*0]
  7487 00005BF9 488B00                  	mov rax, qword [rax + 8*0]
  7488 00005BFC 488B00                  	mov rax, qword [rax]
  7489                                  	assert_closure(rax)
    65 00005BFF 803805              <1>  cmp byte [%1], %2
    66 00005C02 0F852CE50000        <1>  jne L_error_incorrect_type
  7490 00005C08 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7491 00005C0C 53                      	push rbx
  7492 00005C0D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7493 00005C11 FFD3                    	call rbx
  7494 00005C13 50                      	push rax
  7495 00005C14 6A02                    	push 2
  7496 00005C16 488B0425[68000000]      	mov rax, qword [free_var_13]
  7497                                  	assert_closure(rax)
    65 00005C1E 803805              <1>  cmp byte [%1], %2
    66 00005C21 0F850DE50000        <1>  jne L_error_incorrect_type
  7498 00005C27 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7499 00005C2B 53                      	push rbx
  7500 00005C2C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7501 00005C30 FFD3                    	call rbx
  7502 00005C32 50                      	push rax
  7503 00005C33 488B4530                	mov rax, PARAM(2)
  7504 00005C37 50                      	push rax
  7505 00005C38 488B0425[80000000]      	mov rax, qword [free_var_16]
  7506 00005C40 50                      	push rax
  7507 00005C41 6A02                    	push 2
  7508 00005C43 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7509                                  	assert_closure(rax)
    65 00005C4B 803805              <1>  cmp byte [%1], %2
    66 00005C4E 0F85E0E40000        <1>  jne L_error_incorrect_type
  7510 00005C54 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7511 00005C58 53                      	push rbx
  7512 00005C59 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7513 00005C5D FFD3                    	call rbx
  7514 00005C5F 50                      	push rax
  7515 00005C60 6A02                    	push 2
  7516 00005C62 488B0425[F0020000]      	mov rax, qword [free_var_94]
  7517                                  	assert_closure(rax)
    65 00005C6A 803805              <1>  cmp byte [%1], %2
    66 00005C6D 0F85C1E40000        <1>  jne L_error_incorrect_type
  7518 00005C73 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7519 00005C77 53                      	push rbx
  7520 00005C78 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7521 00005C7C FFD3                    	call rbx
  7522 00005C7E 50                      	push rax
  7523 00005C7F 488B4520                	mov rax, PARAM(0)
  7524 00005C83 50                      	push rax
  7525 00005C84 6A02                    	push 2
  7526 00005C86 488B0425[C8020000]      	mov rax, qword [free_var_89]
  7527                                  	assert_closure(rax)
    65 00005C8E 803805              <1>  cmp byte [%1], %2
    66 00005C91 0F859DE40000        <1>  jne L_error_incorrect_type
  7528 00005C97 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7529 00005C9B 53                      	push rbx
  7530 00005C9C FF7508                  	push RET_ADDR
  7531 00005C9F 488B7D18                	mov rdi, COUNT
  7532 00005CA3 4883C703                	add rdi, 3
  7533 00005CA7 48C1E703                	shl rdi, 3
  7534 00005CAB 4801EF                  	add rdi, rbp
  7535 00005CAE 488B6D00                	mov rbp, OLD_RDP
  7536 00005CB2 BE00000000              	mov rsi, 0
  7537                                  .L_tc_recycle_frame_loop_5ccf:	 ; start recycle frame loop
  7538 00005CB7 4883FE05                	cmp rsi, 5
  7539 00005CBB 7427                    	je .L_tc_recycle_frame_done_5ccf
  7540 00005CBD B904000000              	mov rcx, 4
  7541 00005CC2 4829F1                  	sub rcx, rsi
  7542 00005CC5 48C1E103                	shl rcx, 3
  7543 00005CC9 4801E1                  	add rcx, rsp ; rcx is the address to move
  7544 00005CCC 4889F3                  	mov rbx, rsi
  7545 00005CCF 48C1E303                	shl rbx, 3
  7546 00005CD3 48F7DB                  	neg rbx
  7547 00005CD6 4801FB                  	add rbx, rdi ;rbx is the address to move to
  7548 00005CD9 488B09                  	mov rcx, [rcx]
  7549 00005CDC 48890B                  	mov [rbx], rcx
  7550 00005CDF 48FFC6                  	inc rsi
  7551 00005CE2 EBD3                    	jmp .L_tc_recycle_frame_loop_5ccf
  7552                                  .L_tc_recycle_frame_done_5ccf:	 ; end recycle frame loop
  7553 00005CE4 BB04000000              	mov rbx, 4
  7554 00005CE9 48C1E303                	shl rbx, 3
  7555 00005CED 48F7DB                  	neg rbx
  7556 00005CF0 4801FB                  	add rbx, rdi
  7557 00005CF3 4889DC                  	mov rsp, rbx
  7558 00005CF6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7559 00005CFA FFE3                    	jmp rbx
  7560                                  	.L_if_end_568b:
  7561 00005CFC C9                      	leave
  7562 00005CFD C22800                  	ret 8 * (2 + 3)
  7563                                  .L_lambda_simple_end_4f5c:	; new closure is in rax
  7564 00005D00 50                      	push rax
  7565 00005D01 488B4520                	mov rax, PARAM(0)
  7566 00005D05 8F00                    	pop qword [rax]
  7567 00005D07 48B8-                   	mov rax, sob_void
  7567 00005D09 [0000000000000000] 
  7568                                  
  7569 00005D11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7570 00005D16 E899CB0000              	call malloc
  7571 00005D1B 50                      	push rax
  7572 00005D1C BF08000000              	mov rdi, 8 * 1	; new rib
  7573 00005D21 E88ECB0000              	call malloc
  7574 00005D26 50                      	push rax
  7575 00005D27 BF10000000              	mov rdi, 8 * 2	; extended env
  7576 00005D2C E883CB0000              	call malloc
  7577 00005D31 488B7D10                	mov rdi, ENV
  7578 00005D35 BE00000000              	mov rsi, 0
  7579 00005D3A BA01000000              	mov rdx, 1
  7580                                  .L_lambda_opt_env_loop_0c8d:	; ext_env[i + 1] <-- env[i]
  7581 00005D3F 4883FE01                	cmp rsi, 1
  7582 00005D43 7410                    	je .L_lambda_opt_env_end_0c8d
  7583 00005D45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  7584 00005D49 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7585 00005D4D 48FFC6                  	inc rsi
  7586 00005D50 48FFC2                  	inc rdx
  7587 00005D53 EBEA                    	jmp .L_lambda_opt_env_loop_0c8d
  7588                                  .L_lambda_opt_env_end_0c8d:
  7589 00005D55 5B                      	pop rbx
  7590 00005D56 BE00000000              	mov rsi, 0
  7591                                  .L_lambda_opt_params_loop_0c8d:	; copy params
  7592 00005D5B 4883FE01                	cmp rsi, 1
  7593 00005D5F 740E                    	je .L_lambda_opt_params_end_0c8d
  7594 00005D61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7595 00005D66 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7596 00005D6A 48FFC6                  	inc rsi
  7597 00005D6D EBEC                    	jmp .L_lambda_opt_params_loop_0c8d
  7598                                  .L_lambda_opt_params_end_0c8d:
  7599 00005D6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7600 00005D72 4889C3                  	mov rbx, rax
  7601 00005D75 58                      	pop rax
  7602 00005D76 C60005                  	mov byte [rax], T_closure
  7603 00005D79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7604 00005D7D 48C74009[8A5D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c8d
  7605 00005D85 E989010000              	jmp .L_lambda_opt_end_0c8d
  7606                                  .L_lambda_opt_code_0c8d:	; lambda-opt body
  7607 00005D8A 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  7608 00005D8F 4889FB                  	mov rbx, rdi
  7609 00005D92 4883EB02                	sub rbx, 2 ; rbx is the num of extra args
  7610 00005D96 4883FB00                	cmp rbx, 0
  7611 00005D9A 7F45                    	jg .L_lambda_opt_arity_check_more_0c8d
  7612                                  .L_lambda_opt_arity_check_exact_0c8d:	 ; if params in opt is exact
  7613 00005D9C 4883EC08                	sub rsp, 8
  7614 00005DA0 BE00000000              	mov rsi, 0 ; index
  7615                                  .L_lambda_opt_stack_enlarge_loop_0c8d:	 ; stack loop enlarge start
  7616 00005DA5 4883FE05                	cmp rsi, 5
  7617 00005DA9 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c8d
  7618 00005DAB 4889F7                  	mov rdi, rsi
  7619 00005DAE 48FFC7                  	inc rdi
  7620 00005DB1 48C1E703                	shl rdi, 3
  7621 00005DB5 4801E7                  	add rdi, rsp
  7622 00005DB8 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  7623 00005DBB 4883EB08                	sub rbx, 8
  7624 00005DBF 488B3F                  	mov rdi, [rdi]
  7625 00005DC2 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  7626 00005DC5 48FFC6                  	inc rsi
  7627 00005DC8 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c8d
  7628                                  .L_lambda_opt_stack_enlarge_loop_exit_0c8d:	 ; end of stack enlarge loop
  7629 00005DCA 48C7442428-             	mov qword [rsp + 5*8], sob_nil
  7629 00005DCF [01000000]         
  7630 00005DD3 48C744241003000000      	mov qword [rsp + 2*8], 3
  7631 00005DDC E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c8d
  7632                                  .L_lambda_opt_arity_check_more_0c8d:	 ; if params in opt is more
  7633 00005DE1 48B8-                   	mov rax, sob_nil
  7633 00005DE3 [0100000000000000] 
  7634 00005DEB 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  7635 00005DEE 48FFCE                  	dec rsi
  7636                                  .L_lambda_opt_list_create_loop_0c8d:	; start of list creation loop
  7637 00005DF1 4883FEFF                	cmp rsi, -1
  7638 00005DF5 7422                    	je .L_lambda_opt_list_create_loop_exit_0c8d
  7639 00005DF7 488D4E05                	lea rcx, [rsi + (3 + 2)]
  7640 00005DFB 48C1E103                	shl rcx, 3
  7641 00005DFF 4801E1                  	add rcx, rsp
  7642 00005E02 488B09                  	mov rcx, [rcx]
  7643 00005E05 56                      	push rsi ; save params
  7644 00005E06 53                      	push rbx
  7645                                  
  7646 00005E07 50                      	push rax ; cdr
  7647 00005E08 51                      	push rcx ; car
  7648 00005E09 6A02                    	push qword 2 ; push num of args
  7649 00005E0B 6A01                    	push qword 1 ; push garbage as env
  7650 00005E0D E829D40000              	call L_code_ptr_cons
  7651                                  
  7652 00005E12 5B                      	pop rbx ; restore params
  7653 00005E13 5E                      	pop rsi
  7654 00005E14 48FFCE                  	dec rsi
  7655 00005E17 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c8d
  7656                                  .L_lambda_opt_list_create_loop_exit_0c8d:	; end of list creation loop
  7657 00005E19 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  7658 00005E1E 4883C302                	add rbx, 2
  7659 00005E22 4889DF                  	mov rdi, rbx
  7660 00005E25 48C1E703                	shl rdi,3
  7661 00005E29 4801E7                  	add rdi, rsp
  7662 00005E2C 488907                  	mov [rdi], rax
  7663 00005E2F BE00000000              	mov rsi, 0 ;index
  7664                                  .L_lambda_opt_stack_shrink_loop_0c8d:	; start of stack shrink loop
  7665 00005E34 4883FE05                	cmp rsi, 5
  7666 00005E38 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c8d
  7667 00005E3A BF04000000              	mov rdi, 4
  7668 00005E3F 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  7669 00005E42 4889D9                  	mov rcx, rbx
  7670 00005E45 4829F1                  	sub rcx, rsi
  7671 00005E48 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  7672 00005E4B 4889FA                  	mov rdx, rdi
  7673 00005E4E 48C1E203                	shl rdx, 3
  7674 00005E52 4801E2                  	add rdx, rsp
  7675 00005E55 48C1E103                	shl rcx, 3
  7676 00005E59 4801E1                  	add rcx, rsp
  7677 00005E5C 488B12                  	mov rdx, [rdx]
  7678 00005E5F 488911                  	mov [rcx], rdx
  7679 00005E62 48FFC6                  	inc rsi
  7680 00005E65 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c8d
  7681                                  .L_lambda_opt_stack_shrink_loop_exit_0c8d:	; end of stack shrink loop
  7682 00005E67 4883EB02                	sub rbx, 2 ; rbx has number of args
  7683 00005E6B 4883EB03                	sub rbx, 3
  7684 00005E6F 48C1E303                	shl rbx, 3
  7685 00005E73 4801DC                  	add rsp, rbx
  7686 00005E76 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  7687                                  .L_lambda_opt_stack_adjusted_0c8d:
  7688 00005E7F C8000000                	enter 0, 0
  7689 00005E83 488B4530                	mov rax, PARAM(2)
  7690 00005E87 50                      	push rax
  7691 00005E88 488B4528                	mov rax, PARAM(1)
  7692 00005E8C 50                      	push rax
  7693 00005E8D 488B4520                	mov rax, PARAM(0)
  7694 00005E91 50                      	push rax
  7695 00005E92 6A03                    	push 3
  7696 00005E94 488B4510                	mov rax, qword [rbp + 8*2]
  7697 00005E98 488B00                  	mov rax, qword [rax + 8*0]
  7698 00005E9B 488B00                  	mov rax, qword [rax + 8*0]
  7699 00005E9E 488B00                  	mov rax, qword [rax]
  7700                                  	assert_closure(rax)
    65 00005EA1 803805              <1>  cmp byte [%1], %2
    66 00005EA4 0F858AE20000        <1>  jne L_error_incorrect_type
  7701 00005EAA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7702 00005EAE 53                      	push rbx
  7703 00005EAF FF7508                  	push RET_ADDR
  7704 00005EB2 488B7D18                	mov rdi, COUNT
  7705 00005EB6 4883C703                	add rdi, 3
  7706 00005EBA 48C1E703                	shl rdi, 3
  7707 00005EBE 4801EF                  	add rdi, rbp
  7708 00005EC1 488B6D00                	mov rbp, OLD_RDP
  7709 00005EC5 BE00000000              	mov rsi, 0
  7710                                  .L_tc_recycle_frame_loop_5cd0:	 ; start recycle frame loop
  7711 00005ECA 4883FE06                	cmp rsi, 6
  7712 00005ECE 7427                    	je .L_tc_recycle_frame_done_5cd0
  7713 00005ED0 B905000000              	mov rcx, 5
  7714 00005ED5 4829F1                  	sub rcx, rsi
  7715 00005ED8 48C1E103                	shl rcx, 3
  7716 00005EDC 4801E1                  	add rcx, rsp ; rcx is the address to move
  7717 00005EDF 4889F3                  	mov rbx, rsi
  7718 00005EE2 48C1E303                	shl rbx, 3
  7719 00005EE6 48F7DB                  	neg rbx
  7720 00005EE9 4801FB                  	add rbx, rdi ;rbx is the address to move to
  7721 00005EEC 488B09                  	mov rcx, [rcx]
  7722 00005EEF 48890B                  	mov [rbx], rcx
  7723 00005EF2 48FFC6                  	inc rsi
  7724 00005EF5 EBD3                    	jmp .L_tc_recycle_frame_loop_5cd0
  7725                                  .L_tc_recycle_frame_done_5cd0:	 ; end recycle frame loop
  7726 00005EF7 BB05000000              	mov rbx, 5
  7727 00005EFC 48C1E303                	shl rbx, 3
  7728 00005F00 48F7DB                  	neg rbx
  7729 00005F03 4801FB                  	add rbx, rdi
  7730 00005F06 4889DC                  	mov rsp, rbx
  7731 00005F09 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7732 00005F0D FFE3                    	jmp rbx
  7733 00005F0F C9                      	leave
  7734 00005F10 C22800                  	ret AND_KILL_FRAME(3)
  7735                                  .L_lambda_opt_end_0c8d:	; new closure is in rax
  7736 00005F13 C9                      	leave
  7737 00005F14 C21800                  	ret 8 * (2 + 1)
  7738                                  .L_lambda_simple_end_4f5b:	; new closure is in rax
  7739                                  	assert_closure(rax)
    65 00005F17 803805              <1>  cmp byte [%1], %2
    66 00005F1A 0F8514E20000        <1>  jne L_error_incorrect_type
  7740 00005F20 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7741 00005F24 53                      	push rbx
  7742 00005F25 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7743 00005F29 FFD3                    	call rbx
  7744 00005F2B 48890425[00030000]      	mov qword [free_var_96], rax
  7745 00005F33 48B8-                   	mov rax, sob_void
  7745 00005F35 [0000000000000000] 
  7746                                  
  7747 00005F3D 4889C7                  	mov rdi, rax
  7748 00005F40 E880C90000              	call print_sexpr_if_not_void
  7749                                  
  7750 00005F45 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7751 00005F4A E865C90000              	call malloc
  7752 00005F4F 50                      	push rax
  7753 00005F50 BF00000000              	mov rdi, 8 * 0	; new rib
  7754 00005F55 E85AC90000              	call malloc
  7755 00005F5A 50                      	push rax
  7756 00005F5B BF08000000              	mov rdi, 8 * 1	; extended env
  7757 00005F60 E84FC90000              	call malloc
  7758 00005F65 488B7D10                	mov rdi, ENV
  7759 00005F69 BE00000000              	mov rsi, 0
  7760 00005F6E BA01000000              	mov rdx, 1
  7761                                  .L_lambda_simple_env_loop_4f5d:	; ext_env[i + 1] <-- env[i]
  7762 00005F73 4883FE00                	cmp rsi, 0
  7763 00005F77 7410                    	je .L_lambda_simple_env_end_4f5d
  7764 00005F79 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  7765 00005F7D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7766 00005F81 48FFC6                  	inc rsi
  7767 00005F84 48FFC2                  	inc rdx
  7768 00005F87 EBEA                    	jmp .L_lambda_simple_env_loop_4f5d
  7769                                  .L_lambda_simple_env_end_4f5d:
  7770 00005F89 5B                      	pop rbx
  7771 00005F8A BE00000000              	mov rsi, 0
  7772                                  .L_lambda_simple_params_loop_4f5d:	; copy params
  7773 00005F8F 4883FE00                	cmp rsi, 0
  7774 00005F93 740E                    	je .L_lambda_simple_params_end_4f5d
  7775 00005F95 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7776 00005F9A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7777 00005F9E 48FFC6                  	inc rsi
  7778 00005FA1 EBEC                    	jmp .L_lambda_simple_params_loop_4f5d
  7779                                  .L_lambda_simple_params_end_4f5d:
  7780 00005FA3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7781 00005FA6 4889C3                  	mov rbx, rax
  7782 00005FA9 58                      	pop rax
  7783 00005FAA C60005                  	mov byte [rax], T_closure
  7784 00005FAD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7785 00005FB1 48C74009[BE5F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f5d
  7786 00005FB9 E9A5000000              	jmp .L_lambda_simple_end_4f5d
  7787                                  .L_lambda_simple_code_4f5d:	; lambda-simple body
  7788 00005FBE 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7789 00005FC4 740B                    	je .L_lambda_simple_arity_check_ok_4f5d
  7790 00005FC6 FF742410                	push qword [rsp + 8 * 2]
  7791 00005FCA 6A00                    	push 0
  7792 00005FCC E99CC80000              	jmp L_error_incorrect_arity_simple
  7793                                  .L_lambda_simple_arity_check_ok_4f5d:
  7794 00005FD1 C8000000                	enter 0, 0
  7795 00005FD5 488D0425[44000000]      	lea rax, [68 + L_constants]
  7796 00005FDD 50                      	push rax
  7797 00005FDE 488D0425[3B000000]      	lea rax, [59 + L_constants]
  7798 00005FE6 50                      	push rax
  7799 00005FE7 6A02                    	push 2
  7800 00005FE9 488B0425[30010000]      	mov rax, qword [free_var_38]
  7801                                  	assert_closure(rax)
    65 00005FF1 803805              <1>  cmp byte [%1], %2
    66 00005FF4 0F853AE10000        <1>  jne L_error_incorrect_type
  7802 00005FFA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7803 00005FFE 53                      	push rbx
  7804 00005FFF FF7508                  	push RET_ADDR
  7805 00006002 488B7D18                	mov rdi, COUNT
  7806 00006006 4883C703                	add rdi, 3
  7807 0000600A 48C1E703                	shl rdi, 3
  7808 0000600E 4801EF                  	add rdi, rbp
  7809 00006011 488B6D00                	mov rbp, OLD_RDP
  7810 00006015 BE00000000              	mov rsi, 0
  7811                                  .L_tc_recycle_frame_loop_5cd1:	 ; start recycle frame loop
  7812 0000601A 4883FE05                	cmp rsi, 5
  7813 0000601E 7427                    	je .L_tc_recycle_frame_done_5cd1
  7814 00006020 B904000000              	mov rcx, 4
  7815 00006025 4829F1                  	sub rcx, rsi
  7816 00006028 48C1E103                	shl rcx, 3
  7817 0000602C 4801E1                  	add rcx, rsp ; rcx is the address to move
  7818 0000602F 4889F3                  	mov rbx, rsi
  7819 00006032 48C1E303                	shl rbx, 3
  7820 00006036 48F7DB                  	neg rbx
  7821 00006039 4801FB                  	add rbx, rdi ;rbx is the address to move to
  7822 0000603C 488B09                  	mov rcx, [rcx]
  7823 0000603F 48890B                  	mov [rbx], rcx
  7824 00006042 48FFC6                  	inc rsi
  7825 00006045 EBD3                    	jmp .L_tc_recycle_frame_loop_5cd1
  7826                                  .L_tc_recycle_frame_done_5cd1:	 ; end recycle frame loop
  7827 00006047 BB04000000              	mov rbx, 4
  7828 0000604C 48C1E303                	shl rbx, 3
  7829 00006050 48F7DB                  	neg rbx
  7830 00006053 4801FB                  	add rbx, rdi
  7831 00006056 4889DC                  	mov rsp, rbx
  7832 00006059 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7833 0000605D FFE3                    	jmp rbx
  7834 0000605F C9                      	leave
  7835 00006060 C21000                  	ret 8 * (2 + 0)
  7836                                  .L_lambda_simple_end_4f5d:	; new closure is in rax
  7837 00006063 50                      	push rax
  7838 00006064 6A01                    	push 1
  7839 00006066 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7840 0000606B E844C80000              	call malloc
  7841 00006070 50                      	push rax
  7842 00006071 BF00000000              	mov rdi, 8 * 0	; new rib
  7843 00006076 E839C80000              	call malloc
  7844 0000607B 50                      	push rax
  7845 0000607C BF08000000              	mov rdi, 8 * 1	; extended env
  7846 00006081 E82EC80000              	call malloc
  7847 00006086 488B7D10                	mov rdi, ENV
  7848 0000608A BE00000000              	mov rsi, 0
  7849 0000608F BA01000000              	mov rdx, 1
  7850                                  .L_lambda_simple_env_loop_4f5e:	; ext_env[i + 1] <-- env[i]
  7851 00006094 4883FE00                	cmp rsi, 0
  7852 00006098 7410                    	je .L_lambda_simple_env_end_4f5e
  7853 0000609A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  7854 0000609E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7855 000060A2 48FFC6                  	inc rsi
  7856 000060A5 48FFC2                  	inc rdx
  7857 000060A8 EBEA                    	jmp .L_lambda_simple_env_loop_4f5e
  7858                                  .L_lambda_simple_env_end_4f5e:
  7859 000060AA 5B                      	pop rbx
  7860 000060AB BE00000000              	mov rsi, 0
  7861                                  .L_lambda_simple_params_loop_4f5e:	; copy params
  7862 000060B0 4883FE00                	cmp rsi, 0
  7863 000060B4 740E                    	je .L_lambda_simple_params_end_4f5e
  7864 000060B6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7865 000060BB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7866 000060BF 48FFC6                  	inc rsi
  7867 000060C2 EBEC                    	jmp .L_lambda_simple_params_loop_4f5e
  7868                                  .L_lambda_simple_params_end_4f5e:
  7869 000060C4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7870 000060C7 4889C3                  	mov rbx, rax
  7871 000060CA 58                      	pop rax
  7872 000060CB C60005                  	mov byte [rax], T_closure
  7873 000060CE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7874 000060D2 48C74009[DF600000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f5e
  7875 000060DA E99E080000              	jmp .L_lambda_simple_end_4f5e
  7876                                  .L_lambda_simple_code_4f5e:	; lambda-simple body
  7877 000060DF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7878 000060E5 740B                    	je .L_lambda_simple_arity_check_ok_4f5e
  7879 000060E7 FF742410                	push qword [rsp + 8 * 2]
  7880 000060EB 6A01                    	push 1
  7881 000060ED E97BC70000              	jmp L_error_incorrect_arity_simple
  7882                                  .L_lambda_simple_arity_check_ok_4f5e:
  7883 000060F2 C8000000                	enter 0, 0
  7884 000060F6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7885 000060FB E8B4C70000              	call malloc
  7886 00006100 50                      	push rax
  7887 00006101 BF08000000              	mov rdi, 8 * 1	; new rib
  7888 00006106 E8A9C70000              	call malloc
  7889 0000610B 50                      	push rax
  7890 0000610C BF10000000              	mov rdi, 8 * 2	; extended env
  7891 00006111 E89EC70000              	call malloc
  7892 00006116 488B7D10                	mov rdi, ENV
  7893 0000611A BE00000000              	mov rsi, 0
  7894 0000611F BA01000000              	mov rdx, 1
  7895                                  .L_lambda_simple_env_loop_4f5f:	; ext_env[i + 1] <-- env[i]
  7896 00006124 4883FE01                	cmp rsi, 1
  7897 00006128 7410                    	je .L_lambda_simple_env_end_4f5f
  7898 0000612A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  7899 0000612E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7900 00006132 48FFC6                  	inc rsi
  7901 00006135 48FFC2                  	inc rdx
  7902 00006138 EBEA                    	jmp .L_lambda_simple_env_loop_4f5f
  7903                                  .L_lambda_simple_env_end_4f5f:
  7904 0000613A 5B                      	pop rbx
  7905 0000613B BE00000000              	mov rsi, 0
  7906                                  .L_lambda_simple_params_loop_4f5f:	; copy params
  7907 00006140 4883FE01                	cmp rsi, 1
  7908 00006144 740E                    	je .L_lambda_simple_params_end_4f5f
  7909 00006146 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7910 0000614B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7911 0000614F 48FFC6                  	inc rsi
  7912 00006152 EBEC                    	jmp .L_lambda_simple_params_loop_4f5f
  7913                                  .L_lambda_simple_params_end_4f5f:
  7914 00006154 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7915 00006157 4889C3                  	mov rbx, rax
  7916 0000615A 58                      	pop rax
  7917 0000615B C60005                  	mov byte [rax], T_closure
  7918 0000615E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7919 00006162 48C74009[6F610000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f5f
  7920 0000616A E9FE040000              	jmp .L_lambda_simple_end_4f5f
  7921                                  .L_lambda_simple_code_4f5f:	; lambda-simple body
  7922 0000616F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7923 00006175 740B                    	je .L_lambda_simple_arity_check_ok_4f5f
  7924 00006177 FF742410                	push qword [rsp + 8 * 2]
  7925 0000617B 6A02                    	push 2
  7926 0000617D E9EBC60000              	jmp L_error_incorrect_arity_simple
  7927                                  .L_lambda_simple_arity_check_ok_4f5f:
  7928 00006182 C8000000                	enter 0, 0
  7929 00006186 488B4520                	mov rax, PARAM(0)
  7930 0000618A 50                      	push rax
  7931 0000618B 6A01                    	push 1
  7932 0000618D 488B0425[48000000]      	mov rax, qword [free_var_9]
  7933                                  	assert_closure(rax)
    65 00006195 803805              <1>  cmp byte [%1], %2
    66 00006198 0F8596DF0000        <1>  jne L_error_incorrect_type
  7934 0000619E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7935 000061A2 53                      	push rbx
  7936 000061A3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7937 000061A7 FFD3                    	call rbx
  7938 000061A9 483D[02000000]          	cmp rax, sob_boolean_false
  7939 000061AF 0F8407020000            	je .L_if_else_568c
  7940 000061B5 488B4528                	mov rax, PARAM(1)
  7941 000061B9 50                      	push rax
  7942 000061BA 6A01                    	push 1
  7943 000061BC 488B0425[48000000]      	mov rax, qword [free_var_9]
  7944                                  	assert_closure(rax)
    65 000061C4 803805              <1>  cmp byte [%1], %2
    66 000061C7 0F8567DF0000        <1>  jne L_error_incorrect_type
  7945 000061CD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7946 000061D1 53                      	push rbx
  7947 000061D2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7948 000061D6 FFD3                    	call rbx
  7949 000061D8 483D[02000000]          	cmp rax, sob_boolean_false
  7950 000061DE 0F8487000000            	je .L_if_else_568d
  7951 000061E4 488B4528                	mov rax, PARAM(1)
  7952 000061E8 50                      	push rax
  7953 000061E9 488B4520                	mov rax, PARAM(0)
  7954 000061ED 50                      	push rax
  7955 000061EE 6A02                    	push 2
  7956 000061F0 488B0425[10010000]      	mov rax, qword [free_var_34]
  7957                                  	assert_closure(rax)
    65 000061F8 803805              <1>  cmp byte [%1], %2
    66 000061FB 0F8533DF0000        <1>  jne L_error_incorrect_type
  7958 00006201 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7959 00006205 53                      	push rbx
  7960 00006206 FF7508                  	push RET_ADDR
  7961 00006209 488B7D18                	mov rdi, COUNT
  7962 0000620D 4883C703                	add rdi, 3
  7963 00006211 48C1E703                	shl rdi, 3
  7964 00006215 4801EF                  	add rdi, rbp
  7965 00006218 488B6D00                	mov rbp, OLD_RDP
  7966 0000621C BE00000000              	mov rsi, 0
  7967                                  .L_tc_recycle_frame_loop_5cd3:	 ; start recycle frame loop
  7968 00006221 4883FE05                	cmp rsi, 5
  7969 00006225 7427                    	je .L_tc_recycle_frame_done_5cd3
  7970 00006227 B904000000              	mov rcx, 4
  7971 0000622C 4829F1                  	sub rcx, rsi
  7972 0000622F 48C1E103                	shl rcx, 3
  7973 00006233 4801E1                  	add rcx, rsp ; rcx is the address to move
  7974 00006236 4889F3                  	mov rbx, rsi
  7975 00006239 48C1E303                	shl rbx, 3
  7976 0000623D 48F7DB                  	neg rbx
  7977 00006240 4801FB                  	add rbx, rdi ;rbx is the address to move to
  7978 00006243 488B09                  	mov rcx, [rcx]
  7979 00006246 48890B                  	mov [rbx], rcx
  7980 00006249 48FFC6                  	inc rsi
  7981 0000624C EBD3                    	jmp .L_tc_recycle_frame_loop_5cd3
  7982                                  .L_tc_recycle_frame_done_5cd3:	 ; end recycle frame loop
  7983 0000624E BB04000000              	mov rbx, 4
  7984 00006253 48C1E303                	shl rbx, 3
  7985 00006257 48F7DB                  	neg rbx
  7986 0000625A 4801FB                  	add rbx, rdi
  7987 0000625D 4889DC                  	mov rsp, rbx
  7988 00006260 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7989 00006264 FFE3                    	jmp rbx
  7990 00006266 E94C010000              	jmp .L_if_end_568d
  7991                                  	.L_if_else_568d:
  7992 0000626B 488B4528                	mov rax, PARAM(1)
  7993 0000626F 50                      	push rax
  7994 00006270 6A01                    	push 1
  7995 00006272 488B0425[40000000]      	mov rax, qword [free_var_8]
  7996                                  	assert_closure(rax)
    65 0000627A 803805              <1>  cmp byte [%1], %2
    66 0000627D 0F85B1DE0000        <1>  jne L_error_incorrect_type
  7997 00006283 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7998 00006287 53                      	push rbx
  7999 00006288 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8000 0000628C FFD3                    	call rbx
  8001 0000628E 483D[02000000]          	cmp rax, sob_boolean_false
  8002 00006294 0F84A3000000            	je .L_if_else_568e
  8003 0000629A 488B4528                	mov rax, PARAM(1)
  8004 0000629E 50                      	push rax
  8005 0000629F 488B4520                	mov rax, PARAM(0)
  8006 000062A3 50                      	push rax
  8007 000062A4 6A01                    	push 1
  8008 000062A6 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8009                                  	assert_closure(rax)
    65 000062AE 803805              <1>  cmp byte [%1], %2
    66 000062B1 0F857DDE0000        <1>  jne L_error_incorrect_type
  8010 000062B7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8011 000062BB 53                      	push rbx
  8012 000062BC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8013 000062C0 FFD3                    	call rbx
  8014 000062C2 50                      	push rax
  8015 000062C3 6A02                    	push 2
  8016 000062C5 488B0425[F0000000]      	mov rax, qword [free_var_30]
  8017                                  	assert_closure(rax)
    65 000062CD 803805              <1>  cmp byte [%1], %2
    66 000062D0 0F855EDE0000        <1>  jne L_error_incorrect_type
  8018 000062D6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8019 000062DA 53                      	push rbx
  8020 000062DB FF7508                  	push RET_ADDR
  8021 000062DE 488B7D18                	mov rdi, COUNT
  8022 000062E2 4883C703                	add rdi, 3
  8023 000062E6 48C1E703                	shl rdi, 3
  8024 000062EA 4801EF                  	add rdi, rbp
  8025 000062ED 488B6D00                	mov rbp, OLD_RDP
  8026 000062F1 BE00000000              	mov rsi, 0
  8027                                  .L_tc_recycle_frame_loop_5cd4:	 ; start recycle frame loop
  8028 000062F6 4883FE05                	cmp rsi, 5
  8029 000062FA 7427                    	je .L_tc_recycle_frame_done_5cd4
  8030 000062FC B904000000              	mov rcx, 4
  8031 00006301 4829F1                  	sub rcx, rsi
  8032 00006304 48C1E103                	shl rcx, 3
  8033 00006308 4801E1                  	add rcx, rsp ; rcx is the address to move
  8034 0000630B 4889F3                  	mov rbx, rsi
  8035 0000630E 48C1E303                	shl rbx, 3
  8036 00006312 48F7DB                  	neg rbx
  8037 00006315 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8038 00006318 488B09                  	mov rcx, [rcx]
  8039 0000631B 48890B                  	mov [rbx], rcx
  8040 0000631E 48FFC6                  	inc rsi
  8041 00006321 EBD3                    	jmp .L_tc_recycle_frame_loop_5cd4
  8042                                  .L_tc_recycle_frame_done_5cd4:	 ; end recycle frame loop
  8043 00006323 BB04000000              	mov rbx, 4
  8044 00006328 48C1E303                	shl rbx, 3
  8045 0000632C 48F7DB                  	neg rbx
  8046 0000632F 4801FB                  	add rbx, rdi
  8047 00006332 4889DC                  	mov rsp, rbx
  8048 00006335 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8049 00006339 FFE3                    	jmp rbx
  8050 0000633B EB7A                    	jmp .L_if_end_568e
  8051                                  	.L_if_else_568e:
  8052 0000633D 6A00                    	push 0
  8053 0000633F 488B4510                	mov rax, qword [rbp + 8*2]
  8054 00006343 488B00                  	mov rax, qword [rax + 8*0]
  8055 00006346 488B00                  	mov rax, qword [rax + 8*0]
  8056                                  	assert_closure(rax)
    65 00006349 803805              <1>  cmp byte [%1], %2
    66 0000634C 0F85E2DD0000        <1>  jne L_error_incorrect_type
  8057 00006352 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8058 00006356 53                      	push rbx
  8059 00006357 FF7508                  	push RET_ADDR
  8060 0000635A 488B7D18                	mov rdi, COUNT
  8061 0000635E 4883C703                	add rdi, 3
  8062 00006362 48C1E703                	shl rdi, 3
  8063 00006366 4801EF                  	add rdi, rbp
  8064 00006369 488B6D00                	mov rbp, OLD_RDP
  8065 0000636D BE00000000              	mov rsi, 0
  8066                                  .L_tc_recycle_frame_loop_5cd5:	 ; start recycle frame loop
  8067 00006372 4883FE03                	cmp rsi, 3
  8068 00006376 7427                    	je .L_tc_recycle_frame_done_5cd5
  8069 00006378 B902000000              	mov rcx, 2
  8070 0000637D 4829F1                  	sub rcx, rsi
  8071 00006380 48C1E103                	shl rcx, 3
  8072 00006384 4801E1                  	add rcx, rsp ; rcx is the address to move
  8073 00006387 4889F3                  	mov rbx, rsi
  8074 0000638A 48C1E303                	shl rbx, 3
  8075 0000638E 48F7DB                  	neg rbx
  8076 00006391 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8077 00006394 488B09                  	mov rcx, [rcx]
  8078 00006397 48890B                  	mov [rbx], rcx
  8079 0000639A 48FFC6                  	inc rsi
  8080 0000639D EBD3                    	jmp .L_tc_recycle_frame_loop_5cd5
  8081                                  .L_tc_recycle_frame_done_5cd5:	 ; end recycle frame loop
  8082 0000639F BB02000000              	mov rbx, 2
  8083 000063A4 48C1E303                	shl rbx, 3
  8084 000063A8 48F7DB                  	neg rbx
  8085 000063AB 4801FB                  	add rbx, rdi
  8086 000063AE 4889DC                  	mov rsp, rbx
  8087 000063B1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8088 000063B5 FFE3                    	jmp rbx
  8089                                  	.L_if_end_568e:
  8090                                  	.L_if_end_568d:
  8091 000063B7 E9AD020000              	jmp .L_if_end_568c
  8092                                  	.L_if_else_568c:
  8093 000063BC 488B4520                	mov rax, PARAM(0)
  8094 000063C0 50                      	push rax
  8095 000063C1 6A01                    	push 1
  8096 000063C3 488B0425[40000000]      	mov rax, qword [free_var_8]
  8097                                  	assert_closure(rax)
    65 000063CB 803805              <1>  cmp byte [%1], %2
    66 000063CE 0F8560DD0000        <1>  jne L_error_incorrect_type
  8098 000063D4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8099 000063D8 53                      	push rbx
  8100 000063D9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8101 000063DD FFD3                    	call rbx
  8102 000063DF 483D[02000000]          	cmp rax, sob_boolean_false
  8103 000063E5 0F8404020000            	je .L_if_else_568f
  8104 000063EB 488B4528                	mov rax, PARAM(1)
  8105 000063EF 50                      	push rax
  8106 000063F0 6A01                    	push 1
  8107 000063F2 488B0425[48000000]      	mov rax, qword [free_var_9]
  8108                                  	assert_closure(rax)
    65 000063FA 803805              <1>  cmp byte [%1], %2
    66 000063FD 0F8531DD0000        <1>  jne L_error_incorrect_type
  8109 00006403 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8110 00006407 53                      	push rbx
  8111 00006408 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8112 0000640C FFD3                    	call rbx
  8113 0000640E 483D[02000000]          	cmp rax, sob_boolean_false
  8114 00006414 0F84A6000000            	je .L_if_else_5690
  8115 0000641A 488B4528                	mov rax, PARAM(1)
  8116 0000641E 50                      	push rax
  8117 0000641F 6A01                    	push 1
  8118 00006421 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8119                                  	assert_closure(rax)
    65 00006429 803805              <1>  cmp byte [%1], %2
    66 0000642C 0F8502DD0000        <1>  jne L_error_incorrect_type
  8120 00006432 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8121 00006436 53                      	push rbx
  8122 00006437 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8123 0000643B FFD3                    	call rbx
  8124 0000643D 50                      	push rax
  8125 0000643E 488B4520                	mov rax, PARAM(0)
  8126 00006442 50                      	push rax
  8127 00006443 6A02                    	push 2
  8128 00006445 488B0425[F0000000]      	mov rax, qword [free_var_30]
  8129                                  	assert_closure(rax)
    65 0000644D 803805              <1>  cmp byte [%1], %2
    66 00006450 0F85DEDC0000        <1>  jne L_error_incorrect_type
  8130 00006456 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8131 0000645A 53                      	push rbx
  8132 0000645B FF7508                  	push RET_ADDR
  8133 0000645E 488B7D18                	mov rdi, COUNT
  8134 00006462 4883C703                	add rdi, 3
  8135 00006466 48C1E703                	shl rdi, 3
  8136 0000646A 4801EF                  	add rdi, rbp
  8137 0000646D 488B6D00                	mov rbp, OLD_RDP
  8138 00006471 BE00000000              	mov rsi, 0
  8139                                  .L_tc_recycle_frame_loop_5cd6:	 ; start recycle frame loop
  8140 00006476 4883FE05                	cmp rsi, 5
  8141 0000647A 7427                    	je .L_tc_recycle_frame_done_5cd6
  8142 0000647C B904000000              	mov rcx, 4
  8143 00006481 4829F1                  	sub rcx, rsi
  8144 00006484 48C1E103                	shl rcx, 3
  8145 00006488 4801E1                  	add rcx, rsp ; rcx is the address to move
  8146 0000648B 4889F3                  	mov rbx, rsi
  8147 0000648E 48C1E303                	shl rbx, 3
  8148 00006492 48F7DB                  	neg rbx
  8149 00006495 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8150 00006498 488B09                  	mov rcx, [rcx]
  8151 0000649B 48890B                  	mov [rbx], rcx
  8152 0000649E 48FFC6                  	inc rsi
  8153 000064A1 EBD3                    	jmp .L_tc_recycle_frame_loop_5cd6
  8154                                  .L_tc_recycle_frame_done_5cd6:	 ; end recycle frame loop
  8155 000064A3 BB04000000              	mov rbx, 4
  8156 000064A8 48C1E303                	shl rbx, 3
  8157 000064AC 48F7DB                  	neg rbx
  8158 000064AF 4801FB                  	add rbx, rdi
  8159 000064B2 4889DC                  	mov rsp, rbx
  8160 000064B5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8161 000064B9 FFE3                    	jmp rbx
  8162 000064BB E92D010000              	jmp .L_if_end_5690
  8163                                  	.L_if_else_5690:
  8164 000064C0 488B4528                	mov rax, PARAM(1)
  8165 000064C4 50                      	push rax
  8166 000064C5 6A01                    	push 1
  8167 000064C7 488B0425[40000000]      	mov rax, qword [free_var_8]
  8168                                  	assert_closure(rax)
    65 000064CF 803805              <1>  cmp byte [%1], %2
    66 000064D2 0F855CDC0000        <1>  jne L_error_incorrect_type
  8169 000064D8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8170 000064DC 53                      	push rbx
  8171 000064DD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8172 000064E1 FFD3                    	call rbx
  8173 000064E3 483D[02000000]          	cmp rax, sob_boolean_false
  8174 000064E9 0F8484000000            	je .L_if_else_5691
  8175 000064EF 488B4528                	mov rax, PARAM(1)
  8176 000064F3 50                      	push rax
  8177 000064F4 488B4520                	mov rax, PARAM(0)
  8178 000064F8 50                      	push rax
  8179 000064F9 6A02                    	push 2
  8180 000064FB 488B0425[F0000000]      	mov rax, qword [free_var_30]
  8181                                  	assert_closure(rax)
    65 00006503 803805              <1>  cmp byte [%1], %2
    66 00006506 0F8528DC0000        <1>  jne L_error_incorrect_type
  8182 0000650C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8183 00006510 53                      	push rbx
  8184 00006511 FF7508                  	push RET_ADDR
  8185 00006514 488B7D18                	mov rdi, COUNT
  8186 00006518 4883C703                	add rdi, 3
  8187 0000651C 48C1E703                	shl rdi, 3
  8188 00006520 4801EF                  	add rdi, rbp
  8189 00006523 488B6D00                	mov rbp, OLD_RDP
  8190 00006527 BE00000000              	mov rsi, 0
  8191                                  .L_tc_recycle_frame_loop_5cd7:	 ; start recycle frame loop
  8192 0000652C 4883FE05                	cmp rsi, 5
  8193 00006530 7427                    	je .L_tc_recycle_frame_done_5cd7
  8194 00006532 B904000000              	mov rcx, 4
  8195 00006537 4829F1                  	sub rcx, rsi
  8196 0000653A 48C1E103                	shl rcx, 3
  8197 0000653E 4801E1                  	add rcx, rsp ; rcx is the address to move
  8198 00006541 4889F3                  	mov rbx, rsi
  8199 00006544 48C1E303                	shl rbx, 3
  8200 00006548 48F7DB                  	neg rbx
  8201 0000654B 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8202 0000654E 488B09                  	mov rcx, [rcx]
  8203 00006551 48890B                  	mov [rbx], rcx
  8204 00006554 48FFC6                  	inc rsi
  8205 00006557 EBD3                    	jmp .L_tc_recycle_frame_loop_5cd7
  8206                                  .L_tc_recycle_frame_done_5cd7:	 ; end recycle frame loop
  8207 00006559 BB04000000              	mov rbx, 4
  8208 0000655E 48C1E303                	shl rbx, 3
  8209 00006562 48F7DB                  	neg rbx
  8210 00006565 4801FB                  	add rbx, rdi
  8211 00006568 4889DC                  	mov rsp, rbx
  8212 0000656B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8213 0000656F FFE3                    	jmp rbx
  8214 00006571 EB7A                    	jmp .L_if_end_5691
  8215                                  	.L_if_else_5691:
  8216 00006573 6A00                    	push 0
  8217 00006575 488B4510                	mov rax, qword [rbp + 8*2]
  8218 00006579 488B00                  	mov rax, qword [rax + 8*0]
  8219 0000657C 488B00                  	mov rax, qword [rax + 8*0]
  8220                                  	assert_closure(rax)
    65 0000657F 803805              <1>  cmp byte [%1], %2
    66 00006582 0F85ACDB0000        <1>  jne L_error_incorrect_type
  8221 00006588 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8222 0000658C 53                      	push rbx
  8223 0000658D FF7508                  	push RET_ADDR
  8224 00006590 488B7D18                	mov rdi, COUNT
  8225 00006594 4883C703                	add rdi, 3
  8226 00006598 48C1E703                	shl rdi, 3
  8227 0000659C 4801EF                  	add rdi, rbp
  8228 0000659F 488B6D00                	mov rbp, OLD_RDP
  8229 000065A3 BE00000000              	mov rsi, 0
  8230                                  .L_tc_recycle_frame_loop_5cd8:	 ; start recycle frame loop
  8231 000065A8 4883FE03                	cmp rsi, 3
  8232 000065AC 7427                    	je .L_tc_recycle_frame_done_5cd8
  8233 000065AE B902000000              	mov rcx, 2
  8234 000065B3 4829F1                  	sub rcx, rsi
  8235 000065B6 48C1E103                	shl rcx, 3
  8236 000065BA 4801E1                  	add rcx, rsp ; rcx is the address to move
  8237 000065BD 4889F3                  	mov rbx, rsi
  8238 000065C0 48C1E303                	shl rbx, 3
  8239 000065C4 48F7DB                  	neg rbx
  8240 000065C7 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8241 000065CA 488B09                  	mov rcx, [rcx]
  8242 000065CD 48890B                  	mov [rbx], rcx
  8243 000065D0 48FFC6                  	inc rsi
  8244 000065D3 EBD3                    	jmp .L_tc_recycle_frame_loop_5cd8
  8245                                  .L_tc_recycle_frame_done_5cd8:	 ; end recycle frame loop
  8246 000065D5 BB02000000              	mov rbx, 2
  8247 000065DA 48C1E303                	shl rbx, 3
  8248 000065DE 48F7DB                  	neg rbx
  8249 000065E1 4801FB                  	add rbx, rdi
  8250 000065E4 4889DC                  	mov rsp, rbx
  8251 000065E7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8252 000065EB FFE3                    	jmp rbx
  8253                                  	.L_if_end_5691:
  8254                                  	.L_if_end_5690:
  8255 000065ED EB7A                    	jmp .L_if_end_568f
  8256                                  	.L_if_else_568f:
  8257 000065EF 6A00                    	push 0
  8258 000065F1 488B4510                	mov rax, qword [rbp + 8*2]
  8259 000065F5 488B00                  	mov rax, qword [rax + 8*0]
  8260 000065F8 488B00                  	mov rax, qword [rax + 8*0]
  8261                                  	assert_closure(rax)
    65 000065FB 803805              <1>  cmp byte [%1], %2
    66 000065FE 0F8530DB0000        <1>  jne L_error_incorrect_type
  8262 00006604 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8263 00006608 53                      	push rbx
  8264 00006609 FF7508                  	push RET_ADDR
  8265 0000660C 488B7D18                	mov rdi, COUNT
  8266 00006610 4883C703                	add rdi, 3
  8267 00006614 48C1E703                	shl rdi, 3
  8268 00006618 4801EF                  	add rdi, rbp
  8269 0000661B 488B6D00                	mov rbp, OLD_RDP
  8270 0000661F BE00000000              	mov rsi, 0
  8271                                  .L_tc_recycle_frame_loop_5cd9:	 ; start recycle frame loop
  8272 00006624 4883FE03                	cmp rsi, 3
  8273 00006628 7427                    	je .L_tc_recycle_frame_done_5cd9
  8274 0000662A B902000000              	mov rcx, 2
  8275 0000662F 4829F1                  	sub rcx, rsi
  8276 00006632 48C1E103                	shl rcx, 3
  8277 00006636 4801E1                  	add rcx, rsp ; rcx is the address to move
  8278 00006639 4889F3                  	mov rbx, rsi
  8279 0000663C 48C1E303                	shl rbx, 3
  8280 00006640 48F7DB                  	neg rbx
  8281 00006643 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8282 00006646 488B09                  	mov rcx, [rcx]
  8283 00006649 48890B                  	mov [rbx], rcx
  8284 0000664C 48FFC6                  	inc rsi
  8285 0000664F EBD3                    	jmp .L_tc_recycle_frame_loop_5cd9
  8286                                  .L_tc_recycle_frame_done_5cd9:	 ; end recycle frame loop
  8287 00006651 BB02000000              	mov rbx, 2
  8288 00006656 48C1E303                	shl rbx, 3
  8289 0000665A 48F7DB                  	neg rbx
  8290 0000665D 4801FB                  	add rbx, rdi
  8291 00006660 4889DC                  	mov rsp, rbx
  8292 00006663 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8293 00006667 FFE3                    	jmp rbx
  8294                                  	.L_if_end_568f:
  8295                                  	.L_if_end_568c:
  8296 00006669 C9                      	leave
  8297 0000666A C22000                  	ret 8 * (2 + 2)
  8298                                  .L_lambda_simple_end_4f5f:	; new closure is in rax
  8299 0000666D 50                      	push rax
  8300 0000666E 6A01                    	push 1
  8301 00006670 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8302 00006675 E83AC20000              	call malloc
  8303 0000667A 50                      	push rax
  8304 0000667B BF08000000              	mov rdi, 8 * 1	; new rib
  8305 00006680 E82FC20000              	call malloc
  8306 00006685 50                      	push rax
  8307 00006686 BF10000000              	mov rdi, 8 * 2	; extended env
  8308 0000668B E824C20000              	call malloc
  8309 00006690 488B7D10                	mov rdi, ENV
  8310 00006694 BE00000000              	mov rsi, 0
  8311 00006699 BA01000000              	mov rdx, 1
  8312                                  .L_lambda_simple_env_loop_4f60:	; ext_env[i + 1] <-- env[i]
  8313 0000669E 4883FE01                	cmp rsi, 1
  8314 000066A2 7410                    	je .L_lambda_simple_env_end_4f60
  8315 000066A4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  8316 000066A8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8317 000066AC 48FFC6                  	inc rsi
  8318 000066AF 48FFC2                  	inc rdx
  8319 000066B2 EBEA                    	jmp .L_lambda_simple_env_loop_4f60
  8320                                  .L_lambda_simple_env_end_4f60:
  8321 000066B4 5B                      	pop rbx
  8322 000066B5 BE00000000              	mov rsi, 0
  8323                                  .L_lambda_simple_params_loop_4f60:	; copy params
  8324 000066BA 4883FE01                	cmp rsi, 1
  8325 000066BE 740E                    	je .L_lambda_simple_params_end_4f60
  8326 000066C0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8327 000066C5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8328 000066C9 48FFC6                  	inc rsi
  8329 000066CC EBEC                    	jmp .L_lambda_simple_params_loop_4f60
  8330                                  .L_lambda_simple_params_end_4f60:
  8331 000066CE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8332 000066D1 4889C3                  	mov rbx, rax
  8333 000066D4 58                      	pop rax
  8334 000066D5 C60005                  	mov byte [rax], T_closure
  8335 000066D8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8336 000066DC 48C74009[E9660000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f60
  8337 000066E4 E922020000              	jmp .L_lambda_simple_end_4f60
  8338                                  .L_lambda_simple_code_4f60:	; lambda-simple body
  8339 000066E9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8340 000066EF 740B                    	je .L_lambda_simple_arity_check_ok_4f60
  8341 000066F1 FF742410                	push qword [rsp + 8 * 2]
  8342 000066F5 6A01                    	push 1
  8343 000066F7 E971C10000              	jmp L_error_incorrect_arity_simple
  8344                                  .L_lambda_simple_arity_check_ok_4f60:
  8345 000066FC C8000000                	enter 0, 0
  8346 00006700 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8347 00006705 E8AAC10000              	call malloc
  8348 0000670A 50                      	push rax
  8349 0000670B BF08000000              	mov rdi, 8 * 1	; new rib
  8350 00006710 E89FC10000              	call malloc
  8351 00006715 50                      	push rax
  8352 00006716 BF18000000              	mov rdi, 8 * 3	; extended env
  8353 0000671B E894C10000              	call malloc
  8354 00006720 488B7D10                	mov rdi, ENV
  8355 00006724 BE00000000              	mov rsi, 0
  8356 00006729 BA01000000              	mov rdx, 1
  8357                                  .L_lambda_opt_env_loop_0c8e:	; ext_env[i + 1] <-- env[i]
  8358 0000672E 4883FE02                	cmp rsi, 2
  8359 00006732 7410                    	je .L_lambda_opt_env_end_0c8e
  8360 00006734 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  8361 00006738 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8362 0000673C 48FFC6                  	inc rsi
  8363 0000673F 48FFC2                  	inc rdx
  8364 00006742 EBEA                    	jmp .L_lambda_opt_env_loop_0c8e
  8365                                  .L_lambda_opt_env_end_0c8e:
  8366 00006744 5B                      	pop rbx
  8367 00006745 BE00000000              	mov rsi, 0
  8368                                  .L_lambda_opt_params_loop_0c8e:	; copy params
  8369 0000674A 4883FE01                	cmp rsi, 1
  8370 0000674E 740E                    	je .L_lambda_opt_params_end_0c8e
  8371 00006750 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8372 00006755 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8373 00006759 48FFC6                  	inc rsi
  8374 0000675C EBEC                    	jmp .L_lambda_opt_params_loop_0c8e
  8375                                  .L_lambda_opt_params_end_0c8e:
  8376 0000675E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8377 00006761 4889C3                  	mov rbx, rax
  8378 00006764 58                      	pop rax
  8379 00006765 C60005                  	mov byte [rax], T_closure
  8380 00006768 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8381 0000676C 48C74009[79670000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c8e
  8382 00006774 E98E010000              	jmp .L_lambda_opt_end_0c8e
  8383                                  .L_lambda_opt_code_0c8e:	; lambda-opt body
  8384 00006779 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  8385 0000677E 4889FB                  	mov rbx, rdi
  8386 00006781 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
  8387 00006785 4883FB00                	cmp rbx, 0
  8388 00006789 7F45                    	jg .L_lambda_opt_arity_check_more_0c8e
  8389                                  .L_lambda_opt_arity_check_exact_0c8e:	 ; if params in opt is exact
  8390 0000678B 4883EC08                	sub rsp, 8
  8391 0000678F BE00000000              	mov rsi, 0 ; index
  8392                                  .L_lambda_opt_stack_enlarge_loop_0c8e:	 ; stack loop enlarge start
  8393 00006794 4883FE03                	cmp rsi, 3
  8394 00006798 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c8e
  8395 0000679A 4889F7                  	mov rdi, rsi
  8396 0000679D 48FFC7                  	inc rdi
  8397 000067A0 48C1E703                	shl rdi, 3
  8398 000067A4 4801E7                  	add rdi, rsp
  8399 000067A7 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  8400 000067AA 4883EB08                	sub rbx, 8
  8401 000067AE 488B3F                  	mov rdi, [rdi]
  8402 000067B1 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  8403 000067B4 48FFC6                  	inc rsi
  8404 000067B7 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c8e
  8405                                  .L_lambda_opt_stack_enlarge_loop_exit_0c8e:	 ; end of stack enlarge loop
  8406 000067B9 48C7442418-             	mov qword [rsp + 3*8], sob_nil
  8406 000067BE [01000000]         
  8407 000067C2 48C744241001000000      	mov qword [rsp + 2*8], 1
  8408 000067CB E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c8e
  8409                                  .L_lambda_opt_arity_check_more_0c8e:	 ; if params in opt is more
  8410 000067D0 48B8-                   	mov rax, sob_nil
  8410 000067D2 [0100000000000000] 
  8411 000067DA 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  8412 000067DD 48FFCE                  	dec rsi
  8413                                  .L_lambda_opt_list_create_loop_0c8e:	; start of list creation loop
  8414 000067E0 4883FEFF                	cmp rsi, -1
  8415 000067E4 7422                    	je .L_lambda_opt_list_create_loop_exit_0c8e
  8416 000067E6 488D4E03                	lea rcx, [rsi + (3 + 0)]
  8417 000067EA 48C1E103                	shl rcx, 3
  8418 000067EE 4801E1                  	add rcx, rsp
  8419 000067F1 488B09                  	mov rcx, [rcx]
  8420 000067F4 56                      	push rsi ; save params
  8421 000067F5 53                      	push rbx
  8422                                  
  8423 000067F6 50                      	push rax ; cdr
  8424 000067F7 51                      	push rcx ; car
  8425 000067F8 6A02                    	push qword 2 ; push num of args
  8426 000067FA 6A01                    	push qword 1 ; push garbage as env
  8427 000067FC E83ACA0000              	call L_code_ptr_cons
  8428                                  
  8429 00006801 5B                      	pop rbx ; restore params
  8430 00006802 5E                      	pop rsi
  8431 00006803 48FFCE                  	dec rsi
  8432 00006806 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c8e
  8433                                  .L_lambda_opt_list_create_loop_exit_0c8e:	; end of list creation loop
  8434 00006808 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  8435 0000680D 4883C302                	add rbx, 2
  8436 00006811 4889DF                  	mov rdi, rbx
  8437 00006814 48C1E703                	shl rdi,3
  8438 00006818 4801E7                  	add rdi, rsp
  8439 0000681B 488907                  	mov [rdi], rax
  8440 0000681E BE00000000              	mov rsi, 0 ;index
  8441                                  .L_lambda_opt_stack_shrink_loop_0c8e:	; start of stack shrink loop
  8442 00006823 4883FE03                	cmp rsi, 3
  8443 00006827 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c8e
  8444 00006829 BF02000000              	mov rdi, 2
  8445 0000682E 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  8446 00006831 4889D9                  	mov rcx, rbx
  8447 00006834 4829F1                  	sub rcx, rsi
  8448 00006837 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  8449 0000683A 4889FA                  	mov rdx, rdi
  8450 0000683D 48C1E203                	shl rdx, 3
  8451 00006841 4801E2                  	add rdx, rsp
  8452 00006844 48C1E103                	shl rcx, 3
  8453 00006848 4801E1                  	add rcx, rsp
  8454 0000684B 488B12                  	mov rdx, [rdx]
  8455 0000684E 488911                  	mov [rcx], rdx
  8456 00006851 48FFC6                  	inc rsi
  8457 00006854 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c8e
  8458                                  .L_lambda_opt_stack_shrink_loop_exit_0c8e:	; end of stack shrink loop
  8459 00006856 4883EB02                	sub rbx, 2 ; rbx has number of args
  8460 0000685A 4883EB01                	sub rbx, 1
  8461 0000685E 48C1E303                	shl rbx, 3
  8462 00006862 4801DC                  	add rsp, rbx
  8463 00006865 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  8464                                  .L_lambda_opt_stack_adjusted_0c8e:
  8465 0000686E C8000000                	enter 0, 0
  8466 00006872 488B4520                	mov rax, PARAM(0)
  8467 00006876 50                      	push rax
  8468 00006877 488D0425[20000000]      	lea rax, [32 + L_constants]
  8469 0000687F 50                      	push rax
  8470 00006880 488B4510                	mov rax, qword [rbp + 8*2]
  8471 00006884 488B00                  	mov rax, qword [rax + 8*0]
  8472 00006887 488B00                  	mov rax, qword [rax + 8*0]
  8473 0000688A 50                      	push rax
  8474 0000688B 6A03                    	push 3
  8475 0000688D 488B0425[F8020000]      	mov rax, qword [free_var_95]
  8476                                  	assert_closure(rax)
    65 00006895 803805              <1>  cmp byte [%1], %2
    66 00006898 0F8596D80000        <1>  jne L_error_incorrect_type
  8477 0000689E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8478 000068A2 53                      	push rbx
  8479 000068A3 FF7508                  	push RET_ADDR
  8480 000068A6 488B7D18                	mov rdi, COUNT
  8481 000068AA 4883C703                	add rdi, 3
  8482 000068AE 48C1E703                	shl rdi, 3
  8483 000068B2 4801EF                  	add rdi, rbp
  8484 000068B5 488B6D00                	mov rbp, OLD_RDP
  8485 000068B9 BE00000000              	mov rsi, 0
  8486                                  .L_tc_recycle_frame_loop_5cda:	 ; start recycle frame loop
  8487 000068BE 4883FE06                	cmp rsi, 6
  8488 000068C2 7427                    	je .L_tc_recycle_frame_done_5cda
  8489 000068C4 B905000000              	mov rcx, 5
  8490 000068C9 4829F1                  	sub rcx, rsi
  8491 000068CC 48C1E103                	shl rcx, 3
  8492 000068D0 4801E1                  	add rcx, rsp ; rcx is the address to move
  8493 000068D3 4889F3                  	mov rbx, rsi
  8494 000068D6 48C1E303                	shl rbx, 3
  8495 000068DA 48F7DB                  	neg rbx
  8496 000068DD 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8497 000068E0 488B09                  	mov rcx, [rcx]
  8498 000068E3 48890B                  	mov [rbx], rcx
  8499 000068E6 48FFC6                  	inc rsi
  8500 000068E9 EBD3                    	jmp .L_tc_recycle_frame_loop_5cda
  8501                                  .L_tc_recycle_frame_done_5cda:	 ; end recycle frame loop
  8502 000068EB BB05000000              	mov rbx, 5
  8503 000068F0 48C1E303                	shl rbx, 3
  8504 000068F4 48F7DB                  	neg rbx
  8505 000068F7 4801FB                  	add rbx, rdi
  8506 000068FA 4889DC                  	mov rsp, rbx
  8507 000068FD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8508 00006901 FFE3                    	jmp rbx
  8509 00006903 C9                      	leave
  8510 00006904 C21800                  	ret AND_KILL_FRAME(1)
  8511                                  .L_lambda_opt_end_0c8e:	; new closure is in rax
  8512 00006907 C9                      	leave
  8513 00006908 C21800                  	ret 8 * (2 + 1)
  8514                                  .L_lambda_simple_end_4f60:	; new closure is in rax
  8515                                  	assert_closure(rax)
    65 0000690B 803805              <1>  cmp byte [%1], %2
    66 0000690E 0F8520D80000        <1>  jne L_error_incorrect_type
  8516 00006914 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8517 00006918 53                      	push rbx
  8518 00006919 FF7508                  	push RET_ADDR
  8519 0000691C 488B7D18                	mov rdi, COUNT
  8520 00006920 4883C703                	add rdi, 3
  8521 00006924 48C1E703                	shl rdi, 3
  8522 00006928 4801EF                  	add rdi, rbp
  8523 0000692B 488B6D00                	mov rbp, OLD_RDP
  8524 0000692F BE00000000              	mov rsi, 0
  8525                                  .L_tc_recycle_frame_loop_5cd2:	 ; start recycle frame loop
  8526 00006934 4883FE04                	cmp rsi, 4
  8527 00006938 7427                    	je .L_tc_recycle_frame_done_5cd2
  8528 0000693A B903000000              	mov rcx, 3
  8529 0000693F 4829F1                  	sub rcx, rsi
  8530 00006942 48C1E103                	shl rcx, 3
  8531 00006946 4801E1                  	add rcx, rsp ; rcx is the address to move
  8532 00006949 4889F3                  	mov rbx, rsi
  8533 0000694C 48C1E303                	shl rbx, 3
  8534 00006950 48F7DB                  	neg rbx
  8535 00006953 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8536 00006956 488B09                  	mov rcx, [rcx]
  8537 00006959 48890B                  	mov [rbx], rcx
  8538 0000695C 48FFC6                  	inc rsi
  8539 0000695F EBD3                    	jmp .L_tc_recycle_frame_loop_5cd2
  8540                                  .L_tc_recycle_frame_done_5cd2:	 ; end recycle frame loop
  8541 00006961 BB03000000              	mov rbx, 3
  8542 00006966 48C1E303                	shl rbx, 3
  8543 0000696A 48F7DB                  	neg rbx
  8544 0000696D 4801FB                  	add rbx, rdi
  8545 00006970 4889DC                  	mov rsp, rbx
  8546 00006973 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8547 00006977 FFE3                    	jmp rbx
  8548 00006979 C9                      	leave
  8549 0000697A C21800                  	ret 8 * (2 + 1)
  8550                                  .L_lambda_simple_end_4f5e:	; new closure is in rax
  8551                                  	assert_closure(rax)
    65 0000697D 803805              <1>  cmp byte [%1], %2
    66 00006980 0F85AED70000        <1>  jne L_error_incorrect_type
  8552 00006986 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8553 0000698A 53                      	push rbx
  8554 0000698B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8555 0000698F FFD3                    	call rbx
  8556 00006991 48890425[08030000]      	mov qword [free_var_97], rax
  8557 00006999 48B8-                   	mov rax, sob_void
  8557 0000699B [0000000000000000] 
  8558                                  
  8559 000069A3 4889C7                  	mov rdi, rax
  8560 000069A6 E81ABF0000              	call print_sexpr_if_not_void
  8561                                  
  8562 000069AB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8563 000069B0 E8FFBE0000              	call malloc
  8564 000069B5 50                      	push rax
  8565 000069B6 BF00000000              	mov rdi, 8 * 0	; new rib
  8566 000069BB E8F4BE0000              	call malloc
  8567 000069C0 50                      	push rax
  8568 000069C1 BF08000000              	mov rdi, 8 * 1	; extended env
  8569 000069C6 E8E9BE0000              	call malloc
  8570 000069CB 488B7D10                	mov rdi, ENV
  8571 000069CF BE00000000              	mov rsi, 0
  8572 000069D4 BA01000000              	mov rdx, 1
  8573                                  .L_lambda_simple_env_loop_4f61:	; ext_env[i + 1] <-- env[i]
  8574 000069D9 4883FE00                	cmp rsi, 0
  8575 000069DD 7410                    	je .L_lambda_simple_env_end_4f61
  8576 000069DF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  8577 000069E3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8578 000069E7 48FFC6                  	inc rsi
  8579 000069EA 48FFC2                  	inc rdx
  8580 000069ED EBEA                    	jmp .L_lambda_simple_env_loop_4f61
  8581                                  .L_lambda_simple_env_end_4f61:
  8582 000069EF 5B                      	pop rbx
  8583 000069F0 BE00000000              	mov rsi, 0
  8584                                  .L_lambda_simple_params_loop_4f61:	; copy params
  8585 000069F5 4883FE00                	cmp rsi, 0
  8586 000069F9 740E                    	je .L_lambda_simple_params_end_4f61
  8587 000069FB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8588 00006A00 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8589 00006A04 48FFC6                  	inc rsi
  8590 00006A07 EBEC                    	jmp .L_lambda_simple_params_loop_4f61
  8591                                  .L_lambda_simple_params_end_4f61:
  8592 00006A09 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8593 00006A0C 4889C3                  	mov rbx, rax
  8594 00006A0F 58                      	pop rax
  8595 00006A10 C60005                  	mov byte [rax], T_closure
  8596 00006A13 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8597 00006A17 48C74009[246A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f61
  8598 00006A1F E9A5000000              	jmp .L_lambda_simple_end_4f61
  8599                                  .L_lambda_simple_code_4f61:	; lambda-simple body
  8600 00006A24 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8601 00006A2A 740B                    	je .L_lambda_simple_arity_check_ok_4f61
  8602 00006A2C FF742410                	push qword [rsp + 8 * 2]
  8603 00006A30 6A00                    	push 0
  8604 00006A32 E936BE0000              	jmp L_error_incorrect_arity_simple
  8605                                  .L_lambda_simple_arity_check_ok_4f61:
  8606 00006A37 C8000000                	enter 0, 0
  8607 00006A3B 488D0425[44000000]      	lea rax, [68 + L_constants]
  8608 00006A43 50                      	push rax
  8609 00006A44 488D0425[77000000]      	lea rax, [119 + L_constants]
  8610 00006A4C 50                      	push rax
  8611 00006A4D 6A02                    	push 2
  8612 00006A4F 488B0425[30010000]      	mov rax, qword [free_var_38]
  8613                                  	assert_closure(rax)
    65 00006A57 803805              <1>  cmp byte [%1], %2
    66 00006A5A 0F85D4D60000        <1>  jne L_error_incorrect_type
  8614 00006A60 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8615 00006A64 53                      	push rbx
  8616 00006A65 FF7508                  	push RET_ADDR
  8617 00006A68 488B7D18                	mov rdi, COUNT
  8618 00006A6C 4883C703                	add rdi, 3
  8619 00006A70 48C1E703                	shl rdi, 3
  8620 00006A74 4801EF                  	add rdi, rbp
  8621 00006A77 488B6D00                	mov rbp, OLD_RDP
  8622 00006A7B BE00000000              	mov rsi, 0
  8623                                  .L_tc_recycle_frame_loop_5cdb:	 ; start recycle frame loop
  8624 00006A80 4883FE05                	cmp rsi, 5
  8625 00006A84 7427                    	je .L_tc_recycle_frame_done_5cdb
  8626 00006A86 B904000000              	mov rcx, 4
  8627 00006A8B 4829F1                  	sub rcx, rsi
  8628 00006A8E 48C1E103                	shl rcx, 3
  8629 00006A92 4801E1                  	add rcx, rsp ; rcx is the address to move
  8630 00006A95 4889F3                  	mov rbx, rsi
  8631 00006A98 48C1E303                	shl rbx, 3
  8632 00006A9C 48F7DB                  	neg rbx
  8633 00006A9F 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8634 00006AA2 488B09                  	mov rcx, [rcx]
  8635 00006AA5 48890B                  	mov [rbx], rcx
  8636 00006AA8 48FFC6                  	inc rsi
  8637 00006AAB EBD3                    	jmp .L_tc_recycle_frame_loop_5cdb
  8638                                  .L_tc_recycle_frame_done_5cdb:	 ; end recycle frame loop
  8639 00006AAD BB04000000              	mov rbx, 4
  8640 00006AB2 48C1E303                	shl rbx, 3
  8641 00006AB6 48F7DB                  	neg rbx
  8642 00006AB9 4801FB                  	add rbx, rdi
  8643 00006ABC 4889DC                  	mov rsp, rbx
  8644 00006ABF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8645 00006AC3 FFE3                    	jmp rbx
  8646 00006AC5 C9                      	leave
  8647 00006AC6 C21000                  	ret 8 * (2 + 0)
  8648                                  .L_lambda_simple_end_4f61:	; new closure is in rax
  8649 00006AC9 50                      	push rax
  8650 00006ACA 6A01                    	push 1
  8651 00006ACC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8652 00006AD1 E8DEBD0000              	call malloc
  8653 00006AD6 50                      	push rax
  8654 00006AD7 BF00000000              	mov rdi, 8 * 0	; new rib
  8655 00006ADC E8D3BD0000              	call malloc
  8656 00006AE1 50                      	push rax
  8657 00006AE2 BF08000000              	mov rdi, 8 * 1	; extended env
  8658 00006AE7 E8C8BD0000              	call malloc
  8659 00006AEC 488B7D10                	mov rdi, ENV
  8660 00006AF0 BE00000000              	mov rsi, 0
  8661 00006AF5 BA01000000              	mov rdx, 1
  8662                                  .L_lambda_simple_env_loop_4f62:	; ext_env[i + 1] <-- env[i]
  8663 00006AFA 4883FE00                	cmp rsi, 0
  8664 00006AFE 7410                    	je .L_lambda_simple_env_end_4f62
  8665 00006B00 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  8666 00006B04 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8667 00006B08 48FFC6                  	inc rsi
  8668 00006B0B 48FFC2                  	inc rdx
  8669 00006B0E EBEA                    	jmp .L_lambda_simple_env_loop_4f62
  8670                                  .L_lambda_simple_env_end_4f62:
  8671 00006B10 5B                      	pop rbx
  8672 00006B11 BE00000000              	mov rsi, 0
  8673                                  .L_lambda_simple_params_loop_4f62:	; copy params
  8674 00006B16 4883FE00                	cmp rsi, 0
  8675 00006B1A 740E                    	je .L_lambda_simple_params_end_4f62
  8676 00006B1C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8677 00006B21 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8678 00006B25 48FFC6                  	inc rsi
  8679 00006B28 EBEC                    	jmp .L_lambda_simple_params_loop_4f62
  8680                                  .L_lambda_simple_params_end_4f62:
  8681 00006B2A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8682 00006B2D 4889C3                  	mov rbx, rax
  8683 00006B30 58                      	pop rax
  8684 00006B31 C60005                  	mov byte [rax], T_closure
  8685 00006B34 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8686 00006B38 48C74009[456B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f62
  8687 00006B40 E98E0A0000              	jmp .L_lambda_simple_end_4f62
  8688                                  .L_lambda_simple_code_4f62:	; lambda-simple body
  8689 00006B45 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8690 00006B4B 740B                    	je .L_lambda_simple_arity_check_ok_4f62
  8691 00006B4D FF742410                	push qword [rsp + 8 * 2]
  8692 00006B51 6A01                    	push 1
  8693 00006B53 E915BD0000              	jmp L_error_incorrect_arity_simple
  8694                                  .L_lambda_simple_arity_check_ok_4f62:
  8695 00006B58 C8000000                	enter 0, 0
  8696 00006B5C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8697 00006B61 E84EBD0000              	call malloc
  8698 00006B66 50                      	push rax
  8699 00006B67 BF08000000              	mov rdi, 8 * 1	; new rib
  8700 00006B6C E843BD0000              	call malloc
  8701 00006B71 50                      	push rax
  8702 00006B72 BF10000000              	mov rdi, 8 * 2	; extended env
  8703 00006B77 E838BD0000              	call malloc
  8704 00006B7C 488B7D10                	mov rdi, ENV
  8705 00006B80 BE00000000              	mov rsi, 0
  8706 00006B85 BA01000000              	mov rdx, 1
  8707                                  .L_lambda_simple_env_loop_4f63:	; ext_env[i + 1] <-- env[i]
  8708 00006B8A 4883FE01                	cmp rsi, 1
  8709 00006B8E 7410                    	je .L_lambda_simple_env_end_4f63
  8710 00006B90 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  8711 00006B94 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8712 00006B98 48FFC6                  	inc rsi
  8713 00006B9B 48FFC2                  	inc rdx
  8714 00006B9E EBEA                    	jmp .L_lambda_simple_env_loop_4f63
  8715                                  .L_lambda_simple_env_end_4f63:
  8716 00006BA0 5B                      	pop rbx
  8717 00006BA1 BE00000000              	mov rsi, 0
  8718                                  .L_lambda_simple_params_loop_4f63:	; copy params
  8719 00006BA6 4883FE01                	cmp rsi, 1
  8720 00006BAA 740E                    	je .L_lambda_simple_params_end_4f63
  8721 00006BAC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8722 00006BB1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8723 00006BB5 48FFC6                  	inc rsi
  8724 00006BB8 EBEC                    	jmp .L_lambda_simple_params_loop_4f63
  8725                                  .L_lambda_simple_params_end_4f63:
  8726 00006BBA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8727 00006BBD 4889C3                  	mov rbx, rax
  8728 00006BC0 58                      	pop rax
  8729 00006BC1 C60005                  	mov byte [rax], T_closure
  8730 00006BC4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8731 00006BC8 48C74009[D56B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f63
  8732 00006BD0 E9FE040000              	jmp .L_lambda_simple_end_4f63
  8733                                  .L_lambda_simple_code_4f63:	; lambda-simple body
  8734 00006BD5 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8735 00006BDB 740B                    	je .L_lambda_simple_arity_check_ok_4f63
  8736 00006BDD FF742410                	push qword [rsp + 8 * 2]
  8737 00006BE1 6A02                    	push 2
  8738 00006BE3 E985BC0000              	jmp L_error_incorrect_arity_simple
  8739                                  .L_lambda_simple_arity_check_ok_4f63:
  8740 00006BE8 C8000000                	enter 0, 0
  8741 00006BEC 488B4520                	mov rax, PARAM(0)
  8742 00006BF0 50                      	push rax
  8743 00006BF1 6A01                    	push 1
  8744 00006BF3 488B0425[48000000]      	mov rax, qword [free_var_9]
  8745                                  	assert_closure(rax)
    65 00006BFB 803805              <1>  cmp byte [%1], %2
    66 00006BFE 0F8530D50000        <1>  jne L_error_incorrect_type
  8746 00006C04 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8747 00006C08 53                      	push rbx
  8748 00006C09 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8749 00006C0D FFD3                    	call rbx
  8750 00006C0F 483D[02000000]          	cmp rax, sob_boolean_false
  8751 00006C15 0F8407020000            	je .L_if_else_5692
  8752 00006C1B 488B4528                	mov rax, PARAM(1)
  8753 00006C1F 50                      	push rax
  8754 00006C20 6A01                    	push 1
  8755 00006C22 488B0425[48000000]      	mov rax, qword [free_var_9]
  8756                                  	assert_closure(rax)
    65 00006C2A 803805              <1>  cmp byte [%1], %2
    66 00006C2D 0F8501D50000        <1>  jne L_error_incorrect_type
  8757 00006C33 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8758 00006C37 53                      	push rbx
  8759 00006C38 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8760 00006C3C FFD3                    	call rbx
  8761 00006C3E 483D[02000000]          	cmp rax, sob_boolean_false
  8762 00006C44 0F8487000000            	je .L_if_else_5693
  8763 00006C4A 488B4528                	mov rax, PARAM(1)
  8764 00006C4E 50                      	push rax
  8765 00006C4F 488B4520                	mov rax, PARAM(0)
  8766 00006C53 50                      	push rax
  8767 00006C54 6A02                    	push 2
  8768 00006C56 488B0425[18010000]      	mov rax, qword [free_var_35]
  8769                                  	assert_closure(rax)
    65 00006C5E 803805              <1>  cmp byte [%1], %2
    66 00006C61 0F85CDD40000        <1>  jne L_error_incorrect_type
  8770 00006C67 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8771 00006C6B 53                      	push rbx
  8772 00006C6C FF7508                  	push RET_ADDR
  8773 00006C6F 488B7D18                	mov rdi, COUNT
  8774 00006C73 4883C703                	add rdi, 3
  8775 00006C77 48C1E703                	shl rdi, 3
  8776 00006C7B 4801EF                  	add rdi, rbp
  8777 00006C7E 488B6D00                	mov rbp, OLD_RDP
  8778 00006C82 BE00000000              	mov rsi, 0
  8779                                  .L_tc_recycle_frame_loop_5cdd:	 ; start recycle frame loop
  8780 00006C87 4883FE05                	cmp rsi, 5
  8781 00006C8B 7427                    	je .L_tc_recycle_frame_done_5cdd
  8782 00006C8D B904000000              	mov rcx, 4
  8783 00006C92 4829F1                  	sub rcx, rsi
  8784 00006C95 48C1E103                	shl rcx, 3
  8785 00006C99 4801E1                  	add rcx, rsp ; rcx is the address to move
  8786 00006C9C 4889F3                  	mov rbx, rsi
  8787 00006C9F 48C1E303                	shl rbx, 3
  8788 00006CA3 48F7DB                  	neg rbx
  8789 00006CA6 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8790 00006CA9 488B09                  	mov rcx, [rcx]
  8791 00006CAC 48890B                  	mov [rbx], rcx
  8792 00006CAF 48FFC6                  	inc rsi
  8793 00006CB2 EBD3                    	jmp .L_tc_recycle_frame_loop_5cdd
  8794                                  .L_tc_recycle_frame_done_5cdd:	 ; end recycle frame loop
  8795 00006CB4 BB04000000              	mov rbx, 4
  8796 00006CB9 48C1E303                	shl rbx, 3
  8797 00006CBD 48F7DB                  	neg rbx
  8798 00006CC0 4801FB                  	add rbx, rdi
  8799 00006CC3 4889DC                  	mov rsp, rbx
  8800 00006CC6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8801 00006CCA FFE3                    	jmp rbx
  8802 00006CCC E94C010000              	jmp .L_if_end_5693
  8803                                  	.L_if_else_5693:
  8804 00006CD1 488B4528                	mov rax, PARAM(1)
  8805 00006CD5 50                      	push rax
  8806 00006CD6 6A01                    	push 1
  8807 00006CD8 488B0425[40000000]      	mov rax, qword [free_var_8]
  8808                                  	assert_closure(rax)
    65 00006CE0 803805              <1>  cmp byte [%1], %2
    66 00006CE3 0F854BD40000        <1>  jne L_error_incorrect_type
  8809 00006CE9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8810 00006CED 53                      	push rbx
  8811 00006CEE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8812 00006CF2 FFD3                    	call rbx
  8813 00006CF4 483D[02000000]          	cmp rax, sob_boolean_false
  8814 00006CFA 0F84A3000000            	je .L_if_else_5694
  8815 00006D00 488B4528                	mov rax, PARAM(1)
  8816 00006D04 50                      	push rax
  8817 00006D05 488B4520                	mov rax, PARAM(0)
  8818 00006D09 50                      	push rax
  8819 00006D0A 6A01                    	push 1
  8820 00006D0C 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8821                                  	assert_closure(rax)
    65 00006D14 803805              <1>  cmp byte [%1], %2
    66 00006D17 0F8517D40000        <1>  jne L_error_incorrect_type
  8822 00006D1D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8823 00006D21 53                      	push rbx
  8824 00006D22 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8825 00006D26 FFD3                    	call rbx
  8826 00006D28 50                      	push rax
  8827 00006D29 6A02                    	push 2
  8828 00006D2B 488B0425[F8000000]      	mov rax, qword [free_var_31]
  8829                                  	assert_closure(rax)
    65 00006D33 803805              <1>  cmp byte [%1], %2
    66 00006D36 0F85F8D30000        <1>  jne L_error_incorrect_type
  8830 00006D3C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8831 00006D40 53                      	push rbx
  8832 00006D41 FF7508                  	push RET_ADDR
  8833 00006D44 488B7D18                	mov rdi, COUNT
  8834 00006D48 4883C703                	add rdi, 3
  8835 00006D4C 48C1E703                	shl rdi, 3
  8836 00006D50 4801EF                  	add rdi, rbp
  8837 00006D53 488B6D00                	mov rbp, OLD_RDP
  8838 00006D57 BE00000000              	mov rsi, 0
  8839                                  .L_tc_recycle_frame_loop_5cde:	 ; start recycle frame loop
  8840 00006D5C 4883FE05                	cmp rsi, 5
  8841 00006D60 7427                    	je .L_tc_recycle_frame_done_5cde
  8842 00006D62 B904000000              	mov rcx, 4
  8843 00006D67 4829F1                  	sub rcx, rsi
  8844 00006D6A 48C1E103                	shl rcx, 3
  8845 00006D6E 4801E1                  	add rcx, rsp ; rcx is the address to move
  8846 00006D71 4889F3                  	mov rbx, rsi
  8847 00006D74 48C1E303                	shl rbx, 3
  8848 00006D78 48F7DB                  	neg rbx
  8849 00006D7B 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8850 00006D7E 488B09                  	mov rcx, [rcx]
  8851 00006D81 48890B                  	mov [rbx], rcx
  8852 00006D84 48FFC6                  	inc rsi
  8853 00006D87 EBD3                    	jmp .L_tc_recycle_frame_loop_5cde
  8854                                  .L_tc_recycle_frame_done_5cde:	 ; end recycle frame loop
  8855 00006D89 BB04000000              	mov rbx, 4
  8856 00006D8E 48C1E303                	shl rbx, 3
  8857 00006D92 48F7DB                  	neg rbx
  8858 00006D95 4801FB                  	add rbx, rdi
  8859 00006D98 4889DC                  	mov rsp, rbx
  8860 00006D9B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8861 00006D9F FFE3                    	jmp rbx
  8862 00006DA1 EB7A                    	jmp .L_if_end_5694
  8863                                  	.L_if_else_5694:
  8864 00006DA3 6A00                    	push 0
  8865 00006DA5 488B4510                	mov rax, qword [rbp + 8*2]
  8866 00006DA9 488B00                  	mov rax, qword [rax + 8*0]
  8867 00006DAC 488B00                  	mov rax, qword [rax + 8*0]
  8868                                  	assert_closure(rax)
    65 00006DAF 803805              <1>  cmp byte [%1], %2
    66 00006DB2 0F857CD30000        <1>  jne L_error_incorrect_type
  8869 00006DB8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8870 00006DBC 53                      	push rbx
  8871 00006DBD FF7508                  	push RET_ADDR
  8872 00006DC0 488B7D18                	mov rdi, COUNT
  8873 00006DC4 4883C703                	add rdi, 3
  8874 00006DC8 48C1E703                	shl rdi, 3
  8875 00006DCC 4801EF                  	add rdi, rbp
  8876 00006DCF 488B6D00                	mov rbp, OLD_RDP
  8877 00006DD3 BE00000000              	mov rsi, 0
  8878                                  .L_tc_recycle_frame_loop_5cdf:	 ; start recycle frame loop
  8879 00006DD8 4883FE03                	cmp rsi, 3
  8880 00006DDC 7427                    	je .L_tc_recycle_frame_done_5cdf
  8881 00006DDE B902000000              	mov rcx, 2
  8882 00006DE3 4829F1                  	sub rcx, rsi
  8883 00006DE6 48C1E103                	shl rcx, 3
  8884 00006DEA 4801E1                  	add rcx, rsp ; rcx is the address to move
  8885 00006DED 4889F3                  	mov rbx, rsi
  8886 00006DF0 48C1E303                	shl rbx, 3
  8887 00006DF4 48F7DB                  	neg rbx
  8888 00006DF7 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8889 00006DFA 488B09                  	mov rcx, [rcx]
  8890 00006DFD 48890B                  	mov [rbx], rcx
  8891 00006E00 48FFC6                  	inc rsi
  8892 00006E03 EBD3                    	jmp .L_tc_recycle_frame_loop_5cdf
  8893                                  .L_tc_recycle_frame_done_5cdf:	 ; end recycle frame loop
  8894 00006E05 BB02000000              	mov rbx, 2
  8895 00006E0A 48C1E303                	shl rbx, 3
  8896 00006E0E 48F7DB                  	neg rbx
  8897 00006E11 4801FB                  	add rbx, rdi
  8898 00006E14 4889DC                  	mov rsp, rbx
  8899 00006E17 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8900 00006E1B FFE3                    	jmp rbx
  8901                                  	.L_if_end_5694:
  8902                                  	.L_if_end_5693:
  8903 00006E1D E9AD020000              	jmp .L_if_end_5692
  8904                                  	.L_if_else_5692:
  8905 00006E22 488B4520                	mov rax, PARAM(0)
  8906 00006E26 50                      	push rax
  8907 00006E27 6A01                    	push 1
  8908 00006E29 488B0425[40000000]      	mov rax, qword [free_var_8]
  8909                                  	assert_closure(rax)
    65 00006E31 803805              <1>  cmp byte [%1], %2
    66 00006E34 0F85FAD20000        <1>  jne L_error_incorrect_type
  8910 00006E3A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8911 00006E3E 53                      	push rbx
  8912 00006E3F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8913 00006E43 FFD3                    	call rbx
  8914 00006E45 483D[02000000]          	cmp rax, sob_boolean_false
  8915 00006E4B 0F8404020000            	je .L_if_else_5695
  8916 00006E51 488B4528                	mov rax, PARAM(1)
  8917 00006E55 50                      	push rax
  8918 00006E56 6A01                    	push 1
  8919 00006E58 488B0425[48000000]      	mov rax, qword [free_var_9]
  8920                                  	assert_closure(rax)
    65 00006E60 803805              <1>  cmp byte [%1], %2
    66 00006E63 0F85CBD20000        <1>  jne L_error_incorrect_type
  8921 00006E69 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8922 00006E6D 53                      	push rbx
  8923 00006E6E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8924 00006E72 FFD3                    	call rbx
  8925 00006E74 483D[02000000]          	cmp rax, sob_boolean_false
  8926 00006E7A 0F84A6000000            	je .L_if_else_5696
  8927 00006E80 488B4528                	mov rax, PARAM(1)
  8928 00006E84 50                      	push rax
  8929 00006E85 6A01                    	push 1
  8930 00006E87 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8931                                  	assert_closure(rax)
    65 00006E8F 803805              <1>  cmp byte [%1], %2
    66 00006E92 0F859CD20000        <1>  jne L_error_incorrect_type
  8932 00006E98 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8933 00006E9C 53                      	push rbx
  8934 00006E9D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8935 00006EA1 FFD3                    	call rbx
  8936 00006EA3 50                      	push rax
  8937 00006EA4 488B4520                	mov rax, PARAM(0)
  8938 00006EA8 50                      	push rax
  8939 00006EA9 6A02                    	push 2
  8940 00006EAB 488B0425[F8000000]      	mov rax, qword [free_var_31]
  8941                                  	assert_closure(rax)
    65 00006EB3 803805              <1>  cmp byte [%1], %2
    66 00006EB6 0F8578D20000        <1>  jne L_error_incorrect_type
  8942 00006EBC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8943 00006EC0 53                      	push rbx
  8944 00006EC1 FF7508                  	push RET_ADDR
  8945 00006EC4 488B7D18                	mov rdi, COUNT
  8946 00006EC8 4883C703                	add rdi, 3
  8947 00006ECC 48C1E703                	shl rdi, 3
  8948 00006ED0 4801EF                  	add rdi, rbp
  8949 00006ED3 488B6D00                	mov rbp, OLD_RDP
  8950 00006ED7 BE00000000              	mov rsi, 0
  8951                                  .L_tc_recycle_frame_loop_5ce0:	 ; start recycle frame loop
  8952 00006EDC 4883FE05                	cmp rsi, 5
  8953 00006EE0 7427                    	je .L_tc_recycle_frame_done_5ce0
  8954 00006EE2 B904000000              	mov rcx, 4
  8955 00006EE7 4829F1                  	sub rcx, rsi
  8956 00006EEA 48C1E103                	shl rcx, 3
  8957 00006EEE 4801E1                  	add rcx, rsp ; rcx is the address to move
  8958 00006EF1 4889F3                  	mov rbx, rsi
  8959 00006EF4 48C1E303                	shl rbx, 3
  8960 00006EF8 48F7DB                  	neg rbx
  8961 00006EFB 4801FB                  	add rbx, rdi ;rbx is the address to move to
  8962 00006EFE 488B09                  	mov rcx, [rcx]
  8963 00006F01 48890B                  	mov [rbx], rcx
  8964 00006F04 48FFC6                  	inc rsi
  8965 00006F07 EBD3                    	jmp .L_tc_recycle_frame_loop_5ce0
  8966                                  .L_tc_recycle_frame_done_5ce0:	 ; end recycle frame loop
  8967 00006F09 BB04000000              	mov rbx, 4
  8968 00006F0E 48C1E303                	shl rbx, 3
  8969 00006F12 48F7DB                  	neg rbx
  8970 00006F15 4801FB                  	add rbx, rdi
  8971 00006F18 4889DC                  	mov rsp, rbx
  8972 00006F1B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8973 00006F1F FFE3                    	jmp rbx
  8974 00006F21 E92D010000              	jmp .L_if_end_5696
  8975                                  	.L_if_else_5696:
  8976 00006F26 488B4528                	mov rax, PARAM(1)
  8977 00006F2A 50                      	push rax
  8978 00006F2B 6A01                    	push 1
  8979 00006F2D 488B0425[40000000]      	mov rax, qword [free_var_8]
  8980                                  	assert_closure(rax)
    65 00006F35 803805              <1>  cmp byte [%1], %2
    66 00006F38 0F85F6D10000        <1>  jne L_error_incorrect_type
  8981 00006F3E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8982 00006F42 53                      	push rbx
  8983 00006F43 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8984 00006F47 FFD3                    	call rbx
  8985 00006F49 483D[02000000]          	cmp rax, sob_boolean_false
  8986 00006F4F 0F8484000000            	je .L_if_else_5697
  8987 00006F55 488B4528                	mov rax, PARAM(1)
  8988 00006F59 50                      	push rax
  8989 00006F5A 488B4520                	mov rax, PARAM(0)
  8990 00006F5E 50                      	push rax
  8991 00006F5F 6A02                    	push 2
  8992 00006F61 488B0425[F8000000]      	mov rax, qword [free_var_31]
  8993                                  	assert_closure(rax)
    65 00006F69 803805              <1>  cmp byte [%1], %2
    66 00006F6C 0F85C2D10000        <1>  jne L_error_incorrect_type
  8994 00006F72 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8995 00006F76 53                      	push rbx
  8996 00006F77 FF7508                  	push RET_ADDR
  8997 00006F7A 488B7D18                	mov rdi, COUNT
  8998 00006F7E 4883C703                	add rdi, 3
  8999 00006F82 48C1E703                	shl rdi, 3
  9000 00006F86 4801EF                  	add rdi, rbp
  9001 00006F89 488B6D00                	mov rbp, OLD_RDP
  9002 00006F8D BE00000000              	mov rsi, 0
  9003                                  .L_tc_recycle_frame_loop_5ce1:	 ; start recycle frame loop
  9004 00006F92 4883FE05                	cmp rsi, 5
  9005 00006F96 7427                    	je .L_tc_recycle_frame_done_5ce1
  9006 00006F98 B904000000              	mov rcx, 4
  9007 00006F9D 4829F1                  	sub rcx, rsi
  9008 00006FA0 48C1E103                	shl rcx, 3
  9009 00006FA4 4801E1                  	add rcx, rsp ; rcx is the address to move
  9010 00006FA7 4889F3                  	mov rbx, rsi
  9011 00006FAA 48C1E303                	shl rbx, 3
  9012 00006FAE 48F7DB                  	neg rbx
  9013 00006FB1 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9014 00006FB4 488B09                  	mov rcx, [rcx]
  9015 00006FB7 48890B                  	mov [rbx], rcx
  9016 00006FBA 48FFC6                  	inc rsi
  9017 00006FBD EBD3                    	jmp .L_tc_recycle_frame_loop_5ce1
  9018                                  .L_tc_recycle_frame_done_5ce1:	 ; end recycle frame loop
  9019 00006FBF BB04000000              	mov rbx, 4
  9020 00006FC4 48C1E303                	shl rbx, 3
  9021 00006FC8 48F7DB                  	neg rbx
  9022 00006FCB 4801FB                  	add rbx, rdi
  9023 00006FCE 4889DC                  	mov rsp, rbx
  9024 00006FD1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9025 00006FD5 FFE3                    	jmp rbx
  9026 00006FD7 EB7A                    	jmp .L_if_end_5697
  9027                                  	.L_if_else_5697:
  9028 00006FD9 6A00                    	push 0
  9029 00006FDB 488B4510                	mov rax, qword [rbp + 8*2]
  9030 00006FDF 488B00                  	mov rax, qword [rax + 8*0]
  9031 00006FE2 488B00                  	mov rax, qword [rax + 8*0]
  9032                                  	assert_closure(rax)
    65 00006FE5 803805              <1>  cmp byte [%1], %2
    66 00006FE8 0F8546D10000        <1>  jne L_error_incorrect_type
  9033 00006FEE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9034 00006FF2 53                      	push rbx
  9035 00006FF3 FF7508                  	push RET_ADDR
  9036 00006FF6 488B7D18                	mov rdi, COUNT
  9037 00006FFA 4883C703                	add rdi, 3
  9038 00006FFE 48C1E703                	shl rdi, 3
  9039 00007002 4801EF                  	add rdi, rbp
  9040 00007005 488B6D00                	mov rbp, OLD_RDP
  9041 00007009 BE00000000              	mov rsi, 0
  9042                                  .L_tc_recycle_frame_loop_5ce2:	 ; start recycle frame loop
  9043 0000700E 4883FE03                	cmp rsi, 3
  9044 00007012 7427                    	je .L_tc_recycle_frame_done_5ce2
  9045 00007014 B902000000              	mov rcx, 2
  9046 00007019 4829F1                  	sub rcx, rsi
  9047 0000701C 48C1E103                	shl rcx, 3
  9048 00007020 4801E1                  	add rcx, rsp ; rcx is the address to move
  9049 00007023 4889F3                  	mov rbx, rsi
  9050 00007026 48C1E303                	shl rbx, 3
  9051 0000702A 48F7DB                  	neg rbx
  9052 0000702D 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9053 00007030 488B09                  	mov rcx, [rcx]
  9054 00007033 48890B                  	mov [rbx], rcx
  9055 00007036 48FFC6                  	inc rsi
  9056 00007039 EBD3                    	jmp .L_tc_recycle_frame_loop_5ce2
  9057                                  .L_tc_recycle_frame_done_5ce2:	 ; end recycle frame loop
  9058 0000703B BB02000000              	mov rbx, 2
  9059 00007040 48C1E303                	shl rbx, 3
  9060 00007044 48F7DB                  	neg rbx
  9061 00007047 4801FB                  	add rbx, rdi
  9062 0000704A 4889DC                  	mov rsp, rbx
  9063 0000704D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9064 00007051 FFE3                    	jmp rbx
  9065                                  	.L_if_end_5697:
  9066                                  	.L_if_end_5696:
  9067 00007053 EB7A                    	jmp .L_if_end_5695
  9068                                  	.L_if_else_5695:
  9069 00007055 6A00                    	push 0
  9070 00007057 488B4510                	mov rax, qword [rbp + 8*2]
  9071 0000705B 488B00                  	mov rax, qword [rax + 8*0]
  9072 0000705E 488B00                  	mov rax, qword [rax + 8*0]
  9073                                  	assert_closure(rax)
    65 00007061 803805              <1>  cmp byte [%1], %2
    66 00007064 0F85CAD00000        <1>  jne L_error_incorrect_type
  9074 0000706A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9075 0000706E 53                      	push rbx
  9076 0000706F FF7508                  	push RET_ADDR
  9077 00007072 488B7D18                	mov rdi, COUNT
  9078 00007076 4883C703                	add rdi, 3
  9079 0000707A 48C1E703                	shl rdi, 3
  9080 0000707E 4801EF                  	add rdi, rbp
  9081 00007081 488B6D00                	mov rbp, OLD_RDP
  9082 00007085 BE00000000              	mov rsi, 0
  9083                                  .L_tc_recycle_frame_loop_5ce3:	 ; start recycle frame loop
  9084 0000708A 4883FE03                	cmp rsi, 3
  9085 0000708E 7427                    	je .L_tc_recycle_frame_done_5ce3
  9086 00007090 B902000000              	mov rcx, 2
  9087 00007095 4829F1                  	sub rcx, rsi
  9088 00007098 48C1E103                	shl rcx, 3
  9089 0000709C 4801E1                  	add rcx, rsp ; rcx is the address to move
  9090 0000709F 4889F3                  	mov rbx, rsi
  9091 000070A2 48C1E303                	shl rbx, 3
  9092 000070A6 48F7DB                  	neg rbx
  9093 000070A9 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9094 000070AC 488B09                  	mov rcx, [rcx]
  9095 000070AF 48890B                  	mov [rbx], rcx
  9096 000070B2 48FFC6                  	inc rsi
  9097 000070B5 EBD3                    	jmp .L_tc_recycle_frame_loop_5ce3
  9098                                  .L_tc_recycle_frame_done_5ce3:	 ; end recycle frame loop
  9099 000070B7 BB02000000              	mov rbx, 2
  9100 000070BC 48C1E303                	shl rbx, 3
  9101 000070C0 48F7DB                  	neg rbx
  9102 000070C3 4801FB                  	add rbx, rdi
  9103 000070C6 4889DC                  	mov rsp, rbx
  9104 000070C9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9105 000070CD FFE3                    	jmp rbx
  9106                                  	.L_if_end_5695:
  9107                                  	.L_if_end_5692:
  9108 000070CF C9                      	leave
  9109 000070D0 C22000                  	ret 8 * (2 + 2)
  9110                                  .L_lambda_simple_end_4f63:	; new closure is in rax
  9111 000070D3 50                      	push rax
  9112 000070D4 6A01                    	push 1
  9113 000070D6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9114 000070DB E8D4B70000              	call malloc
  9115 000070E0 50                      	push rax
  9116 000070E1 BF08000000              	mov rdi, 8 * 1	; new rib
  9117 000070E6 E8C9B70000              	call malloc
  9118 000070EB 50                      	push rax
  9119 000070EC BF10000000              	mov rdi, 8 * 2	; extended env
  9120 000070F1 E8BEB70000              	call malloc
  9121 000070F6 488B7D10                	mov rdi, ENV
  9122 000070FA BE00000000              	mov rsi, 0
  9123 000070FF BA01000000              	mov rdx, 1
  9124                                  .L_lambda_simple_env_loop_4f64:	; ext_env[i + 1] <-- env[i]
  9125 00007104 4883FE01                	cmp rsi, 1
  9126 00007108 7410                    	je .L_lambda_simple_env_end_4f64
  9127 0000710A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  9128 0000710E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9129 00007112 48FFC6                  	inc rsi
  9130 00007115 48FFC2                  	inc rdx
  9131 00007118 EBEA                    	jmp .L_lambda_simple_env_loop_4f64
  9132                                  .L_lambda_simple_env_end_4f64:
  9133 0000711A 5B                      	pop rbx
  9134 0000711B BE00000000              	mov rsi, 0
  9135                                  .L_lambda_simple_params_loop_4f64:	; copy params
  9136 00007120 4883FE01                	cmp rsi, 1
  9137 00007124 740E                    	je .L_lambda_simple_params_end_4f64
  9138 00007126 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9139 0000712B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9140 0000712F 48FFC6                  	inc rsi
  9141 00007132 EBEC                    	jmp .L_lambda_simple_params_loop_4f64
  9142                                  .L_lambda_simple_params_end_4f64:
  9143 00007134 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9144 00007137 4889C3                  	mov rbx, rax
  9145 0000713A 58                      	pop rax
  9146 0000713B C60005                  	mov byte [rax], T_closure
  9147 0000713E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9148 00007142 48C74009[4F710000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f64
  9149 0000714A E912040000              	jmp .L_lambda_simple_end_4f64
  9150                                  .L_lambda_simple_code_4f64:	; lambda-simple body
  9151 0000714F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9152 00007155 740B                    	je .L_lambda_simple_arity_check_ok_4f64
  9153 00007157 FF742410                	push qword [rsp + 8 * 2]
  9154 0000715B 6A01                    	push 1
  9155 0000715D E90BB70000              	jmp L_error_incorrect_arity_simple
  9156                                  .L_lambda_simple_arity_check_ok_4f64:
  9157 00007162 C8000000                	enter 0, 0
  9158 00007166 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9159 0000716B E844B70000              	call malloc
  9160 00007170 50                      	push rax
  9161 00007171 BF08000000              	mov rdi, 8 * 1	; new rib
  9162 00007176 E839B70000              	call malloc
  9163 0000717B 50                      	push rax
  9164 0000717C BF18000000              	mov rdi, 8 * 3	; extended env
  9165 00007181 E82EB70000              	call malloc
  9166 00007186 488B7D10                	mov rdi, ENV
  9167 0000718A BE00000000              	mov rsi, 0
  9168 0000718F BA01000000              	mov rdx, 1
  9169                                  .L_lambda_opt_env_loop_0c8f:	; ext_env[i + 1] <-- env[i]
  9170 00007194 4883FE02                	cmp rsi, 2
  9171 00007198 7410                    	je .L_lambda_opt_env_end_0c8f
  9172 0000719A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  9173 0000719E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9174 000071A2 48FFC6                  	inc rsi
  9175 000071A5 48FFC2                  	inc rdx
  9176 000071A8 EBEA                    	jmp .L_lambda_opt_env_loop_0c8f
  9177                                  .L_lambda_opt_env_end_0c8f:
  9178 000071AA 5B                      	pop rbx
  9179 000071AB BE00000000              	mov rsi, 0
  9180                                  .L_lambda_opt_params_loop_0c8f:	; copy params
  9181 000071B0 4883FE01                	cmp rsi, 1
  9182 000071B4 740E                    	je .L_lambda_opt_params_end_0c8f
  9183 000071B6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9184 000071BB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9185 000071BF 48FFC6                  	inc rsi
  9186 000071C2 EBEC                    	jmp .L_lambda_opt_params_loop_0c8f
  9187                                  .L_lambda_opt_params_end_0c8f:
  9188 000071C4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9189 000071C7 4889C3                  	mov rbx, rax
  9190 000071CA 58                      	pop rax
  9191 000071CB C60005                  	mov byte [rax], T_closure
  9192 000071CE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9193 000071D2 48C74009[DF710000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c8f
  9194 000071DA E97E030000              	jmp .L_lambda_opt_end_0c8f
  9195                                  .L_lambda_opt_code_0c8f:	; lambda-opt body
  9196 000071DF 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  9197 000071E4 4889FB                  	mov rbx, rdi
  9198 000071E7 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  9199 000071EB 4883FB00                	cmp rbx, 0
  9200 000071EF 7F45                    	jg .L_lambda_opt_arity_check_more_0c8f
  9201                                  .L_lambda_opt_arity_check_exact_0c8f:	 ; if params in opt is exact
  9202 000071F1 4883EC08                	sub rsp, 8
  9203 000071F5 BE00000000              	mov rsi, 0 ; index
  9204                                  .L_lambda_opt_stack_enlarge_loop_0c8f:	 ; stack loop enlarge start
  9205 000071FA 4883FE04                	cmp rsi, 4
  9206 000071FE 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c8f
  9207 00007200 4889F7                  	mov rdi, rsi
  9208 00007203 48FFC7                  	inc rdi
  9209 00007206 48C1E703                	shl rdi, 3
  9210 0000720A 4801E7                  	add rdi, rsp
  9211 0000720D 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  9212 00007210 4883EB08                	sub rbx, 8
  9213 00007214 488B3F                  	mov rdi, [rdi]
  9214 00007217 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  9215 0000721A 48FFC6                  	inc rsi
  9216 0000721D EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c8f
  9217                                  .L_lambda_opt_stack_enlarge_loop_exit_0c8f:	 ; end of stack enlarge loop
  9218 0000721F 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  9218 00007224 [01000000]         
  9219 00007228 48C744241002000000      	mov qword [rsp + 2*8], 2
  9220 00007231 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c8f
  9221                                  .L_lambda_opt_arity_check_more_0c8f:	 ; if params in opt is more
  9222 00007236 48B8-                   	mov rax, sob_nil
  9222 00007238 [0100000000000000] 
  9223 00007240 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  9224 00007243 48FFCE                  	dec rsi
  9225                                  .L_lambda_opt_list_create_loop_0c8f:	; start of list creation loop
  9226 00007246 4883FEFF                	cmp rsi, -1
  9227 0000724A 7422                    	je .L_lambda_opt_list_create_loop_exit_0c8f
  9228 0000724C 488D4E04                	lea rcx, [rsi + (3 + 1)]
  9229 00007250 48C1E103                	shl rcx, 3
  9230 00007254 4801E1                  	add rcx, rsp
  9231 00007257 488B09                  	mov rcx, [rcx]
  9232 0000725A 56                      	push rsi ; save params
  9233 0000725B 53                      	push rbx
  9234                                  
  9235 0000725C 50                      	push rax ; cdr
  9236 0000725D 51                      	push rcx ; car
  9237 0000725E 6A02                    	push qword 2 ; push num of args
  9238 00007260 6A01                    	push qword 1 ; push garbage as env
  9239 00007262 E8D4BF0000              	call L_code_ptr_cons
  9240                                  
  9241 00007267 5B                      	pop rbx ; restore params
  9242 00007268 5E                      	pop rsi
  9243 00007269 48FFCE                  	dec rsi
  9244 0000726C EBD8                    	jmp .L_lambda_opt_list_create_loop_0c8f
  9245                                  .L_lambda_opt_list_create_loop_exit_0c8f:	; end of list creation loop
  9246 0000726E 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  9247 00007273 4883C302                	add rbx, 2
  9248 00007277 4889DF                  	mov rdi, rbx
  9249 0000727A 48C1E703                	shl rdi,3
  9250 0000727E 4801E7                  	add rdi, rsp
  9251 00007281 488907                  	mov [rdi], rax
  9252 00007284 BE00000000              	mov rsi, 0 ;index
  9253                                  .L_lambda_opt_stack_shrink_loop_0c8f:	; start of stack shrink loop
  9254 00007289 4883FE04                	cmp rsi, 4
  9255 0000728D 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c8f
  9256 0000728F BF03000000              	mov rdi, 3
  9257 00007294 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  9258 00007297 4889D9                  	mov rcx, rbx
  9259 0000729A 4829F1                  	sub rcx, rsi
  9260 0000729D 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  9261 000072A0 4889FA                  	mov rdx, rdi
  9262 000072A3 48C1E203                	shl rdx, 3
  9263 000072A7 4801E2                  	add rdx, rsp
  9264 000072AA 48C1E103                	shl rcx, 3
  9265 000072AE 4801E1                  	add rcx, rsp
  9266 000072B1 488B12                  	mov rdx, [rdx]
  9267 000072B4 488911                  	mov [rcx], rdx
  9268 000072B7 48FFC6                  	inc rsi
  9269 000072BA EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c8f
  9270                                  .L_lambda_opt_stack_shrink_loop_exit_0c8f:	; end of stack shrink loop
  9271 000072BC 4883EB02                	sub rbx, 2 ; rbx has number of args
  9272 000072C0 4883EB02                	sub rbx, 2
  9273 000072C4 48C1E303                	shl rbx, 3
  9274 000072C8 4801DC                  	add rsp, rbx
  9275 000072CB 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  9276                                  .L_lambda_opt_stack_adjusted_0c8f:
  9277 000072D4 C8000000                	enter 0, 0
  9278 000072D8 488B4528                	mov rax, PARAM(1)
  9279 000072DC 50                      	push rax
  9280 000072DD 6A01                    	push 1
  9281 000072DF 488B0425[00000000]      	mov rax, qword [free_var_0]
  9282                                  	assert_closure(rax)
    65 000072E7 803805              <1>  cmp byte [%1], %2
    66 000072EA 0F8544CE0000        <1>  jne L_error_incorrect_type
  9283 000072F0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9284 000072F4 53                      	push rbx
  9285 000072F5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9286 000072F9 FFD3                    	call rbx
  9287 000072FB 483D[02000000]          	cmp rax, sob_boolean_false
  9288 00007301 0F848D000000            	je .L_if_else_5698
  9289 00007307 488B4520                	mov rax, PARAM(0)
  9290 0000730B 50                      	push rax
  9291 0000730C 488D0425[20000000]      	lea rax, [32 + L_constants]
  9292 00007314 50                      	push rax
  9293 00007315 6A02                    	push 2
  9294 00007317 488B4510                	mov rax, qword [rbp + 8*2]
  9295 0000731B 488B00                  	mov rax, qword [rax + 8*0]
  9296 0000731E 488B00                  	mov rax, qword [rax + 8*0]
  9297                                  	assert_closure(rax)
    65 00007321 803805              <1>  cmp byte [%1], %2
    66 00007324 0F850ACE0000        <1>  jne L_error_incorrect_type
  9298 0000732A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9299 0000732E 53                      	push rbx
  9300 0000732F FF7508                  	push RET_ADDR
  9301 00007332 488B7D18                	mov rdi, COUNT
  9302 00007336 4883C703                	add rdi, 3
  9303 0000733A 48C1E703                	shl rdi, 3
  9304 0000733E 4801EF                  	add rdi, rbp
  9305 00007341 488B6D00                	mov rbp, OLD_RDP
  9306 00007345 BE00000000              	mov rsi, 0
  9307                                  .L_tc_recycle_frame_loop_5ce4:	 ; start recycle frame loop
  9308 0000734A 4883FE05                	cmp rsi, 5
  9309 0000734E 7427                    	je .L_tc_recycle_frame_done_5ce4
  9310 00007350 B904000000              	mov rcx, 4
  9311 00007355 4829F1                  	sub rcx, rsi
  9312 00007358 48C1E103                	shl rcx, 3
  9313 0000735C 4801E1                  	add rcx, rsp ; rcx is the address to move
  9314 0000735F 4889F3                  	mov rbx, rsi
  9315 00007362 48C1E303                	shl rbx, 3
  9316 00007366 48F7DB                  	neg rbx
  9317 00007369 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9318 0000736C 488B09                  	mov rcx, [rcx]
  9319 0000736F 48890B                  	mov [rbx], rcx
  9320 00007372 48FFC6                  	inc rsi
  9321 00007375 EBD3                    	jmp .L_tc_recycle_frame_loop_5ce4
  9322                                  .L_tc_recycle_frame_done_5ce4:	 ; end recycle frame loop
  9323 00007377 BB04000000              	mov rbx, 4
  9324 0000737C 48C1E303                	shl rbx, 3
  9325 00007380 48F7DB                  	neg rbx
  9326 00007383 4801FB                  	add rbx, rdi
  9327 00007386 4889DC                  	mov rsp, rbx
  9328 00007389 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9329 0000738D FFE3                    	jmp rbx
  9330 0000738F E9C5010000              	jmp .L_if_end_5698
  9331                                  	.L_if_else_5698:
  9332 00007394 488B4528                	mov rax, PARAM(1)
  9333 00007398 50                      	push rax
  9334 00007399 488D0425[20000000]      	lea rax, [32 + L_constants]
  9335 000073A1 50                      	push rax
  9336 000073A2 488B0425[08030000]      	mov rax, qword [free_var_97]
  9337 000073AA 50                      	push rax
  9338 000073AB 6A03                    	push 3
  9339 000073AD 488B0425[F8020000]      	mov rax, qword [free_var_95]
  9340                                  	assert_closure(rax)
    65 000073B5 803805              <1>  cmp byte [%1], %2
    66 000073B8 0F8576CD0000        <1>  jne L_error_incorrect_type
  9341 000073BE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9342 000073C2 53                      	push rbx
  9343 000073C3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9344 000073C7 FFD3                    	call rbx
  9345 000073C9 50                      	push rax
  9346 000073CA 6A01                    	push 1
  9347 000073CC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9348 000073D1 E8DEB40000              	call malloc
  9349 000073D6 50                      	push rax
  9350 000073D7 BF10000000              	mov rdi, 8 * 2	; new rib
  9351 000073DC E8D3B40000              	call malloc
  9352 000073E1 50                      	push rax
  9353 000073E2 BF20000000              	mov rdi, 8 * 4	; extended env
  9354 000073E7 E8C8B40000              	call malloc
  9355 000073EC 488B7D10                	mov rdi, ENV
  9356 000073F0 BE00000000              	mov rsi, 0
  9357 000073F5 BA01000000              	mov rdx, 1
  9358                                  .L_lambda_simple_env_loop_4f65:	; ext_env[i + 1] <-- env[i]
  9359 000073FA 4883FE03                	cmp rsi, 3
  9360 000073FE 7410                    	je .L_lambda_simple_env_end_4f65
  9361 00007400 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  9362 00007404 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9363 00007408 48FFC6                  	inc rsi
  9364 0000740B 48FFC2                  	inc rdx
  9365 0000740E EBEA                    	jmp .L_lambda_simple_env_loop_4f65
  9366                                  .L_lambda_simple_env_end_4f65:
  9367 00007410 5B                      	pop rbx
  9368 00007411 BE00000000              	mov rsi, 0
  9369                                  .L_lambda_simple_params_loop_4f65:	; copy params
  9370 00007416 4883FE02                	cmp rsi, 2
  9371 0000741A 740E                    	je .L_lambda_simple_params_end_4f65
  9372 0000741C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9373 00007421 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9374 00007425 48FFC6                  	inc rsi
  9375 00007428 EBEC                    	jmp .L_lambda_simple_params_loop_4f65
  9376                                  .L_lambda_simple_params_end_4f65:
  9377 0000742A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9378 0000742D 4889C3                  	mov rbx, rax
  9379 00007430 58                      	pop rax
  9380 00007431 C60005                  	mov byte [rax], T_closure
  9381 00007434 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9382 00007438 48C74009[45740000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f65
  9383 00007440 E9A6000000              	jmp .L_lambda_simple_end_4f65
  9384                                  .L_lambda_simple_code_4f65:	; lambda-simple body
  9385 00007445 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9386 0000744B 740B                    	je .L_lambda_simple_arity_check_ok_4f65
  9387 0000744D FF742410                	push qword [rsp + 8 * 2]
  9388 00007451 6A01                    	push 1
  9389 00007453 E915B40000              	jmp L_error_incorrect_arity_simple
  9390                                  .L_lambda_simple_arity_check_ok_4f65:
  9391 00007458 C8000000                	enter 0, 0
  9392 0000745C 488B4520                	mov rax, PARAM(0)
  9393 00007460 50                      	push rax
  9394 00007461 488B4510                	mov rax, qword [rbp + 8*2]
  9395 00007465 488B00                  	mov rax, qword [rax + 8*0]
  9396 00007468 488B00                  	mov rax, qword [rax + 8*0]
  9397 0000746B 50                      	push rax
  9398 0000746C 6A02                    	push 2
  9399 0000746E 488B4510                	mov rax, qword [rbp + 8*2]
  9400 00007472 488B4008                	mov rax, qword [rax + 8*1]
  9401 00007476 488B00                  	mov rax, qword [rax + 8*0]
  9402                                  	assert_closure(rax)
    65 00007479 803805              <1>  cmp byte [%1], %2
    66 0000747C 0F85B2CC0000        <1>  jne L_error_incorrect_type
  9403 00007482 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9404 00007486 53                      	push rbx
  9405 00007487 FF7508                  	push RET_ADDR
  9406 0000748A 488B7D18                	mov rdi, COUNT
  9407 0000748E 4883C703                	add rdi, 3
  9408 00007492 48C1E703                	shl rdi, 3
  9409 00007496 4801EF                  	add rdi, rbp
  9410 00007499 488B6D00                	mov rbp, OLD_RDP
  9411 0000749D BE00000000              	mov rsi, 0
  9412                                  .L_tc_recycle_frame_loop_5ce6:	 ; start recycle frame loop
  9413 000074A2 4883FE05                	cmp rsi, 5
  9414 000074A6 7427                    	je .L_tc_recycle_frame_done_5ce6
  9415 000074A8 B904000000              	mov rcx, 4
  9416 000074AD 4829F1                  	sub rcx, rsi
  9417 000074B0 48C1E103                	shl rcx, 3
  9418 000074B4 4801E1                  	add rcx, rsp ; rcx is the address to move
  9419 000074B7 4889F3                  	mov rbx, rsi
  9420 000074BA 48C1E303                	shl rbx, 3
  9421 000074BE 48F7DB                  	neg rbx
  9422 000074C1 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9423 000074C4 488B09                  	mov rcx, [rcx]
  9424 000074C7 48890B                  	mov [rbx], rcx
  9425 000074CA 48FFC6                  	inc rsi
  9426 000074CD EBD3                    	jmp .L_tc_recycle_frame_loop_5ce6
  9427                                  .L_tc_recycle_frame_done_5ce6:	 ; end recycle frame loop
  9428 000074CF BB04000000              	mov rbx, 4
  9429 000074D4 48C1E303                	shl rbx, 3
  9430 000074D8 48F7DB                  	neg rbx
  9431 000074DB 4801FB                  	add rbx, rdi
  9432 000074DE 4889DC                  	mov rsp, rbx
  9433 000074E1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9434 000074E5 FFE3                    	jmp rbx
  9435 000074E7 C9                      	leave
  9436 000074E8 C21800                  	ret 8 * (2 + 1)
  9437                                  .L_lambda_simple_end_4f65:	; new closure is in rax
  9438                                  	assert_closure(rax)
    65 000074EB 803805              <1>  cmp byte [%1], %2
    66 000074EE 0F8540CC0000        <1>  jne L_error_incorrect_type
  9439 000074F4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9440 000074F8 53                      	push rbx
  9441 000074F9 FF7508                  	push RET_ADDR
  9442 000074FC 488B7D18                	mov rdi, COUNT
  9443 00007500 4883C703                	add rdi, 3
  9444 00007504 48C1E703                	shl rdi, 3
  9445 00007508 4801EF                  	add rdi, rbp
  9446 0000750B 488B6D00                	mov rbp, OLD_RDP
  9447 0000750F BE00000000              	mov rsi, 0
  9448                                  .L_tc_recycle_frame_loop_5ce5:	 ; start recycle frame loop
  9449 00007514 4883FE04                	cmp rsi, 4
  9450 00007518 7427                    	je .L_tc_recycle_frame_done_5ce5
  9451 0000751A B903000000              	mov rcx, 3
  9452 0000751F 4829F1                  	sub rcx, rsi
  9453 00007522 48C1E103                	shl rcx, 3
  9454 00007526 4801E1                  	add rcx, rsp ; rcx is the address to move
  9455 00007529 4889F3                  	mov rbx, rsi
  9456 0000752C 48C1E303                	shl rbx, 3
  9457 00007530 48F7DB                  	neg rbx
  9458 00007533 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9459 00007536 488B09                  	mov rcx, [rcx]
  9460 00007539 48890B                  	mov [rbx], rcx
  9461 0000753C 48FFC6                  	inc rsi
  9462 0000753F EBD3                    	jmp .L_tc_recycle_frame_loop_5ce5
  9463                                  .L_tc_recycle_frame_done_5ce5:	 ; end recycle frame loop
  9464 00007541 BB03000000              	mov rbx, 3
  9465 00007546 48C1E303                	shl rbx, 3
  9466 0000754A 48F7DB                  	neg rbx
  9467 0000754D 4801FB                  	add rbx, rdi
  9468 00007550 4889DC                  	mov rsp, rbx
  9469 00007553 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9470 00007557 FFE3                    	jmp rbx
  9471                                  	.L_if_end_5698:
  9472 00007559 C9                      	leave
  9473 0000755A C22000                  	ret AND_KILL_FRAME(2)
  9474                                  .L_lambda_opt_end_0c8f:	; new closure is in rax
  9475 0000755D C9                      	leave
  9476 0000755E C21800                  	ret 8 * (2 + 1)
  9477                                  .L_lambda_simple_end_4f64:	; new closure is in rax
  9478                                  	assert_closure(rax)
    65 00007561 803805              <1>  cmp byte [%1], %2
    66 00007564 0F85CACB0000        <1>  jne L_error_incorrect_type
  9479 0000756A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9480 0000756E 53                      	push rbx
  9481 0000756F FF7508                  	push RET_ADDR
  9482 00007572 488B7D18                	mov rdi, COUNT
  9483 00007576 4883C703                	add rdi, 3
  9484 0000757A 48C1E703                	shl rdi, 3
  9485 0000757E 4801EF                  	add rdi, rbp
  9486 00007581 488B6D00                	mov rbp, OLD_RDP
  9487 00007585 BE00000000              	mov rsi, 0
  9488                                  .L_tc_recycle_frame_loop_5cdc:	 ; start recycle frame loop
  9489 0000758A 4883FE04                	cmp rsi, 4
  9490 0000758E 7427                    	je .L_tc_recycle_frame_done_5cdc
  9491 00007590 B903000000              	mov rcx, 3
  9492 00007595 4829F1                  	sub rcx, rsi
  9493 00007598 48C1E103                	shl rcx, 3
  9494 0000759C 4801E1                  	add rcx, rsp ; rcx is the address to move
  9495 0000759F 4889F3                  	mov rbx, rsi
  9496 000075A2 48C1E303                	shl rbx, 3
  9497 000075A6 48F7DB                  	neg rbx
  9498 000075A9 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9499 000075AC 488B09                  	mov rcx, [rcx]
  9500 000075AF 48890B                  	mov [rbx], rcx
  9501 000075B2 48FFC6                  	inc rsi
  9502 000075B5 EBD3                    	jmp .L_tc_recycle_frame_loop_5cdc
  9503                                  .L_tc_recycle_frame_done_5cdc:	 ; end recycle frame loop
  9504 000075B7 BB03000000              	mov rbx, 3
  9505 000075BC 48C1E303                	shl rbx, 3
  9506 000075C0 48F7DB                  	neg rbx
  9507 000075C3 4801FB                  	add rbx, rdi
  9508 000075C6 4889DC                  	mov rsp, rbx
  9509 000075C9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9510 000075CD FFE3                    	jmp rbx
  9511 000075CF C9                      	leave
  9512 000075D0 C21800                  	ret 8 * (2 + 1)
  9513                                  .L_lambda_simple_end_4f62:	; new closure is in rax
  9514                                  	assert_closure(rax)
    65 000075D3 803805              <1>  cmp byte [%1], %2
    66 000075D6 0F8558CB0000        <1>  jne L_error_incorrect_type
  9515 000075DC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9516 000075E0 53                      	push rbx
  9517 000075E1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9518 000075E5 FFD3                    	call rbx
  9519 000075E7 48890425[10030000]      	mov qword [free_var_98], rax
  9520 000075EF 48B8-                   	mov rax, sob_void
  9520 000075F1 [0000000000000000] 
  9521                                  
  9522 000075F9 4889C7                  	mov rdi, rax
  9523 000075FC E8C4B20000              	call print_sexpr_if_not_void
  9524                                  
  9525 00007601 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9526 00007606 E8A9B20000              	call malloc
  9527 0000760B 50                      	push rax
  9528 0000760C BF00000000              	mov rdi, 8 * 0	; new rib
  9529 00007611 E89EB20000              	call malloc
  9530 00007616 50                      	push rax
  9531 00007617 BF08000000              	mov rdi, 8 * 1	; extended env
  9532 0000761C E893B20000              	call malloc
  9533 00007621 488B7D10                	mov rdi, ENV
  9534 00007625 BE00000000              	mov rsi, 0
  9535 0000762A BA01000000              	mov rdx, 1
  9536                                  .L_lambda_simple_env_loop_4f66:	; ext_env[i + 1] <-- env[i]
  9537 0000762F 4883FE00                	cmp rsi, 0
  9538 00007633 7410                    	je .L_lambda_simple_env_end_4f66
  9539 00007635 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  9540 00007639 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9541 0000763D 48FFC6                  	inc rsi
  9542 00007640 48FFC2                  	inc rdx
  9543 00007643 EBEA                    	jmp .L_lambda_simple_env_loop_4f66
  9544                                  .L_lambda_simple_env_end_4f66:
  9545 00007645 5B                      	pop rbx
  9546 00007646 BE00000000              	mov rsi, 0
  9547                                  .L_lambda_simple_params_loop_4f66:	; copy params
  9548 0000764B 4883FE00                	cmp rsi, 0
  9549 0000764F 740E                    	je .L_lambda_simple_params_end_4f66
  9550 00007651 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9551 00007656 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9552 0000765A 48FFC6                  	inc rsi
  9553 0000765D EBEC                    	jmp .L_lambda_simple_params_loop_4f66
  9554                                  .L_lambda_simple_params_end_4f66:
  9555 0000765F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9556 00007662 4889C3                  	mov rbx, rax
  9557 00007665 58                      	pop rax
  9558 00007666 C60005                  	mov byte [rax], T_closure
  9559 00007669 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9560 0000766D 48C74009[7A760000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f66
  9561 00007675 E9A5000000              	jmp .L_lambda_simple_end_4f66
  9562                                  .L_lambda_simple_code_4f66:	; lambda-simple body
  9563 0000767A 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9564 00007680 740B                    	je .L_lambda_simple_arity_check_ok_4f66
  9565 00007682 FF742410                	push qword [rsp + 8 * 2]
  9566 00007686 6A00                    	push 0
  9567 00007688 E9E0B10000              	jmp L_error_incorrect_arity_simple
  9568                                  .L_lambda_simple_arity_check_ok_4f66:
  9569 0000768D C8000000                	enter 0, 0
  9570 00007691 488D0425[44000000]      	lea rax, [68 + L_constants]
  9571 00007699 50                      	push rax
  9572 0000769A 488D0425[9B000000]      	lea rax, [155 + L_constants]
  9573 000076A2 50                      	push rax
  9574 000076A3 6A02                    	push 2
  9575 000076A5 488B0425[30010000]      	mov rax, qword [free_var_38]
  9576                                  	assert_closure(rax)
    65 000076AD 803805              <1>  cmp byte [%1], %2
    66 000076B0 0F857ECA0000        <1>  jne L_error_incorrect_type
  9577 000076B6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9578 000076BA 53                      	push rbx
  9579 000076BB FF7508                  	push RET_ADDR
  9580 000076BE 488B7D18                	mov rdi, COUNT
  9581 000076C2 4883C703                	add rdi, 3
  9582 000076C6 48C1E703                	shl rdi, 3
  9583 000076CA 4801EF                  	add rdi, rbp
  9584 000076CD 488B6D00                	mov rbp, OLD_RDP
  9585 000076D1 BE00000000              	mov rsi, 0
  9586                                  .L_tc_recycle_frame_loop_5ce7:	 ; start recycle frame loop
  9587 000076D6 4883FE05                	cmp rsi, 5
  9588 000076DA 7427                    	je .L_tc_recycle_frame_done_5ce7
  9589 000076DC B904000000              	mov rcx, 4
  9590 000076E1 4829F1                  	sub rcx, rsi
  9591 000076E4 48C1E103                	shl rcx, 3
  9592 000076E8 4801E1                  	add rcx, rsp ; rcx is the address to move
  9593 000076EB 4889F3                  	mov rbx, rsi
  9594 000076EE 48C1E303                	shl rbx, 3
  9595 000076F2 48F7DB                  	neg rbx
  9596 000076F5 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9597 000076F8 488B09                  	mov rcx, [rcx]
  9598 000076FB 48890B                  	mov [rbx], rcx
  9599 000076FE 48FFC6                  	inc rsi
  9600 00007701 EBD3                    	jmp .L_tc_recycle_frame_loop_5ce7
  9601                                  .L_tc_recycle_frame_done_5ce7:	 ; end recycle frame loop
  9602 00007703 BB04000000              	mov rbx, 4
  9603 00007708 48C1E303                	shl rbx, 3
  9604 0000770C 48F7DB                  	neg rbx
  9605 0000770F 4801FB                  	add rbx, rdi
  9606 00007712 4889DC                  	mov rsp, rbx
  9607 00007715 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9608 00007719 FFE3                    	jmp rbx
  9609 0000771B C9                      	leave
  9610 0000771C C21000                  	ret 8 * (2 + 0)
  9611                                  .L_lambda_simple_end_4f66:	; new closure is in rax
  9612 0000771F 50                      	push rax
  9613 00007720 6A01                    	push 1
  9614 00007722 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9615 00007727 E888B10000              	call malloc
  9616 0000772C 50                      	push rax
  9617 0000772D BF00000000              	mov rdi, 8 * 0	; new rib
  9618 00007732 E87DB10000              	call malloc
  9619 00007737 50                      	push rax
  9620 00007738 BF08000000              	mov rdi, 8 * 1	; extended env
  9621 0000773D E872B10000              	call malloc
  9622 00007742 488B7D10                	mov rdi, ENV
  9623 00007746 BE00000000              	mov rsi, 0
  9624 0000774B BA01000000              	mov rdx, 1
  9625                                  .L_lambda_simple_env_loop_4f67:	; ext_env[i + 1] <-- env[i]
  9626 00007750 4883FE00                	cmp rsi, 0
  9627 00007754 7410                    	je .L_lambda_simple_env_end_4f67
  9628 00007756 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  9629 0000775A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9630 0000775E 48FFC6                  	inc rsi
  9631 00007761 48FFC2                  	inc rdx
  9632 00007764 EBEA                    	jmp .L_lambda_simple_env_loop_4f67
  9633                                  .L_lambda_simple_env_end_4f67:
  9634 00007766 5B                      	pop rbx
  9635 00007767 BE00000000              	mov rsi, 0
  9636                                  .L_lambda_simple_params_loop_4f67:	; copy params
  9637 0000776C 4883FE00                	cmp rsi, 0
  9638 00007770 740E                    	je .L_lambda_simple_params_end_4f67
  9639 00007772 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9640 00007777 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9641 0000777B 48FFC6                  	inc rsi
  9642 0000777E EBEC                    	jmp .L_lambda_simple_params_loop_4f67
  9643                                  .L_lambda_simple_params_end_4f67:
  9644 00007780 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9645 00007783 4889C3                  	mov rbx, rax
  9646 00007786 58                      	pop rax
  9647 00007787 C60005                  	mov byte [rax], T_closure
  9648 0000778A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9649 0000778E 48C74009[9B770000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f67
  9650 00007796 E99E080000              	jmp .L_lambda_simple_end_4f67
  9651                                  .L_lambda_simple_code_4f67:	; lambda-simple body
  9652 0000779B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9653 000077A1 740B                    	je .L_lambda_simple_arity_check_ok_4f67
  9654 000077A3 FF742410                	push qword [rsp + 8 * 2]
  9655 000077A7 6A01                    	push 1
  9656 000077A9 E9BFB00000              	jmp L_error_incorrect_arity_simple
  9657                                  .L_lambda_simple_arity_check_ok_4f67:
  9658 000077AE C8000000                	enter 0, 0
  9659 000077B2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9660 000077B7 E8F8B00000              	call malloc
  9661 000077BC 50                      	push rax
  9662 000077BD BF08000000              	mov rdi, 8 * 1	; new rib
  9663 000077C2 E8EDB00000              	call malloc
  9664 000077C7 50                      	push rax
  9665 000077C8 BF10000000              	mov rdi, 8 * 2	; extended env
  9666 000077CD E8E2B00000              	call malloc
  9667 000077D2 488B7D10                	mov rdi, ENV
  9668 000077D6 BE00000000              	mov rsi, 0
  9669 000077DB BA01000000              	mov rdx, 1
  9670                                  .L_lambda_simple_env_loop_4f68:	; ext_env[i + 1] <-- env[i]
  9671 000077E0 4883FE01                	cmp rsi, 1
  9672 000077E4 7410                    	je .L_lambda_simple_env_end_4f68
  9673 000077E6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  9674 000077EA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9675 000077EE 48FFC6                  	inc rsi
  9676 000077F1 48FFC2                  	inc rdx
  9677 000077F4 EBEA                    	jmp .L_lambda_simple_env_loop_4f68
  9678                                  .L_lambda_simple_env_end_4f68:
  9679 000077F6 5B                      	pop rbx
  9680 000077F7 BE00000000              	mov rsi, 0
  9681                                  .L_lambda_simple_params_loop_4f68:	; copy params
  9682 000077FC 4883FE01                	cmp rsi, 1
  9683 00007800 740E                    	je .L_lambda_simple_params_end_4f68
  9684 00007802 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9685 00007807 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9686 0000780B 48FFC6                  	inc rsi
  9687 0000780E EBEC                    	jmp .L_lambda_simple_params_loop_4f68
  9688                                  .L_lambda_simple_params_end_4f68:
  9689 00007810 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9690 00007813 4889C3                  	mov rbx, rax
  9691 00007816 58                      	pop rax
  9692 00007817 C60005                  	mov byte [rax], T_closure
  9693 0000781A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9694 0000781E 48C74009[2B780000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f68
  9695 00007826 E9FE040000              	jmp .L_lambda_simple_end_4f68
  9696                                  .L_lambda_simple_code_4f68:	; lambda-simple body
  9697 0000782B 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9698 00007831 740B                    	je .L_lambda_simple_arity_check_ok_4f68
  9699 00007833 FF742410                	push qword [rsp + 8 * 2]
  9700 00007837 6A02                    	push 2
  9701 00007839 E92FB00000              	jmp L_error_incorrect_arity_simple
  9702                                  .L_lambda_simple_arity_check_ok_4f68:
  9703 0000783E C8000000                	enter 0, 0
  9704 00007842 488B4520                	mov rax, PARAM(0)
  9705 00007846 50                      	push rax
  9706 00007847 6A01                    	push 1
  9707 00007849 488B0425[48000000]      	mov rax, qword [free_var_9]
  9708                                  	assert_closure(rax)
    65 00007851 803805              <1>  cmp byte [%1], %2
    66 00007854 0F85DAC80000        <1>  jne L_error_incorrect_type
  9709 0000785A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9710 0000785E 53                      	push rbx
  9711 0000785F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9712 00007863 FFD3                    	call rbx
  9713 00007865 483D[02000000]          	cmp rax, sob_boolean_false
  9714 0000786B 0F8407020000            	je .L_if_else_5699
  9715 00007871 488B4528                	mov rax, PARAM(1)
  9716 00007875 50                      	push rax
  9717 00007876 6A01                    	push 1
  9718 00007878 488B0425[48000000]      	mov rax, qword [free_var_9]
  9719                                  	assert_closure(rax)
    65 00007880 803805              <1>  cmp byte [%1], %2
    66 00007883 0F85ABC80000        <1>  jne L_error_incorrect_type
  9720 00007889 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9721 0000788D 53                      	push rbx
  9722 0000788E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9723 00007892 FFD3                    	call rbx
  9724 00007894 483D[02000000]          	cmp rax, sob_boolean_false
  9725 0000789A 0F8487000000            	je .L_if_else_569a
  9726 000078A0 488B4528                	mov rax, PARAM(1)
  9727 000078A4 50                      	push rax
  9728 000078A5 488B4520                	mov rax, PARAM(0)
  9729 000078A9 50                      	push rax
  9730 000078AA 6A02                    	push 2
  9731 000078AC 488B0425[20010000]      	mov rax, qword [free_var_36]
  9732                                  	assert_closure(rax)
    65 000078B4 803805              <1>  cmp byte [%1], %2
    66 000078B7 0F8577C80000        <1>  jne L_error_incorrect_type
  9733 000078BD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9734 000078C1 53                      	push rbx
  9735 000078C2 FF7508                  	push RET_ADDR
  9736 000078C5 488B7D18                	mov rdi, COUNT
  9737 000078C9 4883C703                	add rdi, 3
  9738 000078CD 48C1E703                	shl rdi, 3
  9739 000078D1 4801EF                  	add rdi, rbp
  9740 000078D4 488B6D00                	mov rbp, OLD_RDP
  9741 000078D8 BE00000000              	mov rsi, 0
  9742                                  .L_tc_recycle_frame_loop_5ce9:	 ; start recycle frame loop
  9743 000078DD 4883FE05                	cmp rsi, 5
  9744 000078E1 7427                    	je .L_tc_recycle_frame_done_5ce9
  9745 000078E3 B904000000              	mov rcx, 4
  9746 000078E8 4829F1                  	sub rcx, rsi
  9747 000078EB 48C1E103                	shl rcx, 3
  9748 000078EF 4801E1                  	add rcx, rsp ; rcx is the address to move
  9749 000078F2 4889F3                  	mov rbx, rsi
  9750 000078F5 48C1E303                	shl rbx, 3
  9751 000078F9 48F7DB                  	neg rbx
  9752 000078FC 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9753 000078FF 488B09                  	mov rcx, [rcx]
  9754 00007902 48890B                  	mov [rbx], rcx
  9755 00007905 48FFC6                  	inc rsi
  9756 00007908 EBD3                    	jmp .L_tc_recycle_frame_loop_5ce9
  9757                                  .L_tc_recycle_frame_done_5ce9:	 ; end recycle frame loop
  9758 0000790A BB04000000              	mov rbx, 4
  9759 0000790F 48C1E303                	shl rbx, 3
  9760 00007913 48F7DB                  	neg rbx
  9761 00007916 4801FB                  	add rbx, rdi
  9762 00007919 4889DC                  	mov rsp, rbx
  9763 0000791C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9764 00007920 FFE3                    	jmp rbx
  9765 00007922 E94C010000              	jmp .L_if_end_569a
  9766                                  	.L_if_else_569a:
  9767 00007927 488B4528                	mov rax, PARAM(1)
  9768 0000792B 50                      	push rax
  9769 0000792C 6A01                    	push 1
  9770 0000792E 488B0425[40000000]      	mov rax, qword [free_var_8]
  9771                                  	assert_closure(rax)
    65 00007936 803805              <1>  cmp byte [%1], %2
    66 00007939 0F85F5C70000        <1>  jne L_error_incorrect_type
  9772 0000793F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9773 00007943 53                      	push rbx
  9774 00007944 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9775 00007948 FFD3                    	call rbx
  9776 0000794A 483D[02000000]          	cmp rax, sob_boolean_false
  9777 00007950 0F84A3000000            	je .L_if_else_569b
  9778 00007956 488B4528                	mov rax, PARAM(1)
  9779 0000795A 50                      	push rax
  9780 0000795B 488B4520                	mov rax, PARAM(0)
  9781 0000795F 50                      	push rax
  9782 00007960 6A01                    	push 1
  9783 00007962 488B0425[B8000000]      	mov rax, qword [free_var_23]
  9784                                  	assert_closure(rax)
    65 0000796A 803805              <1>  cmp byte [%1], %2
    66 0000796D 0F85C1C70000        <1>  jne L_error_incorrect_type
  9785 00007973 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9786 00007977 53                      	push rbx
  9787 00007978 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9788 0000797C FFD3                    	call rbx
  9789 0000797E 50                      	push rax
  9790 0000797F 6A02                    	push 2
  9791 00007981 488B0425[00010000]      	mov rax, qword [free_var_32]
  9792                                  	assert_closure(rax)
    65 00007989 803805              <1>  cmp byte [%1], %2
    66 0000798C 0F85A2C70000        <1>  jne L_error_incorrect_type
  9793 00007992 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9794 00007996 53                      	push rbx
  9795 00007997 FF7508                  	push RET_ADDR
  9796 0000799A 488B7D18                	mov rdi, COUNT
  9797 0000799E 4883C703                	add rdi, 3
  9798 000079A2 48C1E703                	shl rdi, 3
  9799 000079A6 4801EF                  	add rdi, rbp
  9800 000079A9 488B6D00                	mov rbp, OLD_RDP
  9801 000079AD BE00000000              	mov rsi, 0
  9802                                  .L_tc_recycle_frame_loop_5cea:	 ; start recycle frame loop
  9803 000079B2 4883FE05                	cmp rsi, 5
  9804 000079B6 7427                    	je .L_tc_recycle_frame_done_5cea
  9805 000079B8 B904000000              	mov rcx, 4
  9806 000079BD 4829F1                  	sub rcx, rsi
  9807 000079C0 48C1E103                	shl rcx, 3
  9808 000079C4 4801E1                  	add rcx, rsp ; rcx is the address to move
  9809 000079C7 4889F3                  	mov rbx, rsi
  9810 000079CA 48C1E303                	shl rbx, 3
  9811 000079CE 48F7DB                  	neg rbx
  9812 000079D1 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9813 000079D4 488B09                  	mov rcx, [rcx]
  9814 000079D7 48890B                  	mov [rbx], rcx
  9815 000079DA 48FFC6                  	inc rsi
  9816 000079DD EBD3                    	jmp .L_tc_recycle_frame_loop_5cea
  9817                                  .L_tc_recycle_frame_done_5cea:	 ; end recycle frame loop
  9818 000079DF BB04000000              	mov rbx, 4
  9819 000079E4 48C1E303                	shl rbx, 3
  9820 000079E8 48F7DB                  	neg rbx
  9821 000079EB 4801FB                  	add rbx, rdi
  9822 000079EE 4889DC                  	mov rsp, rbx
  9823 000079F1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9824 000079F5 FFE3                    	jmp rbx
  9825 000079F7 EB7A                    	jmp .L_if_end_569b
  9826                                  	.L_if_else_569b:
  9827 000079F9 6A00                    	push 0
  9828 000079FB 488B4510                	mov rax, qword [rbp + 8*2]
  9829 000079FF 488B00                  	mov rax, qword [rax + 8*0]
  9830 00007A02 488B00                  	mov rax, qword [rax + 8*0]
  9831                                  	assert_closure(rax)
    65 00007A05 803805              <1>  cmp byte [%1], %2
    66 00007A08 0F8526C70000        <1>  jne L_error_incorrect_type
  9832 00007A0E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9833 00007A12 53                      	push rbx
  9834 00007A13 FF7508                  	push RET_ADDR
  9835 00007A16 488B7D18                	mov rdi, COUNT
  9836 00007A1A 4883C703                	add rdi, 3
  9837 00007A1E 48C1E703                	shl rdi, 3
  9838 00007A22 4801EF                  	add rdi, rbp
  9839 00007A25 488B6D00                	mov rbp, OLD_RDP
  9840 00007A29 BE00000000              	mov rsi, 0
  9841                                  .L_tc_recycle_frame_loop_5ceb:	 ; start recycle frame loop
  9842 00007A2E 4883FE03                	cmp rsi, 3
  9843 00007A32 7427                    	je .L_tc_recycle_frame_done_5ceb
  9844 00007A34 B902000000              	mov rcx, 2
  9845 00007A39 4829F1                  	sub rcx, rsi
  9846 00007A3C 48C1E103                	shl rcx, 3
  9847 00007A40 4801E1                  	add rcx, rsp ; rcx is the address to move
  9848 00007A43 4889F3                  	mov rbx, rsi
  9849 00007A46 48C1E303                	shl rbx, 3
  9850 00007A4A 48F7DB                  	neg rbx
  9851 00007A4D 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9852 00007A50 488B09                  	mov rcx, [rcx]
  9853 00007A53 48890B                  	mov [rbx], rcx
  9854 00007A56 48FFC6                  	inc rsi
  9855 00007A59 EBD3                    	jmp .L_tc_recycle_frame_loop_5ceb
  9856                                  .L_tc_recycle_frame_done_5ceb:	 ; end recycle frame loop
  9857 00007A5B BB02000000              	mov rbx, 2
  9858 00007A60 48C1E303                	shl rbx, 3
  9859 00007A64 48F7DB                  	neg rbx
  9860 00007A67 4801FB                  	add rbx, rdi
  9861 00007A6A 4889DC                  	mov rsp, rbx
  9862 00007A6D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9863 00007A71 FFE3                    	jmp rbx
  9864                                  	.L_if_end_569b:
  9865                                  	.L_if_end_569a:
  9866 00007A73 E9AD020000              	jmp .L_if_end_5699
  9867                                  	.L_if_else_5699:
  9868 00007A78 488B4520                	mov rax, PARAM(0)
  9869 00007A7C 50                      	push rax
  9870 00007A7D 6A01                    	push 1
  9871 00007A7F 488B0425[40000000]      	mov rax, qword [free_var_8]
  9872                                  	assert_closure(rax)
    65 00007A87 803805              <1>  cmp byte [%1], %2
    66 00007A8A 0F85A4C60000        <1>  jne L_error_incorrect_type
  9873 00007A90 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9874 00007A94 53                      	push rbx
  9875 00007A95 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9876 00007A99 FFD3                    	call rbx
  9877 00007A9B 483D[02000000]          	cmp rax, sob_boolean_false
  9878 00007AA1 0F8404020000            	je .L_if_else_569c
  9879 00007AA7 488B4528                	mov rax, PARAM(1)
  9880 00007AAB 50                      	push rax
  9881 00007AAC 6A01                    	push 1
  9882 00007AAE 488B0425[48000000]      	mov rax, qword [free_var_9]
  9883                                  	assert_closure(rax)
    65 00007AB6 803805              <1>  cmp byte [%1], %2
    66 00007AB9 0F8575C60000        <1>  jne L_error_incorrect_type
  9884 00007ABF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9885 00007AC3 53                      	push rbx
  9886 00007AC4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9887 00007AC8 FFD3                    	call rbx
  9888 00007ACA 483D[02000000]          	cmp rax, sob_boolean_false
  9889 00007AD0 0F84A6000000            	je .L_if_else_569d
  9890 00007AD6 488B4528                	mov rax, PARAM(1)
  9891 00007ADA 50                      	push rax
  9892 00007ADB 6A01                    	push 1
  9893 00007ADD 488B0425[B8000000]      	mov rax, qword [free_var_23]
  9894                                  	assert_closure(rax)
    65 00007AE5 803805              <1>  cmp byte [%1], %2
    66 00007AE8 0F8546C60000        <1>  jne L_error_incorrect_type
  9895 00007AEE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9896 00007AF2 53                      	push rbx
  9897 00007AF3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9898 00007AF7 FFD3                    	call rbx
  9899 00007AF9 50                      	push rax
  9900 00007AFA 488B4520                	mov rax, PARAM(0)
  9901 00007AFE 50                      	push rax
  9902 00007AFF 6A02                    	push 2
  9903 00007B01 488B0425[00010000]      	mov rax, qword [free_var_32]
  9904                                  	assert_closure(rax)
    65 00007B09 803805              <1>  cmp byte [%1], %2
    66 00007B0C 0F8522C60000        <1>  jne L_error_incorrect_type
  9905 00007B12 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9906 00007B16 53                      	push rbx
  9907 00007B17 FF7508                  	push RET_ADDR
  9908 00007B1A 488B7D18                	mov rdi, COUNT
  9909 00007B1E 4883C703                	add rdi, 3
  9910 00007B22 48C1E703                	shl rdi, 3
  9911 00007B26 4801EF                  	add rdi, rbp
  9912 00007B29 488B6D00                	mov rbp, OLD_RDP
  9913 00007B2D BE00000000              	mov rsi, 0
  9914                                  .L_tc_recycle_frame_loop_5cec:	 ; start recycle frame loop
  9915 00007B32 4883FE05                	cmp rsi, 5
  9916 00007B36 7427                    	je .L_tc_recycle_frame_done_5cec
  9917 00007B38 B904000000              	mov rcx, 4
  9918 00007B3D 4829F1                  	sub rcx, rsi
  9919 00007B40 48C1E103                	shl rcx, 3
  9920 00007B44 4801E1                  	add rcx, rsp ; rcx is the address to move
  9921 00007B47 4889F3                  	mov rbx, rsi
  9922 00007B4A 48C1E303                	shl rbx, 3
  9923 00007B4E 48F7DB                  	neg rbx
  9924 00007B51 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9925 00007B54 488B09                  	mov rcx, [rcx]
  9926 00007B57 48890B                  	mov [rbx], rcx
  9927 00007B5A 48FFC6                  	inc rsi
  9928 00007B5D EBD3                    	jmp .L_tc_recycle_frame_loop_5cec
  9929                                  .L_tc_recycle_frame_done_5cec:	 ; end recycle frame loop
  9930 00007B5F BB04000000              	mov rbx, 4
  9931 00007B64 48C1E303                	shl rbx, 3
  9932 00007B68 48F7DB                  	neg rbx
  9933 00007B6B 4801FB                  	add rbx, rdi
  9934 00007B6E 4889DC                  	mov rsp, rbx
  9935 00007B71 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9936 00007B75 FFE3                    	jmp rbx
  9937 00007B77 E92D010000              	jmp .L_if_end_569d
  9938                                  	.L_if_else_569d:
  9939 00007B7C 488B4528                	mov rax, PARAM(1)
  9940 00007B80 50                      	push rax
  9941 00007B81 6A01                    	push 1
  9942 00007B83 488B0425[40000000]      	mov rax, qword [free_var_8]
  9943                                  	assert_closure(rax)
    65 00007B8B 803805              <1>  cmp byte [%1], %2
    66 00007B8E 0F85A0C50000        <1>  jne L_error_incorrect_type
  9944 00007B94 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9945 00007B98 53                      	push rbx
  9946 00007B99 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9947 00007B9D FFD3                    	call rbx
  9948 00007B9F 483D[02000000]          	cmp rax, sob_boolean_false
  9949 00007BA5 0F8484000000            	je .L_if_else_569e
  9950 00007BAB 488B4528                	mov rax, PARAM(1)
  9951 00007BAF 50                      	push rax
  9952 00007BB0 488B4520                	mov rax, PARAM(0)
  9953 00007BB4 50                      	push rax
  9954 00007BB5 6A02                    	push 2
  9955 00007BB7 488B0425[00010000]      	mov rax, qword [free_var_32]
  9956                                  	assert_closure(rax)
    65 00007BBF 803805              <1>  cmp byte [%1], %2
    66 00007BC2 0F856CC50000        <1>  jne L_error_incorrect_type
  9957 00007BC8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9958 00007BCC 53                      	push rbx
  9959 00007BCD FF7508                  	push RET_ADDR
  9960 00007BD0 488B7D18                	mov rdi, COUNT
  9961 00007BD4 4883C703                	add rdi, 3
  9962 00007BD8 48C1E703                	shl rdi, 3
  9963 00007BDC 4801EF                  	add rdi, rbp
  9964 00007BDF 488B6D00                	mov rbp, OLD_RDP
  9965 00007BE3 BE00000000              	mov rsi, 0
  9966                                  .L_tc_recycle_frame_loop_5ced:	 ; start recycle frame loop
  9967 00007BE8 4883FE05                	cmp rsi, 5
  9968 00007BEC 7427                    	je .L_tc_recycle_frame_done_5ced
  9969 00007BEE B904000000              	mov rcx, 4
  9970 00007BF3 4829F1                  	sub rcx, rsi
  9971 00007BF6 48C1E103                	shl rcx, 3
  9972 00007BFA 4801E1                  	add rcx, rsp ; rcx is the address to move
  9973 00007BFD 4889F3                  	mov rbx, rsi
  9974 00007C00 48C1E303                	shl rbx, 3
  9975 00007C04 48F7DB                  	neg rbx
  9976 00007C07 4801FB                  	add rbx, rdi ;rbx is the address to move to
  9977 00007C0A 488B09                  	mov rcx, [rcx]
  9978 00007C0D 48890B                  	mov [rbx], rcx
  9979 00007C10 48FFC6                  	inc rsi
  9980 00007C13 EBD3                    	jmp .L_tc_recycle_frame_loop_5ced
  9981                                  .L_tc_recycle_frame_done_5ced:	 ; end recycle frame loop
  9982 00007C15 BB04000000              	mov rbx, 4
  9983 00007C1A 48C1E303                	shl rbx, 3
  9984 00007C1E 48F7DB                  	neg rbx
  9985 00007C21 4801FB                  	add rbx, rdi
  9986 00007C24 4889DC                  	mov rsp, rbx
  9987 00007C27 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9988 00007C2B FFE3                    	jmp rbx
  9989 00007C2D EB7A                    	jmp .L_if_end_569e
  9990                                  	.L_if_else_569e:
  9991 00007C2F 6A00                    	push 0
  9992 00007C31 488B4510                	mov rax, qword [rbp + 8*2]
  9993 00007C35 488B00                  	mov rax, qword [rax + 8*0]
  9994 00007C38 488B00                  	mov rax, qword [rax + 8*0]
  9995                                  	assert_closure(rax)
    65 00007C3B 803805              <1>  cmp byte [%1], %2
    66 00007C3E 0F85F0C40000        <1>  jne L_error_incorrect_type
  9996 00007C44 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9997 00007C48 53                      	push rbx
  9998 00007C49 FF7508                  	push RET_ADDR
  9999 00007C4C 488B7D18                	mov rdi, COUNT
 10000 00007C50 4883C703                	add rdi, 3
 10001 00007C54 48C1E703                	shl rdi, 3
 10002 00007C58 4801EF                  	add rdi, rbp
 10003 00007C5B 488B6D00                	mov rbp, OLD_RDP
 10004 00007C5F BE00000000              	mov rsi, 0
 10005                                  .L_tc_recycle_frame_loop_5cee:	 ; start recycle frame loop
 10006 00007C64 4883FE03                	cmp rsi, 3
 10007 00007C68 7427                    	je .L_tc_recycle_frame_done_5cee
 10008 00007C6A B902000000              	mov rcx, 2
 10009 00007C6F 4829F1                  	sub rcx, rsi
 10010 00007C72 48C1E103                	shl rcx, 3
 10011 00007C76 4801E1                  	add rcx, rsp ; rcx is the address to move
 10012 00007C79 4889F3                  	mov rbx, rsi
 10013 00007C7C 48C1E303                	shl rbx, 3
 10014 00007C80 48F7DB                  	neg rbx
 10015 00007C83 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10016 00007C86 488B09                  	mov rcx, [rcx]
 10017 00007C89 48890B                  	mov [rbx], rcx
 10018 00007C8C 48FFC6                  	inc rsi
 10019 00007C8F EBD3                    	jmp .L_tc_recycle_frame_loop_5cee
 10020                                  .L_tc_recycle_frame_done_5cee:	 ; end recycle frame loop
 10021 00007C91 BB02000000              	mov rbx, 2
 10022 00007C96 48C1E303                	shl rbx, 3
 10023 00007C9A 48F7DB                  	neg rbx
 10024 00007C9D 4801FB                  	add rbx, rdi
 10025 00007CA0 4889DC                  	mov rsp, rbx
 10026 00007CA3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10027 00007CA7 FFE3                    	jmp rbx
 10028                                  	.L_if_end_569e:
 10029                                  	.L_if_end_569d:
 10030 00007CA9 EB7A                    	jmp .L_if_end_569c
 10031                                  	.L_if_else_569c:
 10032 00007CAB 6A00                    	push 0
 10033 00007CAD 488B4510                	mov rax, qword [rbp + 8*2]
 10034 00007CB1 488B00                  	mov rax, qword [rax + 8*0]
 10035 00007CB4 488B00                  	mov rax, qword [rax + 8*0]
 10036                                  	assert_closure(rax)
    65 00007CB7 803805              <1>  cmp byte [%1], %2
    66 00007CBA 0F8574C40000        <1>  jne L_error_incorrect_type
 10037 00007CC0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10038 00007CC4 53                      	push rbx
 10039 00007CC5 FF7508                  	push RET_ADDR
 10040 00007CC8 488B7D18                	mov rdi, COUNT
 10041 00007CCC 4883C703                	add rdi, 3
 10042 00007CD0 48C1E703                	shl rdi, 3
 10043 00007CD4 4801EF                  	add rdi, rbp
 10044 00007CD7 488B6D00                	mov rbp, OLD_RDP
 10045 00007CDB BE00000000              	mov rsi, 0
 10046                                  .L_tc_recycle_frame_loop_5cef:	 ; start recycle frame loop
 10047 00007CE0 4883FE03                	cmp rsi, 3
 10048 00007CE4 7427                    	je .L_tc_recycle_frame_done_5cef
 10049 00007CE6 B902000000              	mov rcx, 2
 10050 00007CEB 4829F1                  	sub rcx, rsi
 10051 00007CEE 48C1E103                	shl rcx, 3
 10052 00007CF2 4801E1                  	add rcx, rsp ; rcx is the address to move
 10053 00007CF5 4889F3                  	mov rbx, rsi
 10054 00007CF8 48C1E303                	shl rbx, 3
 10055 00007CFC 48F7DB                  	neg rbx
 10056 00007CFF 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10057 00007D02 488B09                  	mov rcx, [rcx]
 10058 00007D05 48890B                  	mov [rbx], rcx
 10059 00007D08 48FFC6                  	inc rsi
 10060 00007D0B EBD3                    	jmp .L_tc_recycle_frame_loop_5cef
 10061                                  .L_tc_recycle_frame_done_5cef:	 ; end recycle frame loop
 10062 00007D0D BB02000000              	mov rbx, 2
 10063 00007D12 48C1E303                	shl rbx, 3
 10064 00007D16 48F7DB                  	neg rbx
 10065 00007D19 4801FB                  	add rbx, rdi
 10066 00007D1C 4889DC                  	mov rsp, rbx
 10067 00007D1F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10068 00007D23 FFE3                    	jmp rbx
 10069                                  	.L_if_end_569c:
 10070                                  	.L_if_end_5699:
 10071 00007D25 C9                      	leave
 10072 00007D26 C22000                  	ret 8 * (2 + 2)
 10073                                  .L_lambda_simple_end_4f68:	; new closure is in rax
 10074 00007D29 50                      	push rax
 10075 00007D2A 6A01                    	push 1
 10076 00007D2C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10077 00007D31 E87EAB0000              	call malloc
 10078 00007D36 50                      	push rax
 10079 00007D37 BF08000000              	mov rdi, 8 * 1	; new rib
 10080 00007D3C E873AB0000              	call malloc
 10081 00007D41 50                      	push rax
 10082 00007D42 BF10000000              	mov rdi, 8 * 2	; extended env
 10083 00007D47 E868AB0000              	call malloc
 10084 00007D4C 488B7D10                	mov rdi, ENV
 10085 00007D50 BE00000000              	mov rsi, 0
 10086 00007D55 BA01000000              	mov rdx, 1
 10087                                  .L_lambda_simple_env_loop_4f69:	; ext_env[i + 1] <-- env[i]
 10088 00007D5A 4883FE01                	cmp rsi, 1
 10089 00007D5E 7410                    	je .L_lambda_simple_env_end_4f69
 10090 00007D60 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 10091 00007D64 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10092 00007D68 48FFC6                  	inc rsi
 10093 00007D6B 48FFC2                  	inc rdx
 10094 00007D6E EBEA                    	jmp .L_lambda_simple_env_loop_4f69
 10095                                  .L_lambda_simple_env_end_4f69:
 10096 00007D70 5B                      	pop rbx
 10097 00007D71 BE00000000              	mov rsi, 0
 10098                                  .L_lambda_simple_params_loop_4f69:	; copy params
 10099 00007D76 4883FE01                	cmp rsi, 1
 10100 00007D7A 740E                    	je .L_lambda_simple_params_end_4f69
 10101 00007D7C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10102 00007D81 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10103 00007D85 48FFC6                  	inc rsi
 10104 00007D88 EBEC                    	jmp .L_lambda_simple_params_loop_4f69
 10105                                  .L_lambda_simple_params_end_4f69:
 10106 00007D8A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10107 00007D8D 4889C3                  	mov rbx, rax
 10108 00007D90 58                      	pop rax
 10109 00007D91 C60005                  	mov byte [rax], T_closure
 10110 00007D94 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10111 00007D98 48C74009[A57D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f69
 10112 00007DA0 E922020000              	jmp .L_lambda_simple_end_4f69
 10113                                  .L_lambda_simple_code_4f69:	; lambda-simple body
 10114 00007DA5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10115 00007DAB 740B                    	je .L_lambda_simple_arity_check_ok_4f69
 10116 00007DAD FF742410                	push qword [rsp + 8 * 2]
 10117 00007DB1 6A01                    	push 1
 10118 00007DB3 E9B5AA0000              	jmp L_error_incorrect_arity_simple
 10119                                  .L_lambda_simple_arity_check_ok_4f69:
 10120 00007DB8 C8000000                	enter 0, 0
 10121 00007DBC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10122 00007DC1 E8EEAA0000              	call malloc
 10123 00007DC6 50                      	push rax
 10124 00007DC7 BF08000000              	mov rdi, 8 * 1	; new rib
 10125 00007DCC E8E3AA0000              	call malloc
 10126 00007DD1 50                      	push rax
 10127 00007DD2 BF18000000              	mov rdi, 8 * 3	; extended env
 10128 00007DD7 E8D8AA0000              	call malloc
 10129 00007DDC 488B7D10                	mov rdi, ENV
 10130 00007DE0 BE00000000              	mov rsi, 0
 10131 00007DE5 BA01000000              	mov rdx, 1
 10132                                  .L_lambda_opt_env_loop_0c90:	; ext_env[i + 1] <-- env[i]
 10133 00007DEA 4883FE02                	cmp rsi, 2
 10134 00007DEE 7410                    	je .L_lambda_opt_env_end_0c90
 10135 00007DF0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 10136 00007DF4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10137 00007DF8 48FFC6                  	inc rsi
 10138 00007DFB 48FFC2                  	inc rdx
 10139 00007DFE EBEA                    	jmp .L_lambda_opt_env_loop_0c90
 10140                                  .L_lambda_opt_env_end_0c90:
 10141 00007E00 5B                      	pop rbx
 10142 00007E01 BE00000000              	mov rsi, 0
 10143                                  .L_lambda_opt_params_loop_0c90:	; copy params
 10144 00007E06 4883FE01                	cmp rsi, 1
 10145 00007E0A 740E                    	je .L_lambda_opt_params_end_0c90
 10146 00007E0C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10147 00007E11 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10148 00007E15 48FFC6                  	inc rsi
 10149 00007E18 EBEC                    	jmp .L_lambda_opt_params_loop_0c90
 10150                                  .L_lambda_opt_params_end_0c90:
 10151 00007E1A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10152 00007E1D 4889C3                  	mov rbx, rax
 10153 00007E20 58                      	pop rax
 10154 00007E21 C60005                  	mov byte [rax], T_closure
 10155 00007E24 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10156 00007E28 48C74009[357E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c90
 10157 00007E30 E98E010000              	jmp .L_lambda_opt_end_0c90
 10158                                  .L_lambda_opt_code_0c90:	; lambda-opt body
 10159 00007E35 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 10160 00007E3A 4889FB                  	mov rbx, rdi
 10161 00007E3D 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
 10162 00007E41 4883FB00                	cmp rbx, 0
 10163 00007E45 7F45                    	jg .L_lambda_opt_arity_check_more_0c90
 10164                                  .L_lambda_opt_arity_check_exact_0c90:	 ; if params in opt is exact
 10165 00007E47 4883EC08                	sub rsp, 8
 10166 00007E4B BE00000000              	mov rsi, 0 ; index
 10167                                  .L_lambda_opt_stack_enlarge_loop_0c90:	 ; stack loop enlarge start
 10168 00007E50 4883FE03                	cmp rsi, 3
 10169 00007E54 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c90
 10170 00007E56 4889F7                  	mov rdi, rsi
 10171 00007E59 48FFC7                  	inc rdi
 10172 00007E5C 48C1E703                	shl rdi, 3
 10173 00007E60 4801E7                  	add rdi, rsp
 10174 00007E63 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 10175 00007E66 4883EB08                	sub rbx, 8
 10176 00007E6A 488B3F                  	mov rdi, [rdi]
 10177 00007E6D 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 10178 00007E70 48FFC6                  	inc rsi
 10179 00007E73 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c90
 10180                                  .L_lambda_opt_stack_enlarge_loop_exit_0c90:	 ; end of stack enlarge loop
 10181 00007E75 48C7442418-             	mov qword [rsp + 3*8], sob_nil
 10181 00007E7A [01000000]         
 10182 00007E7E 48C744241001000000      	mov qword [rsp + 2*8], 1
 10183 00007E87 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c90
 10184                                  .L_lambda_opt_arity_check_more_0c90:	 ; if params in opt is more
 10185 00007E8C 48B8-                   	mov rax, sob_nil
 10185 00007E8E [0100000000000000] 
 10186 00007E96 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 10187 00007E99 48FFCE                  	dec rsi
 10188                                  .L_lambda_opt_list_create_loop_0c90:	; start of list creation loop
 10189 00007E9C 4883FEFF                	cmp rsi, -1
 10190 00007EA0 7422                    	je .L_lambda_opt_list_create_loop_exit_0c90
 10191 00007EA2 488D4E03                	lea rcx, [rsi + (3 + 0)]
 10192 00007EA6 48C1E103                	shl rcx, 3
 10193 00007EAA 4801E1                  	add rcx, rsp
 10194 00007EAD 488B09                  	mov rcx, [rcx]
 10195 00007EB0 56                      	push rsi ; save params
 10196 00007EB1 53                      	push rbx
 10197                                  
 10198 00007EB2 50                      	push rax ; cdr
 10199 00007EB3 51                      	push rcx ; car
 10200 00007EB4 6A02                    	push qword 2 ; push num of args
 10201 00007EB6 6A01                    	push qword 1 ; push garbage as env
 10202 00007EB8 E87EB30000              	call L_code_ptr_cons
 10203                                  
 10204 00007EBD 5B                      	pop rbx ; restore params
 10205 00007EBE 5E                      	pop rsi
 10206 00007EBF 48FFCE                  	dec rsi
 10207 00007EC2 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c90
 10208                                  .L_lambda_opt_list_create_loop_exit_0c90:	; end of list creation loop
 10209 00007EC4 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 10210 00007EC9 4883C302                	add rbx, 2
 10211 00007ECD 4889DF                  	mov rdi, rbx
 10212 00007ED0 48C1E703                	shl rdi,3
 10213 00007ED4 4801E7                  	add rdi, rsp
 10214 00007ED7 488907                  	mov [rdi], rax
 10215 00007EDA BE00000000              	mov rsi, 0 ;index
 10216                                  .L_lambda_opt_stack_shrink_loop_0c90:	; start of stack shrink loop
 10217 00007EDF 4883FE03                	cmp rsi, 3
 10218 00007EE3 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c90
 10219 00007EE5 BF02000000              	mov rdi, 2
 10220 00007EEA 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 10221 00007EED 4889D9                  	mov rcx, rbx
 10222 00007EF0 4829F1                  	sub rcx, rsi
 10223 00007EF3 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 10224 00007EF6 4889FA                  	mov rdx, rdi
 10225 00007EF9 48C1E203                	shl rdx, 3
 10226 00007EFD 4801E2                  	add rdx, rsp
 10227 00007F00 48C1E103                	shl rcx, 3
 10228 00007F04 4801E1                  	add rcx, rsp
 10229 00007F07 488B12                  	mov rdx, [rdx]
 10230 00007F0A 488911                  	mov [rcx], rdx
 10231 00007F0D 48FFC6                  	inc rsi
 10232 00007F10 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c90
 10233                                  .L_lambda_opt_stack_shrink_loop_exit_0c90:	; end of stack shrink loop
 10234 00007F12 4883EB02                	sub rbx, 2 ; rbx has number of args
 10235 00007F16 4883EB01                	sub rbx, 1
 10236 00007F1A 48C1E303                	shl rbx, 3
 10237 00007F1E 4801DC                  	add rsp, rbx
 10238 00007F21 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 10239                                  .L_lambda_opt_stack_adjusted_0c90:
 10240 00007F2A C8000000                	enter 0, 0
 10241 00007F2E 488B4520                	mov rax, PARAM(0)
 10242 00007F32 50                      	push rax
 10243 00007F33 488D0425[80000000]      	lea rax, [128 + L_constants]
 10244 00007F3B 50                      	push rax
 10245 00007F3C 488B4510                	mov rax, qword [rbp + 8*2]
 10246 00007F40 488B00                  	mov rax, qword [rax + 8*0]
 10247 00007F43 488B00                  	mov rax, qword [rax + 8*0]
 10248 00007F46 50                      	push rax
 10249 00007F47 6A03                    	push 3
 10250 00007F49 488B0425[F8020000]      	mov rax, qword [free_var_95]
 10251                                  	assert_closure(rax)
    65 00007F51 803805              <1>  cmp byte [%1], %2
    66 00007F54 0F85DAC10000        <1>  jne L_error_incorrect_type
 10252 00007F5A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10253 00007F5E 53                      	push rbx
 10254 00007F5F FF7508                  	push RET_ADDR
 10255 00007F62 488B7D18                	mov rdi, COUNT
 10256 00007F66 4883C703                	add rdi, 3
 10257 00007F6A 48C1E703                	shl rdi, 3
 10258 00007F6E 4801EF                  	add rdi, rbp
 10259 00007F71 488B6D00                	mov rbp, OLD_RDP
 10260 00007F75 BE00000000              	mov rsi, 0
 10261                                  .L_tc_recycle_frame_loop_5cf0:	 ; start recycle frame loop
 10262 00007F7A 4883FE06                	cmp rsi, 6
 10263 00007F7E 7427                    	je .L_tc_recycle_frame_done_5cf0
 10264 00007F80 B905000000              	mov rcx, 5
 10265 00007F85 4829F1                  	sub rcx, rsi
 10266 00007F88 48C1E103                	shl rcx, 3
 10267 00007F8C 4801E1                  	add rcx, rsp ; rcx is the address to move
 10268 00007F8F 4889F3                  	mov rbx, rsi
 10269 00007F92 48C1E303                	shl rbx, 3
 10270 00007F96 48F7DB                  	neg rbx
 10271 00007F99 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10272 00007F9C 488B09                  	mov rcx, [rcx]
 10273 00007F9F 48890B                  	mov [rbx], rcx
 10274 00007FA2 48FFC6                  	inc rsi
 10275 00007FA5 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf0
 10276                                  .L_tc_recycle_frame_done_5cf0:	 ; end recycle frame loop
 10277 00007FA7 BB05000000              	mov rbx, 5
 10278 00007FAC 48C1E303                	shl rbx, 3
 10279 00007FB0 48F7DB                  	neg rbx
 10280 00007FB3 4801FB                  	add rbx, rdi
 10281 00007FB6 4889DC                  	mov rsp, rbx
 10282 00007FB9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10283 00007FBD FFE3                    	jmp rbx
 10284 00007FBF C9                      	leave
 10285 00007FC0 C21800                  	ret AND_KILL_FRAME(1)
 10286                                  .L_lambda_opt_end_0c90:	; new closure is in rax
 10287 00007FC3 C9                      	leave
 10288 00007FC4 C21800                  	ret 8 * (2 + 1)
 10289                                  .L_lambda_simple_end_4f69:	; new closure is in rax
 10290                                  	assert_closure(rax)
    65 00007FC7 803805              <1>  cmp byte [%1], %2
    66 00007FCA 0F8564C10000        <1>  jne L_error_incorrect_type
 10291 00007FD0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10292 00007FD4 53                      	push rbx
 10293 00007FD5 FF7508                  	push RET_ADDR
 10294 00007FD8 488B7D18                	mov rdi, COUNT
 10295 00007FDC 4883C703                	add rdi, 3
 10296 00007FE0 48C1E703                	shl rdi, 3
 10297 00007FE4 4801EF                  	add rdi, rbp
 10298 00007FE7 488B6D00                	mov rbp, OLD_RDP
 10299 00007FEB BE00000000              	mov rsi, 0
 10300                                  .L_tc_recycle_frame_loop_5ce8:	 ; start recycle frame loop
 10301 00007FF0 4883FE04                	cmp rsi, 4
 10302 00007FF4 7427                    	je .L_tc_recycle_frame_done_5ce8
 10303 00007FF6 B903000000              	mov rcx, 3
 10304 00007FFB 4829F1                  	sub rcx, rsi
 10305 00007FFE 48C1E103                	shl rcx, 3
 10306 00008002 4801E1                  	add rcx, rsp ; rcx is the address to move
 10307 00008005 4889F3                  	mov rbx, rsi
 10308 00008008 48C1E303                	shl rbx, 3
 10309 0000800C 48F7DB                  	neg rbx
 10310 0000800F 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10311 00008012 488B09                  	mov rcx, [rcx]
 10312 00008015 48890B                  	mov [rbx], rcx
 10313 00008018 48FFC6                  	inc rsi
 10314 0000801B EBD3                    	jmp .L_tc_recycle_frame_loop_5ce8
 10315                                  .L_tc_recycle_frame_done_5ce8:	 ; end recycle frame loop
 10316 0000801D BB03000000              	mov rbx, 3
 10317 00008022 48C1E303                	shl rbx, 3
 10318 00008026 48F7DB                  	neg rbx
 10319 00008029 4801FB                  	add rbx, rdi
 10320 0000802C 4889DC                  	mov rsp, rbx
 10321 0000802F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10322 00008033 FFE3                    	jmp rbx
 10323 00008035 C9                      	leave
 10324 00008036 C21800                  	ret 8 * (2 + 1)
 10325                                  .L_lambda_simple_end_4f67:	; new closure is in rax
 10326                                  	assert_closure(rax)
    65 00008039 803805              <1>  cmp byte [%1], %2
    66 0000803C 0F85F2C00000        <1>  jne L_error_incorrect_type
 10327 00008042 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10328 00008046 53                      	push rbx
 10329 00008047 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10330 0000804B FFD3                    	call rbx
 10331 0000804D 48890425[18030000]      	mov qword [free_var_99], rax
 10332 00008055 48B8-                   	mov rax, sob_void
 10332 00008057 [0000000000000000] 
 10333                                  
 10334 0000805F 4889C7                  	mov rdi, rax
 10335 00008062 E85EA80000              	call print_sexpr_if_not_void
 10336                                  
 10337 00008067 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10338 0000806C E843A80000              	call malloc
 10339 00008071 50                      	push rax
 10340 00008072 BF00000000              	mov rdi, 8 * 0	; new rib
 10341 00008077 E838A80000              	call malloc
 10342 0000807C 50                      	push rax
 10343 0000807D BF08000000              	mov rdi, 8 * 1	; extended env
 10344 00008082 E82DA80000              	call malloc
 10345 00008087 488B7D10                	mov rdi, ENV
 10346 0000808B BE00000000              	mov rsi, 0
 10347 00008090 BA01000000              	mov rdx, 1
 10348                                  .L_lambda_simple_env_loop_4f6a:	; ext_env[i + 1] <-- env[i]
 10349 00008095 4883FE00                	cmp rsi, 0
 10350 00008099 7410                    	je .L_lambda_simple_env_end_4f6a
 10351 0000809B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 10352 0000809F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10353 000080A3 48FFC6                  	inc rsi
 10354 000080A6 48FFC2                  	inc rdx
 10355 000080A9 EBEA                    	jmp .L_lambda_simple_env_loop_4f6a
 10356                                  .L_lambda_simple_env_end_4f6a:
 10357 000080AB 5B                      	pop rbx
 10358 000080AC BE00000000              	mov rsi, 0
 10359                                  .L_lambda_simple_params_loop_4f6a:	; copy params
 10360 000080B1 4883FE00                	cmp rsi, 0
 10361 000080B5 740E                    	je .L_lambda_simple_params_end_4f6a
 10362 000080B7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10363 000080BC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10364 000080C0 48FFC6                  	inc rsi
 10365 000080C3 EBEC                    	jmp .L_lambda_simple_params_loop_4f6a
 10366                                  .L_lambda_simple_params_end_4f6a:
 10367 000080C5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10368 000080C8 4889C3                  	mov rbx, rax
 10369 000080CB 58                      	pop rax
 10370 000080CC C60005                  	mov byte [rax], T_closure
 10371 000080CF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10372 000080D3 48C74009[E0800000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f6a
 10373 000080DB E9A5000000              	jmp .L_lambda_simple_end_4f6a
 10374                                  .L_lambda_simple_code_4f6a:	; lambda-simple body
 10375 000080E0 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10376 000080E6 740B                    	je .L_lambda_simple_arity_check_ok_4f6a
 10377 000080E8 FF742410                	push qword [rsp + 8 * 2]
 10378 000080EC 6A00                    	push 0
 10379 000080EE E97AA70000              	jmp L_error_incorrect_arity_simple
 10380                                  .L_lambda_simple_arity_check_ok_4f6a:
 10381 000080F3 C8000000                	enter 0, 0
 10382 000080F7 488D0425[44000000]      	lea rax, [68 + L_constants]
 10383 000080FF 50                      	push rax
 10384 00008100 488D0425[AE000000]      	lea rax, [174 + L_constants]
 10385 00008108 50                      	push rax
 10386 00008109 6A02                    	push 2
 10387 0000810B 488B0425[30010000]      	mov rax, qword [free_var_38]
 10388                                  	assert_closure(rax)
    65 00008113 803805              <1>  cmp byte [%1], %2
    66 00008116 0F8518C00000        <1>  jne L_error_incorrect_type
 10389 0000811C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10390 00008120 53                      	push rbx
 10391 00008121 FF7508                  	push RET_ADDR
 10392 00008124 488B7D18                	mov rdi, COUNT
 10393 00008128 4883C703                	add rdi, 3
 10394 0000812C 48C1E703                	shl rdi, 3
 10395 00008130 4801EF                  	add rdi, rbp
 10396 00008133 488B6D00                	mov rbp, OLD_RDP
 10397 00008137 BE00000000              	mov rsi, 0
 10398                                  .L_tc_recycle_frame_loop_5cf1:	 ; start recycle frame loop
 10399 0000813C 4883FE05                	cmp rsi, 5
 10400 00008140 7427                    	je .L_tc_recycle_frame_done_5cf1
 10401 00008142 B904000000              	mov rcx, 4
 10402 00008147 4829F1                  	sub rcx, rsi
 10403 0000814A 48C1E103                	shl rcx, 3
 10404 0000814E 4801E1                  	add rcx, rsp ; rcx is the address to move
 10405 00008151 4889F3                  	mov rbx, rsi
 10406 00008154 48C1E303                	shl rbx, 3
 10407 00008158 48F7DB                  	neg rbx
 10408 0000815B 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10409 0000815E 488B09                  	mov rcx, [rcx]
 10410 00008161 48890B                  	mov [rbx], rcx
 10411 00008164 48FFC6                  	inc rsi
 10412 00008167 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf1
 10413                                  .L_tc_recycle_frame_done_5cf1:	 ; end recycle frame loop
 10414 00008169 BB04000000              	mov rbx, 4
 10415 0000816E 48C1E303                	shl rbx, 3
 10416 00008172 48F7DB                  	neg rbx
 10417 00008175 4801FB                  	add rbx, rdi
 10418 00008178 4889DC                  	mov rsp, rbx
 10419 0000817B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10420 0000817F FFE3                    	jmp rbx
 10421 00008181 C9                      	leave
 10422 00008182 C21000                  	ret 8 * (2 + 0)
 10423                                  .L_lambda_simple_end_4f6a:	; new closure is in rax
 10424 00008185 50                      	push rax
 10425 00008186 6A01                    	push 1
 10426 00008188 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10427 0000818D E822A70000              	call malloc
 10428 00008192 50                      	push rax
 10429 00008193 BF00000000              	mov rdi, 8 * 0	; new rib
 10430 00008198 E817A70000              	call malloc
 10431 0000819D 50                      	push rax
 10432 0000819E BF08000000              	mov rdi, 8 * 1	; extended env
 10433 000081A3 E80CA70000              	call malloc
 10434 000081A8 488B7D10                	mov rdi, ENV
 10435 000081AC BE00000000              	mov rsi, 0
 10436 000081B1 BA01000000              	mov rdx, 1
 10437                                  .L_lambda_simple_env_loop_4f6b:	; ext_env[i + 1] <-- env[i]
 10438 000081B6 4883FE00                	cmp rsi, 0
 10439 000081BA 7410                    	je .L_lambda_simple_env_end_4f6b
 10440 000081BC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 10441 000081C0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10442 000081C4 48FFC6                  	inc rsi
 10443 000081C7 48FFC2                  	inc rdx
 10444 000081CA EBEA                    	jmp .L_lambda_simple_env_loop_4f6b
 10445                                  .L_lambda_simple_env_end_4f6b:
 10446 000081CC 5B                      	pop rbx
 10447 000081CD BE00000000              	mov rsi, 0
 10448                                  .L_lambda_simple_params_loop_4f6b:	; copy params
 10449 000081D2 4883FE00                	cmp rsi, 0
 10450 000081D6 740E                    	je .L_lambda_simple_params_end_4f6b
 10451 000081D8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10452 000081DD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10453 000081E1 48FFC6                  	inc rsi
 10454 000081E4 EBEC                    	jmp .L_lambda_simple_params_loop_4f6b
 10455                                  .L_lambda_simple_params_end_4f6b:
 10456 000081E6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10457 000081E9 4889C3                  	mov rbx, rax
 10458 000081EC 58                      	pop rax
 10459 000081ED C60005                  	mov byte [rax], T_closure
 10460 000081F0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10461 000081F4 48C74009[01820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f6b
 10462 000081FC E98E0A0000              	jmp .L_lambda_simple_end_4f6b
 10463                                  .L_lambda_simple_code_4f6b:	; lambda-simple body
 10464 00008201 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10465 00008207 740B                    	je .L_lambda_simple_arity_check_ok_4f6b
 10466 00008209 FF742410                	push qword [rsp + 8 * 2]
 10467 0000820D 6A01                    	push 1
 10468 0000820F E959A60000              	jmp L_error_incorrect_arity_simple
 10469                                  .L_lambda_simple_arity_check_ok_4f6b:
 10470 00008214 C8000000                	enter 0, 0
 10471 00008218 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10472 0000821D E892A60000              	call malloc
 10473 00008222 50                      	push rax
 10474 00008223 BF08000000              	mov rdi, 8 * 1	; new rib
 10475 00008228 E887A60000              	call malloc
 10476 0000822D 50                      	push rax
 10477 0000822E BF10000000              	mov rdi, 8 * 2	; extended env
 10478 00008233 E87CA60000              	call malloc
 10479 00008238 488B7D10                	mov rdi, ENV
 10480 0000823C BE00000000              	mov rsi, 0
 10481 00008241 BA01000000              	mov rdx, 1
 10482                                  .L_lambda_simple_env_loop_4f6c:	; ext_env[i + 1] <-- env[i]
 10483 00008246 4883FE01                	cmp rsi, 1
 10484 0000824A 7410                    	je .L_lambda_simple_env_end_4f6c
 10485 0000824C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 10486 00008250 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10487 00008254 48FFC6                  	inc rsi
 10488 00008257 48FFC2                  	inc rdx
 10489 0000825A EBEA                    	jmp .L_lambda_simple_env_loop_4f6c
 10490                                  .L_lambda_simple_env_end_4f6c:
 10491 0000825C 5B                      	pop rbx
 10492 0000825D BE00000000              	mov rsi, 0
 10493                                  .L_lambda_simple_params_loop_4f6c:	; copy params
 10494 00008262 4883FE01                	cmp rsi, 1
 10495 00008266 740E                    	je .L_lambda_simple_params_end_4f6c
 10496 00008268 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10497 0000826D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10498 00008271 48FFC6                  	inc rsi
 10499 00008274 EBEC                    	jmp .L_lambda_simple_params_loop_4f6c
 10500                                  .L_lambda_simple_params_end_4f6c:
 10501 00008276 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10502 00008279 4889C3                  	mov rbx, rax
 10503 0000827C 58                      	pop rax
 10504 0000827D C60005                  	mov byte [rax], T_closure
 10505 00008280 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10506 00008284 48C74009[91820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f6c
 10507 0000828C E9FE040000              	jmp .L_lambda_simple_end_4f6c
 10508                                  .L_lambda_simple_code_4f6c:	; lambda-simple body
 10509 00008291 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10510 00008297 740B                    	je .L_lambda_simple_arity_check_ok_4f6c
 10511 00008299 FF742410                	push qword [rsp + 8 * 2]
 10512 0000829D 6A02                    	push 2
 10513 0000829F E9C9A50000              	jmp L_error_incorrect_arity_simple
 10514                                  .L_lambda_simple_arity_check_ok_4f6c:
 10515 000082A4 C8000000                	enter 0, 0
 10516 000082A8 488B4520                	mov rax, PARAM(0)
 10517 000082AC 50                      	push rax
 10518 000082AD 6A01                    	push 1
 10519 000082AF 488B0425[48000000]      	mov rax, qword [free_var_9]
 10520                                  	assert_closure(rax)
    65 000082B7 803805              <1>  cmp byte [%1], %2
    66 000082BA 0F8574BE0000        <1>  jne L_error_incorrect_type
 10521 000082C0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10522 000082C4 53                      	push rbx
 10523 000082C5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10524 000082C9 FFD3                    	call rbx
 10525 000082CB 483D[02000000]          	cmp rax, sob_boolean_false
 10526 000082D1 0F8407020000            	je .L_if_else_569f
 10527 000082D7 488B4528                	mov rax, PARAM(1)
 10528 000082DB 50                      	push rax
 10529 000082DC 6A01                    	push 1
 10530 000082DE 488B0425[48000000]      	mov rax, qword [free_var_9]
 10531                                  	assert_closure(rax)
    65 000082E6 803805              <1>  cmp byte [%1], %2
    66 000082E9 0F8545BE0000        <1>  jne L_error_incorrect_type
 10532 000082EF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10533 000082F3 53                      	push rbx
 10534 000082F4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10535 000082F8 FFD3                    	call rbx
 10536 000082FA 483D[02000000]          	cmp rax, sob_boolean_false
 10537 00008300 0F8487000000            	je .L_if_else_56a0
 10538 00008306 488B4528                	mov rax, PARAM(1)
 10539 0000830A 50                      	push rax
 10540 0000830B 488B4520                	mov rax, PARAM(0)
 10541 0000830F 50                      	push rax
 10542 00008310 6A02                    	push 2
 10543 00008312 488B0425[28010000]      	mov rax, qword [free_var_37]
 10544                                  	assert_closure(rax)
    65 0000831A 803805              <1>  cmp byte [%1], %2
    66 0000831D 0F8511BE0000        <1>  jne L_error_incorrect_type
 10545 00008323 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10546 00008327 53                      	push rbx
 10547 00008328 FF7508                  	push RET_ADDR
 10548 0000832B 488B7D18                	mov rdi, COUNT
 10549 0000832F 4883C703                	add rdi, 3
 10550 00008333 48C1E703                	shl rdi, 3
 10551 00008337 4801EF                  	add rdi, rbp
 10552 0000833A 488B6D00                	mov rbp, OLD_RDP
 10553 0000833E BE00000000              	mov rsi, 0
 10554                                  .L_tc_recycle_frame_loop_5cf3:	 ; start recycle frame loop
 10555 00008343 4883FE05                	cmp rsi, 5
 10556 00008347 7427                    	je .L_tc_recycle_frame_done_5cf3
 10557 00008349 B904000000              	mov rcx, 4
 10558 0000834E 4829F1                  	sub rcx, rsi
 10559 00008351 48C1E103                	shl rcx, 3
 10560 00008355 4801E1                  	add rcx, rsp ; rcx is the address to move
 10561 00008358 4889F3                  	mov rbx, rsi
 10562 0000835B 48C1E303                	shl rbx, 3
 10563 0000835F 48F7DB                  	neg rbx
 10564 00008362 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10565 00008365 488B09                  	mov rcx, [rcx]
 10566 00008368 48890B                  	mov [rbx], rcx
 10567 0000836B 48FFC6                  	inc rsi
 10568 0000836E EBD3                    	jmp .L_tc_recycle_frame_loop_5cf3
 10569                                  .L_tc_recycle_frame_done_5cf3:	 ; end recycle frame loop
 10570 00008370 BB04000000              	mov rbx, 4
 10571 00008375 48C1E303                	shl rbx, 3
 10572 00008379 48F7DB                  	neg rbx
 10573 0000837C 4801FB                  	add rbx, rdi
 10574 0000837F 4889DC                  	mov rsp, rbx
 10575 00008382 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10576 00008386 FFE3                    	jmp rbx
 10577 00008388 E94C010000              	jmp .L_if_end_56a0
 10578                                  	.L_if_else_56a0:
 10579 0000838D 488B4528                	mov rax, PARAM(1)
 10580 00008391 50                      	push rax
 10581 00008392 6A01                    	push 1
 10582 00008394 488B0425[40000000]      	mov rax, qword [free_var_8]
 10583                                  	assert_closure(rax)
    65 0000839C 803805              <1>  cmp byte [%1], %2
    66 0000839F 0F858FBD0000        <1>  jne L_error_incorrect_type
 10584 000083A5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10585 000083A9 53                      	push rbx
 10586 000083AA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10587 000083AE FFD3                    	call rbx
 10588 000083B0 483D[02000000]          	cmp rax, sob_boolean_false
 10589 000083B6 0F84A3000000            	je .L_if_else_56a1
 10590 000083BC 488B4528                	mov rax, PARAM(1)
 10591 000083C0 50                      	push rax
 10592 000083C1 488B4520                	mov rax, PARAM(0)
 10593 000083C5 50                      	push rax
 10594 000083C6 6A01                    	push 1
 10595 000083C8 488B0425[B8000000]      	mov rax, qword [free_var_23]
 10596                                  	assert_closure(rax)
    65 000083D0 803805              <1>  cmp byte [%1], %2
    66 000083D3 0F855BBD0000        <1>  jne L_error_incorrect_type
 10597 000083D9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10598 000083DD 53                      	push rbx
 10599 000083DE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10600 000083E2 FFD3                    	call rbx
 10601 000083E4 50                      	push rax
 10602 000083E5 6A02                    	push 2
 10603 000083E7 488B0425[08010000]      	mov rax, qword [free_var_33]
 10604                                  	assert_closure(rax)
    65 000083EF 803805              <1>  cmp byte [%1], %2
    66 000083F2 0F853CBD0000        <1>  jne L_error_incorrect_type
 10605 000083F8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10606 000083FC 53                      	push rbx
 10607 000083FD FF7508                  	push RET_ADDR
 10608 00008400 488B7D18                	mov rdi, COUNT
 10609 00008404 4883C703                	add rdi, 3
 10610 00008408 48C1E703                	shl rdi, 3
 10611 0000840C 4801EF                  	add rdi, rbp
 10612 0000840F 488B6D00                	mov rbp, OLD_RDP
 10613 00008413 BE00000000              	mov rsi, 0
 10614                                  .L_tc_recycle_frame_loop_5cf4:	 ; start recycle frame loop
 10615 00008418 4883FE05                	cmp rsi, 5
 10616 0000841C 7427                    	je .L_tc_recycle_frame_done_5cf4
 10617 0000841E B904000000              	mov rcx, 4
 10618 00008423 4829F1                  	sub rcx, rsi
 10619 00008426 48C1E103                	shl rcx, 3
 10620 0000842A 4801E1                  	add rcx, rsp ; rcx is the address to move
 10621 0000842D 4889F3                  	mov rbx, rsi
 10622 00008430 48C1E303                	shl rbx, 3
 10623 00008434 48F7DB                  	neg rbx
 10624 00008437 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10625 0000843A 488B09                  	mov rcx, [rcx]
 10626 0000843D 48890B                  	mov [rbx], rcx
 10627 00008440 48FFC6                  	inc rsi
 10628 00008443 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf4
 10629                                  .L_tc_recycle_frame_done_5cf4:	 ; end recycle frame loop
 10630 00008445 BB04000000              	mov rbx, 4
 10631 0000844A 48C1E303                	shl rbx, 3
 10632 0000844E 48F7DB                  	neg rbx
 10633 00008451 4801FB                  	add rbx, rdi
 10634 00008454 4889DC                  	mov rsp, rbx
 10635 00008457 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10636 0000845B FFE3                    	jmp rbx
 10637 0000845D EB7A                    	jmp .L_if_end_56a1
 10638                                  	.L_if_else_56a1:
 10639 0000845F 6A00                    	push 0
 10640 00008461 488B4510                	mov rax, qword [rbp + 8*2]
 10641 00008465 488B00                  	mov rax, qword [rax + 8*0]
 10642 00008468 488B00                  	mov rax, qword [rax + 8*0]
 10643                                  	assert_closure(rax)
    65 0000846B 803805              <1>  cmp byte [%1], %2
    66 0000846E 0F85C0BC0000        <1>  jne L_error_incorrect_type
 10644 00008474 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10645 00008478 53                      	push rbx
 10646 00008479 FF7508                  	push RET_ADDR
 10647 0000847C 488B7D18                	mov rdi, COUNT
 10648 00008480 4883C703                	add rdi, 3
 10649 00008484 48C1E703                	shl rdi, 3
 10650 00008488 4801EF                  	add rdi, rbp
 10651 0000848B 488B6D00                	mov rbp, OLD_RDP
 10652 0000848F BE00000000              	mov rsi, 0
 10653                                  .L_tc_recycle_frame_loop_5cf5:	 ; start recycle frame loop
 10654 00008494 4883FE03                	cmp rsi, 3
 10655 00008498 7427                    	je .L_tc_recycle_frame_done_5cf5
 10656 0000849A B902000000              	mov rcx, 2
 10657 0000849F 4829F1                  	sub rcx, rsi
 10658 000084A2 48C1E103                	shl rcx, 3
 10659 000084A6 4801E1                  	add rcx, rsp ; rcx is the address to move
 10660 000084A9 4889F3                  	mov rbx, rsi
 10661 000084AC 48C1E303                	shl rbx, 3
 10662 000084B0 48F7DB                  	neg rbx
 10663 000084B3 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10664 000084B6 488B09                  	mov rcx, [rcx]
 10665 000084B9 48890B                  	mov [rbx], rcx
 10666 000084BC 48FFC6                  	inc rsi
 10667 000084BF EBD3                    	jmp .L_tc_recycle_frame_loop_5cf5
 10668                                  .L_tc_recycle_frame_done_5cf5:	 ; end recycle frame loop
 10669 000084C1 BB02000000              	mov rbx, 2
 10670 000084C6 48C1E303                	shl rbx, 3
 10671 000084CA 48F7DB                  	neg rbx
 10672 000084CD 4801FB                  	add rbx, rdi
 10673 000084D0 4889DC                  	mov rsp, rbx
 10674 000084D3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10675 000084D7 FFE3                    	jmp rbx
 10676                                  	.L_if_end_56a1:
 10677                                  	.L_if_end_56a0:
 10678 000084D9 E9AD020000              	jmp .L_if_end_569f
 10679                                  	.L_if_else_569f:
 10680 000084DE 488B4520                	mov rax, PARAM(0)
 10681 000084E2 50                      	push rax
 10682 000084E3 6A01                    	push 1
 10683 000084E5 488B0425[40000000]      	mov rax, qword [free_var_8]
 10684                                  	assert_closure(rax)
    65 000084ED 803805              <1>  cmp byte [%1], %2
    66 000084F0 0F853EBC0000        <1>  jne L_error_incorrect_type
 10685 000084F6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10686 000084FA 53                      	push rbx
 10687 000084FB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10688 000084FF FFD3                    	call rbx
 10689 00008501 483D[02000000]          	cmp rax, sob_boolean_false
 10690 00008507 0F8404020000            	je .L_if_else_56a2
 10691 0000850D 488B4528                	mov rax, PARAM(1)
 10692 00008511 50                      	push rax
 10693 00008512 6A01                    	push 1
 10694 00008514 488B0425[48000000]      	mov rax, qword [free_var_9]
 10695                                  	assert_closure(rax)
    65 0000851C 803805              <1>  cmp byte [%1], %2
    66 0000851F 0F850FBC0000        <1>  jne L_error_incorrect_type
 10696 00008525 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10697 00008529 53                      	push rbx
 10698 0000852A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10699 0000852E FFD3                    	call rbx
 10700 00008530 483D[02000000]          	cmp rax, sob_boolean_false
 10701 00008536 0F84A6000000            	je .L_if_else_56a3
 10702 0000853C 488B4528                	mov rax, PARAM(1)
 10703 00008540 50                      	push rax
 10704 00008541 6A01                    	push 1
 10705 00008543 488B0425[B8000000]      	mov rax, qword [free_var_23]
 10706                                  	assert_closure(rax)
    65 0000854B 803805              <1>  cmp byte [%1], %2
    66 0000854E 0F85E0BB0000        <1>  jne L_error_incorrect_type
 10707 00008554 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10708 00008558 53                      	push rbx
 10709 00008559 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10710 0000855D FFD3                    	call rbx
 10711 0000855F 50                      	push rax
 10712 00008560 488B4520                	mov rax, PARAM(0)
 10713 00008564 50                      	push rax
 10714 00008565 6A02                    	push 2
 10715 00008567 488B0425[08010000]      	mov rax, qword [free_var_33]
 10716                                  	assert_closure(rax)
    65 0000856F 803805              <1>  cmp byte [%1], %2
    66 00008572 0F85BCBB0000        <1>  jne L_error_incorrect_type
 10717 00008578 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10718 0000857C 53                      	push rbx
 10719 0000857D FF7508                  	push RET_ADDR
 10720 00008580 488B7D18                	mov rdi, COUNT
 10721 00008584 4883C703                	add rdi, 3
 10722 00008588 48C1E703                	shl rdi, 3
 10723 0000858C 4801EF                  	add rdi, rbp
 10724 0000858F 488B6D00                	mov rbp, OLD_RDP
 10725 00008593 BE00000000              	mov rsi, 0
 10726                                  .L_tc_recycle_frame_loop_5cf6:	 ; start recycle frame loop
 10727 00008598 4883FE05                	cmp rsi, 5
 10728 0000859C 7427                    	je .L_tc_recycle_frame_done_5cf6
 10729 0000859E B904000000              	mov rcx, 4
 10730 000085A3 4829F1                  	sub rcx, rsi
 10731 000085A6 48C1E103                	shl rcx, 3
 10732 000085AA 4801E1                  	add rcx, rsp ; rcx is the address to move
 10733 000085AD 4889F3                  	mov rbx, rsi
 10734 000085B0 48C1E303                	shl rbx, 3
 10735 000085B4 48F7DB                  	neg rbx
 10736 000085B7 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10737 000085BA 488B09                  	mov rcx, [rcx]
 10738 000085BD 48890B                  	mov [rbx], rcx
 10739 000085C0 48FFC6                  	inc rsi
 10740 000085C3 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf6
 10741                                  .L_tc_recycle_frame_done_5cf6:	 ; end recycle frame loop
 10742 000085C5 BB04000000              	mov rbx, 4
 10743 000085CA 48C1E303                	shl rbx, 3
 10744 000085CE 48F7DB                  	neg rbx
 10745 000085D1 4801FB                  	add rbx, rdi
 10746 000085D4 4889DC                  	mov rsp, rbx
 10747 000085D7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10748 000085DB FFE3                    	jmp rbx
 10749 000085DD E92D010000              	jmp .L_if_end_56a3
 10750                                  	.L_if_else_56a3:
 10751 000085E2 488B4528                	mov rax, PARAM(1)
 10752 000085E6 50                      	push rax
 10753 000085E7 6A01                    	push 1
 10754 000085E9 488B0425[40000000]      	mov rax, qword [free_var_8]
 10755                                  	assert_closure(rax)
    65 000085F1 803805              <1>  cmp byte [%1], %2
    66 000085F4 0F853ABB0000        <1>  jne L_error_incorrect_type
 10756 000085FA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10757 000085FE 53                      	push rbx
 10758 000085FF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10759 00008603 FFD3                    	call rbx
 10760 00008605 483D[02000000]          	cmp rax, sob_boolean_false
 10761 0000860B 0F8484000000            	je .L_if_else_56a4
 10762 00008611 488B4528                	mov rax, PARAM(1)
 10763 00008615 50                      	push rax
 10764 00008616 488B4520                	mov rax, PARAM(0)
 10765 0000861A 50                      	push rax
 10766 0000861B 6A02                    	push 2
 10767 0000861D 488B0425[08010000]      	mov rax, qword [free_var_33]
 10768                                  	assert_closure(rax)
    65 00008625 803805              <1>  cmp byte [%1], %2
    66 00008628 0F8506BB0000        <1>  jne L_error_incorrect_type
 10769 0000862E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10770 00008632 53                      	push rbx
 10771 00008633 FF7508                  	push RET_ADDR
 10772 00008636 488B7D18                	mov rdi, COUNT
 10773 0000863A 4883C703                	add rdi, 3
 10774 0000863E 48C1E703                	shl rdi, 3
 10775 00008642 4801EF                  	add rdi, rbp
 10776 00008645 488B6D00                	mov rbp, OLD_RDP
 10777 00008649 BE00000000              	mov rsi, 0
 10778                                  .L_tc_recycle_frame_loop_5cf7:	 ; start recycle frame loop
 10779 0000864E 4883FE05                	cmp rsi, 5
 10780 00008652 7427                    	je .L_tc_recycle_frame_done_5cf7
 10781 00008654 B904000000              	mov rcx, 4
 10782 00008659 4829F1                  	sub rcx, rsi
 10783 0000865C 48C1E103                	shl rcx, 3
 10784 00008660 4801E1                  	add rcx, rsp ; rcx is the address to move
 10785 00008663 4889F3                  	mov rbx, rsi
 10786 00008666 48C1E303                	shl rbx, 3
 10787 0000866A 48F7DB                  	neg rbx
 10788 0000866D 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10789 00008670 488B09                  	mov rcx, [rcx]
 10790 00008673 48890B                  	mov [rbx], rcx
 10791 00008676 48FFC6                  	inc rsi
 10792 00008679 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf7
 10793                                  .L_tc_recycle_frame_done_5cf7:	 ; end recycle frame loop
 10794 0000867B BB04000000              	mov rbx, 4
 10795 00008680 48C1E303                	shl rbx, 3
 10796 00008684 48F7DB                  	neg rbx
 10797 00008687 4801FB                  	add rbx, rdi
 10798 0000868A 4889DC                  	mov rsp, rbx
 10799 0000868D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10800 00008691 FFE3                    	jmp rbx
 10801 00008693 EB7A                    	jmp .L_if_end_56a4
 10802                                  	.L_if_else_56a4:
 10803 00008695 6A00                    	push 0
 10804 00008697 488B4510                	mov rax, qword [rbp + 8*2]
 10805 0000869B 488B00                  	mov rax, qword [rax + 8*0]
 10806 0000869E 488B00                  	mov rax, qword [rax + 8*0]
 10807                                  	assert_closure(rax)
    65 000086A1 803805              <1>  cmp byte [%1], %2
    66 000086A4 0F858ABA0000        <1>  jne L_error_incorrect_type
 10808 000086AA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10809 000086AE 53                      	push rbx
 10810 000086AF FF7508                  	push RET_ADDR
 10811 000086B2 488B7D18                	mov rdi, COUNT
 10812 000086B6 4883C703                	add rdi, 3
 10813 000086BA 48C1E703                	shl rdi, 3
 10814 000086BE 4801EF                  	add rdi, rbp
 10815 000086C1 488B6D00                	mov rbp, OLD_RDP
 10816 000086C5 BE00000000              	mov rsi, 0
 10817                                  .L_tc_recycle_frame_loop_5cf8:	 ; start recycle frame loop
 10818 000086CA 4883FE03                	cmp rsi, 3
 10819 000086CE 7427                    	je .L_tc_recycle_frame_done_5cf8
 10820 000086D0 B902000000              	mov rcx, 2
 10821 000086D5 4829F1                  	sub rcx, rsi
 10822 000086D8 48C1E103                	shl rcx, 3
 10823 000086DC 4801E1                  	add rcx, rsp ; rcx is the address to move
 10824 000086DF 4889F3                  	mov rbx, rsi
 10825 000086E2 48C1E303                	shl rbx, 3
 10826 000086E6 48F7DB                  	neg rbx
 10827 000086E9 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10828 000086EC 488B09                  	mov rcx, [rcx]
 10829 000086EF 48890B                  	mov [rbx], rcx
 10830 000086F2 48FFC6                  	inc rsi
 10831 000086F5 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf8
 10832                                  .L_tc_recycle_frame_done_5cf8:	 ; end recycle frame loop
 10833 000086F7 BB02000000              	mov rbx, 2
 10834 000086FC 48C1E303                	shl rbx, 3
 10835 00008700 48F7DB                  	neg rbx
 10836 00008703 4801FB                  	add rbx, rdi
 10837 00008706 4889DC                  	mov rsp, rbx
 10838 00008709 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10839 0000870D FFE3                    	jmp rbx
 10840                                  	.L_if_end_56a4:
 10841                                  	.L_if_end_56a3:
 10842 0000870F EB7A                    	jmp .L_if_end_56a2
 10843                                  	.L_if_else_56a2:
 10844 00008711 6A00                    	push 0
 10845 00008713 488B4510                	mov rax, qword [rbp + 8*2]
 10846 00008717 488B00                  	mov rax, qword [rax + 8*0]
 10847 0000871A 488B00                  	mov rax, qword [rax + 8*0]
 10848                                  	assert_closure(rax)
    65 0000871D 803805              <1>  cmp byte [%1], %2
    66 00008720 0F850EBA0000        <1>  jne L_error_incorrect_type
 10849 00008726 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10850 0000872A 53                      	push rbx
 10851 0000872B FF7508                  	push RET_ADDR
 10852 0000872E 488B7D18                	mov rdi, COUNT
 10853 00008732 4883C703                	add rdi, 3
 10854 00008736 48C1E703                	shl rdi, 3
 10855 0000873A 4801EF                  	add rdi, rbp
 10856 0000873D 488B6D00                	mov rbp, OLD_RDP
 10857 00008741 BE00000000              	mov rsi, 0
 10858                                  .L_tc_recycle_frame_loop_5cf9:	 ; start recycle frame loop
 10859 00008746 4883FE03                	cmp rsi, 3
 10860 0000874A 7427                    	je .L_tc_recycle_frame_done_5cf9
 10861 0000874C B902000000              	mov rcx, 2
 10862 00008751 4829F1                  	sub rcx, rsi
 10863 00008754 48C1E103                	shl rcx, 3
 10864 00008758 4801E1                  	add rcx, rsp ; rcx is the address to move
 10865 0000875B 4889F3                  	mov rbx, rsi
 10866 0000875E 48C1E303                	shl rbx, 3
 10867 00008762 48F7DB                  	neg rbx
 10868 00008765 4801FB                  	add rbx, rdi ;rbx is the address to move to
 10869 00008768 488B09                  	mov rcx, [rcx]
 10870 0000876B 48890B                  	mov [rbx], rcx
 10871 0000876E 48FFC6                  	inc rsi
 10872 00008771 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf9
 10873                                  .L_tc_recycle_frame_done_5cf9:	 ; end recycle frame loop
 10874 00008773 BB02000000              	mov rbx, 2
 10875 00008778 48C1E303                	shl rbx, 3
 10876 0000877C 48F7DB                  	neg rbx
 10877 0000877F 4801FB                  	add rbx, rdi
 10878 00008782 4889DC                  	mov rsp, rbx
 10879 00008785 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10880 00008789 FFE3                    	jmp rbx
 10881                                  	.L_if_end_56a2:
 10882                                  	.L_if_end_569f:
 10883 0000878B C9                      	leave
 10884 0000878C C22000                  	ret 8 * (2 + 2)
 10885                                  .L_lambda_simple_end_4f6c:	; new closure is in rax
 10886 0000878F 50                      	push rax
 10887 00008790 6A01                    	push 1
 10888 00008792 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10889 00008797 E818A10000              	call malloc
 10890 0000879C 50                      	push rax
 10891 0000879D BF08000000              	mov rdi, 8 * 1	; new rib
 10892 000087A2 E80DA10000              	call malloc
 10893 000087A7 50                      	push rax
 10894 000087A8 BF10000000              	mov rdi, 8 * 2	; extended env
 10895 000087AD E802A10000              	call malloc
 10896 000087B2 488B7D10                	mov rdi, ENV
 10897 000087B6 BE00000000              	mov rsi, 0
 10898 000087BB BA01000000              	mov rdx, 1
 10899                                  .L_lambda_simple_env_loop_4f6d:	; ext_env[i + 1] <-- env[i]
 10900 000087C0 4883FE01                	cmp rsi, 1
 10901 000087C4 7410                    	je .L_lambda_simple_env_end_4f6d
 10902 000087C6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 10903 000087CA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10904 000087CE 48FFC6                  	inc rsi
 10905 000087D1 48FFC2                  	inc rdx
 10906 000087D4 EBEA                    	jmp .L_lambda_simple_env_loop_4f6d
 10907                                  .L_lambda_simple_env_end_4f6d:
 10908 000087D6 5B                      	pop rbx
 10909 000087D7 BE00000000              	mov rsi, 0
 10910                                  .L_lambda_simple_params_loop_4f6d:	; copy params
 10911 000087DC 4883FE01                	cmp rsi, 1
 10912 000087E0 740E                    	je .L_lambda_simple_params_end_4f6d
 10913 000087E2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10914 000087E7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10915 000087EB 48FFC6                  	inc rsi
 10916 000087EE EBEC                    	jmp .L_lambda_simple_params_loop_4f6d
 10917                                  .L_lambda_simple_params_end_4f6d:
 10918 000087F0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10919 000087F3 4889C3                  	mov rbx, rax
 10920 000087F6 58                      	pop rax
 10921 000087F7 C60005                  	mov byte [rax], T_closure
 10922 000087FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10923 000087FE 48C74009[0B880000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f6d
 10924 00008806 E912040000              	jmp .L_lambda_simple_end_4f6d
 10925                                  .L_lambda_simple_code_4f6d:	; lambda-simple body
 10926 0000880B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10927 00008811 740B                    	je .L_lambda_simple_arity_check_ok_4f6d
 10928 00008813 FF742410                	push qword [rsp + 8 * 2]
 10929 00008817 6A01                    	push 1
 10930 00008819 E94FA00000              	jmp L_error_incorrect_arity_simple
 10931                                  .L_lambda_simple_arity_check_ok_4f6d:
 10932 0000881E C8000000                	enter 0, 0
 10933 00008822 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10934 00008827 E888A00000              	call malloc
 10935 0000882C 50                      	push rax
 10936 0000882D BF08000000              	mov rdi, 8 * 1	; new rib
 10937 00008832 E87DA00000              	call malloc
 10938 00008837 50                      	push rax
 10939 00008838 BF18000000              	mov rdi, 8 * 3	; extended env
 10940 0000883D E872A00000              	call malloc
 10941 00008842 488B7D10                	mov rdi, ENV
 10942 00008846 BE00000000              	mov rsi, 0
 10943 0000884B BA01000000              	mov rdx, 1
 10944                                  .L_lambda_opt_env_loop_0c91:	; ext_env[i + 1] <-- env[i]
 10945 00008850 4883FE02                	cmp rsi, 2
 10946 00008854 7410                    	je .L_lambda_opt_env_end_0c91
 10947 00008856 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 10948 0000885A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10949 0000885E 48FFC6                  	inc rsi
 10950 00008861 48FFC2                  	inc rdx
 10951 00008864 EBEA                    	jmp .L_lambda_opt_env_loop_0c91
 10952                                  .L_lambda_opt_env_end_0c91:
 10953 00008866 5B                      	pop rbx
 10954 00008867 BE00000000              	mov rsi, 0
 10955                                  .L_lambda_opt_params_loop_0c91:	; copy params
 10956 0000886C 4883FE01                	cmp rsi, 1
 10957 00008870 740E                    	je .L_lambda_opt_params_end_0c91
 10958 00008872 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10959 00008877 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10960 0000887B 48FFC6                  	inc rsi
 10961 0000887E EBEC                    	jmp .L_lambda_opt_params_loop_0c91
 10962                                  .L_lambda_opt_params_end_0c91:
 10963 00008880 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10964 00008883 4889C3                  	mov rbx, rax
 10965 00008886 58                      	pop rax
 10966 00008887 C60005                  	mov byte [rax], T_closure
 10967 0000888A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10968 0000888E 48C74009[9B880000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c91
 10969 00008896 E97E030000              	jmp .L_lambda_opt_end_0c91
 10970                                  .L_lambda_opt_code_0c91:	; lambda-opt body
 10971 0000889B 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 10972 000088A0 4889FB                  	mov rbx, rdi
 10973 000088A3 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 10974 000088A7 4883FB00                	cmp rbx, 0
 10975 000088AB 7F45                    	jg .L_lambda_opt_arity_check_more_0c91
 10976                                  .L_lambda_opt_arity_check_exact_0c91:	 ; if params in opt is exact
 10977 000088AD 4883EC08                	sub rsp, 8
 10978 000088B1 BE00000000              	mov rsi, 0 ; index
 10979                                  .L_lambda_opt_stack_enlarge_loop_0c91:	 ; stack loop enlarge start
 10980 000088B6 4883FE04                	cmp rsi, 4
 10981 000088BA 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c91
 10982 000088BC 4889F7                  	mov rdi, rsi
 10983 000088BF 48FFC7                  	inc rdi
 10984 000088C2 48C1E703                	shl rdi, 3
 10985 000088C6 4801E7                  	add rdi, rsp
 10986 000088C9 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 10987 000088CC 4883EB08                	sub rbx, 8
 10988 000088D0 488B3F                  	mov rdi, [rdi]
 10989 000088D3 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 10990 000088D6 48FFC6                  	inc rsi
 10991 000088D9 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c91
 10992                                  .L_lambda_opt_stack_enlarge_loop_exit_0c91:	 ; end of stack enlarge loop
 10993 000088DB 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 10993 000088E0 [01000000]         
 10994 000088E4 48C744241002000000      	mov qword [rsp + 2*8], 2
 10995 000088ED E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c91
 10996                                  .L_lambda_opt_arity_check_more_0c91:	 ; if params in opt is more
 10997 000088F2 48B8-                   	mov rax, sob_nil
 10997 000088F4 [0100000000000000] 
 10998 000088FC 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 10999 000088FF 48FFCE                  	dec rsi
 11000                                  .L_lambda_opt_list_create_loop_0c91:	; start of list creation loop
 11001 00008902 4883FEFF                	cmp rsi, -1
 11002 00008906 7422                    	je .L_lambda_opt_list_create_loop_exit_0c91
 11003 00008908 488D4E04                	lea rcx, [rsi + (3 + 1)]
 11004 0000890C 48C1E103                	shl rcx, 3
 11005 00008910 4801E1                  	add rcx, rsp
 11006 00008913 488B09                  	mov rcx, [rcx]
 11007 00008916 56                      	push rsi ; save params
 11008 00008917 53                      	push rbx
 11009                                  
 11010 00008918 50                      	push rax ; cdr
 11011 00008919 51                      	push rcx ; car
 11012 0000891A 6A02                    	push qword 2 ; push num of args
 11013 0000891C 6A01                    	push qword 1 ; push garbage as env
 11014 0000891E E818A90000              	call L_code_ptr_cons
 11015                                  
 11016 00008923 5B                      	pop rbx ; restore params
 11017 00008924 5E                      	pop rsi
 11018 00008925 48FFCE                  	dec rsi
 11019 00008928 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c91
 11020                                  .L_lambda_opt_list_create_loop_exit_0c91:	; end of list creation loop
 11021 0000892A 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 11022 0000892F 4883C302                	add rbx, 2
 11023 00008933 4889DF                  	mov rdi, rbx
 11024 00008936 48C1E703                	shl rdi,3
 11025 0000893A 4801E7                  	add rdi, rsp
 11026 0000893D 488907                  	mov [rdi], rax
 11027 00008940 BE00000000              	mov rsi, 0 ;index
 11028                                  .L_lambda_opt_stack_shrink_loop_0c91:	; start of stack shrink loop
 11029 00008945 4883FE04                	cmp rsi, 4
 11030 00008949 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c91
 11031 0000894B BF03000000              	mov rdi, 3
 11032 00008950 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 11033 00008953 4889D9                  	mov rcx, rbx
 11034 00008956 4829F1                  	sub rcx, rsi
 11035 00008959 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 11036 0000895C 4889FA                  	mov rdx, rdi
 11037 0000895F 48C1E203                	shl rdx, 3
 11038 00008963 4801E2                  	add rdx, rsp
 11039 00008966 48C1E103                	shl rcx, 3
 11040 0000896A 4801E1                  	add rcx, rsp
 11041 0000896D 488B12                  	mov rdx, [rdx]
 11042 00008970 488911                  	mov [rcx], rdx
 11043 00008973 48FFC6                  	inc rsi
 11044 00008976 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c91
 11045                                  .L_lambda_opt_stack_shrink_loop_exit_0c91:	; end of stack shrink loop
 11046 00008978 4883EB02                	sub rbx, 2 ; rbx has number of args
 11047 0000897C 4883EB02                	sub rbx, 2
 11048 00008980 48C1E303                	shl rbx, 3
 11049 00008984 4801DC                  	add rsp, rbx
 11050 00008987 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 11051                                  .L_lambda_opt_stack_adjusted_0c91:
 11052 00008990 C8000000                	enter 0, 0
 11053 00008994 488B4528                	mov rax, PARAM(1)
 11054 00008998 50                      	push rax
 11055 00008999 6A01                    	push 1
 11056 0000899B 488B0425[00000000]      	mov rax, qword [free_var_0]
 11057                                  	assert_closure(rax)
    65 000089A3 803805              <1>  cmp byte [%1], %2
    66 000089A6 0F8588B70000        <1>  jne L_error_incorrect_type
 11058 000089AC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11059 000089B0 53                      	push rbx
 11060 000089B1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11061 000089B5 FFD3                    	call rbx
 11062 000089B7 483D[02000000]          	cmp rax, sob_boolean_false
 11063 000089BD 0F848D000000            	je .L_if_else_56a5
 11064 000089C3 488B4520                	mov rax, PARAM(0)
 11065 000089C7 50                      	push rax
 11066 000089C8 488D0425[80000000]      	lea rax, [128 + L_constants]
 11067 000089D0 50                      	push rax
 11068 000089D1 6A02                    	push 2
 11069 000089D3 488B4510                	mov rax, qword [rbp + 8*2]
 11070 000089D7 488B00                  	mov rax, qword [rax + 8*0]
 11071 000089DA 488B00                  	mov rax, qword [rax + 8*0]
 11072                                  	assert_closure(rax)
    65 000089DD 803805              <1>  cmp byte [%1], %2
    66 000089E0 0F854EB70000        <1>  jne L_error_incorrect_type
 11073 000089E6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11074 000089EA 53                      	push rbx
 11075 000089EB FF7508                  	push RET_ADDR
 11076 000089EE 488B7D18                	mov rdi, COUNT
 11077 000089F2 4883C703                	add rdi, 3
 11078 000089F6 48C1E703                	shl rdi, 3
 11079 000089FA 4801EF                  	add rdi, rbp
 11080 000089FD 488B6D00                	mov rbp, OLD_RDP
 11081 00008A01 BE00000000              	mov rsi, 0
 11082                                  .L_tc_recycle_frame_loop_5cfa:	 ; start recycle frame loop
 11083 00008A06 4883FE05                	cmp rsi, 5
 11084 00008A0A 7427                    	je .L_tc_recycle_frame_done_5cfa
 11085 00008A0C B904000000              	mov rcx, 4
 11086 00008A11 4829F1                  	sub rcx, rsi
 11087 00008A14 48C1E103                	shl rcx, 3
 11088 00008A18 4801E1                  	add rcx, rsp ; rcx is the address to move
 11089 00008A1B 4889F3                  	mov rbx, rsi
 11090 00008A1E 48C1E303                	shl rbx, 3
 11091 00008A22 48F7DB                  	neg rbx
 11092 00008A25 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11093 00008A28 488B09                  	mov rcx, [rcx]
 11094 00008A2B 48890B                  	mov [rbx], rcx
 11095 00008A2E 48FFC6                  	inc rsi
 11096 00008A31 EBD3                    	jmp .L_tc_recycle_frame_loop_5cfa
 11097                                  .L_tc_recycle_frame_done_5cfa:	 ; end recycle frame loop
 11098 00008A33 BB04000000              	mov rbx, 4
 11099 00008A38 48C1E303                	shl rbx, 3
 11100 00008A3C 48F7DB                  	neg rbx
 11101 00008A3F 4801FB                  	add rbx, rdi
 11102 00008A42 4889DC                  	mov rsp, rbx
 11103 00008A45 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11104 00008A49 FFE3                    	jmp rbx
 11105 00008A4B E9C5010000              	jmp .L_if_end_56a5
 11106                                  	.L_if_else_56a5:
 11107 00008A50 488B4528                	mov rax, PARAM(1)
 11108 00008A54 50                      	push rax
 11109 00008A55 488D0425[80000000]      	lea rax, [128 + L_constants]
 11110 00008A5D 50                      	push rax
 11111 00008A5E 488B0425[18030000]      	mov rax, qword [free_var_99]
 11112 00008A66 50                      	push rax
 11113 00008A67 6A03                    	push 3
 11114 00008A69 488B0425[F8020000]      	mov rax, qword [free_var_95]
 11115                                  	assert_closure(rax)
    65 00008A71 803805              <1>  cmp byte [%1], %2
    66 00008A74 0F85BAB60000        <1>  jne L_error_incorrect_type
 11116 00008A7A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11117 00008A7E 53                      	push rbx
 11118 00008A7F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11119 00008A83 FFD3                    	call rbx
 11120 00008A85 50                      	push rax
 11121 00008A86 6A01                    	push 1
 11122 00008A88 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11123 00008A8D E8229E0000              	call malloc
 11124 00008A92 50                      	push rax
 11125 00008A93 BF10000000              	mov rdi, 8 * 2	; new rib
 11126 00008A98 E8179E0000              	call malloc
 11127 00008A9D 50                      	push rax
 11128 00008A9E BF20000000              	mov rdi, 8 * 4	; extended env
 11129 00008AA3 E80C9E0000              	call malloc
 11130 00008AA8 488B7D10                	mov rdi, ENV
 11131 00008AAC BE00000000              	mov rsi, 0
 11132 00008AB1 BA01000000              	mov rdx, 1
 11133                                  .L_lambda_simple_env_loop_4f6e:	; ext_env[i + 1] <-- env[i]
 11134 00008AB6 4883FE03                	cmp rsi, 3
 11135 00008ABA 7410                    	je .L_lambda_simple_env_end_4f6e
 11136 00008ABC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 11137 00008AC0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11138 00008AC4 48FFC6                  	inc rsi
 11139 00008AC7 48FFC2                  	inc rdx
 11140 00008ACA EBEA                    	jmp .L_lambda_simple_env_loop_4f6e
 11141                                  .L_lambda_simple_env_end_4f6e:
 11142 00008ACC 5B                      	pop rbx
 11143 00008ACD BE00000000              	mov rsi, 0
 11144                                  .L_lambda_simple_params_loop_4f6e:	; copy params
 11145 00008AD2 4883FE02                	cmp rsi, 2
 11146 00008AD6 740E                    	je .L_lambda_simple_params_end_4f6e
 11147 00008AD8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11148 00008ADD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11149 00008AE1 48FFC6                  	inc rsi
 11150 00008AE4 EBEC                    	jmp .L_lambda_simple_params_loop_4f6e
 11151                                  .L_lambda_simple_params_end_4f6e:
 11152 00008AE6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11153 00008AE9 4889C3                  	mov rbx, rax
 11154 00008AEC 58                      	pop rax
 11155 00008AED C60005                  	mov byte [rax], T_closure
 11156 00008AF0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11157 00008AF4 48C74009[018B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f6e
 11158 00008AFC E9A6000000              	jmp .L_lambda_simple_end_4f6e
 11159                                  .L_lambda_simple_code_4f6e:	; lambda-simple body
 11160 00008B01 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11161 00008B07 740B                    	je .L_lambda_simple_arity_check_ok_4f6e
 11162 00008B09 FF742410                	push qword [rsp + 8 * 2]
 11163 00008B0D 6A01                    	push 1
 11164 00008B0F E9599D0000              	jmp L_error_incorrect_arity_simple
 11165                                  .L_lambda_simple_arity_check_ok_4f6e:
 11166 00008B14 C8000000                	enter 0, 0
 11167 00008B18 488B4520                	mov rax, PARAM(0)
 11168 00008B1C 50                      	push rax
 11169 00008B1D 488B4510                	mov rax, qword [rbp + 8*2]
 11170 00008B21 488B00                  	mov rax, qword [rax + 8*0]
 11171 00008B24 488B00                  	mov rax, qword [rax + 8*0]
 11172 00008B27 50                      	push rax
 11173 00008B28 6A02                    	push 2
 11174 00008B2A 488B4510                	mov rax, qword [rbp + 8*2]
 11175 00008B2E 488B4008                	mov rax, qword [rax + 8*1]
 11176 00008B32 488B00                  	mov rax, qword [rax + 8*0]
 11177                                  	assert_closure(rax)
    65 00008B35 803805              <1>  cmp byte [%1], %2
    66 00008B38 0F85F6B50000        <1>  jne L_error_incorrect_type
 11178 00008B3E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11179 00008B42 53                      	push rbx
 11180 00008B43 FF7508                  	push RET_ADDR
 11181 00008B46 488B7D18                	mov rdi, COUNT
 11182 00008B4A 4883C703                	add rdi, 3
 11183 00008B4E 48C1E703                	shl rdi, 3
 11184 00008B52 4801EF                  	add rdi, rbp
 11185 00008B55 488B6D00                	mov rbp, OLD_RDP
 11186 00008B59 BE00000000              	mov rsi, 0
 11187                                  .L_tc_recycle_frame_loop_5cfc:	 ; start recycle frame loop
 11188 00008B5E 4883FE05                	cmp rsi, 5
 11189 00008B62 7427                    	je .L_tc_recycle_frame_done_5cfc
 11190 00008B64 B904000000              	mov rcx, 4
 11191 00008B69 4829F1                  	sub rcx, rsi
 11192 00008B6C 48C1E103                	shl rcx, 3
 11193 00008B70 4801E1                  	add rcx, rsp ; rcx is the address to move
 11194 00008B73 4889F3                  	mov rbx, rsi
 11195 00008B76 48C1E303                	shl rbx, 3
 11196 00008B7A 48F7DB                  	neg rbx
 11197 00008B7D 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11198 00008B80 488B09                  	mov rcx, [rcx]
 11199 00008B83 48890B                  	mov [rbx], rcx
 11200 00008B86 48FFC6                  	inc rsi
 11201 00008B89 EBD3                    	jmp .L_tc_recycle_frame_loop_5cfc
 11202                                  .L_tc_recycle_frame_done_5cfc:	 ; end recycle frame loop
 11203 00008B8B BB04000000              	mov rbx, 4
 11204 00008B90 48C1E303                	shl rbx, 3
 11205 00008B94 48F7DB                  	neg rbx
 11206 00008B97 4801FB                  	add rbx, rdi
 11207 00008B9A 4889DC                  	mov rsp, rbx
 11208 00008B9D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11209 00008BA1 FFE3                    	jmp rbx
 11210 00008BA3 C9                      	leave
 11211 00008BA4 C21800                  	ret 8 * (2 + 1)
 11212                                  .L_lambda_simple_end_4f6e:	; new closure is in rax
 11213                                  	assert_closure(rax)
    65 00008BA7 803805              <1>  cmp byte [%1], %2
    66 00008BAA 0F8584B50000        <1>  jne L_error_incorrect_type
 11214 00008BB0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11215 00008BB4 53                      	push rbx
 11216 00008BB5 FF7508                  	push RET_ADDR
 11217 00008BB8 488B7D18                	mov rdi, COUNT
 11218 00008BBC 4883C703                	add rdi, 3
 11219 00008BC0 48C1E703                	shl rdi, 3
 11220 00008BC4 4801EF                  	add rdi, rbp
 11221 00008BC7 488B6D00                	mov rbp, OLD_RDP
 11222 00008BCB BE00000000              	mov rsi, 0
 11223                                  .L_tc_recycle_frame_loop_5cfb:	 ; start recycle frame loop
 11224 00008BD0 4883FE04                	cmp rsi, 4
 11225 00008BD4 7427                    	je .L_tc_recycle_frame_done_5cfb
 11226 00008BD6 B903000000              	mov rcx, 3
 11227 00008BDB 4829F1                  	sub rcx, rsi
 11228 00008BDE 48C1E103                	shl rcx, 3
 11229 00008BE2 4801E1                  	add rcx, rsp ; rcx is the address to move
 11230 00008BE5 4889F3                  	mov rbx, rsi
 11231 00008BE8 48C1E303                	shl rbx, 3
 11232 00008BEC 48F7DB                  	neg rbx
 11233 00008BEF 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11234 00008BF2 488B09                  	mov rcx, [rcx]
 11235 00008BF5 48890B                  	mov [rbx], rcx
 11236 00008BF8 48FFC6                  	inc rsi
 11237 00008BFB EBD3                    	jmp .L_tc_recycle_frame_loop_5cfb
 11238                                  .L_tc_recycle_frame_done_5cfb:	 ; end recycle frame loop
 11239 00008BFD BB03000000              	mov rbx, 3
 11240 00008C02 48C1E303                	shl rbx, 3
 11241 00008C06 48F7DB                  	neg rbx
 11242 00008C09 4801FB                  	add rbx, rdi
 11243 00008C0C 4889DC                  	mov rsp, rbx
 11244 00008C0F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11245 00008C13 FFE3                    	jmp rbx
 11246                                  	.L_if_end_56a5:
 11247 00008C15 C9                      	leave
 11248 00008C16 C22000                  	ret AND_KILL_FRAME(2)
 11249                                  .L_lambda_opt_end_0c91:	; new closure is in rax
 11250 00008C19 C9                      	leave
 11251 00008C1A C21800                  	ret 8 * (2 + 1)
 11252                                  .L_lambda_simple_end_4f6d:	; new closure is in rax
 11253                                  	assert_closure(rax)
    65 00008C1D 803805              <1>  cmp byte [%1], %2
    66 00008C20 0F850EB50000        <1>  jne L_error_incorrect_type
 11254 00008C26 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11255 00008C2A 53                      	push rbx
 11256 00008C2B FF7508                  	push RET_ADDR
 11257 00008C2E 488B7D18                	mov rdi, COUNT
 11258 00008C32 4883C703                	add rdi, 3
 11259 00008C36 48C1E703                	shl rdi, 3
 11260 00008C3A 4801EF                  	add rdi, rbp
 11261 00008C3D 488B6D00                	mov rbp, OLD_RDP
 11262 00008C41 BE00000000              	mov rsi, 0
 11263                                  .L_tc_recycle_frame_loop_5cf2:	 ; start recycle frame loop
 11264 00008C46 4883FE04                	cmp rsi, 4
 11265 00008C4A 7427                    	je .L_tc_recycle_frame_done_5cf2
 11266 00008C4C B903000000              	mov rcx, 3
 11267 00008C51 4829F1                  	sub rcx, rsi
 11268 00008C54 48C1E103                	shl rcx, 3
 11269 00008C58 4801E1                  	add rcx, rsp ; rcx is the address to move
 11270 00008C5B 4889F3                  	mov rbx, rsi
 11271 00008C5E 48C1E303                	shl rbx, 3
 11272 00008C62 48F7DB                  	neg rbx
 11273 00008C65 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11274 00008C68 488B09                  	mov rcx, [rcx]
 11275 00008C6B 48890B                  	mov [rbx], rcx
 11276 00008C6E 48FFC6                  	inc rsi
 11277 00008C71 EBD3                    	jmp .L_tc_recycle_frame_loop_5cf2
 11278                                  .L_tc_recycle_frame_done_5cf2:	 ; end recycle frame loop
 11279 00008C73 BB03000000              	mov rbx, 3
 11280 00008C78 48C1E303                	shl rbx, 3
 11281 00008C7C 48F7DB                  	neg rbx
 11282 00008C7F 4801FB                  	add rbx, rdi
 11283 00008C82 4889DC                  	mov rsp, rbx
 11284 00008C85 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11285 00008C89 FFE3                    	jmp rbx
 11286 00008C8B C9                      	leave
 11287 00008C8C C21800                  	ret 8 * (2 + 1)
 11288                                  .L_lambda_simple_end_4f6b:	; new closure is in rax
 11289                                  	assert_closure(rax)
    65 00008C8F 803805              <1>  cmp byte [%1], %2
    66 00008C92 0F859CB40000        <1>  jne L_error_incorrect_type
 11290 00008C98 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11291 00008C9C 53                      	push rbx
 11292 00008C9D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11293 00008CA1 FFD3                    	call rbx
 11294 00008CA3 48890425[20030000]      	mov qword [free_var_100], rax
 11295 00008CAB 48B8-                   	mov rax, sob_void
 11295 00008CAD [0000000000000000] 
 11296                                  
 11297 00008CB5 4889C7                  	mov rdi, rax
 11298 00008CB8 E8089C0000              	call print_sexpr_if_not_void
 11299                                  
 11300 00008CBD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11301 00008CC2 E8ED9B0000              	call malloc
 11302 00008CC7 50                      	push rax
 11303 00008CC8 BF00000000              	mov rdi, 8 * 0	; new rib
 11304 00008CCD E8E29B0000              	call malloc
 11305 00008CD2 50                      	push rax
 11306 00008CD3 BF08000000              	mov rdi, 8 * 1	; extended env
 11307 00008CD8 E8D79B0000              	call malloc
 11308 00008CDD 488B7D10                	mov rdi, ENV
 11309 00008CE1 BE00000000              	mov rsi, 0
 11310 00008CE6 BA01000000              	mov rdx, 1
 11311                                  .L_lambda_simple_env_loop_4f6f:	; ext_env[i + 1] <-- env[i]
 11312 00008CEB 4883FE00                	cmp rsi, 0
 11313 00008CEF 7410                    	je .L_lambda_simple_env_end_4f6f
 11314 00008CF1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 11315 00008CF5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11316 00008CF9 48FFC6                  	inc rsi
 11317 00008CFC 48FFC2                  	inc rdx
 11318 00008CFF EBEA                    	jmp .L_lambda_simple_env_loop_4f6f
 11319                                  .L_lambda_simple_env_end_4f6f:
 11320 00008D01 5B                      	pop rbx
 11321 00008D02 BE00000000              	mov rsi, 0
 11322                                  .L_lambda_simple_params_loop_4f6f:	; copy params
 11323 00008D07 4883FE00                	cmp rsi, 0
 11324 00008D0B 740E                    	je .L_lambda_simple_params_end_4f6f
 11325 00008D0D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11326 00008D12 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11327 00008D16 48FFC6                  	inc rsi
 11328 00008D19 EBEC                    	jmp .L_lambda_simple_params_loop_4f6f
 11329                                  .L_lambda_simple_params_end_4f6f:
 11330 00008D1B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11331 00008D1E 4889C3                  	mov rbx, rax
 11332 00008D21 58                      	pop rax
 11333 00008D22 C60005                  	mov byte [rax], T_closure
 11334 00008D25 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11335 00008D29 48C74009[368D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f6f
 11336 00008D31 E91C010000              	jmp .L_lambda_simple_end_4f6f
 11337                                  .L_lambda_simple_code_4f6f:	; lambda-simple body
 11338 00008D36 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11339 00008D3C 740B                    	je .L_lambda_simple_arity_check_ok_4f6f
 11340 00008D3E FF742410                	push qword [rsp + 8 * 2]
 11341 00008D42 6A01                    	push 1
 11342 00008D44 E9249B0000              	jmp L_error_incorrect_arity_simple
 11343                                  .L_lambda_simple_arity_check_ok_4f6f:
 11344 00008D49 C8000000                	enter 0, 0
 11345 00008D4D 488B4520                	mov rax, PARAM(0)
 11346 00008D51 50                      	push rax
 11347 00008D52 6A01                    	push 1
 11348 00008D54 488B0425[D8000000]      	mov rax, qword [free_var_27]
 11349                                  	assert_closure(rax)
    65 00008D5C 803805              <1>  cmp byte [%1], %2
    66 00008D5F 0F85CFB30000        <1>  jne L_error_incorrect_type
 11350 00008D65 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11351 00008D69 53                      	push rbx
 11352 00008D6A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11353 00008D6E FFD3                    	call rbx
 11354 00008D70 483D[02000000]          	cmp rax, sob_boolean_false
 11355 00008D76 740D                    	je .L_if_else_56a6
 11356 00008D78 488D0425[80000000]      	lea rax, [128 + L_constants]
 11357 00008D80 E9C9000000              	jmp .L_if_end_56a6
 11358                                  	.L_if_else_56a6:
 11359 00008D85 488D0425[80000000]      	lea rax, [128 + L_constants]
 11360 00008D8D 50                      	push rax
 11361 00008D8E 488B4520                	mov rax, PARAM(0)
 11362 00008D92 50                      	push rax
 11363 00008D93 6A02                    	push 2
 11364 00008D95 488B0425[10030000]      	mov rax, qword [free_var_98]
 11365                                  	assert_closure(rax)
    65 00008D9D 803805              <1>  cmp byte [%1], %2
    66 00008DA0 0F858EB30000        <1>  jne L_error_incorrect_type
 11366 00008DA6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11367 00008DAA 53                      	push rbx
 11368 00008DAB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11369 00008DAF FFD3                    	call rbx
 11370 00008DB1 50                      	push rax
 11371 00008DB2 6A01                    	push 1
 11372 00008DB4 488B0425[28030000]      	mov rax, qword [free_var_101]
 11373                                  	assert_closure(rax)
    65 00008DBC 803805              <1>  cmp byte [%1], %2
    66 00008DBF 0F856FB30000        <1>  jne L_error_incorrect_type
 11374 00008DC5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11375 00008DC9 53                      	push rbx
 11376 00008DCA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11377 00008DCE FFD3                    	call rbx
 11378 00008DD0 50                      	push rax
 11379 00008DD1 488B4520                	mov rax, PARAM(0)
 11380 00008DD5 50                      	push rax
 11381 00008DD6 6A02                    	push 2
 11382 00008DD8 488B0425[18030000]      	mov rax, qword [free_var_99]
 11383                                  	assert_closure(rax)
    65 00008DE0 803805              <1>  cmp byte [%1], %2
    66 00008DE3 0F854BB30000        <1>  jne L_error_incorrect_type
 11384 00008DE9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11385 00008DED 53                      	push rbx
 11386 00008DEE FF7508                  	push RET_ADDR
 11387 00008DF1 488B7D18                	mov rdi, COUNT
 11388 00008DF5 4883C703                	add rdi, 3
 11389 00008DF9 48C1E703                	shl rdi, 3
 11390 00008DFD 4801EF                  	add rdi, rbp
 11391 00008E00 488B6D00                	mov rbp, OLD_RDP
 11392 00008E04 BE00000000              	mov rsi, 0
 11393                                  .L_tc_recycle_frame_loop_5cfd:	 ; start recycle frame loop
 11394 00008E09 4883FE05                	cmp rsi, 5
 11395 00008E0D 7427                    	je .L_tc_recycle_frame_done_5cfd
 11396 00008E0F B904000000              	mov rcx, 4
 11397 00008E14 4829F1                  	sub rcx, rsi
 11398 00008E17 48C1E103                	shl rcx, 3
 11399 00008E1B 4801E1                  	add rcx, rsp ; rcx is the address to move
 11400 00008E1E 4889F3                  	mov rbx, rsi
 11401 00008E21 48C1E303                	shl rbx, 3
 11402 00008E25 48F7DB                  	neg rbx
 11403 00008E28 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11404 00008E2B 488B09                  	mov rcx, [rcx]
 11405 00008E2E 48890B                  	mov [rbx], rcx
 11406 00008E31 48FFC6                  	inc rsi
 11407 00008E34 EBD3                    	jmp .L_tc_recycle_frame_loop_5cfd
 11408                                  .L_tc_recycle_frame_done_5cfd:	 ; end recycle frame loop
 11409 00008E36 BB04000000              	mov rbx, 4
 11410 00008E3B 48C1E303                	shl rbx, 3
 11411 00008E3F 48F7DB                  	neg rbx
 11412 00008E42 4801FB                  	add rbx, rdi
 11413 00008E45 4889DC                  	mov rsp, rbx
 11414 00008E48 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11415 00008E4C FFE3                    	jmp rbx
 11416                                  	.L_if_end_56a6:
 11417 00008E4E C9                      	leave
 11418 00008E4F C21800                  	ret 8 * (2 + 1)
 11419                                  .L_lambda_simple_end_4f6f:	; new closure is in rax
 11420 00008E52 48890425[28030000]      	mov qword [free_var_101], rax
 11421 00008E5A 48B8-                   	mov rax, sob_void
 11421 00008E5C [0000000000000000] 
 11422                                  
 11423 00008E64 4889C7                  	mov rdi, rax
 11424 00008E67 E8599A0000              	call print_sexpr_if_not_void
 11425                                  
 11426 00008E6C 488D0425[00000000]      	lea rax, [0 + L_constants]
 11427 00008E74 48890425[30030000]      	mov qword [free_var_102], rax
 11428 00008E7C 48B8-                   	mov rax, sob_void
 11428 00008E7E [0000000000000000] 
 11429                                  
 11430 00008E86 4889C7                  	mov rdi, rax
 11431 00008E89 E8379A0000              	call print_sexpr_if_not_void
 11432                                  
 11433 00008E8E 488D0425[00000000]      	lea rax, [0 + L_constants]
 11434 00008E96 48890425[38030000]      	mov qword [free_var_103], rax
 11435 00008E9E 48B8-                   	mov rax, sob_void
 11435 00008EA0 [0000000000000000] 
 11436                                  
 11437 00008EA8 4889C7                  	mov rdi, rax
 11438 00008EAB E8159A0000              	call print_sexpr_if_not_void
 11439                                  
 11440 00008EB0 488D0425[00000000]      	lea rax, [0 + L_constants]
 11441 00008EB8 48890425[40030000]      	mov qword [free_var_104], rax
 11442 00008EC0 48B8-                   	mov rax, sob_void
 11442 00008EC2 [0000000000000000] 
 11443                                  
 11444 00008ECA 4889C7                  	mov rdi, rax
 11445 00008ECD E8F3990000              	call print_sexpr_if_not_void
 11446                                  
 11447 00008ED2 488D0425[00000000]      	lea rax, [0 + L_constants]
 11448 00008EDA 48890425[48030000]      	mov qword [free_var_105], rax
 11449 00008EE2 48B8-                   	mov rax, sob_void
 11449 00008EE4 [0000000000000000] 
 11450                                  
 11451 00008EEC 4889C7                  	mov rdi, rax
 11452 00008EEF E8D1990000              	call print_sexpr_if_not_void
 11453                                  
 11454 00008EF4 488D0425[00000000]      	lea rax, [0 + L_constants]
 11455 00008EFC 48890425[50030000]      	mov qword [free_var_106], rax
 11456 00008F04 48B8-                   	mov rax, sob_void
 11456 00008F06 [0000000000000000] 
 11457                                  
 11458 00008F0E 4889C7                  	mov rdi, rax
 11459 00008F11 E8AF990000              	call print_sexpr_if_not_void
 11460                                  
 11461 00008F16 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11462 00008F1B E894990000              	call malloc
 11463 00008F20 50                      	push rax
 11464 00008F21 BF00000000              	mov rdi, 8 * 0	; new rib
 11465 00008F26 E889990000              	call malloc
 11466 00008F2B 50                      	push rax
 11467 00008F2C BF08000000              	mov rdi, 8 * 1	; extended env
 11468 00008F31 E87E990000              	call malloc
 11469 00008F36 488B7D10                	mov rdi, ENV
 11470 00008F3A BE00000000              	mov rsi, 0
 11471 00008F3F BA01000000              	mov rdx, 1
 11472                                  .L_lambda_simple_env_loop_4f70:	; ext_env[i + 1] <-- env[i]
 11473 00008F44 4883FE00                	cmp rsi, 0
 11474 00008F48 7410                    	je .L_lambda_simple_env_end_4f70
 11475 00008F4A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 11476 00008F4E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11477 00008F52 48FFC6                  	inc rsi
 11478 00008F55 48FFC2                  	inc rdx
 11479 00008F58 EBEA                    	jmp .L_lambda_simple_env_loop_4f70
 11480                                  .L_lambda_simple_env_end_4f70:
 11481 00008F5A 5B                      	pop rbx
 11482 00008F5B BE00000000              	mov rsi, 0
 11483                                  .L_lambda_simple_params_loop_4f70:	; copy params
 11484 00008F60 4883FE00                	cmp rsi, 0
 11485 00008F64 740E                    	je .L_lambda_simple_params_end_4f70
 11486 00008F66 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11487 00008F6B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11488 00008F6F 48FFC6                  	inc rsi
 11489 00008F72 EBEC                    	jmp .L_lambda_simple_params_loop_4f70
 11490                                  .L_lambda_simple_params_end_4f70:
 11491 00008F74 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11492 00008F77 4889C3                  	mov rbx, rax
 11493 00008F7A 58                      	pop rax
 11494 00008F7B C60005                  	mov byte [rax], T_closure
 11495 00008F7E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11496 00008F82 48C74009[8F8F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f70
 11497 00008F8A E9A5000000              	jmp .L_lambda_simple_end_4f70
 11498                                  .L_lambda_simple_code_4f70:	; lambda-simple body
 11499 00008F8F 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11500 00008F95 740B                    	je .L_lambda_simple_arity_check_ok_4f70
 11501 00008F97 FF742410                	push qword [rsp + 8 * 2]
 11502 00008F9B 6A00                    	push 0
 11503 00008F9D E9CB980000              	jmp L_error_incorrect_arity_simple
 11504                                  .L_lambda_simple_arity_check_ok_4f70:
 11505 00008FA2 C8000000                	enter 0, 0
 11506 00008FA6 488D0425[DB000000]      	lea rax, [219 + L_constants]
 11507 00008FAE 50                      	push rax
 11508 00008FAF 488D0425[D2000000]      	lea rax, [210 + L_constants]
 11509 00008FB7 50                      	push rax
 11510 00008FB8 6A02                    	push 2
 11511 00008FBA 488B0425[30010000]      	mov rax, qword [free_var_38]
 11512                                  	assert_closure(rax)
    65 00008FC2 803805              <1>  cmp byte [%1], %2
    66 00008FC5 0F8569B10000        <1>  jne L_error_incorrect_type
 11513 00008FCB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11514 00008FCF 53                      	push rbx
 11515 00008FD0 FF7508                  	push RET_ADDR
 11516 00008FD3 488B7D18                	mov rdi, COUNT
 11517 00008FD7 4883C703                	add rdi, 3
 11518 00008FDB 48C1E703                	shl rdi, 3
 11519 00008FDF 4801EF                  	add rdi, rbp
 11520 00008FE2 488B6D00                	mov rbp, OLD_RDP
 11521 00008FE6 BE00000000              	mov rsi, 0
 11522                                  .L_tc_recycle_frame_loop_5cfe:	 ; start recycle frame loop
 11523 00008FEB 4883FE05                	cmp rsi, 5
 11524 00008FEF 7427                    	je .L_tc_recycle_frame_done_5cfe
 11525 00008FF1 B904000000              	mov rcx, 4
 11526 00008FF6 4829F1                  	sub rcx, rsi
 11527 00008FF9 48C1E103                	shl rcx, 3
 11528 00008FFD 4801E1                  	add rcx, rsp ; rcx is the address to move
 11529 00009000 4889F3                  	mov rbx, rsi
 11530 00009003 48C1E303                	shl rbx, 3
 11531 00009007 48F7DB                  	neg rbx
 11532 0000900A 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11533 0000900D 488B09                  	mov rcx, [rcx]
 11534 00009010 48890B                  	mov [rbx], rcx
 11535 00009013 48FFC6                  	inc rsi
 11536 00009016 EBD3                    	jmp .L_tc_recycle_frame_loop_5cfe
 11537                                  .L_tc_recycle_frame_done_5cfe:	 ; end recycle frame loop
 11538 00009018 BB04000000              	mov rbx, 4
 11539 0000901D 48C1E303                	shl rbx, 3
 11540 00009021 48F7DB                  	neg rbx
 11541 00009024 4801FB                  	add rbx, rdi
 11542 00009027 4889DC                  	mov rsp, rbx
 11543 0000902A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11544 0000902E FFE3                    	jmp rbx
 11545 00009030 C9                      	leave
 11546 00009031 C21000                  	ret 8 * (2 + 0)
 11547                                  .L_lambda_simple_end_4f70:	; new closure is in rax
 11548 00009034 50                      	push rax
 11549 00009035 6A01                    	push 1
 11550 00009037 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11551 0000903C E873980000              	call malloc
 11552 00009041 50                      	push rax
 11553 00009042 BF00000000              	mov rdi, 8 * 0	; new rib
 11554 00009047 E868980000              	call malloc
 11555 0000904C 50                      	push rax
 11556 0000904D BF08000000              	mov rdi, 8 * 1	; extended env
 11557 00009052 E85D980000              	call malloc
 11558 00009057 488B7D10                	mov rdi, ENV
 11559 0000905B BE00000000              	mov rsi, 0
 11560 00009060 BA01000000              	mov rdx, 1
 11561                                  .L_lambda_simple_env_loop_4f71:	; ext_env[i + 1] <-- env[i]
 11562 00009065 4883FE00                	cmp rsi, 0
 11563 00009069 7410                    	je .L_lambda_simple_env_end_4f71
 11564 0000906B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 11565 0000906F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11566 00009073 48FFC6                  	inc rsi
 11567 00009076 48FFC2                  	inc rdx
 11568 00009079 EBEA                    	jmp .L_lambda_simple_env_loop_4f71
 11569                                  .L_lambda_simple_env_end_4f71:
 11570 0000907B 5B                      	pop rbx
 11571 0000907C BE00000000              	mov rsi, 0
 11572                                  .L_lambda_simple_params_loop_4f71:	; copy params
 11573 00009081 4883FE00                	cmp rsi, 0
 11574 00009085 740E                    	je .L_lambda_simple_params_end_4f71
 11575 00009087 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11576 0000908C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11577 00009090 48FFC6                  	inc rsi
 11578 00009093 EBEC                    	jmp .L_lambda_simple_params_loop_4f71
 11579                                  .L_lambda_simple_params_end_4f71:
 11580 00009095 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11581 00009098 4889C3                  	mov rbx, rax
 11582 0000909B 58                      	pop rax
 11583 0000909C C60005                  	mov byte [rax], T_closure
 11584 0000909F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11585 000090A3 48C74009[B0900000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f71
 11586 000090AB E990170000              	jmp .L_lambda_simple_end_4f71
 11587                                  .L_lambda_simple_code_4f71:	; lambda-simple body
 11588 000090B0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11589 000090B6 740B                    	je .L_lambda_simple_arity_check_ok_4f71
 11590 000090B8 FF742410                	push qword [rsp + 8 * 2]
 11591 000090BC 6A01                    	push 1
 11592 000090BE E9AA970000              	jmp L_error_incorrect_arity_simple
 11593                                  .L_lambda_simple_arity_check_ok_4f71:
 11594 000090C3 C8000000                	enter 0, 0
 11595 000090C7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11596 000090CC E8E3970000              	call malloc
 11597 000090D1 50                      	push rax
 11598 000090D2 BF08000000              	mov rdi, 8 * 1	; new rib
 11599 000090D7 E8D8970000              	call malloc
 11600 000090DC 50                      	push rax
 11601 000090DD BF10000000              	mov rdi, 8 * 2	; extended env
 11602 000090E2 E8CD970000              	call malloc
 11603 000090E7 488B7D10                	mov rdi, ENV
 11604 000090EB BE00000000              	mov rsi, 0
 11605 000090F0 BA01000000              	mov rdx, 1
 11606                                  .L_lambda_simple_env_loop_4f72:	; ext_env[i + 1] <-- env[i]
 11607 000090F5 4883FE01                	cmp rsi, 1
 11608 000090F9 7410                    	je .L_lambda_simple_env_end_4f72
 11609 000090FB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 11610 000090FF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11611 00009103 48FFC6                  	inc rsi
 11612 00009106 48FFC2                  	inc rdx
 11613 00009109 EBEA                    	jmp .L_lambda_simple_env_loop_4f72
 11614                                  .L_lambda_simple_env_end_4f72:
 11615 0000910B 5B                      	pop rbx
 11616 0000910C BE00000000              	mov rsi, 0
 11617                                  .L_lambda_simple_params_loop_4f72:	; copy params
 11618 00009111 4883FE01                	cmp rsi, 1
 11619 00009115 740E                    	je .L_lambda_simple_params_end_4f72
 11620 00009117 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11621 0000911C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11622 00009120 48FFC6                  	inc rsi
 11623 00009123 EBEC                    	jmp .L_lambda_simple_params_loop_4f72
 11624                                  .L_lambda_simple_params_end_4f72:
 11625 00009125 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11626 00009128 4889C3                  	mov rbx, rax
 11627 0000912B 58                      	pop rax
 11628 0000912C C60005                  	mov byte [rax], T_closure
 11629 0000912F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11630 00009133 48C74009[40910000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f72
 11631 0000913B E92D050000              	jmp .L_lambda_simple_end_4f72
 11632                                  .L_lambda_simple_code_4f72:	; lambda-simple body
 11633 00009140 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11634 00009146 740B                    	je .L_lambda_simple_arity_check_ok_4f72
 11635 00009148 FF742410                	push qword [rsp + 8 * 2]
 11636 0000914C 6A02                    	push 2
 11637 0000914E E91A970000              	jmp L_error_incorrect_arity_simple
 11638                                  .L_lambda_simple_arity_check_ok_4f72:
 11639 00009153 C8000000                	enter 0, 0
 11640 00009157 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11641 0000915C E853970000              	call malloc
 11642 00009161 50                      	push rax
 11643 00009162 BF10000000              	mov rdi, 8 * 2	; new rib
 11644 00009167 E848970000              	call malloc
 11645 0000916C 50                      	push rax
 11646 0000916D BF18000000              	mov rdi, 8 * 3	; extended env
 11647 00009172 E83D970000              	call malloc
 11648 00009177 488B7D10                	mov rdi, ENV
 11649 0000917B BE00000000              	mov rsi, 0
 11650 00009180 BA01000000              	mov rdx, 1
 11651                                  .L_lambda_simple_env_loop_4f73:	; ext_env[i + 1] <-- env[i]
 11652 00009185 4883FE02                	cmp rsi, 2
 11653 00009189 7410                    	je .L_lambda_simple_env_end_4f73
 11654 0000918B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 11655 0000918F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11656 00009193 48FFC6                  	inc rsi
 11657 00009196 48FFC2                  	inc rdx
 11658 00009199 EBEA                    	jmp .L_lambda_simple_env_loop_4f73
 11659                                  .L_lambda_simple_env_end_4f73:
 11660 0000919B 5B                      	pop rbx
 11661 0000919C BE00000000              	mov rsi, 0
 11662                                  .L_lambda_simple_params_loop_4f73:	; copy params
 11663 000091A1 4883FE02                	cmp rsi, 2
 11664 000091A5 740E                    	je .L_lambda_simple_params_end_4f73
 11665 000091A7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11666 000091AC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11667 000091B0 48FFC6                  	inc rsi
 11668 000091B3 EBEC                    	jmp .L_lambda_simple_params_loop_4f73
 11669                                  .L_lambda_simple_params_end_4f73:
 11670 000091B5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11671 000091B8 4889C3                  	mov rbx, rax
 11672 000091BB 58                      	pop rax
 11673 000091BC C60005                  	mov byte [rax], T_closure
 11674 000091BF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11675 000091C3 48C74009[D0910000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f73
 11676 000091CB E999040000              	jmp .L_lambda_simple_end_4f73
 11677                                  .L_lambda_simple_code_4f73:	; lambda-simple body
 11678 000091D0 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11679 000091D6 740B                    	je .L_lambda_simple_arity_check_ok_4f73
 11680 000091D8 FF742410                	push qword [rsp + 8 * 2]
 11681 000091DC 6A02                    	push 2
 11682 000091DE E98A960000              	jmp L_error_incorrect_arity_simple
 11683                                  .L_lambda_simple_arity_check_ok_4f73:
 11684 000091E3 C8000000                	enter 0, 0
 11685 000091E7 488B4520                	mov rax, PARAM(0)
 11686 000091EB 50                      	push rax
 11687 000091EC 6A01                    	push 1
 11688 000091EE 488B0425[48000000]      	mov rax, qword [free_var_9]
 11689                                  	assert_closure(rax)
    65 000091F6 803805              <1>  cmp byte [%1], %2
    66 000091F9 0F8535AF0000        <1>  jne L_error_incorrect_type
 11690 000091FF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11691 00009203 53                      	push rbx
 11692 00009204 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11693 00009208 FFD3                    	call rbx
 11694 0000920A 483D[02000000]          	cmp rax, sob_boolean_false
 11695 00009210 0F840D020000            	je .L_if_else_56a7
 11696 00009216 488B4528                	mov rax, PARAM(1)
 11697 0000921A 50                      	push rax
 11698 0000921B 6A01                    	push 1
 11699 0000921D 488B0425[48000000]      	mov rax, qword [free_var_9]
 11700                                  	assert_closure(rax)
    65 00009225 803805              <1>  cmp byte [%1], %2
    66 00009228 0F8506AF0000        <1>  jne L_error_incorrect_type
 11701 0000922E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11702 00009232 53                      	push rbx
 11703 00009233 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11704 00009237 FFD3                    	call rbx
 11705 00009239 483D[02000000]          	cmp rax, sob_boolean_false
 11706 0000923F 0F8489000000            	je .L_if_else_56a8
 11707 00009245 488B4528                	mov rax, PARAM(1)
 11708 00009249 50                      	push rax
 11709 0000924A 488B4520                	mov rax, PARAM(0)
 11710 0000924E 50                      	push rax
 11711 0000924F 6A02                    	push 2
 11712 00009251 488B4510                	mov rax, qword [rbp + 8*2]
 11713 00009255 488B00                  	mov rax, qword [rax + 8*0]
 11714 00009258 488B00                  	mov rax, qword [rax + 8*0]
 11715                                  	assert_closure(rax)
    65 0000925B 803805              <1>  cmp byte [%1], %2
    66 0000925E 0F85D0AE0000        <1>  jne L_error_incorrect_type
 11716 00009264 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11717 00009268 53                      	push rbx
 11718 00009269 FF7508                  	push RET_ADDR
 11719 0000926C 488B7D18                	mov rdi, COUNT
 11720 00009270 4883C703                	add rdi, 3
 11721 00009274 48C1E703                	shl rdi, 3
 11722 00009278 4801EF                  	add rdi, rbp
 11723 0000927B 488B6D00                	mov rbp, OLD_RDP
 11724 0000927F BE00000000              	mov rsi, 0
 11725                                  .L_tc_recycle_frame_loop_5d00:	 ; start recycle frame loop
 11726 00009284 4883FE05                	cmp rsi, 5
 11727 00009288 7427                    	je .L_tc_recycle_frame_done_5d00
 11728 0000928A B904000000              	mov rcx, 4
 11729 0000928F 4829F1                  	sub rcx, rsi
 11730 00009292 48C1E103                	shl rcx, 3
 11731 00009296 4801E1                  	add rcx, rsp ; rcx is the address to move
 11732 00009299 4889F3                  	mov rbx, rsi
 11733 0000929C 48C1E303                	shl rbx, 3
 11734 000092A0 48F7DB                  	neg rbx
 11735 000092A3 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11736 000092A6 488B09                  	mov rcx, [rcx]
 11737 000092A9 48890B                  	mov [rbx], rcx
 11738 000092AC 48FFC6                  	inc rsi
 11739 000092AF EBD3                    	jmp .L_tc_recycle_frame_loop_5d00
 11740                                  .L_tc_recycle_frame_done_5d00:	 ; end recycle frame loop
 11741 000092B1 BB04000000              	mov rbx, 4
 11742 000092B6 48C1E303                	shl rbx, 3
 11743 000092BA 48F7DB                  	neg rbx
 11744 000092BD 4801FB                  	add rbx, rdi
 11745 000092C0 4889DC                  	mov rsp, rbx
 11746 000092C3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11747 000092C7 FFE3                    	jmp rbx
 11748 000092C9 E950010000              	jmp .L_if_end_56a8
 11749                                  	.L_if_else_56a8:
 11750 000092CE 488B4528                	mov rax, PARAM(1)
 11751 000092D2 50                      	push rax
 11752 000092D3 6A01                    	push 1
 11753 000092D5 488B0425[40000000]      	mov rax, qword [free_var_8]
 11754                                  	assert_closure(rax)
    65 000092DD 803805              <1>  cmp byte [%1], %2
    66 000092E0 0F854EAE0000        <1>  jne L_error_incorrect_type
 11755 000092E6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11756 000092EA 53                      	push rbx
 11757 000092EB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11758 000092EF FFD3                    	call rbx
 11759 000092F1 483D[02000000]          	cmp rax, sob_boolean_false
 11760 000092F7 0F84A6000000            	je .L_if_else_56a9
 11761 000092FD 488B4528                	mov rax, PARAM(1)
 11762 00009301 50                      	push rax
 11763 00009302 488B4520                	mov rax, PARAM(0)
 11764 00009306 50                      	push rax
 11765 00009307 6A01                    	push 1
 11766 00009309 488B0425[B8000000]      	mov rax, qword [free_var_23]
 11767                                  	assert_closure(rax)
    65 00009311 803805              <1>  cmp byte [%1], %2
    66 00009314 0F851AAE0000        <1>  jne L_error_incorrect_type
 11768 0000931A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11769 0000931E 53                      	push rbx
 11770 0000931F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11771 00009323 FFD3                    	call rbx
 11772 00009325 50                      	push rax
 11773 00009326 6A02                    	push 2
 11774 00009328 488B4510                	mov rax, qword [rbp + 8*2]
 11775 0000932C 488B00                  	mov rax, qword [rax + 8*0]
 11776 0000932F 488B4008                	mov rax, qword [rax + 8*1]
 11777                                  	assert_closure(rax)
    65 00009333 803805              <1>  cmp byte [%1], %2
    66 00009336 0F85F8AD0000        <1>  jne L_error_incorrect_type
 11778 0000933C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11779 00009340 53                      	push rbx
 11780 00009341 FF7508                  	push RET_ADDR
 11781 00009344 488B7D18                	mov rdi, COUNT
 11782 00009348 4883C703                	add rdi, 3
 11783 0000934C 48C1E703                	shl rdi, 3
 11784 00009350 4801EF                  	add rdi, rbp
 11785 00009353 488B6D00                	mov rbp, OLD_RDP
 11786 00009357 BE00000000              	mov rsi, 0
 11787                                  .L_tc_recycle_frame_loop_5d01:	 ; start recycle frame loop
 11788 0000935C 4883FE05                	cmp rsi, 5
 11789 00009360 7427                    	je .L_tc_recycle_frame_done_5d01
 11790 00009362 B904000000              	mov rcx, 4
 11791 00009367 4829F1                  	sub rcx, rsi
 11792 0000936A 48C1E103                	shl rcx, 3
 11793 0000936E 4801E1                  	add rcx, rsp ; rcx is the address to move
 11794 00009371 4889F3                  	mov rbx, rsi
 11795 00009374 48C1E303                	shl rbx, 3
 11796 00009378 48F7DB                  	neg rbx
 11797 0000937B 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11798 0000937E 488B09                  	mov rcx, [rcx]
 11799 00009381 48890B                  	mov [rbx], rcx
 11800 00009384 48FFC6                  	inc rsi
 11801 00009387 EBD3                    	jmp .L_tc_recycle_frame_loop_5d01
 11802                                  .L_tc_recycle_frame_done_5d01:	 ; end recycle frame loop
 11803 00009389 BB04000000              	mov rbx, 4
 11804 0000938E 48C1E303                	shl rbx, 3
 11805 00009392 48F7DB                  	neg rbx
 11806 00009395 4801FB                  	add rbx, rdi
 11807 00009398 4889DC                  	mov rsp, rbx
 11808 0000939B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11809 0000939F FFE3                    	jmp rbx
 11810 000093A1 EB7B                    	jmp .L_if_end_56a9
 11811                                  	.L_if_else_56a9:
 11812 000093A3 6A00                    	push 0
 11813 000093A5 488B4510                	mov rax, qword [rbp + 8*2]
 11814 000093A9 488B4008                	mov rax, qword [rax + 8*1]
 11815 000093AD 488B00                  	mov rax, qword [rax + 8*0]
 11816                                  	assert_closure(rax)
    65 000093B0 803805              <1>  cmp byte [%1], %2
    66 000093B3 0F857BAD0000        <1>  jne L_error_incorrect_type
 11817 000093B9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11818 000093BD 53                      	push rbx
 11819 000093BE FF7508                  	push RET_ADDR
 11820 000093C1 488B7D18                	mov rdi, COUNT
 11821 000093C5 4883C703                	add rdi, 3
 11822 000093C9 48C1E703                	shl rdi, 3
 11823 000093CD 4801EF                  	add rdi, rbp
 11824 000093D0 488B6D00                	mov rbp, OLD_RDP
 11825 000093D4 BE00000000              	mov rsi, 0
 11826                                  .L_tc_recycle_frame_loop_5d02:	 ; start recycle frame loop
 11827 000093D9 4883FE03                	cmp rsi, 3
 11828 000093DD 7427                    	je .L_tc_recycle_frame_done_5d02
 11829 000093DF B902000000              	mov rcx, 2
 11830 000093E4 4829F1                  	sub rcx, rsi
 11831 000093E7 48C1E103                	shl rcx, 3
 11832 000093EB 4801E1                  	add rcx, rsp ; rcx is the address to move
 11833 000093EE 4889F3                  	mov rbx, rsi
 11834 000093F1 48C1E303                	shl rbx, 3
 11835 000093F5 48F7DB                  	neg rbx
 11836 000093F8 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11837 000093FB 488B09                  	mov rcx, [rcx]
 11838 000093FE 48890B                  	mov [rbx], rcx
 11839 00009401 48FFC6                  	inc rsi
 11840 00009404 EBD3                    	jmp .L_tc_recycle_frame_loop_5d02
 11841                                  .L_tc_recycle_frame_done_5d02:	 ; end recycle frame loop
 11842 00009406 BB02000000              	mov rbx, 2
 11843 0000940B 48C1E303                	shl rbx, 3
 11844 0000940F 48F7DB                  	neg rbx
 11845 00009412 4801FB                  	add rbx, rdi
 11846 00009415 4889DC                  	mov rsp, rbx
 11847 00009418 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11848 0000941C FFE3                    	jmp rbx
 11849                                  	.L_if_end_56a9:
 11850                                  	.L_if_end_56a8:
 11851 0000941E E942020000              	jmp .L_if_end_56a7
 11852                                  	.L_if_else_56a7:
 11853 00009423 488B4520                	mov rax, PARAM(0)
 11854 00009427 50                      	push rax
 11855 00009428 6A01                    	push 1
 11856 0000942A 488B0425[40000000]      	mov rax, qword [free_var_8]
 11857                                  	assert_closure(rax)
    65 00009432 803805              <1>  cmp byte [%1], %2
    66 00009435 0F85F9AC0000        <1>  jne L_error_incorrect_type
 11858 0000943B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11859 0000943F 53                      	push rbx
 11860 00009440 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11861 00009444 FFD3                    	call rbx
 11862 00009446 483D[02000000]          	cmp rax, sob_boolean_false
 11863 0000944C 0F840B020000            	je .L_if_else_56aa
 11864 00009452 488B4528                	mov rax, PARAM(1)
 11865 00009456 50                      	push rax
 11866 00009457 6A01                    	push 1
 11867 00009459 488B0425[48000000]      	mov rax, qword [free_var_9]
 11868                                  	assert_closure(rax)
    65 00009461 803805              <1>  cmp byte [%1], %2
    66 00009464 0F85CAAC0000        <1>  jne L_error_incorrect_type
 11869 0000946A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11870 0000946E 53                      	push rbx
 11871 0000946F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11872 00009473 FFD3                    	call rbx
 11873 00009475 483D[02000000]          	cmp rax, sob_boolean_false
 11874 0000947B 0F84A9000000            	je .L_if_else_56ab
 11875 00009481 488B4528                	mov rax, PARAM(1)
 11876 00009485 50                      	push rax
 11877 00009486 6A01                    	push 1
 11878 00009488 488B0425[B8000000]      	mov rax, qword [free_var_23]
 11879                                  	assert_closure(rax)
    65 00009490 803805              <1>  cmp byte [%1], %2
    66 00009493 0F859BAC0000        <1>  jne L_error_incorrect_type
 11880 00009499 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11881 0000949D 53                      	push rbx
 11882 0000949E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11883 000094A2 FFD3                    	call rbx
 11884 000094A4 50                      	push rax
 11885 000094A5 488B4520                	mov rax, PARAM(0)
 11886 000094A9 50                      	push rax
 11887 000094AA 6A02                    	push 2
 11888 000094AC 488B4510                	mov rax, qword [rbp + 8*2]
 11889 000094B0 488B00                  	mov rax, qword [rax + 8*0]
 11890 000094B3 488B4008                	mov rax, qword [rax + 8*1]
 11891                                  	assert_closure(rax)
    65 000094B7 803805              <1>  cmp byte [%1], %2
    66 000094BA 0F8574AC0000        <1>  jne L_error_incorrect_type
 11892 000094C0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11893 000094C4 53                      	push rbx
 11894 000094C5 FF7508                  	push RET_ADDR
 11895 000094C8 488B7D18                	mov rdi, COUNT
 11896 000094CC 4883C703                	add rdi, 3
 11897 000094D0 48C1E703                	shl rdi, 3
 11898 000094D4 4801EF                  	add rdi, rbp
 11899 000094D7 488B6D00                	mov rbp, OLD_RDP
 11900 000094DB BE00000000              	mov rsi, 0
 11901                                  .L_tc_recycle_frame_loop_5d03:	 ; start recycle frame loop
 11902 000094E0 4883FE05                	cmp rsi, 5
 11903 000094E4 7427                    	je .L_tc_recycle_frame_done_5d03
 11904 000094E6 B904000000              	mov rcx, 4
 11905 000094EB 4829F1                  	sub rcx, rsi
 11906 000094EE 48C1E103                	shl rcx, 3
 11907 000094F2 4801E1                  	add rcx, rsp ; rcx is the address to move
 11908 000094F5 4889F3                  	mov rbx, rsi
 11909 000094F8 48C1E303                	shl rbx, 3
 11910 000094FC 48F7DB                  	neg rbx
 11911 000094FF 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11912 00009502 488B09                  	mov rcx, [rcx]
 11913 00009505 48890B                  	mov [rbx], rcx
 11914 00009508 48FFC6                  	inc rsi
 11915 0000950B EBD3                    	jmp .L_tc_recycle_frame_loop_5d03
 11916                                  .L_tc_recycle_frame_done_5d03:	 ; end recycle frame loop
 11917 0000950D BB04000000              	mov rbx, 4
 11918 00009512 48C1E303                	shl rbx, 3
 11919 00009516 48F7DB                  	neg rbx
 11920 00009519 4801FB                  	add rbx, rdi
 11921 0000951C 4889DC                  	mov rsp, rbx
 11922 0000951F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11923 00009523 FFE3                    	jmp rbx
 11924 00009525 E931010000              	jmp .L_if_end_56ab
 11925                                  	.L_if_else_56ab:
 11926 0000952A 488B4528                	mov rax, PARAM(1)
 11927 0000952E 50                      	push rax
 11928 0000952F 6A01                    	push 1
 11929 00009531 488B0425[40000000]      	mov rax, qword [free_var_8]
 11930                                  	assert_closure(rax)
    65 00009539 803805              <1>  cmp byte [%1], %2
    66 0000953C 0F85F2AB0000        <1>  jne L_error_incorrect_type
 11931 00009542 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11932 00009546 53                      	push rbx
 11933 00009547 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11934 0000954B FFD3                    	call rbx
 11935 0000954D 483D[02000000]          	cmp rax, sob_boolean_false
 11936 00009553 0F8487000000            	je .L_if_else_56ac
 11937 00009559 488B4528                	mov rax, PARAM(1)
 11938 0000955D 50                      	push rax
 11939 0000955E 488B4520                	mov rax, PARAM(0)
 11940 00009562 50                      	push rax
 11941 00009563 6A02                    	push 2
 11942 00009565 488B4510                	mov rax, qword [rbp + 8*2]
 11943 00009569 488B00                  	mov rax, qword [rax + 8*0]
 11944 0000956C 488B4008                	mov rax, qword [rax + 8*1]
 11945                                  	assert_closure(rax)
    65 00009570 803805              <1>  cmp byte [%1], %2
    66 00009573 0F85BBAB0000        <1>  jne L_error_incorrect_type
 11946 00009579 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11947 0000957D 53                      	push rbx
 11948 0000957E FF7508                  	push RET_ADDR
 11949 00009581 488B7D18                	mov rdi, COUNT
 11950 00009585 4883C703                	add rdi, 3
 11951 00009589 48C1E703                	shl rdi, 3
 11952 0000958D 4801EF                  	add rdi, rbp
 11953 00009590 488B6D00                	mov rbp, OLD_RDP
 11954 00009594 BE00000000              	mov rsi, 0
 11955                                  .L_tc_recycle_frame_loop_5d04:	 ; start recycle frame loop
 11956 00009599 4883FE05                	cmp rsi, 5
 11957 0000959D 7427                    	je .L_tc_recycle_frame_done_5d04
 11958 0000959F B904000000              	mov rcx, 4
 11959 000095A4 4829F1                  	sub rcx, rsi
 11960 000095A7 48C1E103                	shl rcx, 3
 11961 000095AB 4801E1                  	add rcx, rsp ; rcx is the address to move
 11962 000095AE 4889F3                  	mov rbx, rsi
 11963 000095B1 48C1E303                	shl rbx, 3
 11964 000095B5 48F7DB                  	neg rbx
 11965 000095B8 4801FB                  	add rbx, rdi ;rbx is the address to move to
 11966 000095BB 488B09                  	mov rcx, [rcx]
 11967 000095BE 48890B                  	mov [rbx], rcx
 11968 000095C1 48FFC6                  	inc rsi
 11969 000095C4 EBD3                    	jmp .L_tc_recycle_frame_loop_5d04
 11970                                  .L_tc_recycle_frame_done_5d04:	 ; end recycle frame loop
 11971 000095C6 BB04000000              	mov rbx, 4
 11972 000095CB 48C1E303                	shl rbx, 3
 11973 000095CF 48F7DB                  	neg rbx
 11974 000095D2 4801FB                  	add rbx, rdi
 11975 000095D5 4889DC                  	mov rsp, rbx
 11976 000095D8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11977 000095DC FFE3                    	jmp rbx
 11978 000095DE EB7B                    	jmp .L_if_end_56ac
 11979                                  	.L_if_else_56ac:
 11980 000095E0 6A00                    	push 0
 11981 000095E2 488B4510                	mov rax, qword [rbp + 8*2]
 11982 000095E6 488B4008                	mov rax, qword [rax + 8*1]
 11983 000095EA 488B00                  	mov rax, qword [rax + 8*0]
 11984                                  	assert_closure(rax)
    65 000095ED 803805              <1>  cmp byte [%1], %2
    66 000095F0 0F853EAB0000        <1>  jne L_error_incorrect_type
 11985 000095F6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11986 000095FA 53                      	push rbx
 11987 000095FB FF7508                  	push RET_ADDR
 11988 000095FE 488B7D18                	mov rdi, COUNT
 11989 00009602 4883C703                	add rdi, 3
 11990 00009606 48C1E703                	shl rdi, 3
 11991 0000960A 4801EF                  	add rdi, rbp
 11992 0000960D 488B6D00                	mov rbp, OLD_RDP
 11993 00009611 BE00000000              	mov rsi, 0
 11994                                  .L_tc_recycle_frame_loop_5d05:	 ; start recycle frame loop
 11995 00009616 4883FE03                	cmp rsi, 3
 11996 0000961A 7427                    	je .L_tc_recycle_frame_done_5d05
 11997 0000961C B902000000              	mov rcx, 2
 11998 00009621 4829F1                  	sub rcx, rsi
 11999 00009624 48C1E103                	shl rcx, 3
 12000 00009628 4801E1                  	add rcx, rsp ; rcx is the address to move
 12001 0000962B 4889F3                  	mov rbx, rsi
 12002 0000962E 48C1E303                	shl rbx, 3
 12003 00009632 48F7DB                  	neg rbx
 12004 00009635 4801FB                  	add rbx, rdi ;rbx is the address to move to
 12005 00009638 488B09                  	mov rcx, [rcx]
 12006 0000963B 48890B                  	mov [rbx], rcx
 12007 0000963E 48FFC6                  	inc rsi
 12008 00009641 EBD3                    	jmp .L_tc_recycle_frame_loop_5d05
 12009                                  .L_tc_recycle_frame_done_5d05:	 ; end recycle frame loop
 12010 00009643 BB02000000              	mov rbx, 2
 12011 00009648 48C1E303                	shl rbx, 3
 12012 0000964C 48F7DB                  	neg rbx
 12013 0000964F 4801FB                  	add rbx, rdi
 12014 00009652 4889DC                  	mov rsp, rbx
 12015 00009655 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12016 00009659 FFE3                    	jmp rbx
 12017                                  	.L_if_end_56ac:
 12018                                  	.L_if_end_56ab:
 12019 0000965B EB08                    	jmp .L_if_end_56aa
 12020                                  	.L_if_else_56aa:
 12021 0000965D 488D0425[00000000]      	lea rax, [0 + L_constants]
 12022                                  	.L_if_end_56aa:
 12023                                  	.L_if_end_56a7:
 12024 00009665 C9                      	leave
 12025 00009666 C22000                  	ret 8 * (2 + 2)
 12026                                  .L_lambda_simple_end_4f73:	; new closure is in rax
 12027 00009669 C9                      	leave
 12028 0000966A C22000                  	ret 8 * (2 + 2)
 12029                                  .L_lambda_simple_end_4f72:	; new closure is in rax
 12030 0000966D 50                      	push rax
 12031 0000966E 6A01                    	push 1
 12032 00009670 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12033 00009675 E83A920000              	call malloc
 12034 0000967A 50                      	push rax
 12035 0000967B BF08000000              	mov rdi, 8 * 1	; new rib
 12036 00009680 E82F920000              	call malloc
 12037 00009685 50                      	push rax
 12038 00009686 BF10000000              	mov rdi, 8 * 2	; extended env
 12039 0000968B E824920000              	call malloc
 12040 00009690 488B7D10                	mov rdi, ENV
 12041 00009694 BE00000000              	mov rsi, 0
 12042 00009699 BA01000000              	mov rdx, 1
 12043                                  .L_lambda_simple_env_loop_4f74:	; ext_env[i + 1] <-- env[i]
 12044 0000969E 4883FE01                	cmp rsi, 1
 12045 000096A2 7410                    	je .L_lambda_simple_env_end_4f74
 12046 000096A4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 12047 000096A8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12048 000096AC 48FFC6                  	inc rsi
 12049 000096AF 48FFC2                  	inc rdx
 12050 000096B2 EBEA                    	jmp .L_lambda_simple_env_loop_4f74
 12051                                  .L_lambda_simple_env_end_4f74:
 12052 000096B4 5B                      	pop rbx
 12053 000096B5 BE00000000              	mov rsi, 0
 12054                                  .L_lambda_simple_params_loop_4f74:	; copy params
 12055 000096BA 4883FE01                	cmp rsi, 1
 12056 000096BE 740E                    	je .L_lambda_simple_params_end_4f74
 12057 000096C0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12058 000096C5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12059 000096C9 48FFC6                  	inc rsi
 12060 000096CC EBEC                    	jmp .L_lambda_simple_params_loop_4f74
 12061                                  .L_lambda_simple_params_end_4f74:
 12062 000096CE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12063 000096D1 4889C3                  	mov rbx, rax
 12064 000096D4 58                      	pop rax
 12065 000096D5 C60005                  	mov byte [rax], T_closure
 12066 000096D8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12067 000096DC 48C74009[E9960000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f74
 12068 000096E4 E9E5100000              	jmp .L_lambda_simple_end_4f74
 12069                                  .L_lambda_simple_code_4f74:	; lambda-simple body
 12070 000096E9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12071 000096EF 740B                    	je .L_lambda_simple_arity_check_ok_4f74
 12072 000096F1 FF742410                	push qword [rsp + 8 * 2]
 12073 000096F5 6A01                    	push 1
 12074 000096F7 E971910000              	jmp L_error_incorrect_arity_simple
 12075                                  .L_lambda_simple_arity_check_ok_4f74:
 12076 000096FC C8000000                	enter 0, 0
 12077 00009700 488B0425[38010000]      	mov rax, qword [free_var_39]
 12078 00009708 50                      	push rax
 12079 00009709 488B0425[40010000]      	mov rax, qword [free_var_40]
 12080 00009711 50                      	push rax
 12081 00009712 6A02                    	push 2
 12082 00009714 488B4520                	mov rax, PARAM(0)
 12083                                  	assert_closure(rax)
    65 00009718 803805              <1>  cmp byte [%1], %2
    66 0000971B 0F8513AA0000        <1>  jne L_error_incorrect_type
 12084 00009721 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12085 00009725 53                      	push rbx
 12086 00009726 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12087 0000972A FFD3                    	call rbx
 12088 0000972C 50                      	push rax
 12089 0000972D 6A01                    	push 1
 12090 0000972F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12091 00009734 E87B910000              	call malloc
 12092 00009739 50                      	push rax
 12093 0000973A BF08000000              	mov rdi, 8 * 1	; new rib
 12094 0000973F E870910000              	call malloc
 12095 00009744 50                      	push rax
 12096 00009745 BF18000000              	mov rdi, 8 * 3	; extended env
 12097 0000974A E865910000              	call malloc
 12098 0000974F 488B7D10                	mov rdi, ENV
 12099 00009753 BE00000000              	mov rsi, 0
 12100 00009758 BA01000000              	mov rdx, 1
 12101                                  .L_lambda_simple_env_loop_4f75:	; ext_env[i + 1] <-- env[i]
 12102 0000975D 4883FE02                	cmp rsi, 2
 12103 00009761 7410                    	je .L_lambda_simple_env_end_4f75
 12104 00009763 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 12105 00009767 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12106 0000976B 48FFC6                  	inc rsi
 12107 0000976E 48FFC2                  	inc rdx
 12108 00009771 EBEA                    	jmp .L_lambda_simple_env_loop_4f75
 12109                                  .L_lambda_simple_env_end_4f75:
 12110 00009773 5B                      	pop rbx
 12111 00009774 BE00000000              	mov rsi, 0
 12112                                  .L_lambda_simple_params_loop_4f75:	; copy params
 12113 00009779 4883FE01                	cmp rsi, 1
 12114 0000977D 740E                    	je .L_lambda_simple_params_end_4f75
 12115 0000977F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12116 00009784 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12117 00009788 48FFC6                  	inc rsi
 12118 0000978B EBEC                    	jmp .L_lambda_simple_params_loop_4f75
 12119                                  .L_lambda_simple_params_end_4f75:
 12120 0000978D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12121 00009790 4889C3                  	mov rbx, rax
 12122 00009793 58                      	pop rax
 12123 00009794 C60005                  	mov byte [rax], T_closure
 12124 00009797 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12125 0000979B 48C74009[A8970000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f75
 12126 000097A3 E9B40F0000              	jmp .L_lambda_simple_end_4f75
 12127                                  .L_lambda_simple_code_4f75:	; lambda-simple body
 12128 000097A8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12129 000097AE 740B                    	je .L_lambda_simple_arity_check_ok_4f75
 12130 000097B0 FF742410                	push qword [rsp + 8 * 2]
 12131 000097B4 6A01                    	push 1
 12132 000097B6 E9B2900000              	jmp L_error_incorrect_arity_simple
 12133                                  .L_lambda_simple_arity_check_ok_4f75:
 12134 000097BB C8000000                	enter 0, 0
 12135 000097BF 488B0425[48010000]      	mov rax, qword [free_var_41]
 12136 000097C7 50                      	push rax
 12137 000097C8 488B0425[50010000]      	mov rax, qword [free_var_42]
 12138 000097D0 50                      	push rax
 12139 000097D1 6A02                    	push 2
 12140 000097D3 488B4510                	mov rax, qword [rbp + 8*2]
 12141 000097D7 488B00                  	mov rax, qword [rax + 8*0]
 12142 000097DA 488B00                  	mov rax, qword [rax + 8*0]
 12143                                  	assert_closure(rax)
    65 000097DD 803805              <1>  cmp byte [%1], %2
    66 000097E0 0F854EA90000        <1>  jne L_error_incorrect_type
 12144 000097E6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12145 000097EA 53                      	push rbx
 12146 000097EB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12147 000097EF FFD3                    	call rbx
 12148 000097F1 50                      	push rax
 12149 000097F2 6A01                    	push 1
 12150 000097F4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12151 000097F9 E8B6900000              	call malloc
 12152 000097FE 50                      	push rax
 12153 000097FF BF08000000              	mov rdi, 8 * 1	; new rib
 12154 00009804 E8AB900000              	call malloc
 12155 00009809 50                      	push rax
 12156 0000980A BF20000000              	mov rdi, 8 * 4	; extended env
 12157 0000980F E8A0900000              	call malloc
 12158 00009814 488B7D10                	mov rdi, ENV
 12159 00009818 BE00000000              	mov rsi, 0
 12160 0000981D BA01000000              	mov rdx, 1
 12161                                  .L_lambda_simple_env_loop_4f76:	; ext_env[i + 1] <-- env[i]
 12162 00009822 4883FE03                	cmp rsi, 3
 12163 00009826 7410                    	je .L_lambda_simple_env_end_4f76
 12164 00009828 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 12165 0000982C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12166 00009830 48FFC6                  	inc rsi
 12167 00009833 48FFC2                  	inc rdx
 12168 00009836 EBEA                    	jmp .L_lambda_simple_env_loop_4f76
 12169                                  .L_lambda_simple_env_end_4f76:
 12170 00009838 5B                      	pop rbx
 12171 00009839 BE00000000              	mov rsi, 0
 12172                                  .L_lambda_simple_params_loop_4f76:	; copy params
 12173 0000983E 4883FE01                	cmp rsi, 1
 12174 00009842 740E                    	je .L_lambda_simple_params_end_4f76
 12175 00009844 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12176 00009849 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12177 0000984D 48FFC6                  	inc rsi
 12178 00009850 EBEC                    	jmp .L_lambda_simple_params_loop_4f76
 12179                                  .L_lambda_simple_params_end_4f76:
 12180 00009852 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12181 00009855 4889C3                  	mov rbx, rax
 12182 00009858 58                      	pop rax
 12183 00009859 C60005                  	mov byte [rax], T_closure
 12184 0000985C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12185 00009860 48C74009[6D980000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f76
 12186 00009868 E97D0E0000              	jmp .L_lambda_simple_end_4f76
 12187                                  .L_lambda_simple_code_4f76:	; lambda-simple body
 12188 0000986D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12189 00009873 740B                    	je .L_lambda_simple_arity_check_ok_4f76
 12190 00009875 FF742410                	push qword [rsp + 8 * 2]
 12191 00009879 6A01                    	push 1
 12192 0000987B E9ED8F0000              	jmp L_error_incorrect_arity_simple
 12193                                  .L_lambda_simple_arity_check_ok_4f76:
 12194 00009880 C8000000                	enter 0, 0
 12195 00009884 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12196 00009889 E826900000              	call malloc
 12197 0000988E 50                      	push rax
 12198 0000988F BF08000000              	mov rdi, 8 * 1	; new rib
 12199 00009894 E81B900000              	call malloc
 12200 00009899 50                      	push rax
 12201 0000989A BF28000000              	mov rdi, 8 * 5	; extended env
 12202 0000989F E810900000              	call malloc
 12203 000098A4 488B7D10                	mov rdi, ENV
 12204 000098A8 BE00000000              	mov rsi, 0
 12205 000098AD BA01000000              	mov rdx, 1
 12206                                  .L_lambda_simple_env_loop_4f77:	; ext_env[i + 1] <-- env[i]
 12207 000098B2 4883FE04                	cmp rsi, 4
 12208 000098B6 7410                    	je .L_lambda_simple_env_end_4f77
 12209 000098B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 12210 000098BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12211 000098C0 48FFC6                  	inc rsi
 12212 000098C3 48FFC2                  	inc rdx
 12213 000098C6 EBEA                    	jmp .L_lambda_simple_env_loop_4f77
 12214                                  .L_lambda_simple_env_end_4f77:
 12215 000098C8 5B                      	pop rbx
 12216 000098C9 BE00000000              	mov rsi, 0
 12217                                  .L_lambda_simple_params_loop_4f77:	; copy params
 12218 000098CE 4883FE01                	cmp rsi, 1
 12219 000098D2 740E                    	je .L_lambda_simple_params_end_4f77
 12220 000098D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12221 000098D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12222 000098DD 48FFC6                  	inc rsi
 12223 000098E0 EBEC                    	jmp .L_lambda_simple_params_loop_4f77
 12224                                  .L_lambda_simple_params_end_4f77:
 12225 000098E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12226 000098E5 4889C3                  	mov rbx, rax
 12227 000098E8 58                      	pop rax
 12228 000098E9 C60005                  	mov byte [rax], T_closure
 12229 000098EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12230 000098F0 48C74009[FD980000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f77
 12231 000098F8 E9BF000000              	jmp .L_lambda_simple_end_4f77
 12232                                  .L_lambda_simple_code_4f77:	; lambda-simple body
 12233 000098FD 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12234 00009903 740B                    	je .L_lambda_simple_arity_check_ok_4f77
 12235 00009905 FF742410                	push qword [rsp + 8 * 2]
 12236 00009909 6A02                    	push 2
 12237 0000990B E95D8F0000              	jmp L_error_incorrect_arity_simple
 12238                                  .L_lambda_simple_arity_check_ok_4f77:
 12239 00009910 C8000000                	enter 0, 0
 12240 00009914 488B4528                	mov rax, PARAM(1)
 12241 00009918 50                      	push rax
 12242 00009919 488B4520                	mov rax, PARAM(0)
 12243 0000991D 50                      	push rax
 12244 0000991E 6A02                    	push 2
 12245 00009920 488B4510                	mov rax, qword [rbp + 8*2]
 12246 00009924 488B4008                	mov rax, qword [rax + 8*1]
 12247 00009928 488B00                  	mov rax, qword [rax + 8*0]
 12248                                  	assert_closure(rax)
    65 0000992B 803805              <1>  cmp byte [%1], %2
    66 0000992E 0F8500A80000        <1>  jne L_error_incorrect_type
 12249 00009934 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12250 00009938 53                      	push rbx
 12251 00009939 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12252 0000993D FFD3                    	call rbx
 12253 0000993F 50                      	push rax
 12254 00009940 6A01                    	push 1
 12255 00009942 488B0425[B0020000]      	mov rax, qword [free_var_86]
 12256                                  	assert_closure(rax)
    65 0000994A 803805              <1>  cmp byte [%1], %2
    66 0000994D 0F85E1A70000        <1>  jne L_error_incorrect_type
 12257 00009953 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12258 00009957 53                      	push rbx
 12259 00009958 FF7508                  	push RET_ADDR
 12260 0000995B 488B7D18                	mov rdi, COUNT
 12261 0000995F 4883C703                	add rdi, 3
 12262 00009963 48C1E703                	shl rdi, 3
 12263 00009967 4801EF                  	add rdi, rbp
 12264 0000996A 488B6D00                	mov rbp, OLD_RDP
 12265 0000996E BE00000000              	mov rsi, 0
 12266                                  .L_tc_recycle_frame_loop_5d09:	 ; start recycle frame loop
 12267 00009973 4883FE04                	cmp rsi, 4
 12268 00009977 7427                    	je .L_tc_recycle_frame_done_5d09
 12269 00009979 B903000000              	mov rcx, 3
 12270 0000997E 4829F1                  	sub rcx, rsi
 12271 00009981 48C1E103                	shl rcx, 3
 12272 00009985 4801E1                  	add rcx, rsp ; rcx is the address to move
 12273 00009988 4889F3                  	mov rbx, rsi
 12274 0000998B 48C1E303                	shl rbx, 3
 12275 0000998F 48F7DB                  	neg rbx
 12276 00009992 4801FB                  	add rbx, rdi ;rbx is the address to move to
 12277 00009995 488B09                  	mov rcx, [rcx]
 12278 00009998 48890B                  	mov [rbx], rcx
 12279 0000999B 48FFC6                  	inc rsi
 12280 0000999E EBD3                    	jmp .L_tc_recycle_frame_loop_5d09
 12281                                  .L_tc_recycle_frame_done_5d09:	 ; end recycle frame loop
 12282 000099A0 BB03000000              	mov rbx, 3
 12283 000099A5 48C1E303                	shl rbx, 3
 12284 000099A9 48F7DB                  	neg rbx
 12285 000099AC 4801FB                  	add rbx, rdi
 12286 000099AF 4889DC                  	mov rsp, rbx
 12287 000099B2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12288 000099B6 FFE3                    	jmp rbx
 12289 000099B8 C9                      	leave
 12290 000099B9 C22000                  	ret 8 * (2 + 2)
 12291                                  .L_lambda_simple_end_4f77:	; new closure is in rax
 12292 000099BC 50                      	push rax
 12293 000099BD 6A01                    	push 1
 12294 000099BF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12295 000099C4 E8EB8E0000              	call malloc
 12296 000099C9 50                      	push rax
 12297 000099CA BF08000000              	mov rdi, 8 * 1	; new rib
 12298 000099CF E8E08E0000              	call malloc
 12299 000099D4 50                      	push rax
 12300 000099D5 BF28000000              	mov rdi, 8 * 5	; extended env
 12301 000099DA E8D58E0000              	call malloc
 12302 000099DF 488B7D10                	mov rdi, ENV
 12303 000099E3 BE00000000              	mov rsi, 0
 12304 000099E8 BA01000000              	mov rdx, 1
 12305                                  .L_lambda_simple_env_loop_4f78:	; ext_env[i + 1] <-- env[i]
 12306 000099ED 4883FE04                	cmp rsi, 4
 12307 000099F1 7410                    	je .L_lambda_simple_env_end_4f78
 12308 000099F3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 12309 000099F7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12310 000099FB 48FFC6                  	inc rsi
 12311 000099FE 48FFC2                  	inc rdx
 12312 00009A01 EBEA                    	jmp .L_lambda_simple_env_loop_4f78
 12313                                  .L_lambda_simple_env_end_4f78:
 12314 00009A03 5B                      	pop rbx
 12315 00009A04 BE00000000              	mov rsi, 0
 12316                                  .L_lambda_simple_params_loop_4f78:	; copy params
 12317 00009A09 4883FE01                	cmp rsi, 1
 12318 00009A0D 740E                    	je .L_lambda_simple_params_end_4f78
 12319 00009A0F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12320 00009A14 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12321 00009A18 48FFC6                  	inc rsi
 12322 00009A1B EBEC                    	jmp .L_lambda_simple_params_loop_4f78
 12323                                  .L_lambda_simple_params_end_4f78:
 12324 00009A1D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12325 00009A20 4889C3                  	mov rbx, rax
 12326 00009A23 58                      	pop rax
 12327 00009A24 C60005                  	mov byte [rax], T_closure
 12328 00009A27 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12329 00009A2B 48C74009[389A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f78
 12330 00009A33 E9400C0000              	jmp .L_lambda_simple_end_4f78
 12331                                  .L_lambda_simple_code_4f78:	; lambda-simple body
 12332 00009A38 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12333 00009A3E 740B                    	je .L_lambda_simple_arity_check_ok_4f78
 12334 00009A40 FF742410                	push qword [rsp + 8 * 2]
 12335 00009A44 6A01                    	push 1
 12336 00009A46 E9228E0000              	jmp L_error_incorrect_arity_simple
 12337                                  .L_lambda_simple_arity_check_ok_4f78:
 12338 00009A4B C8000000                	enter 0, 0
 12339 00009A4F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12340 00009A54 E85B8E0000              	call malloc
 12341 00009A59 50                      	push rax
 12342 00009A5A BF08000000              	mov rdi, 8 * 1	; new rib
 12343 00009A5F E8508E0000              	call malloc
 12344 00009A64 50                      	push rax
 12345 00009A65 BF30000000              	mov rdi, 8 * 6	; extended env
 12346 00009A6A E8458E0000              	call malloc
 12347 00009A6F 488B7D10                	mov rdi, ENV
 12348 00009A73 BE00000000              	mov rsi, 0
 12349 00009A78 BA01000000              	mov rdx, 1
 12350                                  .L_lambda_simple_env_loop_4f79:	; ext_env[i + 1] <-- env[i]
 12351 00009A7D 4883FE05                	cmp rsi, 5
 12352 00009A81 7410                    	je .L_lambda_simple_env_end_4f79
 12353 00009A83 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 12354 00009A87 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12355 00009A8B 48FFC6                  	inc rsi
 12356 00009A8E 48FFC2                  	inc rdx
 12357 00009A91 EBEA                    	jmp .L_lambda_simple_env_loop_4f79
 12358                                  .L_lambda_simple_env_end_4f79:
 12359 00009A93 5B                      	pop rbx
 12360 00009A94 BE00000000              	mov rsi, 0
 12361                                  .L_lambda_simple_params_loop_4f79:	; copy params
 12362 00009A99 4883FE01                	cmp rsi, 1
 12363 00009A9D 740E                    	je .L_lambda_simple_params_end_4f79
 12364 00009A9F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12365 00009AA4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12366 00009AA8 48FFC6                  	inc rsi
 12367 00009AAB EBEC                    	jmp .L_lambda_simple_params_loop_4f79
 12368                                  .L_lambda_simple_params_end_4f79:
 12369 00009AAD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12370 00009AB0 4889C3                  	mov rbx, rax
 12371 00009AB3 58                      	pop rax
 12372 00009AB4 C60005                  	mov byte [rax], T_closure
 12373 00009AB7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12374 00009ABB 48C74009[C89A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f79
 12375 00009AC3 E9A0000000              	jmp .L_lambda_simple_end_4f79
 12376                                  .L_lambda_simple_code_4f79:	; lambda-simple body
 12377 00009AC8 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12378 00009ACE 740B                    	je .L_lambda_simple_arity_check_ok_4f79
 12379 00009AD0 FF742410                	push qword [rsp + 8 * 2]
 12380 00009AD4 6A02                    	push 2
 12381 00009AD6 E9928D0000              	jmp L_error_incorrect_arity_simple
 12382                                  .L_lambda_simple_arity_check_ok_4f79:
 12383 00009ADB C8000000                	enter 0, 0
 12384 00009ADF 488B4520                	mov rax, PARAM(0)
 12385 00009AE3 50                      	push rax
 12386 00009AE4 488B4528                	mov rax, PARAM(1)
 12387 00009AE8 50                      	push rax
 12388 00009AE9 6A02                    	push 2
 12389 00009AEB 488B4510                	mov rax, qword [rbp + 8*2]
 12390 00009AEF 488B4010                	mov rax, qword [rax + 8*2]
 12391 00009AF3 488B00                  	mov rax, qword [rax + 8*0]
 12392                                  	assert_closure(rax)
    65 00009AF6 803805              <1>  cmp byte [%1], %2
    66 00009AF9 0F8535A60000        <1>  jne L_error_incorrect_type
 12393 00009AFF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12394 00009B03 53                      	push rbx
 12395 00009B04 FF7508                  	push RET_ADDR
 12396 00009B07 488B7D18                	mov rdi, COUNT
 12397 00009B0B 4883C703                	add rdi, 3
 12398 00009B0F 48C1E703                	shl rdi, 3
 12399 00009B13 4801EF                  	add rdi, rbp
 12400 00009B16 488B6D00                	mov rbp, OLD_RDP
 12401 00009B1A BE00000000              	mov rsi, 0
 12402                                  .L_tc_recycle_frame_loop_5d0b:	 ; start recycle frame loop
 12403 00009B1F 4883FE05                	cmp rsi, 5
 12404 00009B23 7427                    	je .L_tc_recycle_frame_done_5d0b
 12405 00009B25 B904000000              	mov rcx, 4
 12406 00009B2A 4829F1                  	sub rcx, rsi
 12407 00009B2D 48C1E103                	shl rcx, 3
 12408 00009B31 4801E1                  	add rcx, rsp ; rcx is the address to move
 12409 00009B34 4889F3                  	mov rbx, rsi
 12410 00009B37 48C1E303                	shl rbx, 3
 12411 00009B3B 48F7DB                  	neg rbx
 12412 00009B3E 4801FB                  	add rbx, rdi ;rbx is the address to move to
 12413 00009B41 488B09                  	mov rcx, [rcx]
 12414 00009B44 48890B                  	mov [rbx], rcx
 12415 00009B47 48FFC6                  	inc rsi
 12416 00009B4A EBD3                    	jmp .L_tc_recycle_frame_loop_5d0b
 12417                                  .L_tc_recycle_frame_done_5d0b:	 ; end recycle frame loop
 12418 00009B4C BB04000000              	mov rbx, 4
 12419 00009B51 48C1E303                	shl rbx, 3
 12420 00009B55 48F7DB                  	neg rbx
 12421 00009B58 4801FB                  	add rbx, rdi
 12422 00009B5B 4889DC                  	mov rsp, rbx
 12423 00009B5E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12424 00009B62 FFE3                    	jmp rbx
 12425 00009B64 C9                      	leave
 12426 00009B65 C22000                  	ret 8 * (2 + 2)
 12427                                  .L_lambda_simple_end_4f79:	; new closure is in rax
 12428 00009B68 50                      	push rax
 12429 00009B69 6A01                    	push 1
 12430 00009B6B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12431 00009B70 E83F8D0000              	call malloc
 12432 00009B75 50                      	push rax
 12433 00009B76 BF08000000              	mov rdi, 8 * 1	; new rib
 12434 00009B7B E8348D0000              	call malloc
 12435 00009B80 50                      	push rax
 12436 00009B81 BF30000000              	mov rdi, 8 * 6	; extended env
 12437 00009B86 E8298D0000              	call malloc
 12438 00009B8B 488B7D10                	mov rdi, ENV
 12439 00009B8F BE00000000              	mov rsi, 0
 12440 00009B94 BA01000000              	mov rdx, 1
 12441                                  .L_lambda_simple_env_loop_4f7a:	; ext_env[i + 1] <-- env[i]
 12442 00009B99 4883FE05                	cmp rsi, 5
 12443 00009B9D 7410                    	je .L_lambda_simple_env_end_4f7a
 12444 00009B9F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 12445 00009BA3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12446 00009BA7 48FFC6                  	inc rsi
 12447 00009BAA 48FFC2                  	inc rdx
 12448 00009BAD EBEA                    	jmp .L_lambda_simple_env_loop_4f7a
 12449                                  .L_lambda_simple_env_end_4f7a:
 12450 00009BAF 5B                      	pop rbx
 12451 00009BB0 BE00000000              	mov rsi, 0
 12452                                  .L_lambda_simple_params_loop_4f7a:	; copy params
 12453 00009BB5 4883FE01                	cmp rsi, 1
 12454 00009BB9 740E                    	je .L_lambda_simple_params_end_4f7a
 12455 00009BBB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12456 00009BC0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12457 00009BC4 48FFC6                  	inc rsi
 12458 00009BC7 EBEC                    	jmp .L_lambda_simple_params_loop_4f7a
 12459                                  .L_lambda_simple_params_end_4f7a:
 12460 00009BC9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12461 00009BCC 4889C3                  	mov rbx, rax
 12462 00009BCF 58                      	pop rax
 12463 00009BD0 C60005                  	mov byte [rax], T_closure
 12464 00009BD3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12465 00009BD7 48C74009[E49B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f7a
 12466 00009BDF E9220A0000              	jmp .L_lambda_simple_end_4f7a
 12467                                  .L_lambda_simple_code_4f7a:	; lambda-simple body
 12468 00009BE4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12469 00009BEA 740B                    	je .L_lambda_simple_arity_check_ok_4f7a
 12470 00009BEC FF742410                	push qword [rsp + 8 * 2]
 12471 00009BF0 6A01                    	push 1
 12472 00009BF2 E9768C0000              	jmp L_error_incorrect_arity_simple
 12473                                  .L_lambda_simple_arity_check_ok_4f7a:
 12474 00009BF7 C8000000                	enter 0, 0
 12475 00009BFB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12476 00009C00 E8AF8C0000              	call malloc
 12477 00009C05 50                      	push rax
 12478 00009C06 BF08000000              	mov rdi, 8 * 1	; new rib
 12479 00009C0B E8A48C0000              	call malloc
 12480 00009C10 50                      	push rax
 12481 00009C11 BF38000000              	mov rdi, 8 * 7	; extended env
 12482 00009C16 E8998C0000              	call malloc
 12483 00009C1B 488B7D10                	mov rdi, ENV
 12484 00009C1F BE00000000              	mov rsi, 0
 12485 00009C24 BA01000000              	mov rdx, 1
 12486                                  .L_lambda_simple_env_loop_4f7b:	; ext_env[i + 1] <-- env[i]
 12487 00009C29 4883FE06                	cmp rsi, 6
 12488 00009C2D 7410                    	je .L_lambda_simple_env_end_4f7b
 12489 00009C2F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 12490 00009C33 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12491 00009C37 48FFC6                  	inc rsi
 12492 00009C3A 48FFC2                  	inc rdx
 12493 00009C3D EBEA                    	jmp .L_lambda_simple_env_loop_4f7b
 12494                                  .L_lambda_simple_env_end_4f7b:
 12495 00009C3F 5B                      	pop rbx
 12496 00009C40 BE00000000              	mov rsi, 0
 12497                                  .L_lambda_simple_params_loop_4f7b:	; copy params
 12498 00009C45 4883FE01                	cmp rsi, 1
 12499 00009C49 740E                    	je .L_lambda_simple_params_end_4f7b
 12500 00009C4B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12501 00009C50 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12502 00009C54 48FFC6                  	inc rsi
 12503 00009C57 EBEC                    	jmp .L_lambda_simple_params_loop_4f7b
 12504                                  .L_lambda_simple_params_end_4f7b:
 12505 00009C59 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12506 00009C5C 4889C3                  	mov rbx, rax
 12507 00009C5F 58                      	pop rax
 12508 00009C60 C60005                  	mov byte [rax], T_closure
 12509 00009C63 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12510 00009C67 48C74009[749C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f7b
 12511 00009C6F E9BE000000              	jmp .L_lambda_simple_end_4f7b
 12512                                  .L_lambda_simple_code_4f7b:	; lambda-simple body
 12513 00009C74 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12514 00009C7A 740B                    	je .L_lambda_simple_arity_check_ok_4f7b
 12515 00009C7C FF742410                	push qword [rsp + 8 * 2]
 12516 00009C80 6A02                    	push 2
 12517 00009C82 E9E68B0000              	jmp L_error_incorrect_arity_simple
 12518                                  .L_lambda_simple_arity_check_ok_4f7b:
 12519 00009C87 C8000000                	enter 0, 0
 12520 00009C8B 488B4528                	mov rax, PARAM(1)
 12521 00009C8F 50                      	push rax
 12522 00009C90 488B4520                	mov rax, PARAM(0)
 12523 00009C94 50                      	push rax
 12524 00009C95 6A02                    	push 2
 12525 00009C97 488B4510                	mov rax, qword [rbp + 8*2]
 12526 00009C9B 488B00                  	mov rax, qword [rax + 8*0]
 12527 00009C9E 488B00                  	mov rax, qword [rax + 8*0]
 12528                                  	assert_closure(rax)
    65 00009CA1 803805              <1>  cmp byte [%1], %2
    66 00009CA4 0F858AA40000        <1>  jne L_error_incorrect_type
 12529 00009CAA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12530 00009CAE 53                      	push rbx
 12531 00009CAF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12532 00009CB3 FFD3                    	call rbx
 12533 00009CB5 50                      	push rax
 12534 00009CB6 6A01                    	push 1
 12535 00009CB8 488B0425[B0020000]      	mov rax, qword [free_var_86]
 12536                                  	assert_closure(rax)
    65 00009CC0 803805              <1>  cmp byte [%1], %2
    66 00009CC3 0F856BA40000        <1>  jne L_error_incorrect_type
 12537 00009CC9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12538 00009CCD 53                      	push rbx
 12539 00009CCE FF7508                  	push RET_ADDR
 12540 00009CD1 488B7D18                	mov rdi, COUNT
 12541 00009CD5 4883C703                	add rdi, 3
 12542 00009CD9 48C1E703                	shl rdi, 3
 12543 00009CDD 4801EF                  	add rdi, rbp
 12544 00009CE0 488B6D00                	mov rbp, OLD_RDP
 12545 00009CE4 BE00000000              	mov rsi, 0
 12546                                  .L_tc_recycle_frame_loop_5d0d:	 ; start recycle frame loop
 12547 00009CE9 4883FE04                	cmp rsi, 4
 12548 00009CED 7427                    	je .L_tc_recycle_frame_done_5d0d
 12549 00009CEF B903000000              	mov rcx, 3
 12550 00009CF4 4829F1                  	sub rcx, rsi
 12551 00009CF7 48C1E103                	shl rcx, 3
 12552 00009CFB 4801E1                  	add rcx, rsp ; rcx is the address to move
 12553 00009CFE 4889F3                  	mov rbx, rsi
 12554 00009D01 48C1E303                	shl rbx, 3
 12555 00009D05 48F7DB                  	neg rbx
 12556 00009D08 4801FB                  	add rbx, rdi ;rbx is the address to move to
 12557 00009D0B 488B09                  	mov rcx, [rcx]
 12558 00009D0E 48890B                  	mov [rbx], rcx
 12559 00009D11 48FFC6                  	inc rsi
 12560 00009D14 EBD3                    	jmp .L_tc_recycle_frame_loop_5d0d
 12561                                  .L_tc_recycle_frame_done_5d0d:	 ; end recycle frame loop
 12562 00009D16 BB03000000              	mov rbx, 3
 12563 00009D1B 48C1E303                	shl rbx, 3
 12564 00009D1F 48F7DB                  	neg rbx
 12565 00009D22 4801FB                  	add rbx, rdi
 12566 00009D25 4889DC                  	mov rsp, rbx
 12567 00009D28 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12568 00009D2C FFE3                    	jmp rbx
 12569 00009D2E C9                      	leave
 12570 00009D2F C22000                  	ret 8 * (2 + 2)
 12571                                  .L_lambda_simple_end_4f7b:	; new closure is in rax
 12572 00009D32 50                      	push rax
 12573 00009D33 6A01                    	push 1
 12574 00009D35 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12575 00009D3A E8758B0000              	call malloc
 12576 00009D3F 50                      	push rax
 12577 00009D40 BF08000000              	mov rdi, 8 * 1	; new rib
 12578 00009D45 E86A8B0000              	call malloc
 12579 00009D4A 50                      	push rax
 12580 00009D4B BF38000000              	mov rdi, 8 * 7	; extended env
 12581 00009D50 E85F8B0000              	call malloc
 12582 00009D55 488B7D10                	mov rdi, ENV
 12583 00009D59 BE00000000              	mov rsi, 0
 12584 00009D5E BA01000000              	mov rdx, 1
 12585                                  .L_lambda_simple_env_loop_4f7c:	; ext_env[i + 1] <-- env[i]
 12586 00009D63 4883FE06                	cmp rsi, 6
 12587 00009D67 7410                    	je .L_lambda_simple_env_end_4f7c
 12588 00009D69 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 12589 00009D6D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12590 00009D71 48FFC6                  	inc rsi
 12591 00009D74 48FFC2                  	inc rdx
 12592 00009D77 EBEA                    	jmp .L_lambda_simple_env_loop_4f7c
 12593                                  .L_lambda_simple_env_end_4f7c:
 12594 00009D79 5B                      	pop rbx
 12595 00009D7A BE00000000              	mov rsi, 0
 12596                                  .L_lambda_simple_params_loop_4f7c:	; copy params
 12597 00009D7F 4883FE01                	cmp rsi, 1
 12598 00009D83 740E                    	je .L_lambda_simple_params_end_4f7c
 12599 00009D85 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12600 00009D8A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12601 00009D8E 48FFC6                  	inc rsi
 12602 00009D91 EBEC                    	jmp .L_lambda_simple_params_loop_4f7c
 12603                                  .L_lambda_simple_params_end_4f7c:
 12604 00009D93 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12605 00009D96 4889C3                  	mov rbx, rax
 12606 00009D99 58                      	pop rax
 12607 00009D9A C60005                  	mov byte [rax], T_closure
 12608 00009D9D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12609 00009DA1 48C74009[AE9D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f7c
 12610 00009DA9 E9E6070000              	jmp .L_lambda_simple_end_4f7c
 12611                                  .L_lambda_simple_code_4f7c:	; lambda-simple body
 12612 00009DAE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12613 00009DB4 740B                    	je .L_lambda_simple_arity_check_ok_4f7c
 12614 00009DB6 FF742410                	push qword [rsp + 8 * 2]
 12615 00009DBA 6A01                    	push 1
 12616 00009DBC E9AC8A0000              	jmp L_error_incorrect_arity_simple
 12617                                  .L_lambda_simple_arity_check_ok_4f7c:
 12618 00009DC1 C8000000                	enter 0, 0
 12619 00009DC5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12620 00009DCA E8E58A0000              	call malloc
 12621 00009DCF 50                      	push rax
 12622 00009DD0 BF08000000              	mov rdi, 8 * 1	; new rib
 12623 00009DD5 E8DA8A0000              	call malloc
 12624 00009DDA 50                      	push rax
 12625 00009DDB BF40000000              	mov rdi, 8 * 8	; extended env
 12626 00009DE0 E8CF8A0000              	call malloc
 12627 00009DE5 488B7D10                	mov rdi, ENV
 12628 00009DE9 BE00000000              	mov rsi, 0
 12629 00009DEE BA01000000              	mov rdx, 1
 12630                                  .L_lambda_simple_env_loop_4f7d:	; ext_env[i + 1] <-- env[i]
 12631 00009DF3 4883FE07                	cmp rsi, 7
 12632 00009DF7 7410                    	je .L_lambda_simple_env_end_4f7d
 12633 00009DF9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 12634 00009DFD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12635 00009E01 48FFC6                  	inc rsi
 12636 00009E04 48FFC2                  	inc rdx
 12637 00009E07 EBEA                    	jmp .L_lambda_simple_env_loop_4f7d
 12638                                  .L_lambda_simple_env_end_4f7d:
 12639 00009E09 5B                      	pop rbx
 12640 00009E0A BE00000000              	mov rsi, 0
 12641                                  .L_lambda_simple_params_loop_4f7d:	; copy params
 12642 00009E0F 4883FE01                	cmp rsi, 1
 12643 00009E13 740E                    	je .L_lambda_simple_params_end_4f7d
 12644 00009E15 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12645 00009E1A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12646 00009E1E 48FFC6                  	inc rsi
 12647 00009E21 EBEC                    	jmp .L_lambda_simple_params_loop_4f7d
 12648                                  .L_lambda_simple_params_end_4f7d:
 12649 00009E23 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12650 00009E26 4889C3                  	mov rbx, rax
 12651 00009E29 58                      	pop rax
 12652 00009E2A C60005                  	mov byte [rax], T_closure
 12653 00009E2D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12654 00009E31 48C74009[3E9E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f7d
 12655 00009E39 E936050000              	jmp .L_lambda_simple_end_4f7d
 12656                                  .L_lambda_simple_code_4f7d:	; lambda-simple body
 12657 00009E3E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12658 00009E44 740B                    	je .L_lambda_simple_arity_check_ok_4f7d
 12659 00009E46 FF742410                	push qword [rsp + 8 * 2]
 12660 00009E4A 6A01                    	push 1
 12661 00009E4C E91C8A0000              	jmp L_error_incorrect_arity_simple
 12662                                  .L_lambda_simple_arity_check_ok_4f7d:
 12663 00009E51 C8000000                	enter 0, 0
 12664 00009E55 488D0425[17000000]      	lea rax, [23 + L_constants]
 12665 00009E5D 50                      	push rax
 12666 00009E5E 6A01                    	push 1
 12667 00009E60 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12668 00009E65 E84A8A0000              	call malloc
 12669 00009E6A 50                      	push rax
 12670 00009E6B BF08000000              	mov rdi, 8 * 1	; new rib
 12671 00009E70 E83F8A0000              	call malloc
 12672 00009E75 50                      	push rax
 12673 00009E76 BF48000000              	mov rdi, 8 * 9	; extended env
 12674 00009E7B E8348A0000              	call malloc
 12675 00009E80 488B7D10                	mov rdi, ENV
 12676 00009E84 BE00000000              	mov rsi, 0
 12677 00009E89 BA01000000              	mov rdx, 1
 12678                                  .L_lambda_simple_env_loop_4f7e:	; ext_env[i + 1] <-- env[i]
 12679 00009E8E 4883FE08                	cmp rsi, 8
 12680 00009E92 7410                    	je .L_lambda_simple_env_end_4f7e
 12681 00009E94 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 12682 00009E98 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12683 00009E9C 48FFC6                  	inc rsi
 12684 00009E9F 48FFC2                  	inc rdx
 12685 00009EA2 EBEA                    	jmp .L_lambda_simple_env_loop_4f7e
 12686                                  .L_lambda_simple_env_end_4f7e:
 12687 00009EA4 5B                      	pop rbx
 12688 00009EA5 BE00000000              	mov rsi, 0
 12689                                  .L_lambda_simple_params_loop_4f7e:	; copy params
 12690 00009EAA 4883FE01                	cmp rsi, 1
 12691 00009EAE 740E                    	je .L_lambda_simple_params_end_4f7e
 12692 00009EB0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12693 00009EB5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12694 00009EB9 48FFC6                  	inc rsi
 12695 00009EBC EBEC                    	jmp .L_lambda_simple_params_loop_4f7e
 12696                                  .L_lambda_simple_params_end_4f7e:
 12697 00009EBE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12698 00009EC1 4889C3                  	mov rbx, rax
 12699 00009EC4 58                      	pop rax
 12700 00009EC5 C60005                  	mov byte [rax], T_closure
 12701 00009EC8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12702 00009ECC 48C74009[D99E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f7e
 12703 00009ED4 E929040000              	jmp .L_lambda_simple_end_4f7e
 12704                                  .L_lambda_simple_code_4f7e:	; lambda-simple body
 12705 00009ED9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12706 00009EDF 740B                    	je .L_lambda_simple_arity_check_ok_4f7e
 12707 00009EE1 FF742410                	push qword [rsp + 8 * 2]
 12708 00009EE5 6A01                    	push 1
 12709 00009EE7 E981890000              	jmp L_error_incorrect_arity_simple
 12710                                  .L_lambda_simple_arity_check_ok_4f7e:
 12711 00009EEC C8000000                	enter 0, 0
 12712 00009EF0 BF11000000              	mov qword rdi, (1 + 8 + 8)
 12713 00009EF5 E8BA890000              	call malloc
 12714 00009EFA 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 12715 00009EFE 48B8-                   	mov rax, sob_void
 12715 00009F00 [0000000000000000] 
 12716                                  
 12717 00009F08 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12718 00009F0D E8A2890000              	call malloc
 12719 00009F12 50                      	push rax
 12720 00009F13 BF08000000              	mov rdi, 8 * 1	; new rib
 12721 00009F18 E897890000              	call malloc
 12722 00009F1D 50                      	push rax
 12723 00009F1E BF50000000              	mov rdi, 8 * 10	; extended env
 12724 00009F23 E88C890000              	call malloc
 12725 00009F28 488B7D10                	mov rdi, ENV
 12726 00009F2C BE00000000              	mov rsi, 0
 12727 00009F31 BA01000000              	mov rdx, 1
 12728                                  .L_lambda_simple_env_loop_4f7f:	; ext_env[i + 1] <-- env[i]
 12729 00009F36 4883FE09                	cmp rsi, 9
 12730 00009F3A 7410                    	je .L_lambda_simple_env_end_4f7f
 12731 00009F3C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 12732 00009F40 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12733 00009F44 48FFC6                  	inc rsi
 12734 00009F47 48FFC2                  	inc rdx
 12735 00009F4A EBEA                    	jmp .L_lambda_simple_env_loop_4f7f
 12736                                  .L_lambda_simple_env_end_4f7f:
 12737 00009F4C 5B                      	pop rbx
 12738 00009F4D BE00000000              	mov rsi, 0
 12739                                  .L_lambda_simple_params_loop_4f7f:	; copy params
 12740 00009F52 4883FE01                	cmp rsi, 1
 12741 00009F56 740E                    	je .L_lambda_simple_params_end_4f7f
 12742 00009F58 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12743 00009F5D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12744 00009F61 48FFC6                  	inc rsi
 12745 00009F64 EBEC                    	jmp .L_lambda_simple_params_loop_4f7f
 12746                                  .L_lambda_simple_params_end_4f7f:
 12747 00009F66 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12748 00009F69 4889C3                  	mov rbx, rax
 12749 00009F6C 58                      	pop rax
 12750 00009F6D C60005                  	mov byte [rax], T_closure
 12751 00009F70 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12752 00009F74 48C74009[819F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f7f
 12753 00009F7C E96F010000              	jmp .L_lambda_simple_end_4f7f
 12754                                  .L_lambda_simple_code_4f7f:	; lambda-simple body
 12755 00009F81 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12756 00009F87 740B                    	je .L_lambda_simple_arity_check_ok_4f7f
 12757 00009F89 FF742410                	push qword [rsp + 8 * 2]
 12758 00009F8D 6A02                    	push 2
 12759 00009F8F E9D9880000              	jmp L_error_incorrect_arity_simple
 12760                                  .L_lambda_simple_arity_check_ok_4f7f:
 12761 00009F94 C8000000                	enter 0, 0
 12762 00009F98 488B4528                	mov rax, PARAM(1)
 12763 00009F9C 50                      	push rax
 12764 00009F9D 6A01                    	push 1
 12765 00009F9F 488B0425[00000000]      	mov rax, qword [free_var_0]
 12766                                  	assert_closure(rax)
    65 00009FA7 803805              <1>  cmp byte [%1], %2
    66 00009FAA 0F8584A10000        <1>  jne L_error_incorrect_type
 12767 00009FB0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12768 00009FB4 53                      	push rbx
 12769 00009FB5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12770 00009FB9 FFD3                    	call rbx
 12771 00009FBB 483D[02000000]          	cmp rax, sob_boolean_false
 12772 00009FC1 0F8525010000            	jne .L_or_end_0617
 12773 00009FC7 488B4528                	mov rax, PARAM(1)
 12774 00009FCB 50                      	push rax
 12775 00009FCC 6A01                    	push 1
 12776 00009FCE 488B0425[80000000]      	mov rax, qword [free_var_16]
 12777                                  	assert_closure(rax)
    65 00009FD6 803805              <1>  cmp byte [%1], %2
    66 00009FD9 0F8555A10000        <1>  jne L_error_incorrect_type
 12778 00009FDF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12779 00009FE3 53                      	push rbx
 12780 00009FE4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12781 00009FE8 FFD3                    	call rbx
 12782 00009FEA 50                      	push rax
 12783 00009FEB 488B4520                	mov rax, PARAM(0)
 12784 00009FEF 50                      	push rax
 12785 00009FF0 6A02                    	push 2
 12786 00009FF2 488B4510                	mov rax, qword [rbp + 8*2]
 12787 00009FF6 488B4008                	mov rax, qword [rax + 8*1]
 12788 00009FFA 488B00                  	mov rax, qword [rax + 8*0]
 12789                                  	assert_closure(rax)
    65 00009FFD 803805              <1>  cmp byte [%1], %2
    66 0000A000 0F852EA10000        <1>  jne L_error_incorrect_type
 12790 0000A006 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12791 0000A00A 53                      	push rbx
 12792 0000A00B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12793 0000A00F FFD3                    	call rbx
 12794 0000A011 483D[02000000]          	cmp rax, sob_boolean_false
 12795 0000A017 0F84C7000000            	je .L_if_else_56ad
 12796 0000A01D 488B4528                	mov rax, PARAM(1)
 12797 0000A021 50                      	push rax
 12798 0000A022 6A01                    	push 1
 12799 0000A024 488B0425[88000000]      	mov rax, qword [free_var_17]
 12800                                  	assert_closure(rax)
    65 0000A02C 803805              <1>  cmp byte [%1], %2
    66 0000A02F 0F85FFA00000        <1>  jne L_error_incorrect_type
 12801 0000A035 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12802 0000A039 53                      	push rbx
 12803 0000A03A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12804 0000A03E FFD3                    	call rbx
 12805 0000A040 50                      	push rax
 12806 0000A041 488B4528                	mov rax, PARAM(1)
 12807 0000A045 50                      	push rax
 12808 0000A046 6A01                    	push 1
 12809 0000A048 488B0425[80000000]      	mov rax, qword [free_var_16]
 12810                                  	assert_closure(rax)
    65 0000A050 803805              <1>  cmp byte [%1], %2
    66 0000A053 0F85DBA00000        <1>  jne L_error_incorrect_type
 12811 0000A059 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12812 0000A05D 53                      	push rbx
 12813 0000A05E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12814 0000A062 FFD3                    	call rbx
 12815 0000A064 50                      	push rax
 12816 0000A065 6A02                    	push 2
 12817 0000A067 488B4510                	mov rax, qword [rbp + 8*2]
 12818 0000A06B 488B00                  	mov rax, qword [rax + 8*0]
 12819 0000A06E 488B00                  	mov rax, qword [rax + 8*0]
 12820 0000A071 488B00                  	mov rax, qword [rax]
 12821                                  	assert_closure(rax)
    65 0000A074 803805              <1>  cmp byte [%1], %2
    66 0000A077 0F85B7A00000        <1>  jne L_error_incorrect_type
 12822 0000A07D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12823 0000A081 53                      	push rbx
 12824 0000A082 FF7508                  	push RET_ADDR
 12825 0000A085 488B7D18                	mov rdi, COUNT
 12826 0000A089 4883C703                	add rdi, 3
 12827 0000A08D 48C1E703                	shl rdi, 3
 12828 0000A091 4801EF                  	add rdi, rbp
 12829 0000A094 488B6D00                	mov rbp, OLD_RDP
 12830 0000A098 BE00000000              	mov rsi, 0
 12831                                  .L_tc_recycle_frame_loop_5d10:	 ; start recycle frame loop
 12832 0000A09D 4883FE05                	cmp rsi, 5
 12833 0000A0A1 7427                    	je .L_tc_recycle_frame_done_5d10
 12834 0000A0A3 B904000000              	mov rcx, 4
 12835 0000A0A8 4829F1                  	sub rcx, rsi
 12836 0000A0AB 48C1E103                	shl rcx, 3
 12837 0000A0AF 4801E1                  	add rcx, rsp ; rcx is the address to move
 12838 0000A0B2 4889F3                  	mov rbx, rsi
 12839 0000A0B5 48C1E303                	shl rbx, 3
 12840 0000A0B9 48F7DB                  	neg rbx
 12841 0000A0BC 4801FB                  	add rbx, rdi ;rbx is the address to move to
 12842 0000A0BF 488B09                  	mov rcx, [rcx]
 12843 0000A0C2 48890B                  	mov [rbx], rcx
 12844 0000A0C5 48FFC6                  	inc rsi
 12845 0000A0C8 EBD3                    	jmp .L_tc_recycle_frame_loop_5d10
 12846                                  .L_tc_recycle_frame_done_5d10:	 ; end recycle frame loop
 12847 0000A0CA BB04000000              	mov rbx, 4
 12848 0000A0CF 48C1E303                	shl rbx, 3
 12849 0000A0D3 48F7DB                  	neg rbx
 12850 0000A0D6 4801FB                  	add rbx, rdi
 12851 0000A0D9 4889DC                  	mov rsp, rbx
 12852 0000A0DC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12853 0000A0E0 FFE3                    	jmp rbx
 12854 0000A0E2 EB08                    	jmp .L_if_end_56ad
 12855                                  	.L_if_else_56ad:
 12856 0000A0E4 488D0425[02000000]      	lea rax, [2 + L_constants]
 12857                                  	.L_if_end_56ad:
 12858                                  .L_or_end_0617:
 12859 0000A0EC C9                      	leave
 12860 0000A0ED C22000                  	ret 8 * (2 + 2)
 12861                                  .L_lambda_simple_end_4f7f:	; new closure is in rax
 12862 0000A0F0 50                      	push rax
 12863 0000A0F1 488B4520                	mov rax, PARAM(0)
 12864 0000A0F5 8F00                    	pop qword [rax]
 12865 0000A0F7 48B8-                   	mov rax, sob_void
 12865 0000A0F9 [0000000000000000] 
 12866                                  
 12867 0000A101 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12868 0000A106 E8A9870000              	call malloc
 12869 0000A10B 50                      	push rax
 12870 0000A10C BF08000000              	mov rdi, 8 * 1	; new rib
 12871 0000A111 E89E870000              	call malloc
 12872 0000A116 50                      	push rax
 12873 0000A117 BF50000000              	mov rdi, 8 * 10	; extended env
 12874 0000A11C E893870000              	call malloc
 12875 0000A121 488B7D10                	mov rdi, ENV
 12876 0000A125 BE00000000              	mov rsi, 0
 12877 0000A12A BA01000000              	mov rdx, 1
 12878                                  .L_lambda_opt_env_loop_0c92:	; ext_env[i + 1] <-- env[i]
 12879 0000A12F 4883FE09                	cmp rsi, 9
 12880 0000A133 7410                    	je .L_lambda_opt_env_end_0c92
 12881 0000A135 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 12882 0000A139 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12883 0000A13D 48FFC6                  	inc rsi
 12884 0000A140 48FFC2                  	inc rdx
 12885 0000A143 EBEA                    	jmp .L_lambda_opt_env_loop_0c92
 12886                                  .L_lambda_opt_env_end_0c92:
 12887 0000A145 5B                      	pop rbx
 12888 0000A146 BE00000000              	mov rsi, 0
 12889                                  .L_lambda_opt_params_loop_0c92:	; copy params
 12890 0000A14B 4883FE01                	cmp rsi, 1
 12891 0000A14F 740E                    	je .L_lambda_opt_params_end_0c92
 12892 0000A151 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12893 0000A156 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12894 0000A15A 48FFC6                  	inc rsi
 12895 0000A15D EBEC                    	jmp .L_lambda_opt_params_loop_0c92
 12896                                  .L_lambda_opt_params_end_0c92:
 12897 0000A15F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12898 0000A162 4889C3                  	mov rbx, rax
 12899 0000A165 58                      	pop rax
 12900 0000A166 C60005                  	mov byte [rax], T_closure
 12901 0000A169 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12902 0000A16D 48C74009[7AA10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c92
 12903 0000A175 E984010000              	jmp .L_lambda_opt_end_0c92
 12904                                  .L_lambda_opt_code_0c92:	; lambda-opt body
 12905 0000A17A 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 12906 0000A17F 4889FB                  	mov rbx, rdi
 12907 0000A182 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 12908 0000A186 4883FB00                	cmp rbx, 0
 12909 0000A18A 7F45                    	jg .L_lambda_opt_arity_check_more_0c92
 12910                                  .L_lambda_opt_arity_check_exact_0c92:	 ; if params in opt is exact
 12911 0000A18C 4883EC08                	sub rsp, 8
 12912 0000A190 BE00000000              	mov rsi, 0 ; index
 12913                                  .L_lambda_opt_stack_enlarge_loop_0c92:	 ; stack loop enlarge start
 12914 0000A195 4883FE04                	cmp rsi, 4
 12915 0000A199 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c92
 12916 0000A19B 4889F7                  	mov rdi, rsi
 12917 0000A19E 48FFC7                  	inc rdi
 12918 0000A1A1 48C1E703                	shl rdi, 3
 12919 0000A1A5 4801E7                  	add rdi, rsp
 12920 0000A1A8 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 12921 0000A1AB 4883EB08                	sub rbx, 8
 12922 0000A1AF 488B3F                  	mov rdi, [rdi]
 12923 0000A1B2 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 12924 0000A1B5 48FFC6                  	inc rsi
 12925 0000A1B8 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c92
 12926                                  .L_lambda_opt_stack_enlarge_loop_exit_0c92:	 ; end of stack enlarge loop
 12927 0000A1BA 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 12927 0000A1BF [01000000]         
 12928 0000A1C3 48C744241002000000      	mov qword [rsp + 2*8], 2
 12929 0000A1CC E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c92
 12930                                  .L_lambda_opt_arity_check_more_0c92:	 ; if params in opt is more
 12931 0000A1D1 48B8-                   	mov rax, sob_nil
 12931 0000A1D3 [0100000000000000] 
 12932 0000A1DB 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 12933 0000A1DE 48FFCE                  	dec rsi
 12934                                  .L_lambda_opt_list_create_loop_0c92:	; start of list creation loop
 12935 0000A1E1 4883FEFF                	cmp rsi, -1
 12936 0000A1E5 7422                    	je .L_lambda_opt_list_create_loop_exit_0c92
 12937 0000A1E7 488D4E04                	lea rcx, [rsi + (3 + 1)]
 12938 0000A1EB 48C1E103                	shl rcx, 3
 12939 0000A1EF 4801E1                  	add rcx, rsp
 12940 0000A1F2 488B09                  	mov rcx, [rcx]
 12941 0000A1F5 56                      	push rsi ; save params
 12942 0000A1F6 53                      	push rbx
 12943                                  
 12944 0000A1F7 50                      	push rax ; cdr
 12945 0000A1F8 51                      	push rcx ; car
 12946 0000A1F9 6A02                    	push qword 2 ; push num of args
 12947 0000A1FB 6A01                    	push qword 1 ; push garbage as env
 12948 0000A1FD E839900000              	call L_code_ptr_cons
 12949                                  
 12950 0000A202 5B                      	pop rbx ; restore params
 12951 0000A203 5E                      	pop rsi
 12952 0000A204 48FFCE                  	dec rsi
 12953 0000A207 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c92
 12954                                  .L_lambda_opt_list_create_loop_exit_0c92:	; end of list creation loop
 12955 0000A209 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 12956 0000A20E 4883C302                	add rbx, 2
 12957 0000A212 4889DF                  	mov rdi, rbx
 12958 0000A215 48C1E703                	shl rdi,3
 12959 0000A219 4801E7                  	add rdi, rsp
 12960 0000A21C 488907                  	mov [rdi], rax
 12961 0000A21F BE00000000              	mov rsi, 0 ;index
 12962                                  .L_lambda_opt_stack_shrink_loop_0c92:	; start of stack shrink loop
 12963 0000A224 4883FE04                	cmp rsi, 4
 12964 0000A228 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c92
 12965 0000A22A BF03000000              	mov rdi, 3
 12966 0000A22F 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 12967 0000A232 4889D9                  	mov rcx, rbx
 12968 0000A235 4829F1                  	sub rcx, rsi
 12969 0000A238 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 12970 0000A23B 4889FA                  	mov rdx, rdi
 12971 0000A23E 48C1E203                	shl rdx, 3
 12972 0000A242 4801E2                  	add rdx, rsp
 12973 0000A245 48C1E103                	shl rcx, 3
 12974 0000A249 4801E1                  	add rcx, rsp
 12975 0000A24C 488B12                  	mov rdx, [rdx]
 12976 0000A24F 488911                  	mov [rcx], rdx
 12977 0000A252 48FFC6                  	inc rsi
 12978 0000A255 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c92
 12979                                  .L_lambda_opt_stack_shrink_loop_exit_0c92:	; end of stack shrink loop
 12980 0000A257 4883EB02                	sub rbx, 2 ; rbx has number of args
 12981 0000A25B 4883EB02                	sub rbx, 2
 12982 0000A25F 48C1E303                	shl rbx, 3
 12983 0000A263 4801DC                  	add rsp, rbx
 12984 0000A266 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 12985                                  .L_lambda_opt_stack_adjusted_0c92:
 12986 0000A26F C8000000                	enter 0, 0
 12987 0000A273 488B4528                	mov rax, PARAM(1)
 12988 0000A277 50                      	push rax
 12989 0000A278 488B4520                	mov rax, PARAM(0)
 12990 0000A27C 50                      	push rax
 12991 0000A27D 6A02                    	push 2
 12992 0000A27F 488B4510                	mov rax, qword [rbp + 8*2]
 12993 0000A283 488B00                  	mov rax, qword [rax + 8*0]
 12994 0000A286 488B00                  	mov rax, qword [rax + 8*0]
 12995 0000A289 488B00                  	mov rax, qword [rax]
 12996                                  	assert_closure(rax)
    65 0000A28C 803805              <1>  cmp byte [%1], %2
    66 0000A28F 0F859F9E0000        <1>  jne L_error_incorrect_type
 12997 0000A295 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12998 0000A299 53                      	push rbx
 12999 0000A29A FF7508                  	push RET_ADDR
 13000 0000A29D 488B7D18                	mov rdi, COUNT
 13001 0000A2A1 4883C703                	add rdi, 3
 13002 0000A2A5 48C1E703                	shl rdi, 3
 13003 0000A2A9 4801EF                  	add rdi, rbp
 13004 0000A2AC 488B6D00                	mov rbp, OLD_RDP
 13005 0000A2B0 BE00000000              	mov rsi, 0
 13006                                  .L_tc_recycle_frame_loop_5d11:	 ; start recycle frame loop
 13007 0000A2B5 4883FE05                	cmp rsi, 5
 13008 0000A2B9 7427                    	je .L_tc_recycle_frame_done_5d11
 13009 0000A2BB B904000000              	mov rcx, 4
 13010 0000A2C0 4829F1                  	sub rcx, rsi
 13011 0000A2C3 48C1E103                	shl rcx, 3
 13012 0000A2C7 4801E1                  	add rcx, rsp ; rcx is the address to move
 13013 0000A2CA 4889F3                  	mov rbx, rsi
 13014 0000A2CD 48C1E303                	shl rbx, 3
 13015 0000A2D1 48F7DB                  	neg rbx
 13016 0000A2D4 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13017 0000A2D7 488B09                  	mov rcx, [rcx]
 13018 0000A2DA 48890B                  	mov [rbx], rcx
 13019 0000A2DD 48FFC6                  	inc rsi
 13020 0000A2E0 EBD3                    	jmp .L_tc_recycle_frame_loop_5d11
 13021                                  .L_tc_recycle_frame_done_5d11:	 ; end recycle frame loop
 13022 0000A2E2 BB04000000              	mov rbx, 4
 13023 0000A2E7 48C1E303                	shl rbx, 3
 13024 0000A2EB 48F7DB                  	neg rbx
 13025 0000A2EE 4801FB                  	add rbx, rdi
 13026 0000A2F1 4889DC                  	mov rsp, rbx
 13027 0000A2F4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13028 0000A2F8 FFE3                    	jmp rbx
 13029 0000A2FA C9                      	leave
 13030 0000A2FB C22000                  	ret AND_KILL_FRAME(2)
 13031                                  .L_lambda_opt_end_0c92:	; new closure is in rax
 13032 0000A2FE C9                      	leave
 13033 0000A2FF C21800                  	ret 8 * (2 + 1)
 13034                                  .L_lambda_simple_end_4f7e:	; new closure is in rax
 13035                                  	assert_closure(rax)
    65 0000A302 803805              <1>  cmp byte [%1], %2
    66 0000A305 0F85299E0000        <1>  jne L_error_incorrect_type
 13036 0000A30B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13037 0000A30F 53                      	push rbx
 13038 0000A310 FF7508                  	push RET_ADDR
 13039 0000A313 488B7D18                	mov rdi, COUNT
 13040 0000A317 4883C703                	add rdi, 3
 13041 0000A31B 48C1E703                	shl rdi, 3
 13042 0000A31F 4801EF                  	add rdi, rbp
 13043 0000A322 488B6D00                	mov rbp, OLD_RDP
 13044 0000A326 BE00000000              	mov rsi, 0
 13045                                  .L_tc_recycle_frame_loop_5d0f:	 ; start recycle frame loop
 13046 0000A32B 4883FE04                	cmp rsi, 4
 13047 0000A32F 7427                    	je .L_tc_recycle_frame_done_5d0f
 13048 0000A331 B903000000              	mov rcx, 3
 13049 0000A336 4829F1                  	sub rcx, rsi
 13050 0000A339 48C1E103                	shl rcx, 3
 13051 0000A33D 4801E1                  	add rcx, rsp ; rcx is the address to move
 13052 0000A340 4889F3                  	mov rbx, rsi
 13053 0000A343 48C1E303                	shl rbx, 3
 13054 0000A347 48F7DB                  	neg rbx
 13055 0000A34A 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13056 0000A34D 488B09                  	mov rcx, [rcx]
 13057 0000A350 48890B                  	mov [rbx], rcx
 13058 0000A353 48FFC6                  	inc rsi
 13059 0000A356 EBD3                    	jmp .L_tc_recycle_frame_loop_5d0f
 13060                                  .L_tc_recycle_frame_done_5d0f:	 ; end recycle frame loop
 13061 0000A358 BB03000000              	mov rbx, 3
 13062 0000A35D 48C1E303                	shl rbx, 3
 13063 0000A361 48F7DB                  	neg rbx
 13064 0000A364 4801FB                  	add rbx, rdi
 13065 0000A367 4889DC                  	mov rsp, rbx
 13066 0000A36A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13067 0000A36E FFE3                    	jmp rbx
 13068 0000A370 C9                      	leave
 13069 0000A371 C21800                  	ret 8 * (2 + 1)
 13070                                  .L_lambda_simple_end_4f7d:	; new closure is in rax
 13071 0000A374 50                      	push rax
 13072 0000A375 6A01                    	push 1
 13073 0000A377 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13074 0000A37C E833850000              	call malloc
 13075 0000A381 50                      	push rax
 13076 0000A382 BF08000000              	mov rdi, 8 * 1	; new rib
 13077 0000A387 E828850000              	call malloc
 13078 0000A38C 50                      	push rax
 13079 0000A38D BF40000000              	mov rdi, 8 * 8	; extended env
 13080 0000A392 E81D850000              	call malloc
 13081 0000A397 488B7D10                	mov rdi, ENV
 13082 0000A39B BE00000000              	mov rsi, 0
 13083 0000A3A0 BA01000000              	mov rdx, 1
 13084                                  .L_lambda_simple_env_loop_4f80:	; ext_env[i + 1] <-- env[i]
 13085 0000A3A5 4883FE07                	cmp rsi, 7
 13086 0000A3A9 7410                    	je .L_lambda_simple_env_end_4f80
 13087 0000A3AB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 13088 0000A3AF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13089 0000A3B3 48FFC6                  	inc rsi
 13090 0000A3B6 48FFC2                  	inc rdx
 13091 0000A3B9 EBEA                    	jmp .L_lambda_simple_env_loop_4f80
 13092                                  .L_lambda_simple_env_end_4f80:
 13093 0000A3BB 5B                      	pop rbx
 13094 0000A3BC BE00000000              	mov rsi, 0
 13095                                  .L_lambda_simple_params_loop_4f80:	; copy params
 13096 0000A3C1 4883FE01                	cmp rsi, 1
 13097 0000A3C5 740E                    	je .L_lambda_simple_params_end_4f80
 13098 0000A3C7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13099 0000A3CC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13100 0000A3D0 48FFC6                  	inc rsi
 13101 0000A3D3 EBEC                    	jmp .L_lambda_simple_params_loop_4f80
 13102                                  .L_lambda_simple_params_end_4f80:
 13103 0000A3D5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13104 0000A3D8 4889C3                  	mov rbx, rax
 13105 0000A3DB 58                      	pop rax
 13106 0000A3DC C60005                  	mov byte [rax], T_closure
 13107 0000A3DF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13108 0000A3E3 48C74009[F0A30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f80
 13109 0000A3EB E932010000              	jmp .L_lambda_simple_end_4f80
 13110                                  .L_lambda_simple_code_4f80:	; lambda-simple body
 13111 0000A3F0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13112 0000A3F6 740B                    	je .L_lambda_simple_arity_check_ok_4f80
 13113 0000A3F8 FF742410                	push qword [rsp + 8 * 2]
 13114 0000A3FC 6A01                    	push 1
 13115 0000A3FE E96A840000              	jmp L_error_incorrect_arity_simple
 13116                                  .L_lambda_simple_arity_check_ok_4f80:
 13117 0000A403 C8000000                	enter 0, 0
 13118 0000A407 488B4510                	mov rax, qword [rbp + 8*2]
 13119 0000A40B 488B4020                	mov rax, qword [rax + 8*4]
 13120 0000A40F 488B00                  	mov rax, qword [rax + 8*0]
 13121 0000A412 50                      	push rax
 13122 0000A413 6A01                    	push 1
 13123 0000A415 488B4520                	mov rax, PARAM(0)
 13124                                  	assert_closure(rax)
    65 0000A419 803805              <1>  cmp byte [%1], %2
    66 0000A41C 0F85129D0000        <1>  jne L_error_incorrect_type
 13125 0000A422 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13126 0000A426 53                      	push rbx
 13127 0000A427 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13128 0000A42B FFD3                    	call rbx
 13129 0000A42D 48890425[30030000]      	mov qword [free_var_102], rax
 13130 0000A435 48B8-                   	mov rax, sob_void
 13130 0000A437 [0000000000000000] 
 13131                                  
 13132 0000A43F 488B4510                	mov rax, qword [rbp + 8*2]
 13133 0000A443 488B00                  	mov rax, qword [rax + 8*0]
 13134 0000A446 488B00                  	mov rax, qword [rax + 8*0]
 13135 0000A449 50                      	push rax
 13136 0000A44A 6A01                    	push 1
 13137 0000A44C 488B4520                	mov rax, PARAM(0)
 13138                                  	assert_closure(rax)
    65 0000A450 803805              <1>  cmp byte [%1], %2
    66 0000A453 0F85DB9C0000        <1>  jne L_error_incorrect_type
 13139 0000A459 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13140 0000A45D 53                      	push rbx
 13141 0000A45E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13142 0000A462 FFD3                    	call rbx
 13143 0000A464 48890425[38030000]      	mov qword [free_var_103], rax
 13144 0000A46C 48B8-                   	mov rax, sob_void
 13144 0000A46E [0000000000000000] 
 13145                                  
 13146 0000A476 488B4510                	mov rax, qword [rbp + 8*2]
 13147 0000A47A 488B4008                	mov rax, qword [rax + 8*1]
 13148 0000A47E 488B00                  	mov rax, qword [rax + 8*0]
 13149 0000A481 50                      	push rax
 13150 0000A482 6A01                    	push 1
 13151 0000A484 488B4520                	mov rax, PARAM(0)
 13152                                  	assert_closure(rax)
    65 0000A488 803805              <1>  cmp byte [%1], %2
    66 0000A48B 0F85A39C0000        <1>  jne L_error_incorrect_type
 13153 0000A491 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13154 0000A495 53                      	push rbx
 13155 0000A496 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13156 0000A49A FFD3                    	call rbx
 13157 0000A49C 48890425[40030000]      	mov qword [free_var_104], rax
 13158 0000A4A4 48B8-                   	mov rax, sob_void
 13158 0000A4A6 [0000000000000000] 
 13159                                  
 13160 0000A4AE 488B4510                	mov rax, qword [rbp + 8*2]
 13161 0000A4B2 488B4010                	mov rax, qword [rax + 8*2]
 13162 0000A4B6 488B00                  	mov rax, qword [rax + 8*0]
 13163 0000A4B9 50                      	push rax
 13164 0000A4BA 6A01                    	push 1
 13165 0000A4BC 488B4520                	mov rax, PARAM(0)
 13166                                  	assert_closure(rax)
    65 0000A4C0 803805              <1>  cmp byte [%1], %2
    66 0000A4C3 0F856B9C0000        <1>  jne L_error_incorrect_type
 13167 0000A4C9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13168 0000A4CD 53                      	push rbx
 13169 0000A4CE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13170 0000A4D2 FFD3                    	call rbx
 13171 0000A4D4 48890425[48030000]      	mov qword [free_var_105], rax
 13172 0000A4DC 48B8-                   	mov rax, sob_void
 13172 0000A4DE [0000000000000000] 
 13173                                  
 13174 0000A4E6 488B4510                	mov rax, qword [rbp + 8*2]
 13175 0000A4EA 488B4018                	mov rax, qword [rax + 8*3]
 13176 0000A4EE 488B00                  	mov rax, qword [rax + 8*0]
 13177 0000A4F1 50                      	push rax
 13178 0000A4F2 6A01                    	push 1
 13179 0000A4F4 488B4520                	mov rax, PARAM(0)
 13180                                  	assert_closure(rax)
    65 0000A4F8 803805              <1>  cmp byte [%1], %2
    66 0000A4FB 0F85339C0000        <1>  jne L_error_incorrect_type
 13181 0000A501 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13182 0000A505 53                      	push rbx
 13183 0000A506 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13184 0000A50A FFD3                    	call rbx
 13185 0000A50C 48890425[50030000]      	mov qword [free_var_106], rax
 13186 0000A514 48B8-                   	mov rax, sob_void
 13186 0000A516 [0000000000000000] 
 13187 0000A51E C9                      	leave
 13188 0000A51F C21800                  	ret 8 * (2 + 1)
 13189                                  .L_lambda_simple_end_4f80:	; new closure is in rax
 13190                                  	assert_closure(rax)
    65 0000A522 803805              <1>  cmp byte [%1], %2
    66 0000A525 0F85099C0000        <1>  jne L_error_incorrect_type
 13191 0000A52B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13192 0000A52F 53                      	push rbx
 13193 0000A530 FF7508                  	push RET_ADDR
 13194 0000A533 488B7D18                	mov rdi, COUNT
 13195 0000A537 4883C703                	add rdi, 3
 13196 0000A53B 48C1E703                	shl rdi, 3
 13197 0000A53F 4801EF                  	add rdi, rbp
 13198 0000A542 488B6D00                	mov rbp, OLD_RDP
 13199 0000A546 BE00000000              	mov rsi, 0
 13200                                  .L_tc_recycle_frame_loop_5d0e:	 ; start recycle frame loop
 13201 0000A54B 4883FE04                	cmp rsi, 4
 13202 0000A54F 7427                    	je .L_tc_recycle_frame_done_5d0e
 13203 0000A551 B903000000              	mov rcx, 3
 13204 0000A556 4829F1                  	sub rcx, rsi
 13205 0000A559 48C1E103                	shl rcx, 3
 13206 0000A55D 4801E1                  	add rcx, rsp ; rcx is the address to move
 13207 0000A560 4889F3                  	mov rbx, rsi
 13208 0000A563 48C1E303                	shl rbx, 3
 13209 0000A567 48F7DB                  	neg rbx
 13210 0000A56A 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13211 0000A56D 488B09                  	mov rcx, [rcx]
 13212 0000A570 48890B                  	mov [rbx], rcx
 13213 0000A573 48FFC6                  	inc rsi
 13214 0000A576 EBD3                    	jmp .L_tc_recycle_frame_loop_5d0e
 13215                                  .L_tc_recycle_frame_done_5d0e:	 ; end recycle frame loop
 13216 0000A578 BB03000000              	mov rbx, 3
 13217 0000A57D 48C1E303                	shl rbx, 3
 13218 0000A581 48F7DB                  	neg rbx
 13219 0000A584 4801FB                  	add rbx, rdi
 13220 0000A587 4889DC                  	mov rsp, rbx
 13221 0000A58A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13222 0000A58E FFE3                    	jmp rbx
 13223 0000A590 C9                      	leave
 13224 0000A591 C21800                  	ret 8 * (2 + 1)
 13225                                  .L_lambda_simple_end_4f7c:	; new closure is in rax
 13226                                  	assert_closure(rax)
    65 0000A594 803805              <1>  cmp byte [%1], %2
    66 0000A597 0F85979B0000        <1>  jne L_error_incorrect_type
 13227 0000A59D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13228 0000A5A1 53                      	push rbx
 13229 0000A5A2 FF7508                  	push RET_ADDR
 13230 0000A5A5 488B7D18                	mov rdi, COUNT
 13231 0000A5A9 4883C703                	add rdi, 3
 13232 0000A5AD 48C1E703                	shl rdi, 3
 13233 0000A5B1 4801EF                  	add rdi, rbp
 13234 0000A5B4 488B6D00                	mov rbp, OLD_RDP
 13235 0000A5B8 BE00000000              	mov rsi, 0
 13236                                  .L_tc_recycle_frame_loop_5d0c:	 ; start recycle frame loop
 13237 0000A5BD 4883FE04                	cmp rsi, 4
 13238 0000A5C1 7427                    	je .L_tc_recycle_frame_done_5d0c
 13239 0000A5C3 B903000000              	mov rcx, 3
 13240 0000A5C8 4829F1                  	sub rcx, rsi
 13241 0000A5CB 48C1E103                	shl rcx, 3
 13242 0000A5CF 4801E1                  	add rcx, rsp ; rcx is the address to move
 13243 0000A5D2 4889F3                  	mov rbx, rsi
 13244 0000A5D5 48C1E303                	shl rbx, 3
 13245 0000A5D9 48F7DB                  	neg rbx
 13246 0000A5DC 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13247 0000A5DF 488B09                  	mov rcx, [rcx]
 13248 0000A5E2 48890B                  	mov [rbx], rcx
 13249 0000A5E5 48FFC6                  	inc rsi
 13250 0000A5E8 EBD3                    	jmp .L_tc_recycle_frame_loop_5d0c
 13251                                  .L_tc_recycle_frame_done_5d0c:	 ; end recycle frame loop
 13252 0000A5EA BB03000000              	mov rbx, 3
 13253 0000A5EF 48C1E303                	shl rbx, 3
 13254 0000A5F3 48F7DB                  	neg rbx
 13255 0000A5F6 4801FB                  	add rbx, rdi
 13256 0000A5F9 4889DC                  	mov rsp, rbx
 13257 0000A5FC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13258 0000A600 FFE3                    	jmp rbx
 13259 0000A602 C9                      	leave
 13260 0000A603 C21800                  	ret 8 * (2 + 1)
 13261                                  .L_lambda_simple_end_4f7a:	; new closure is in rax
 13262                                  	assert_closure(rax)
    65 0000A606 803805              <1>  cmp byte [%1], %2
    66 0000A609 0F85259B0000        <1>  jne L_error_incorrect_type
 13263 0000A60F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13264 0000A613 53                      	push rbx
 13265 0000A614 FF7508                  	push RET_ADDR
 13266 0000A617 488B7D18                	mov rdi, COUNT
 13267 0000A61B 4883C703                	add rdi, 3
 13268 0000A61F 48C1E703                	shl rdi, 3
 13269 0000A623 4801EF                  	add rdi, rbp
 13270 0000A626 488B6D00                	mov rbp, OLD_RDP
 13271 0000A62A BE00000000              	mov rsi, 0
 13272                                  .L_tc_recycle_frame_loop_5d0a:	 ; start recycle frame loop
 13273 0000A62F 4883FE04                	cmp rsi, 4
 13274 0000A633 7427                    	je .L_tc_recycle_frame_done_5d0a
 13275 0000A635 B903000000              	mov rcx, 3
 13276 0000A63A 4829F1                  	sub rcx, rsi
 13277 0000A63D 48C1E103                	shl rcx, 3
 13278 0000A641 4801E1                  	add rcx, rsp ; rcx is the address to move
 13279 0000A644 4889F3                  	mov rbx, rsi
 13280 0000A647 48C1E303                	shl rbx, 3
 13281 0000A64B 48F7DB                  	neg rbx
 13282 0000A64E 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13283 0000A651 488B09                  	mov rcx, [rcx]
 13284 0000A654 48890B                  	mov [rbx], rcx
 13285 0000A657 48FFC6                  	inc rsi
 13286 0000A65A EBD3                    	jmp .L_tc_recycle_frame_loop_5d0a
 13287                                  .L_tc_recycle_frame_done_5d0a:	 ; end recycle frame loop
 13288 0000A65C BB03000000              	mov rbx, 3
 13289 0000A661 48C1E303                	shl rbx, 3
 13290 0000A665 48F7DB                  	neg rbx
 13291 0000A668 4801FB                  	add rbx, rdi
 13292 0000A66B 4889DC                  	mov rsp, rbx
 13293 0000A66E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13294 0000A672 FFE3                    	jmp rbx
 13295 0000A674 C9                      	leave
 13296 0000A675 C21800                  	ret 8 * (2 + 1)
 13297                                  .L_lambda_simple_end_4f78:	; new closure is in rax
 13298                                  	assert_closure(rax)
    65 0000A678 803805              <1>  cmp byte [%1], %2
    66 0000A67B 0F85B39A0000        <1>  jne L_error_incorrect_type
 13299 0000A681 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13300 0000A685 53                      	push rbx
 13301 0000A686 FF7508                  	push RET_ADDR
 13302 0000A689 488B7D18                	mov rdi, COUNT
 13303 0000A68D 4883C703                	add rdi, 3
 13304 0000A691 48C1E703                	shl rdi, 3
 13305 0000A695 4801EF                  	add rdi, rbp
 13306 0000A698 488B6D00                	mov rbp, OLD_RDP
 13307 0000A69C BE00000000              	mov rsi, 0
 13308                                  .L_tc_recycle_frame_loop_5d08:	 ; start recycle frame loop
 13309 0000A6A1 4883FE04                	cmp rsi, 4
 13310 0000A6A5 7427                    	je .L_tc_recycle_frame_done_5d08
 13311 0000A6A7 B903000000              	mov rcx, 3
 13312 0000A6AC 4829F1                  	sub rcx, rsi
 13313 0000A6AF 48C1E103                	shl rcx, 3
 13314 0000A6B3 4801E1                  	add rcx, rsp ; rcx is the address to move
 13315 0000A6B6 4889F3                  	mov rbx, rsi
 13316 0000A6B9 48C1E303                	shl rbx, 3
 13317 0000A6BD 48F7DB                  	neg rbx
 13318 0000A6C0 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13319 0000A6C3 488B09                  	mov rcx, [rcx]
 13320 0000A6C6 48890B                  	mov [rbx], rcx
 13321 0000A6C9 48FFC6                  	inc rsi
 13322 0000A6CC EBD3                    	jmp .L_tc_recycle_frame_loop_5d08
 13323                                  .L_tc_recycle_frame_done_5d08:	 ; end recycle frame loop
 13324 0000A6CE BB03000000              	mov rbx, 3
 13325 0000A6D3 48C1E303                	shl rbx, 3
 13326 0000A6D7 48F7DB                  	neg rbx
 13327 0000A6DA 4801FB                  	add rbx, rdi
 13328 0000A6DD 4889DC                  	mov rsp, rbx
 13329 0000A6E0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13330 0000A6E4 FFE3                    	jmp rbx
 13331 0000A6E6 C9                      	leave
 13332 0000A6E7 C21800                  	ret 8 * (2 + 1)
 13333                                  .L_lambda_simple_end_4f76:	; new closure is in rax
 13334                                  	assert_closure(rax)
    65 0000A6EA 803805              <1>  cmp byte [%1], %2
    66 0000A6ED 0F85419A0000        <1>  jne L_error_incorrect_type
 13335 0000A6F3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13336 0000A6F7 53                      	push rbx
 13337 0000A6F8 FF7508                  	push RET_ADDR
 13338 0000A6FB 488B7D18                	mov rdi, COUNT
 13339 0000A6FF 4883C703                	add rdi, 3
 13340 0000A703 48C1E703                	shl rdi, 3
 13341 0000A707 4801EF                  	add rdi, rbp
 13342 0000A70A 488B6D00                	mov rbp, OLD_RDP
 13343 0000A70E BE00000000              	mov rsi, 0
 13344                                  .L_tc_recycle_frame_loop_5d07:	 ; start recycle frame loop
 13345 0000A713 4883FE04                	cmp rsi, 4
 13346 0000A717 7427                    	je .L_tc_recycle_frame_done_5d07
 13347 0000A719 B903000000              	mov rcx, 3
 13348 0000A71E 4829F1                  	sub rcx, rsi
 13349 0000A721 48C1E103                	shl rcx, 3
 13350 0000A725 4801E1                  	add rcx, rsp ; rcx is the address to move
 13351 0000A728 4889F3                  	mov rbx, rsi
 13352 0000A72B 48C1E303                	shl rbx, 3
 13353 0000A72F 48F7DB                  	neg rbx
 13354 0000A732 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13355 0000A735 488B09                  	mov rcx, [rcx]
 13356 0000A738 48890B                  	mov [rbx], rcx
 13357 0000A73B 48FFC6                  	inc rsi
 13358 0000A73E EBD3                    	jmp .L_tc_recycle_frame_loop_5d07
 13359                                  .L_tc_recycle_frame_done_5d07:	 ; end recycle frame loop
 13360 0000A740 BB03000000              	mov rbx, 3
 13361 0000A745 48C1E303                	shl rbx, 3
 13362 0000A749 48F7DB                  	neg rbx
 13363 0000A74C 4801FB                  	add rbx, rdi
 13364 0000A74F 4889DC                  	mov rsp, rbx
 13365 0000A752 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13366 0000A756 FFE3                    	jmp rbx
 13367 0000A758 C9                      	leave
 13368 0000A759 C21800                  	ret 8 * (2 + 1)
 13369                                  .L_lambda_simple_end_4f75:	; new closure is in rax
 13370                                  	assert_closure(rax)
    65 0000A75C 803805              <1>  cmp byte [%1], %2
    66 0000A75F 0F85CF990000        <1>  jne L_error_incorrect_type
 13371 0000A765 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13372 0000A769 53                      	push rbx
 13373 0000A76A FF7508                  	push RET_ADDR
 13374 0000A76D 488B7D18                	mov rdi, COUNT
 13375 0000A771 4883C703                	add rdi, 3
 13376 0000A775 48C1E703                	shl rdi, 3
 13377 0000A779 4801EF                  	add rdi, rbp
 13378 0000A77C 488B6D00                	mov rbp, OLD_RDP
 13379 0000A780 BE00000000              	mov rsi, 0
 13380                                  .L_tc_recycle_frame_loop_5d06:	 ; start recycle frame loop
 13381 0000A785 4883FE04                	cmp rsi, 4
 13382 0000A789 7427                    	je .L_tc_recycle_frame_done_5d06
 13383 0000A78B B903000000              	mov rcx, 3
 13384 0000A790 4829F1                  	sub rcx, rsi
 13385 0000A793 48C1E103                	shl rcx, 3
 13386 0000A797 4801E1                  	add rcx, rsp ; rcx is the address to move
 13387 0000A79A 4889F3                  	mov rbx, rsi
 13388 0000A79D 48C1E303                	shl rbx, 3
 13389 0000A7A1 48F7DB                  	neg rbx
 13390 0000A7A4 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13391 0000A7A7 488B09                  	mov rcx, [rcx]
 13392 0000A7AA 48890B                  	mov [rbx], rcx
 13393 0000A7AD 48FFC6                  	inc rsi
 13394 0000A7B0 EBD3                    	jmp .L_tc_recycle_frame_loop_5d06
 13395                                  .L_tc_recycle_frame_done_5d06:	 ; end recycle frame loop
 13396 0000A7B2 BB03000000              	mov rbx, 3
 13397 0000A7B7 48C1E303                	shl rbx, 3
 13398 0000A7BB 48F7DB                  	neg rbx
 13399 0000A7BE 4801FB                  	add rbx, rdi
 13400 0000A7C1 4889DC                  	mov rsp, rbx
 13401 0000A7C4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13402 0000A7C8 FFE3                    	jmp rbx
 13403 0000A7CA C9                      	leave
 13404 0000A7CB C21800                  	ret 8 * (2 + 1)
 13405                                  .L_lambda_simple_end_4f74:	; new closure is in rax
 13406                                  	assert_closure(rax)
    65 0000A7CE 803805              <1>  cmp byte [%1], %2
    66 0000A7D1 0F855D990000        <1>  jne L_error_incorrect_type
 13407 0000A7D7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13408 0000A7DB 53                      	push rbx
 13409 0000A7DC FF7508                  	push RET_ADDR
 13410 0000A7DF 488B7D18                	mov rdi, COUNT
 13411 0000A7E3 4883C703                	add rdi, 3
 13412 0000A7E7 48C1E703                	shl rdi, 3
 13413 0000A7EB 4801EF                  	add rdi, rbp
 13414 0000A7EE 488B6D00                	mov rbp, OLD_RDP
 13415 0000A7F2 BE00000000              	mov rsi, 0
 13416                                  .L_tc_recycle_frame_loop_5cff:	 ; start recycle frame loop
 13417 0000A7F7 4883FE04                	cmp rsi, 4
 13418 0000A7FB 7427                    	je .L_tc_recycle_frame_done_5cff
 13419 0000A7FD B903000000              	mov rcx, 3
 13420 0000A802 4829F1                  	sub rcx, rsi
 13421 0000A805 48C1E103                	shl rcx, 3
 13422 0000A809 4801E1                  	add rcx, rsp ; rcx is the address to move
 13423 0000A80C 4889F3                  	mov rbx, rsi
 13424 0000A80F 48C1E303                	shl rbx, 3
 13425 0000A813 48F7DB                  	neg rbx
 13426 0000A816 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13427 0000A819 488B09                  	mov rcx, [rcx]
 13428 0000A81C 48890B                  	mov [rbx], rcx
 13429 0000A81F 48FFC6                  	inc rsi
 13430 0000A822 EBD3                    	jmp .L_tc_recycle_frame_loop_5cff
 13431                                  .L_tc_recycle_frame_done_5cff:	 ; end recycle frame loop
 13432 0000A824 BB03000000              	mov rbx, 3
 13433 0000A829 48C1E303                	shl rbx, 3
 13434 0000A82D 48F7DB                  	neg rbx
 13435 0000A830 4801FB                  	add rbx, rdi
 13436 0000A833 4889DC                  	mov rsp, rbx
 13437 0000A836 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13438 0000A83A FFE3                    	jmp rbx
 13439 0000A83C C9                      	leave
 13440 0000A83D C21800                  	ret 8 * (2 + 1)
 13441                                  .L_lambda_simple_end_4f71:	; new closure is in rax
 13442                                  	assert_closure(rax)
    65 0000A840 803805              <1>  cmp byte [%1], %2
    66 0000A843 0F85EB980000        <1>  jne L_error_incorrect_type
 13443 0000A849 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13444 0000A84D 53                      	push rbx
 13445 0000A84E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13446 0000A852 FFD3                    	call rbx
 13447                                  
 13448 0000A854 4889C7                  	mov rdi, rax
 13449 0000A857 E869800000              	call print_sexpr_if_not_void
 13450                                  
 13451 0000A85C 488D0425[17000000]      	lea rax, [23 + L_constants]
 13452 0000A864 50                      	push rax
 13453 0000A865 6A01                    	push 1
 13454 0000A867 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13455 0000A86C E843800000              	call malloc
 13456 0000A871 50                      	push rax
 13457 0000A872 BF00000000              	mov rdi, 8 * 0	; new rib
 13458 0000A877 E838800000              	call malloc
 13459 0000A87C 50                      	push rax
 13460 0000A87D BF08000000              	mov rdi, 8 * 1	; extended env
 13461 0000A882 E82D800000              	call malloc
 13462 0000A887 488B7D10                	mov rdi, ENV
 13463 0000A88B BE00000000              	mov rsi, 0
 13464 0000A890 BA01000000              	mov rdx, 1
 13465                                  .L_lambda_simple_env_loop_4f81:	; ext_env[i + 1] <-- env[i]
 13466 0000A895 4883FE00                	cmp rsi, 0
 13467 0000A899 7410                    	je .L_lambda_simple_env_end_4f81
 13468 0000A89B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 13469 0000A89F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13470 0000A8A3 48FFC6                  	inc rsi
 13471 0000A8A6 48FFC2                  	inc rdx
 13472 0000A8A9 EBEA                    	jmp .L_lambda_simple_env_loop_4f81
 13473                                  .L_lambda_simple_env_end_4f81:
 13474 0000A8AB 5B                      	pop rbx
 13475 0000A8AC BE00000000              	mov rsi, 0
 13476                                  .L_lambda_simple_params_loop_4f81:	; copy params
 13477 0000A8B1 4883FE00                	cmp rsi, 0
 13478 0000A8B5 740E                    	je .L_lambda_simple_params_end_4f81
 13479 0000A8B7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13480 0000A8BC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13481 0000A8C0 48FFC6                  	inc rsi
 13482 0000A8C3 EBEC                    	jmp .L_lambda_simple_params_loop_4f81
 13483                                  .L_lambda_simple_params_end_4f81:
 13484 0000A8C5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13485 0000A8C8 4889C3                  	mov rbx, rax
 13486 0000A8CB 58                      	pop rax
 13487 0000A8CC C60005                  	mov byte [rax], T_closure
 13488 0000A8CF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13489 0000A8D3 48C74009[E0A80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f81
 13490 0000A8DB E928060000              	jmp .L_lambda_simple_end_4f81
 13491                                  .L_lambda_simple_code_4f81:	; lambda-simple body
 13492 0000A8E0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13493 0000A8E6 740B                    	je .L_lambda_simple_arity_check_ok_4f81
 13494 0000A8E8 FF742410                	push qword [rsp + 8 * 2]
 13495 0000A8EC 6A01                    	push 1
 13496 0000A8EE E97A7F0000              	jmp L_error_incorrect_arity_simple
 13497                                  .L_lambda_simple_arity_check_ok_4f81:
 13498 0000A8F3 C8000000                	enter 0, 0
 13499 0000A8F7 BF11000000              	mov qword rdi, (1 + 8 + 8)
 13500 0000A8FC E8B37F0000              	call malloc
 13501 0000A901 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 13502 0000A905 48B8-                   	mov rax, sob_void
 13502 0000A907 [0000000000000000] 
 13503                                  
 13504 0000A90F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13505 0000A914 E89B7F0000              	call malloc
 13506 0000A919 50                      	push rax
 13507 0000A91A BF08000000              	mov rdi, 8 * 1	; new rib
 13508 0000A91F E8907F0000              	call malloc
 13509 0000A924 50                      	push rax
 13510 0000A925 BF10000000              	mov rdi, 8 * 2	; extended env
 13511 0000A92A E8857F0000              	call malloc
 13512 0000A92F 488B7D10                	mov rdi, ENV
 13513 0000A933 BE00000000              	mov rsi, 0
 13514 0000A938 BA01000000              	mov rdx, 1
 13515                                  .L_lambda_simple_env_loop_4f82:	; ext_env[i + 1] <-- env[i]
 13516 0000A93D 4883FE01                	cmp rsi, 1
 13517 0000A941 7410                    	je .L_lambda_simple_env_end_4f82
 13518 0000A943 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 13519 0000A947 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13520 0000A94B 48FFC6                  	inc rsi
 13521 0000A94E 48FFC2                  	inc rdx
 13522 0000A951 EBEA                    	jmp .L_lambda_simple_env_loop_4f82
 13523                                  .L_lambda_simple_env_end_4f82:
 13524 0000A953 5B                      	pop rbx
 13525 0000A954 BE00000000              	mov rsi, 0
 13526                                  .L_lambda_simple_params_loop_4f82:	; copy params
 13527 0000A959 4883FE01                	cmp rsi, 1
 13528 0000A95D 740E                    	je .L_lambda_simple_params_end_4f82
 13529 0000A95F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13530 0000A964 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13531 0000A968 48FFC6                  	inc rsi
 13532 0000A96B EBEC                    	jmp .L_lambda_simple_params_loop_4f82
 13533                                  .L_lambda_simple_params_end_4f82:
 13534 0000A96D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13535 0000A970 4889C3                  	mov rbx, rax
 13536 0000A973 58                      	pop rax
 13537 0000A974 C60005                  	mov byte [rax], T_closure
 13538 0000A977 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13539 0000A97B 48C74009[88A90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f82
 13540 0000A983 E926010000              	jmp .L_lambda_simple_end_4f82
 13541                                  .L_lambda_simple_code_4f82:	; lambda-simple body
 13542 0000A988 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13543 0000A98E 740B                    	je .L_lambda_simple_arity_check_ok_4f82
 13544 0000A990 FF742410                	push qword [rsp + 8 * 2]
 13545 0000A994 6A02                    	push 2
 13546 0000A996 E9D27E0000              	jmp L_error_incorrect_arity_simple
 13547                                  .L_lambda_simple_arity_check_ok_4f82:
 13548 0000A99B C8000000                	enter 0, 0
 13549 0000A99F 488B4520                	mov rax, PARAM(0)
 13550 0000A9A3 50                      	push rax
 13551 0000A9A4 6A01                    	push 1
 13552 0000A9A6 488B0425[D8000000]      	mov rax, qword [free_var_27]
 13553                                  	assert_closure(rax)
    65 0000A9AE 803805              <1>  cmp byte [%1], %2
    66 0000A9B1 0F857D970000        <1>  jne L_error_incorrect_type
 13554 0000A9B7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13555 0000A9BB 53                      	push rbx
 13556 0000A9BC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13557 0000A9C0 FFD3                    	call rbx
 13558 0000A9C2 483D[02000000]          	cmp rax, sob_boolean_false
 13559 0000A9C8 740D                    	je .L_if_else_56ae
 13560 0000A9CA 488D0425[01000000]      	lea rax, [1 + L_constants]
 13561 0000A9D2 E9D3000000              	jmp .L_if_end_56ae
 13562                                  	.L_if_else_56ae:
 13563 0000A9D7 488B4528                	mov rax, PARAM(1)
 13564 0000A9DB 50                      	push rax
 13565 0000A9DC 488D0425[80000000]      	lea rax, [128 + L_constants]
 13566 0000A9E4 50                      	push rax
 13567 0000A9E5 488B4520                	mov rax, PARAM(0)
 13568 0000A9E9 50                      	push rax
 13569 0000A9EA 6A02                    	push 2
 13570 0000A9EC 488B0425[10030000]      	mov rax, qword [free_var_98]
 13571                                  	assert_closure(rax)
    65 0000A9F4 803805              <1>  cmp byte [%1], %2
    66 0000A9F7 0F8537970000        <1>  jne L_error_incorrect_type
 13572 0000A9FD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13573 0000AA01 53                      	push rbx
 13574 0000AA02 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13575 0000AA06 FFD3                    	call rbx
 13576 0000AA08 50                      	push rax
 13577 0000AA09 6A02                    	push 2
 13578 0000AA0B 488B4510                	mov rax, qword [rbp + 8*2]
 13579 0000AA0F 488B00                  	mov rax, qword [rax + 8*0]
 13580 0000AA12 488B00                  	mov rax, qword [rax + 8*0]
 13581 0000AA15 488B00                  	mov rax, qword [rax]
 13582                                  	assert_closure(rax)
    65 0000AA18 803805              <1>  cmp byte [%1], %2
    66 0000AA1B 0F8513970000        <1>  jne L_error_incorrect_type
 13583 0000AA21 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13584 0000AA25 53                      	push rbx
 13585 0000AA26 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13586 0000AA2A FFD3                    	call rbx
 13587 0000AA2C 50                      	push rax
 13588 0000AA2D 488B4528                	mov rax, PARAM(1)
 13589 0000AA31 50                      	push rax
 13590 0000AA32 6A02                    	push 2
 13591 0000AA34 488B0425[68000000]      	mov rax, qword [free_var_13]
 13592                                  	assert_closure(rax)
    65 0000AA3C 803805              <1>  cmp byte [%1], %2
    66 0000AA3F 0F85EF960000        <1>  jne L_error_incorrect_type
 13593 0000AA45 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13594 0000AA49 53                      	push rbx
 13595 0000AA4A FF7508                  	push RET_ADDR
 13596 0000AA4D 488B7D18                	mov rdi, COUNT
 13597 0000AA51 4883C703                	add rdi, 3
 13598 0000AA55 48C1E703                	shl rdi, 3
 13599 0000AA59 4801EF                  	add rdi, rbp
 13600 0000AA5C 488B6D00                	mov rbp, OLD_RDP
 13601 0000AA60 BE00000000              	mov rsi, 0
 13602                                  .L_tc_recycle_frame_loop_5d12:	 ; start recycle frame loop
 13603 0000AA65 4883FE05                	cmp rsi, 5
 13604 0000AA69 7427                    	je .L_tc_recycle_frame_done_5d12
 13605 0000AA6B B904000000              	mov rcx, 4
 13606 0000AA70 4829F1                  	sub rcx, rsi
 13607 0000AA73 48C1E103                	shl rcx, 3
 13608 0000AA77 4801E1                  	add rcx, rsp ; rcx is the address to move
 13609 0000AA7A 4889F3                  	mov rbx, rsi
 13610 0000AA7D 48C1E303                	shl rbx, 3
 13611 0000AA81 48F7DB                  	neg rbx
 13612 0000AA84 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13613 0000AA87 488B09                  	mov rcx, [rcx]
 13614 0000AA8A 48890B                  	mov [rbx], rcx
 13615 0000AA8D 48FFC6                  	inc rsi
 13616 0000AA90 EBD3                    	jmp .L_tc_recycle_frame_loop_5d12
 13617                                  .L_tc_recycle_frame_done_5d12:	 ; end recycle frame loop
 13618 0000AA92 BB04000000              	mov rbx, 4
 13619 0000AA97 48C1E303                	shl rbx, 3
 13620 0000AA9B 48F7DB                  	neg rbx
 13621 0000AA9E 4801FB                  	add rbx, rdi
 13622 0000AAA1 4889DC                  	mov rsp, rbx
 13623 0000AAA4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13624 0000AAA8 FFE3                    	jmp rbx
 13625                                  	.L_if_end_56ae:
 13626 0000AAAA C9                      	leave
 13627 0000AAAB C22000                  	ret 8 * (2 + 2)
 13628                                  .L_lambda_simple_end_4f82:	; new closure is in rax
 13629 0000AAAE 50                      	push rax
 13630 0000AAAF 488B4520                	mov rax, PARAM(0)
 13631 0000AAB3 8F00                    	pop qword [rax]
 13632 0000AAB5 48B8-                   	mov rax, sob_void
 13632 0000AAB7 [0000000000000000] 
 13633                                  
 13634 0000AABF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13635 0000AAC4 E8EB7D0000              	call malloc
 13636 0000AAC9 50                      	push rax
 13637 0000AACA BF08000000              	mov rdi, 8 * 1	; new rib
 13638 0000AACF E8E07D0000              	call malloc
 13639 0000AAD4 50                      	push rax
 13640 0000AAD5 BF10000000              	mov rdi, 8 * 2	; extended env
 13641 0000AADA E8D57D0000              	call malloc
 13642 0000AADF 488B7D10                	mov rdi, ENV
 13643 0000AAE3 BE00000000              	mov rsi, 0
 13644 0000AAE8 BA01000000              	mov rdx, 1
 13645                                  .L_lambda_opt_env_loop_0c93:	; ext_env[i + 1] <-- env[i]
 13646 0000AAED 4883FE01                	cmp rsi, 1
 13647 0000AAF1 7410                    	je .L_lambda_opt_env_end_0c93
 13648 0000AAF3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 13649 0000AAF7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13650 0000AAFB 48FFC6                  	inc rsi
 13651 0000AAFE 48FFC2                  	inc rdx
 13652 0000AB01 EBEA                    	jmp .L_lambda_opt_env_loop_0c93
 13653                                  .L_lambda_opt_env_end_0c93:
 13654 0000AB03 5B                      	pop rbx
 13655 0000AB04 BE00000000              	mov rsi, 0
 13656                                  .L_lambda_opt_params_loop_0c93:	; copy params
 13657 0000AB09 4883FE01                	cmp rsi, 1
 13658 0000AB0D 740E                    	je .L_lambda_opt_params_end_0c93
 13659 0000AB0F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13660 0000AB14 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13661 0000AB18 48FFC6                  	inc rsi
 13662 0000AB1B EBEC                    	jmp .L_lambda_opt_params_loop_0c93
 13663                                  .L_lambda_opt_params_end_0c93:
 13664 0000AB1D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13665 0000AB20 4889C3                  	mov rbx, rax
 13666 0000AB23 58                      	pop rax
 13667 0000AB24 C60005                  	mov byte [rax], T_closure
 13668 0000AB27 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13669 0000AB2B 48C74009[38AB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c93
 13670 0000AB33 E9CC030000              	jmp .L_lambda_opt_end_0c93
 13671                                  .L_lambda_opt_code_0c93:	; lambda-opt body
 13672 0000AB38 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 13673 0000AB3D 4889FB                  	mov rbx, rdi
 13674 0000AB40 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 13675 0000AB44 4883FB00                	cmp rbx, 0
 13676 0000AB48 7F45                    	jg .L_lambda_opt_arity_check_more_0c93
 13677                                  .L_lambda_opt_arity_check_exact_0c93:	 ; if params in opt is exact
 13678 0000AB4A 4883EC08                	sub rsp, 8
 13679 0000AB4E BE00000000              	mov rsi, 0 ; index
 13680                                  .L_lambda_opt_stack_enlarge_loop_0c93:	 ; stack loop enlarge start
 13681 0000AB53 4883FE04                	cmp rsi, 4
 13682 0000AB57 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c93
 13683 0000AB59 4889F7                  	mov rdi, rsi
 13684 0000AB5C 48FFC7                  	inc rdi
 13685 0000AB5F 48C1E703                	shl rdi, 3
 13686 0000AB63 4801E7                  	add rdi, rsp
 13687 0000AB66 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 13688 0000AB69 4883EB08                	sub rbx, 8
 13689 0000AB6D 488B3F                  	mov rdi, [rdi]
 13690 0000AB70 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 13691 0000AB73 48FFC6                  	inc rsi
 13692 0000AB76 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c93
 13693                                  .L_lambda_opt_stack_enlarge_loop_exit_0c93:	 ; end of stack enlarge loop
 13694 0000AB78 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 13694 0000AB7D [01000000]         
 13695 0000AB81 48C744241002000000      	mov qword [rsp + 2*8], 2
 13696 0000AB8A E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c93
 13697                                  .L_lambda_opt_arity_check_more_0c93:	 ; if params in opt is more
 13698 0000AB8F 48B8-                   	mov rax, sob_nil
 13698 0000AB91 [0100000000000000] 
 13699 0000AB99 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 13700 0000AB9C 48FFCE                  	dec rsi
 13701                                  .L_lambda_opt_list_create_loop_0c93:	; start of list creation loop
 13702 0000AB9F 4883FEFF                	cmp rsi, -1
 13703 0000ABA3 7422                    	je .L_lambda_opt_list_create_loop_exit_0c93
 13704 0000ABA5 488D4E04                	lea rcx, [rsi + (3 + 1)]
 13705 0000ABA9 48C1E103                	shl rcx, 3
 13706 0000ABAD 4801E1                  	add rcx, rsp
 13707 0000ABB0 488B09                  	mov rcx, [rcx]
 13708 0000ABB3 56                      	push rsi ; save params
 13709 0000ABB4 53                      	push rbx
 13710                                  
 13711 0000ABB5 50                      	push rax ; cdr
 13712 0000ABB6 51                      	push rcx ; car
 13713 0000ABB7 6A02                    	push qword 2 ; push num of args
 13714 0000ABB9 6A01                    	push qword 1 ; push garbage as env
 13715 0000ABBB E87B860000              	call L_code_ptr_cons
 13716                                  
 13717 0000ABC0 5B                      	pop rbx ; restore params
 13718 0000ABC1 5E                      	pop rsi
 13719 0000ABC2 48FFCE                  	dec rsi
 13720 0000ABC5 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c93
 13721                                  .L_lambda_opt_list_create_loop_exit_0c93:	; end of list creation loop
 13722 0000ABC7 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 13723 0000ABCC 4883C302                	add rbx, 2
 13724 0000ABD0 4889DF                  	mov rdi, rbx
 13725 0000ABD3 48C1E703                	shl rdi,3
 13726 0000ABD7 4801E7                  	add rdi, rsp
 13727 0000ABDA 488907                  	mov [rdi], rax
 13728 0000ABDD BE00000000              	mov rsi, 0 ;index
 13729                                  .L_lambda_opt_stack_shrink_loop_0c93:	; start of stack shrink loop
 13730 0000ABE2 4883FE04                	cmp rsi, 4
 13731 0000ABE6 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c93
 13732 0000ABE8 BF03000000              	mov rdi, 3
 13733 0000ABED 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 13734 0000ABF0 4889D9                  	mov rcx, rbx
 13735 0000ABF3 4829F1                  	sub rcx, rsi
 13736 0000ABF6 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 13737 0000ABF9 4889FA                  	mov rdx, rdi
 13738 0000ABFC 48C1E203                	shl rdx, 3
 13739 0000AC00 4801E2                  	add rdx, rsp
 13740 0000AC03 48C1E103                	shl rcx, 3
 13741 0000AC07 4801E1                  	add rcx, rsp
 13742 0000AC0A 488B12                  	mov rdx, [rdx]
 13743 0000AC0D 488911                  	mov [rcx], rdx
 13744 0000AC10 48FFC6                  	inc rsi
 13745 0000AC13 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c93
 13746                                  .L_lambda_opt_stack_shrink_loop_exit_0c93:	; end of stack shrink loop
 13747 0000AC15 4883EB02                	sub rbx, 2 ; rbx has number of args
 13748 0000AC19 4883EB02                	sub rbx, 2
 13749 0000AC1D 48C1E303                	shl rbx, 3
 13750 0000AC21 4801DC                  	add rsp, rbx
 13751 0000AC24 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 13752                                  .L_lambda_opt_stack_adjusted_0c93:
 13753 0000AC2D C8000000                	enter 0, 0
 13754 0000AC31 488B4528                	mov rax, PARAM(1)
 13755 0000AC35 50                      	push rax
 13756 0000AC36 6A01                    	push 1
 13757 0000AC38 488B0425[00000000]      	mov rax, qword [free_var_0]
 13758                                  	assert_closure(rax)
    65 0000AC40 803805              <1>  cmp byte [%1], %2
    66 0000AC43 0F85EB940000        <1>  jne L_error_incorrect_type
 13759 0000AC49 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13760 0000AC4D 53                      	push rbx
 13761 0000AC4E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13762 0000AC52 FFD3                    	call rbx
 13763 0000AC54 483D[02000000]          	cmp rax, sob_boolean_false
 13764 0000AC5A 0F8490000000            	je .L_if_else_56af
 13765 0000AC60 488D0425[04000000]      	lea rax, [4 + L_constants]
 13766 0000AC68 50                      	push rax
 13767 0000AC69 488B4520                	mov rax, PARAM(0)
 13768 0000AC6D 50                      	push rax
 13769 0000AC6E 6A02                    	push 2
 13770 0000AC70 488B4510                	mov rax, qword [rbp + 8*2]
 13771 0000AC74 488B00                  	mov rax, qword [rax + 8*0]
 13772 0000AC77 488B00                  	mov rax, qword [rax + 8*0]
 13773 0000AC7A 488B00                  	mov rax, qword [rax]
 13774                                  	assert_closure(rax)
    65 0000AC7D 803805              <1>  cmp byte [%1], %2
    66 0000AC80 0F85AE940000        <1>  jne L_error_incorrect_type
 13775 0000AC86 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13776 0000AC8A 53                      	push rbx
 13777 0000AC8B FF7508                  	push RET_ADDR
 13778 0000AC8E 488B7D18                	mov rdi, COUNT
 13779 0000AC92 4883C703                	add rdi, 3
 13780 0000AC96 48C1E703                	shl rdi, 3
 13781 0000AC9A 4801EF                  	add rdi, rbp
 13782 0000AC9D 488B6D00                	mov rbp, OLD_RDP
 13783 0000ACA1 BE00000000              	mov rsi, 0
 13784                                  .L_tc_recycle_frame_loop_5d13:	 ; start recycle frame loop
 13785 0000ACA6 4883FE05                	cmp rsi, 5
 13786 0000ACAA 7427                    	je .L_tc_recycle_frame_done_5d13
 13787 0000ACAC B904000000              	mov rcx, 4
 13788 0000ACB1 4829F1                  	sub rcx, rsi
 13789 0000ACB4 48C1E103                	shl rcx, 3
 13790 0000ACB8 4801E1                  	add rcx, rsp ; rcx is the address to move
 13791 0000ACBB 4889F3                  	mov rbx, rsi
 13792 0000ACBE 48C1E303                	shl rbx, 3
 13793 0000ACC2 48F7DB                  	neg rbx
 13794 0000ACC5 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13795 0000ACC8 488B09                  	mov rcx, [rcx]
 13796 0000ACCB 48890B                  	mov [rbx], rcx
 13797 0000ACCE 48FFC6                  	inc rsi
 13798 0000ACD1 EBD3                    	jmp .L_tc_recycle_frame_loop_5d13
 13799                                  .L_tc_recycle_frame_done_5d13:	 ; end recycle frame loop
 13800 0000ACD3 BB04000000              	mov rbx, 4
 13801 0000ACD8 48C1E303                	shl rbx, 3
 13802 0000ACDC 48F7DB                  	neg rbx
 13803 0000ACDF 4801FB                  	add rbx, rdi
 13804 0000ACE2 4889DC                  	mov rsp, rbx
 13805 0000ACE5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13806 0000ACE9 FFE3                    	jmp rbx
 13807 0000ACEB E910020000              	jmp .L_if_end_56af
 13808                                  	.L_if_else_56af:
 13809 0000ACF0 488B4528                	mov rax, PARAM(1)
 13810 0000ACF4 50                      	push rax
 13811 0000ACF5 6A01                    	push 1
 13812 0000ACF7 488B0425[08000000]      	mov rax, qword [free_var_1]
 13813                                  	assert_closure(rax)
    65 0000ACFF 803805              <1>  cmp byte [%1], %2
    66 0000AD02 0F852C940000        <1>  jne L_error_incorrect_type
 13814 0000AD08 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13815 0000AD0C 53                      	push rbx
 13816 0000AD0D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13817 0000AD11 FFD3                    	call rbx
 13818 0000AD13 483D[02000000]          	cmp rax, sob_boolean_false
 13819 0000AD19 0F8498000000            	je .L_if_else_56b1
 13820 0000AD1F 488B4528                	mov rax, PARAM(1)
 13821 0000AD23 50                      	push rax
 13822 0000AD24 6A01                    	push 1
 13823 0000AD26 488B0425[88000000]      	mov rax, qword [free_var_17]
 13824                                  	assert_closure(rax)
    65 0000AD2E 803805              <1>  cmp byte [%1], %2
    66 0000AD31 0F85FD930000        <1>  jne L_error_incorrect_type
 13825 0000AD37 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13826 0000AD3B 53                      	push rbx
 13827 0000AD3C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13828 0000AD40 FFD3                    	call rbx
 13829 0000AD42 50                      	push rax
 13830 0000AD43 6A01                    	push 1
 13831 0000AD45 488B0425[00000000]      	mov rax, qword [free_var_0]
 13832                                  	assert_closure(rax)
    65 0000AD4D 803805              <1>  cmp byte [%1], %2
    66 0000AD50 0F85DE930000        <1>  jne L_error_incorrect_type
 13833 0000AD56 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13834 0000AD5A 53                      	push rbx
 13835 0000AD5B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13836 0000AD5F FFD3                    	call rbx
 13837 0000AD61 483D[02000000]          	cmp rax, sob_boolean_false
 13838 0000AD67 7444                    	je .L_if_else_56b2
 13839 0000AD69 488B4528                	mov rax, PARAM(1)
 13840 0000AD6D 50                      	push rax
 13841 0000AD6E 6A01                    	push 1
 13842 0000AD70 488B0425[80000000]      	mov rax, qword [free_var_16]
 13843                                  	assert_closure(rax)
    65 0000AD78 803805              <1>  cmp byte [%1], %2
    66 0000AD7B 0F85B3930000        <1>  jne L_error_incorrect_type
 13844 0000AD81 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13845 0000AD85 53                      	push rbx
 13846 0000AD86 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13847 0000AD8A FFD3                    	call rbx
 13848 0000AD8C 50                      	push rax
 13849 0000AD8D 6A01                    	push 1
 13850 0000AD8F 488B0425[18000000]      	mov rax, qword [free_var_3]
 13851                                  	assert_closure(rax)
    65 0000AD97 803805              <1>  cmp byte [%1], %2
    66 0000AD9A 0F8594930000        <1>  jne L_error_incorrect_type
 13852 0000ADA0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13853 0000ADA4 53                      	push rbx
 13854 0000ADA5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13855 0000ADA9 FFD3                    	call rbx
 13856 0000ADAB EB08                    	jmp .L_if_end_56b2
 13857                                  	.L_if_else_56b2:
 13858 0000ADAD 488D0425[02000000]      	lea rax, [2 + L_constants]
 13859                                  	.L_if_end_56b2:
 13860 0000ADB5 EB08                    	jmp .L_if_end_56b1
 13861                                  	.L_if_else_56b1:
 13862 0000ADB7 488D0425[02000000]      	lea rax, [2 + L_constants]
 13863                                  	.L_if_end_56b1:
 13864 0000ADBF 483D[02000000]          	cmp rax, sob_boolean_false
 13865 0000ADC5 0F84AB000000            	je .L_if_else_56b0
 13866 0000ADCB 488B4528                	mov rax, PARAM(1)
 13867 0000ADCF 50                      	push rax
 13868 0000ADD0 6A01                    	push 1
 13869 0000ADD2 488B0425[80000000]      	mov rax, qword [free_var_16]
 13870                                  	assert_closure(rax)
    65 0000ADDA 803805              <1>  cmp byte [%1], %2
    66 0000ADDD 0F8551930000        <1>  jne L_error_incorrect_type
 13871 0000ADE3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13872 0000ADE7 53                      	push rbx
 13873 0000ADE8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13874 0000ADEC FFD3                    	call rbx
 13875 0000ADEE 50                      	push rax
 13876 0000ADEF 488B4520                	mov rax, PARAM(0)
 13877 0000ADF3 50                      	push rax
 13878 0000ADF4 6A02                    	push 2
 13879 0000ADF6 488B4510                	mov rax, qword [rbp + 8*2]
 13880 0000ADFA 488B00                  	mov rax, qword [rax + 8*0]
 13881 0000ADFD 488B00                  	mov rax, qword [rax + 8*0]
 13882 0000AE00 488B00                  	mov rax, qword [rax]
 13883                                  	assert_closure(rax)
    65 0000AE03 803805              <1>  cmp byte [%1], %2
    66 0000AE06 0F8528930000        <1>  jne L_error_incorrect_type
 13884 0000AE0C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13885 0000AE10 53                      	push rbx
 13886 0000AE11 FF7508                  	push RET_ADDR
 13887 0000AE14 488B7D18                	mov rdi, COUNT
 13888 0000AE18 4883C703                	add rdi, 3
 13889 0000AE1C 48C1E703                	shl rdi, 3
 13890 0000AE20 4801EF                  	add rdi, rbp
 13891 0000AE23 488B6D00                	mov rbp, OLD_RDP
 13892 0000AE27 BE00000000              	mov rsi, 0
 13893                                  .L_tc_recycle_frame_loop_5d14:	 ; start recycle frame loop
 13894 0000AE2C 4883FE05                	cmp rsi, 5
 13895 0000AE30 7427                    	je .L_tc_recycle_frame_done_5d14
 13896 0000AE32 B904000000              	mov rcx, 4
 13897 0000AE37 4829F1                  	sub rcx, rsi
 13898 0000AE3A 48C1E103                	shl rcx, 3
 13899 0000AE3E 4801E1                  	add rcx, rsp ; rcx is the address to move
 13900 0000AE41 4889F3                  	mov rbx, rsi
 13901 0000AE44 48C1E303                	shl rbx, 3
 13902 0000AE48 48F7DB                  	neg rbx
 13903 0000AE4B 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13904 0000AE4E 488B09                  	mov rcx, [rcx]
 13905 0000AE51 48890B                  	mov [rbx], rcx
 13906 0000AE54 48FFC6                  	inc rsi
 13907 0000AE57 EBD3                    	jmp .L_tc_recycle_frame_loop_5d14
 13908                                  .L_tc_recycle_frame_done_5d14:	 ; end recycle frame loop
 13909 0000AE59 BB04000000              	mov rbx, 4
 13910 0000AE5E 48C1E303                	shl rbx, 3
 13911 0000AE62 48F7DB                  	neg rbx
 13912 0000AE65 4801FB                  	add rbx, rdi
 13913 0000AE68 4889DC                  	mov rsp, rbx
 13914 0000AE6B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13915 0000AE6F FFE3                    	jmp rbx
 13916 0000AE71 E98A000000              	jmp .L_if_end_56b0
 13917                                  	.L_if_else_56b0:
 13918 0000AE76 488D0425[20010000]      	lea rax, [288 + L_constants]
 13919 0000AE7E 50                      	push rax
 13920 0000AE7F 488D0425[17010000]      	lea rax, [279 + L_constants]
 13921 0000AE87 50                      	push rax
 13922 0000AE88 6A02                    	push 2
 13923 0000AE8A 488B0425[30010000]      	mov rax, qword [free_var_38]
 13924                                  	assert_closure(rax)
    65 0000AE92 803805              <1>  cmp byte [%1], %2
    66 0000AE95 0F8599920000        <1>  jne L_error_incorrect_type
 13925 0000AE9B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13926 0000AE9F 53                      	push rbx
 13927 0000AEA0 FF7508                  	push RET_ADDR
 13928 0000AEA3 488B7D18                	mov rdi, COUNT
 13929 0000AEA7 4883C703                	add rdi, 3
 13930 0000AEAB 48C1E703                	shl rdi, 3
 13931 0000AEAF 4801EF                  	add rdi, rbp
 13932 0000AEB2 488B6D00                	mov rbp, OLD_RDP
 13933 0000AEB6 BE00000000              	mov rsi, 0
 13934                                  .L_tc_recycle_frame_loop_5d15:	 ; start recycle frame loop
 13935 0000AEBB 4883FE05                	cmp rsi, 5
 13936 0000AEBF 7427                    	je .L_tc_recycle_frame_done_5d15
 13937 0000AEC1 B904000000              	mov rcx, 4
 13938 0000AEC6 4829F1                  	sub rcx, rsi
 13939 0000AEC9 48C1E103                	shl rcx, 3
 13940 0000AECD 4801E1                  	add rcx, rsp ; rcx is the address to move
 13941 0000AED0 4889F3                  	mov rbx, rsi
 13942 0000AED3 48C1E303                	shl rbx, 3
 13943 0000AED7 48F7DB                  	neg rbx
 13944 0000AEDA 4801FB                  	add rbx, rdi ;rbx is the address to move to
 13945 0000AEDD 488B09                  	mov rcx, [rcx]
 13946 0000AEE0 48890B                  	mov [rbx], rcx
 13947 0000AEE3 48FFC6                  	inc rsi
 13948 0000AEE6 EBD3                    	jmp .L_tc_recycle_frame_loop_5d15
 13949                                  .L_tc_recycle_frame_done_5d15:	 ; end recycle frame loop
 13950 0000AEE8 BB04000000              	mov rbx, 4
 13951 0000AEED 48C1E303                	shl rbx, 3
 13952 0000AEF1 48F7DB                  	neg rbx
 13953 0000AEF4 4801FB                  	add rbx, rdi
 13954 0000AEF7 4889DC                  	mov rsp, rbx
 13955 0000AEFA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13956 0000AEFE FFE3                    	jmp rbx
 13957                                  	.L_if_end_56b0:
 13958                                  	.L_if_end_56af:
 13959 0000AF00 C9                      	leave
 13960 0000AF01 C22000                  	ret AND_KILL_FRAME(2)
 13961                                  .L_lambda_opt_end_0c93:	; new closure is in rax
 13962 0000AF04 C9                      	leave
 13963 0000AF05 C21800                  	ret 8 * (2 + 1)
 13964                                  .L_lambda_simple_end_4f81:	; new closure is in rax
 13965                                  	assert_closure(rax)
    65 0000AF08 803805              <1>  cmp byte [%1], %2
    66 0000AF0B 0F8523920000        <1>  jne L_error_incorrect_type
 13966 0000AF11 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13967 0000AF15 53                      	push rbx
 13968 0000AF16 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13969 0000AF1A FFD3                    	call rbx
 13970 0000AF1C 48890425[58030000]      	mov qword [free_var_107], rax
 13971 0000AF24 48B8-                   	mov rax, sob_void
 13971 0000AF26 [0000000000000000] 
 13972                                  
 13973 0000AF2E 4889C7                  	mov rdi, rax
 13974 0000AF31 E88F790000              	call print_sexpr_if_not_void
 13975                                  
 13976 0000AF36 488D0425[00000000]      	lea rax, [0 + L_constants]
 13977 0000AF3E 48890425[60030000]      	mov qword [free_var_108], rax
 13978 0000AF46 48B8-                   	mov rax, sob_void
 13978 0000AF48 [0000000000000000] 
 13979                                  
 13980 0000AF50 4889C7                  	mov rdi, rax
 13981 0000AF53 E86D790000              	call print_sexpr_if_not_void
 13982                                  
 13983 0000AF58 488D0425[00000000]      	lea rax, [0 + L_constants]
 13984 0000AF60 48890425[68030000]      	mov qword [free_var_109], rax
 13985 0000AF68 48B8-                   	mov rax, sob_void
 13985 0000AF6A [0000000000000000] 
 13986                                  
 13987 0000AF72 4889C7                  	mov rdi, rax
 13988 0000AF75 E84B790000              	call print_sexpr_if_not_void
 13989                                  
 13990 0000AF7A 488D0425[00000000]      	lea rax, [0 + L_constants]
 13991 0000AF82 48890425[70030000]      	mov qword [free_var_110], rax
 13992 0000AF8A 48B8-                   	mov rax, sob_void
 13992 0000AF8C [0000000000000000] 
 13993                                  
 13994 0000AF94 4889C7                  	mov rdi, rax
 13995 0000AF97 E829790000              	call print_sexpr_if_not_void
 13996                                  
 13997 0000AF9C 488D0425[00000000]      	lea rax, [0 + L_constants]
 13998 0000AFA4 48890425[78030000]      	mov qword [free_var_111], rax
 13999 0000AFAC 48B8-                   	mov rax, sob_void
 13999 0000AFAE [0000000000000000] 
 14000                                  
 14001 0000AFB6 4889C7                  	mov rdi, rax
 14002 0000AFB9 E807790000              	call print_sexpr_if_not_void
 14003                                  
 14004 0000AFBE 488D0425[00000000]      	lea rax, [0 + L_constants]
 14005 0000AFC6 48890425[80030000]      	mov qword [free_var_112], rax
 14006 0000AFCE 48B8-                   	mov rax, sob_void
 14006 0000AFD0 [0000000000000000] 
 14007                                  
 14008 0000AFD8 4889C7                  	mov rdi, rax
 14009 0000AFDB E8E5780000              	call print_sexpr_if_not_void
 14010                                  
 14011 0000AFE0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14012 0000AFE5 E8CA780000              	call malloc
 14013 0000AFEA 50                      	push rax
 14014 0000AFEB BF00000000              	mov rdi, 8 * 0	; new rib
 14015 0000AFF0 E8BF780000              	call malloc
 14016 0000AFF5 50                      	push rax
 14017 0000AFF6 BF08000000              	mov rdi, 8 * 1	; extended env
 14018 0000AFFB E8B4780000              	call malloc
 14019 0000B000 488B7D10                	mov rdi, ENV
 14020 0000B004 BE00000000              	mov rsi, 0
 14021 0000B009 BA01000000              	mov rdx, 1
 14022                                  .L_lambda_simple_env_loop_4f83:	; ext_env[i + 1] <-- env[i]
 14023 0000B00E 4883FE00                	cmp rsi, 0
 14024 0000B012 7410                    	je .L_lambda_simple_env_end_4f83
 14025 0000B014 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 14026 0000B018 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14027 0000B01C 48FFC6                  	inc rsi
 14028 0000B01F 48FFC2                  	inc rdx
 14029 0000B022 EBEA                    	jmp .L_lambda_simple_env_loop_4f83
 14030                                  .L_lambda_simple_env_end_4f83:
 14031 0000B024 5B                      	pop rbx
 14032 0000B025 BE00000000              	mov rsi, 0
 14033                                  .L_lambda_simple_params_loop_4f83:	; copy params
 14034 0000B02A 4883FE00                	cmp rsi, 0
 14035 0000B02E 740E                    	je .L_lambda_simple_params_end_4f83
 14036 0000B030 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14037 0000B035 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14038 0000B039 48FFC6                  	inc rsi
 14039 0000B03C EBEC                    	jmp .L_lambda_simple_params_loop_4f83
 14040                                  .L_lambda_simple_params_end_4f83:
 14041 0000B03E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14042 0000B041 4889C3                  	mov rbx, rax
 14043 0000B044 58                      	pop rax
 14044 0000B045 C60005                  	mov byte [rax], T_closure
 14045 0000B048 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14046 0000B04C 48C74009[59B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f83
 14047 0000B054 E941020000              	jmp .L_lambda_simple_end_4f83
 14048                                  .L_lambda_simple_code_4f83:	; lambda-simple body
 14049 0000B059 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14050 0000B05F 740B                    	je .L_lambda_simple_arity_check_ok_4f83
 14051 0000B061 FF742410                	push qword [rsp + 8 * 2]
 14052 0000B065 6A01                    	push 1
 14053 0000B067 E901780000              	jmp L_error_incorrect_arity_simple
 14054                                  .L_lambda_simple_arity_check_ok_4f83:
 14055 0000B06C C8000000                	enter 0, 0
 14056 0000B070 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14057 0000B075 E83A780000              	call malloc
 14058 0000B07A 50                      	push rax
 14059 0000B07B BF08000000              	mov rdi, 8 * 1	; new rib
 14060 0000B080 E82F780000              	call malloc
 14061 0000B085 50                      	push rax
 14062 0000B086 BF10000000              	mov rdi, 8 * 2	; extended env
 14063 0000B08B E824780000              	call malloc
 14064 0000B090 488B7D10                	mov rdi, ENV
 14065 0000B094 BE00000000              	mov rsi, 0
 14066 0000B099 BA01000000              	mov rdx, 1
 14067                                  .L_lambda_opt_env_loop_0c94:	; ext_env[i + 1] <-- env[i]
 14068 0000B09E 4883FE01                	cmp rsi, 1
 14069 0000B0A2 7410                    	je .L_lambda_opt_env_end_0c94
 14070 0000B0A4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 14071 0000B0A8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14072 0000B0AC 48FFC6                  	inc rsi
 14073 0000B0AF 48FFC2                  	inc rdx
 14074 0000B0B2 EBEA                    	jmp .L_lambda_opt_env_loop_0c94
 14075                                  .L_lambda_opt_env_end_0c94:
 14076 0000B0B4 5B                      	pop rbx
 14077 0000B0B5 BE00000000              	mov rsi, 0
 14078                                  .L_lambda_opt_params_loop_0c94:	; copy params
 14079 0000B0BA 4883FE01                	cmp rsi, 1
 14080 0000B0BE 740E                    	je .L_lambda_opt_params_end_0c94
 14081 0000B0C0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14082 0000B0C5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14083 0000B0C9 48FFC6                  	inc rsi
 14084 0000B0CC EBEC                    	jmp .L_lambda_opt_params_loop_0c94
 14085                                  .L_lambda_opt_params_end_0c94:
 14086 0000B0CE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14087 0000B0D1 4889C3                  	mov rbx, rax
 14088 0000B0D4 58                      	pop rax
 14089 0000B0D5 C60005                  	mov byte [rax], T_closure
 14090 0000B0D8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14091 0000B0DC 48C74009[E9B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c94
 14092 0000B0E4 E9AD010000              	jmp .L_lambda_opt_end_0c94
 14093                                  .L_lambda_opt_code_0c94:	; lambda-opt body
 14094 0000B0E9 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 14095 0000B0EE 4889FB                  	mov rbx, rdi
 14096 0000B0F1 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
 14097 0000B0F5 4883FB00                	cmp rbx, 0
 14098 0000B0F9 7F45                    	jg .L_lambda_opt_arity_check_more_0c94
 14099                                  .L_lambda_opt_arity_check_exact_0c94:	 ; if params in opt is exact
 14100 0000B0FB 4883EC08                	sub rsp, 8
 14101 0000B0FF BE00000000              	mov rsi, 0 ; index
 14102                                  .L_lambda_opt_stack_enlarge_loop_0c94:	 ; stack loop enlarge start
 14103 0000B104 4883FE03                	cmp rsi, 3
 14104 0000B108 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c94
 14105 0000B10A 4889F7                  	mov rdi, rsi
 14106 0000B10D 48FFC7                  	inc rdi
 14107 0000B110 48C1E703                	shl rdi, 3
 14108 0000B114 4801E7                  	add rdi, rsp
 14109 0000B117 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 14110 0000B11A 4883EB08                	sub rbx, 8
 14111 0000B11E 488B3F                  	mov rdi, [rdi]
 14112 0000B121 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 14113 0000B124 48FFC6                  	inc rsi
 14114 0000B127 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c94
 14115                                  .L_lambda_opt_stack_enlarge_loop_exit_0c94:	 ; end of stack enlarge loop
 14116 0000B129 48C7442418-             	mov qword [rsp + 3*8], sob_nil
 14116 0000B12E [01000000]         
 14117 0000B132 48C744241001000000      	mov qword [rsp + 2*8], 1
 14118 0000B13B E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c94
 14119                                  .L_lambda_opt_arity_check_more_0c94:	 ; if params in opt is more
 14120 0000B140 48B8-                   	mov rax, sob_nil
 14120 0000B142 [0100000000000000] 
 14121 0000B14A 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 14122 0000B14D 48FFCE                  	dec rsi
 14123                                  .L_lambda_opt_list_create_loop_0c94:	; start of list creation loop
 14124 0000B150 4883FEFF                	cmp rsi, -1
 14125 0000B154 7422                    	je .L_lambda_opt_list_create_loop_exit_0c94
 14126 0000B156 488D4E03                	lea rcx, [rsi + (3 + 0)]
 14127 0000B15A 48C1E103                	shl rcx, 3
 14128 0000B15E 4801E1                  	add rcx, rsp
 14129 0000B161 488B09                  	mov rcx, [rcx]
 14130 0000B164 56                      	push rsi ; save params
 14131 0000B165 53                      	push rbx
 14132                                  
 14133 0000B166 50                      	push rax ; cdr
 14134 0000B167 51                      	push rcx ; car
 14135 0000B168 6A02                    	push qword 2 ; push num of args
 14136 0000B16A 6A01                    	push qword 1 ; push garbage as env
 14137 0000B16C E8CA800000              	call L_code_ptr_cons
 14138                                  
 14139 0000B171 5B                      	pop rbx ; restore params
 14140 0000B172 5E                      	pop rsi
 14141 0000B173 48FFCE                  	dec rsi
 14142 0000B176 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c94
 14143                                  .L_lambda_opt_list_create_loop_exit_0c94:	; end of list creation loop
 14144 0000B178 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 14145 0000B17D 4883C302                	add rbx, 2
 14146 0000B181 4889DF                  	mov rdi, rbx
 14147 0000B184 48C1E703                	shl rdi,3
 14148 0000B188 4801E7                  	add rdi, rsp
 14149 0000B18B 488907                  	mov [rdi], rax
 14150 0000B18E BE00000000              	mov rsi, 0 ;index
 14151                                  .L_lambda_opt_stack_shrink_loop_0c94:	; start of stack shrink loop
 14152 0000B193 4883FE03                	cmp rsi, 3
 14153 0000B197 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c94
 14154 0000B199 BF02000000              	mov rdi, 2
 14155 0000B19E 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 14156 0000B1A1 4889D9                  	mov rcx, rbx
 14157 0000B1A4 4829F1                  	sub rcx, rsi
 14158 0000B1A7 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 14159 0000B1AA 4889FA                  	mov rdx, rdi
 14160 0000B1AD 48C1E203                	shl rdx, 3
 14161 0000B1B1 4801E2                  	add rdx, rsp
 14162 0000B1B4 48C1E103                	shl rcx, 3
 14163 0000B1B8 4801E1                  	add rcx, rsp
 14164 0000B1BB 488B12                  	mov rdx, [rdx]
 14165 0000B1BE 488911                  	mov [rcx], rdx
 14166 0000B1C1 48FFC6                  	inc rsi
 14167 0000B1C4 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c94
 14168                                  .L_lambda_opt_stack_shrink_loop_exit_0c94:	; end of stack shrink loop
 14169 0000B1C6 4883EB02                	sub rbx, 2 ; rbx has number of args
 14170 0000B1CA 4883EB01                	sub rbx, 1
 14171 0000B1CE 48C1E303                	shl rbx, 3
 14172 0000B1D2 4801DC                  	add rsp, rbx
 14173 0000B1D5 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 14174                                  .L_lambda_opt_stack_adjusted_0c94:
 14175 0000B1DE C8000000                	enter 0, 0
 14176 0000B1E2 488B4520                	mov rax, PARAM(0)
 14177 0000B1E6 50                      	push rax
 14178 0000B1E7 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14179 0000B1EF 50                      	push rax
 14180 0000B1F0 6A02                    	push 2
 14181 0000B1F2 488B0425[D8020000]      	mov rax, qword [free_var_91]
 14182                                  	assert_closure(rax)
    65 0000B1FA 803805              <1>  cmp byte [%1], %2
    66 0000B1FD 0F85318F0000        <1>  jne L_error_incorrect_type
 14183 0000B203 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14184 0000B207 53                      	push rbx
 14185 0000B208 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14186 0000B20C FFD3                    	call rbx
 14187 0000B20E 50                      	push rax
 14188 0000B20F 488B4510                	mov rax, qword [rbp + 8*2]
 14189 0000B213 488B00                  	mov rax, qword [rax + 8*0]
 14190 0000B216 488B00                  	mov rax, qword [rax + 8*0]
 14191 0000B219 50                      	push rax
 14192 0000B21A 6A02                    	push 2
 14193 0000B21C 488B0425[C8020000]      	mov rax, qword [free_var_89]
 14194                                  	assert_closure(rax)
    65 0000B224 803805              <1>  cmp byte [%1], %2
    66 0000B227 0F85078F0000        <1>  jne L_error_incorrect_type
 14195 0000B22D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14196 0000B231 53                      	push rbx
 14197 0000B232 FF7508                  	push RET_ADDR
 14198 0000B235 488B7D18                	mov rdi, COUNT
 14199 0000B239 4883C703                	add rdi, 3
 14200 0000B23D 48C1E703                	shl rdi, 3
 14201 0000B241 4801EF                  	add rdi, rbp
 14202 0000B244 488B6D00                	mov rbp, OLD_RDP
 14203 0000B248 BE00000000              	mov rsi, 0
 14204                                  .L_tc_recycle_frame_loop_5d16:	 ; start recycle frame loop
 14205 0000B24D 4883FE05                	cmp rsi, 5
 14206 0000B251 7427                    	je .L_tc_recycle_frame_done_5d16
 14207 0000B253 B904000000              	mov rcx, 4
 14208 0000B258 4829F1                  	sub rcx, rsi
 14209 0000B25B 48C1E103                	shl rcx, 3
 14210 0000B25F 4801E1                  	add rcx, rsp ; rcx is the address to move
 14211 0000B262 4889F3                  	mov rbx, rsi
 14212 0000B265 48C1E303                	shl rbx, 3
 14213 0000B269 48F7DB                  	neg rbx
 14214 0000B26C 4801FB                  	add rbx, rdi ;rbx is the address to move to
 14215 0000B26F 488B09                  	mov rcx, [rcx]
 14216 0000B272 48890B                  	mov [rbx], rcx
 14217 0000B275 48FFC6                  	inc rsi
 14218 0000B278 EBD3                    	jmp .L_tc_recycle_frame_loop_5d16
 14219                                  .L_tc_recycle_frame_done_5d16:	 ; end recycle frame loop
 14220 0000B27A BB04000000              	mov rbx, 4
 14221 0000B27F 48C1E303                	shl rbx, 3
 14222 0000B283 48F7DB                  	neg rbx
 14223 0000B286 4801FB                  	add rbx, rdi
 14224 0000B289 4889DC                  	mov rsp, rbx
 14225 0000B28C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14226 0000B290 FFE3                    	jmp rbx
 14227 0000B292 C9                      	leave
 14228 0000B293 C21800                  	ret AND_KILL_FRAME(1)
 14229                                  .L_lambda_opt_end_0c94:	; new closure is in rax
 14230 0000B296 C9                      	leave
 14231 0000B297 C21800                  	ret 8 * (2 + 1)
 14232                                  .L_lambda_simple_end_4f83:	; new closure is in rax
 14233 0000B29A 50                      	push rax
 14234 0000B29B 6A01                    	push 1
 14235 0000B29D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14236 0000B2A2 E80D760000              	call malloc
 14237 0000B2A7 50                      	push rax
 14238 0000B2A8 BF00000000              	mov rdi, 8 * 0	; new rib
 14239 0000B2AD E802760000              	call malloc
 14240 0000B2B2 50                      	push rax
 14241 0000B2B3 BF08000000              	mov rdi, 8 * 1	; extended env
 14242 0000B2B8 E8F7750000              	call malloc
 14243 0000B2BD 488B7D10                	mov rdi, ENV
 14244 0000B2C1 BE00000000              	mov rsi, 0
 14245 0000B2C6 BA01000000              	mov rdx, 1
 14246                                  .L_lambda_simple_env_loop_4f84:	; ext_env[i + 1] <-- env[i]
 14247 0000B2CB 4883FE00                	cmp rsi, 0
 14248 0000B2CF 7410                    	je .L_lambda_simple_env_end_4f84
 14249 0000B2D1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 14250 0000B2D5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14251 0000B2D9 48FFC6                  	inc rsi
 14252 0000B2DC 48FFC2                  	inc rdx
 14253 0000B2DF EBEA                    	jmp .L_lambda_simple_env_loop_4f84
 14254                                  .L_lambda_simple_env_end_4f84:
 14255 0000B2E1 5B                      	pop rbx
 14256 0000B2E2 BE00000000              	mov rsi, 0
 14257                                  .L_lambda_simple_params_loop_4f84:	; copy params
 14258 0000B2E7 4883FE00                	cmp rsi, 0
 14259 0000B2EB 740E                    	je .L_lambda_simple_params_end_4f84
 14260 0000B2ED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14261 0000B2F2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14262 0000B2F6 48FFC6                  	inc rsi
 14263 0000B2F9 EBEC                    	jmp .L_lambda_simple_params_loop_4f84
 14264                                  .L_lambda_simple_params_end_4f84:
 14265 0000B2FB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14266 0000B2FE 4889C3                  	mov rbx, rax
 14267 0000B301 58                      	pop rax
 14268 0000B302 C60005                  	mov byte [rax], T_closure
 14269 0000B305 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14270 0000B309 48C74009[16B30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f84
 14271 0000B311 E924010000              	jmp .L_lambda_simple_end_4f84
 14272                                  .L_lambda_simple_code_4f84:	; lambda-simple body
 14273 0000B316 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14274 0000B31C 740B                    	je .L_lambda_simple_arity_check_ok_4f84
 14275 0000B31E FF742410                	push qword [rsp + 8 * 2]
 14276 0000B322 6A01                    	push 1
 14277 0000B324 E944750000              	jmp L_error_incorrect_arity_simple
 14278                                  .L_lambda_simple_arity_check_ok_4f84:
 14279 0000B329 C8000000                	enter 0, 0
 14280 0000B32D 488B0425[30030000]      	mov rax, qword [free_var_102]
 14281 0000B335 50                      	push rax
 14282 0000B336 6A01                    	push 1
 14283 0000B338 488B4520                	mov rax, PARAM(0)
 14284                                  	assert_closure(rax)
    65 0000B33C 803805              <1>  cmp byte [%1], %2
    66 0000B33F 0F85EF8D0000        <1>  jne L_error_incorrect_type
 14285 0000B345 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14286 0000B349 53                      	push rbx
 14287 0000B34A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14288 0000B34E FFD3                    	call rbx
 14289 0000B350 48890425[60030000]      	mov qword [free_var_108], rax
 14290 0000B358 48B8-                   	mov rax, sob_void
 14290 0000B35A [0000000000000000] 
 14291                                  
 14292 0000B362 488B0425[38030000]      	mov rax, qword [free_var_103]
 14293 0000B36A 50                      	push rax
 14294 0000B36B 6A01                    	push 1
 14295 0000B36D 488B4520                	mov rax, PARAM(0)
 14296                                  	assert_closure(rax)
    65 0000B371 803805              <1>  cmp byte [%1], %2
    66 0000B374 0F85BA8D0000        <1>  jne L_error_incorrect_type
 14297 0000B37A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14298 0000B37E 53                      	push rbx
 14299 0000B37F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14300 0000B383 FFD3                    	call rbx
 14301 0000B385 48890425[68030000]      	mov qword [free_var_109], rax
 14302 0000B38D 48B8-                   	mov rax, sob_void
 14302 0000B38F [0000000000000000] 
 14303                                  
 14304 0000B397 488B0425[50030000]      	mov rax, qword [free_var_106]
 14305 0000B39F 50                      	push rax
 14306 0000B3A0 6A01                    	push 1
 14307 0000B3A2 488B4520                	mov rax, PARAM(0)
 14308                                  	assert_closure(rax)
    65 0000B3A6 803805              <1>  cmp byte [%1], %2
    66 0000B3A9 0F85858D0000        <1>  jne L_error_incorrect_type
 14309 0000B3AF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14310 0000B3B3 53                      	push rbx
 14311 0000B3B4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14312 0000B3B8 FFD3                    	call rbx
 14313 0000B3BA 48890425[70030000]      	mov qword [free_var_110], rax
 14314 0000B3C2 48B8-                   	mov rax, sob_void
 14314 0000B3C4 [0000000000000000] 
 14315                                  
 14316 0000B3CC 488B0425[40030000]      	mov rax, qword [free_var_104]
 14317 0000B3D4 50                      	push rax
 14318 0000B3D5 6A01                    	push 1
 14319 0000B3D7 488B4520                	mov rax, PARAM(0)
 14320                                  	assert_closure(rax)
    65 0000B3DB 803805              <1>  cmp byte [%1], %2
    66 0000B3DE 0F85508D0000        <1>  jne L_error_incorrect_type
 14321 0000B3E4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14322 0000B3E8 53                      	push rbx
 14323 0000B3E9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14324 0000B3ED FFD3                    	call rbx
 14325 0000B3EF 48890425[78030000]      	mov qword [free_var_111], rax
 14326 0000B3F7 48B8-                   	mov rax, sob_void
 14326 0000B3F9 [0000000000000000] 
 14327                                  
 14328 0000B401 488B0425[48030000]      	mov rax, qword [free_var_105]
 14329 0000B409 50                      	push rax
 14330 0000B40A 6A01                    	push 1
 14331 0000B40C 488B4520                	mov rax, PARAM(0)
 14332                                  	assert_closure(rax)
    65 0000B410 803805              <1>  cmp byte [%1], %2
    66 0000B413 0F851B8D0000        <1>  jne L_error_incorrect_type
 14333 0000B419 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14334 0000B41D 53                      	push rbx
 14335 0000B41E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14336 0000B422 FFD3                    	call rbx
 14337 0000B424 48890425[80030000]      	mov qword [free_var_112], rax
 14338 0000B42C 48B8-                   	mov rax, sob_void
 14338 0000B42E [0000000000000000] 
 14339 0000B436 C9                      	leave
 14340 0000B437 C21800                  	ret 8 * (2 + 1)
 14341                                  .L_lambda_simple_end_4f84:	; new closure is in rax
 14342                                  	assert_closure(rax)
    65 0000B43A 803805              <1>  cmp byte [%1], %2
    66 0000B43D 0F85F18C0000        <1>  jne L_error_incorrect_type
 14343 0000B443 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14344 0000B447 53                      	push rbx
 14345 0000B448 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14346 0000B44C FFD3                    	call rbx
 14347                                  
 14348 0000B44E 4889C7                  	mov rdi, rax
 14349 0000B451 E86F740000              	call print_sexpr_if_not_void
 14350                                  
 14351 0000B456 488D0425[00000000]      	lea rax, [0 + L_constants]
 14352 0000B45E 48890425[88030000]      	mov qword [free_var_113], rax
 14353 0000B466 48B8-                   	mov rax, sob_void
 14353 0000B468 [0000000000000000] 
 14354                                  
 14355 0000B470 4889C7                  	mov rdi, rax
 14356 0000B473 E84D740000              	call print_sexpr_if_not_void
 14357                                  
 14358 0000B478 488D0425[00000000]      	lea rax, [0 + L_constants]
 14359 0000B480 48890425[90030000]      	mov qword [free_var_114], rax
 14360 0000B488 48B8-                   	mov rax, sob_void
 14360 0000B48A [0000000000000000] 
 14361                                  
 14362 0000B492 4889C7                  	mov rdi, rax
 14363 0000B495 E82B740000              	call print_sexpr_if_not_void
 14364                                  
 14365 0000B49A 488D0425[56010000]      	lea rax, [342 + L_constants]
 14366 0000B4A2 50                      	push rax
 14367 0000B4A3 6A01                    	push 1
 14368 0000B4A5 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14369                                  	assert_closure(rax)
    65 0000B4AD 803805              <1>  cmp byte [%1], %2
    66 0000B4B0 0F857E8C0000        <1>  jne L_error_incorrect_type
 14370 0000B4B6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14371 0000B4BA 53                      	push rbx
 14372 0000B4BB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14373 0000B4BF FFD3                    	call rbx
 14374 0000B4C1 50                      	push rax
 14375 0000B4C2 488D0425[5A010000]      	lea rax, [346 + L_constants]
 14376 0000B4CA 50                      	push rax
 14377 0000B4CB 6A01                    	push 1
 14378 0000B4CD 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14379                                  	assert_closure(rax)
    65 0000B4D5 803805              <1>  cmp byte [%1], %2
    66 0000B4D8 0F85568C0000        <1>  jne L_error_incorrect_type
 14380 0000B4DE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14381 0000B4E2 53                      	push rbx
 14382 0000B4E3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14383 0000B4E7 FFD3                    	call rbx
 14384 0000B4E9 50                      	push rax
 14385 0000B4EA 6A02                    	push 2
 14386 0000B4EC 488B0425[10030000]      	mov rax, qword [free_var_98]
 14387                                  	assert_closure(rax)
    65 0000B4F4 803805              <1>  cmp byte [%1], %2
    66 0000B4F7 0F85378C0000        <1>  jne L_error_incorrect_type
 14388 0000B4FD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14389 0000B501 53                      	push rbx
 14390 0000B502 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14391 0000B506 FFD3                    	call rbx
 14392 0000B508 50                      	push rax
 14393 0000B509 6A01                    	push 1
 14394 0000B50B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14395 0000B510 E89F730000              	call malloc
 14396 0000B515 50                      	push rax
 14397 0000B516 BF00000000              	mov rdi, 8 * 0	; new rib
 14398 0000B51B E894730000              	call malloc
 14399 0000B520 50                      	push rax
 14400 0000B521 BF08000000              	mov rdi, 8 * 1	; extended env
 14401 0000B526 E889730000              	call malloc
 14402 0000B52B 488B7D10                	mov rdi, ENV
 14403 0000B52F BE00000000              	mov rsi, 0
 14404 0000B534 BA01000000              	mov rdx, 1
 14405                                  .L_lambda_simple_env_loop_4f85:	; ext_env[i + 1] <-- env[i]
 14406 0000B539 4883FE00                	cmp rsi, 0
 14407 0000B53D 7410                    	je .L_lambda_simple_env_end_4f85
 14408 0000B53F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 14409 0000B543 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14410 0000B547 48FFC6                  	inc rsi
 14411 0000B54A 48FFC2                  	inc rdx
 14412 0000B54D EBEA                    	jmp .L_lambda_simple_env_loop_4f85
 14413                                  .L_lambda_simple_env_end_4f85:
 14414 0000B54F 5B                      	pop rbx
 14415 0000B550 BE00000000              	mov rsi, 0
 14416                                  .L_lambda_simple_params_loop_4f85:	; copy params
 14417 0000B555 4883FE00                	cmp rsi, 0
 14418 0000B559 740E                    	je .L_lambda_simple_params_end_4f85
 14419 0000B55B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14420 0000B560 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14421 0000B564 48FFC6                  	inc rsi
 14422 0000B567 EBEC                    	jmp .L_lambda_simple_params_loop_4f85
 14423                                  .L_lambda_simple_params_end_4f85:
 14424 0000B569 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14425 0000B56C 4889C3                  	mov rbx, rax
 14426 0000B56F 58                      	pop rax
 14427 0000B570 C60005                  	mov byte [rax], T_closure
 14428 0000B573 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14429 0000B577 48C74009[84B50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f85
 14430 0000B57F E981030000              	jmp .L_lambda_simple_end_4f85
 14431                                  .L_lambda_simple_code_4f85:	; lambda-simple body
 14432 0000B584 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14433 0000B58A 740B                    	je .L_lambda_simple_arity_check_ok_4f85
 14434 0000B58C FF742410                	push qword [rsp + 8 * 2]
 14435 0000B590 6A01                    	push 1
 14436 0000B592 E9D6720000              	jmp L_error_incorrect_arity_simple
 14437                                  .L_lambda_simple_arity_check_ok_4f85:
 14438 0000B597 C8000000                	enter 0, 0
 14439 0000B59B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14440 0000B5A0 E80F730000              	call malloc
 14441 0000B5A5 50                      	push rax
 14442 0000B5A6 BF08000000              	mov rdi, 8 * 1	; new rib
 14443 0000B5AB E804730000              	call malloc
 14444 0000B5B0 50                      	push rax
 14445 0000B5B1 BF10000000              	mov rdi, 8 * 2	; extended env
 14446 0000B5B6 E8F9720000              	call malloc
 14447 0000B5BB 488B7D10                	mov rdi, ENV
 14448 0000B5BF BE00000000              	mov rsi, 0
 14449 0000B5C4 BA01000000              	mov rdx, 1
 14450                                  .L_lambda_simple_env_loop_4f86:	; ext_env[i + 1] <-- env[i]
 14451 0000B5C9 4883FE01                	cmp rsi, 1
 14452 0000B5CD 7410                    	je .L_lambda_simple_env_end_4f86
 14453 0000B5CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 14454 0000B5D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14455 0000B5D7 48FFC6                  	inc rsi
 14456 0000B5DA 48FFC2                  	inc rdx
 14457 0000B5DD EBEA                    	jmp .L_lambda_simple_env_loop_4f86
 14458                                  .L_lambda_simple_env_end_4f86:
 14459 0000B5DF 5B                      	pop rbx
 14460 0000B5E0 BE00000000              	mov rsi, 0
 14461                                  .L_lambda_simple_params_loop_4f86:	; copy params
 14462 0000B5E5 4883FE01                	cmp rsi, 1
 14463 0000B5E9 740E                    	je .L_lambda_simple_params_end_4f86
 14464 0000B5EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14465 0000B5F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14466 0000B5F4 48FFC6                  	inc rsi
 14467 0000B5F7 EBEC                    	jmp .L_lambda_simple_params_loop_4f86
 14468                                  .L_lambda_simple_params_end_4f86:
 14469 0000B5F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14470 0000B5FC 4889C3                  	mov rbx, rax
 14471 0000B5FF 58                      	pop rax
 14472 0000B600 C60005                  	mov byte [rax], T_closure
 14473 0000B603 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14474 0000B607 48C74009[14B60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f86
 14475 0000B60F E928010000              	jmp .L_lambda_simple_end_4f86
 14476                                  .L_lambda_simple_code_4f86:	; lambda-simple body
 14477 0000B614 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14478 0000B61A 740B                    	je .L_lambda_simple_arity_check_ok_4f86
 14479 0000B61C FF742410                	push qword [rsp + 8 * 2]
 14480 0000B620 6A01                    	push 1
 14481 0000B622 E946720000              	jmp L_error_incorrect_arity_simple
 14482                                  .L_lambda_simple_arity_check_ok_4f86:
 14483 0000B627 C8000000                	enter 0, 0
 14484 0000B62B 488D0425[58010000]      	lea rax, [344 + L_constants]
 14485 0000B633 50                      	push rax
 14486 0000B634 488B4520                	mov rax, PARAM(0)
 14487 0000B638 50                      	push rax
 14488 0000B639 488D0425[56010000]      	lea rax, [342 + L_constants]
 14489 0000B641 50                      	push rax
 14490 0000B642 6A03                    	push 3
 14491 0000B644 488B0425[68030000]      	mov rax, qword [free_var_109]
 14492                                  	assert_closure(rax)
    65 0000B64C 803805              <1>  cmp byte [%1], %2
    66 0000B64F 0F85DF8A0000        <1>  jne L_error_incorrect_type
 14493 0000B655 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14494 0000B659 53                      	push rbx
 14495 0000B65A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14496 0000B65E FFD3                    	call rbx
 14497 0000B660 483D[02000000]          	cmp rax, sob_boolean_false
 14498 0000B666 0F84C8000000            	je .L_if_else_56b3
 14499 0000B66C 488B4510                	mov rax, qword [rbp + 8*2]
 14500 0000B670 488B00                  	mov rax, qword [rax + 8*0]
 14501 0000B673 488B00                  	mov rax, qword [rax + 8*0]
 14502 0000B676 50                      	push rax
 14503 0000B677 488B4520                	mov rax, PARAM(0)
 14504 0000B67B 50                      	push rax
 14505 0000B67C 6A01                    	push 1
 14506 0000B67E 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14507                                  	assert_closure(rax)
    65 0000B686 803805              <1>  cmp byte [%1], %2
    66 0000B689 0F85A58A0000        <1>  jne L_error_incorrect_type
 14508 0000B68F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14509 0000B693 53                      	push rbx
 14510 0000B694 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14511 0000B698 FFD3                    	call rbx
 14512 0000B69A 50                      	push rax
 14513 0000B69B 6A02                    	push 2
 14514 0000B69D 488B0425[08030000]      	mov rax, qword [free_var_97]
 14515                                  	assert_closure(rax)
    65 0000B6A5 803805              <1>  cmp byte [%1], %2
    66 0000B6A8 0F85868A0000        <1>  jne L_error_incorrect_type
 14516 0000B6AE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14517 0000B6B2 53                      	push rbx
 14518 0000B6B3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14519 0000B6B7 FFD3                    	call rbx
 14520 0000B6B9 50                      	push rax
 14521 0000B6BA 6A01                    	push 1
 14522 0000B6BC 488B0425[C8000000]      	mov rax, qword [free_var_25]
 14523                                  	assert_closure(rax)
    65 0000B6C4 803805              <1>  cmp byte [%1], %2
    66 0000B6C7 0F85678A0000        <1>  jne L_error_incorrect_type
 14524 0000B6CD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14525 0000B6D1 53                      	push rbx
 14526 0000B6D2 FF7508                  	push RET_ADDR
 14527 0000B6D5 488B7D18                	mov rdi, COUNT
 14528 0000B6D9 4883C703                	add rdi, 3
 14529 0000B6DD 48C1E703                	shl rdi, 3
 14530 0000B6E1 4801EF                  	add rdi, rbp
 14531 0000B6E4 488B6D00                	mov rbp, OLD_RDP
 14532 0000B6E8 BE00000000              	mov rsi, 0
 14533                                  .L_tc_recycle_frame_loop_5d17:	 ; start recycle frame loop
 14534 0000B6ED 4883FE04                	cmp rsi, 4
 14535 0000B6F1 7427                    	je .L_tc_recycle_frame_done_5d17
 14536 0000B6F3 B903000000              	mov rcx, 3
 14537 0000B6F8 4829F1                  	sub rcx, rsi
 14538 0000B6FB 48C1E103                	shl rcx, 3
 14539 0000B6FF 4801E1                  	add rcx, rsp ; rcx is the address to move
 14540 0000B702 4889F3                  	mov rbx, rsi
 14541 0000B705 48C1E303                	shl rbx, 3
 14542 0000B709 48F7DB                  	neg rbx
 14543 0000B70C 4801FB                  	add rbx, rdi ;rbx is the address to move to
 14544 0000B70F 488B09                  	mov rcx, [rcx]
 14545 0000B712 48890B                  	mov [rbx], rcx
 14546 0000B715 48FFC6                  	inc rsi
 14547 0000B718 EBD3                    	jmp .L_tc_recycle_frame_loop_5d17
 14548                                  .L_tc_recycle_frame_done_5d17:	 ; end recycle frame loop
 14549 0000B71A BB03000000              	mov rbx, 3
 14550 0000B71F 48C1E303                	shl rbx, 3
 14551 0000B723 48F7DB                  	neg rbx
 14552 0000B726 4801FB                  	add rbx, rdi
 14553 0000B729 4889DC                  	mov rsp, rbx
 14554 0000B72C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14555 0000B730 FFE3                    	jmp rbx
 14556 0000B732 EB04                    	jmp .L_if_end_56b3
 14557                                  	.L_if_else_56b3:
 14558 0000B734 488B4520                	mov rax, PARAM(0)
 14559                                  	.L_if_end_56b3:
 14560 0000B738 C9                      	leave
 14561 0000B739 C21800                  	ret 8 * (2 + 1)
 14562                                  .L_lambda_simple_end_4f86:	; new closure is in rax
 14563 0000B73C 48890425[88030000]      	mov qword [free_var_113], rax
 14564 0000B744 48B8-                   	mov rax, sob_void
 14564 0000B746 [0000000000000000] 
 14565                                  
 14566 0000B74E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14567 0000B753 E85C710000              	call malloc
 14568 0000B758 50                      	push rax
 14569 0000B759 BF08000000              	mov rdi, 8 * 1	; new rib
 14570 0000B75E E851710000              	call malloc
 14571 0000B763 50                      	push rax
 14572 0000B764 BF10000000              	mov rdi, 8 * 2	; extended env
 14573 0000B769 E846710000              	call malloc
 14574 0000B76E 488B7D10                	mov rdi, ENV
 14575 0000B772 BE00000000              	mov rsi, 0
 14576 0000B777 BA01000000              	mov rdx, 1
 14577                                  .L_lambda_simple_env_loop_4f87:	; ext_env[i + 1] <-- env[i]
 14578 0000B77C 4883FE01                	cmp rsi, 1
 14579 0000B780 7410                    	je .L_lambda_simple_env_end_4f87
 14580 0000B782 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 14581 0000B786 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14582 0000B78A 48FFC6                  	inc rsi
 14583 0000B78D 48FFC2                  	inc rdx
 14584 0000B790 EBEA                    	jmp .L_lambda_simple_env_loop_4f87
 14585                                  .L_lambda_simple_env_end_4f87:
 14586 0000B792 5B                      	pop rbx
 14587 0000B793 BE00000000              	mov rsi, 0
 14588                                  .L_lambda_simple_params_loop_4f87:	; copy params
 14589 0000B798 4883FE01                	cmp rsi, 1
 14590 0000B79C 740E                    	je .L_lambda_simple_params_end_4f87
 14591 0000B79E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14592 0000B7A3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14593 0000B7A7 48FFC6                  	inc rsi
 14594 0000B7AA EBEC                    	jmp .L_lambda_simple_params_loop_4f87
 14595                                  .L_lambda_simple_params_end_4f87:
 14596 0000B7AC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14597 0000B7AF 4889C3                  	mov rbx, rax
 14598 0000B7B2 58                      	pop rax
 14599 0000B7B3 C60005                  	mov byte [rax], T_closure
 14600 0000B7B6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14601 0000B7BA 48C74009[C7B70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f87
 14602 0000B7C2 E928010000              	jmp .L_lambda_simple_end_4f87
 14603                                  .L_lambda_simple_code_4f87:	; lambda-simple body
 14604 0000B7C7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14605 0000B7CD 740B                    	je .L_lambda_simple_arity_check_ok_4f87
 14606 0000B7CF FF742410                	push qword [rsp + 8 * 2]
 14607 0000B7D3 6A01                    	push 1
 14608 0000B7D5 E993700000              	jmp L_error_incorrect_arity_simple
 14609                                  .L_lambda_simple_arity_check_ok_4f87:
 14610 0000B7DA C8000000                	enter 0, 0
 14611 0000B7DE 488D0425[5C010000]      	lea rax, [348 + L_constants]
 14612 0000B7E6 50                      	push rax
 14613 0000B7E7 488B4520                	mov rax, PARAM(0)
 14614 0000B7EB 50                      	push rax
 14615 0000B7EC 488D0425[5A010000]      	lea rax, [346 + L_constants]
 14616 0000B7F4 50                      	push rax
 14617 0000B7F5 6A03                    	push 3
 14618 0000B7F7 488B0425[68030000]      	mov rax, qword [free_var_109]
 14619                                  	assert_closure(rax)
    65 0000B7FF 803805              <1>  cmp byte [%1], %2
    66 0000B802 0F852C890000        <1>  jne L_error_incorrect_type
 14620 0000B808 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14621 0000B80C 53                      	push rbx
 14622 0000B80D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14623 0000B811 FFD3                    	call rbx
 14624 0000B813 483D[02000000]          	cmp rax, sob_boolean_false
 14625 0000B819 0F84C8000000            	je .L_if_else_56b4
 14626 0000B81F 488B4510                	mov rax, qword [rbp + 8*2]
 14627 0000B823 488B00                  	mov rax, qword [rax + 8*0]
 14628 0000B826 488B00                  	mov rax, qword [rax + 8*0]
 14629 0000B829 50                      	push rax
 14630 0000B82A 488B4520                	mov rax, PARAM(0)
 14631 0000B82E 50                      	push rax
 14632 0000B82F 6A01                    	push 1
 14633 0000B831 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14634                                  	assert_closure(rax)
    65 0000B839 803805              <1>  cmp byte [%1], %2
    66 0000B83C 0F85F2880000        <1>  jne L_error_incorrect_type
 14635 0000B842 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14636 0000B846 53                      	push rbx
 14637 0000B847 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14638 0000B84B FFD3                    	call rbx
 14639 0000B84D 50                      	push rax
 14640 0000B84E 6A02                    	push 2
 14641 0000B850 488B0425[10030000]      	mov rax, qword [free_var_98]
 14642                                  	assert_closure(rax)
    65 0000B858 803805              <1>  cmp byte [%1], %2
    66 0000B85B 0F85D3880000        <1>  jne L_error_incorrect_type
 14643 0000B861 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14644 0000B865 53                      	push rbx
 14645 0000B866 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14646 0000B86A FFD3                    	call rbx
 14647 0000B86C 50                      	push rax
 14648 0000B86D 6A01                    	push 1
 14649 0000B86F 488B0425[C8000000]      	mov rax, qword [free_var_25]
 14650                                  	assert_closure(rax)
    65 0000B877 803805              <1>  cmp byte [%1], %2
    66 0000B87A 0F85B4880000        <1>  jne L_error_incorrect_type
 14651 0000B880 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14652 0000B884 53                      	push rbx
 14653 0000B885 FF7508                  	push RET_ADDR
 14654 0000B888 488B7D18                	mov rdi, COUNT
 14655 0000B88C 4883C703                	add rdi, 3
 14656 0000B890 48C1E703                	shl rdi, 3
 14657 0000B894 4801EF                  	add rdi, rbp
 14658 0000B897 488B6D00                	mov rbp, OLD_RDP
 14659 0000B89B BE00000000              	mov rsi, 0
 14660                                  .L_tc_recycle_frame_loop_5d18:	 ; start recycle frame loop
 14661 0000B8A0 4883FE04                	cmp rsi, 4
 14662 0000B8A4 7427                    	je .L_tc_recycle_frame_done_5d18
 14663 0000B8A6 B903000000              	mov rcx, 3
 14664 0000B8AB 4829F1                  	sub rcx, rsi
 14665 0000B8AE 48C1E103                	shl rcx, 3
 14666 0000B8B2 4801E1                  	add rcx, rsp ; rcx is the address to move
 14667 0000B8B5 4889F3                  	mov rbx, rsi
 14668 0000B8B8 48C1E303                	shl rbx, 3
 14669 0000B8BC 48F7DB                  	neg rbx
 14670 0000B8BF 4801FB                  	add rbx, rdi ;rbx is the address to move to
 14671 0000B8C2 488B09                  	mov rcx, [rcx]
 14672 0000B8C5 48890B                  	mov [rbx], rcx
 14673 0000B8C8 48FFC6                  	inc rsi
 14674 0000B8CB EBD3                    	jmp .L_tc_recycle_frame_loop_5d18
 14675                                  .L_tc_recycle_frame_done_5d18:	 ; end recycle frame loop
 14676 0000B8CD BB03000000              	mov rbx, 3
 14677 0000B8D2 48C1E303                	shl rbx, 3
 14678 0000B8D6 48F7DB                  	neg rbx
 14679 0000B8D9 4801FB                  	add rbx, rdi
 14680 0000B8DC 4889DC                  	mov rsp, rbx
 14681 0000B8DF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14682 0000B8E3 FFE3                    	jmp rbx
 14683 0000B8E5 EB04                    	jmp .L_if_end_56b4
 14684                                  	.L_if_else_56b4:
 14685 0000B8E7 488B4520                	mov rax, PARAM(0)
 14686                                  	.L_if_end_56b4:
 14687 0000B8EB C9                      	leave
 14688 0000B8EC C21800                  	ret 8 * (2 + 1)
 14689                                  .L_lambda_simple_end_4f87:	; new closure is in rax
 14690 0000B8EF 48890425[90030000]      	mov qword [free_var_114], rax
 14691 0000B8F7 48B8-                   	mov rax, sob_void
 14691 0000B8F9 [0000000000000000] 
 14692 0000B901 C9                      	leave
 14693 0000B902 C21800                  	ret 8 * (2 + 1)
 14694                                  .L_lambda_simple_end_4f85:	; new closure is in rax
 14695                                  	assert_closure(rax)
    65 0000B905 803805              <1>  cmp byte [%1], %2
    66 0000B908 0F8526880000        <1>  jne L_error_incorrect_type
 14696 0000B90E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14697 0000B912 53                      	push rbx
 14698 0000B913 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14699 0000B917 FFD3                    	call rbx
 14700                                  
 14701 0000B919 4889C7                  	mov rdi, rax
 14702 0000B91C E8A46F0000              	call print_sexpr_if_not_void
 14703                                  
 14704 0000B921 488D0425[00000000]      	lea rax, [0 + L_constants]
 14705 0000B929 48890425[98030000]      	mov qword [free_var_115], rax
 14706 0000B931 48B8-                   	mov rax, sob_void
 14706 0000B933 [0000000000000000] 
 14707                                  
 14708 0000B93B 4889C7                  	mov rdi, rax
 14709 0000B93E E8826F0000              	call print_sexpr_if_not_void
 14710                                  
 14711 0000B943 488D0425[00000000]      	lea rax, [0 + L_constants]
 14712 0000B94B 48890425[A0030000]      	mov qword [free_var_116], rax
 14713 0000B953 48B8-                   	mov rax, sob_void
 14713 0000B955 [0000000000000000] 
 14714                                  
 14715 0000B95D 4889C7                  	mov rdi, rax
 14716 0000B960 E8606F0000              	call print_sexpr_if_not_void
 14717                                  
 14718 0000B965 488D0425[00000000]      	lea rax, [0 + L_constants]
 14719 0000B96D 48890425[A8030000]      	mov qword [free_var_117], rax
 14720 0000B975 48B8-                   	mov rax, sob_void
 14720 0000B977 [0000000000000000] 
 14721                                  
 14722 0000B97F 4889C7                  	mov rdi, rax
 14723 0000B982 E83E6F0000              	call print_sexpr_if_not_void
 14724                                  
 14725 0000B987 488D0425[00000000]      	lea rax, [0 + L_constants]
 14726 0000B98F 48890425[B0030000]      	mov qword [free_var_118], rax
 14727 0000B997 48B8-                   	mov rax, sob_void
 14727 0000B999 [0000000000000000] 
 14728                                  
 14729 0000B9A1 4889C7                  	mov rdi, rax
 14730 0000B9A4 E81C6F0000              	call print_sexpr_if_not_void
 14731                                  
 14732 0000B9A9 488D0425[00000000]      	lea rax, [0 + L_constants]
 14733 0000B9B1 48890425[B8030000]      	mov qword [free_var_119], rax
 14734 0000B9B9 48B8-                   	mov rax, sob_void
 14734 0000B9BB [0000000000000000] 
 14735                                  
 14736 0000B9C3 4889C7                  	mov rdi, rax
 14737 0000B9C6 E8FA6E0000              	call print_sexpr_if_not_void
 14738                                  
 14739 0000B9CB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14740 0000B9D0 E8DF6E0000              	call malloc
 14741 0000B9D5 50                      	push rax
 14742 0000B9D6 BF00000000              	mov rdi, 8 * 0	; new rib
 14743 0000B9DB E8D46E0000              	call malloc
 14744 0000B9E0 50                      	push rax
 14745 0000B9E1 BF08000000              	mov rdi, 8 * 1	; extended env
 14746 0000B9E6 E8C96E0000              	call malloc
 14747 0000B9EB 488B7D10                	mov rdi, ENV
 14748 0000B9EF BE00000000              	mov rsi, 0
 14749 0000B9F4 BA01000000              	mov rdx, 1
 14750                                  .L_lambda_simple_env_loop_4f88:	; ext_env[i + 1] <-- env[i]
 14751 0000B9F9 4883FE00                	cmp rsi, 0
 14752 0000B9FD 7410                    	je .L_lambda_simple_env_end_4f88
 14753 0000B9FF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 14754 0000BA03 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14755 0000BA07 48FFC6                  	inc rsi
 14756 0000BA0A 48FFC2                  	inc rdx
 14757 0000BA0D EBEA                    	jmp .L_lambda_simple_env_loop_4f88
 14758                                  .L_lambda_simple_env_end_4f88:
 14759 0000BA0F 5B                      	pop rbx
 14760 0000BA10 BE00000000              	mov rsi, 0
 14761                                  .L_lambda_simple_params_loop_4f88:	; copy params
 14762 0000BA15 4883FE00                	cmp rsi, 0
 14763 0000BA19 740E                    	je .L_lambda_simple_params_end_4f88
 14764 0000BA1B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14765 0000BA20 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14766 0000BA24 48FFC6                  	inc rsi
 14767 0000BA27 EBEC                    	jmp .L_lambda_simple_params_loop_4f88
 14768                                  .L_lambda_simple_params_end_4f88:
 14769 0000BA29 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14770 0000BA2C 4889C3                  	mov rbx, rax
 14771 0000BA2F 58                      	pop rax
 14772 0000BA30 C60005                  	mov byte [rax], T_closure
 14773 0000BA33 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14774 0000BA37 48C74009[44BA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f88
 14775 0000BA3F E969030000              	jmp .L_lambda_simple_end_4f88
 14776                                  .L_lambda_simple_code_4f88:	; lambda-simple body
 14777 0000BA44 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14778 0000BA4A 740B                    	je .L_lambda_simple_arity_check_ok_4f88
 14779 0000BA4C FF742410                	push qword [rsp + 8 * 2]
 14780 0000BA50 6A01                    	push 1
 14781 0000BA52 E9166E0000              	jmp L_error_incorrect_arity_simple
 14782                                  .L_lambda_simple_arity_check_ok_4f88:
 14783 0000BA57 C8000000                	enter 0, 0
 14784 0000BA5B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14785 0000BA60 E84F6E0000              	call malloc
 14786 0000BA65 50                      	push rax
 14787 0000BA66 BF08000000              	mov rdi, 8 * 1	; new rib
 14788 0000BA6B E8446E0000              	call malloc
 14789 0000BA70 50                      	push rax
 14790 0000BA71 BF10000000              	mov rdi, 8 * 2	; extended env
 14791 0000BA76 E8396E0000              	call malloc
 14792 0000BA7B 488B7D10                	mov rdi, ENV
 14793 0000BA7F BE00000000              	mov rsi, 0
 14794 0000BA84 BA01000000              	mov rdx, 1
 14795                                  .L_lambda_opt_env_loop_0c95:	; ext_env[i + 1] <-- env[i]
 14796 0000BA89 4883FE01                	cmp rsi, 1
 14797 0000BA8D 7410                    	je .L_lambda_opt_env_end_0c95
 14798 0000BA8F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 14799 0000BA93 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14800 0000BA97 48FFC6                  	inc rsi
 14801 0000BA9A 48FFC2                  	inc rdx
 14802 0000BA9D EBEA                    	jmp .L_lambda_opt_env_loop_0c95
 14803                                  .L_lambda_opt_env_end_0c95:
 14804 0000BA9F 5B                      	pop rbx
 14805 0000BAA0 BE00000000              	mov rsi, 0
 14806                                  .L_lambda_opt_params_loop_0c95:	; copy params
 14807 0000BAA5 4883FE01                	cmp rsi, 1
 14808 0000BAA9 740E                    	je .L_lambda_opt_params_end_0c95
 14809 0000BAAB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14810 0000BAB0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14811 0000BAB4 48FFC6                  	inc rsi
 14812 0000BAB7 EBEC                    	jmp .L_lambda_opt_params_loop_0c95
 14813                                  .L_lambda_opt_params_end_0c95:
 14814 0000BAB9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14815 0000BABC 4889C3                  	mov rbx, rax
 14816 0000BABF 58                      	pop rax
 14817 0000BAC0 C60005                  	mov byte [rax], T_closure
 14818 0000BAC3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14819 0000BAC7 48C74009[D4BA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c95
 14820 0000BACF E9D5020000              	jmp .L_lambda_opt_end_0c95
 14821                                  .L_lambda_opt_code_0c95:	; lambda-opt body
 14822 0000BAD4 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 14823 0000BAD9 4889FB                  	mov rbx, rdi
 14824 0000BADC 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
 14825 0000BAE0 4883FB00                	cmp rbx, 0
 14826 0000BAE4 7F45                    	jg .L_lambda_opt_arity_check_more_0c95
 14827                                  .L_lambda_opt_arity_check_exact_0c95:	 ; if params in opt is exact
 14828 0000BAE6 4883EC08                	sub rsp, 8
 14829 0000BAEA BE00000000              	mov rsi, 0 ; index
 14830                                  .L_lambda_opt_stack_enlarge_loop_0c95:	 ; stack loop enlarge start
 14831 0000BAEF 4883FE03                	cmp rsi, 3
 14832 0000BAF3 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c95
 14833 0000BAF5 4889F7                  	mov rdi, rsi
 14834 0000BAF8 48FFC7                  	inc rdi
 14835 0000BAFB 48C1E703                	shl rdi, 3
 14836 0000BAFF 4801E7                  	add rdi, rsp
 14837 0000BB02 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 14838 0000BB05 4883EB08                	sub rbx, 8
 14839 0000BB09 488B3F                  	mov rdi, [rdi]
 14840 0000BB0C 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 14841 0000BB0F 48FFC6                  	inc rsi
 14842 0000BB12 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c95
 14843                                  .L_lambda_opt_stack_enlarge_loop_exit_0c95:	 ; end of stack enlarge loop
 14844 0000BB14 48C7442418-             	mov qword [rsp + 3*8], sob_nil
 14844 0000BB19 [01000000]         
 14845 0000BB1D 48C744241001000000      	mov qword [rsp + 2*8], 1
 14846 0000BB26 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c95
 14847                                  .L_lambda_opt_arity_check_more_0c95:	 ; if params in opt is more
 14848 0000BB2B 48B8-                   	mov rax, sob_nil
 14848 0000BB2D [0100000000000000] 
 14849 0000BB35 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 14850 0000BB38 48FFCE                  	dec rsi
 14851                                  .L_lambda_opt_list_create_loop_0c95:	; start of list creation loop
 14852 0000BB3B 4883FEFF                	cmp rsi, -1
 14853 0000BB3F 7422                    	je .L_lambda_opt_list_create_loop_exit_0c95
 14854 0000BB41 488D4E03                	lea rcx, [rsi + (3 + 0)]
 14855 0000BB45 48C1E103                	shl rcx, 3
 14856 0000BB49 4801E1                  	add rcx, rsp
 14857 0000BB4C 488B09                  	mov rcx, [rcx]
 14858 0000BB4F 56                      	push rsi ; save params
 14859 0000BB50 53                      	push rbx
 14860                                  
 14861 0000BB51 50                      	push rax ; cdr
 14862 0000BB52 51                      	push rcx ; car
 14863 0000BB53 6A02                    	push qword 2 ; push num of args
 14864 0000BB55 6A01                    	push qword 1 ; push garbage as env
 14865 0000BB57 E8DF760000              	call L_code_ptr_cons
 14866                                  
 14867 0000BB5C 5B                      	pop rbx ; restore params
 14868 0000BB5D 5E                      	pop rsi
 14869 0000BB5E 48FFCE                  	dec rsi
 14870 0000BB61 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c95
 14871                                  .L_lambda_opt_list_create_loop_exit_0c95:	; end of list creation loop
 14872 0000BB63 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 14873 0000BB68 4883C302                	add rbx, 2
 14874 0000BB6C 4889DF                  	mov rdi, rbx
 14875 0000BB6F 48C1E703                	shl rdi,3
 14876 0000BB73 4801E7                  	add rdi, rsp
 14877 0000BB76 488907                  	mov [rdi], rax
 14878 0000BB79 BE00000000              	mov rsi, 0 ;index
 14879                                  .L_lambda_opt_stack_shrink_loop_0c95:	; start of stack shrink loop
 14880 0000BB7E 4883FE03                	cmp rsi, 3
 14881 0000BB82 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c95
 14882 0000BB84 BF02000000              	mov rdi, 2
 14883 0000BB89 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 14884 0000BB8C 4889D9                  	mov rcx, rbx
 14885 0000BB8F 4829F1                  	sub rcx, rsi
 14886 0000BB92 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 14887 0000BB95 4889FA                  	mov rdx, rdi
 14888 0000BB98 48C1E203                	shl rdx, 3
 14889 0000BB9C 4801E2                  	add rdx, rsp
 14890 0000BB9F 48C1E103                	shl rcx, 3
 14891 0000BBA3 4801E1                  	add rcx, rsp
 14892 0000BBA6 488B12                  	mov rdx, [rdx]
 14893 0000BBA9 488911                  	mov [rcx], rdx
 14894 0000BBAC 48FFC6                  	inc rsi
 14895 0000BBAF EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c95
 14896                                  .L_lambda_opt_stack_shrink_loop_exit_0c95:	; end of stack shrink loop
 14897 0000BBB1 4883EB02                	sub rbx, 2 ; rbx has number of args
 14898 0000BBB5 4883EB01                	sub rbx, 1
 14899 0000BBB9 48C1E303                	shl rbx, 3
 14900 0000BBBD 4801DC                  	add rsp, rbx
 14901 0000BBC0 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 14902                                  .L_lambda_opt_stack_adjusted_0c95:
 14903 0000BBC9 C8000000                	enter 0, 0
 14904 0000BBCD 488B4520                	mov rax, PARAM(0)
 14905 0000BBD1 50                      	push rax
 14906 0000BBD2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14907 0000BBD7 E8D86C0000              	call malloc
 14908 0000BBDC 50                      	push rax
 14909 0000BBDD BF08000000              	mov rdi, 8 * 1	; new rib
 14910 0000BBE2 E8CD6C0000              	call malloc
 14911 0000BBE7 50                      	push rax
 14912 0000BBE8 BF18000000              	mov rdi, 8 * 3	; extended env
 14913 0000BBED E8C26C0000              	call malloc
 14914 0000BBF2 488B7D10                	mov rdi, ENV
 14915 0000BBF6 BE00000000              	mov rsi, 0
 14916 0000BBFB BA01000000              	mov rdx, 1
 14917                                  .L_lambda_simple_env_loop_4f89:	; ext_env[i + 1] <-- env[i]
 14918 0000BC00 4883FE02                	cmp rsi, 2
 14919 0000BC04 7410                    	je .L_lambda_simple_env_end_4f89
 14920 0000BC06 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 14921 0000BC0A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14922 0000BC0E 48FFC6                  	inc rsi
 14923 0000BC11 48FFC2                  	inc rdx
 14924 0000BC14 EBEA                    	jmp .L_lambda_simple_env_loop_4f89
 14925                                  .L_lambda_simple_env_end_4f89:
 14926 0000BC16 5B                      	pop rbx
 14927 0000BC17 BE00000000              	mov rsi, 0
 14928                                  .L_lambda_simple_params_loop_4f89:	; copy params
 14929 0000BC1C 4883FE01                	cmp rsi, 1
 14930 0000BC20 740E                    	je .L_lambda_simple_params_end_4f89
 14931 0000BC22 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14932 0000BC27 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14933 0000BC2B 48FFC6                  	inc rsi
 14934 0000BC2E EBEC                    	jmp .L_lambda_simple_params_loop_4f89
 14935                                  .L_lambda_simple_params_end_4f89:
 14936 0000BC30 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14937 0000BC33 4889C3                  	mov rbx, rax
 14938 0000BC36 58                      	pop rax
 14939 0000BC37 C60005                  	mov byte [rax], T_closure
 14940 0000BC3A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14941 0000BC3E 48C74009[4BBC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f89
 14942 0000BC46 E9B7000000              	jmp .L_lambda_simple_end_4f89
 14943                                  .L_lambda_simple_code_4f89:	; lambda-simple body
 14944 0000BC4B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14945 0000BC51 740B                    	je .L_lambda_simple_arity_check_ok_4f89
 14946 0000BC53 FF742410                	push qword [rsp + 8 * 2]
 14947 0000BC57 6A01                    	push 1
 14948 0000BC59 E90F6C0000              	jmp L_error_incorrect_arity_simple
 14949                                  .L_lambda_simple_arity_check_ok_4f89:
 14950 0000BC5E C8000000                	enter 0, 0
 14951 0000BC62 488B4520                	mov rax, PARAM(0)
 14952 0000BC66 50                      	push rax
 14953 0000BC67 6A01                    	push 1
 14954 0000BC69 488B0425[88030000]      	mov rax, qword [free_var_113]
 14955                                  	assert_closure(rax)
    65 0000BC71 803805              <1>  cmp byte [%1], %2
    66 0000BC74 0F85BA840000        <1>  jne L_error_incorrect_type
 14956 0000BC7A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14957 0000BC7E 53                      	push rbx
 14958 0000BC7F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14959 0000BC83 FFD3                    	call rbx
 14960 0000BC85 50                      	push rax
 14961 0000BC86 6A01                    	push 1
 14962 0000BC88 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14963                                  	assert_closure(rax)
    65 0000BC90 803805              <1>  cmp byte [%1], %2
    66 0000BC93 0F859B840000        <1>  jne L_error_incorrect_type
 14964 0000BC99 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14965 0000BC9D 53                      	push rbx
 14966 0000BC9E FF7508                  	push RET_ADDR
 14967 0000BCA1 488B7D18                	mov rdi, COUNT
 14968 0000BCA5 4883C703                	add rdi, 3
 14969 0000BCA9 48C1E703                	shl rdi, 3
 14970 0000BCAD 4801EF                  	add rdi, rbp
 14971 0000BCB0 488B6D00                	mov rbp, OLD_RDP
 14972 0000BCB4 BE00000000              	mov rsi, 0
 14973                                  .L_tc_recycle_frame_loop_5d1a:	 ; start recycle frame loop
 14974 0000BCB9 4883FE04                	cmp rsi, 4
 14975 0000BCBD 7427                    	je .L_tc_recycle_frame_done_5d1a
 14976 0000BCBF B903000000              	mov rcx, 3
 14977 0000BCC4 4829F1                  	sub rcx, rsi
 14978 0000BCC7 48C1E103                	shl rcx, 3
 14979 0000BCCB 4801E1                  	add rcx, rsp ; rcx is the address to move
 14980 0000BCCE 4889F3                  	mov rbx, rsi
 14981 0000BCD1 48C1E303                	shl rbx, 3
 14982 0000BCD5 48F7DB                  	neg rbx
 14983 0000BCD8 4801FB                  	add rbx, rdi ;rbx is the address to move to
 14984 0000BCDB 488B09                  	mov rcx, [rcx]
 14985 0000BCDE 48890B                  	mov [rbx], rcx
 14986 0000BCE1 48FFC6                  	inc rsi
 14987 0000BCE4 EBD3                    	jmp .L_tc_recycle_frame_loop_5d1a
 14988                                  .L_tc_recycle_frame_done_5d1a:	 ; end recycle frame loop
 14989 0000BCE6 BB03000000              	mov rbx, 3
 14990 0000BCEB 48C1E303                	shl rbx, 3
 14991 0000BCEF 48F7DB                  	neg rbx
 14992 0000BCF2 4801FB                  	add rbx, rdi
 14993 0000BCF5 4889DC                  	mov rsp, rbx
 14994 0000BCF8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14995 0000BCFC FFE3                    	jmp rbx
 14996 0000BCFE C9                      	leave
 14997 0000BCFF C21800                  	ret 8 * (2 + 1)
 14998                                  .L_lambda_simple_end_4f89:	; new closure is in rax
 14999 0000BD02 50                      	push rax
 15000 0000BD03 6A02                    	push 2
 15001 0000BD05 488B0425[D8020000]      	mov rax, qword [free_var_91]
 15002                                  	assert_closure(rax)
    65 0000BD0D 803805              <1>  cmp byte [%1], %2
    66 0000BD10 0F851E840000        <1>  jne L_error_incorrect_type
 15003 0000BD16 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15004 0000BD1A 53                      	push rbx
 15005 0000BD1B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15006 0000BD1F FFD3                    	call rbx
 15007 0000BD21 50                      	push rax
 15008 0000BD22 488B4510                	mov rax, qword [rbp + 8*2]
 15009 0000BD26 488B00                  	mov rax, qword [rax + 8*0]
 15010 0000BD29 488B00                  	mov rax, qword [rax + 8*0]
 15011 0000BD2C 50                      	push rax
 15012 0000BD2D 6A02                    	push 2
 15013 0000BD2F 488B0425[C8020000]      	mov rax, qword [free_var_89]
 15014                                  	assert_closure(rax)
    65 0000BD37 803805              <1>  cmp byte [%1], %2
    66 0000BD3A 0F85F4830000        <1>  jne L_error_incorrect_type
 15015 0000BD40 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15016 0000BD44 53                      	push rbx
 15017 0000BD45 FF7508                  	push RET_ADDR
 15018 0000BD48 488B7D18                	mov rdi, COUNT
 15019 0000BD4C 4883C703                	add rdi, 3
 15020 0000BD50 48C1E703                	shl rdi, 3
 15021 0000BD54 4801EF                  	add rdi, rbp
 15022 0000BD57 488B6D00                	mov rbp, OLD_RDP
 15023 0000BD5B BE00000000              	mov rsi, 0
 15024                                  .L_tc_recycle_frame_loop_5d19:	 ; start recycle frame loop
 15025 0000BD60 4883FE05                	cmp rsi, 5
 15026 0000BD64 7427                    	je .L_tc_recycle_frame_done_5d19
 15027 0000BD66 B904000000              	mov rcx, 4
 15028 0000BD6B 4829F1                  	sub rcx, rsi
 15029 0000BD6E 48C1E103                	shl rcx, 3
 15030 0000BD72 4801E1                  	add rcx, rsp ; rcx is the address to move
 15031 0000BD75 4889F3                  	mov rbx, rsi
 15032 0000BD78 48C1E303                	shl rbx, 3
 15033 0000BD7C 48F7DB                  	neg rbx
 15034 0000BD7F 4801FB                  	add rbx, rdi ;rbx is the address to move to
 15035 0000BD82 488B09                  	mov rcx, [rcx]
 15036 0000BD85 48890B                  	mov [rbx], rcx
 15037 0000BD88 48FFC6                  	inc rsi
 15038 0000BD8B EBD3                    	jmp .L_tc_recycle_frame_loop_5d19
 15039                                  .L_tc_recycle_frame_done_5d19:	 ; end recycle frame loop
 15040 0000BD8D BB04000000              	mov rbx, 4
 15041 0000BD92 48C1E303                	shl rbx, 3
 15042 0000BD96 48F7DB                  	neg rbx
 15043 0000BD99 4801FB                  	add rbx, rdi
 15044 0000BD9C 4889DC                  	mov rsp, rbx
 15045 0000BD9F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15046 0000BDA3 FFE3                    	jmp rbx
 15047 0000BDA5 C9                      	leave
 15048 0000BDA6 C21800                  	ret AND_KILL_FRAME(1)
 15049                                  .L_lambda_opt_end_0c95:	; new closure is in rax
 15050 0000BDA9 C9                      	leave
 15051 0000BDAA C21800                  	ret 8 * (2 + 1)
 15052                                  .L_lambda_simple_end_4f88:	; new closure is in rax
 15053 0000BDAD 50                      	push rax
 15054 0000BDAE 6A01                    	push 1
 15055 0000BDB0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15056 0000BDB5 E8FA6A0000              	call malloc
 15057 0000BDBA 50                      	push rax
 15058 0000BDBB BF00000000              	mov rdi, 8 * 0	; new rib
 15059 0000BDC0 E8EF6A0000              	call malloc
 15060 0000BDC5 50                      	push rax
 15061 0000BDC6 BF08000000              	mov rdi, 8 * 1	; extended env
 15062 0000BDCB E8E46A0000              	call malloc
 15063 0000BDD0 488B7D10                	mov rdi, ENV
 15064 0000BDD4 BE00000000              	mov rsi, 0
 15065 0000BDD9 BA01000000              	mov rdx, 1
 15066                                  .L_lambda_simple_env_loop_4f8a:	; ext_env[i + 1] <-- env[i]
 15067 0000BDDE 4883FE00                	cmp rsi, 0
 15068 0000BDE2 7410                    	je .L_lambda_simple_env_end_4f8a
 15069 0000BDE4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 15070 0000BDE8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15071 0000BDEC 48FFC6                  	inc rsi
 15072 0000BDEF 48FFC2                  	inc rdx
 15073 0000BDF2 EBEA                    	jmp .L_lambda_simple_env_loop_4f8a
 15074                                  .L_lambda_simple_env_end_4f8a:
 15075 0000BDF4 5B                      	pop rbx
 15076 0000BDF5 BE00000000              	mov rsi, 0
 15077                                  .L_lambda_simple_params_loop_4f8a:	; copy params
 15078 0000BDFA 4883FE00                	cmp rsi, 0
 15079 0000BDFE 740E                    	je .L_lambda_simple_params_end_4f8a
 15080 0000BE00 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15081 0000BE05 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15082 0000BE09 48FFC6                  	inc rsi
 15083 0000BE0C EBEC                    	jmp .L_lambda_simple_params_loop_4f8a
 15084                                  .L_lambda_simple_params_end_4f8a:
 15085 0000BE0E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15086 0000BE11 4889C3                  	mov rbx, rax
 15087 0000BE14 58                      	pop rax
 15088 0000BE15 C60005                  	mov byte [rax], T_closure
 15089 0000BE18 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15090 0000BE1C 48C74009[29BE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f8a
 15091 0000BE24 E924010000              	jmp .L_lambda_simple_end_4f8a
 15092                                  .L_lambda_simple_code_4f8a:	; lambda-simple body
 15093 0000BE29 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15094 0000BE2F 740B                    	je .L_lambda_simple_arity_check_ok_4f8a
 15095 0000BE31 FF742410                	push qword [rsp + 8 * 2]
 15096 0000BE35 6A01                    	push 1
 15097 0000BE37 E9316A0000              	jmp L_error_incorrect_arity_simple
 15098                                  .L_lambda_simple_arity_check_ok_4f8a:
 15099 0000BE3C C8000000                	enter 0, 0
 15100 0000BE40 488B0425[30030000]      	mov rax, qword [free_var_102]
 15101 0000BE48 50                      	push rax
 15102 0000BE49 6A01                    	push 1
 15103 0000BE4B 488B4520                	mov rax, PARAM(0)
 15104                                  	assert_closure(rax)
    65 0000BE4F 803805              <1>  cmp byte [%1], %2
    66 0000BE52 0F85DC820000        <1>  jne L_error_incorrect_type
 15105 0000BE58 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15106 0000BE5C 53                      	push rbx
 15107 0000BE5D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15108 0000BE61 FFD3                    	call rbx
 15109 0000BE63 48890425[98030000]      	mov qword [free_var_115], rax
 15110 0000BE6B 48B8-                   	mov rax, sob_void
 15110 0000BE6D [0000000000000000] 
 15111                                  
 15112 0000BE75 488B0425[38030000]      	mov rax, qword [free_var_103]
 15113 0000BE7D 50                      	push rax
 15114 0000BE7E 6A01                    	push 1
 15115 0000BE80 488B4520                	mov rax, PARAM(0)
 15116                                  	assert_closure(rax)
    65 0000BE84 803805              <1>  cmp byte [%1], %2
    66 0000BE87 0F85A7820000        <1>  jne L_error_incorrect_type
 15117 0000BE8D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15118 0000BE91 53                      	push rbx
 15119 0000BE92 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15120 0000BE96 FFD3                    	call rbx
 15121 0000BE98 48890425[A0030000]      	mov qword [free_var_116], rax
 15122 0000BEA0 48B8-                   	mov rax, sob_void
 15122 0000BEA2 [0000000000000000] 
 15123                                  
 15124 0000BEAA 488B0425[50030000]      	mov rax, qword [free_var_106]
 15125 0000BEB2 50                      	push rax
 15126 0000BEB3 6A01                    	push 1
 15127 0000BEB5 488B4520                	mov rax, PARAM(0)
 15128                                  	assert_closure(rax)
    65 0000BEB9 803805              <1>  cmp byte [%1], %2
    66 0000BEBC 0F8572820000        <1>  jne L_error_incorrect_type
 15129 0000BEC2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15130 0000BEC6 53                      	push rbx
 15131 0000BEC7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15132 0000BECB FFD3                    	call rbx
 15133 0000BECD 48890425[A8030000]      	mov qword [free_var_117], rax
 15134 0000BED5 48B8-                   	mov rax, sob_void
 15134 0000BED7 [0000000000000000] 
 15135                                  
 15136 0000BEDF 488B0425[40030000]      	mov rax, qword [free_var_104]
 15137 0000BEE7 50                      	push rax
 15138 0000BEE8 6A01                    	push 1
 15139 0000BEEA 488B4520                	mov rax, PARAM(0)
 15140                                  	assert_closure(rax)
    65 0000BEEE 803805              <1>  cmp byte [%1], %2
    66 0000BEF1 0F853D820000        <1>  jne L_error_incorrect_type
 15141 0000BEF7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15142 0000BEFB 53                      	push rbx
 15143 0000BEFC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15144 0000BF00 FFD3                    	call rbx
 15145 0000BF02 48890425[B0030000]      	mov qword [free_var_118], rax
 15146 0000BF0A 48B8-                   	mov rax, sob_void
 15146 0000BF0C [0000000000000000] 
 15147                                  
 15148 0000BF14 488B0425[48030000]      	mov rax, qword [free_var_105]
 15149 0000BF1C 50                      	push rax
 15150 0000BF1D 6A01                    	push 1
 15151 0000BF1F 488B4520                	mov rax, PARAM(0)
 15152                                  	assert_closure(rax)
    65 0000BF23 803805              <1>  cmp byte [%1], %2
    66 0000BF26 0F8508820000        <1>  jne L_error_incorrect_type
 15153 0000BF2C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15154 0000BF30 53                      	push rbx
 15155 0000BF31 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15156 0000BF35 FFD3                    	call rbx
 15157 0000BF37 48890425[B8030000]      	mov qword [free_var_119], rax
 15158 0000BF3F 48B8-                   	mov rax, sob_void
 15158 0000BF41 [0000000000000000] 
 15159 0000BF49 C9                      	leave
 15160 0000BF4A C21800                  	ret 8 * (2 + 1)
 15161                                  .L_lambda_simple_end_4f8a:	; new closure is in rax
 15162                                  	assert_closure(rax)
    65 0000BF4D 803805              <1>  cmp byte [%1], %2
    66 0000BF50 0F85DE810000        <1>  jne L_error_incorrect_type
 15163 0000BF56 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15164 0000BF5A 53                      	push rbx
 15165 0000BF5B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15166 0000BF5F FFD3                    	call rbx
 15167                                  
 15168 0000BF61 4889C7                  	mov rdi, rax
 15169 0000BF64 E85C690000              	call print_sexpr_if_not_void
 15170                                  
 15171 0000BF69 488D0425[00000000]      	lea rax, [0 + L_constants]
 15172 0000BF71 48890425[C0030000]      	mov qword [free_var_120], rax
 15173 0000BF79 48B8-                   	mov rax, sob_void
 15173 0000BF7B [0000000000000000] 
 15174                                  
 15175 0000BF83 4889C7                  	mov rdi, rax
 15176 0000BF86 E83A690000              	call print_sexpr_if_not_void
 15177                                  
 15178 0000BF8B 488D0425[00000000]      	lea rax, [0 + L_constants]
 15179 0000BF93 48890425[C8030000]      	mov qword [free_var_121], rax
 15180 0000BF9B 48B8-                   	mov rax, sob_void
 15180 0000BF9D [0000000000000000] 
 15181                                  
 15182 0000BFA5 4889C7                  	mov rdi, rax
 15183 0000BFA8 E818690000              	call print_sexpr_if_not_void
 15184                                  
 15185 0000BFAD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15186 0000BFB2 E8FD680000              	call malloc
 15187 0000BFB7 50                      	push rax
 15188 0000BFB8 BF00000000              	mov rdi, 8 * 0	; new rib
 15189 0000BFBD E8F2680000              	call malloc
 15190 0000BFC2 50                      	push rax
 15191 0000BFC3 BF08000000              	mov rdi, 8 * 1	; extended env
 15192 0000BFC8 E8E7680000              	call malloc
 15193 0000BFCD 488B7D10                	mov rdi, ENV
 15194 0000BFD1 BE00000000              	mov rsi, 0
 15195 0000BFD6 BA01000000              	mov rdx, 1
 15196                                  .L_lambda_simple_env_loop_4f8b:	; ext_env[i + 1] <-- env[i]
 15197 0000BFDB 4883FE00                	cmp rsi, 0
 15198 0000BFDF 7410                    	je .L_lambda_simple_env_end_4f8b
 15199 0000BFE1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 15200 0000BFE5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15201 0000BFE9 48FFC6                  	inc rsi
 15202 0000BFEC 48FFC2                  	inc rdx
 15203 0000BFEF EBEA                    	jmp .L_lambda_simple_env_loop_4f8b
 15204                                  .L_lambda_simple_env_end_4f8b:
 15205 0000BFF1 5B                      	pop rbx
 15206 0000BFF2 BE00000000              	mov rsi, 0
 15207                                  .L_lambda_simple_params_loop_4f8b:	; copy params
 15208 0000BFF7 4883FE00                	cmp rsi, 0
 15209 0000BFFB 740E                    	je .L_lambda_simple_params_end_4f8b
 15210 0000BFFD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15211 0000C002 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15212 0000C006 48FFC6                  	inc rsi
 15213 0000C009 EBEC                    	jmp .L_lambda_simple_params_loop_4f8b
 15214                                  .L_lambda_simple_params_end_4f8b:
 15215 0000C00B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15216 0000C00E 4889C3                  	mov rbx, rax
 15217 0000C011 58                      	pop rax
 15218 0000C012 C60005                  	mov byte [rax], T_closure
 15219 0000C015 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15220 0000C019 48C74009[26C00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f8b
 15221 0000C021 E975010000              	jmp .L_lambda_simple_end_4f8b
 15222                                  .L_lambda_simple_code_4f8b:	; lambda-simple body
 15223 0000C026 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15224 0000C02C 740B                    	je .L_lambda_simple_arity_check_ok_4f8b
 15225 0000C02E FF742410                	push qword [rsp + 8 * 2]
 15226 0000C032 6A01                    	push 1
 15227 0000C034 E934680000              	jmp L_error_incorrect_arity_simple
 15228                                  .L_lambda_simple_arity_check_ok_4f8b:
 15229 0000C039 C8000000                	enter 0, 0
 15230 0000C03D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15231 0000C042 E86D680000              	call malloc
 15232 0000C047 50                      	push rax
 15233 0000C048 BF08000000              	mov rdi, 8 * 1	; new rib
 15234 0000C04D E862680000              	call malloc
 15235 0000C052 50                      	push rax
 15236 0000C053 BF10000000              	mov rdi, 8 * 2	; extended env
 15237 0000C058 E857680000              	call malloc
 15238 0000C05D 488B7D10                	mov rdi, ENV
 15239 0000C061 BE00000000              	mov rsi, 0
 15240 0000C066 BA01000000              	mov rdx, 1
 15241                                  .L_lambda_simple_env_loop_4f8c:	; ext_env[i + 1] <-- env[i]
 15242 0000C06B 4883FE01                	cmp rsi, 1
 15243 0000C06F 7410                    	je .L_lambda_simple_env_end_4f8c
 15244 0000C071 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 15245 0000C075 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15246 0000C079 48FFC6                  	inc rsi
 15247 0000C07C 48FFC2                  	inc rdx
 15248 0000C07F EBEA                    	jmp .L_lambda_simple_env_loop_4f8c
 15249                                  .L_lambda_simple_env_end_4f8c:
 15250 0000C081 5B                      	pop rbx
 15251 0000C082 BE00000000              	mov rsi, 0
 15252                                  .L_lambda_simple_params_loop_4f8c:	; copy params
 15253 0000C087 4883FE01                	cmp rsi, 1
 15254 0000C08B 740E                    	je .L_lambda_simple_params_end_4f8c
 15255 0000C08D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15256 0000C092 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15257 0000C096 48FFC6                  	inc rsi
 15258 0000C099 EBEC                    	jmp .L_lambda_simple_params_loop_4f8c
 15259                                  .L_lambda_simple_params_end_4f8c:
 15260 0000C09B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15261 0000C09E 4889C3                  	mov rbx, rax
 15262 0000C0A1 58                      	pop rax
 15263 0000C0A2 C60005                  	mov byte [rax], T_closure
 15264 0000C0A5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15265 0000C0A9 48C74009[B6C00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f8c
 15266 0000C0B1 E9E1000000              	jmp .L_lambda_simple_end_4f8c
 15267                                  .L_lambda_simple_code_4f8c:	; lambda-simple body
 15268 0000C0B6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15269 0000C0BC 740B                    	je .L_lambda_simple_arity_check_ok_4f8c
 15270 0000C0BE FF742410                	push qword [rsp + 8 * 2]
 15271 0000C0C2 6A01                    	push 1
 15272 0000C0C4 E9A4670000              	jmp L_error_incorrect_arity_simple
 15273                                  .L_lambda_simple_arity_check_ok_4f8c:
 15274 0000C0C9 C8000000                	enter 0, 0
 15275 0000C0CD 488B4520                	mov rax, PARAM(0)
 15276 0000C0D1 50                      	push rax
 15277 0000C0D2 6A01                    	push 1
 15278 0000C0D4 488B0425[D8030000]      	mov rax, qword [free_var_123]
 15279                                  	assert_closure(rax)
    65 0000C0DC 803805              <1>  cmp byte [%1], %2
    66 0000C0DF 0F854F800000        <1>  jne L_error_incorrect_type
 15280 0000C0E5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15281 0000C0E9 53                      	push rbx
 15282 0000C0EA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15283 0000C0EE FFD3                    	call rbx
 15284 0000C0F0 50                      	push rax
 15285 0000C0F1 488B4510                	mov rax, qword [rbp + 8*2]
 15286 0000C0F5 488B00                  	mov rax, qword [rax + 8*0]
 15287 0000C0F8 488B00                  	mov rax, qword [rax + 8*0]
 15288 0000C0FB 50                      	push rax
 15289 0000C0FC 6A02                    	push 2
 15290 0000C0FE 488B0425[D8020000]      	mov rax, qword [free_var_91]
 15291                                  	assert_closure(rax)
    65 0000C106 803805              <1>  cmp byte [%1], %2
    66 0000C109 0F8525800000        <1>  jne L_error_incorrect_type
 15292 0000C10F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15293 0000C113 53                      	push rbx
 15294 0000C114 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15295 0000C118 FFD3                    	call rbx
 15296 0000C11A 50                      	push rax
 15297 0000C11B 6A01                    	push 1
 15298 0000C11D 488B0425[D0030000]      	mov rax, qword [free_var_122]
 15299                                  	assert_closure(rax)
    65 0000C125 803805              <1>  cmp byte [%1], %2
    66 0000C128 0F8506800000        <1>  jne L_error_incorrect_type
 15300 0000C12E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15301 0000C132 53                      	push rbx
 15302 0000C133 FF7508                  	push RET_ADDR
 15303 0000C136 488B7D18                	mov rdi, COUNT
 15304 0000C13A 4883C703                	add rdi, 3
 15305 0000C13E 48C1E703                	shl rdi, 3
 15306 0000C142 4801EF                  	add rdi, rbp
 15307 0000C145 488B6D00                	mov rbp, OLD_RDP
 15308 0000C149 BE00000000              	mov rsi, 0
 15309                                  .L_tc_recycle_frame_loop_5d1b:	 ; start recycle frame loop
 15310 0000C14E 4883FE04                	cmp rsi, 4
 15311 0000C152 7427                    	je .L_tc_recycle_frame_done_5d1b
 15312 0000C154 B903000000              	mov rcx, 3
 15313 0000C159 4829F1                  	sub rcx, rsi
 15314 0000C15C 48C1E103                	shl rcx, 3
 15315 0000C160 4801E1                  	add rcx, rsp ; rcx is the address to move
 15316 0000C163 4889F3                  	mov rbx, rsi
 15317 0000C166 48C1E303                	shl rbx, 3
 15318 0000C16A 48F7DB                  	neg rbx
 15319 0000C16D 4801FB                  	add rbx, rdi ;rbx is the address to move to
 15320 0000C170 488B09                  	mov rcx, [rcx]
 15321 0000C173 48890B                  	mov [rbx], rcx
 15322 0000C176 48FFC6                  	inc rsi
 15323 0000C179 EBD3                    	jmp .L_tc_recycle_frame_loop_5d1b
 15324                                  .L_tc_recycle_frame_done_5d1b:	 ; end recycle frame loop
 15325 0000C17B BB03000000              	mov rbx, 3
 15326 0000C180 48C1E303                	shl rbx, 3
 15327 0000C184 48F7DB                  	neg rbx
 15328 0000C187 4801FB                  	add rbx, rdi
 15329 0000C18A 4889DC                  	mov rsp, rbx
 15330 0000C18D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15331 0000C191 FFE3                    	jmp rbx
 15332 0000C193 C9                      	leave
 15333 0000C194 C21800                  	ret 8 * (2 + 1)
 15334                                  .L_lambda_simple_end_4f8c:	; new closure is in rax
 15335 0000C197 C9                      	leave
 15336 0000C198 C21800                  	ret 8 * (2 + 1)
 15337                                  .L_lambda_simple_end_4f8b:	; new closure is in rax
 15338 0000C19B 50                      	push rax
 15339 0000C19C 6A01                    	push 1
 15340 0000C19E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15341 0000C1A3 E80C670000              	call malloc
 15342 0000C1A8 50                      	push rax
 15343 0000C1A9 BF00000000              	mov rdi, 8 * 0	; new rib
 15344 0000C1AE E801670000              	call malloc
 15345 0000C1B3 50                      	push rax
 15346 0000C1B4 BF08000000              	mov rdi, 8 * 1	; extended env
 15347 0000C1B9 E8F6660000              	call malloc
 15348 0000C1BE 488B7D10                	mov rdi, ENV
 15349 0000C1C2 BE00000000              	mov rsi, 0
 15350 0000C1C7 BA01000000              	mov rdx, 1
 15351                                  .L_lambda_simple_env_loop_4f8d:	; ext_env[i + 1] <-- env[i]
 15352 0000C1CC 4883FE00                	cmp rsi, 0
 15353 0000C1D0 7410                    	je .L_lambda_simple_env_end_4f8d
 15354 0000C1D2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 15355 0000C1D6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15356 0000C1DA 48FFC6                  	inc rsi
 15357 0000C1DD 48FFC2                  	inc rdx
 15358 0000C1E0 EBEA                    	jmp .L_lambda_simple_env_loop_4f8d
 15359                                  .L_lambda_simple_env_end_4f8d:
 15360 0000C1E2 5B                      	pop rbx
 15361 0000C1E3 BE00000000              	mov rsi, 0
 15362                                  .L_lambda_simple_params_loop_4f8d:	; copy params
 15363 0000C1E8 4883FE00                	cmp rsi, 0
 15364 0000C1EC 740E                    	je .L_lambda_simple_params_end_4f8d
 15365 0000C1EE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15366 0000C1F3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15367 0000C1F7 48FFC6                  	inc rsi
 15368 0000C1FA EBEC                    	jmp .L_lambda_simple_params_loop_4f8d
 15369                                  .L_lambda_simple_params_end_4f8d:
 15370 0000C1FC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15371 0000C1FF 4889C3                  	mov rbx, rax
 15372 0000C202 58                      	pop rax
 15373 0000C203 C60005                  	mov byte [rax], T_closure
 15374 0000C206 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15375 0000C20A 48C74009[17C20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f8d
 15376 0000C212 E985000000              	jmp .L_lambda_simple_end_4f8d
 15377                                  .L_lambda_simple_code_4f8d:	; lambda-simple body
 15378 0000C217 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15379 0000C21D 740B                    	je .L_lambda_simple_arity_check_ok_4f8d
 15380 0000C21F FF742410                	push qword [rsp + 8 * 2]
 15381 0000C223 6A01                    	push 1
 15382 0000C225 E943660000              	jmp L_error_incorrect_arity_simple
 15383                                  .L_lambda_simple_arity_check_ok_4f8d:
 15384 0000C22A C8000000                	enter 0, 0
 15385 0000C22E 488B0425[88030000]      	mov rax, qword [free_var_113]
 15386 0000C236 50                      	push rax
 15387 0000C237 6A01                    	push 1
 15388 0000C239 488B4520                	mov rax, PARAM(0)
 15389                                  	assert_closure(rax)
    65 0000C23D 803805              <1>  cmp byte [%1], %2
    66 0000C240 0F85EE7E0000        <1>  jne L_error_incorrect_type
 15390 0000C246 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15391 0000C24A 53                      	push rbx
 15392 0000C24B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15393 0000C24F FFD3                    	call rbx
 15394 0000C251 48890425[C0030000]      	mov qword [free_var_120], rax
 15395 0000C259 48B8-                   	mov rax, sob_void
 15395 0000C25B [0000000000000000] 
 15396                                  
 15397 0000C263 488B0425[90030000]      	mov rax, qword [free_var_114]
 15398 0000C26B 50                      	push rax
 15399 0000C26C 6A01                    	push 1
 15400 0000C26E 488B4520                	mov rax, PARAM(0)
 15401                                  	assert_closure(rax)
    65 0000C272 803805              <1>  cmp byte [%1], %2
    66 0000C275 0F85B97E0000        <1>  jne L_error_incorrect_type
 15402 0000C27B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15403 0000C27F 53                      	push rbx
 15404 0000C280 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15405 0000C284 FFD3                    	call rbx
 15406 0000C286 48890425[C8030000]      	mov qword [free_var_121], rax
 15407 0000C28E 48B8-                   	mov rax, sob_void
 15407 0000C290 [0000000000000000] 
 15408 0000C298 C9                      	leave
 15409 0000C299 C21800                  	ret 8 * (2 + 1)
 15410                                  .L_lambda_simple_end_4f8d:	; new closure is in rax
 15411                                  	assert_closure(rax)
    65 0000C29C 803805              <1>  cmp byte [%1], %2
    66 0000C29F 0F858F7E0000        <1>  jne L_error_incorrect_type
 15412 0000C2A5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15413 0000C2A9 53                      	push rbx
 15414 0000C2AA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15415 0000C2AE FFD3                    	call rbx
 15416                                  
 15417 0000C2B0 4889C7                  	mov rdi, rax
 15418 0000C2B3 E80D660000              	call print_sexpr_if_not_void
 15419                                  
 15420 0000C2B8 488D0425[00000000]      	lea rax, [0 + L_constants]
 15421 0000C2C0 48890425[E0030000]      	mov qword [free_var_124], rax
 15422 0000C2C8 48B8-                   	mov rax, sob_void
 15422 0000C2CA [0000000000000000] 
 15423                                  
 15424 0000C2D2 4889C7                  	mov rdi, rax
 15425 0000C2D5 E8EB650000              	call print_sexpr_if_not_void
 15426                                  
 15427 0000C2DA 488D0425[00000000]      	lea rax, [0 + L_constants]
 15428 0000C2E2 48890425[E8030000]      	mov qword [free_var_125], rax
 15429 0000C2EA 48B8-                   	mov rax, sob_void
 15429 0000C2EC [0000000000000000] 
 15430                                  
 15431 0000C2F4 4889C7                  	mov rdi, rax
 15432 0000C2F7 E8C9650000              	call print_sexpr_if_not_void
 15433                                  
 15434 0000C2FC 488D0425[00000000]      	lea rax, [0 + L_constants]
 15435 0000C304 48890425[F0030000]      	mov qword [free_var_126], rax
 15436 0000C30C 48B8-                   	mov rax, sob_void
 15436 0000C30E [0000000000000000] 
 15437                                  
 15438 0000C316 4889C7                  	mov rdi, rax
 15439 0000C319 E8A7650000              	call print_sexpr_if_not_void
 15440                                  
 15441 0000C31E 488D0425[00000000]      	lea rax, [0 + L_constants]
 15442 0000C326 48890425[F8030000]      	mov qword [free_var_127], rax
 15443 0000C32E 48B8-                   	mov rax, sob_void
 15443 0000C330 [0000000000000000] 
 15444                                  
 15445 0000C338 4889C7                  	mov rdi, rax
 15446 0000C33B E885650000              	call print_sexpr_if_not_void
 15447                                  
 15448 0000C340 488D0425[00000000]      	lea rax, [0 + L_constants]
 15449 0000C348 48890425[00040000]      	mov qword [free_var_128], rax
 15450 0000C350 48B8-                   	mov rax, sob_void
 15450 0000C352 [0000000000000000] 
 15451                                  
 15452 0000C35A 4889C7                  	mov rdi, rax
 15453 0000C35D E863650000              	call print_sexpr_if_not_void
 15454                                  
 15455 0000C362 488D0425[00000000]      	lea rax, [0 + L_constants]
 15456 0000C36A 48890425[08040000]      	mov qword [free_var_129], rax
 15457 0000C372 48B8-                   	mov rax, sob_void
 15457 0000C374 [0000000000000000] 
 15458                                  
 15459 0000C37C 4889C7                  	mov rdi, rax
 15460 0000C37F E841650000              	call print_sexpr_if_not_void
 15461                                  
 15462 0000C384 488D0425[00000000]      	lea rax, [0 + L_constants]
 15463 0000C38C 48890425[10040000]      	mov qword [free_var_130], rax
 15464 0000C394 48B8-                   	mov rax, sob_void
 15464 0000C396 [0000000000000000] 
 15465                                  
 15466 0000C39E 4889C7                  	mov rdi, rax
 15467 0000C3A1 E81F650000              	call print_sexpr_if_not_void
 15468                                  
 15469 0000C3A6 488D0425[00000000]      	lea rax, [0 + L_constants]
 15470 0000C3AE 48890425[18040000]      	mov qword [free_var_131], rax
 15471 0000C3B6 48B8-                   	mov rax, sob_void
 15471 0000C3B8 [0000000000000000] 
 15472                                  
 15473 0000C3C0 4889C7                  	mov rdi, rax
 15474 0000C3C3 E8FD640000              	call print_sexpr_if_not_void
 15475                                  
 15476 0000C3C8 488D0425[00000000]      	lea rax, [0 + L_constants]
 15477 0000C3D0 48890425[20040000]      	mov qword [free_var_132], rax
 15478 0000C3D8 48B8-                   	mov rax, sob_void
 15478 0000C3DA [0000000000000000] 
 15479                                  
 15480 0000C3E2 4889C7                  	mov rdi, rax
 15481 0000C3E5 E8DB640000              	call print_sexpr_if_not_void
 15482                                  
 15483 0000C3EA 488D0425[00000000]      	lea rax, [0 + L_constants]
 15484 0000C3F2 48890425[28040000]      	mov qword [free_var_133], rax
 15485 0000C3FA 48B8-                   	mov rax, sob_void
 15485 0000C3FC [0000000000000000] 
 15486                                  
 15487 0000C404 4889C7                  	mov rdi, rax
 15488 0000C407 E8B9640000              	call print_sexpr_if_not_void
 15489                                  
 15490 0000C40C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15491 0000C411 E89E640000              	call malloc
 15492 0000C416 50                      	push rax
 15493 0000C417 BF00000000              	mov rdi, 8 * 0	; new rib
 15494 0000C41C E893640000              	call malloc
 15495 0000C421 50                      	push rax
 15496 0000C422 BF08000000              	mov rdi, 8 * 1	; extended env
 15497 0000C427 E888640000              	call malloc
 15498 0000C42C 488B7D10                	mov rdi, ENV
 15499 0000C430 BE00000000              	mov rsi, 0
 15500 0000C435 BA01000000              	mov rdx, 1
 15501                                  .L_lambda_simple_env_loop_4f8e:	; ext_env[i + 1] <-- env[i]
 15502 0000C43A 4883FE00                	cmp rsi, 0
 15503 0000C43E 7410                    	je .L_lambda_simple_env_end_4f8e
 15504 0000C440 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 15505 0000C444 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15506 0000C448 48FFC6                  	inc rsi
 15507 0000C44B 48FFC2                  	inc rdx
 15508 0000C44E EBEA                    	jmp .L_lambda_simple_env_loop_4f8e
 15509                                  .L_lambda_simple_env_end_4f8e:
 15510 0000C450 5B                      	pop rbx
 15511 0000C451 BE00000000              	mov rsi, 0
 15512                                  .L_lambda_simple_params_loop_4f8e:	; copy params
 15513 0000C456 4883FE00                	cmp rsi, 0
 15514 0000C45A 740E                    	je .L_lambda_simple_params_end_4f8e
 15515 0000C45C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15516 0000C461 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15517 0000C465 48FFC6                  	inc rsi
 15518 0000C468 EBEC                    	jmp .L_lambda_simple_params_loop_4f8e
 15519                                  .L_lambda_simple_params_end_4f8e:
 15520 0000C46A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15521 0000C46D 4889C3                  	mov rbx, rax
 15522 0000C470 58                      	pop rax
 15523 0000C471 C60005                  	mov byte [rax], T_closure
 15524 0000C474 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15525 0000C478 48C74009[85C40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f8e
 15526 0000C480 E9E10D0000              	jmp .L_lambda_simple_end_4f8e
 15527                                  .L_lambda_simple_code_4f8e:	; lambda-simple body
 15528 0000C485 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15529 0000C48B 740B                    	je .L_lambda_simple_arity_check_ok_4f8e
 15530 0000C48D FF742410                	push qword [rsp + 8 * 2]
 15531 0000C491 6A02                    	push 2
 15532 0000C493 E9D5630000              	jmp L_error_incorrect_arity_simple
 15533                                  .L_lambda_simple_arity_check_ok_4f8e:
 15534 0000C498 C8000000                	enter 0, 0
 15535 0000C49C 488D0425[17000000]      	lea rax, [23 + L_constants]
 15536 0000C4A4 50                      	push rax
 15537 0000C4A5 6A01                    	push 1
 15538 0000C4A7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15539 0000C4AC E803640000              	call malloc
 15540 0000C4B1 50                      	push rax
 15541 0000C4B2 BF10000000              	mov rdi, 8 * 2	; new rib
 15542 0000C4B7 E8F8630000              	call malloc
 15543 0000C4BC 50                      	push rax
 15544 0000C4BD BF10000000              	mov rdi, 8 * 2	; extended env
 15545 0000C4C2 E8ED630000              	call malloc
 15546 0000C4C7 488B7D10                	mov rdi, ENV
 15547 0000C4CB BE00000000              	mov rsi, 0
 15548 0000C4D0 BA01000000              	mov rdx, 1
 15549                                  .L_lambda_simple_env_loop_4f8f:	; ext_env[i + 1] <-- env[i]
 15550 0000C4D5 4883FE01                	cmp rsi, 1
 15551 0000C4D9 7410                    	je .L_lambda_simple_env_end_4f8f
 15552 0000C4DB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 15553 0000C4DF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15554 0000C4E3 48FFC6                  	inc rsi
 15555 0000C4E6 48FFC2                  	inc rdx
 15556 0000C4E9 EBEA                    	jmp .L_lambda_simple_env_loop_4f8f
 15557                                  .L_lambda_simple_env_end_4f8f:
 15558 0000C4EB 5B                      	pop rbx
 15559 0000C4EC BE00000000              	mov rsi, 0
 15560                                  .L_lambda_simple_params_loop_4f8f:	; copy params
 15561 0000C4F1 4883FE02                	cmp rsi, 2
 15562 0000C4F5 740E                    	je .L_lambda_simple_params_end_4f8f
 15563 0000C4F7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15564 0000C4FC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15565 0000C500 48FFC6                  	inc rsi
 15566 0000C503 EBEC                    	jmp .L_lambda_simple_params_loop_4f8f
 15567                                  .L_lambda_simple_params_end_4f8f:
 15568 0000C505 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15569 0000C508 4889C3                  	mov rbx, rax
 15570 0000C50B 58                      	pop rax
 15571 0000C50C C60005                  	mov byte [rax], T_closure
 15572 0000C50F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15573 0000C513 48C74009[20C50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f8f
 15574 0000C51B E9D40C0000              	jmp .L_lambda_simple_end_4f8f
 15575                                  .L_lambda_simple_code_4f8f:	; lambda-simple body
 15576 0000C520 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15577 0000C526 740B                    	je .L_lambda_simple_arity_check_ok_4f8f
 15578 0000C528 FF742410                	push qword [rsp + 8 * 2]
 15579 0000C52C 6A01                    	push 1
 15580 0000C52E E93A630000              	jmp L_error_incorrect_arity_simple
 15581                                  .L_lambda_simple_arity_check_ok_4f8f:
 15582 0000C533 C8000000                	enter 0, 0
 15583 0000C537 BF11000000              	mov qword rdi, (1 + 8 + 8)
 15584 0000C53C E873630000              	call malloc
 15585 0000C541 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 15586 0000C545 48B8-                   	mov rax, sob_void
 15586 0000C547 [0000000000000000] 
 15587                                  
 15588 0000C54F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15589 0000C554 E85B630000              	call malloc
 15590 0000C559 50                      	push rax
 15591 0000C55A BF08000000              	mov rdi, 8 * 1	; new rib
 15592 0000C55F E850630000              	call malloc
 15593 0000C564 50                      	push rax
 15594 0000C565 BF18000000              	mov rdi, 8 * 3	; extended env
 15595 0000C56A E845630000              	call malloc
 15596 0000C56F 488B7D10                	mov rdi, ENV
 15597 0000C573 BE00000000              	mov rsi, 0
 15598 0000C578 BA01000000              	mov rdx, 1
 15599                                  .L_lambda_simple_env_loop_4f90:	; ext_env[i + 1] <-- env[i]
 15600 0000C57D 4883FE02                	cmp rsi, 2
 15601 0000C581 7410                    	je .L_lambda_simple_env_end_4f90
 15602 0000C583 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 15603 0000C587 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15604 0000C58B 48FFC6                  	inc rsi
 15605 0000C58E 48FFC2                  	inc rdx
 15606 0000C591 EBEA                    	jmp .L_lambda_simple_env_loop_4f90
 15607                                  .L_lambda_simple_env_end_4f90:
 15608 0000C593 5B                      	pop rbx
 15609 0000C594 BE00000000              	mov rsi, 0
 15610                                  .L_lambda_simple_params_loop_4f90:	; copy params
 15611 0000C599 4883FE01                	cmp rsi, 1
 15612 0000C59D 740E                    	je .L_lambda_simple_params_end_4f90
 15613 0000C59F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15614 0000C5A4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15615 0000C5A8 48FFC6                  	inc rsi
 15616 0000C5AB EBEC                    	jmp .L_lambda_simple_params_loop_4f90
 15617                                  .L_lambda_simple_params_end_4f90:
 15618 0000C5AD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15619 0000C5B0 4889C3                  	mov rbx, rax
 15620 0000C5B3 58                      	pop rax
 15621 0000C5B4 C60005                  	mov byte [rax], T_closure
 15622 0000C5B7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15623 0000C5BB 48C74009[C8C50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f90
 15624 0000C5C3 E98E020000              	jmp .L_lambda_simple_end_4f90
 15625                                  .L_lambda_simple_code_4f90:	; lambda-simple body
 15626 0000C5C8 48837C241005            	cmp qword [rsp + 8 * 2], 5
 15627 0000C5CE 740B                    	je .L_lambda_simple_arity_check_ok_4f90
 15628 0000C5D0 FF742410                	push qword [rsp + 8 * 2]
 15629 0000C5D4 6A05                    	push 5
 15630 0000C5D6 E992620000              	jmp L_error_incorrect_arity_simple
 15631                                  .L_lambda_simple_arity_check_ok_4f90:
 15632 0000C5DB C8000000                	enter 0, 0
 15633 0000C5DF 488B4530                	mov rax, PARAM(2)
 15634 0000C5E3 50                      	push rax
 15635 0000C5E4 488B4520                	mov rax, PARAM(0)
 15636 0000C5E8 50                      	push rax
 15637 0000C5E9 6A02                    	push 2
 15638 0000C5EB 488B0425[50030000]      	mov rax, qword [free_var_106]
 15639                                  	assert_closure(rax)
    65 0000C5F3 803805              <1>  cmp byte [%1], %2
    66 0000C5F6 0F85387B0000        <1>  jne L_error_incorrect_type
 15640 0000C5FC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15641 0000C600 53                      	push rbx
 15642 0000C601 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15643 0000C605 FFD3                    	call rbx
 15644 0000C607 483D[02000000]          	cmp rax, sob_boolean_false
 15645 0000C60D 742A                    	je .L_if_else_56b5
 15646 0000C60F 488B4540                	mov rax, PARAM(4)
 15647 0000C613 50                      	push rax
 15648 0000C614 488B4530                	mov rax, PARAM(2)
 15649 0000C618 50                      	push rax
 15650 0000C619 6A02                    	push 2
 15651 0000C61B 488B0425[30030000]      	mov rax, qword [free_var_102]
 15652                                  	assert_closure(rax)
    65 0000C623 803805              <1>  cmp byte [%1], %2
    66 0000C626 0F85087B0000        <1>  jne L_error_incorrect_type
 15653 0000C62C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15654 0000C630 53                      	push rbx
 15655 0000C631 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15656 0000C635 FFD3                    	call rbx
 15657 0000C637 EB08                    	jmp .L_if_end_56b5
 15658                                  	.L_if_else_56b5:
 15659 0000C639 488D0425[02000000]      	lea rax, [2 + L_constants]
 15660                                  	.L_if_end_56b5:
 15661 0000C641 483D[02000000]          	cmp rax, sob_boolean_false
 15662 0000C647 0F8505020000            	jne .L_or_end_0618
 15663 0000C64D 488B4530                	mov rax, PARAM(2)
 15664 0000C651 50                      	push rax
 15665 0000C652 488B4520                	mov rax, PARAM(0)
 15666 0000C656 50                      	push rax
 15667 0000C657 6A02                    	push 2
 15668 0000C659 488B0425[30030000]      	mov rax, qword [free_var_102]
 15669                                  	assert_closure(rax)
    65 0000C661 803805              <1>  cmp byte [%1], %2
    66 0000C664 0F85CA7A0000        <1>  jne L_error_incorrect_type
 15670 0000C66A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15671 0000C66E 53                      	push rbx
 15672 0000C66F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15673 0000C673 FFD3                    	call rbx
 15674 0000C675 483D[02000000]          	cmp rax, sob_boolean_false
 15675 0000C67B 0F84C9010000            	je .L_if_else_56b6
 15676 0000C681 488B4520                	mov rax, PARAM(0)
 15677 0000C685 50                      	push rax
 15678 0000C686 488B4538                	mov rax, PARAM(3)
 15679 0000C68A 50                      	push rax
 15680 0000C68B 6A02                    	push 2
 15681 0000C68D 488B0425[78010000]      	mov rax, qword [free_var_47]
 15682                                  	assert_closure(rax)
    65 0000C695 803805              <1>  cmp byte [%1], %2
    66 0000C698 0F85967A0000        <1>  jne L_error_incorrect_type
 15683 0000C69E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15684 0000C6A2 53                      	push rbx
 15685 0000C6A3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15686 0000C6A7 FFD3                    	call rbx
 15687 0000C6A9 50                      	push rax
 15688 0000C6AA 488B4520                	mov rax, PARAM(0)
 15689 0000C6AE 50                      	push rax
 15690 0000C6AF 488B4528                	mov rax, PARAM(1)
 15691 0000C6B3 50                      	push rax
 15692 0000C6B4 6A02                    	push 2
 15693 0000C6B6 488B0425[78010000]      	mov rax, qword [free_var_47]
 15694                                  	assert_closure(rax)
    65 0000C6BE 803805              <1>  cmp byte [%1], %2
    66 0000C6C1 0F856D7A0000        <1>  jne L_error_incorrect_type
 15695 0000C6C7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15696 0000C6CB 53                      	push rbx
 15697 0000C6CC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15698 0000C6D0 FFD3                    	call rbx
 15699 0000C6D2 50                      	push rax
 15700 0000C6D3 6A02                    	push 2
 15701 0000C6D5 488B4510                	mov rax, qword [rbp + 8*2]
 15702 0000C6D9 488B4008                	mov rax, qword [rax + 8*1]
 15703 0000C6DD 488B00                  	mov rax, qword [rax + 8*0]
 15704                                  	assert_closure(rax)
    65 0000C6E0 803805              <1>  cmp byte [%1], %2
    66 0000C6E3 0F854B7A0000        <1>  jne L_error_incorrect_type
 15705 0000C6E9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15706 0000C6ED 53                      	push rbx
 15707 0000C6EE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15708 0000C6F2 FFD3                    	call rbx
 15709 0000C6F4 483D[02000000]          	cmp rax, sob_boolean_false
 15710 0000C6FA 0F8548010000            	jne .L_or_end_0619
 15711 0000C700 488B4520                	mov rax, PARAM(0)
 15712 0000C704 50                      	push rax
 15713 0000C705 488B4538                	mov rax, PARAM(3)
 15714 0000C709 50                      	push rax
 15715 0000C70A 6A02                    	push 2
 15716 0000C70C 488B0425[78010000]      	mov rax, qword [free_var_47]
 15717                                  	assert_closure(rax)
    65 0000C714 803805              <1>  cmp byte [%1], %2
    66 0000C717 0F85177A0000        <1>  jne L_error_incorrect_type
 15718 0000C71D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15719 0000C721 53                      	push rbx
 15720 0000C722 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15721 0000C726 FFD3                    	call rbx
 15722 0000C728 50                      	push rax
 15723 0000C729 488B4520                	mov rax, PARAM(0)
 15724 0000C72D 50                      	push rax
 15725 0000C72E 488B4528                	mov rax, PARAM(1)
 15726 0000C732 50                      	push rax
 15727 0000C733 6A02                    	push 2
 15728 0000C735 488B0425[78010000]      	mov rax, qword [free_var_47]
 15729                                  	assert_closure(rax)
    65 0000C73D 803805              <1>  cmp byte [%1], %2
    66 0000C740 0F85EE790000        <1>  jne L_error_incorrect_type
 15730 0000C746 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15731 0000C74A 53                      	push rbx
 15732 0000C74B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15733 0000C74F FFD3                    	call rbx
 15734 0000C751 50                      	push rax
 15735 0000C752 6A02                    	push 2
 15736 0000C754 488B4510                	mov rax, qword [rbp + 8*2]
 15737 0000C758 488B4008                	mov rax, qword [rax + 8*1]
 15738 0000C75C 488B4008                	mov rax, qword [rax + 8*1]
 15739                                  	assert_closure(rax)
    65 0000C760 803805              <1>  cmp byte [%1], %2
    66 0000C763 0F85CB790000        <1>  jne L_error_incorrect_type
 15740 0000C769 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15741 0000C76D 53                      	push rbx
 15742 0000C76E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15743 0000C772 FFD3                    	call rbx
 15744 0000C774 483D[02000000]          	cmp rax, sob_boolean_false
 15745 0000C77A 0F84C0000000            	je .L_if_else_56b7
 15746 0000C780 488B4540                	mov rax, PARAM(4)
 15747 0000C784 50                      	push rax
 15748 0000C785 488B4538                	mov rax, PARAM(3)
 15749 0000C789 50                      	push rax
 15750 0000C78A 488B4530                	mov rax, PARAM(2)
 15751 0000C78E 50                      	push rax
 15752 0000C78F 488B4528                	mov rax, PARAM(1)
 15753 0000C793 50                      	push rax
 15754 0000C794 488D0425[80000000]      	lea rax, [128 + L_constants]
 15755 0000C79C 50                      	push rax
 15756 0000C79D 488B4520                	mov rax, PARAM(0)
 15757 0000C7A1 50                      	push rax
 15758 0000C7A2 6A02                    	push 2
 15759 0000C7A4 488B0425[08030000]      	mov rax, qword [free_var_97]
 15760                                  	assert_closure(rax)
    65 0000C7AC 803805              <1>  cmp byte [%1], %2
    66 0000C7AF 0F857F790000        <1>  jne L_error_incorrect_type
 15761 0000C7B5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15762 0000C7B9 53                      	push rbx
 15763 0000C7BA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15764 0000C7BE FFD3                    	call rbx
 15765 0000C7C0 50                      	push rax
 15766 0000C7C1 6A05                    	push 5
 15767 0000C7C3 488B4510                	mov rax, qword [rbp + 8*2]
 15768 0000C7C7 488B00                  	mov rax, qword [rax + 8*0]
 15769 0000C7CA 488B00                  	mov rax, qword [rax + 8*0]
 15770 0000C7CD 488B00                  	mov rax, qword [rax]
 15771                                  	assert_closure(rax)
    65 0000C7D0 803805              <1>  cmp byte [%1], %2
    66 0000C7D3 0F855B790000        <1>  jne L_error_incorrect_type
 15772 0000C7D9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15773 0000C7DD 53                      	push rbx
 15774 0000C7DE FF7508                  	push RET_ADDR
 15775 0000C7E1 488B7D18                	mov rdi, COUNT
 15776 0000C7E5 4883C703                	add rdi, 3
 15777 0000C7E9 48C1E703                	shl rdi, 3
 15778 0000C7ED 4801EF                  	add rdi, rbp
 15779 0000C7F0 488B6D00                	mov rbp, OLD_RDP
 15780 0000C7F4 BE00000000              	mov rsi, 0
 15781                                  .L_tc_recycle_frame_loop_5d1d:	 ; start recycle frame loop
 15782 0000C7F9 4883FE08                	cmp rsi, 8
 15783 0000C7FD 7427                    	je .L_tc_recycle_frame_done_5d1d
 15784 0000C7FF B907000000              	mov rcx, 7
 15785 0000C804 4829F1                  	sub rcx, rsi
 15786 0000C807 48C1E103                	shl rcx, 3
 15787 0000C80B 4801E1                  	add rcx, rsp ; rcx is the address to move
 15788 0000C80E 4889F3                  	mov rbx, rsi
 15789 0000C811 48C1E303                	shl rbx, 3
 15790 0000C815 48F7DB                  	neg rbx
 15791 0000C818 4801FB                  	add rbx, rdi ;rbx is the address to move to
 15792 0000C81B 488B09                  	mov rcx, [rcx]
 15793 0000C81E 48890B                  	mov [rbx], rcx
 15794 0000C821 48FFC6                  	inc rsi
 15795 0000C824 EBD3                    	jmp .L_tc_recycle_frame_loop_5d1d
 15796                                  .L_tc_recycle_frame_done_5d1d:	 ; end recycle frame loop
 15797 0000C826 BB07000000              	mov rbx, 7
 15798 0000C82B 48C1E303                	shl rbx, 3
 15799 0000C82F 48F7DB                  	neg rbx
 15800 0000C832 4801FB                  	add rbx, rdi
 15801 0000C835 4889DC                  	mov rsp, rbx
 15802 0000C838 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15803 0000C83C FFE3                    	jmp rbx
 15804 0000C83E EB08                    	jmp .L_if_end_56b7
 15805                                  	.L_if_else_56b7:
 15806 0000C840 488D0425[02000000]      	lea rax, [2 + L_constants]
 15807                                  	.L_if_end_56b7:
 15808                                  .L_or_end_0619:
 15809 0000C848 EB08                    	jmp .L_if_end_56b6
 15810                                  	.L_if_else_56b6:
 15811 0000C84A 488D0425[02000000]      	lea rax, [2 + L_constants]
 15812                                  	.L_if_end_56b6:
 15813                                  .L_or_end_0618:
 15814 0000C852 C9                      	leave
 15815 0000C853 C23800                  	ret 8 * (2 + 5)
 15816                                  .L_lambda_simple_end_4f90:	; new closure is in rax
 15817 0000C856 50                      	push rax
 15818 0000C857 488B4520                	mov rax, PARAM(0)
 15819 0000C85B 8F00                    	pop qword [rax]
 15820 0000C85D 48B8-                   	mov rax, sob_void
 15820 0000C85F [0000000000000000] 
 15821                                  
 15822 0000C867 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15823 0000C86C E843600000              	call malloc
 15824 0000C871 50                      	push rax
 15825 0000C872 BF08000000              	mov rdi, 8 * 1	; new rib
 15826 0000C877 E838600000              	call malloc
 15827 0000C87C 50                      	push rax
 15828 0000C87D BF18000000              	mov rdi, 8 * 3	; extended env
 15829 0000C882 E82D600000              	call malloc
 15830 0000C887 488B7D10                	mov rdi, ENV
 15831 0000C88B BE00000000              	mov rsi, 0
 15832 0000C890 BA01000000              	mov rdx, 1
 15833                                  .L_lambda_simple_env_loop_4f91:	; ext_env[i + 1] <-- env[i]
 15834 0000C895 4883FE02                	cmp rsi, 2
 15835 0000C899 7410                    	je .L_lambda_simple_env_end_4f91
 15836 0000C89B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 15837 0000C89F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15838 0000C8A3 48FFC6                  	inc rsi
 15839 0000C8A6 48FFC2                  	inc rdx
 15840 0000C8A9 EBEA                    	jmp .L_lambda_simple_env_loop_4f91
 15841                                  .L_lambda_simple_env_end_4f91:
 15842 0000C8AB 5B                      	pop rbx
 15843 0000C8AC BE00000000              	mov rsi, 0
 15844                                  .L_lambda_simple_params_loop_4f91:	; copy params
 15845 0000C8B1 4883FE01                	cmp rsi, 1
 15846 0000C8B5 740E                    	je .L_lambda_simple_params_end_4f91
 15847 0000C8B7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15848 0000C8BC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15849 0000C8C0 48FFC6                  	inc rsi
 15850 0000C8C3 EBEC                    	jmp .L_lambda_simple_params_loop_4f91
 15851                                  .L_lambda_simple_params_end_4f91:
 15852 0000C8C5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15853 0000C8C8 4889C3                  	mov rbx, rax
 15854 0000C8CB 58                      	pop rax
 15855 0000C8CC C60005                  	mov byte [rax], T_closure
 15856 0000C8CF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15857 0000C8D3 48C74009[E0C80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f91
 15858 0000C8DB E9F0020000              	jmp .L_lambda_simple_end_4f91
 15859                                  .L_lambda_simple_code_4f91:	; lambda-simple body
 15860 0000C8E0 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15861 0000C8E6 740B                    	je .L_lambda_simple_arity_check_ok_4f91
 15862 0000C8E8 FF742410                	push qword [rsp + 8 * 2]
 15863 0000C8EC 6A02                    	push 2
 15864 0000C8EE E97A5F0000              	jmp L_error_incorrect_arity_simple
 15865                                  .L_lambda_simple_arity_check_ok_4f91:
 15866 0000C8F3 C8000000                	enter 0, 0
 15867 0000C8F7 488B4528                	mov rax, PARAM(1)
 15868 0000C8FB 50                      	push rax
 15869 0000C8FC 6A01                    	push 1
 15870 0000C8FE 488B0425[90000000]      	mov rax, qword [free_var_18]
 15871                                  	assert_closure(rax)
    65 0000C906 803805              <1>  cmp byte [%1], %2
    66 0000C909 0F8525780000        <1>  jne L_error_incorrect_type
 15872 0000C90F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15873 0000C913 53                      	push rbx
 15874 0000C914 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15875 0000C918 FFD3                    	call rbx
 15876 0000C91A 50                      	push rax
 15877 0000C91B 488B4520                	mov rax, PARAM(0)
 15878 0000C91F 50                      	push rax
 15879 0000C920 6A01                    	push 1
 15880 0000C922 488B0425[90000000]      	mov rax, qword [free_var_18]
 15881                                  	assert_closure(rax)
    65 0000C92A 803805              <1>  cmp byte [%1], %2
    66 0000C92D 0F8501780000        <1>  jne L_error_incorrect_type
 15882 0000C933 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15883 0000C937 53                      	push rbx
 15884 0000C938 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15885 0000C93C FFD3                    	call rbx
 15886 0000C93E 50                      	push rax
 15887 0000C93F 6A02                    	push 2
 15888 0000C941 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15889 0000C946 E8695F0000              	call malloc
 15890 0000C94B 50                      	push rax
 15891 0000C94C BF10000000              	mov rdi, 8 * 2	; new rib
 15892 0000C951 E85E5F0000              	call malloc
 15893 0000C956 50                      	push rax
 15894 0000C957 BF20000000              	mov rdi, 8 * 4	; extended env
 15895 0000C95C E8535F0000              	call malloc
 15896 0000C961 488B7D10                	mov rdi, ENV
 15897 0000C965 BE00000000              	mov rsi, 0
 15898 0000C96A BA01000000              	mov rdx, 1
 15899                                  .L_lambda_simple_env_loop_4f92:	; ext_env[i + 1] <-- env[i]
 15900 0000C96F 4883FE03                	cmp rsi, 3
 15901 0000C973 7410                    	je .L_lambda_simple_env_end_4f92
 15902 0000C975 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 15903 0000C979 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15904 0000C97D 48FFC6                  	inc rsi
 15905 0000C980 48FFC2                  	inc rdx
 15906 0000C983 EBEA                    	jmp .L_lambda_simple_env_loop_4f92
 15907                                  .L_lambda_simple_env_end_4f92:
 15908 0000C985 5B                      	pop rbx
 15909 0000C986 BE00000000              	mov rsi, 0
 15910                                  .L_lambda_simple_params_loop_4f92:	; copy params
 15911 0000C98B 4883FE02                	cmp rsi, 2
 15912 0000C98F 740E                    	je .L_lambda_simple_params_end_4f92
 15913 0000C991 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15914 0000C996 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15915 0000C99A 48FFC6                  	inc rsi
 15916 0000C99D EBEC                    	jmp .L_lambda_simple_params_loop_4f92
 15917                                  .L_lambda_simple_params_end_4f92:
 15918 0000C99F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15919 0000C9A2 4889C3                  	mov rbx, rax
 15920 0000C9A5 58                      	pop rax
 15921 0000C9A6 C60005                  	mov byte [rax], T_closure
 15922 0000C9A9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15923 0000C9AD 48C74009[BAC90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f92
 15924 0000C9B5 E9A4010000              	jmp .L_lambda_simple_end_4f92
 15925                                  .L_lambda_simple_code_4f92:	; lambda-simple body
 15926 0000C9BA 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15927 0000C9C0 740B                    	je .L_lambda_simple_arity_check_ok_4f92
 15928 0000C9C2 FF742410                	push qword [rsp + 8 * 2]
 15929 0000C9C6 6A02                    	push 2
 15930 0000C9C8 E9A05E0000              	jmp L_error_incorrect_arity_simple
 15931                                  .L_lambda_simple_arity_check_ok_4f92:
 15932 0000C9CD C8000000                	enter 0, 0
 15933 0000C9D1 488B4528                	mov rax, PARAM(1)
 15934 0000C9D5 50                      	push rax
 15935 0000C9D6 488B4520                	mov rax, PARAM(0)
 15936 0000C9DA 50                      	push rax
 15937 0000C9DB 6A02                    	push 2
 15938 0000C9DD 488B0425[38030000]      	mov rax, qword [free_var_103]
 15939                                  	assert_closure(rax)
    65 0000C9E5 803805              <1>  cmp byte [%1], %2
    66 0000C9E8 0F8546770000        <1>  jne L_error_incorrect_type
 15940 0000C9EE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15941 0000C9F2 53                      	push rbx
 15942 0000C9F3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15943 0000C9F7 FFD3                    	call rbx
 15944 0000C9F9 483D[02000000]          	cmp rax, sob_boolean_false
 15945 0000C9FF 0F84AD000000            	je .L_if_else_56b8
 15946 0000CA05 488B4528                	mov rax, PARAM(1)
 15947 0000CA09 50                      	push rax
 15948 0000CA0A 488B4510                	mov rax, qword [rbp + 8*2]
 15949 0000CA0E 488B00                  	mov rax, qword [rax + 8*0]
 15950 0000CA11 488B4008                	mov rax, qword [rax + 8*1]
 15951 0000CA15 50                      	push rax
 15952 0000CA16 488B4520                	mov rax, PARAM(0)
 15953 0000CA1A 50                      	push rax
 15954 0000CA1B 488B4510                	mov rax, qword [rbp + 8*2]
 15955 0000CA1F 488B00                  	mov rax, qword [rax + 8*0]
 15956 0000CA22 488B00                  	mov rax, qword [rax + 8*0]
 15957 0000CA25 50                      	push rax
 15958 0000CA26 488D0425[20000000]      	lea rax, [32 + L_constants]
 15959 0000CA2E 50                      	push rax
 15960 0000CA2F 6A05                    	push 5
 15961 0000CA31 488B4510                	mov rax, qword [rbp + 8*2]
 15962 0000CA35 488B4008                	mov rax, qword [rax + 8*1]
 15963 0000CA39 488B00                  	mov rax, qword [rax + 8*0]
 15964 0000CA3C 488B00                  	mov rax, qword [rax]
 15965                                  	assert_closure(rax)
    65 0000CA3F 803805              <1>  cmp byte [%1], %2
    66 0000CA42 0F85EC760000        <1>  jne L_error_incorrect_type
 15966 0000CA48 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15967 0000CA4C 53                      	push rbx
 15968 0000CA4D FF7508                  	push RET_ADDR
 15969 0000CA50 488B7D18                	mov rdi, COUNT
 15970 0000CA54 4883C703                	add rdi, 3
 15971 0000CA58 48C1E703                	shl rdi, 3
 15972 0000CA5C 4801EF                  	add rdi, rbp
 15973 0000CA5F 488B6D00                	mov rbp, OLD_RDP
 15974 0000CA63 BE00000000              	mov rsi, 0
 15975                                  .L_tc_recycle_frame_loop_5d20:	 ; start recycle frame loop
 15976 0000CA68 4883FE08                	cmp rsi, 8
 15977 0000CA6C 7427                    	je .L_tc_recycle_frame_done_5d20
 15978 0000CA6E B907000000              	mov rcx, 7
 15979 0000CA73 4829F1                  	sub rcx, rsi
 15980 0000CA76 48C1E103                	shl rcx, 3
 15981 0000CA7A 4801E1                  	add rcx, rsp ; rcx is the address to move
 15982 0000CA7D 4889F3                  	mov rbx, rsi
 15983 0000CA80 48C1E303                	shl rbx, 3
 15984 0000CA84 48F7DB                  	neg rbx
 15985 0000CA87 4801FB                  	add rbx, rdi ;rbx is the address to move to
 15986 0000CA8A 488B09                  	mov rcx, [rcx]
 15987 0000CA8D 48890B                  	mov [rbx], rcx
 15988 0000CA90 48FFC6                  	inc rsi
 15989 0000CA93 EBD3                    	jmp .L_tc_recycle_frame_loop_5d20
 15990                                  .L_tc_recycle_frame_done_5d20:	 ; end recycle frame loop
 15991 0000CA95 BB07000000              	mov rbx, 7
 15992 0000CA9A 48C1E303                	shl rbx, 3
 15993 0000CA9E 48F7DB                  	neg rbx
 15994 0000CAA1 4801FB                  	add rbx, rdi
 15995 0000CAA4 4889DC                  	mov rsp, rbx
 15996 0000CAA7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15997 0000CAAB FFE3                    	jmp rbx
 15998 0000CAAD E9A8000000              	jmp .L_if_end_56b8
 15999                                  	.L_if_else_56b8:
 16000 0000CAB2 488B4520                	mov rax, PARAM(0)
 16001 0000CAB6 50                      	push rax
 16002 0000CAB7 488B4510                	mov rax, qword [rbp + 8*2]
 16003 0000CABB 488B00                  	mov rax, qword [rax + 8*0]
 16004 0000CABE 488B00                  	mov rax, qword [rax + 8*0]
 16005 0000CAC1 50                      	push rax
 16006 0000CAC2 488B4528                	mov rax, PARAM(1)
 16007 0000CAC6 50                      	push rax
 16008 0000CAC7 488B4510                	mov rax, qword [rbp + 8*2]
 16009 0000CACB 488B00                  	mov rax, qword [rax + 8*0]
 16010 0000CACE 488B4008                	mov rax, qword [rax + 8*1]
 16011 0000CAD2 50                      	push rax
 16012 0000CAD3 488D0425[20000000]      	lea rax, [32 + L_constants]
 16013 0000CADB 50                      	push rax
 16014 0000CADC 6A05                    	push 5
 16015 0000CADE 488B4510                	mov rax, qword [rbp + 8*2]
 16016 0000CAE2 488B4008                	mov rax, qword [rax + 8*1]
 16017 0000CAE6 488B00                  	mov rax, qword [rax + 8*0]
 16018 0000CAE9 488B00                  	mov rax, qword [rax]
 16019                                  	assert_closure(rax)
    65 0000CAEC 803805              <1>  cmp byte [%1], %2
    66 0000CAEF 0F853F760000        <1>  jne L_error_incorrect_type
 16020 0000CAF5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16021 0000CAF9 53                      	push rbx
 16022 0000CAFA FF7508                  	push RET_ADDR
 16023 0000CAFD 488B7D18                	mov rdi, COUNT
 16024 0000CB01 4883C703                	add rdi, 3
 16025 0000CB05 48C1E703                	shl rdi, 3
 16026 0000CB09 4801EF                  	add rdi, rbp
 16027 0000CB0C 488B6D00                	mov rbp, OLD_RDP
 16028 0000CB10 BE00000000              	mov rsi, 0
 16029                                  .L_tc_recycle_frame_loop_5d21:	 ; start recycle frame loop
 16030 0000CB15 4883FE08                	cmp rsi, 8
 16031 0000CB19 7427                    	je .L_tc_recycle_frame_done_5d21
 16032 0000CB1B B907000000              	mov rcx, 7
 16033 0000CB20 4829F1                  	sub rcx, rsi
 16034 0000CB23 48C1E103                	shl rcx, 3
 16035 0000CB27 4801E1                  	add rcx, rsp ; rcx is the address to move
 16036 0000CB2A 4889F3                  	mov rbx, rsi
 16037 0000CB2D 48C1E303                	shl rbx, 3
 16038 0000CB31 48F7DB                  	neg rbx
 16039 0000CB34 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16040 0000CB37 488B09                  	mov rcx, [rcx]
 16041 0000CB3A 48890B                  	mov [rbx], rcx
 16042 0000CB3D 48FFC6                  	inc rsi
 16043 0000CB40 EBD3                    	jmp .L_tc_recycle_frame_loop_5d21
 16044                                  .L_tc_recycle_frame_done_5d21:	 ; end recycle frame loop
 16045 0000CB42 BB07000000              	mov rbx, 7
 16046 0000CB47 48C1E303                	shl rbx, 3
 16047 0000CB4B 48F7DB                  	neg rbx
 16048 0000CB4E 4801FB                  	add rbx, rdi
 16049 0000CB51 4889DC                  	mov rsp, rbx
 16050 0000CB54 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16051 0000CB58 FFE3                    	jmp rbx
 16052                                  	.L_if_end_56b8:
 16053 0000CB5A C9                      	leave
 16054 0000CB5B C22000                  	ret 8 * (2 + 2)
 16055                                  .L_lambda_simple_end_4f92:	; new closure is in rax
 16056                                  	assert_closure(rax)
    65 0000CB5E 803805              <1>  cmp byte [%1], %2
    66 0000CB61 0F85CD750000        <1>  jne L_error_incorrect_type
 16057 0000CB67 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16058 0000CB6B 53                      	push rbx
 16059 0000CB6C FF7508                  	push RET_ADDR
 16060 0000CB6F 488B7D18                	mov rdi, COUNT
 16061 0000CB73 4883C703                	add rdi, 3
 16062 0000CB77 48C1E703                	shl rdi, 3
 16063 0000CB7B 4801EF                  	add rdi, rbp
 16064 0000CB7E 488B6D00                	mov rbp, OLD_RDP
 16065 0000CB82 BE00000000              	mov rsi, 0
 16066                                  .L_tc_recycle_frame_loop_5d1f:	 ; start recycle frame loop
 16067 0000CB87 4883FE05                	cmp rsi, 5
 16068 0000CB8B 7427                    	je .L_tc_recycle_frame_done_5d1f
 16069 0000CB8D B904000000              	mov rcx, 4
 16070 0000CB92 4829F1                  	sub rcx, rsi
 16071 0000CB95 48C1E103                	shl rcx, 3
 16072 0000CB99 4801E1                  	add rcx, rsp ; rcx is the address to move
 16073 0000CB9C 4889F3                  	mov rbx, rsi
 16074 0000CB9F 48C1E303                	shl rbx, 3
 16075 0000CBA3 48F7DB                  	neg rbx
 16076 0000CBA6 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16077 0000CBA9 488B09                  	mov rcx, [rcx]
 16078 0000CBAC 48890B                  	mov [rbx], rcx
 16079 0000CBAF 48FFC6                  	inc rsi
 16080 0000CBB2 EBD3                    	jmp .L_tc_recycle_frame_loop_5d1f
 16081                                  .L_tc_recycle_frame_done_5d1f:	 ; end recycle frame loop
 16082 0000CBB4 BB04000000              	mov rbx, 4
 16083 0000CBB9 48C1E303                	shl rbx, 3
 16084 0000CBBD 48F7DB                  	neg rbx
 16085 0000CBC0 4801FB                  	add rbx, rdi
 16086 0000CBC3 4889DC                  	mov rsp, rbx
 16087 0000CBC6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16088 0000CBCA FFE3                    	jmp rbx
 16089 0000CBCC C9                      	leave
 16090 0000CBCD C22000                  	ret 8 * (2 + 2)
 16091                                  .L_lambda_simple_end_4f91:	; new closure is in rax
 16092 0000CBD0 50                      	push rax
 16093 0000CBD1 6A01                    	push 1
 16094 0000CBD3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16095 0000CBD8 E8D75C0000              	call malloc
 16096 0000CBDD 50                      	push rax
 16097 0000CBDE BF08000000              	mov rdi, 8 * 1	; new rib
 16098 0000CBE3 E8CC5C0000              	call malloc
 16099 0000CBE8 50                      	push rax
 16100 0000CBE9 BF18000000              	mov rdi, 8 * 3	; extended env
 16101 0000CBEE E8C15C0000              	call malloc
 16102 0000CBF3 488B7D10                	mov rdi, ENV
 16103 0000CBF7 BE00000000              	mov rsi, 0
 16104 0000CBFC BA01000000              	mov rdx, 1
 16105                                  .L_lambda_simple_env_loop_4f93:	; ext_env[i + 1] <-- env[i]
 16106 0000CC01 4883FE02                	cmp rsi, 2
 16107 0000CC05 7410                    	je .L_lambda_simple_env_end_4f93
 16108 0000CC07 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 16109 0000CC0B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16110 0000CC0F 48FFC6                  	inc rsi
 16111 0000CC12 48FFC2                  	inc rdx
 16112 0000CC15 EBEA                    	jmp .L_lambda_simple_env_loop_4f93
 16113                                  .L_lambda_simple_env_end_4f93:
 16114 0000CC17 5B                      	pop rbx
 16115 0000CC18 BE00000000              	mov rsi, 0
 16116                                  .L_lambda_simple_params_loop_4f93:	; copy params
 16117 0000CC1D 4883FE01                	cmp rsi, 1
 16118 0000CC21 740E                    	je .L_lambda_simple_params_end_4f93
 16119 0000CC23 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16120 0000CC28 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16121 0000CC2C 48FFC6                  	inc rsi
 16122 0000CC2F EBEC                    	jmp .L_lambda_simple_params_loop_4f93
 16123                                  .L_lambda_simple_params_end_4f93:
 16124 0000CC31 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16125 0000CC34 4889C3                  	mov rbx, rax
 16126 0000CC37 58                      	pop rax
 16127 0000CC38 C60005                  	mov byte [rax], T_closure
 16128 0000CC3B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16129 0000CC3F 48C74009[4CCC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f93
 16130 0000CC47 E936050000              	jmp .L_lambda_simple_end_4f93
 16131                                  .L_lambda_simple_code_4f93:	; lambda-simple body
 16132 0000CC4C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16133 0000CC52 740B                    	je .L_lambda_simple_arity_check_ok_4f93
 16134 0000CC54 FF742410                	push qword [rsp + 8 * 2]
 16135 0000CC58 6A01                    	push 1
 16136 0000CC5A E90E5C0000              	jmp L_error_incorrect_arity_simple
 16137                                  .L_lambda_simple_arity_check_ok_4f93:
 16138 0000CC5F C8000000                	enter 0, 0
 16139 0000CC63 488D0425[17000000]      	lea rax, [23 + L_constants]
 16140 0000CC6B 50                      	push rax
 16141 0000CC6C 6A01                    	push 1
 16142 0000CC6E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16143 0000CC73 E83C5C0000              	call malloc
 16144 0000CC78 50                      	push rax
 16145 0000CC79 BF08000000              	mov rdi, 8 * 1	; new rib
 16146 0000CC7E E8315C0000              	call malloc
 16147 0000CC83 50                      	push rax
 16148 0000CC84 BF20000000              	mov rdi, 8 * 4	; extended env
 16149 0000CC89 E8265C0000              	call malloc
 16150 0000CC8E 488B7D10                	mov rdi, ENV
 16151 0000CC92 BE00000000              	mov rsi, 0
 16152 0000CC97 BA01000000              	mov rdx, 1
 16153                                  .L_lambda_simple_env_loop_4f94:	; ext_env[i + 1] <-- env[i]
 16154 0000CC9C 4883FE03                	cmp rsi, 3
 16155 0000CCA0 7410                    	je .L_lambda_simple_env_end_4f94
 16156 0000CCA2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 16157 0000CCA6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16158 0000CCAA 48FFC6                  	inc rsi
 16159 0000CCAD 48FFC2                  	inc rdx
 16160 0000CCB0 EBEA                    	jmp .L_lambda_simple_env_loop_4f94
 16161                                  .L_lambda_simple_env_end_4f94:
 16162 0000CCB2 5B                      	pop rbx
 16163 0000CCB3 BE00000000              	mov rsi, 0
 16164                                  .L_lambda_simple_params_loop_4f94:	; copy params
 16165 0000CCB8 4883FE01                	cmp rsi, 1
 16166 0000CCBC 740E                    	je .L_lambda_simple_params_end_4f94
 16167 0000CCBE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16168 0000CCC3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16169 0000CCC7 48FFC6                  	inc rsi
 16170 0000CCCA EBEC                    	jmp .L_lambda_simple_params_loop_4f94
 16171                                  .L_lambda_simple_params_end_4f94:
 16172 0000CCCC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16173 0000CCCF 4889C3                  	mov rbx, rax
 16174 0000CCD2 58                      	pop rax
 16175 0000CCD3 C60005                  	mov byte [rax], T_closure
 16176 0000CCD6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16177 0000CCDA 48C74009[E7CC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f94
 16178 0000CCE2 E929040000              	jmp .L_lambda_simple_end_4f94
 16179                                  .L_lambda_simple_code_4f94:	; lambda-simple body
 16180 0000CCE7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16181 0000CCED 740B                    	je .L_lambda_simple_arity_check_ok_4f94
 16182 0000CCEF FF742410                	push qword [rsp + 8 * 2]
 16183 0000CCF3 6A01                    	push 1
 16184 0000CCF5 E9735B0000              	jmp L_error_incorrect_arity_simple
 16185                                  .L_lambda_simple_arity_check_ok_4f94:
 16186 0000CCFA C8000000                	enter 0, 0
 16187 0000CCFE BF11000000              	mov qword rdi, (1 + 8 + 8)
 16188 0000CD03 E8AC5B0000              	call malloc
 16189 0000CD08 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 16190 0000CD0C 48B8-                   	mov rax, sob_void
 16190 0000CD0E [0000000000000000] 
 16191                                  
 16192 0000CD16 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16193 0000CD1B E8945B0000              	call malloc
 16194 0000CD20 50                      	push rax
 16195 0000CD21 BF08000000              	mov rdi, 8 * 1	; new rib
 16196 0000CD26 E8895B0000              	call malloc
 16197 0000CD2B 50                      	push rax
 16198 0000CD2C BF28000000              	mov rdi, 8 * 5	; extended env
 16199 0000CD31 E87E5B0000              	call malloc
 16200 0000CD36 488B7D10                	mov rdi, ENV
 16201 0000CD3A BE00000000              	mov rsi, 0
 16202 0000CD3F BA01000000              	mov rdx, 1
 16203                                  .L_lambda_simple_env_loop_4f95:	; ext_env[i + 1] <-- env[i]
 16204 0000CD44 4883FE04                	cmp rsi, 4
 16205 0000CD48 7410                    	je .L_lambda_simple_env_end_4f95
 16206 0000CD4A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 16207 0000CD4E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16208 0000CD52 48FFC6                  	inc rsi
 16209 0000CD55 48FFC2                  	inc rdx
 16210 0000CD58 EBEA                    	jmp .L_lambda_simple_env_loop_4f95
 16211                                  .L_lambda_simple_env_end_4f95:
 16212 0000CD5A 5B                      	pop rbx
 16213 0000CD5B BE00000000              	mov rsi, 0
 16214                                  .L_lambda_simple_params_loop_4f95:	; copy params
 16215 0000CD60 4883FE01                	cmp rsi, 1
 16216 0000CD64 740E                    	je .L_lambda_simple_params_end_4f95
 16217 0000CD66 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16218 0000CD6B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16219 0000CD6F 48FFC6                  	inc rsi
 16220 0000CD72 EBEC                    	jmp .L_lambda_simple_params_loop_4f95
 16221                                  .L_lambda_simple_params_end_4f95:
 16222 0000CD74 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16223 0000CD77 4889C3                  	mov rbx, rax
 16224 0000CD7A 58                      	pop rax
 16225 0000CD7B C60005                  	mov byte [rax], T_closure
 16226 0000CD7E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16227 0000CD82 48C74009[8FCD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f95
 16228 0000CD8A E96F010000              	jmp .L_lambda_simple_end_4f95
 16229                                  .L_lambda_simple_code_4f95:	; lambda-simple body
 16230 0000CD8F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16231 0000CD95 740B                    	je .L_lambda_simple_arity_check_ok_4f95
 16232 0000CD97 FF742410                	push qword [rsp + 8 * 2]
 16233 0000CD9B 6A02                    	push 2
 16234 0000CD9D E9CB5A0000              	jmp L_error_incorrect_arity_simple
 16235                                  .L_lambda_simple_arity_check_ok_4f95:
 16236 0000CDA2 C8000000                	enter 0, 0
 16237 0000CDA6 488B4528                	mov rax, PARAM(1)
 16238 0000CDAA 50                      	push rax
 16239 0000CDAB 6A01                    	push 1
 16240 0000CDAD 488B0425[00000000]      	mov rax, qword [free_var_0]
 16241                                  	assert_closure(rax)
    65 0000CDB5 803805              <1>  cmp byte [%1], %2
    66 0000CDB8 0F8576730000        <1>  jne L_error_incorrect_type
 16242 0000CDBE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16243 0000CDC2 53                      	push rbx
 16244 0000CDC3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16245 0000CDC7 FFD3                    	call rbx
 16246 0000CDC9 483D[02000000]          	cmp rax, sob_boolean_false
 16247 0000CDCF 0F8525010000            	jne .L_or_end_061a
 16248 0000CDD5 488B4528                	mov rax, PARAM(1)
 16249 0000CDD9 50                      	push rax
 16250 0000CDDA 6A01                    	push 1
 16251 0000CDDC 488B0425[80000000]      	mov rax, qword [free_var_16]
 16252                                  	assert_closure(rax)
    65 0000CDE4 803805              <1>  cmp byte [%1], %2
    66 0000CDE7 0F8547730000        <1>  jne L_error_incorrect_type
 16253 0000CDED 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16254 0000CDF1 53                      	push rbx
 16255 0000CDF2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16256 0000CDF6 FFD3                    	call rbx
 16257 0000CDF8 50                      	push rax
 16258 0000CDF9 488B4520                	mov rax, PARAM(0)
 16259 0000CDFD 50                      	push rax
 16260 0000CDFE 6A02                    	push 2
 16261 0000CE00 488B4510                	mov rax, qword [rbp + 8*2]
 16262 0000CE04 488B4008                	mov rax, qword [rax + 8*1]
 16263 0000CE08 488B00                  	mov rax, qword [rax + 8*0]
 16264                                  	assert_closure(rax)
    65 0000CE0B 803805              <1>  cmp byte [%1], %2
    66 0000CE0E 0F8520730000        <1>  jne L_error_incorrect_type
 16265 0000CE14 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16266 0000CE18 53                      	push rbx
 16267 0000CE19 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16268 0000CE1D FFD3                    	call rbx
 16269 0000CE1F 483D[02000000]          	cmp rax, sob_boolean_false
 16270 0000CE25 0F84C7000000            	je .L_if_else_56b9
 16271 0000CE2B 488B4528                	mov rax, PARAM(1)
 16272 0000CE2F 50                      	push rax
 16273 0000CE30 6A01                    	push 1
 16274 0000CE32 488B0425[88000000]      	mov rax, qword [free_var_17]
 16275                                  	assert_closure(rax)
    65 0000CE3A 803805              <1>  cmp byte [%1], %2
    66 0000CE3D 0F85F1720000        <1>  jne L_error_incorrect_type
 16276 0000CE43 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16277 0000CE47 53                      	push rbx
 16278 0000CE48 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16279 0000CE4C FFD3                    	call rbx
 16280 0000CE4E 50                      	push rax
 16281 0000CE4F 488B4528                	mov rax, PARAM(1)
 16282 0000CE53 50                      	push rax
 16283 0000CE54 6A01                    	push 1
 16284 0000CE56 488B0425[80000000]      	mov rax, qword [free_var_16]
 16285                                  	assert_closure(rax)
    65 0000CE5E 803805              <1>  cmp byte [%1], %2
    66 0000CE61 0F85CD720000        <1>  jne L_error_incorrect_type
 16286 0000CE67 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16287 0000CE6B 53                      	push rbx
 16288 0000CE6C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16289 0000CE70 FFD3                    	call rbx
 16290 0000CE72 50                      	push rax
 16291 0000CE73 6A02                    	push 2
 16292 0000CE75 488B4510                	mov rax, qword [rbp + 8*2]
 16293 0000CE79 488B00                  	mov rax, qword [rax + 8*0]
 16294 0000CE7C 488B00                  	mov rax, qword [rax + 8*0]
 16295 0000CE7F 488B00                  	mov rax, qword [rax]
 16296                                  	assert_closure(rax)
    65 0000CE82 803805              <1>  cmp byte [%1], %2
    66 0000CE85 0F85A9720000        <1>  jne L_error_incorrect_type
 16297 0000CE8B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16298 0000CE8F 53                      	push rbx
 16299 0000CE90 FF7508                  	push RET_ADDR
 16300 0000CE93 488B7D18                	mov rdi, COUNT
 16301 0000CE97 4883C703                	add rdi, 3
 16302 0000CE9B 48C1E703                	shl rdi, 3
 16303 0000CE9F 4801EF                  	add rdi, rbp
 16304 0000CEA2 488B6D00                	mov rbp, OLD_RDP
 16305 0000CEA6 BE00000000              	mov rsi, 0
 16306                                  .L_tc_recycle_frame_loop_5d23:	 ; start recycle frame loop
 16307 0000CEAB 4883FE05                	cmp rsi, 5
 16308 0000CEAF 7427                    	je .L_tc_recycle_frame_done_5d23
 16309 0000CEB1 B904000000              	mov rcx, 4
 16310 0000CEB6 4829F1                  	sub rcx, rsi
 16311 0000CEB9 48C1E103                	shl rcx, 3
 16312 0000CEBD 4801E1                  	add rcx, rsp ; rcx is the address to move
 16313 0000CEC0 4889F3                  	mov rbx, rsi
 16314 0000CEC3 48C1E303                	shl rbx, 3
 16315 0000CEC7 48F7DB                  	neg rbx
 16316 0000CECA 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16317 0000CECD 488B09                  	mov rcx, [rcx]
 16318 0000CED0 48890B                  	mov [rbx], rcx
 16319 0000CED3 48FFC6                  	inc rsi
 16320 0000CED6 EBD3                    	jmp .L_tc_recycle_frame_loop_5d23
 16321                                  .L_tc_recycle_frame_done_5d23:	 ; end recycle frame loop
 16322 0000CED8 BB04000000              	mov rbx, 4
 16323 0000CEDD 48C1E303                	shl rbx, 3
 16324 0000CEE1 48F7DB                  	neg rbx
 16325 0000CEE4 4801FB                  	add rbx, rdi
 16326 0000CEE7 4889DC                  	mov rsp, rbx
 16327 0000CEEA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16328 0000CEEE FFE3                    	jmp rbx
 16329 0000CEF0 EB08                    	jmp .L_if_end_56b9
 16330                                  	.L_if_else_56b9:
 16331 0000CEF2 488D0425[02000000]      	lea rax, [2 + L_constants]
 16332                                  	.L_if_end_56b9:
 16333                                  .L_or_end_061a:
 16334 0000CEFA C9                      	leave
 16335 0000CEFB C22000                  	ret 8 * (2 + 2)
 16336                                  .L_lambda_simple_end_4f95:	; new closure is in rax
 16337 0000CEFE 50                      	push rax
 16338 0000CEFF 488B4520                	mov rax, PARAM(0)
 16339 0000CF03 8F00                    	pop qword [rax]
 16340 0000CF05 48B8-                   	mov rax, sob_void
 16340 0000CF07 [0000000000000000] 
 16341                                  
 16342 0000CF0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16343 0000CF14 E89B590000              	call malloc
 16344 0000CF19 50                      	push rax
 16345 0000CF1A BF08000000              	mov rdi, 8 * 1	; new rib
 16346 0000CF1F E890590000              	call malloc
 16347 0000CF24 50                      	push rax
 16348 0000CF25 BF28000000              	mov rdi, 8 * 5	; extended env
 16349 0000CF2A E885590000              	call malloc
 16350 0000CF2F 488B7D10                	mov rdi, ENV
 16351 0000CF33 BE00000000              	mov rsi, 0
 16352 0000CF38 BA01000000              	mov rdx, 1
 16353                                  .L_lambda_opt_env_loop_0c96:	; ext_env[i + 1] <-- env[i]
 16354 0000CF3D 4883FE04                	cmp rsi, 4
 16355 0000CF41 7410                    	je .L_lambda_opt_env_end_0c96
 16356 0000CF43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 16357 0000CF47 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16358 0000CF4B 48FFC6                  	inc rsi
 16359 0000CF4E 48FFC2                  	inc rdx
 16360 0000CF51 EBEA                    	jmp .L_lambda_opt_env_loop_0c96
 16361                                  .L_lambda_opt_env_end_0c96:
 16362 0000CF53 5B                      	pop rbx
 16363 0000CF54 BE00000000              	mov rsi, 0
 16364                                  .L_lambda_opt_params_loop_0c96:	; copy params
 16365 0000CF59 4883FE01                	cmp rsi, 1
 16366 0000CF5D 740E                    	je .L_lambda_opt_params_end_0c96
 16367 0000CF5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16368 0000CF64 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16369 0000CF68 48FFC6                  	inc rsi
 16370 0000CF6B EBEC                    	jmp .L_lambda_opt_params_loop_0c96
 16371                                  .L_lambda_opt_params_end_0c96:
 16372 0000CF6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16373 0000CF70 4889C3                  	mov rbx, rax
 16374 0000CF73 58                      	pop rax
 16375 0000CF74 C60005                  	mov byte [rax], T_closure
 16376 0000CF77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16377 0000CF7B 48C74009[88CF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c96
 16378 0000CF83 E984010000              	jmp .L_lambda_opt_end_0c96
 16379                                  .L_lambda_opt_code_0c96:	; lambda-opt body
 16380 0000CF88 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 16381 0000CF8D 4889FB                  	mov rbx, rdi
 16382 0000CF90 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 16383 0000CF94 4883FB00                	cmp rbx, 0
 16384 0000CF98 7F45                    	jg .L_lambda_opt_arity_check_more_0c96
 16385                                  .L_lambda_opt_arity_check_exact_0c96:	 ; if params in opt is exact
 16386 0000CF9A 4883EC08                	sub rsp, 8
 16387 0000CF9E BE00000000              	mov rsi, 0 ; index
 16388                                  .L_lambda_opt_stack_enlarge_loop_0c96:	 ; stack loop enlarge start
 16389 0000CFA3 4883FE04                	cmp rsi, 4
 16390 0000CFA7 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c96
 16391 0000CFA9 4889F7                  	mov rdi, rsi
 16392 0000CFAC 48FFC7                  	inc rdi
 16393 0000CFAF 48C1E703                	shl rdi, 3
 16394 0000CFB3 4801E7                  	add rdi, rsp
 16395 0000CFB6 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 16396 0000CFB9 4883EB08                	sub rbx, 8
 16397 0000CFBD 488B3F                  	mov rdi, [rdi]
 16398 0000CFC0 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 16399 0000CFC3 48FFC6                  	inc rsi
 16400 0000CFC6 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c96
 16401                                  .L_lambda_opt_stack_enlarge_loop_exit_0c96:	 ; end of stack enlarge loop
 16402 0000CFC8 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 16402 0000CFCD [01000000]         
 16403 0000CFD1 48C744241002000000      	mov qword [rsp + 2*8], 2
 16404 0000CFDA E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c96
 16405                                  .L_lambda_opt_arity_check_more_0c96:	 ; if params in opt is more
 16406 0000CFDF 48B8-                   	mov rax, sob_nil
 16406 0000CFE1 [0100000000000000] 
 16407 0000CFE9 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 16408 0000CFEC 48FFCE                  	dec rsi
 16409                                  .L_lambda_opt_list_create_loop_0c96:	; start of list creation loop
 16410 0000CFEF 4883FEFF                	cmp rsi, -1
 16411 0000CFF3 7422                    	je .L_lambda_opt_list_create_loop_exit_0c96
 16412 0000CFF5 488D4E04                	lea rcx, [rsi + (3 + 1)]
 16413 0000CFF9 48C1E103                	shl rcx, 3
 16414 0000CFFD 4801E1                  	add rcx, rsp
 16415 0000D000 488B09                  	mov rcx, [rcx]
 16416 0000D003 56                      	push rsi ; save params
 16417 0000D004 53                      	push rbx
 16418                                  
 16419 0000D005 50                      	push rax ; cdr
 16420 0000D006 51                      	push rcx ; car
 16421 0000D007 6A02                    	push qword 2 ; push num of args
 16422 0000D009 6A01                    	push qword 1 ; push garbage as env
 16423 0000D00B E82B620000              	call L_code_ptr_cons
 16424                                  
 16425 0000D010 5B                      	pop rbx ; restore params
 16426 0000D011 5E                      	pop rsi
 16427 0000D012 48FFCE                  	dec rsi
 16428 0000D015 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c96
 16429                                  .L_lambda_opt_list_create_loop_exit_0c96:	; end of list creation loop
 16430 0000D017 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 16431 0000D01C 4883C302                	add rbx, 2
 16432 0000D020 4889DF                  	mov rdi, rbx
 16433 0000D023 48C1E703                	shl rdi,3
 16434 0000D027 4801E7                  	add rdi, rsp
 16435 0000D02A 488907                  	mov [rdi], rax
 16436 0000D02D BE00000000              	mov rsi, 0 ;index
 16437                                  .L_lambda_opt_stack_shrink_loop_0c96:	; start of stack shrink loop
 16438 0000D032 4883FE04                	cmp rsi, 4
 16439 0000D036 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c96
 16440 0000D038 BF03000000              	mov rdi, 3
 16441 0000D03D 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 16442 0000D040 4889D9                  	mov rcx, rbx
 16443 0000D043 4829F1                  	sub rcx, rsi
 16444 0000D046 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 16445 0000D049 4889FA                  	mov rdx, rdi
 16446 0000D04C 48C1E203                	shl rdx, 3
 16447 0000D050 4801E2                  	add rdx, rsp
 16448 0000D053 48C1E103                	shl rcx, 3
 16449 0000D057 4801E1                  	add rcx, rsp
 16450 0000D05A 488B12                  	mov rdx, [rdx]
 16451 0000D05D 488911                  	mov [rcx], rdx
 16452 0000D060 48FFC6                  	inc rsi
 16453 0000D063 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c96
 16454                                  .L_lambda_opt_stack_shrink_loop_exit_0c96:	; end of stack shrink loop
 16455 0000D065 4883EB02                	sub rbx, 2 ; rbx has number of args
 16456 0000D069 4883EB02                	sub rbx, 2
 16457 0000D06D 48C1E303                	shl rbx, 3
 16458 0000D071 4801DC                  	add rsp, rbx
 16459 0000D074 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 16460                                  .L_lambda_opt_stack_adjusted_0c96:
 16461 0000D07D C8000000                	enter 0, 0
 16462 0000D081 488B4528                	mov rax, PARAM(1)
 16463 0000D085 50                      	push rax
 16464 0000D086 488B4520                	mov rax, PARAM(0)
 16465 0000D08A 50                      	push rax
 16466 0000D08B 6A02                    	push 2
 16467 0000D08D 488B4510                	mov rax, qword [rbp + 8*2]
 16468 0000D091 488B00                  	mov rax, qword [rax + 8*0]
 16469 0000D094 488B00                  	mov rax, qword [rax + 8*0]
 16470 0000D097 488B00                  	mov rax, qword [rax]
 16471                                  	assert_closure(rax)
    65 0000D09A 803805              <1>  cmp byte [%1], %2
    66 0000D09D 0F8591700000        <1>  jne L_error_incorrect_type
 16472 0000D0A3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16473 0000D0A7 53                      	push rbx
 16474 0000D0A8 FF7508                  	push RET_ADDR
 16475 0000D0AB 488B7D18                	mov rdi, COUNT
 16476 0000D0AF 4883C703                	add rdi, 3
 16477 0000D0B3 48C1E703                	shl rdi, 3
 16478 0000D0B7 4801EF                  	add rdi, rbp
 16479 0000D0BA 488B6D00                	mov rbp, OLD_RDP
 16480 0000D0BE BE00000000              	mov rsi, 0
 16481                                  .L_tc_recycle_frame_loop_5d24:	 ; start recycle frame loop
 16482 0000D0C3 4883FE05                	cmp rsi, 5
 16483 0000D0C7 7427                    	je .L_tc_recycle_frame_done_5d24
 16484 0000D0C9 B904000000              	mov rcx, 4
 16485 0000D0CE 4829F1                  	sub rcx, rsi
 16486 0000D0D1 48C1E103                	shl rcx, 3
 16487 0000D0D5 4801E1                  	add rcx, rsp ; rcx is the address to move
 16488 0000D0D8 4889F3                  	mov rbx, rsi
 16489 0000D0DB 48C1E303                	shl rbx, 3
 16490 0000D0DF 48F7DB                  	neg rbx
 16491 0000D0E2 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16492 0000D0E5 488B09                  	mov rcx, [rcx]
 16493 0000D0E8 48890B                  	mov [rbx], rcx
 16494 0000D0EB 48FFC6                  	inc rsi
 16495 0000D0EE EBD3                    	jmp .L_tc_recycle_frame_loop_5d24
 16496                                  .L_tc_recycle_frame_done_5d24:	 ; end recycle frame loop
 16497 0000D0F0 BB04000000              	mov rbx, 4
 16498 0000D0F5 48C1E303                	shl rbx, 3
 16499 0000D0F9 48F7DB                  	neg rbx
 16500 0000D0FC 4801FB                  	add rbx, rdi
 16501 0000D0FF 4889DC                  	mov rsp, rbx
 16502 0000D102 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16503 0000D106 FFE3                    	jmp rbx
 16504 0000D108 C9                      	leave
 16505 0000D109 C22000                  	ret AND_KILL_FRAME(2)
 16506                                  .L_lambda_opt_end_0c96:	; new closure is in rax
 16507 0000D10C C9                      	leave
 16508 0000D10D C21800                  	ret 8 * (2 + 1)
 16509                                  .L_lambda_simple_end_4f94:	; new closure is in rax
 16510                                  	assert_closure(rax)
    65 0000D110 803805              <1>  cmp byte [%1], %2
    66 0000D113 0F851B700000        <1>  jne L_error_incorrect_type
 16511 0000D119 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16512 0000D11D 53                      	push rbx
 16513 0000D11E FF7508                  	push RET_ADDR
 16514 0000D121 488B7D18                	mov rdi, COUNT
 16515 0000D125 4883C703                	add rdi, 3
 16516 0000D129 48C1E703                	shl rdi, 3
 16517 0000D12D 4801EF                  	add rdi, rbp
 16518 0000D130 488B6D00                	mov rbp, OLD_RDP
 16519 0000D134 BE00000000              	mov rsi, 0
 16520                                  .L_tc_recycle_frame_loop_5d22:	 ; start recycle frame loop
 16521 0000D139 4883FE04                	cmp rsi, 4
 16522 0000D13D 7427                    	je .L_tc_recycle_frame_done_5d22
 16523 0000D13F B903000000              	mov rcx, 3
 16524 0000D144 4829F1                  	sub rcx, rsi
 16525 0000D147 48C1E103                	shl rcx, 3
 16526 0000D14B 4801E1                  	add rcx, rsp ; rcx is the address to move
 16527 0000D14E 4889F3                  	mov rbx, rsi
 16528 0000D151 48C1E303                	shl rbx, 3
 16529 0000D155 48F7DB                  	neg rbx
 16530 0000D158 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16531 0000D15B 488B09                  	mov rcx, [rcx]
 16532 0000D15E 48890B                  	mov [rbx], rcx
 16533 0000D161 48FFC6                  	inc rsi
 16534 0000D164 EBD3                    	jmp .L_tc_recycle_frame_loop_5d22
 16535                                  .L_tc_recycle_frame_done_5d22:	 ; end recycle frame loop
 16536 0000D166 BB03000000              	mov rbx, 3
 16537 0000D16B 48C1E303                	shl rbx, 3
 16538 0000D16F 48F7DB                  	neg rbx
 16539 0000D172 4801FB                  	add rbx, rdi
 16540 0000D175 4889DC                  	mov rsp, rbx
 16541 0000D178 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16542 0000D17C FFE3                    	jmp rbx
 16543 0000D17E C9                      	leave
 16544 0000D17F C21800                  	ret 8 * (2 + 1)
 16545                                  .L_lambda_simple_end_4f93:	; new closure is in rax
 16546                                  	assert_closure(rax)
    65 0000D182 803805              <1>  cmp byte [%1], %2
    66 0000D185 0F85A96F0000        <1>  jne L_error_incorrect_type
 16547 0000D18B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16548 0000D18F 53                      	push rbx
 16549 0000D190 FF7508                  	push RET_ADDR
 16550 0000D193 488B7D18                	mov rdi, COUNT
 16551 0000D197 4883C703                	add rdi, 3
 16552 0000D19B 48C1E703                	shl rdi, 3
 16553 0000D19F 4801EF                  	add rdi, rbp
 16554 0000D1A2 488B6D00                	mov rbp, OLD_RDP
 16555 0000D1A6 BE00000000              	mov rsi, 0
 16556                                  .L_tc_recycle_frame_loop_5d1e:	 ; start recycle frame loop
 16557 0000D1AB 4883FE04                	cmp rsi, 4
 16558 0000D1AF 7427                    	je .L_tc_recycle_frame_done_5d1e
 16559 0000D1B1 B903000000              	mov rcx, 3
 16560 0000D1B6 4829F1                  	sub rcx, rsi
 16561 0000D1B9 48C1E103                	shl rcx, 3
 16562 0000D1BD 4801E1                  	add rcx, rsp ; rcx is the address to move
 16563 0000D1C0 4889F3                  	mov rbx, rsi
 16564 0000D1C3 48C1E303                	shl rbx, 3
 16565 0000D1C7 48F7DB                  	neg rbx
 16566 0000D1CA 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16567 0000D1CD 488B09                  	mov rcx, [rcx]
 16568 0000D1D0 48890B                  	mov [rbx], rcx
 16569 0000D1D3 48FFC6                  	inc rsi
 16570 0000D1D6 EBD3                    	jmp .L_tc_recycle_frame_loop_5d1e
 16571                                  .L_tc_recycle_frame_done_5d1e:	 ; end recycle frame loop
 16572 0000D1D8 BB03000000              	mov rbx, 3
 16573 0000D1DD 48C1E303                	shl rbx, 3
 16574 0000D1E1 48F7DB                  	neg rbx
 16575 0000D1E4 4801FB                  	add rbx, rdi
 16576 0000D1E7 4889DC                  	mov rsp, rbx
 16577 0000D1EA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16578 0000D1EE FFE3                    	jmp rbx
 16579 0000D1F0 C9                      	leave
 16580 0000D1F1 C21800                  	ret 8 * (2 + 1)
 16581                                  .L_lambda_simple_end_4f8f:	; new closure is in rax
 16582                                  	assert_closure(rax)
    65 0000D1F4 803805              <1>  cmp byte [%1], %2
    66 0000D1F7 0F85376F0000        <1>  jne L_error_incorrect_type
 16583 0000D1FD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16584 0000D201 53                      	push rbx
 16585 0000D202 FF7508                  	push RET_ADDR
 16586 0000D205 488B7D18                	mov rdi, COUNT
 16587 0000D209 4883C703                	add rdi, 3
 16588 0000D20D 48C1E703                	shl rdi, 3
 16589 0000D211 4801EF                  	add rdi, rbp
 16590 0000D214 488B6D00                	mov rbp, OLD_RDP
 16591 0000D218 BE00000000              	mov rsi, 0
 16592                                  .L_tc_recycle_frame_loop_5d1c:	 ; start recycle frame loop
 16593 0000D21D 4883FE04                	cmp rsi, 4
 16594 0000D221 7427                    	je .L_tc_recycle_frame_done_5d1c
 16595 0000D223 B903000000              	mov rcx, 3
 16596 0000D228 4829F1                  	sub rcx, rsi
 16597 0000D22B 48C1E103                	shl rcx, 3
 16598 0000D22F 4801E1                  	add rcx, rsp ; rcx is the address to move
 16599 0000D232 4889F3                  	mov rbx, rsi
 16600 0000D235 48C1E303                	shl rbx, 3
 16601 0000D239 48F7DB                  	neg rbx
 16602 0000D23C 4801FB                  	add rbx, rdi ;rbx is the address to move to
 16603 0000D23F 488B09                  	mov rcx, [rcx]
 16604 0000D242 48890B                  	mov [rbx], rcx
 16605 0000D245 48FFC6                  	inc rsi
 16606 0000D248 EBD3                    	jmp .L_tc_recycle_frame_loop_5d1c
 16607                                  .L_tc_recycle_frame_done_5d1c:	 ; end recycle frame loop
 16608 0000D24A BB03000000              	mov rbx, 3
 16609 0000D24F 48C1E303                	shl rbx, 3
 16610 0000D253 48F7DB                  	neg rbx
 16611 0000D256 4801FB                  	add rbx, rdi
 16612 0000D259 4889DC                  	mov rsp, rbx
 16613 0000D25C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16614 0000D260 FFE3                    	jmp rbx
 16615 0000D262 C9                      	leave
 16616 0000D263 C22000                  	ret 8 * (2 + 2)
 16617                                  .L_lambda_simple_end_4f8e:	; new closure is in rax
 16618 0000D266 50                      	push rax
 16619 0000D267 6A01                    	push 1
 16620 0000D269 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16621 0000D26E E841560000              	call malloc
 16622 0000D273 50                      	push rax
 16623 0000D274 BF00000000              	mov rdi, 8 * 0	; new rib
 16624 0000D279 E836560000              	call malloc
 16625 0000D27E 50                      	push rax
 16626 0000D27F BF08000000              	mov rdi, 8 * 1	; extended env
 16627 0000D284 E82B560000              	call malloc
 16628 0000D289 488B7D10                	mov rdi, ENV
 16629 0000D28D BE00000000              	mov rsi, 0
 16630 0000D292 BA01000000              	mov rdx, 1
 16631                                  .L_lambda_simple_env_loop_4f96:	; ext_env[i + 1] <-- env[i]
 16632 0000D297 4883FE00                	cmp rsi, 0
 16633 0000D29B 7410                    	je .L_lambda_simple_env_end_4f96
 16634 0000D29D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 16635 0000D2A1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16636 0000D2A5 48FFC6                  	inc rsi
 16637 0000D2A8 48FFC2                  	inc rdx
 16638 0000D2AB EBEA                    	jmp .L_lambda_simple_env_loop_4f96
 16639                                  .L_lambda_simple_env_end_4f96:
 16640 0000D2AD 5B                      	pop rbx
 16641 0000D2AE BE00000000              	mov rsi, 0
 16642                                  .L_lambda_simple_params_loop_4f96:	; copy params
 16643 0000D2B3 4883FE00                	cmp rsi, 0
 16644 0000D2B7 740E                    	je .L_lambda_simple_params_end_4f96
 16645 0000D2B9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16646 0000D2BE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16647 0000D2C2 48FFC6                  	inc rsi
 16648 0000D2C5 EBEC                    	jmp .L_lambda_simple_params_loop_4f96
 16649                                  .L_lambda_simple_params_end_4f96:
 16650 0000D2C7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16651 0000D2CA 4889C3                  	mov rbx, rax
 16652 0000D2CD 58                      	pop rax
 16653 0000D2CE C60005                  	mov byte [rax], T_closure
 16654 0000D2D1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16655 0000D2D5 48C74009[E2D20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f96
 16656 0000D2DD E913010000              	jmp .L_lambda_simple_end_4f96
 16657                                  .L_lambda_simple_code_4f96:	; lambda-simple body
 16658 0000D2E2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16659 0000D2E8 740B                    	je .L_lambda_simple_arity_check_ok_4f96
 16660 0000D2EA FF742410                	push qword [rsp + 8 * 2]
 16661 0000D2EE 6A01                    	push 1
 16662 0000D2F0 E978550000              	jmp L_error_incorrect_arity_simple
 16663                                  .L_lambda_simple_arity_check_ok_4f96:
 16664 0000D2F5 C8000000                	enter 0, 0
 16665 0000D2F9 488B0425[70030000]      	mov rax, qword [free_var_110]
 16666 0000D301 50                      	push rax
 16667 0000D302 488B0425[60030000]      	mov rax, qword [free_var_108]
 16668 0000D30A 50                      	push rax
 16669 0000D30B 6A02                    	push 2
 16670 0000D30D 488B4520                	mov rax, PARAM(0)
 16671                                  	assert_closure(rax)
    65 0000D311 803805              <1>  cmp byte [%1], %2
    66 0000D314 0F851A6E0000        <1>  jne L_error_incorrect_type
 16672 0000D31A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16673 0000D31E 53                      	push rbx
 16674 0000D31F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16675 0000D323 FFD3                    	call rbx
 16676 0000D325 48890425[E0030000]      	mov qword [free_var_124], rax
 16677 0000D32D 48B8-                   	mov rax, sob_void
 16677 0000D32F [0000000000000000] 
 16678                                  
 16679 0000D337 488B0425[A8030000]      	mov rax, qword [free_var_117]
 16680 0000D33F 50                      	push rax
 16681 0000D340 488B0425[98030000]      	mov rax, qword [free_var_115]
 16682 0000D348 50                      	push rax
 16683 0000D349 6A02                    	push 2
 16684 0000D34B 488B4520                	mov rax, PARAM(0)
 16685                                  	assert_closure(rax)
    65 0000D34F 803805              <1>  cmp byte [%1], %2
    66 0000D352 0F85DC6D0000        <1>  jne L_error_incorrect_type
 16686 0000D358 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16687 0000D35C 53                      	push rbx
 16688 0000D35D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16689 0000D361 FFD3                    	call rbx
 16690 0000D363 48890425[08040000]      	mov qword [free_var_129], rax
 16691 0000D36B 48B8-                   	mov rax, sob_void
 16691 0000D36D [0000000000000000] 
 16692                                  
 16693 0000D375 488B0425[70030000]      	mov rax, qword [free_var_110]
 16694 0000D37D 50                      	push rax
 16695 0000D37E 488B0425[78030000]      	mov rax, qword [free_var_111]
 16696 0000D386 50                      	push rax
 16697 0000D387 6A02                    	push 2
 16698 0000D389 488B4520                	mov rax, PARAM(0)
 16699                                  	assert_closure(rax)
    65 0000D38D 803805              <1>  cmp byte [%1], %2
    66 0000D390 0F859E6D0000        <1>  jne L_error_incorrect_type
 16700 0000D396 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16701 0000D39A 53                      	push rbx
 16702 0000D39B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16703 0000D39F FFD3                    	call rbx
 16704 0000D3A1 48890425[00040000]      	mov qword [free_var_128], rax
 16705 0000D3A9 48B8-                   	mov rax, sob_void
 16705 0000D3AB [0000000000000000] 
 16706                                  
 16707 0000D3B3 488B0425[A8030000]      	mov rax, qword [free_var_117]
 16708 0000D3BB 50                      	push rax
 16709 0000D3BC 488B0425[B0030000]      	mov rax, qword [free_var_118]
 16710 0000D3C4 50                      	push rax
 16711 0000D3C5 6A02                    	push 2
 16712 0000D3C7 488B4520                	mov rax, PARAM(0)
 16713                                  	assert_closure(rax)
    65 0000D3CB 803805              <1>  cmp byte [%1], %2
    66 0000D3CE 0F85606D0000        <1>  jne L_error_incorrect_type
 16714 0000D3D4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16715 0000D3D8 53                      	push rbx
 16716 0000D3D9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16717 0000D3DD FFD3                    	call rbx
 16718 0000D3DF 48890425[28040000]      	mov qword [free_var_133], rax
 16719 0000D3E7 48B8-                   	mov rax, sob_void
 16719 0000D3E9 [0000000000000000] 
 16720 0000D3F1 C9                      	leave
 16721 0000D3F2 C21800                  	ret 8 * (2 + 1)
 16722                                  .L_lambda_simple_end_4f96:	; new closure is in rax
 16723                                  	assert_closure(rax)
    65 0000D3F5 803805              <1>  cmp byte [%1], %2
    66 0000D3F8 0F85366D0000        <1>  jne L_error_incorrect_type
 16724 0000D3FE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16725 0000D402 53                      	push rbx
 16726 0000D403 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16727 0000D407 FFD3                    	call rbx
 16728                                  
 16729 0000D409 4889C7                  	mov rdi, rax
 16730 0000D40C E8B4540000              	call print_sexpr_if_not_void
 16731                                  
 16732 0000D411 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16733 0000D416 E899540000              	call malloc
 16734 0000D41B 50                      	push rax
 16735 0000D41C BF00000000              	mov rdi, 8 * 0	; new rib
 16736 0000D421 E88E540000              	call malloc
 16737 0000D426 50                      	push rax
 16738 0000D427 BF08000000              	mov rdi, 8 * 1	; extended env
 16739 0000D42C E883540000              	call malloc
 16740 0000D431 488B7D10                	mov rdi, ENV
 16741 0000D435 BE00000000              	mov rsi, 0
 16742 0000D43A BA01000000              	mov rdx, 1
 16743                                  .L_lambda_simple_env_loop_4f97:	; ext_env[i + 1] <-- env[i]
 16744 0000D43F 4883FE00                	cmp rsi, 0
 16745 0000D443 7410                    	je .L_lambda_simple_env_end_4f97
 16746 0000D445 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 16747 0000D449 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16748 0000D44D 48FFC6                  	inc rsi
 16749 0000D450 48FFC2                  	inc rdx
 16750 0000D453 EBEA                    	jmp .L_lambda_simple_env_loop_4f97
 16751                                  .L_lambda_simple_env_end_4f97:
 16752 0000D455 5B                      	pop rbx
 16753 0000D456 BE00000000              	mov rsi, 0
 16754                                  .L_lambda_simple_params_loop_4f97:	; copy params
 16755 0000D45B 4883FE00                	cmp rsi, 0
 16756 0000D45F 740E                    	je .L_lambda_simple_params_end_4f97
 16757 0000D461 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16758 0000D466 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16759 0000D46A 48FFC6                  	inc rsi
 16760 0000D46D EBEC                    	jmp .L_lambda_simple_params_loop_4f97
 16761                                  .L_lambda_simple_params_end_4f97:
 16762 0000D46F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16763 0000D472 4889C3                  	mov rbx, rax
 16764 0000D475 58                      	pop rax
 16765 0000D476 C60005                  	mov byte [rax], T_closure
 16766 0000D479 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16767 0000D47D 48C74009[8AD40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f97
 16768 0000D485 E9A70D0000              	jmp .L_lambda_simple_end_4f97
 16769                                  .L_lambda_simple_code_4f97:	; lambda-simple body
 16770 0000D48A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16771 0000D490 740B                    	je .L_lambda_simple_arity_check_ok_4f97
 16772 0000D492 FF742410                	push qword [rsp + 8 * 2]
 16773 0000D496 6A02                    	push 2
 16774 0000D498 E9D0530000              	jmp L_error_incorrect_arity_simple
 16775                                  .L_lambda_simple_arity_check_ok_4f97:
 16776 0000D49D C8000000                	enter 0, 0
 16777 0000D4A1 488D0425[17000000]      	lea rax, [23 + L_constants]
 16778 0000D4A9 50                      	push rax
 16779 0000D4AA 6A01                    	push 1
 16780 0000D4AC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16781 0000D4B1 E8FE530000              	call malloc
 16782 0000D4B6 50                      	push rax
 16783 0000D4B7 BF10000000              	mov rdi, 8 * 2	; new rib
 16784 0000D4BC E8F3530000              	call malloc
 16785 0000D4C1 50                      	push rax
 16786 0000D4C2 BF10000000              	mov rdi, 8 * 2	; extended env
 16787 0000D4C7 E8E8530000              	call malloc
 16788 0000D4CC 488B7D10                	mov rdi, ENV
 16789 0000D4D0 BE00000000              	mov rsi, 0
 16790 0000D4D5 BA01000000              	mov rdx, 1
 16791                                  .L_lambda_simple_env_loop_4f98:	; ext_env[i + 1] <-- env[i]
 16792 0000D4DA 4883FE01                	cmp rsi, 1
 16793 0000D4DE 7410                    	je .L_lambda_simple_env_end_4f98
 16794 0000D4E0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 16795 0000D4E4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16796 0000D4E8 48FFC6                  	inc rsi
 16797 0000D4EB 48FFC2                  	inc rdx
 16798 0000D4EE EBEA                    	jmp .L_lambda_simple_env_loop_4f98
 16799                                  .L_lambda_simple_env_end_4f98:
 16800 0000D4F0 5B                      	pop rbx
 16801 0000D4F1 BE00000000              	mov rsi, 0
 16802                                  .L_lambda_simple_params_loop_4f98:	; copy params
 16803 0000D4F6 4883FE02                	cmp rsi, 2
 16804 0000D4FA 740E                    	je .L_lambda_simple_params_end_4f98
 16805 0000D4FC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16806 0000D501 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16807 0000D505 48FFC6                  	inc rsi
 16808 0000D508 EBEC                    	jmp .L_lambda_simple_params_loop_4f98
 16809                                  .L_lambda_simple_params_end_4f98:
 16810 0000D50A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16811 0000D50D 4889C3                  	mov rbx, rax
 16812 0000D510 58                      	pop rax
 16813 0000D511 C60005                  	mov byte [rax], T_closure
 16814 0000D514 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16815 0000D518 48C74009[25D50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f98
 16816 0000D520 E99A0C0000              	jmp .L_lambda_simple_end_4f98
 16817                                  .L_lambda_simple_code_4f98:	; lambda-simple body
 16818 0000D525 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16819 0000D52B 740B                    	je .L_lambda_simple_arity_check_ok_4f98
 16820 0000D52D FF742410                	push qword [rsp + 8 * 2]
 16821 0000D531 6A01                    	push 1
 16822 0000D533 E935530000              	jmp L_error_incorrect_arity_simple
 16823                                  .L_lambda_simple_arity_check_ok_4f98:
 16824 0000D538 C8000000                	enter 0, 0
 16825 0000D53C BF11000000              	mov qword rdi, (1 + 8 + 8)
 16826 0000D541 E86E530000              	call malloc
 16827 0000D546 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 16828 0000D54A 48B8-                   	mov rax, sob_void
 16828 0000D54C [0000000000000000] 
 16829                                  
 16830 0000D554 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16831 0000D559 E856530000              	call malloc
 16832 0000D55E 50                      	push rax
 16833 0000D55F BF08000000              	mov rdi, 8 * 1	; new rib
 16834 0000D564 E84B530000              	call malloc
 16835 0000D569 50                      	push rax
 16836 0000D56A BF18000000              	mov rdi, 8 * 3	; extended env
 16837 0000D56F E840530000              	call malloc
 16838 0000D574 488B7D10                	mov rdi, ENV
 16839 0000D578 BE00000000              	mov rsi, 0
 16840 0000D57D BA01000000              	mov rdx, 1
 16841                                  .L_lambda_simple_env_loop_4f99:	; ext_env[i + 1] <-- env[i]
 16842 0000D582 4883FE02                	cmp rsi, 2
 16843 0000D586 7410                    	je .L_lambda_simple_env_end_4f99
 16844 0000D588 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 16845 0000D58C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16846 0000D590 48FFC6                  	inc rsi
 16847 0000D593 48FFC2                  	inc rdx
 16848 0000D596 EBEA                    	jmp .L_lambda_simple_env_loop_4f99
 16849                                  .L_lambda_simple_env_end_4f99:
 16850 0000D598 5B                      	pop rbx
 16851 0000D599 BE00000000              	mov rsi, 0
 16852                                  .L_lambda_simple_params_loop_4f99:	; copy params
 16853 0000D59E 4883FE01                	cmp rsi, 1
 16854 0000D5A2 740E                    	je .L_lambda_simple_params_end_4f99
 16855 0000D5A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16856 0000D5A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16857 0000D5AD 48FFC6                  	inc rsi
 16858 0000D5B0 EBEC                    	jmp .L_lambda_simple_params_loop_4f99
 16859                                  .L_lambda_simple_params_end_4f99:
 16860 0000D5B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16861 0000D5B5 4889C3                  	mov rbx, rax
 16862 0000D5B8 58                      	pop rax
 16863 0000D5B9 C60005                  	mov byte [rax], T_closure
 16864 0000D5BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16865 0000D5C0 48C74009[CDD50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f99
 16866 0000D5C8 E954020000              	jmp .L_lambda_simple_end_4f99
 16867                                  .L_lambda_simple_code_4f99:	; lambda-simple body
 16868 0000D5CD 48837C241005            	cmp qword [rsp + 8 * 2], 5
 16869 0000D5D3 740B                    	je .L_lambda_simple_arity_check_ok_4f99
 16870 0000D5D5 FF742410                	push qword [rsp + 8 * 2]
 16871 0000D5D9 6A05                    	push 5
 16872 0000D5DB E98D520000              	jmp L_error_incorrect_arity_simple
 16873                                  .L_lambda_simple_arity_check_ok_4f99:
 16874 0000D5E0 C8000000                	enter 0, 0
 16875 0000D5E4 488B4530                	mov rax, PARAM(2)
 16876 0000D5E8 50                      	push rax
 16877 0000D5E9 488B4520                	mov rax, PARAM(0)
 16878 0000D5ED 50                      	push rax
 16879 0000D5EE 6A02                    	push 2
 16880 0000D5F0 488B0425[50030000]      	mov rax, qword [free_var_106]
 16881                                  	assert_closure(rax)
    65 0000D5F8 803805              <1>  cmp byte [%1], %2
    66 0000D5FB 0F85336B0000        <1>  jne L_error_incorrect_type
 16882 0000D601 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16883 0000D605 53                      	push rbx
 16884 0000D606 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16885 0000D60A FFD3                    	call rbx
 16886 0000D60C 483D[02000000]          	cmp rax, sob_boolean_false
 16887 0000D612 0F8505020000            	jne .L_or_end_061b
 16888 0000D618 488B4520                	mov rax, PARAM(0)
 16889 0000D61C 50                      	push rax
 16890 0000D61D 488B4538                	mov rax, PARAM(3)
 16891 0000D621 50                      	push rax
 16892 0000D622 6A02                    	push 2
 16893 0000D624 488B0425[78010000]      	mov rax, qword [free_var_47]
 16894                                  	assert_closure(rax)
    65 0000D62C 803805              <1>  cmp byte [%1], %2
    66 0000D62F 0F85FF6A0000        <1>  jne L_error_incorrect_type
 16895 0000D635 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16896 0000D639 53                      	push rbx
 16897 0000D63A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16898 0000D63E FFD3                    	call rbx
 16899 0000D640 50                      	push rax
 16900 0000D641 488B4520                	mov rax, PARAM(0)
 16901 0000D645 50                      	push rax
 16902 0000D646 488B4528                	mov rax, PARAM(1)
 16903 0000D64A 50                      	push rax
 16904 0000D64B 6A02                    	push 2
 16905 0000D64D 488B0425[78010000]      	mov rax, qword [free_var_47]
 16906                                  	assert_closure(rax)
    65 0000D655 803805              <1>  cmp byte [%1], %2
    66 0000D658 0F85D66A0000        <1>  jne L_error_incorrect_type
 16907 0000D65E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16908 0000D662 53                      	push rbx
 16909 0000D663 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16910 0000D667 FFD3                    	call rbx
 16911 0000D669 50                      	push rax
 16912 0000D66A 6A02                    	push 2
 16913 0000D66C 488B4510                	mov rax, qword [rbp + 8*2]
 16914 0000D670 488B4008                	mov rax, qword [rax + 8*1]
 16915 0000D674 488B00                  	mov rax, qword [rax + 8*0]
 16916                                  	assert_closure(rax)
    65 0000D677 803805              <1>  cmp byte [%1], %2
    66 0000D67A 0F85B46A0000        <1>  jne L_error_incorrect_type
 16917 0000D680 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16918 0000D684 53                      	push rbx
 16919 0000D685 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16920 0000D689 FFD3                    	call rbx
 16921 0000D68B 483D[02000000]          	cmp rax, sob_boolean_false
 16922 0000D691 0F8586010000            	jne .L_or_end_061b
 16923 0000D697 488B4530                	mov rax, PARAM(2)
 16924 0000D69B 50                      	push rax
 16925 0000D69C 488B4520                	mov rax, PARAM(0)
 16926 0000D6A0 50                      	push rax
 16927 0000D6A1 6A02                    	push 2
 16928 0000D6A3 488B0425[30030000]      	mov rax, qword [free_var_102]
 16929                                  	assert_closure(rax)
    65 0000D6AB 803805              <1>  cmp byte [%1], %2
    66 0000D6AE 0F85806A0000        <1>  jne L_error_incorrect_type
 16930 0000D6B4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16931 0000D6B8 53                      	push rbx
 16932 0000D6B9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16933 0000D6BD FFD3                    	call rbx
 16934 0000D6BF 483D[02000000]          	cmp rax, sob_boolean_false
 16935 0000D6C5 0F844A010000            	je .L_if_else_56ba
 16936 0000D6CB 488B4520                	mov rax, PARAM(0)
 16937 0000D6CF 50                      	push rax
 16938 0000D6D0 488B4538                	mov rax, PARAM(3)
 16939 0000D6D4 50                      	push rax
 16940 0000D6D5 6A02                    	push 2
 16941 0000D6D7 488B0425[78010000]      	mov rax, qword [free_var_47]
 16942                                  	assert_closure(rax)
    65 0000D6DF 803805              <1>  cmp byte [%1], %2
    66 0000D6E2 0F854C6A0000        <1>  jne L_error_incorrect_type
 16943 0000D6E8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16944 0000D6EC 53                      	push rbx
 16945 0000D6ED 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16946 0000D6F1 FFD3                    	call rbx
 16947 0000D6F3 50                      	push rax
 16948 0000D6F4 488B4520                	mov rax, PARAM(0)
 16949 0000D6F8 50                      	push rax
 16950 0000D6F9 488B4528                	mov rax, PARAM(1)
 16951 0000D6FD 50                      	push rax
 16952 0000D6FE 6A02                    	push 2
 16953 0000D700 488B0425[78010000]      	mov rax, qword [free_var_47]
 16954                                  	assert_closure(rax)
    65 0000D708 803805              <1>  cmp byte [%1], %2
    66 0000D70B 0F85236A0000        <1>  jne L_error_incorrect_type
 16955 0000D711 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16956 0000D715 53                      	push rbx
 16957 0000D716 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16958 0000D71A FFD3                    	call rbx
 16959 0000D71C 50                      	push rax
 16960 0000D71D 6A02                    	push 2
 16961 0000D71F 488B4510                	mov rax, qword [rbp + 8*2]
 16962 0000D723 488B4008                	mov rax, qword [rax + 8*1]
 16963 0000D727 488B4008                	mov rax, qword [rax + 8*1]
 16964                                  	assert_closure(rax)
    65 0000D72B 803805              <1>  cmp byte [%1], %2
    66 0000D72E 0F85006A0000        <1>  jne L_error_incorrect_type
 16965 0000D734 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16966 0000D738 53                      	push rbx
 16967 0000D739 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16968 0000D73D FFD3                    	call rbx
 16969 0000D73F 483D[02000000]          	cmp rax, sob_boolean_false
 16970 0000D745 0F84C0000000            	je .L_if_else_56bb
 16971 0000D74B 488B4540                	mov rax, PARAM(4)
 16972 0000D74F 50                      	push rax
 16973 0000D750 488B4538                	mov rax, PARAM(3)
 16974 0000D754 50                      	push rax
 16975 0000D755 488B4530                	mov rax, PARAM(2)
 16976 0000D759 50                      	push rax
 16977 0000D75A 488B4528                	mov rax, PARAM(1)
 16978 0000D75E 50                      	push rax
 16979 0000D75F 488D0425[80000000]      	lea rax, [128 + L_constants]
 16980 0000D767 50                      	push rax
 16981 0000D768 488B4520                	mov rax, PARAM(0)
 16982 0000D76C 50                      	push rax
 16983 0000D76D 6A02                    	push 2
 16984 0000D76F 488B0425[08030000]      	mov rax, qword [free_var_97]
 16985                                  	assert_closure(rax)
    65 0000D777 803805              <1>  cmp byte [%1], %2
    66 0000D77A 0F85B4690000        <1>  jne L_error_incorrect_type
 16986 0000D780 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16987 0000D784 53                      	push rbx
 16988 0000D785 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16989 0000D789 FFD3                    	call rbx
 16990 0000D78B 50                      	push rax
 16991 0000D78C 6A05                    	push 5
 16992 0000D78E 488B4510                	mov rax, qword [rbp + 8*2]
 16993 0000D792 488B00                  	mov rax, qword [rax + 8*0]
 16994 0000D795 488B00                  	mov rax, qword [rax + 8*0]
 16995 0000D798 488B00                  	mov rax, qword [rax]
 16996                                  	assert_closure(rax)
    65 0000D79B 803805              <1>  cmp byte [%1], %2
    66 0000D79E 0F8590690000        <1>  jne L_error_incorrect_type
 16997 0000D7A4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16998 0000D7A8 53                      	push rbx
 16999 0000D7A9 FF7508                  	push RET_ADDR
 17000 0000D7AC 488B7D18                	mov rdi, COUNT
 17001 0000D7B0 4883C703                	add rdi, 3
 17002 0000D7B4 48C1E703                	shl rdi, 3
 17003 0000D7B8 4801EF                  	add rdi, rbp
 17004 0000D7BB 488B6D00                	mov rbp, OLD_RDP
 17005 0000D7BF BE00000000              	mov rsi, 0
 17006                                  .L_tc_recycle_frame_loop_5d26:	 ; start recycle frame loop
 17007 0000D7C4 4883FE08                	cmp rsi, 8
 17008 0000D7C8 7427                    	je .L_tc_recycle_frame_done_5d26
 17009 0000D7CA B907000000              	mov rcx, 7
 17010 0000D7CF 4829F1                  	sub rcx, rsi
 17011 0000D7D2 48C1E103                	shl rcx, 3
 17012 0000D7D6 4801E1                  	add rcx, rsp ; rcx is the address to move
 17013 0000D7D9 4889F3                  	mov rbx, rsi
 17014 0000D7DC 48C1E303                	shl rbx, 3
 17015 0000D7E0 48F7DB                  	neg rbx
 17016 0000D7E3 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17017 0000D7E6 488B09                  	mov rcx, [rcx]
 17018 0000D7E9 48890B                  	mov [rbx], rcx
 17019 0000D7EC 48FFC6                  	inc rsi
 17020 0000D7EF EBD3                    	jmp .L_tc_recycle_frame_loop_5d26
 17021                                  .L_tc_recycle_frame_done_5d26:	 ; end recycle frame loop
 17022 0000D7F1 BB07000000              	mov rbx, 7
 17023 0000D7F6 48C1E303                	shl rbx, 3
 17024 0000D7FA 48F7DB                  	neg rbx
 17025 0000D7FD 4801FB                  	add rbx, rdi
 17026 0000D800 4889DC                  	mov rsp, rbx
 17027 0000D803 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17028 0000D807 FFE3                    	jmp rbx
 17029 0000D809 EB08                    	jmp .L_if_end_56bb
 17030                                  	.L_if_else_56bb:
 17031 0000D80B 488D0425[02000000]      	lea rax, [2 + L_constants]
 17032                                  	.L_if_end_56bb:
 17033 0000D813 EB08                    	jmp .L_if_end_56ba
 17034                                  	.L_if_else_56ba:
 17035 0000D815 488D0425[02000000]      	lea rax, [2 + L_constants]
 17036                                  	.L_if_end_56ba:
 17037                                  .L_or_end_061b:
 17038 0000D81D C9                      	leave
 17039 0000D81E C23800                  	ret 8 * (2 + 5)
 17040                                  .L_lambda_simple_end_4f99:	; new closure is in rax
 17041 0000D821 50                      	push rax
 17042 0000D822 488B4520                	mov rax, PARAM(0)
 17043 0000D826 8F00                    	pop qword [rax]
 17044 0000D828 48B8-                   	mov rax, sob_void
 17044 0000D82A [0000000000000000] 
 17045                                  
 17046 0000D832 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17047 0000D837 E878500000              	call malloc
 17048 0000D83C 50                      	push rax
 17049 0000D83D BF08000000              	mov rdi, 8 * 1	; new rib
 17050 0000D842 E86D500000              	call malloc
 17051 0000D847 50                      	push rax
 17052 0000D848 BF18000000              	mov rdi, 8 * 3	; extended env
 17053 0000D84D E862500000              	call malloc
 17054 0000D852 488B7D10                	mov rdi, ENV
 17055 0000D856 BE00000000              	mov rsi, 0
 17056 0000D85B BA01000000              	mov rdx, 1
 17057                                  .L_lambda_simple_env_loop_4f9a:	; ext_env[i + 1] <-- env[i]
 17058 0000D860 4883FE02                	cmp rsi, 2
 17059 0000D864 7410                    	je .L_lambda_simple_env_end_4f9a
 17060 0000D866 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 17061 0000D86A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17062 0000D86E 48FFC6                  	inc rsi
 17063 0000D871 48FFC2                  	inc rdx
 17064 0000D874 EBEA                    	jmp .L_lambda_simple_env_loop_4f9a
 17065                                  .L_lambda_simple_env_end_4f9a:
 17066 0000D876 5B                      	pop rbx
 17067 0000D877 BE00000000              	mov rsi, 0
 17068                                  .L_lambda_simple_params_loop_4f9a:	; copy params
 17069 0000D87C 4883FE01                	cmp rsi, 1
 17070 0000D880 740E                    	je .L_lambda_simple_params_end_4f9a
 17071 0000D882 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17072 0000D887 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17073 0000D88B 48FFC6                  	inc rsi
 17074 0000D88E EBEC                    	jmp .L_lambda_simple_params_loop_4f9a
 17075                                  .L_lambda_simple_params_end_4f9a:
 17076 0000D890 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17077 0000D893 4889C3                  	mov rbx, rax
 17078 0000D896 58                      	pop rax
 17079 0000D897 C60005                  	mov byte [rax], T_closure
 17080 0000D89A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17081 0000D89E 48C74009[ABD80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f9a
 17082 0000D8A6 E9F0020000              	jmp .L_lambda_simple_end_4f9a
 17083                                  .L_lambda_simple_code_4f9a:	; lambda-simple body
 17084 0000D8AB 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17085 0000D8B1 740B                    	je .L_lambda_simple_arity_check_ok_4f9a
 17086 0000D8B3 FF742410                	push qword [rsp + 8 * 2]
 17087 0000D8B7 6A02                    	push 2
 17088 0000D8B9 E9AF4F0000              	jmp L_error_incorrect_arity_simple
 17089                                  .L_lambda_simple_arity_check_ok_4f9a:
 17090 0000D8BE C8000000                	enter 0, 0
 17091 0000D8C2 488B4528                	mov rax, PARAM(1)
 17092 0000D8C6 50                      	push rax
 17093 0000D8C7 6A01                    	push 1
 17094 0000D8C9 488B0425[90000000]      	mov rax, qword [free_var_18]
 17095                                  	assert_closure(rax)
    65 0000D8D1 803805              <1>  cmp byte [%1], %2
    66 0000D8D4 0F855A680000        <1>  jne L_error_incorrect_type
 17096 0000D8DA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17097 0000D8DE 53                      	push rbx
 17098 0000D8DF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17099 0000D8E3 FFD3                    	call rbx
 17100 0000D8E5 50                      	push rax
 17101 0000D8E6 488B4520                	mov rax, PARAM(0)
 17102 0000D8EA 50                      	push rax
 17103 0000D8EB 6A01                    	push 1
 17104 0000D8ED 488B0425[90000000]      	mov rax, qword [free_var_18]
 17105                                  	assert_closure(rax)
    65 0000D8F5 803805              <1>  cmp byte [%1], %2
    66 0000D8F8 0F8536680000        <1>  jne L_error_incorrect_type
 17106 0000D8FE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17107 0000D902 53                      	push rbx
 17108 0000D903 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17109 0000D907 FFD3                    	call rbx
 17110 0000D909 50                      	push rax
 17111 0000D90A 6A02                    	push 2
 17112 0000D90C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17113 0000D911 E89E4F0000              	call malloc
 17114 0000D916 50                      	push rax
 17115 0000D917 BF10000000              	mov rdi, 8 * 2	; new rib
 17116 0000D91C E8934F0000              	call malloc
 17117 0000D921 50                      	push rax
 17118 0000D922 BF20000000              	mov rdi, 8 * 4	; extended env
 17119 0000D927 E8884F0000              	call malloc
 17120 0000D92C 488B7D10                	mov rdi, ENV
 17121 0000D930 BE00000000              	mov rsi, 0
 17122 0000D935 BA01000000              	mov rdx, 1
 17123                                  .L_lambda_simple_env_loop_4f9b:	; ext_env[i + 1] <-- env[i]
 17124 0000D93A 4883FE03                	cmp rsi, 3
 17125 0000D93E 7410                    	je .L_lambda_simple_env_end_4f9b
 17126 0000D940 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 17127 0000D944 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17128 0000D948 48FFC6                  	inc rsi
 17129 0000D94B 48FFC2                  	inc rdx
 17130 0000D94E EBEA                    	jmp .L_lambda_simple_env_loop_4f9b
 17131                                  .L_lambda_simple_env_end_4f9b:
 17132 0000D950 5B                      	pop rbx
 17133 0000D951 BE00000000              	mov rsi, 0
 17134                                  .L_lambda_simple_params_loop_4f9b:	; copy params
 17135 0000D956 4883FE02                	cmp rsi, 2
 17136 0000D95A 740E                    	je .L_lambda_simple_params_end_4f9b
 17137 0000D95C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17138 0000D961 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17139 0000D965 48FFC6                  	inc rsi
 17140 0000D968 EBEC                    	jmp .L_lambda_simple_params_loop_4f9b
 17141                                  .L_lambda_simple_params_end_4f9b:
 17142 0000D96A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17143 0000D96D 4889C3                  	mov rbx, rax
 17144 0000D970 58                      	pop rax
 17145 0000D971 C60005                  	mov byte [rax], T_closure
 17146 0000D974 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17147 0000D978 48C74009[85D90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f9b
 17148 0000D980 E9A4010000              	jmp .L_lambda_simple_end_4f9b
 17149                                  .L_lambda_simple_code_4f9b:	; lambda-simple body
 17150 0000D985 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17151 0000D98B 740B                    	je .L_lambda_simple_arity_check_ok_4f9b
 17152 0000D98D FF742410                	push qword [rsp + 8 * 2]
 17153 0000D991 6A02                    	push 2
 17154 0000D993 E9D54E0000              	jmp L_error_incorrect_arity_simple
 17155                                  .L_lambda_simple_arity_check_ok_4f9b:
 17156 0000D998 C8000000                	enter 0, 0
 17157 0000D99C 488B4528                	mov rax, PARAM(1)
 17158 0000D9A0 50                      	push rax
 17159 0000D9A1 488B4520                	mov rax, PARAM(0)
 17160 0000D9A5 50                      	push rax
 17161 0000D9A6 6A02                    	push 2
 17162 0000D9A8 488B0425[38030000]      	mov rax, qword [free_var_103]
 17163                                  	assert_closure(rax)
    65 0000D9B0 803805              <1>  cmp byte [%1], %2
    66 0000D9B3 0F857B670000        <1>  jne L_error_incorrect_type
 17164 0000D9B9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17165 0000D9BD 53                      	push rbx
 17166 0000D9BE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17167 0000D9C2 FFD3                    	call rbx
 17168 0000D9C4 483D[02000000]          	cmp rax, sob_boolean_false
 17169 0000D9CA 0F84AD000000            	je .L_if_else_56bc
 17170 0000D9D0 488B4528                	mov rax, PARAM(1)
 17171 0000D9D4 50                      	push rax
 17172 0000D9D5 488B4510                	mov rax, qword [rbp + 8*2]
 17173 0000D9D9 488B00                  	mov rax, qword [rax + 8*0]
 17174 0000D9DC 488B4008                	mov rax, qword [rax + 8*1]
 17175 0000D9E0 50                      	push rax
 17176 0000D9E1 488B4520                	mov rax, PARAM(0)
 17177 0000D9E5 50                      	push rax
 17178 0000D9E6 488B4510                	mov rax, qword [rbp + 8*2]
 17179 0000D9EA 488B00                  	mov rax, qword [rax + 8*0]
 17180 0000D9ED 488B00                  	mov rax, qword [rax + 8*0]
 17181 0000D9F0 50                      	push rax
 17182 0000D9F1 488D0425[20000000]      	lea rax, [32 + L_constants]
 17183 0000D9F9 50                      	push rax
 17184 0000D9FA 6A05                    	push 5
 17185 0000D9FC 488B4510                	mov rax, qword [rbp + 8*2]
 17186 0000DA00 488B4008                	mov rax, qword [rax + 8*1]
 17187 0000DA04 488B00                  	mov rax, qword [rax + 8*0]
 17188 0000DA07 488B00                  	mov rax, qword [rax]
 17189                                  	assert_closure(rax)
    65 0000DA0A 803805              <1>  cmp byte [%1], %2
    66 0000DA0D 0F8521670000        <1>  jne L_error_incorrect_type
 17190 0000DA13 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17191 0000DA17 53                      	push rbx
 17192 0000DA18 FF7508                  	push RET_ADDR
 17193 0000DA1B 488B7D18                	mov rdi, COUNT
 17194 0000DA1F 4883C703                	add rdi, 3
 17195 0000DA23 48C1E703                	shl rdi, 3
 17196 0000DA27 4801EF                  	add rdi, rbp
 17197 0000DA2A 488B6D00                	mov rbp, OLD_RDP
 17198 0000DA2E BE00000000              	mov rsi, 0
 17199                                  .L_tc_recycle_frame_loop_5d29:	 ; start recycle frame loop
 17200 0000DA33 4883FE08                	cmp rsi, 8
 17201 0000DA37 7427                    	je .L_tc_recycle_frame_done_5d29
 17202 0000DA39 B907000000              	mov rcx, 7
 17203 0000DA3E 4829F1                  	sub rcx, rsi
 17204 0000DA41 48C1E103                	shl rcx, 3
 17205 0000DA45 4801E1                  	add rcx, rsp ; rcx is the address to move
 17206 0000DA48 4889F3                  	mov rbx, rsi
 17207 0000DA4B 48C1E303                	shl rbx, 3
 17208 0000DA4F 48F7DB                  	neg rbx
 17209 0000DA52 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17210 0000DA55 488B09                  	mov rcx, [rcx]
 17211 0000DA58 48890B                  	mov [rbx], rcx
 17212 0000DA5B 48FFC6                  	inc rsi
 17213 0000DA5E EBD3                    	jmp .L_tc_recycle_frame_loop_5d29
 17214                                  .L_tc_recycle_frame_done_5d29:	 ; end recycle frame loop
 17215 0000DA60 BB07000000              	mov rbx, 7
 17216 0000DA65 48C1E303                	shl rbx, 3
 17217 0000DA69 48F7DB                  	neg rbx
 17218 0000DA6C 4801FB                  	add rbx, rdi
 17219 0000DA6F 4889DC                  	mov rsp, rbx
 17220 0000DA72 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17221 0000DA76 FFE3                    	jmp rbx
 17222 0000DA78 E9A8000000              	jmp .L_if_end_56bc
 17223                                  	.L_if_else_56bc:
 17224 0000DA7D 488B4520                	mov rax, PARAM(0)
 17225 0000DA81 50                      	push rax
 17226 0000DA82 488B4510                	mov rax, qword [rbp + 8*2]
 17227 0000DA86 488B00                  	mov rax, qword [rax + 8*0]
 17228 0000DA89 488B00                  	mov rax, qword [rax + 8*0]
 17229 0000DA8C 50                      	push rax
 17230 0000DA8D 488B4528                	mov rax, PARAM(1)
 17231 0000DA91 50                      	push rax
 17232 0000DA92 488B4510                	mov rax, qword [rbp + 8*2]
 17233 0000DA96 488B00                  	mov rax, qword [rax + 8*0]
 17234 0000DA99 488B4008                	mov rax, qword [rax + 8*1]
 17235 0000DA9D 50                      	push rax
 17236 0000DA9E 488D0425[20000000]      	lea rax, [32 + L_constants]
 17237 0000DAA6 50                      	push rax
 17238 0000DAA7 6A05                    	push 5
 17239 0000DAA9 488B4510                	mov rax, qword [rbp + 8*2]
 17240 0000DAAD 488B4008                	mov rax, qword [rax + 8*1]
 17241 0000DAB1 488B00                  	mov rax, qword [rax + 8*0]
 17242 0000DAB4 488B00                  	mov rax, qword [rax]
 17243                                  	assert_closure(rax)
    65 0000DAB7 803805              <1>  cmp byte [%1], %2
    66 0000DABA 0F8574660000        <1>  jne L_error_incorrect_type
 17244 0000DAC0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17245 0000DAC4 53                      	push rbx
 17246 0000DAC5 FF7508                  	push RET_ADDR
 17247 0000DAC8 488B7D18                	mov rdi, COUNT
 17248 0000DACC 4883C703                	add rdi, 3
 17249 0000DAD0 48C1E703                	shl rdi, 3
 17250 0000DAD4 4801EF                  	add rdi, rbp
 17251 0000DAD7 488B6D00                	mov rbp, OLD_RDP
 17252 0000DADB BE00000000              	mov rsi, 0
 17253                                  .L_tc_recycle_frame_loop_5d2a:	 ; start recycle frame loop
 17254 0000DAE0 4883FE08                	cmp rsi, 8
 17255 0000DAE4 7427                    	je .L_tc_recycle_frame_done_5d2a
 17256 0000DAE6 B907000000              	mov rcx, 7
 17257 0000DAEB 4829F1                  	sub rcx, rsi
 17258 0000DAEE 48C1E103                	shl rcx, 3
 17259 0000DAF2 4801E1                  	add rcx, rsp ; rcx is the address to move
 17260 0000DAF5 4889F3                  	mov rbx, rsi
 17261 0000DAF8 48C1E303                	shl rbx, 3
 17262 0000DAFC 48F7DB                  	neg rbx
 17263 0000DAFF 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17264 0000DB02 488B09                  	mov rcx, [rcx]
 17265 0000DB05 48890B                  	mov [rbx], rcx
 17266 0000DB08 48FFC6                  	inc rsi
 17267 0000DB0B EBD3                    	jmp .L_tc_recycle_frame_loop_5d2a
 17268                                  .L_tc_recycle_frame_done_5d2a:	 ; end recycle frame loop
 17269 0000DB0D BB07000000              	mov rbx, 7
 17270 0000DB12 48C1E303                	shl rbx, 3
 17271 0000DB16 48F7DB                  	neg rbx
 17272 0000DB19 4801FB                  	add rbx, rdi
 17273 0000DB1C 4889DC                  	mov rsp, rbx
 17274 0000DB1F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17275 0000DB23 FFE3                    	jmp rbx
 17276                                  	.L_if_end_56bc:
 17277 0000DB25 C9                      	leave
 17278 0000DB26 C22000                  	ret 8 * (2 + 2)
 17279                                  .L_lambda_simple_end_4f9b:	; new closure is in rax
 17280                                  	assert_closure(rax)
    65 0000DB29 803805              <1>  cmp byte [%1], %2
    66 0000DB2C 0F8502660000        <1>  jne L_error_incorrect_type
 17281 0000DB32 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17282 0000DB36 53                      	push rbx
 17283 0000DB37 FF7508                  	push RET_ADDR
 17284 0000DB3A 488B7D18                	mov rdi, COUNT
 17285 0000DB3E 4883C703                	add rdi, 3
 17286 0000DB42 48C1E703                	shl rdi, 3
 17287 0000DB46 4801EF                  	add rdi, rbp
 17288 0000DB49 488B6D00                	mov rbp, OLD_RDP
 17289 0000DB4D BE00000000              	mov rsi, 0
 17290                                  .L_tc_recycle_frame_loop_5d28:	 ; start recycle frame loop
 17291 0000DB52 4883FE05                	cmp rsi, 5
 17292 0000DB56 7427                    	je .L_tc_recycle_frame_done_5d28
 17293 0000DB58 B904000000              	mov rcx, 4
 17294 0000DB5D 4829F1                  	sub rcx, rsi
 17295 0000DB60 48C1E103                	shl rcx, 3
 17296 0000DB64 4801E1                  	add rcx, rsp ; rcx is the address to move
 17297 0000DB67 4889F3                  	mov rbx, rsi
 17298 0000DB6A 48C1E303                	shl rbx, 3
 17299 0000DB6E 48F7DB                  	neg rbx
 17300 0000DB71 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17301 0000DB74 488B09                  	mov rcx, [rcx]
 17302 0000DB77 48890B                  	mov [rbx], rcx
 17303 0000DB7A 48FFC6                  	inc rsi
 17304 0000DB7D EBD3                    	jmp .L_tc_recycle_frame_loop_5d28
 17305                                  .L_tc_recycle_frame_done_5d28:	 ; end recycle frame loop
 17306 0000DB7F BB04000000              	mov rbx, 4
 17307 0000DB84 48C1E303                	shl rbx, 3
 17308 0000DB88 48F7DB                  	neg rbx
 17309 0000DB8B 4801FB                  	add rbx, rdi
 17310 0000DB8E 4889DC                  	mov rsp, rbx
 17311 0000DB91 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17312 0000DB95 FFE3                    	jmp rbx
 17313 0000DB97 C9                      	leave
 17314 0000DB98 C22000                  	ret 8 * (2 + 2)
 17315                                  .L_lambda_simple_end_4f9a:	; new closure is in rax
 17316 0000DB9B 50                      	push rax
 17317 0000DB9C 6A01                    	push 1
 17318 0000DB9E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17319 0000DBA3 E80C4D0000              	call malloc
 17320 0000DBA8 50                      	push rax
 17321 0000DBA9 BF08000000              	mov rdi, 8 * 1	; new rib
 17322 0000DBAE E8014D0000              	call malloc
 17323 0000DBB3 50                      	push rax
 17324 0000DBB4 BF18000000              	mov rdi, 8 * 3	; extended env
 17325 0000DBB9 E8F64C0000              	call malloc
 17326 0000DBBE 488B7D10                	mov rdi, ENV
 17327 0000DBC2 BE00000000              	mov rsi, 0
 17328 0000DBC7 BA01000000              	mov rdx, 1
 17329                                  .L_lambda_simple_env_loop_4f9c:	; ext_env[i + 1] <-- env[i]
 17330 0000DBCC 4883FE02                	cmp rsi, 2
 17331 0000DBD0 7410                    	je .L_lambda_simple_env_end_4f9c
 17332 0000DBD2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 17333 0000DBD6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17334 0000DBDA 48FFC6                  	inc rsi
 17335 0000DBDD 48FFC2                  	inc rdx
 17336 0000DBE0 EBEA                    	jmp .L_lambda_simple_env_loop_4f9c
 17337                                  .L_lambda_simple_env_end_4f9c:
 17338 0000DBE2 5B                      	pop rbx
 17339 0000DBE3 BE00000000              	mov rsi, 0
 17340                                  .L_lambda_simple_params_loop_4f9c:	; copy params
 17341 0000DBE8 4883FE01                	cmp rsi, 1
 17342 0000DBEC 740E                    	je .L_lambda_simple_params_end_4f9c
 17343 0000DBEE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17344 0000DBF3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17345 0000DBF7 48FFC6                  	inc rsi
 17346 0000DBFA EBEC                    	jmp .L_lambda_simple_params_loop_4f9c
 17347                                  .L_lambda_simple_params_end_4f9c:
 17348 0000DBFC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17349 0000DBFF 4889C3                  	mov rbx, rax
 17350 0000DC02 58                      	pop rax
 17351 0000DC03 C60005                  	mov byte [rax], T_closure
 17352 0000DC06 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17353 0000DC0A 48C74009[17DC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f9c
 17354 0000DC12 E936050000              	jmp .L_lambda_simple_end_4f9c
 17355                                  .L_lambda_simple_code_4f9c:	; lambda-simple body
 17356 0000DC17 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17357 0000DC1D 740B                    	je .L_lambda_simple_arity_check_ok_4f9c
 17358 0000DC1F FF742410                	push qword [rsp + 8 * 2]
 17359 0000DC23 6A01                    	push 1
 17360 0000DC25 E9434C0000              	jmp L_error_incorrect_arity_simple
 17361                                  .L_lambda_simple_arity_check_ok_4f9c:
 17362 0000DC2A C8000000                	enter 0, 0
 17363 0000DC2E 488D0425[17000000]      	lea rax, [23 + L_constants]
 17364 0000DC36 50                      	push rax
 17365 0000DC37 6A01                    	push 1
 17366 0000DC39 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17367 0000DC3E E8714C0000              	call malloc
 17368 0000DC43 50                      	push rax
 17369 0000DC44 BF08000000              	mov rdi, 8 * 1	; new rib
 17370 0000DC49 E8664C0000              	call malloc
 17371 0000DC4E 50                      	push rax
 17372 0000DC4F BF20000000              	mov rdi, 8 * 4	; extended env
 17373 0000DC54 E85B4C0000              	call malloc
 17374 0000DC59 488B7D10                	mov rdi, ENV
 17375 0000DC5D BE00000000              	mov rsi, 0
 17376 0000DC62 BA01000000              	mov rdx, 1
 17377                                  .L_lambda_simple_env_loop_4f9d:	; ext_env[i + 1] <-- env[i]
 17378 0000DC67 4883FE03                	cmp rsi, 3
 17379 0000DC6B 7410                    	je .L_lambda_simple_env_end_4f9d
 17380 0000DC6D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 17381 0000DC71 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17382 0000DC75 48FFC6                  	inc rsi
 17383 0000DC78 48FFC2                  	inc rdx
 17384 0000DC7B EBEA                    	jmp .L_lambda_simple_env_loop_4f9d
 17385                                  .L_lambda_simple_env_end_4f9d:
 17386 0000DC7D 5B                      	pop rbx
 17387 0000DC7E BE00000000              	mov rsi, 0
 17388                                  .L_lambda_simple_params_loop_4f9d:	; copy params
 17389 0000DC83 4883FE01                	cmp rsi, 1
 17390 0000DC87 740E                    	je .L_lambda_simple_params_end_4f9d
 17391 0000DC89 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17392 0000DC8E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17393 0000DC92 48FFC6                  	inc rsi
 17394 0000DC95 EBEC                    	jmp .L_lambda_simple_params_loop_4f9d
 17395                                  .L_lambda_simple_params_end_4f9d:
 17396 0000DC97 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17397 0000DC9A 4889C3                  	mov rbx, rax
 17398 0000DC9D 58                      	pop rax
 17399 0000DC9E C60005                  	mov byte [rax], T_closure
 17400 0000DCA1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17401 0000DCA5 48C74009[B2DC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f9d
 17402 0000DCAD E929040000              	jmp .L_lambda_simple_end_4f9d
 17403                                  .L_lambda_simple_code_4f9d:	; lambda-simple body
 17404 0000DCB2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17405 0000DCB8 740B                    	je .L_lambda_simple_arity_check_ok_4f9d
 17406 0000DCBA FF742410                	push qword [rsp + 8 * 2]
 17407 0000DCBE 6A01                    	push 1
 17408 0000DCC0 E9A84B0000              	jmp L_error_incorrect_arity_simple
 17409                                  .L_lambda_simple_arity_check_ok_4f9d:
 17410 0000DCC5 C8000000                	enter 0, 0
 17411 0000DCC9 BF11000000              	mov qword rdi, (1 + 8 + 8)
 17412 0000DCCE E8E14B0000              	call malloc
 17413 0000DCD3 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 17414 0000DCD7 48B8-                   	mov rax, sob_void
 17414 0000DCD9 [0000000000000000] 
 17415                                  
 17416 0000DCE1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17417 0000DCE6 E8C94B0000              	call malloc
 17418 0000DCEB 50                      	push rax
 17419 0000DCEC BF08000000              	mov rdi, 8 * 1	; new rib
 17420 0000DCF1 E8BE4B0000              	call malloc
 17421 0000DCF6 50                      	push rax
 17422 0000DCF7 BF28000000              	mov rdi, 8 * 5	; extended env
 17423 0000DCFC E8B34B0000              	call malloc
 17424 0000DD01 488B7D10                	mov rdi, ENV
 17425 0000DD05 BE00000000              	mov rsi, 0
 17426 0000DD0A BA01000000              	mov rdx, 1
 17427                                  .L_lambda_simple_env_loop_4f9e:	; ext_env[i + 1] <-- env[i]
 17428 0000DD0F 4883FE04                	cmp rsi, 4
 17429 0000DD13 7410                    	je .L_lambda_simple_env_end_4f9e
 17430 0000DD15 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 17431 0000DD19 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17432 0000DD1D 48FFC6                  	inc rsi
 17433 0000DD20 48FFC2                  	inc rdx
 17434 0000DD23 EBEA                    	jmp .L_lambda_simple_env_loop_4f9e
 17435                                  .L_lambda_simple_env_end_4f9e:
 17436 0000DD25 5B                      	pop rbx
 17437 0000DD26 BE00000000              	mov rsi, 0
 17438                                  .L_lambda_simple_params_loop_4f9e:	; copy params
 17439 0000DD2B 4883FE01                	cmp rsi, 1
 17440 0000DD2F 740E                    	je .L_lambda_simple_params_end_4f9e
 17441 0000DD31 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17442 0000DD36 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17443 0000DD3A 48FFC6                  	inc rsi
 17444 0000DD3D EBEC                    	jmp .L_lambda_simple_params_loop_4f9e
 17445                                  .L_lambda_simple_params_end_4f9e:
 17446 0000DD3F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17447 0000DD42 4889C3                  	mov rbx, rax
 17448 0000DD45 58                      	pop rax
 17449 0000DD46 C60005                  	mov byte [rax], T_closure
 17450 0000DD49 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17451 0000DD4D 48C74009[5ADD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f9e
 17452 0000DD55 E96F010000              	jmp .L_lambda_simple_end_4f9e
 17453                                  .L_lambda_simple_code_4f9e:	; lambda-simple body
 17454 0000DD5A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17455 0000DD60 740B                    	je .L_lambda_simple_arity_check_ok_4f9e
 17456 0000DD62 FF742410                	push qword [rsp + 8 * 2]
 17457 0000DD66 6A02                    	push 2
 17458 0000DD68 E9004B0000              	jmp L_error_incorrect_arity_simple
 17459                                  .L_lambda_simple_arity_check_ok_4f9e:
 17460 0000DD6D C8000000                	enter 0, 0
 17461 0000DD71 488B4528                	mov rax, PARAM(1)
 17462 0000DD75 50                      	push rax
 17463 0000DD76 6A01                    	push 1
 17464 0000DD78 488B0425[00000000]      	mov rax, qword [free_var_0]
 17465                                  	assert_closure(rax)
    65 0000DD80 803805              <1>  cmp byte [%1], %2
    66 0000DD83 0F85AB630000        <1>  jne L_error_incorrect_type
 17466 0000DD89 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17467 0000DD8D 53                      	push rbx
 17468 0000DD8E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17469 0000DD92 FFD3                    	call rbx
 17470 0000DD94 483D[02000000]          	cmp rax, sob_boolean_false
 17471 0000DD9A 0F8525010000            	jne .L_or_end_061c
 17472 0000DDA0 488B4528                	mov rax, PARAM(1)
 17473 0000DDA4 50                      	push rax
 17474 0000DDA5 6A01                    	push 1
 17475 0000DDA7 488B0425[80000000]      	mov rax, qword [free_var_16]
 17476                                  	assert_closure(rax)
    65 0000DDAF 803805              <1>  cmp byte [%1], %2
    66 0000DDB2 0F857C630000        <1>  jne L_error_incorrect_type
 17477 0000DDB8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17478 0000DDBC 53                      	push rbx
 17479 0000DDBD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17480 0000DDC1 FFD3                    	call rbx
 17481 0000DDC3 50                      	push rax
 17482 0000DDC4 488B4520                	mov rax, PARAM(0)
 17483 0000DDC8 50                      	push rax
 17484 0000DDC9 6A02                    	push 2
 17485 0000DDCB 488B4510                	mov rax, qword [rbp + 8*2]
 17486 0000DDCF 488B4008                	mov rax, qword [rax + 8*1]
 17487 0000DDD3 488B00                  	mov rax, qword [rax + 8*0]
 17488                                  	assert_closure(rax)
    65 0000DDD6 803805              <1>  cmp byte [%1], %2
    66 0000DDD9 0F8555630000        <1>  jne L_error_incorrect_type
 17489 0000DDDF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17490 0000DDE3 53                      	push rbx
 17491 0000DDE4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17492 0000DDE8 FFD3                    	call rbx
 17493 0000DDEA 483D[02000000]          	cmp rax, sob_boolean_false
 17494 0000DDF0 0F84C7000000            	je .L_if_else_56bd
 17495 0000DDF6 488B4528                	mov rax, PARAM(1)
 17496 0000DDFA 50                      	push rax
 17497 0000DDFB 6A01                    	push 1
 17498 0000DDFD 488B0425[88000000]      	mov rax, qword [free_var_17]
 17499                                  	assert_closure(rax)
    65 0000DE05 803805              <1>  cmp byte [%1], %2
    66 0000DE08 0F8526630000        <1>  jne L_error_incorrect_type
 17500 0000DE0E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17501 0000DE12 53                      	push rbx
 17502 0000DE13 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17503 0000DE17 FFD3                    	call rbx
 17504 0000DE19 50                      	push rax
 17505 0000DE1A 488B4528                	mov rax, PARAM(1)
 17506 0000DE1E 50                      	push rax
 17507 0000DE1F 6A01                    	push 1
 17508 0000DE21 488B0425[80000000]      	mov rax, qword [free_var_16]
 17509                                  	assert_closure(rax)
    65 0000DE29 803805              <1>  cmp byte [%1], %2
    66 0000DE2C 0F8502630000        <1>  jne L_error_incorrect_type
 17510 0000DE32 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17511 0000DE36 53                      	push rbx
 17512 0000DE37 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17513 0000DE3B FFD3                    	call rbx
 17514 0000DE3D 50                      	push rax
 17515 0000DE3E 6A02                    	push 2
 17516 0000DE40 488B4510                	mov rax, qword [rbp + 8*2]
 17517 0000DE44 488B00                  	mov rax, qword [rax + 8*0]
 17518 0000DE47 488B00                  	mov rax, qword [rax + 8*0]
 17519 0000DE4A 488B00                  	mov rax, qword [rax]
 17520                                  	assert_closure(rax)
    65 0000DE4D 803805              <1>  cmp byte [%1], %2
    66 0000DE50 0F85DE620000        <1>  jne L_error_incorrect_type
 17521 0000DE56 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17522 0000DE5A 53                      	push rbx
 17523 0000DE5B FF7508                  	push RET_ADDR
 17524 0000DE5E 488B7D18                	mov rdi, COUNT
 17525 0000DE62 4883C703                	add rdi, 3
 17526 0000DE66 48C1E703                	shl rdi, 3
 17527 0000DE6A 4801EF                  	add rdi, rbp
 17528 0000DE6D 488B6D00                	mov rbp, OLD_RDP
 17529 0000DE71 BE00000000              	mov rsi, 0
 17530                                  .L_tc_recycle_frame_loop_5d2c:	 ; start recycle frame loop
 17531 0000DE76 4883FE05                	cmp rsi, 5
 17532 0000DE7A 7427                    	je .L_tc_recycle_frame_done_5d2c
 17533 0000DE7C B904000000              	mov rcx, 4
 17534 0000DE81 4829F1                  	sub rcx, rsi
 17535 0000DE84 48C1E103                	shl rcx, 3
 17536 0000DE88 4801E1                  	add rcx, rsp ; rcx is the address to move
 17537 0000DE8B 4889F3                  	mov rbx, rsi
 17538 0000DE8E 48C1E303                	shl rbx, 3
 17539 0000DE92 48F7DB                  	neg rbx
 17540 0000DE95 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17541 0000DE98 488B09                  	mov rcx, [rcx]
 17542 0000DE9B 48890B                  	mov [rbx], rcx
 17543 0000DE9E 48FFC6                  	inc rsi
 17544 0000DEA1 EBD3                    	jmp .L_tc_recycle_frame_loop_5d2c
 17545                                  .L_tc_recycle_frame_done_5d2c:	 ; end recycle frame loop
 17546 0000DEA3 BB04000000              	mov rbx, 4
 17547 0000DEA8 48C1E303                	shl rbx, 3
 17548 0000DEAC 48F7DB                  	neg rbx
 17549 0000DEAF 4801FB                  	add rbx, rdi
 17550 0000DEB2 4889DC                  	mov rsp, rbx
 17551 0000DEB5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17552 0000DEB9 FFE3                    	jmp rbx
 17553 0000DEBB EB08                    	jmp .L_if_end_56bd
 17554                                  	.L_if_else_56bd:
 17555 0000DEBD 488D0425[02000000]      	lea rax, [2 + L_constants]
 17556                                  	.L_if_end_56bd:
 17557                                  .L_or_end_061c:
 17558 0000DEC5 C9                      	leave
 17559 0000DEC6 C22000                  	ret 8 * (2 + 2)
 17560                                  .L_lambda_simple_end_4f9e:	; new closure is in rax
 17561 0000DEC9 50                      	push rax
 17562 0000DECA 488B4520                	mov rax, PARAM(0)
 17563 0000DECE 8F00                    	pop qword [rax]
 17564 0000DED0 48B8-                   	mov rax, sob_void
 17564 0000DED2 [0000000000000000] 
 17565                                  
 17566 0000DEDA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17567 0000DEDF E8D0490000              	call malloc
 17568 0000DEE4 50                      	push rax
 17569 0000DEE5 BF08000000              	mov rdi, 8 * 1	; new rib
 17570 0000DEEA E8C5490000              	call malloc
 17571 0000DEEF 50                      	push rax
 17572 0000DEF0 BF28000000              	mov rdi, 8 * 5	; extended env
 17573 0000DEF5 E8BA490000              	call malloc
 17574 0000DEFA 488B7D10                	mov rdi, ENV
 17575 0000DEFE BE00000000              	mov rsi, 0
 17576 0000DF03 BA01000000              	mov rdx, 1
 17577                                  .L_lambda_opt_env_loop_0c97:	; ext_env[i + 1] <-- env[i]
 17578 0000DF08 4883FE04                	cmp rsi, 4
 17579 0000DF0C 7410                    	je .L_lambda_opt_env_end_0c97
 17580 0000DF0E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 17581 0000DF12 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17582 0000DF16 48FFC6                  	inc rsi
 17583 0000DF19 48FFC2                  	inc rdx
 17584 0000DF1C EBEA                    	jmp .L_lambda_opt_env_loop_0c97
 17585                                  .L_lambda_opt_env_end_0c97:
 17586 0000DF1E 5B                      	pop rbx
 17587 0000DF1F BE00000000              	mov rsi, 0
 17588                                  .L_lambda_opt_params_loop_0c97:	; copy params
 17589 0000DF24 4883FE01                	cmp rsi, 1
 17590 0000DF28 740E                    	je .L_lambda_opt_params_end_0c97
 17591 0000DF2A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17592 0000DF2F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17593 0000DF33 48FFC6                  	inc rsi
 17594 0000DF36 EBEC                    	jmp .L_lambda_opt_params_loop_0c97
 17595                                  .L_lambda_opt_params_end_0c97:
 17596 0000DF38 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17597 0000DF3B 4889C3                  	mov rbx, rax
 17598 0000DF3E 58                      	pop rax
 17599 0000DF3F C60005                  	mov byte [rax], T_closure
 17600 0000DF42 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17601 0000DF46 48C74009[53DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c97
 17602 0000DF4E E984010000              	jmp .L_lambda_opt_end_0c97
 17603                                  .L_lambda_opt_code_0c97:	; lambda-opt body
 17604 0000DF53 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 17605 0000DF58 4889FB                  	mov rbx, rdi
 17606 0000DF5B 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 17607 0000DF5F 4883FB00                	cmp rbx, 0
 17608 0000DF63 7F45                    	jg .L_lambda_opt_arity_check_more_0c97
 17609                                  .L_lambda_opt_arity_check_exact_0c97:	 ; if params in opt is exact
 17610 0000DF65 4883EC08                	sub rsp, 8
 17611 0000DF69 BE00000000              	mov rsi, 0 ; index
 17612                                  .L_lambda_opt_stack_enlarge_loop_0c97:	 ; stack loop enlarge start
 17613 0000DF6E 4883FE04                	cmp rsi, 4
 17614 0000DF72 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c97
 17615 0000DF74 4889F7                  	mov rdi, rsi
 17616 0000DF77 48FFC7                  	inc rdi
 17617 0000DF7A 48C1E703                	shl rdi, 3
 17618 0000DF7E 4801E7                  	add rdi, rsp
 17619 0000DF81 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 17620 0000DF84 4883EB08                	sub rbx, 8
 17621 0000DF88 488B3F                  	mov rdi, [rdi]
 17622 0000DF8B 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 17623 0000DF8E 48FFC6                  	inc rsi
 17624 0000DF91 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c97
 17625                                  .L_lambda_opt_stack_enlarge_loop_exit_0c97:	 ; end of stack enlarge loop
 17626 0000DF93 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 17626 0000DF98 [01000000]         
 17627 0000DF9C 48C744241002000000      	mov qword [rsp + 2*8], 2
 17628 0000DFA5 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c97
 17629                                  .L_lambda_opt_arity_check_more_0c97:	 ; if params in opt is more
 17630 0000DFAA 48B8-                   	mov rax, sob_nil
 17630 0000DFAC [0100000000000000] 
 17631 0000DFB4 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 17632 0000DFB7 48FFCE                  	dec rsi
 17633                                  .L_lambda_opt_list_create_loop_0c97:	; start of list creation loop
 17634 0000DFBA 4883FEFF                	cmp rsi, -1
 17635 0000DFBE 7422                    	je .L_lambda_opt_list_create_loop_exit_0c97
 17636 0000DFC0 488D4E04                	lea rcx, [rsi + (3 + 1)]
 17637 0000DFC4 48C1E103                	shl rcx, 3
 17638 0000DFC8 4801E1                  	add rcx, rsp
 17639 0000DFCB 488B09                  	mov rcx, [rcx]
 17640 0000DFCE 56                      	push rsi ; save params
 17641 0000DFCF 53                      	push rbx
 17642                                  
 17643 0000DFD0 50                      	push rax ; cdr
 17644 0000DFD1 51                      	push rcx ; car
 17645 0000DFD2 6A02                    	push qword 2 ; push num of args
 17646 0000DFD4 6A01                    	push qword 1 ; push garbage as env
 17647 0000DFD6 E860520000              	call L_code_ptr_cons
 17648                                  
 17649 0000DFDB 5B                      	pop rbx ; restore params
 17650 0000DFDC 5E                      	pop rsi
 17651 0000DFDD 48FFCE                  	dec rsi
 17652 0000DFE0 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c97
 17653                                  .L_lambda_opt_list_create_loop_exit_0c97:	; end of list creation loop
 17654 0000DFE2 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 17655 0000DFE7 4883C302                	add rbx, 2
 17656 0000DFEB 4889DF                  	mov rdi, rbx
 17657 0000DFEE 48C1E703                	shl rdi,3
 17658 0000DFF2 4801E7                  	add rdi, rsp
 17659 0000DFF5 488907                  	mov [rdi], rax
 17660 0000DFF8 BE00000000              	mov rsi, 0 ;index
 17661                                  .L_lambda_opt_stack_shrink_loop_0c97:	; start of stack shrink loop
 17662 0000DFFD 4883FE04                	cmp rsi, 4
 17663 0000E001 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c97
 17664 0000E003 BF03000000              	mov rdi, 3
 17665 0000E008 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 17666 0000E00B 4889D9                  	mov rcx, rbx
 17667 0000E00E 4829F1                  	sub rcx, rsi
 17668 0000E011 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 17669 0000E014 4889FA                  	mov rdx, rdi
 17670 0000E017 48C1E203                	shl rdx, 3
 17671 0000E01B 4801E2                  	add rdx, rsp
 17672 0000E01E 48C1E103                	shl rcx, 3
 17673 0000E022 4801E1                  	add rcx, rsp
 17674 0000E025 488B12                  	mov rdx, [rdx]
 17675 0000E028 488911                  	mov [rcx], rdx
 17676 0000E02B 48FFC6                  	inc rsi
 17677 0000E02E EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c97
 17678                                  .L_lambda_opt_stack_shrink_loop_exit_0c97:	; end of stack shrink loop
 17679 0000E030 4883EB02                	sub rbx, 2 ; rbx has number of args
 17680 0000E034 4883EB02                	sub rbx, 2
 17681 0000E038 48C1E303                	shl rbx, 3
 17682 0000E03C 4801DC                  	add rsp, rbx
 17683 0000E03F 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 17684                                  .L_lambda_opt_stack_adjusted_0c97:
 17685 0000E048 C8000000                	enter 0, 0
 17686 0000E04C 488B4528                	mov rax, PARAM(1)
 17687 0000E050 50                      	push rax
 17688 0000E051 488B4520                	mov rax, PARAM(0)
 17689 0000E055 50                      	push rax
 17690 0000E056 6A02                    	push 2
 17691 0000E058 488B4510                	mov rax, qword [rbp + 8*2]
 17692 0000E05C 488B00                  	mov rax, qword [rax + 8*0]
 17693 0000E05F 488B00                  	mov rax, qword [rax + 8*0]
 17694 0000E062 488B00                  	mov rax, qword [rax]
 17695                                  	assert_closure(rax)
    65 0000E065 803805              <1>  cmp byte [%1], %2
    66 0000E068 0F85C6600000        <1>  jne L_error_incorrect_type
 17696 0000E06E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17697 0000E072 53                      	push rbx
 17698 0000E073 FF7508                  	push RET_ADDR
 17699 0000E076 488B7D18                	mov rdi, COUNT
 17700 0000E07A 4883C703                	add rdi, 3
 17701 0000E07E 48C1E703                	shl rdi, 3
 17702 0000E082 4801EF                  	add rdi, rbp
 17703 0000E085 488B6D00                	mov rbp, OLD_RDP
 17704 0000E089 BE00000000              	mov rsi, 0
 17705                                  .L_tc_recycle_frame_loop_5d2d:	 ; start recycle frame loop
 17706 0000E08E 4883FE05                	cmp rsi, 5
 17707 0000E092 7427                    	je .L_tc_recycle_frame_done_5d2d
 17708 0000E094 B904000000              	mov rcx, 4
 17709 0000E099 4829F1                  	sub rcx, rsi
 17710 0000E09C 48C1E103                	shl rcx, 3
 17711 0000E0A0 4801E1                  	add rcx, rsp ; rcx is the address to move
 17712 0000E0A3 4889F3                  	mov rbx, rsi
 17713 0000E0A6 48C1E303                	shl rbx, 3
 17714 0000E0AA 48F7DB                  	neg rbx
 17715 0000E0AD 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17716 0000E0B0 488B09                  	mov rcx, [rcx]
 17717 0000E0B3 48890B                  	mov [rbx], rcx
 17718 0000E0B6 48FFC6                  	inc rsi
 17719 0000E0B9 EBD3                    	jmp .L_tc_recycle_frame_loop_5d2d
 17720                                  .L_tc_recycle_frame_done_5d2d:	 ; end recycle frame loop
 17721 0000E0BB BB04000000              	mov rbx, 4
 17722 0000E0C0 48C1E303                	shl rbx, 3
 17723 0000E0C4 48F7DB                  	neg rbx
 17724 0000E0C7 4801FB                  	add rbx, rdi
 17725 0000E0CA 4889DC                  	mov rsp, rbx
 17726 0000E0CD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17727 0000E0D1 FFE3                    	jmp rbx
 17728 0000E0D3 C9                      	leave
 17729 0000E0D4 C22000                  	ret AND_KILL_FRAME(2)
 17730                                  .L_lambda_opt_end_0c97:	; new closure is in rax
 17731 0000E0D7 C9                      	leave
 17732 0000E0D8 C21800                  	ret 8 * (2 + 1)
 17733                                  .L_lambda_simple_end_4f9d:	; new closure is in rax
 17734                                  	assert_closure(rax)
    65 0000E0DB 803805              <1>  cmp byte [%1], %2
    66 0000E0DE 0F8550600000        <1>  jne L_error_incorrect_type
 17735 0000E0E4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17736 0000E0E8 53                      	push rbx
 17737 0000E0E9 FF7508                  	push RET_ADDR
 17738 0000E0EC 488B7D18                	mov rdi, COUNT
 17739 0000E0F0 4883C703                	add rdi, 3
 17740 0000E0F4 48C1E703                	shl rdi, 3
 17741 0000E0F8 4801EF                  	add rdi, rbp
 17742 0000E0FB 488B6D00                	mov rbp, OLD_RDP
 17743 0000E0FF BE00000000              	mov rsi, 0
 17744                                  .L_tc_recycle_frame_loop_5d2b:	 ; start recycle frame loop
 17745 0000E104 4883FE04                	cmp rsi, 4
 17746 0000E108 7427                    	je .L_tc_recycle_frame_done_5d2b
 17747 0000E10A B903000000              	mov rcx, 3
 17748 0000E10F 4829F1                  	sub rcx, rsi
 17749 0000E112 48C1E103                	shl rcx, 3
 17750 0000E116 4801E1                  	add rcx, rsp ; rcx is the address to move
 17751 0000E119 4889F3                  	mov rbx, rsi
 17752 0000E11C 48C1E303                	shl rbx, 3
 17753 0000E120 48F7DB                  	neg rbx
 17754 0000E123 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17755 0000E126 488B09                  	mov rcx, [rcx]
 17756 0000E129 48890B                  	mov [rbx], rcx
 17757 0000E12C 48FFC6                  	inc rsi
 17758 0000E12F EBD3                    	jmp .L_tc_recycle_frame_loop_5d2b
 17759                                  .L_tc_recycle_frame_done_5d2b:	 ; end recycle frame loop
 17760 0000E131 BB03000000              	mov rbx, 3
 17761 0000E136 48C1E303                	shl rbx, 3
 17762 0000E13A 48F7DB                  	neg rbx
 17763 0000E13D 4801FB                  	add rbx, rdi
 17764 0000E140 4889DC                  	mov rsp, rbx
 17765 0000E143 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17766 0000E147 FFE3                    	jmp rbx
 17767 0000E149 C9                      	leave
 17768 0000E14A C21800                  	ret 8 * (2 + 1)
 17769                                  .L_lambda_simple_end_4f9c:	; new closure is in rax
 17770                                  	assert_closure(rax)
    65 0000E14D 803805              <1>  cmp byte [%1], %2
    66 0000E150 0F85DE5F0000        <1>  jne L_error_incorrect_type
 17771 0000E156 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17772 0000E15A 53                      	push rbx
 17773 0000E15B FF7508                  	push RET_ADDR
 17774 0000E15E 488B7D18                	mov rdi, COUNT
 17775 0000E162 4883C703                	add rdi, 3
 17776 0000E166 48C1E703                	shl rdi, 3
 17777 0000E16A 4801EF                  	add rdi, rbp
 17778 0000E16D 488B6D00                	mov rbp, OLD_RDP
 17779 0000E171 BE00000000              	mov rsi, 0
 17780                                  .L_tc_recycle_frame_loop_5d27:	 ; start recycle frame loop
 17781 0000E176 4883FE04                	cmp rsi, 4
 17782 0000E17A 7427                    	je .L_tc_recycle_frame_done_5d27
 17783 0000E17C B903000000              	mov rcx, 3
 17784 0000E181 4829F1                  	sub rcx, rsi
 17785 0000E184 48C1E103                	shl rcx, 3
 17786 0000E188 4801E1                  	add rcx, rsp ; rcx is the address to move
 17787 0000E18B 4889F3                  	mov rbx, rsi
 17788 0000E18E 48C1E303                	shl rbx, 3
 17789 0000E192 48F7DB                  	neg rbx
 17790 0000E195 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17791 0000E198 488B09                  	mov rcx, [rcx]
 17792 0000E19B 48890B                  	mov [rbx], rcx
 17793 0000E19E 48FFC6                  	inc rsi
 17794 0000E1A1 EBD3                    	jmp .L_tc_recycle_frame_loop_5d27
 17795                                  .L_tc_recycle_frame_done_5d27:	 ; end recycle frame loop
 17796 0000E1A3 BB03000000              	mov rbx, 3
 17797 0000E1A8 48C1E303                	shl rbx, 3
 17798 0000E1AC 48F7DB                  	neg rbx
 17799 0000E1AF 4801FB                  	add rbx, rdi
 17800 0000E1B2 4889DC                  	mov rsp, rbx
 17801 0000E1B5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17802 0000E1B9 FFE3                    	jmp rbx
 17803 0000E1BB C9                      	leave
 17804 0000E1BC C21800                  	ret 8 * (2 + 1)
 17805                                  .L_lambda_simple_end_4f98:	; new closure is in rax
 17806                                  	assert_closure(rax)
    65 0000E1BF 803805              <1>  cmp byte [%1], %2
    66 0000E1C2 0F856C5F0000        <1>  jne L_error_incorrect_type
 17807 0000E1C8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17808 0000E1CC 53                      	push rbx
 17809 0000E1CD FF7508                  	push RET_ADDR
 17810 0000E1D0 488B7D18                	mov rdi, COUNT
 17811 0000E1D4 4883C703                	add rdi, 3
 17812 0000E1D8 48C1E703                	shl rdi, 3
 17813 0000E1DC 4801EF                  	add rdi, rbp
 17814 0000E1DF 488B6D00                	mov rbp, OLD_RDP
 17815 0000E1E3 BE00000000              	mov rsi, 0
 17816                                  .L_tc_recycle_frame_loop_5d25:	 ; start recycle frame loop
 17817 0000E1E8 4883FE04                	cmp rsi, 4
 17818 0000E1EC 7427                    	je .L_tc_recycle_frame_done_5d25
 17819 0000E1EE B903000000              	mov rcx, 3
 17820 0000E1F3 4829F1                  	sub rcx, rsi
 17821 0000E1F6 48C1E103                	shl rcx, 3
 17822 0000E1FA 4801E1                  	add rcx, rsp ; rcx is the address to move
 17823 0000E1FD 4889F3                  	mov rbx, rsi
 17824 0000E200 48C1E303                	shl rbx, 3
 17825 0000E204 48F7DB                  	neg rbx
 17826 0000E207 4801FB                  	add rbx, rdi ;rbx is the address to move to
 17827 0000E20A 488B09                  	mov rcx, [rcx]
 17828 0000E20D 48890B                  	mov [rbx], rcx
 17829 0000E210 48FFC6                  	inc rsi
 17830 0000E213 EBD3                    	jmp .L_tc_recycle_frame_loop_5d25
 17831                                  .L_tc_recycle_frame_done_5d25:	 ; end recycle frame loop
 17832 0000E215 BB03000000              	mov rbx, 3
 17833 0000E21A 48C1E303                	shl rbx, 3
 17834 0000E21E 48F7DB                  	neg rbx
 17835 0000E221 4801FB                  	add rbx, rdi
 17836 0000E224 4889DC                  	mov rsp, rbx
 17837 0000E227 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17838 0000E22B FFE3                    	jmp rbx
 17839 0000E22D C9                      	leave
 17840 0000E22E C22000                  	ret 8 * (2 + 2)
 17841                                  .L_lambda_simple_end_4f97:	; new closure is in rax
 17842 0000E231 50                      	push rax
 17843 0000E232 6A01                    	push 1
 17844 0000E234 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17845 0000E239 E876460000              	call malloc
 17846 0000E23E 50                      	push rax
 17847 0000E23F BF00000000              	mov rdi, 8 * 0	; new rib
 17848 0000E244 E86B460000              	call malloc
 17849 0000E249 50                      	push rax
 17850 0000E24A BF08000000              	mov rdi, 8 * 1	; extended env
 17851 0000E24F E860460000              	call malloc
 17852 0000E254 488B7D10                	mov rdi, ENV
 17853 0000E258 BE00000000              	mov rsi, 0
 17854 0000E25D BA01000000              	mov rdx, 1
 17855                                  .L_lambda_simple_env_loop_4f9f:	; ext_env[i + 1] <-- env[i]
 17856 0000E262 4883FE00                	cmp rsi, 0
 17857 0000E266 7410                    	je .L_lambda_simple_env_end_4f9f
 17858 0000E268 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 17859 0000E26C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17860 0000E270 48FFC6                  	inc rsi
 17861 0000E273 48FFC2                  	inc rdx
 17862 0000E276 EBEA                    	jmp .L_lambda_simple_env_loop_4f9f
 17863                                  .L_lambda_simple_env_end_4f9f:
 17864 0000E278 5B                      	pop rbx
 17865 0000E279 BE00000000              	mov rsi, 0
 17866                                  .L_lambda_simple_params_loop_4f9f:	; copy params
 17867 0000E27E 4883FE00                	cmp rsi, 0
 17868 0000E282 740E                    	je .L_lambda_simple_params_end_4f9f
 17869 0000E284 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17870 0000E289 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17871 0000E28D 48FFC6                  	inc rsi
 17872 0000E290 EBEC                    	jmp .L_lambda_simple_params_loop_4f9f
 17873                                  .L_lambda_simple_params_end_4f9f:
 17874 0000E292 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17875 0000E295 4889C3                  	mov rbx, rax
 17876 0000E298 58                      	pop rax
 17877 0000E299 C60005                  	mov byte [rax], T_closure
 17878 0000E29C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17879 0000E2A0 48C74009[ADE20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4f9f
 17880 0000E2A8 E913010000              	jmp .L_lambda_simple_end_4f9f
 17881                                  .L_lambda_simple_code_4f9f:	; lambda-simple body
 17882 0000E2AD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17883 0000E2B3 740B                    	je .L_lambda_simple_arity_check_ok_4f9f
 17884 0000E2B5 FF742410                	push qword [rsp + 8 * 2]
 17885 0000E2B9 6A01                    	push 1
 17886 0000E2BB E9AD450000              	jmp L_error_incorrect_arity_simple
 17887                                  .L_lambda_simple_arity_check_ok_4f9f:
 17888 0000E2C0 C8000000                	enter 0, 0
 17889 0000E2C4 488B0425[70030000]      	mov rax, qword [free_var_110]
 17890 0000E2CC 50                      	push rax
 17891 0000E2CD 488B0425[60030000]      	mov rax, qword [free_var_108]
 17892 0000E2D5 50                      	push rax
 17893 0000E2D6 6A02                    	push 2
 17894 0000E2D8 488B4520                	mov rax, PARAM(0)
 17895                                  	assert_closure(rax)
    65 0000E2DC 803805              <1>  cmp byte [%1], %2
    66 0000E2DF 0F854F5E0000        <1>  jne L_error_incorrect_type
 17896 0000E2E5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17897 0000E2E9 53                      	push rbx
 17898 0000E2EA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17899 0000E2EE FFD3                    	call rbx
 17900 0000E2F0 48890425[E8030000]      	mov qword [free_var_125], rax
 17901 0000E2F8 48B8-                   	mov rax, sob_void
 17901 0000E2FA [0000000000000000] 
 17902                                  
 17903 0000E302 488B0425[70030000]      	mov rax, qword [free_var_110]
 17904 0000E30A 50                      	push rax
 17905 0000E30B 488B0425[60030000]      	mov rax, qword [free_var_108]
 17906 0000E313 50                      	push rax
 17907 0000E314 6A02                    	push 2
 17908 0000E316 488B4520                	mov rax, PARAM(0)
 17909                                  	assert_closure(rax)
    65 0000E31A 803805              <1>  cmp byte [%1], %2
    66 0000E31D 0F85115E0000        <1>  jne L_error_incorrect_type
 17910 0000E323 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17911 0000E327 53                      	push rbx
 17912 0000E328 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17913 0000E32C FFD3                    	call rbx
 17914 0000E32E 48890425[10040000]      	mov qword [free_var_130], rax
 17915 0000E336 48B8-                   	mov rax, sob_void
 17915 0000E338 [0000000000000000] 
 17916                                  
 17917 0000E340 488B0425[70030000]      	mov rax, qword [free_var_110]
 17918 0000E348 50                      	push rax
 17919 0000E349 488B0425[78030000]      	mov rax, qword [free_var_111]
 17920 0000E351 50                      	push rax
 17921 0000E352 6A02                    	push 2
 17922 0000E354 488B4520                	mov rax, PARAM(0)
 17923                                  	assert_closure(rax)
    65 0000E358 803805              <1>  cmp byte [%1], %2
    66 0000E35B 0F85D35D0000        <1>  jne L_error_incorrect_type
 17924 0000E361 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17925 0000E365 53                      	push rbx
 17926 0000E366 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17927 0000E36A FFD3                    	call rbx
 17928 0000E36C 48890425[F8030000]      	mov qword [free_var_127], rax
 17929 0000E374 48B8-                   	mov rax, sob_void
 17929 0000E376 [0000000000000000] 
 17930                                  
 17931 0000E37E 488B0425[A8030000]      	mov rax, qword [free_var_117]
 17932 0000E386 50                      	push rax
 17933 0000E387 488B0425[B0030000]      	mov rax, qword [free_var_118]
 17934 0000E38F 50                      	push rax
 17935 0000E390 6A02                    	push 2
 17936 0000E392 488B4520                	mov rax, PARAM(0)
 17937                                  	assert_closure(rax)
    65 0000E396 803805              <1>  cmp byte [%1], %2
    66 0000E399 0F85955D0000        <1>  jne L_error_incorrect_type
 17938 0000E39F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17939 0000E3A3 53                      	push rbx
 17940 0000E3A4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17941 0000E3A8 FFD3                    	call rbx
 17942 0000E3AA 48890425[20040000]      	mov qword [free_var_132], rax
 17943 0000E3B2 48B8-                   	mov rax, sob_void
 17943 0000E3B4 [0000000000000000] 
 17944 0000E3BC C9                      	leave
 17945 0000E3BD C21800                  	ret 8 * (2 + 1)
 17946                                  .L_lambda_simple_end_4f9f:	; new closure is in rax
 17947                                  	assert_closure(rax)
    65 0000E3C0 803805              <1>  cmp byte [%1], %2
    66 0000E3C3 0F856B5D0000        <1>  jne L_error_incorrect_type
 17948 0000E3C9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17949 0000E3CD 53                      	push rbx
 17950 0000E3CE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17951 0000E3D2 FFD3                    	call rbx
 17952                                  
 17953 0000E3D4 4889C7                  	mov rdi, rax
 17954 0000E3D7 E8E9440000              	call print_sexpr_if_not_void
 17955                                  
 17956 0000E3DC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17957 0000E3E1 E8CE440000              	call malloc
 17958 0000E3E6 50                      	push rax
 17959 0000E3E7 BF00000000              	mov rdi, 8 * 0	; new rib
 17960 0000E3EC E8C3440000              	call malloc
 17961 0000E3F1 50                      	push rax
 17962 0000E3F2 BF08000000              	mov rdi, 8 * 1	; extended env
 17963 0000E3F7 E8B8440000              	call malloc
 17964 0000E3FC 488B7D10                	mov rdi, ENV
 17965 0000E400 BE00000000              	mov rsi, 0
 17966 0000E405 BA01000000              	mov rdx, 1
 17967                                  .L_lambda_simple_env_loop_4fa0:	; ext_env[i + 1] <-- env[i]
 17968 0000E40A 4883FE00                	cmp rsi, 0
 17969 0000E40E 7410                    	je .L_lambda_simple_env_end_4fa0
 17970 0000E410 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 17971 0000E414 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17972 0000E418 48FFC6                  	inc rsi
 17973 0000E41B 48FFC2                  	inc rdx
 17974 0000E41E EBEA                    	jmp .L_lambda_simple_env_loop_4fa0
 17975                                  .L_lambda_simple_env_end_4fa0:
 17976 0000E420 5B                      	pop rbx
 17977 0000E421 BE00000000              	mov rsi, 0
 17978                                  .L_lambda_simple_params_loop_4fa0:	; copy params
 17979 0000E426 4883FE00                	cmp rsi, 0
 17980 0000E42A 740E                    	je .L_lambda_simple_params_end_4fa0
 17981 0000E42C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17982 0000E431 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17983 0000E435 48FFC6                  	inc rsi
 17984 0000E438 EBEC                    	jmp .L_lambda_simple_params_loop_4fa0
 17985                                  .L_lambda_simple_params_end_4fa0:
 17986 0000E43A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17987 0000E43D 4889C3                  	mov rbx, rax
 17988 0000E440 58                      	pop rax
 17989 0000E441 C60005                  	mov byte [rax], T_closure
 17990 0000E444 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17991 0000E448 48C74009[55E40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa0
 17992 0000E450 E97A0C0000              	jmp .L_lambda_simple_end_4fa0
 17993                                  .L_lambda_simple_code_4fa0:	; lambda-simple body
 17994 0000E455 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17995 0000E45B 740B                    	je .L_lambda_simple_arity_check_ok_4fa0
 17996 0000E45D FF742410                	push qword [rsp + 8 * 2]
 17997 0000E461 6A01                    	push 1
 17998 0000E463 E905440000              	jmp L_error_incorrect_arity_simple
 17999                                  .L_lambda_simple_arity_check_ok_4fa0:
 18000 0000E468 C8000000                	enter 0, 0
 18001 0000E46C 488D0425[17000000]      	lea rax, [23 + L_constants]
 18002 0000E474 50                      	push rax
 18003 0000E475 6A01                    	push 1
 18004 0000E477 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18005 0000E47C E833440000              	call malloc
 18006 0000E481 50                      	push rax
 18007 0000E482 BF08000000              	mov rdi, 8 * 1	; new rib
 18008 0000E487 E828440000              	call malloc
 18009 0000E48C 50                      	push rax
 18010 0000E48D BF10000000              	mov rdi, 8 * 2	; extended env
 18011 0000E492 E81D440000              	call malloc
 18012 0000E497 488B7D10                	mov rdi, ENV
 18013 0000E49B BE00000000              	mov rsi, 0
 18014 0000E4A0 BA01000000              	mov rdx, 1
 18015                                  .L_lambda_simple_env_loop_4fa1:	; ext_env[i + 1] <-- env[i]
 18016 0000E4A5 4883FE01                	cmp rsi, 1
 18017 0000E4A9 7410                    	je .L_lambda_simple_env_end_4fa1
 18018 0000E4AB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 18019 0000E4AF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18020 0000E4B3 48FFC6                  	inc rsi
 18021 0000E4B6 48FFC2                  	inc rdx
 18022 0000E4B9 EBEA                    	jmp .L_lambda_simple_env_loop_4fa1
 18023                                  .L_lambda_simple_env_end_4fa1:
 18024 0000E4BB 5B                      	pop rbx
 18025 0000E4BC BE00000000              	mov rsi, 0
 18026                                  .L_lambda_simple_params_loop_4fa1:	; copy params
 18027 0000E4C1 4883FE01                	cmp rsi, 1
 18028 0000E4C5 740E                    	je .L_lambda_simple_params_end_4fa1
 18029 0000E4C7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18030 0000E4CC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18031 0000E4D0 48FFC6                  	inc rsi
 18032 0000E4D3 EBEC                    	jmp .L_lambda_simple_params_loop_4fa1
 18033                                  .L_lambda_simple_params_end_4fa1:
 18034 0000E4D5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18035 0000E4D8 4889C3                  	mov rbx, rax
 18036 0000E4DB 58                      	pop rax
 18037 0000E4DC C60005                  	mov byte [rax], T_closure
 18038 0000E4DF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18039 0000E4E3 48C74009[F0E40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa1
 18040 0000E4EB E96D0B0000              	jmp .L_lambda_simple_end_4fa1
 18041                                  .L_lambda_simple_code_4fa1:	; lambda-simple body
 18042 0000E4F0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18043 0000E4F6 740B                    	je .L_lambda_simple_arity_check_ok_4fa1
 18044 0000E4F8 FF742410                	push qword [rsp + 8 * 2]
 18045 0000E4FC 6A01                    	push 1
 18046 0000E4FE E96A430000              	jmp L_error_incorrect_arity_simple
 18047                                  .L_lambda_simple_arity_check_ok_4fa1:
 18048 0000E503 C8000000                	enter 0, 0
 18049 0000E507 BF11000000              	mov qword rdi, (1 + 8 + 8)
 18050 0000E50C E8A3430000              	call malloc
 18051 0000E511 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 18052 0000E515 48B8-                   	mov rax, sob_void
 18052 0000E517 [0000000000000000] 
 18053                                  
 18054 0000E51F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18055 0000E524 E88B430000              	call malloc
 18056 0000E529 50                      	push rax
 18057 0000E52A BF08000000              	mov rdi, 8 * 1	; new rib
 18058 0000E52F E880430000              	call malloc
 18059 0000E534 50                      	push rax
 18060 0000E535 BF18000000              	mov rdi, 8 * 3	; extended env
 18061 0000E53A E875430000              	call malloc
 18062 0000E53F 488B7D10                	mov rdi, ENV
 18063 0000E543 BE00000000              	mov rsi, 0
 18064 0000E548 BA01000000              	mov rdx, 1
 18065                                  .L_lambda_simple_env_loop_4fa2:	; ext_env[i + 1] <-- env[i]
 18066 0000E54D 4883FE02                	cmp rsi, 2
 18067 0000E551 7410                    	je .L_lambda_simple_env_end_4fa2
 18068 0000E553 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 18069 0000E557 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18070 0000E55B 48FFC6                  	inc rsi
 18071 0000E55E 48FFC2                  	inc rdx
 18072 0000E561 EBEA                    	jmp .L_lambda_simple_env_loop_4fa2
 18073                                  .L_lambda_simple_env_end_4fa2:
 18074 0000E563 5B                      	pop rbx
 18075 0000E564 BE00000000              	mov rsi, 0
 18076                                  .L_lambda_simple_params_loop_4fa2:	; copy params
 18077 0000E569 4883FE01                	cmp rsi, 1
 18078 0000E56D 740E                    	je .L_lambda_simple_params_end_4fa2
 18079 0000E56F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18080 0000E574 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18081 0000E578 48FFC6                  	inc rsi
 18082 0000E57B EBEC                    	jmp .L_lambda_simple_params_loop_4fa2
 18083                                  .L_lambda_simple_params_end_4fa2:
 18084 0000E57D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18085 0000E580 4889C3                  	mov rbx, rax
 18086 0000E583 58                      	pop rax
 18087 0000E584 C60005                  	mov byte [rax], T_closure
 18088 0000E587 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18089 0000E58B 48C74009[98E50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa2
 18090 0000E593 E9CF010000              	jmp .L_lambda_simple_end_4fa2
 18091                                  .L_lambda_simple_code_4fa2:	; lambda-simple body
 18092 0000E598 48837C241004            	cmp qword [rsp + 8 * 2], 4
 18093 0000E59E 740B                    	je .L_lambda_simple_arity_check_ok_4fa2
 18094 0000E5A0 FF742410                	push qword [rsp + 8 * 2]
 18095 0000E5A4 6A04                    	push 4
 18096 0000E5A6 E9C2420000              	jmp L_error_incorrect_arity_simple
 18097                                  .L_lambda_simple_arity_check_ok_4fa2:
 18098 0000E5AB C8000000                	enter 0, 0
 18099 0000E5AF 488B4538                	mov rax, PARAM(3)
 18100 0000E5B3 50                      	push rax
 18101 0000E5B4 488B4520                	mov rax, PARAM(0)
 18102 0000E5B8 50                      	push rax
 18103 0000E5B9 6A02                    	push 2
 18104 0000E5BB 488B0425[50030000]      	mov rax, qword [free_var_106]
 18105                                  	assert_closure(rax)
    65 0000E5C3 803805              <1>  cmp byte [%1], %2
    66 0000E5C6 0F85685B0000        <1>  jne L_error_incorrect_type
 18106 0000E5CC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18107 0000E5D0 53                      	push rbx
 18108 0000E5D1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18109 0000E5D5 FFD3                    	call rbx
 18110 0000E5D7 483D[02000000]          	cmp rax, sob_boolean_false
 18111 0000E5DD 0F8580010000            	jne .L_or_end_061d
 18112 0000E5E3 488B4538                	mov rax, PARAM(3)
 18113 0000E5E7 50                      	push rax
 18114 0000E5E8 488B4520                	mov rax, PARAM(0)
 18115 0000E5EC 50                      	push rax
 18116 0000E5ED 6A02                    	push 2
 18117 0000E5EF 488B0425[30030000]      	mov rax, qword [free_var_102]
 18118                                  	assert_closure(rax)
    65 0000E5F7 803805              <1>  cmp byte [%1], %2
    66 0000E5FA 0F85345B0000        <1>  jne L_error_incorrect_type
 18119 0000E600 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18120 0000E604 53                      	push rbx
 18121 0000E605 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18122 0000E609 FFD3                    	call rbx
 18123 0000E60B 483D[02000000]          	cmp rax, sob_boolean_false
 18124 0000E611 0F8444010000            	je .L_if_else_56be
 18125 0000E617 488B4520                	mov rax, PARAM(0)
 18126 0000E61B 50                      	push rax
 18127 0000E61C 488B4530                	mov rax, PARAM(2)
 18128 0000E620 50                      	push rax
 18129 0000E621 6A02                    	push 2
 18130 0000E623 488B0425[78010000]      	mov rax, qword [free_var_47]
 18131                                  	assert_closure(rax)
    65 0000E62B 803805              <1>  cmp byte [%1], %2
    66 0000E62E 0F85005B0000        <1>  jne L_error_incorrect_type
 18132 0000E634 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18133 0000E638 53                      	push rbx
 18134 0000E639 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18135 0000E63D FFD3                    	call rbx
 18136 0000E63F 50                      	push rax
 18137 0000E640 488B4520                	mov rax, PARAM(0)
 18138 0000E644 50                      	push rax
 18139 0000E645 488B4528                	mov rax, PARAM(1)
 18140 0000E649 50                      	push rax
 18141 0000E64A 6A02                    	push 2
 18142 0000E64C 488B0425[78010000]      	mov rax, qword [free_var_47]
 18143                                  	assert_closure(rax)
    65 0000E654 803805              <1>  cmp byte [%1], %2
    66 0000E657 0F85D75A0000        <1>  jne L_error_incorrect_type
 18144 0000E65D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18145 0000E661 53                      	push rbx
 18146 0000E662 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18147 0000E666 FFD3                    	call rbx
 18148 0000E668 50                      	push rax
 18149 0000E669 6A02                    	push 2
 18150 0000E66B 488B4510                	mov rax, qword [rbp + 8*2]
 18151 0000E66F 488B4008                	mov rax, qword [rax + 8*1]
 18152 0000E673 488B00                  	mov rax, qword [rax + 8*0]
 18153                                  	assert_closure(rax)
    65 0000E676 803805              <1>  cmp byte [%1], %2
    66 0000E679 0F85B55A0000        <1>  jne L_error_incorrect_type
 18154 0000E67F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18155 0000E683 53                      	push rbx
 18156 0000E684 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18157 0000E688 FFD3                    	call rbx
 18158 0000E68A 483D[02000000]          	cmp rax, sob_boolean_false
 18159 0000E690 0F84BB000000            	je .L_if_else_56bf
 18160 0000E696 488B4538                	mov rax, PARAM(3)
 18161 0000E69A 50                      	push rax
 18162 0000E69B 488B4530                	mov rax, PARAM(2)
 18163 0000E69F 50                      	push rax
 18164 0000E6A0 488B4528                	mov rax, PARAM(1)
 18165 0000E6A4 50                      	push rax
 18166 0000E6A5 488D0425[80000000]      	lea rax, [128 + L_constants]
 18167 0000E6AD 50                      	push rax
 18168 0000E6AE 488B4520                	mov rax, PARAM(0)
 18169 0000E6B2 50                      	push rax
 18170 0000E6B3 6A02                    	push 2
 18171 0000E6B5 488B0425[08030000]      	mov rax, qword [free_var_97]
 18172                                  	assert_closure(rax)
    65 0000E6BD 803805              <1>  cmp byte [%1], %2
    66 0000E6C0 0F856E5A0000        <1>  jne L_error_incorrect_type
 18173 0000E6C6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18174 0000E6CA 53                      	push rbx
 18175 0000E6CB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18176 0000E6CF FFD3                    	call rbx
 18177 0000E6D1 50                      	push rax
 18178 0000E6D2 6A04                    	push 4
 18179 0000E6D4 488B4510                	mov rax, qword [rbp + 8*2]
 18180 0000E6D8 488B00                  	mov rax, qword [rax + 8*0]
 18181 0000E6DB 488B00                  	mov rax, qword [rax + 8*0]
 18182 0000E6DE 488B00                  	mov rax, qword [rax]
 18183                                  	assert_closure(rax)
    65 0000E6E1 803805              <1>  cmp byte [%1], %2
    66 0000E6E4 0F854A5A0000        <1>  jne L_error_incorrect_type
 18184 0000E6EA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18185 0000E6EE 53                      	push rbx
 18186 0000E6EF FF7508                  	push RET_ADDR
 18187 0000E6F2 488B7D18                	mov rdi, COUNT
 18188 0000E6F6 4883C703                	add rdi, 3
 18189 0000E6FA 48C1E703                	shl rdi, 3
 18190 0000E6FE 4801EF                  	add rdi, rbp
 18191 0000E701 488B6D00                	mov rbp, OLD_RDP
 18192 0000E705 BE00000000              	mov rsi, 0
 18193                                  .L_tc_recycle_frame_loop_5d2f:	 ; start recycle frame loop
 18194 0000E70A 4883FE07                	cmp rsi, 7
 18195 0000E70E 7427                    	je .L_tc_recycle_frame_done_5d2f
 18196 0000E710 B906000000              	mov rcx, 6
 18197 0000E715 4829F1                  	sub rcx, rsi
 18198 0000E718 48C1E103                	shl rcx, 3
 18199 0000E71C 4801E1                  	add rcx, rsp ; rcx is the address to move
 18200 0000E71F 4889F3                  	mov rbx, rsi
 18201 0000E722 48C1E303                	shl rbx, 3
 18202 0000E726 48F7DB                  	neg rbx
 18203 0000E729 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18204 0000E72C 488B09                  	mov rcx, [rcx]
 18205 0000E72F 48890B                  	mov [rbx], rcx
 18206 0000E732 48FFC6                  	inc rsi
 18207 0000E735 EBD3                    	jmp .L_tc_recycle_frame_loop_5d2f
 18208                                  .L_tc_recycle_frame_done_5d2f:	 ; end recycle frame loop
 18209 0000E737 BB06000000              	mov rbx, 6
 18210 0000E73C 48C1E303                	shl rbx, 3
 18211 0000E740 48F7DB                  	neg rbx
 18212 0000E743 4801FB                  	add rbx, rdi
 18213 0000E746 4889DC                  	mov rsp, rbx
 18214 0000E749 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18215 0000E74D FFE3                    	jmp rbx
 18216 0000E74F EB08                    	jmp .L_if_end_56bf
 18217                                  	.L_if_else_56bf:
 18218 0000E751 488D0425[02000000]      	lea rax, [2 + L_constants]
 18219                                  	.L_if_end_56bf:
 18220 0000E759 EB08                    	jmp .L_if_end_56be
 18221                                  	.L_if_else_56be:
 18222 0000E75B 488D0425[02000000]      	lea rax, [2 + L_constants]
 18223                                  	.L_if_end_56be:
 18224                                  .L_or_end_061d:
 18225 0000E763 C9                      	leave
 18226 0000E764 C23000                  	ret 8 * (2 + 4)
 18227                                  .L_lambda_simple_end_4fa2:	; new closure is in rax
 18228 0000E767 50                      	push rax
 18229 0000E768 488B4520                	mov rax, PARAM(0)
 18230 0000E76C 8F00                    	pop qword [rax]
 18231 0000E76E 48B8-                   	mov rax, sob_void
 18231 0000E770 [0000000000000000] 
 18232                                  
 18233 0000E778 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18234 0000E77D E832410000              	call malloc
 18235 0000E782 50                      	push rax
 18236 0000E783 BF08000000              	mov rdi, 8 * 1	; new rib
 18237 0000E788 E827410000              	call malloc
 18238 0000E78D 50                      	push rax
 18239 0000E78E BF18000000              	mov rdi, 8 * 3	; extended env
 18240 0000E793 E81C410000              	call malloc
 18241 0000E798 488B7D10                	mov rdi, ENV
 18242 0000E79C BE00000000              	mov rsi, 0
 18243 0000E7A1 BA01000000              	mov rdx, 1
 18244                                  .L_lambda_simple_env_loop_4fa3:	; ext_env[i + 1] <-- env[i]
 18245 0000E7A6 4883FE02                	cmp rsi, 2
 18246 0000E7AA 7410                    	je .L_lambda_simple_env_end_4fa3
 18247 0000E7AC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 18248 0000E7B0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18249 0000E7B4 48FFC6                  	inc rsi
 18250 0000E7B7 48FFC2                  	inc rdx
 18251 0000E7BA EBEA                    	jmp .L_lambda_simple_env_loop_4fa3
 18252                                  .L_lambda_simple_env_end_4fa3:
 18253 0000E7BC 5B                      	pop rbx
 18254 0000E7BD BE00000000              	mov rsi, 0
 18255                                  .L_lambda_simple_params_loop_4fa3:	; copy params
 18256 0000E7C2 4883FE01                	cmp rsi, 1
 18257 0000E7C6 740E                    	je .L_lambda_simple_params_end_4fa3
 18258 0000E7C8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18259 0000E7CD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18260 0000E7D1 48FFC6                  	inc rsi
 18261 0000E7D4 EBEC                    	jmp .L_lambda_simple_params_loop_4fa3
 18262                                  .L_lambda_simple_params_end_4fa3:
 18263 0000E7D6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18264 0000E7D9 4889C3                  	mov rbx, rax
 18265 0000E7DC 58                      	pop rax
 18266 0000E7DD C60005                  	mov byte [rax], T_closure
 18267 0000E7E0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18268 0000E7E4 48C74009[F1E70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa3
 18269 0000E7EC E948020000              	jmp .L_lambda_simple_end_4fa3
 18270                                  .L_lambda_simple_code_4fa3:	; lambda-simple body
 18271 0000E7F1 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18272 0000E7F7 740B                    	je .L_lambda_simple_arity_check_ok_4fa3
 18273 0000E7F9 FF742410                	push qword [rsp + 8 * 2]
 18274 0000E7FD 6A02                    	push 2
 18275 0000E7FF E969400000              	jmp L_error_incorrect_arity_simple
 18276                                  .L_lambda_simple_arity_check_ok_4fa3:
 18277 0000E804 C8000000                	enter 0, 0
 18278 0000E808 488B4528                	mov rax, PARAM(1)
 18279 0000E80C 50                      	push rax
 18280 0000E80D 6A01                    	push 1
 18281 0000E80F 488B0425[90000000]      	mov rax, qword [free_var_18]
 18282                                  	assert_closure(rax)
    65 0000E817 803805              <1>  cmp byte [%1], %2
    66 0000E81A 0F8514590000        <1>  jne L_error_incorrect_type
 18283 0000E820 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18284 0000E824 53                      	push rbx
 18285 0000E825 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18286 0000E829 FFD3                    	call rbx
 18287 0000E82B 50                      	push rax
 18288 0000E82C 488B4520                	mov rax, PARAM(0)
 18289 0000E830 50                      	push rax
 18290 0000E831 6A01                    	push 1
 18291 0000E833 488B0425[90000000]      	mov rax, qword [free_var_18]
 18292                                  	assert_closure(rax)
    65 0000E83B 803805              <1>  cmp byte [%1], %2
    66 0000E83E 0F85F0580000        <1>  jne L_error_incorrect_type
 18293 0000E844 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18294 0000E848 53                      	push rbx
 18295 0000E849 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18296 0000E84D FFD3                    	call rbx
 18297 0000E84F 50                      	push rax
 18298 0000E850 6A02                    	push 2
 18299 0000E852 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18300 0000E857 E858400000              	call malloc
 18301 0000E85C 50                      	push rax
 18302 0000E85D BF10000000              	mov rdi, 8 * 2	; new rib
 18303 0000E862 E84D400000              	call malloc
 18304 0000E867 50                      	push rax
 18305 0000E868 BF20000000              	mov rdi, 8 * 4	; extended env
 18306 0000E86D E842400000              	call malloc
 18307 0000E872 488B7D10                	mov rdi, ENV
 18308 0000E876 BE00000000              	mov rsi, 0
 18309 0000E87B BA01000000              	mov rdx, 1
 18310                                  .L_lambda_simple_env_loop_4fa4:	; ext_env[i + 1] <-- env[i]
 18311 0000E880 4883FE03                	cmp rsi, 3
 18312 0000E884 7410                    	je .L_lambda_simple_env_end_4fa4
 18313 0000E886 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 18314 0000E88A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18315 0000E88E 48FFC6                  	inc rsi
 18316 0000E891 48FFC2                  	inc rdx
 18317 0000E894 EBEA                    	jmp .L_lambda_simple_env_loop_4fa4
 18318                                  .L_lambda_simple_env_end_4fa4:
 18319 0000E896 5B                      	pop rbx
 18320 0000E897 BE00000000              	mov rsi, 0
 18321                                  .L_lambda_simple_params_loop_4fa4:	; copy params
 18322 0000E89C 4883FE02                	cmp rsi, 2
 18323 0000E8A0 740E                    	je .L_lambda_simple_params_end_4fa4
 18324 0000E8A2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18325 0000E8A7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18326 0000E8AB 48FFC6                  	inc rsi
 18327 0000E8AE EBEC                    	jmp .L_lambda_simple_params_loop_4fa4
 18328                                  .L_lambda_simple_params_end_4fa4:
 18329 0000E8B0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18330 0000E8B3 4889C3                  	mov rbx, rax
 18331 0000E8B6 58                      	pop rax
 18332 0000E8B7 C60005                  	mov byte [rax], T_closure
 18333 0000E8BA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18334 0000E8BE 48C74009[CBE80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa4
 18335 0000E8C6 E9FC000000              	jmp .L_lambda_simple_end_4fa4
 18336                                  .L_lambda_simple_code_4fa4:	; lambda-simple body
 18337 0000E8CB 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18338 0000E8D1 740B                    	je .L_lambda_simple_arity_check_ok_4fa4
 18339 0000E8D3 FF742410                	push qword [rsp + 8 * 2]
 18340 0000E8D7 6A02                    	push 2
 18341 0000E8D9 E98F3F0000              	jmp L_error_incorrect_arity_simple
 18342                                  .L_lambda_simple_arity_check_ok_4fa4:
 18343 0000E8DE C8000000                	enter 0, 0
 18344 0000E8E2 488B4528                	mov rax, PARAM(1)
 18345 0000E8E6 50                      	push rax
 18346 0000E8E7 488B4520                	mov rax, PARAM(0)
 18347 0000E8EB 50                      	push rax
 18348 0000E8EC 6A02                    	push 2
 18349 0000E8EE 488B0425[50030000]      	mov rax, qword [free_var_106]
 18350                                  	assert_closure(rax)
    65 0000E8F6 803805              <1>  cmp byte [%1], %2
    66 0000E8F9 0F8535580000        <1>  jne L_error_incorrect_type
 18351 0000E8FF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18352 0000E903 53                      	push rbx
 18353 0000E904 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18354 0000E908 FFD3                    	call rbx
 18355 0000E90A 483D[02000000]          	cmp rax, sob_boolean_false
 18356 0000E910 0F84A5000000            	je .L_if_else_56c0
 18357 0000E916 488B4520                	mov rax, PARAM(0)
 18358 0000E91A 50                      	push rax
 18359 0000E91B 488B4510                	mov rax, qword [rbp + 8*2]
 18360 0000E91F 488B00                  	mov rax, qword [rax + 8*0]
 18361 0000E922 488B4008                	mov rax, qword [rax + 8*1]
 18362 0000E926 50                      	push rax
 18363 0000E927 488B4510                	mov rax, qword [rbp + 8*2]
 18364 0000E92B 488B00                  	mov rax, qword [rax + 8*0]
 18365 0000E92E 488B00                  	mov rax, qword [rax + 8*0]
 18366 0000E931 50                      	push rax
 18367 0000E932 488D0425[20000000]      	lea rax, [32 + L_constants]
 18368 0000E93A 50                      	push rax
 18369 0000E93B 6A04                    	push 4
 18370 0000E93D 488B4510                	mov rax, qword [rbp + 8*2]
 18371 0000E941 488B4008                	mov rax, qword [rax + 8*1]
 18372 0000E945 488B00                  	mov rax, qword [rax + 8*0]
 18373 0000E948 488B00                  	mov rax, qword [rax]
 18374                                  	assert_closure(rax)
    65 0000E94B 803805              <1>  cmp byte [%1], %2
    66 0000E94E 0F85E0570000        <1>  jne L_error_incorrect_type
 18375 0000E954 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18376 0000E958 53                      	push rbx
 18377 0000E959 FF7508                  	push RET_ADDR
 18378 0000E95C 488B7D18                	mov rdi, COUNT
 18379 0000E960 4883C703                	add rdi, 3
 18380 0000E964 48C1E703                	shl rdi, 3
 18381 0000E968 4801EF                  	add rdi, rbp
 18382 0000E96B 488B6D00                	mov rbp, OLD_RDP
 18383 0000E96F BE00000000              	mov rsi, 0
 18384                                  .L_tc_recycle_frame_loop_5d32:	 ; start recycle frame loop
 18385 0000E974 4883FE07                	cmp rsi, 7
 18386 0000E978 7427                    	je .L_tc_recycle_frame_done_5d32
 18387 0000E97A B906000000              	mov rcx, 6
 18388 0000E97F 4829F1                  	sub rcx, rsi
 18389 0000E982 48C1E103                	shl rcx, 3
 18390 0000E986 4801E1                  	add rcx, rsp ; rcx is the address to move
 18391 0000E989 4889F3                  	mov rbx, rsi
 18392 0000E98C 48C1E303                	shl rbx, 3
 18393 0000E990 48F7DB                  	neg rbx
 18394 0000E993 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18395 0000E996 488B09                  	mov rcx, [rcx]
 18396 0000E999 48890B                  	mov [rbx], rcx
 18397 0000E99C 48FFC6                  	inc rsi
 18398 0000E99F EBD3                    	jmp .L_tc_recycle_frame_loop_5d32
 18399                                  .L_tc_recycle_frame_done_5d32:	 ; end recycle frame loop
 18400 0000E9A1 BB06000000              	mov rbx, 6
 18401 0000E9A6 48C1E303                	shl rbx, 3
 18402 0000E9AA 48F7DB                  	neg rbx
 18403 0000E9AD 4801FB                  	add rbx, rdi
 18404 0000E9B0 4889DC                  	mov rsp, rbx
 18405 0000E9B3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18406 0000E9B7 FFE3                    	jmp rbx
 18407 0000E9B9 EB08                    	jmp .L_if_end_56c0
 18408                                  	.L_if_else_56c0:
 18409 0000E9BB 488D0425[02000000]      	lea rax, [2 + L_constants]
 18410                                  	.L_if_end_56c0:
 18411 0000E9C3 C9                      	leave
 18412 0000E9C4 C22000                  	ret 8 * (2 + 2)
 18413                                  .L_lambda_simple_end_4fa4:	; new closure is in rax
 18414                                  	assert_closure(rax)
    65 0000E9C7 803805              <1>  cmp byte [%1], %2
    66 0000E9CA 0F8564570000        <1>  jne L_error_incorrect_type
 18415 0000E9D0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18416 0000E9D4 53                      	push rbx
 18417 0000E9D5 FF7508                  	push RET_ADDR
 18418 0000E9D8 488B7D18                	mov rdi, COUNT
 18419 0000E9DC 4883C703                	add rdi, 3
 18420 0000E9E0 48C1E703                	shl rdi, 3
 18421 0000E9E4 4801EF                  	add rdi, rbp
 18422 0000E9E7 488B6D00                	mov rbp, OLD_RDP
 18423 0000E9EB BE00000000              	mov rsi, 0
 18424                                  .L_tc_recycle_frame_loop_5d31:	 ; start recycle frame loop
 18425 0000E9F0 4883FE05                	cmp rsi, 5
 18426 0000E9F4 7427                    	je .L_tc_recycle_frame_done_5d31
 18427 0000E9F6 B904000000              	mov rcx, 4
 18428 0000E9FB 4829F1                  	sub rcx, rsi
 18429 0000E9FE 48C1E103                	shl rcx, 3
 18430 0000EA02 4801E1                  	add rcx, rsp ; rcx is the address to move
 18431 0000EA05 4889F3                  	mov rbx, rsi
 18432 0000EA08 48C1E303                	shl rbx, 3
 18433 0000EA0C 48F7DB                  	neg rbx
 18434 0000EA0F 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18435 0000EA12 488B09                  	mov rcx, [rcx]
 18436 0000EA15 48890B                  	mov [rbx], rcx
 18437 0000EA18 48FFC6                  	inc rsi
 18438 0000EA1B EBD3                    	jmp .L_tc_recycle_frame_loop_5d31
 18439                                  .L_tc_recycle_frame_done_5d31:	 ; end recycle frame loop
 18440 0000EA1D BB04000000              	mov rbx, 4
 18441 0000EA22 48C1E303                	shl rbx, 3
 18442 0000EA26 48F7DB                  	neg rbx
 18443 0000EA29 4801FB                  	add rbx, rdi
 18444 0000EA2C 4889DC                  	mov rsp, rbx
 18445 0000EA2F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18446 0000EA33 FFE3                    	jmp rbx
 18447 0000EA35 C9                      	leave
 18448 0000EA36 C22000                  	ret 8 * (2 + 2)
 18449                                  .L_lambda_simple_end_4fa3:	; new closure is in rax
 18450 0000EA39 50                      	push rax
 18451 0000EA3A 6A01                    	push 1
 18452 0000EA3C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18453 0000EA41 E86E3E0000              	call malloc
 18454 0000EA46 50                      	push rax
 18455 0000EA47 BF08000000              	mov rdi, 8 * 1	; new rib
 18456 0000EA4C E8633E0000              	call malloc
 18457 0000EA51 50                      	push rax
 18458 0000EA52 BF18000000              	mov rdi, 8 * 3	; extended env
 18459 0000EA57 E8583E0000              	call malloc
 18460 0000EA5C 488B7D10                	mov rdi, ENV
 18461 0000EA60 BE00000000              	mov rsi, 0
 18462 0000EA65 BA01000000              	mov rdx, 1
 18463                                  .L_lambda_simple_env_loop_4fa5:	; ext_env[i + 1] <-- env[i]
 18464 0000EA6A 4883FE02                	cmp rsi, 2
 18465 0000EA6E 7410                    	je .L_lambda_simple_env_end_4fa5
 18466 0000EA70 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 18467 0000EA74 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18468 0000EA78 48FFC6                  	inc rsi
 18469 0000EA7B 48FFC2                  	inc rdx
 18470 0000EA7E EBEA                    	jmp .L_lambda_simple_env_loop_4fa5
 18471                                  .L_lambda_simple_env_end_4fa5:
 18472 0000EA80 5B                      	pop rbx
 18473 0000EA81 BE00000000              	mov rsi, 0
 18474                                  .L_lambda_simple_params_loop_4fa5:	; copy params
 18475 0000EA86 4883FE01                	cmp rsi, 1
 18476 0000EA8A 740E                    	je .L_lambda_simple_params_end_4fa5
 18477 0000EA8C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18478 0000EA91 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18479 0000EA95 48FFC6                  	inc rsi
 18480 0000EA98 EBEC                    	jmp .L_lambda_simple_params_loop_4fa5
 18481                                  .L_lambda_simple_params_end_4fa5:
 18482 0000EA9A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18483 0000EA9D 4889C3                  	mov rbx, rax
 18484 0000EAA0 58                      	pop rax
 18485 0000EAA1 C60005                  	mov byte [rax], T_closure
 18486 0000EAA4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18487 0000EAA8 48C74009[B5EA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa5
 18488 0000EAB0 E936050000              	jmp .L_lambda_simple_end_4fa5
 18489                                  .L_lambda_simple_code_4fa5:	; lambda-simple body
 18490 0000EAB5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18491 0000EABB 740B                    	je .L_lambda_simple_arity_check_ok_4fa5
 18492 0000EABD FF742410                	push qword [rsp + 8 * 2]
 18493 0000EAC1 6A01                    	push 1
 18494 0000EAC3 E9A53D0000              	jmp L_error_incorrect_arity_simple
 18495                                  .L_lambda_simple_arity_check_ok_4fa5:
 18496 0000EAC8 C8000000                	enter 0, 0
 18497 0000EACC 488D0425[17000000]      	lea rax, [23 + L_constants]
 18498 0000EAD4 50                      	push rax
 18499 0000EAD5 6A01                    	push 1
 18500 0000EAD7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18501 0000EADC E8D33D0000              	call malloc
 18502 0000EAE1 50                      	push rax
 18503 0000EAE2 BF08000000              	mov rdi, 8 * 1	; new rib
 18504 0000EAE7 E8C83D0000              	call malloc
 18505 0000EAEC 50                      	push rax
 18506 0000EAED BF20000000              	mov rdi, 8 * 4	; extended env
 18507 0000EAF2 E8BD3D0000              	call malloc
 18508 0000EAF7 488B7D10                	mov rdi, ENV
 18509 0000EAFB BE00000000              	mov rsi, 0
 18510 0000EB00 BA01000000              	mov rdx, 1
 18511                                  .L_lambda_simple_env_loop_4fa6:	; ext_env[i + 1] <-- env[i]
 18512 0000EB05 4883FE03                	cmp rsi, 3
 18513 0000EB09 7410                    	je .L_lambda_simple_env_end_4fa6
 18514 0000EB0B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 18515 0000EB0F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18516 0000EB13 48FFC6                  	inc rsi
 18517 0000EB16 48FFC2                  	inc rdx
 18518 0000EB19 EBEA                    	jmp .L_lambda_simple_env_loop_4fa6
 18519                                  .L_lambda_simple_env_end_4fa6:
 18520 0000EB1B 5B                      	pop rbx
 18521 0000EB1C BE00000000              	mov rsi, 0
 18522                                  .L_lambda_simple_params_loop_4fa6:	; copy params
 18523 0000EB21 4883FE01                	cmp rsi, 1
 18524 0000EB25 740E                    	je .L_lambda_simple_params_end_4fa6
 18525 0000EB27 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18526 0000EB2C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18527 0000EB30 48FFC6                  	inc rsi
 18528 0000EB33 EBEC                    	jmp .L_lambda_simple_params_loop_4fa6
 18529                                  .L_lambda_simple_params_end_4fa6:
 18530 0000EB35 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18531 0000EB38 4889C3                  	mov rbx, rax
 18532 0000EB3B 58                      	pop rax
 18533 0000EB3C C60005                  	mov byte [rax], T_closure
 18534 0000EB3F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18535 0000EB43 48C74009[50EB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa6
 18536 0000EB4B E929040000              	jmp .L_lambda_simple_end_4fa6
 18537                                  .L_lambda_simple_code_4fa6:	; lambda-simple body
 18538 0000EB50 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18539 0000EB56 740B                    	je .L_lambda_simple_arity_check_ok_4fa6
 18540 0000EB58 FF742410                	push qword [rsp + 8 * 2]
 18541 0000EB5C 6A01                    	push 1
 18542 0000EB5E E90A3D0000              	jmp L_error_incorrect_arity_simple
 18543                                  .L_lambda_simple_arity_check_ok_4fa6:
 18544 0000EB63 C8000000                	enter 0, 0
 18545 0000EB67 BF11000000              	mov qword rdi, (1 + 8 + 8)
 18546 0000EB6C E8433D0000              	call malloc
 18547 0000EB71 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 18548 0000EB75 48B8-                   	mov rax, sob_void
 18548 0000EB77 [0000000000000000] 
 18549                                  
 18550 0000EB7F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18551 0000EB84 E82B3D0000              	call malloc
 18552 0000EB89 50                      	push rax
 18553 0000EB8A BF08000000              	mov rdi, 8 * 1	; new rib
 18554 0000EB8F E8203D0000              	call malloc
 18555 0000EB94 50                      	push rax
 18556 0000EB95 BF28000000              	mov rdi, 8 * 5	; extended env
 18557 0000EB9A E8153D0000              	call malloc
 18558 0000EB9F 488B7D10                	mov rdi, ENV
 18559 0000EBA3 BE00000000              	mov rsi, 0
 18560 0000EBA8 BA01000000              	mov rdx, 1
 18561                                  .L_lambda_simple_env_loop_4fa7:	; ext_env[i + 1] <-- env[i]
 18562 0000EBAD 4883FE04                	cmp rsi, 4
 18563 0000EBB1 7410                    	je .L_lambda_simple_env_end_4fa7
 18564 0000EBB3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 18565 0000EBB7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18566 0000EBBB 48FFC6                  	inc rsi
 18567 0000EBBE 48FFC2                  	inc rdx
 18568 0000EBC1 EBEA                    	jmp .L_lambda_simple_env_loop_4fa7
 18569                                  .L_lambda_simple_env_end_4fa7:
 18570 0000EBC3 5B                      	pop rbx
 18571 0000EBC4 BE00000000              	mov rsi, 0
 18572                                  .L_lambda_simple_params_loop_4fa7:	; copy params
 18573 0000EBC9 4883FE01                	cmp rsi, 1
 18574 0000EBCD 740E                    	je .L_lambda_simple_params_end_4fa7
 18575 0000EBCF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18576 0000EBD4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18577 0000EBD8 48FFC6                  	inc rsi
 18578 0000EBDB EBEC                    	jmp .L_lambda_simple_params_loop_4fa7
 18579                                  .L_lambda_simple_params_end_4fa7:
 18580 0000EBDD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18581 0000EBE0 4889C3                  	mov rbx, rax
 18582 0000EBE3 58                      	pop rax
 18583 0000EBE4 C60005                  	mov byte [rax], T_closure
 18584 0000EBE7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18585 0000EBEB 48C74009[F8EB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa7
 18586 0000EBF3 E96F010000              	jmp .L_lambda_simple_end_4fa7
 18587                                  .L_lambda_simple_code_4fa7:	; lambda-simple body
 18588 0000EBF8 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18589 0000EBFE 740B                    	je .L_lambda_simple_arity_check_ok_4fa7
 18590 0000EC00 FF742410                	push qword [rsp + 8 * 2]
 18591 0000EC04 6A02                    	push 2
 18592 0000EC06 E9623C0000              	jmp L_error_incorrect_arity_simple
 18593                                  .L_lambda_simple_arity_check_ok_4fa7:
 18594 0000EC0B C8000000                	enter 0, 0
 18595 0000EC0F 488B4528                	mov rax, PARAM(1)
 18596 0000EC13 50                      	push rax
 18597 0000EC14 6A01                    	push 1
 18598 0000EC16 488B0425[00000000]      	mov rax, qword [free_var_0]
 18599                                  	assert_closure(rax)
    65 0000EC1E 803805              <1>  cmp byte [%1], %2
    66 0000EC21 0F850D550000        <1>  jne L_error_incorrect_type
 18600 0000EC27 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18601 0000EC2B 53                      	push rbx
 18602 0000EC2C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18603 0000EC30 FFD3                    	call rbx
 18604 0000EC32 483D[02000000]          	cmp rax, sob_boolean_false
 18605 0000EC38 0F8525010000            	jne .L_or_end_061e
 18606 0000EC3E 488B4528                	mov rax, PARAM(1)
 18607 0000EC42 50                      	push rax
 18608 0000EC43 6A01                    	push 1
 18609 0000EC45 488B0425[80000000]      	mov rax, qword [free_var_16]
 18610                                  	assert_closure(rax)
    65 0000EC4D 803805              <1>  cmp byte [%1], %2
    66 0000EC50 0F85DE540000        <1>  jne L_error_incorrect_type
 18611 0000EC56 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18612 0000EC5A 53                      	push rbx
 18613 0000EC5B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18614 0000EC5F FFD3                    	call rbx
 18615 0000EC61 50                      	push rax
 18616 0000EC62 488B4520                	mov rax, PARAM(0)
 18617 0000EC66 50                      	push rax
 18618 0000EC67 6A02                    	push 2
 18619 0000EC69 488B4510                	mov rax, qword [rbp + 8*2]
 18620 0000EC6D 488B4008                	mov rax, qword [rax + 8*1]
 18621 0000EC71 488B00                  	mov rax, qword [rax + 8*0]
 18622                                  	assert_closure(rax)
    65 0000EC74 803805              <1>  cmp byte [%1], %2
    66 0000EC77 0F85B7540000        <1>  jne L_error_incorrect_type
 18623 0000EC7D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18624 0000EC81 53                      	push rbx
 18625 0000EC82 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18626 0000EC86 FFD3                    	call rbx
 18627 0000EC88 483D[02000000]          	cmp rax, sob_boolean_false
 18628 0000EC8E 0F84C7000000            	je .L_if_else_56c1
 18629 0000EC94 488B4528                	mov rax, PARAM(1)
 18630 0000EC98 50                      	push rax
 18631 0000EC99 6A01                    	push 1
 18632 0000EC9B 488B0425[88000000]      	mov rax, qword [free_var_17]
 18633                                  	assert_closure(rax)
    65 0000ECA3 803805              <1>  cmp byte [%1], %2
    66 0000ECA6 0F8588540000        <1>  jne L_error_incorrect_type
 18634 0000ECAC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18635 0000ECB0 53                      	push rbx
 18636 0000ECB1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18637 0000ECB5 FFD3                    	call rbx
 18638 0000ECB7 50                      	push rax
 18639 0000ECB8 488B4528                	mov rax, PARAM(1)
 18640 0000ECBC 50                      	push rax
 18641 0000ECBD 6A01                    	push 1
 18642 0000ECBF 488B0425[80000000]      	mov rax, qword [free_var_16]
 18643                                  	assert_closure(rax)
    65 0000ECC7 803805              <1>  cmp byte [%1], %2
    66 0000ECCA 0F8564540000        <1>  jne L_error_incorrect_type
 18644 0000ECD0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18645 0000ECD4 53                      	push rbx
 18646 0000ECD5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18647 0000ECD9 FFD3                    	call rbx
 18648 0000ECDB 50                      	push rax
 18649 0000ECDC 6A02                    	push 2
 18650 0000ECDE 488B4510                	mov rax, qword [rbp + 8*2]
 18651 0000ECE2 488B00                  	mov rax, qword [rax + 8*0]
 18652 0000ECE5 488B00                  	mov rax, qword [rax + 8*0]
 18653 0000ECE8 488B00                  	mov rax, qword [rax]
 18654                                  	assert_closure(rax)
    65 0000ECEB 803805              <1>  cmp byte [%1], %2
    66 0000ECEE 0F8540540000        <1>  jne L_error_incorrect_type
 18655 0000ECF4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18656 0000ECF8 53                      	push rbx
 18657 0000ECF9 FF7508                  	push RET_ADDR
 18658 0000ECFC 488B7D18                	mov rdi, COUNT
 18659 0000ED00 4883C703                	add rdi, 3
 18660 0000ED04 48C1E703                	shl rdi, 3
 18661 0000ED08 4801EF                  	add rdi, rbp
 18662 0000ED0B 488B6D00                	mov rbp, OLD_RDP
 18663 0000ED0F BE00000000              	mov rsi, 0
 18664                                  .L_tc_recycle_frame_loop_5d34:	 ; start recycle frame loop
 18665 0000ED14 4883FE05                	cmp rsi, 5
 18666 0000ED18 7427                    	je .L_tc_recycle_frame_done_5d34
 18667 0000ED1A B904000000              	mov rcx, 4
 18668 0000ED1F 4829F1                  	sub rcx, rsi
 18669 0000ED22 48C1E103                	shl rcx, 3
 18670 0000ED26 4801E1                  	add rcx, rsp ; rcx is the address to move
 18671 0000ED29 4889F3                  	mov rbx, rsi
 18672 0000ED2C 48C1E303                	shl rbx, 3
 18673 0000ED30 48F7DB                  	neg rbx
 18674 0000ED33 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18675 0000ED36 488B09                  	mov rcx, [rcx]
 18676 0000ED39 48890B                  	mov [rbx], rcx
 18677 0000ED3C 48FFC6                  	inc rsi
 18678 0000ED3F EBD3                    	jmp .L_tc_recycle_frame_loop_5d34
 18679                                  .L_tc_recycle_frame_done_5d34:	 ; end recycle frame loop
 18680 0000ED41 BB04000000              	mov rbx, 4
 18681 0000ED46 48C1E303                	shl rbx, 3
 18682 0000ED4A 48F7DB                  	neg rbx
 18683 0000ED4D 4801FB                  	add rbx, rdi
 18684 0000ED50 4889DC                  	mov rsp, rbx
 18685 0000ED53 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18686 0000ED57 FFE3                    	jmp rbx
 18687 0000ED59 EB08                    	jmp .L_if_end_56c1
 18688                                  	.L_if_else_56c1:
 18689 0000ED5B 488D0425[02000000]      	lea rax, [2 + L_constants]
 18690                                  	.L_if_end_56c1:
 18691                                  .L_or_end_061e:
 18692 0000ED63 C9                      	leave
 18693 0000ED64 C22000                  	ret 8 * (2 + 2)
 18694                                  .L_lambda_simple_end_4fa7:	; new closure is in rax
 18695 0000ED67 50                      	push rax
 18696 0000ED68 488B4520                	mov rax, PARAM(0)
 18697 0000ED6C 8F00                    	pop qword [rax]
 18698 0000ED6E 48B8-                   	mov rax, sob_void
 18698 0000ED70 [0000000000000000] 
 18699                                  
 18700 0000ED78 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18701 0000ED7D E8323B0000              	call malloc
 18702 0000ED82 50                      	push rax
 18703 0000ED83 BF08000000              	mov rdi, 8 * 1	; new rib
 18704 0000ED88 E8273B0000              	call malloc
 18705 0000ED8D 50                      	push rax
 18706 0000ED8E BF28000000              	mov rdi, 8 * 5	; extended env
 18707 0000ED93 E81C3B0000              	call malloc
 18708 0000ED98 488B7D10                	mov rdi, ENV
 18709 0000ED9C BE00000000              	mov rsi, 0
 18710 0000EDA1 BA01000000              	mov rdx, 1
 18711                                  .L_lambda_opt_env_loop_0c98:	; ext_env[i + 1] <-- env[i]
 18712 0000EDA6 4883FE04                	cmp rsi, 4
 18713 0000EDAA 7410                    	je .L_lambda_opt_env_end_0c98
 18714 0000EDAC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 18715 0000EDB0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18716 0000EDB4 48FFC6                  	inc rsi
 18717 0000EDB7 48FFC2                  	inc rdx
 18718 0000EDBA EBEA                    	jmp .L_lambda_opt_env_loop_0c98
 18719                                  .L_lambda_opt_env_end_0c98:
 18720 0000EDBC 5B                      	pop rbx
 18721 0000EDBD BE00000000              	mov rsi, 0
 18722                                  .L_lambda_opt_params_loop_0c98:	; copy params
 18723 0000EDC2 4883FE01                	cmp rsi, 1
 18724 0000EDC6 740E                    	je .L_lambda_opt_params_end_0c98
 18725 0000EDC8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18726 0000EDCD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18727 0000EDD1 48FFC6                  	inc rsi
 18728 0000EDD4 EBEC                    	jmp .L_lambda_opt_params_loop_0c98
 18729                                  .L_lambda_opt_params_end_0c98:
 18730 0000EDD6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18731 0000EDD9 4889C3                  	mov rbx, rax
 18732 0000EDDC 58                      	pop rax
 18733 0000EDDD C60005                  	mov byte [rax], T_closure
 18734 0000EDE0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18735 0000EDE4 48C74009[F1ED0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c98
 18736 0000EDEC E984010000              	jmp .L_lambda_opt_end_0c98
 18737                                  .L_lambda_opt_code_0c98:	; lambda-opt body
 18738 0000EDF1 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 18739 0000EDF6 4889FB                  	mov rbx, rdi
 18740 0000EDF9 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 18741 0000EDFD 4883FB00                	cmp rbx, 0
 18742 0000EE01 7F45                    	jg .L_lambda_opt_arity_check_more_0c98
 18743                                  .L_lambda_opt_arity_check_exact_0c98:	 ; if params in opt is exact
 18744 0000EE03 4883EC08                	sub rsp, 8
 18745 0000EE07 BE00000000              	mov rsi, 0 ; index
 18746                                  .L_lambda_opt_stack_enlarge_loop_0c98:	 ; stack loop enlarge start
 18747 0000EE0C 4883FE04                	cmp rsi, 4
 18748 0000EE10 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c98
 18749 0000EE12 4889F7                  	mov rdi, rsi
 18750 0000EE15 48FFC7                  	inc rdi
 18751 0000EE18 48C1E703                	shl rdi, 3
 18752 0000EE1C 4801E7                  	add rdi, rsp
 18753 0000EE1F 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 18754 0000EE22 4883EB08                	sub rbx, 8
 18755 0000EE26 488B3F                  	mov rdi, [rdi]
 18756 0000EE29 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 18757 0000EE2C 48FFC6                  	inc rsi
 18758 0000EE2F EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c98
 18759                                  .L_lambda_opt_stack_enlarge_loop_exit_0c98:	 ; end of stack enlarge loop
 18760 0000EE31 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 18760 0000EE36 [01000000]         
 18761 0000EE3A 48C744241002000000      	mov qword [rsp + 2*8], 2
 18762 0000EE43 E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c98
 18763                                  .L_lambda_opt_arity_check_more_0c98:	 ; if params in opt is more
 18764 0000EE48 48B8-                   	mov rax, sob_nil
 18764 0000EE4A [0100000000000000] 
 18765 0000EE52 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 18766 0000EE55 48FFCE                  	dec rsi
 18767                                  .L_lambda_opt_list_create_loop_0c98:	; start of list creation loop
 18768 0000EE58 4883FEFF                	cmp rsi, -1
 18769 0000EE5C 7422                    	je .L_lambda_opt_list_create_loop_exit_0c98
 18770 0000EE5E 488D4E04                	lea rcx, [rsi + (3 + 1)]
 18771 0000EE62 48C1E103                	shl rcx, 3
 18772 0000EE66 4801E1                  	add rcx, rsp
 18773 0000EE69 488B09                  	mov rcx, [rcx]
 18774 0000EE6C 56                      	push rsi ; save params
 18775 0000EE6D 53                      	push rbx
 18776                                  
 18777 0000EE6E 50                      	push rax ; cdr
 18778 0000EE6F 51                      	push rcx ; car
 18779 0000EE70 6A02                    	push qword 2 ; push num of args
 18780 0000EE72 6A01                    	push qword 1 ; push garbage as env
 18781 0000EE74 E8C2430000              	call L_code_ptr_cons
 18782                                  
 18783 0000EE79 5B                      	pop rbx ; restore params
 18784 0000EE7A 5E                      	pop rsi
 18785 0000EE7B 48FFCE                  	dec rsi
 18786 0000EE7E EBD8                    	jmp .L_lambda_opt_list_create_loop_0c98
 18787                                  .L_lambda_opt_list_create_loop_exit_0c98:	; end of list creation loop
 18788 0000EE80 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 18789 0000EE85 4883C302                	add rbx, 2
 18790 0000EE89 4889DF                  	mov rdi, rbx
 18791 0000EE8C 48C1E703                	shl rdi,3
 18792 0000EE90 4801E7                  	add rdi, rsp
 18793 0000EE93 488907                  	mov [rdi], rax
 18794 0000EE96 BE00000000              	mov rsi, 0 ;index
 18795                                  .L_lambda_opt_stack_shrink_loop_0c98:	; start of stack shrink loop
 18796 0000EE9B 4883FE04                	cmp rsi, 4
 18797 0000EE9F 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c98
 18798 0000EEA1 BF03000000              	mov rdi, 3
 18799 0000EEA6 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 18800 0000EEA9 4889D9                  	mov rcx, rbx
 18801 0000EEAC 4829F1                  	sub rcx, rsi
 18802 0000EEAF 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 18803 0000EEB2 4889FA                  	mov rdx, rdi
 18804 0000EEB5 48C1E203                	shl rdx, 3
 18805 0000EEB9 4801E2                  	add rdx, rsp
 18806 0000EEBC 48C1E103                	shl rcx, 3
 18807 0000EEC0 4801E1                  	add rcx, rsp
 18808 0000EEC3 488B12                  	mov rdx, [rdx]
 18809 0000EEC6 488911                  	mov [rcx], rdx
 18810 0000EEC9 48FFC6                  	inc rsi
 18811 0000EECC EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c98
 18812                                  .L_lambda_opt_stack_shrink_loop_exit_0c98:	; end of stack shrink loop
 18813 0000EECE 4883EB02                	sub rbx, 2 ; rbx has number of args
 18814 0000EED2 4883EB02                	sub rbx, 2
 18815 0000EED6 48C1E303                	shl rbx, 3
 18816 0000EEDA 4801DC                  	add rsp, rbx
 18817 0000EEDD 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 18818                                  .L_lambda_opt_stack_adjusted_0c98:
 18819 0000EEE6 C8000000                	enter 0, 0
 18820 0000EEEA 488B4528                	mov rax, PARAM(1)
 18821 0000EEEE 50                      	push rax
 18822 0000EEEF 488B4520                	mov rax, PARAM(0)
 18823 0000EEF3 50                      	push rax
 18824 0000EEF4 6A02                    	push 2
 18825 0000EEF6 488B4510                	mov rax, qword [rbp + 8*2]
 18826 0000EEFA 488B00                  	mov rax, qword [rax + 8*0]
 18827 0000EEFD 488B00                  	mov rax, qword [rax + 8*0]
 18828 0000EF00 488B00                  	mov rax, qword [rax]
 18829                                  	assert_closure(rax)
    65 0000EF03 803805              <1>  cmp byte [%1], %2
    66 0000EF06 0F8528520000        <1>  jne L_error_incorrect_type
 18830 0000EF0C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18831 0000EF10 53                      	push rbx
 18832 0000EF11 FF7508                  	push RET_ADDR
 18833 0000EF14 488B7D18                	mov rdi, COUNT
 18834 0000EF18 4883C703                	add rdi, 3
 18835 0000EF1C 48C1E703                	shl rdi, 3
 18836 0000EF20 4801EF                  	add rdi, rbp
 18837 0000EF23 488B6D00                	mov rbp, OLD_RDP
 18838 0000EF27 BE00000000              	mov rsi, 0
 18839                                  .L_tc_recycle_frame_loop_5d35:	 ; start recycle frame loop
 18840 0000EF2C 4883FE05                	cmp rsi, 5
 18841 0000EF30 7427                    	je .L_tc_recycle_frame_done_5d35
 18842 0000EF32 B904000000              	mov rcx, 4
 18843 0000EF37 4829F1                  	sub rcx, rsi
 18844 0000EF3A 48C1E103                	shl rcx, 3
 18845 0000EF3E 4801E1                  	add rcx, rsp ; rcx is the address to move
 18846 0000EF41 4889F3                  	mov rbx, rsi
 18847 0000EF44 48C1E303                	shl rbx, 3
 18848 0000EF48 48F7DB                  	neg rbx
 18849 0000EF4B 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18850 0000EF4E 488B09                  	mov rcx, [rcx]
 18851 0000EF51 48890B                  	mov [rbx], rcx
 18852 0000EF54 48FFC6                  	inc rsi
 18853 0000EF57 EBD3                    	jmp .L_tc_recycle_frame_loop_5d35
 18854                                  .L_tc_recycle_frame_done_5d35:	 ; end recycle frame loop
 18855 0000EF59 BB04000000              	mov rbx, 4
 18856 0000EF5E 48C1E303                	shl rbx, 3
 18857 0000EF62 48F7DB                  	neg rbx
 18858 0000EF65 4801FB                  	add rbx, rdi
 18859 0000EF68 4889DC                  	mov rsp, rbx
 18860 0000EF6B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18861 0000EF6F FFE3                    	jmp rbx
 18862 0000EF71 C9                      	leave
 18863 0000EF72 C22000                  	ret AND_KILL_FRAME(2)
 18864                                  .L_lambda_opt_end_0c98:	; new closure is in rax
 18865 0000EF75 C9                      	leave
 18866 0000EF76 C21800                  	ret 8 * (2 + 1)
 18867                                  .L_lambda_simple_end_4fa6:	; new closure is in rax
 18868                                  	assert_closure(rax)
    65 0000EF79 803805              <1>  cmp byte [%1], %2
    66 0000EF7C 0F85B2510000        <1>  jne L_error_incorrect_type
 18869 0000EF82 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18870 0000EF86 53                      	push rbx
 18871 0000EF87 FF7508                  	push RET_ADDR
 18872 0000EF8A 488B7D18                	mov rdi, COUNT
 18873 0000EF8E 4883C703                	add rdi, 3
 18874 0000EF92 48C1E703                	shl rdi, 3
 18875 0000EF96 4801EF                  	add rdi, rbp
 18876 0000EF99 488B6D00                	mov rbp, OLD_RDP
 18877 0000EF9D BE00000000              	mov rsi, 0
 18878                                  .L_tc_recycle_frame_loop_5d33:	 ; start recycle frame loop
 18879 0000EFA2 4883FE04                	cmp rsi, 4
 18880 0000EFA6 7427                    	je .L_tc_recycle_frame_done_5d33
 18881 0000EFA8 B903000000              	mov rcx, 3
 18882 0000EFAD 4829F1                  	sub rcx, rsi
 18883 0000EFB0 48C1E103                	shl rcx, 3
 18884 0000EFB4 4801E1                  	add rcx, rsp ; rcx is the address to move
 18885 0000EFB7 4889F3                  	mov rbx, rsi
 18886 0000EFBA 48C1E303                	shl rbx, 3
 18887 0000EFBE 48F7DB                  	neg rbx
 18888 0000EFC1 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18889 0000EFC4 488B09                  	mov rcx, [rcx]
 18890 0000EFC7 48890B                  	mov [rbx], rcx
 18891 0000EFCA 48FFC6                  	inc rsi
 18892 0000EFCD EBD3                    	jmp .L_tc_recycle_frame_loop_5d33
 18893                                  .L_tc_recycle_frame_done_5d33:	 ; end recycle frame loop
 18894 0000EFCF BB03000000              	mov rbx, 3
 18895 0000EFD4 48C1E303                	shl rbx, 3
 18896 0000EFD8 48F7DB                  	neg rbx
 18897 0000EFDB 4801FB                  	add rbx, rdi
 18898 0000EFDE 4889DC                  	mov rsp, rbx
 18899 0000EFE1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18900 0000EFE5 FFE3                    	jmp rbx
 18901 0000EFE7 C9                      	leave
 18902 0000EFE8 C21800                  	ret 8 * (2 + 1)
 18903                                  .L_lambda_simple_end_4fa5:	; new closure is in rax
 18904                                  	assert_closure(rax)
    65 0000EFEB 803805              <1>  cmp byte [%1], %2
    66 0000EFEE 0F8540510000        <1>  jne L_error_incorrect_type
 18905 0000EFF4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18906 0000EFF8 53                      	push rbx
 18907 0000EFF9 FF7508                  	push RET_ADDR
 18908 0000EFFC 488B7D18                	mov rdi, COUNT
 18909 0000F000 4883C703                	add rdi, 3
 18910 0000F004 48C1E703                	shl rdi, 3
 18911 0000F008 4801EF                  	add rdi, rbp
 18912 0000F00B 488B6D00                	mov rbp, OLD_RDP
 18913 0000F00F BE00000000              	mov rsi, 0
 18914                                  .L_tc_recycle_frame_loop_5d30:	 ; start recycle frame loop
 18915 0000F014 4883FE04                	cmp rsi, 4
 18916 0000F018 7427                    	je .L_tc_recycle_frame_done_5d30
 18917 0000F01A B903000000              	mov rcx, 3
 18918 0000F01F 4829F1                  	sub rcx, rsi
 18919 0000F022 48C1E103                	shl rcx, 3
 18920 0000F026 4801E1                  	add rcx, rsp ; rcx is the address to move
 18921 0000F029 4889F3                  	mov rbx, rsi
 18922 0000F02C 48C1E303                	shl rbx, 3
 18923 0000F030 48F7DB                  	neg rbx
 18924 0000F033 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18925 0000F036 488B09                  	mov rcx, [rcx]
 18926 0000F039 48890B                  	mov [rbx], rcx
 18927 0000F03C 48FFC6                  	inc rsi
 18928 0000F03F EBD3                    	jmp .L_tc_recycle_frame_loop_5d30
 18929                                  .L_tc_recycle_frame_done_5d30:	 ; end recycle frame loop
 18930 0000F041 BB03000000              	mov rbx, 3
 18931 0000F046 48C1E303                	shl rbx, 3
 18932 0000F04A 48F7DB                  	neg rbx
 18933 0000F04D 4801FB                  	add rbx, rdi
 18934 0000F050 4889DC                  	mov rsp, rbx
 18935 0000F053 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18936 0000F057 FFE3                    	jmp rbx
 18937 0000F059 C9                      	leave
 18938 0000F05A C21800                  	ret 8 * (2 + 1)
 18939                                  .L_lambda_simple_end_4fa1:	; new closure is in rax
 18940                                  	assert_closure(rax)
    65 0000F05D 803805              <1>  cmp byte [%1], %2
    66 0000F060 0F85CE500000        <1>  jne L_error_incorrect_type
 18941 0000F066 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18942 0000F06A 53                      	push rbx
 18943 0000F06B FF7508                  	push RET_ADDR
 18944 0000F06E 488B7D18                	mov rdi, COUNT
 18945 0000F072 4883C703                	add rdi, 3
 18946 0000F076 48C1E703                	shl rdi, 3
 18947 0000F07A 4801EF                  	add rdi, rbp
 18948 0000F07D 488B6D00                	mov rbp, OLD_RDP
 18949 0000F081 BE00000000              	mov rsi, 0
 18950                                  .L_tc_recycle_frame_loop_5d2e:	 ; start recycle frame loop
 18951 0000F086 4883FE04                	cmp rsi, 4
 18952 0000F08A 7427                    	je .L_tc_recycle_frame_done_5d2e
 18953 0000F08C B903000000              	mov rcx, 3
 18954 0000F091 4829F1                  	sub rcx, rsi
 18955 0000F094 48C1E103                	shl rcx, 3
 18956 0000F098 4801E1                  	add rcx, rsp ; rcx is the address to move
 18957 0000F09B 4889F3                  	mov rbx, rsi
 18958 0000F09E 48C1E303                	shl rbx, 3
 18959 0000F0A2 48F7DB                  	neg rbx
 18960 0000F0A5 4801FB                  	add rbx, rdi ;rbx is the address to move to
 18961 0000F0A8 488B09                  	mov rcx, [rcx]
 18962 0000F0AB 48890B                  	mov [rbx], rcx
 18963 0000F0AE 48FFC6                  	inc rsi
 18964 0000F0B1 EBD3                    	jmp .L_tc_recycle_frame_loop_5d2e
 18965                                  .L_tc_recycle_frame_done_5d2e:	 ; end recycle frame loop
 18966 0000F0B3 BB03000000              	mov rbx, 3
 18967 0000F0B8 48C1E303                	shl rbx, 3
 18968 0000F0BC 48F7DB                  	neg rbx
 18969 0000F0BF 4801FB                  	add rbx, rdi
 18970 0000F0C2 4889DC                  	mov rsp, rbx
 18971 0000F0C5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18972 0000F0C9 FFE3                    	jmp rbx
 18973 0000F0CB C9                      	leave
 18974 0000F0CC C21800                  	ret 8 * (2 + 1)
 18975                                  .L_lambda_simple_end_4fa0:	; new closure is in rax
 18976 0000F0CF 50                      	push rax
 18977 0000F0D0 6A01                    	push 1
 18978 0000F0D2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18979 0000F0D7 E8D8370000              	call malloc
 18980 0000F0DC 50                      	push rax
 18981 0000F0DD BF00000000              	mov rdi, 8 * 0	; new rib
 18982 0000F0E2 E8CD370000              	call malloc
 18983 0000F0E7 50                      	push rax
 18984 0000F0E8 BF08000000              	mov rdi, 8 * 1	; extended env
 18985 0000F0ED E8C2370000              	call malloc
 18986 0000F0F2 488B7D10                	mov rdi, ENV
 18987 0000F0F6 BE00000000              	mov rsi, 0
 18988 0000F0FB BA01000000              	mov rdx, 1
 18989                                  .L_lambda_simple_env_loop_4fa8:	; ext_env[i + 1] <-- env[i]
 18990 0000F100 4883FE00                	cmp rsi, 0
 18991 0000F104 7410                    	je .L_lambda_simple_env_end_4fa8
 18992 0000F106 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 18993 0000F10A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18994 0000F10E 48FFC6                  	inc rsi
 18995 0000F111 48FFC2                  	inc rdx
 18996 0000F114 EBEA                    	jmp .L_lambda_simple_env_loop_4fa8
 18997                                  .L_lambda_simple_env_end_4fa8:
 18998 0000F116 5B                      	pop rbx
 18999 0000F117 BE00000000              	mov rsi, 0
 19000                                  .L_lambda_simple_params_loop_4fa8:	; copy params
 19001 0000F11C 4883FE00                	cmp rsi, 0
 19002 0000F120 740E                    	je .L_lambda_simple_params_end_4fa8
 19003 0000F122 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19004 0000F127 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19005 0000F12B 48FFC6                  	inc rsi
 19006 0000F12E EBEC                    	jmp .L_lambda_simple_params_loop_4fa8
 19007                                  .L_lambda_simple_params_end_4fa8:
 19008 0000F130 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19009 0000F133 4889C3                  	mov rbx, rax
 19010 0000F136 58                      	pop rax
 19011 0000F137 C60005                  	mov byte [rax], T_closure
 19012 0000F13A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19013 0000F13E 48C74009[4BF10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa8
 19014 0000F146 E985000000              	jmp .L_lambda_simple_end_4fa8
 19015                                  .L_lambda_simple_code_4fa8:	; lambda-simple body
 19016 0000F14B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19017 0000F151 740B                    	je .L_lambda_simple_arity_check_ok_4fa8
 19018 0000F153 FF742410                	push qword [rsp + 8 * 2]
 19019 0000F157 6A01                    	push 1
 19020 0000F159 E90F370000              	jmp L_error_incorrect_arity_simple
 19021                                  .L_lambda_simple_arity_check_ok_4fa8:
 19022 0000F15E C8000000                	enter 0, 0
 19023 0000F162 488B0425[70030000]      	mov rax, qword [free_var_110]
 19024 0000F16A 50                      	push rax
 19025 0000F16B 6A01                    	push 1
 19026 0000F16D 488B4520                	mov rax, PARAM(0)
 19027                                  	assert_closure(rax)
    65 0000F171 803805              <1>  cmp byte [%1], %2
    66 0000F174 0F85BA4F0000        <1>  jne L_error_incorrect_type
 19028 0000F17A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19029 0000F17E 53                      	push rbx
 19030 0000F17F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19031 0000F183 FFD3                    	call rbx
 19032 0000F185 48890425[F0030000]      	mov qword [free_var_126], rax
 19033 0000F18D 48B8-                   	mov rax, sob_void
 19033 0000F18F [0000000000000000] 
 19034                                  
 19035 0000F197 488B0425[A8030000]      	mov rax, qword [free_var_117]
 19036 0000F19F 50                      	push rax
 19037 0000F1A0 6A01                    	push 1
 19038 0000F1A2 488B4520                	mov rax, PARAM(0)
 19039                                  	assert_closure(rax)
    65 0000F1A6 803805              <1>  cmp byte [%1], %2
    66 0000F1A9 0F85854F0000        <1>  jne L_error_incorrect_type
 19040 0000F1AF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19041 0000F1B3 53                      	push rbx
 19042 0000F1B4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19043 0000F1B8 FFD3                    	call rbx
 19044 0000F1BA 48890425[18040000]      	mov qword [free_var_131], rax
 19045 0000F1C2 48B8-                   	mov rax, sob_void
 19045 0000F1C4 [0000000000000000] 
 19046 0000F1CC C9                      	leave
 19047 0000F1CD C21800                  	ret 8 * (2 + 1)
 19048                                  .L_lambda_simple_end_4fa8:	; new closure is in rax
 19049                                  	assert_closure(rax)
    65 0000F1D0 803805              <1>  cmp byte [%1], %2
    66 0000F1D3 0F855B4F0000        <1>  jne L_error_incorrect_type
 19050 0000F1D9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19051 0000F1DD 53                      	push rbx
 19052 0000F1DE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19053 0000F1E2 FFD3                    	call rbx
 19054                                  
 19055 0000F1E4 4889C7                  	mov rdi, rax
 19056 0000F1E7 E8D9360000              	call print_sexpr_if_not_void
 19057                                  
 19058 0000F1EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19059 0000F1F1 E8BE360000              	call malloc
 19060 0000F1F6 50                      	push rax
 19061 0000F1F7 BF00000000              	mov rdi, 8 * 0	; new rib
 19062 0000F1FC E8B3360000              	call malloc
 19063 0000F201 50                      	push rax
 19064 0000F202 BF08000000              	mov rdi, 8 * 1	; extended env
 19065 0000F207 E8A8360000              	call malloc
 19066 0000F20C 488B7D10                	mov rdi, ENV
 19067 0000F210 BE00000000              	mov rsi, 0
 19068 0000F215 BA01000000              	mov rdx, 1
 19069                                  .L_lambda_simple_env_loop_4fa9:	; ext_env[i + 1] <-- env[i]
 19070 0000F21A 4883FE00                	cmp rsi, 0
 19071 0000F21E 7410                    	je .L_lambda_simple_env_end_4fa9
 19072 0000F220 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 19073 0000F224 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19074 0000F228 48FFC6                  	inc rsi
 19075 0000F22B 48FFC2                  	inc rdx
 19076 0000F22E EBEA                    	jmp .L_lambda_simple_env_loop_4fa9
 19077                                  .L_lambda_simple_env_end_4fa9:
 19078 0000F230 5B                      	pop rbx
 19079 0000F231 BE00000000              	mov rsi, 0
 19080                                  .L_lambda_simple_params_loop_4fa9:	; copy params
 19081 0000F236 4883FE00                	cmp rsi, 0
 19082 0000F23A 740E                    	je .L_lambda_simple_params_end_4fa9
 19083 0000F23C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19084 0000F241 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19085 0000F245 48FFC6                  	inc rsi
 19086 0000F248 EBEC                    	jmp .L_lambda_simple_params_loop_4fa9
 19087                                  .L_lambda_simple_params_end_4fa9:
 19088 0000F24A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19089 0000F24D 4889C3                  	mov rbx, rax
 19090 0000F250 58                      	pop rax
 19091 0000F251 C60005                  	mov byte [rax], T_closure
 19092 0000F254 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19093 0000F258 48C74009[65F20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fa9
 19094 0000F260 E917010000              	jmp .L_lambda_simple_end_4fa9
 19095                                  .L_lambda_simple_code_4fa9:	; lambda-simple body
 19096 0000F265 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19097 0000F26B 740B                    	je .L_lambda_simple_arity_check_ok_4fa9
 19098 0000F26D FF742410                	push qword [rsp + 8 * 2]
 19099 0000F271 6A01                    	push 1
 19100 0000F273 E9F5350000              	jmp L_error_incorrect_arity_simple
 19101                                  .L_lambda_simple_arity_check_ok_4fa9:
 19102 0000F278 C8000000                	enter 0, 0
 19103 0000F27C 488B4520                	mov rax, PARAM(0)
 19104 0000F280 50                      	push rax
 19105 0000F281 6A01                    	push 1
 19106 0000F283 488B0425[00000000]      	mov rax, qword [free_var_0]
 19107                                  	assert_closure(rax)
    65 0000F28B 803805              <1>  cmp byte [%1], %2
    66 0000F28E 0F85A04E0000        <1>  jne L_error_incorrect_type
 19108 0000F294 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19109 0000F298 53                      	push rbx
 19110 0000F299 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19111 0000F29D FFD3                    	call rbx
 19112 0000F29F 483D[02000000]          	cmp rax, sob_boolean_false
 19113 0000F2A5 740D                    	je .L_if_else_56c2
 19114 0000F2A7 488D0425[20000000]      	lea rax, [32 + L_constants]
 19115 0000F2AF E9C4000000              	jmp .L_if_end_56c2
 19116                                  	.L_if_else_56c2:
 19117 0000F2B4 488B4520                	mov rax, PARAM(0)
 19118 0000F2B8 50                      	push rax
 19119 0000F2B9 6A01                    	push 1
 19120 0000F2BB 488B0425[88000000]      	mov rax, qword [free_var_17]
 19121                                  	assert_closure(rax)
    65 0000F2C3 803805              <1>  cmp byte [%1], %2
    66 0000F2C6 0F85684E0000        <1>  jne L_error_incorrect_type
 19122 0000F2CC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19123 0000F2D0 53                      	push rbx
 19124 0000F2D1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19125 0000F2D5 FFD3                    	call rbx
 19126 0000F2D7 50                      	push rax
 19127 0000F2D8 6A01                    	push 1
 19128 0000F2DA 488B0425[30040000]      	mov rax, qword [free_var_134]
 19129                                  	assert_closure(rax)
    65 0000F2E2 803805              <1>  cmp byte [%1], %2
    66 0000F2E5 0F85494E0000        <1>  jne L_error_incorrect_type
 19130 0000F2EB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19131 0000F2EF 53                      	push rbx
 19132 0000F2F0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19133 0000F2F4 FFD3                    	call rbx
 19134 0000F2F6 50                      	push rax
 19135 0000F2F7 488D0425[80000000]      	lea rax, [128 + L_constants]
 19136 0000F2FF 50                      	push rax
 19137 0000F300 6A02                    	push 2
 19138 0000F302 488B0425[08030000]      	mov rax, qword [free_var_97]
 19139                                  	assert_closure(rax)
    65 0000F30A 803805              <1>  cmp byte [%1], %2
    66 0000F30D 0F85214E0000        <1>  jne L_error_incorrect_type
 19140 0000F313 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19141 0000F317 53                      	push rbx
 19142 0000F318 FF7508                  	push RET_ADDR
 19143 0000F31B 488B7D18                	mov rdi, COUNT
 19144 0000F31F 4883C703                	add rdi, 3
 19145 0000F323 48C1E703                	shl rdi, 3
 19146 0000F327 4801EF                  	add rdi, rbp
 19147 0000F32A 488B6D00                	mov rbp, OLD_RDP
 19148 0000F32E BE00000000              	mov rsi, 0
 19149                                  .L_tc_recycle_frame_loop_5d36:	 ; start recycle frame loop
 19150 0000F333 4883FE05                	cmp rsi, 5
 19151 0000F337 7427                    	je .L_tc_recycle_frame_done_5d36
 19152 0000F339 B904000000              	mov rcx, 4
 19153 0000F33E 4829F1                  	sub rcx, rsi
 19154 0000F341 48C1E103                	shl rcx, 3
 19155 0000F345 4801E1                  	add rcx, rsp ; rcx is the address to move
 19156 0000F348 4889F3                  	mov rbx, rsi
 19157 0000F34B 48C1E303                	shl rbx, 3
 19158 0000F34F 48F7DB                  	neg rbx
 19159 0000F352 4801FB                  	add rbx, rdi ;rbx is the address to move to
 19160 0000F355 488B09                  	mov rcx, [rcx]
 19161 0000F358 48890B                  	mov [rbx], rcx
 19162 0000F35B 48FFC6                  	inc rsi
 19163 0000F35E EBD3                    	jmp .L_tc_recycle_frame_loop_5d36
 19164                                  .L_tc_recycle_frame_done_5d36:	 ; end recycle frame loop
 19165 0000F360 BB04000000              	mov rbx, 4
 19166 0000F365 48C1E303                	shl rbx, 3
 19167 0000F369 48F7DB                  	neg rbx
 19168 0000F36C 4801FB                  	add rbx, rdi
 19169 0000F36F 4889DC                  	mov rsp, rbx
 19170 0000F372 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19171 0000F376 FFE3                    	jmp rbx
 19172                                  	.L_if_end_56c2:
 19173 0000F378 C9                      	leave
 19174 0000F379 C21800                  	ret 8 * (2 + 1)
 19175                                  .L_lambda_simple_end_4fa9:	; new closure is in rax
 19176 0000F37C 48890425[30040000]      	mov qword [free_var_134], rax
 19177 0000F384 48B8-                   	mov rax, sob_void
 19177 0000F386 [0000000000000000] 
 19178                                  
 19179 0000F38E 4889C7                  	mov rdi, rax
 19180 0000F391 E82F350000              	call print_sexpr_if_not_void
 19181                                  
 19182 0000F396 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19183 0000F39B E814350000              	call malloc
 19184 0000F3A0 50                      	push rax
 19185 0000F3A1 BF00000000              	mov rdi, 8 * 0	; new rib
 19186 0000F3A6 E809350000              	call malloc
 19187 0000F3AB 50                      	push rax
 19188 0000F3AC BF08000000              	mov rdi, 8 * 1	; extended env
 19189 0000F3B1 E8FE340000              	call malloc
 19190 0000F3B6 488B7D10                	mov rdi, ENV
 19191 0000F3BA BE00000000              	mov rsi, 0
 19192 0000F3BF BA01000000              	mov rdx, 1
 19193                                  .L_lambda_simple_env_loop_4faa:	; ext_env[i + 1] <-- env[i]
 19194 0000F3C4 4883FE00                	cmp rsi, 0
 19195 0000F3C8 7410                    	je .L_lambda_simple_env_end_4faa
 19196 0000F3CA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 19197 0000F3CE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19198 0000F3D2 48FFC6                  	inc rsi
 19199 0000F3D5 48FFC2                  	inc rdx
 19200 0000F3D8 EBEA                    	jmp .L_lambda_simple_env_loop_4faa
 19201                                  .L_lambda_simple_env_end_4faa:
 19202 0000F3DA 5B                      	pop rbx
 19203 0000F3DB BE00000000              	mov rsi, 0
 19204                                  .L_lambda_simple_params_loop_4faa:	; copy params
 19205 0000F3E0 4883FE00                	cmp rsi, 0
 19206 0000F3E4 740E                    	je .L_lambda_simple_params_end_4faa
 19207 0000F3E6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19208 0000F3EB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19209 0000F3EF 48FFC6                  	inc rsi
 19210 0000F3F2 EBEC                    	jmp .L_lambda_simple_params_loop_4faa
 19211                                  .L_lambda_simple_params_end_4faa:
 19212 0000F3F4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19213 0000F3F7 4889C3                  	mov rbx, rax
 19214 0000F3FA 58                      	pop rax
 19215 0000F3FB C60005                  	mov byte [rax], T_closure
 19216 0000F3FE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19217 0000F402 48C74009[0FF40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4faa
 19218 0000F40A E91F010000              	jmp .L_lambda_simple_end_4faa
 19219                                  .L_lambda_simple_code_4faa:	; lambda-simple body
 19220 0000F40F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19221 0000F415 740B                    	je .L_lambda_simple_arity_check_ok_4faa
 19222 0000F417 FF742410                	push qword [rsp + 8 * 2]
 19223 0000F41B 6A01                    	push 1
 19224 0000F41D E94B340000              	jmp L_error_incorrect_arity_simple
 19225                                  .L_lambda_simple_arity_check_ok_4faa:
 19226 0000F422 C8000000                	enter 0, 0
 19227 0000F426 488B4520                	mov rax, PARAM(0)
 19228 0000F42A 50                      	push rax
 19229 0000F42B 6A01                    	push 1
 19230 0000F42D 488B0425[00000000]      	mov rax, qword [free_var_0]
 19231                                  	assert_closure(rax)
    65 0000F435 803805              <1>  cmp byte [%1], %2
    66 0000F438 0F85F64C0000        <1>  jne L_error_incorrect_type
 19232 0000F43E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19233 0000F442 53                      	push rbx
 19234 0000F443 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19235 0000F447 FFD3                    	call rbx
 19236 0000F449 483D[02000000]          	cmp rax, sob_boolean_false
 19237 0000F44F 0F85D5000000            	jne .L_or_end_061f
 19238 0000F455 488B4520                	mov rax, PARAM(0)
 19239 0000F459 50                      	push rax
 19240 0000F45A 6A01                    	push 1
 19241 0000F45C 488B0425[08000000]      	mov rax, qword [free_var_1]
 19242                                  	assert_closure(rax)
    65 0000F464 803805              <1>  cmp byte [%1], %2
    66 0000F467 0F85C74C0000        <1>  jne L_error_incorrect_type
 19243 0000F46D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19244 0000F471 53                      	push rbx
 19245 0000F472 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19246 0000F476 FFD3                    	call rbx
 19247 0000F478 483D[02000000]          	cmp rax, sob_boolean_false
 19248 0000F47E 0F849E000000            	je .L_if_else_56c3
 19249 0000F484 488B4520                	mov rax, PARAM(0)
 19250 0000F488 50                      	push rax
 19251 0000F489 6A01                    	push 1
 19252 0000F48B 488B0425[88000000]      	mov rax, qword [free_var_17]
 19253                                  	assert_closure(rax)
    65 0000F493 803805              <1>  cmp byte [%1], %2
    66 0000F496 0F85984C0000        <1>  jne L_error_incorrect_type
 19254 0000F49C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19255 0000F4A0 53                      	push rbx
 19256 0000F4A1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19257 0000F4A5 FFD3                    	call rbx
 19258 0000F4A7 50                      	push rax
 19259 0000F4A8 6A01                    	push 1
 19260 0000F4AA 488B0425[A0020000]      	mov rax, qword [free_var_84]
 19261                                  	assert_closure(rax)
    65 0000F4B2 803805              <1>  cmp byte [%1], %2
    66 0000F4B5 0F85794C0000        <1>  jne L_error_incorrect_type
 19262 0000F4BB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19263 0000F4BF 53                      	push rbx
 19264 0000F4C0 FF7508                  	push RET_ADDR
 19265 0000F4C3 488B7D18                	mov rdi, COUNT
 19266 0000F4C7 4883C703                	add rdi, 3
 19267 0000F4CB 48C1E703                	shl rdi, 3
 19268 0000F4CF 4801EF                  	add rdi, rbp
 19269 0000F4D2 488B6D00                	mov rbp, OLD_RDP
 19270 0000F4D6 BE00000000              	mov rsi, 0
 19271                                  .L_tc_recycle_frame_loop_5d37:	 ; start recycle frame loop
 19272 0000F4DB 4883FE04                	cmp rsi, 4
 19273 0000F4DF 7427                    	je .L_tc_recycle_frame_done_5d37
 19274 0000F4E1 B903000000              	mov rcx, 3
 19275 0000F4E6 4829F1                  	sub rcx, rsi
 19276 0000F4E9 48C1E103                	shl rcx, 3
 19277 0000F4ED 4801E1                  	add rcx, rsp ; rcx is the address to move
 19278 0000F4F0 4889F3                  	mov rbx, rsi
 19279 0000F4F3 48C1E303                	shl rbx, 3
 19280 0000F4F7 48F7DB                  	neg rbx
 19281 0000F4FA 4801FB                  	add rbx, rdi ;rbx is the address to move to
 19282 0000F4FD 488B09                  	mov rcx, [rcx]
 19283 0000F500 48890B                  	mov [rbx], rcx
 19284 0000F503 48FFC6                  	inc rsi
 19285 0000F506 EBD3                    	jmp .L_tc_recycle_frame_loop_5d37
 19286                                  .L_tc_recycle_frame_done_5d37:	 ; end recycle frame loop
 19287 0000F508 BB03000000              	mov rbx, 3
 19288 0000F50D 48C1E303                	shl rbx, 3
 19289 0000F511 48F7DB                  	neg rbx
 19290 0000F514 4801FB                  	add rbx, rdi
 19291 0000F517 4889DC                  	mov rsp, rbx
 19292 0000F51A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19293 0000F51E FFE3                    	jmp rbx
 19294 0000F520 EB08                    	jmp .L_if_end_56c3
 19295                                  	.L_if_else_56c3:
 19296 0000F522 488D0425[02000000]      	lea rax, [2 + L_constants]
 19297                                  	.L_if_end_56c3:
 19298                                  .L_or_end_061f:
 19299 0000F52A C9                      	leave
 19300 0000F52B C21800                  	ret 8 * (2 + 1)
 19301                                  .L_lambda_simple_end_4faa:	; new closure is in rax
 19302 0000F52E 48890425[A0020000]      	mov qword [free_var_84], rax
 19303 0000F536 48B8-                   	mov rax, sob_void
 19303 0000F538 [0000000000000000] 
 19304                                  
 19305 0000F540 4889C7                  	mov rdi, rax
 19306 0000F543 E87D330000              	call print_sexpr_if_not_void
 19307                                  
 19308 0000F548 488B0425[98010000]      	mov rax, qword [free_var_51]
 19309 0000F550 50                      	push rax
 19310 0000F551 6A01                    	push 1
 19311 0000F553 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19312 0000F558 E857330000              	call malloc
 19313 0000F55D 50                      	push rax
 19314 0000F55E BF00000000              	mov rdi, 8 * 0	; new rib
 19315 0000F563 E84C330000              	call malloc
 19316 0000F568 50                      	push rax
 19317 0000F569 BF08000000              	mov rdi, 8 * 1	; extended env
 19318 0000F56E E841330000              	call malloc
 19319 0000F573 488B7D10                	mov rdi, ENV
 19320 0000F577 BE00000000              	mov rsi, 0
 19321 0000F57C BA01000000              	mov rdx, 1
 19322                                  .L_lambda_simple_env_loop_4fab:	; ext_env[i + 1] <-- env[i]
 19323 0000F581 4883FE00                	cmp rsi, 0
 19324 0000F585 7410                    	je .L_lambda_simple_env_end_4fab
 19325 0000F587 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 19326 0000F58B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19327 0000F58F 48FFC6                  	inc rsi
 19328 0000F592 48FFC2                  	inc rdx
 19329 0000F595 EBEA                    	jmp .L_lambda_simple_env_loop_4fab
 19330                                  .L_lambda_simple_env_end_4fab:
 19331 0000F597 5B                      	pop rbx
 19332 0000F598 BE00000000              	mov rsi, 0
 19333                                  .L_lambda_simple_params_loop_4fab:	; copy params
 19334 0000F59D 4883FE00                	cmp rsi, 0
 19335 0000F5A1 740E                    	je .L_lambda_simple_params_end_4fab
 19336 0000F5A3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19337 0000F5A8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19338 0000F5AC 48FFC6                  	inc rsi
 19339 0000F5AF EBEC                    	jmp .L_lambda_simple_params_loop_4fab
 19340                                  .L_lambda_simple_params_end_4fab:
 19341 0000F5B1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19342 0000F5B4 4889C3                  	mov rbx, rax
 19343 0000F5B7 58                      	pop rax
 19344 0000F5B8 C60005                  	mov byte [rax], T_closure
 19345 0000F5BB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19346 0000F5BF 48C74009[CCF50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fab
 19347 0000F5C7 E92D040000              	jmp .L_lambda_simple_end_4fab
 19348                                  .L_lambda_simple_code_4fab:	; lambda-simple body
 19349 0000F5CC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19350 0000F5D2 740B                    	je .L_lambda_simple_arity_check_ok_4fab
 19351 0000F5D4 FF742410                	push qword [rsp + 8 * 2]
 19352 0000F5D8 6A01                    	push 1
 19353 0000F5DA E98E320000              	jmp L_error_incorrect_arity_simple
 19354                                  .L_lambda_simple_arity_check_ok_4fab:
 19355 0000F5DF C8000000                	enter 0, 0
 19356 0000F5E3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19357 0000F5E8 E8C7320000              	call malloc
 19358 0000F5ED 50                      	push rax
 19359 0000F5EE BF08000000              	mov rdi, 8 * 1	; new rib
 19360 0000F5F3 E8BC320000              	call malloc
 19361 0000F5F8 50                      	push rax
 19362 0000F5F9 BF10000000              	mov rdi, 8 * 2	; extended env
 19363 0000F5FE E8B1320000              	call malloc
 19364 0000F603 488B7D10                	mov rdi, ENV
 19365 0000F607 BE00000000              	mov rsi, 0
 19366 0000F60C BA01000000              	mov rdx, 1
 19367                                  .L_lambda_opt_env_loop_0c99:	; ext_env[i + 1] <-- env[i]
 19368 0000F611 4883FE01                	cmp rsi, 1
 19369 0000F615 7410                    	je .L_lambda_opt_env_end_0c99
 19370 0000F617 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 19371 0000F61B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19372 0000F61F 48FFC6                  	inc rsi
 19373 0000F622 48FFC2                  	inc rdx
 19374 0000F625 EBEA                    	jmp .L_lambda_opt_env_loop_0c99
 19375                                  .L_lambda_opt_env_end_0c99:
 19376 0000F627 5B                      	pop rbx
 19377 0000F628 BE00000000              	mov rsi, 0
 19378                                  .L_lambda_opt_params_loop_0c99:	; copy params
 19379 0000F62D 4883FE01                	cmp rsi, 1
 19380 0000F631 740E                    	je .L_lambda_opt_params_end_0c99
 19381 0000F633 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19382 0000F638 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19383 0000F63C 48FFC6                  	inc rsi
 19384 0000F63F EBEC                    	jmp .L_lambda_opt_params_loop_0c99
 19385                                  .L_lambda_opt_params_end_0c99:
 19386 0000F641 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19387 0000F644 4889C3                  	mov rbx, rax
 19388 0000F647 58                      	pop rax
 19389 0000F648 C60005                  	mov byte [rax], T_closure
 19390 0000F64B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19391 0000F64F 48C74009[5CF60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c99
 19392 0000F657 E999030000              	jmp .L_lambda_opt_end_0c99
 19393                                  .L_lambda_opt_code_0c99:	; lambda-opt body
 19394 0000F65C 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 19395 0000F661 4889FB                  	mov rbx, rdi
 19396 0000F664 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 19397 0000F668 4883FB00                	cmp rbx, 0
 19398 0000F66C 7F45                    	jg .L_lambda_opt_arity_check_more_0c99
 19399                                  .L_lambda_opt_arity_check_exact_0c99:	 ; if params in opt is exact
 19400 0000F66E 4883EC08                	sub rsp, 8
 19401 0000F672 BE00000000              	mov rsi, 0 ; index
 19402                                  .L_lambda_opt_stack_enlarge_loop_0c99:	 ; stack loop enlarge start
 19403 0000F677 4883FE04                	cmp rsi, 4
 19404 0000F67B 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c99
 19405 0000F67D 4889F7                  	mov rdi, rsi
 19406 0000F680 48FFC7                  	inc rdi
 19407 0000F683 48C1E703                	shl rdi, 3
 19408 0000F687 4801E7                  	add rdi, rsp
 19409 0000F68A 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 19410 0000F68D 4883EB08                	sub rbx, 8
 19411 0000F691 488B3F                  	mov rdi, [rdi]
 19412 0000F694 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 19413 0000F697 48FFC6                  	inc rsi
 19414 0000F69A EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c99
 19415                                  .L_lambda_opt_stack_enlarge_loop_exit_0c99:	 ; end of stack enlarge loop
 19416 0000F69C 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 19416 0000F6A1 [01000000]         
 19417 0000F6A5 48C744241002000000      	mov qword [rsp + 2*8], 2
 19418 0000F6AE E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c99
 19419                                  .L_lambda_opt_arity_check_more_0c99:	 ; if params in opt is more
 19420 0000F6B3 48B8-                   	mov rax, sob_nil
 19420 0000F6B5 [0100000000000000] 
 19421 0000F6BD 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 19422 0000F6C0 48FFCE                  	dec rsi
 19423                                  .L_lambda_opt_list_create_loop_0c99:	; start of list creation loop
 19424 0000F6C3 4883FEFF                	cmp rsi, -1
 19425 0000F6C7 7422                    	je .L_lambda_opt_list_create_loop_exit_0c99
 19426 0000F6C9 488D4E04                	lea rcx, [rsi + (3 + 1)]
 19427 0000F6CD 48C1E103                	shl rcx, 3
 19428 0000F6D1 4801E1                  	add rcx, rsp
 19429 0000F6D4 488B09                  	mov rcx, [rcx]
 19430 0000F6D7 56                      	push rsi ; save params
 19431 0000F6D8 53                      	push rbx
 19432                                  
 19433 0000F6D9 50                      	push rax ; cdr
 19434 0000F6DA 51                      	push rcx ; car
 19435 0000F6DB 6A02                    	push qword 2 ; push num of args
 19436 0000F6DD 6A01                    	push qword 1 ; push garbage as env
 19437 0000F6DF E8573B0000              	call L_code_ptr_cons
 19438                                  
 19439 0000F6E4 5B                      	pop rbx ; restore params
 19440 0000F6E5 5E                      	pop rsi
 19441 0000F6E6 48FFCE                  	dec rsi
 19442 0000F6E9 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c99
 19443                                  .L_lambda_opt_list_create_loop_exit_0c99:	; end of list creation loop
 19444 0000F6EB 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 19445 0000F6F0 4883C302                	add rbx, 2
 19446 0000F6F4 4889DF                  	mov rdi, rbx
 19447 0000F6F7 48C1E703                	shl rdi,3
 19448 0000F6FB 4801E7                  	add rdi, rsp
 19449 0000F6FE 488907                  	mov [rdi], rax
 19450 0000F701 BE00000000              	mov rsi, 0 ;index
 19451                                  .L_lambda_opt_stack_shrink_loop_0c99:	; start of stack shrink loop
 19452 0000F706 4883FE04                	cmp rsi, 4
 19453 0000F70A 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c99
 19454 0000F70C BF03000000              	mov rdi, 3
 19455 0000F711 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 19456 0000F714 4889D9                  	mov rcx, rbx
 19457 0000F717 4829F1                  	sub rcx, rsi
 19458 0000F71A 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 19459 0000F71D 4889FA                  	mov rdx, rdi
 19460 0000F720 48C1E203                	shl rdx, 3
 19461 0000F724 4801E2                  	add rdx, rsp
 19462 0000F727 48C1E103                	shl rcx, 3
 19463 0000F72B 4801E1                  	add rcx, rsp
 19464 0000F72E 488B12                  	mov rdx, [rdx]
 19465 0000F731 488911                  	mov [rcx], rdx
 19466 0000F734 48FFC6                  	inc rsi
 19467 0000F737 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c99
 19468                                  .L_lambda_opt_stack_shrink_loop_exit_0c99:	; end of stack shrink loop
 19469 0000F739 4883EB02                	sub rbx, 2 ; rbx has number of args
 19470 0000F73D 4883EB02                	sub rbx, 2
 19471 0000F741 48C1E303                	shl rbx, 3
 19472 0000F745 4801DC                  	add rsp, rbx
 19473 0000F748 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 19474                                  .L_lambda_opt_stack_adjusted_0c99:
 19475 0000F751 C8000000                	enter 0, 0
 19476 0000F755 488B4528                	mov rax, PARAM(1)
 19477 0000F759 50                      	push rax
 19478 0000F75A 6A01                    	push 1
 19479 0000F75C 488B0425[00000000]      	mov rax, qword [free_var_0]
 19480                                  	assert_closure(rax)
    65 0000F764 803805              <1>  cmp byte [%1], %2
    66 0000F767 0F85C7490000        <1>  jne L_error_incorrect_type
 19481 0000F76D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19482 0000F771 53                      	push rbx
 19483 0000F772 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19484 0000F776 FFD3                    	call rbx
 19485 0000F778 483D[02000000]          	cmp rax, sob_boolean_false
 19486 0000F77E 740D                    	je .L_if_else_56c4
 19487 0000F780 488D0425[00000000]      	lea rax, [0 + L_constants]
 19488 0000F788 E9D4000000              	jmp .L_if_end_56c4
 19489                                  	.L_if_else_56c4:
 19490 0000F78D 488B4528                	mov rax, PARAM(1)
 19491 0000F791 50                      	push rax
 19492 0000F792 6A01                    	push 1
 19493 0000F794 488B0425[08000000]      	mov rax, qword [free_var_1]
 19494                                  	assert_closure(rax)
    65 0000F79C 803805              <1>  cmp byte [%1], %2
    66 0000F79F 0F858F490000        <1>  jne L_error_incorrect_type
 19495 0000F7A5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19496 0000F7A9 53                      	push rbx
 19497 0000F7AA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19498 0000F7AE FFD3                    	call rbx
 19499 0000F7B0 483D[02000000]          	cmp rax, sob_boolean_false
 19500 0000F7B6 7444                    	je .L_if_else_56c6
 19501 0000F7B8 488B4528                	mov rax, PARAM(1)
 19502 0000F7BC 50                      	push rax
 19503 0000F7BD 6A01                    	push 1
 19504 0000F7BF 488B0425[88000000]      	mov rax, qword [free_var_17]
 19505                                  	assert_closure(rax)
    65 0000F7C7 803805              <1>  cmp byte [%1], %2
    66 0000F7CA 0F8564490000        <1>  jne L_error_incorrect_type
 19506 0000F7D0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19507 0000F7D4 53                      	push rbx
 19508 0000F7D5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19509 0000F7D9 FFD3                    	call rbx
 19510 0000F7DB 50                      	push rax
 19511 0000F7DC 6A01                    	push 1
 19512 0000F7DE 488B0425[00000000]      	mov rax, qword [free_var_0]
 19513                                  	assert_closure(rax)
    65 0000F7E6 803805              <1>  cmp byte [%1], %2
    66 0000F7E9 0F8545490000        <1>  jne L_error_incorrect_type
 19514 0000F7EF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19515 0000F7F3 53                      	push rbx
 19516 0000F7F4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19517 0000F7F8 FFD3                    	call rbx
 19518 0000F7FA EB08                    	jmp .L_if_end_56c6
 19519                                  	.L_if_else_56c6:
 19520 0000F7FC 488D0425[02000000]      	lea rax, [2 + L_constants]
 19521                                  	.L_if_end_56c6:
 19522 0000F804 483D[02000000]          	cmp rax, sob_boolean_false
 19523 0000F80A 7425                    	je .L_if_else_56c5
 19524 0000F80C 488B4528                	mov rax, PARAM(1)
 19525 0000F810 50                      	push rax
 19526 0000F811 6A01                    	push 1
 19527 0000F813 488B0425[80000000]      	mov rax, qword [free_var_16]
 19528                                  	assert_closure(rax)
    65 0000F81B 803805              <1>  cmp byte [%1], %2
    66 0000F81E 0F8510490000        <1>  jne L_error_incorrect_type
 19529 0000F824 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19530 0000F828 53                      	push rbx
 19531 0000F829 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19532 0000F82D FFD3                    	call rbx
 19533 0000F82F EB30                    	jmp .L_if_end_56c5
 19534                                  	.L_if_else_56c5:
 19535 0000F831 488D0425[7B010000]      	lea rax, [379 + L_constants]
 19536 0000F839 50                      	push rax
 19537 0000F83A 488D0425[72010000]      	lea rax, [370 + L_constants]
 19538 0000F842 50                      	push rax
 19539 0000F843 6A02                    	push 2
 19540 0000F845 488B0425[30010000]      	mov rax, qword [free_var_38]
 19541                                  	assert_closure(rax)
    65 0000F84D 803805              <1>  cmp byte [%1], %2
    66 0000F850 0F85DE480000        <1>  jne L_error_incorrect_type
 19542 0000F856 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19543 0000F85A 53                      	push rbx
 19544 0000F85B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19545 0000F85F FFD3                    	call rbx
 19546                                  	.L_if_end_56c5:
 19547                                  	.L_if_end_56c4:
 19548 0000F861 50                      	push rax
 19549 0000F862 6A01                    	push 1
 19550 0000F864 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19551 0000F869 E846300000              	call malloc
 19552 0000F86E 50                      	push rax
 19553 0000F86F BF10000000              	mov rdi, 8 * 2	; new rib
 19554 0000F874 E83B300000              	call malloc
 19555 0000F879 50                      	push rax
 19556 0000F87A BF18000000              	mov rdi, 8 * 3	; extended env
 19557 0000F87F E830300000              	call malloc
 19558 0000F884 488B7D10                	mov rdi, ENV
 19559 0000F888 BE00000000              	mov rsi, 0
 19560 0000F88D BA01000000              	mov rdx, 1
 19561                                  .L_lambda_simple_env_loop_4fac:	; ext_env[i + 1] <-- env[i]
 19562 0000F892 4883FE02                	cmp rsi, 2
 19563 0000F896 7410                    	je .L_lambda_simple_env_end_4fac
 19564 0000F898 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 19565 0000F89C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19566 0000F8A0 48FFC6                  	inc rsi
 19567 0000F8A3 48FFC2                  	inc rdx
 19568 0000F8A6 EBEA                    	jmp .L_lambda_simple_env_loop_4fac
 19569                                  .L_lambda_simple_env_end_4fac:
 19570 0000F8A8 5B                      	pop rbx
 19571 0000F8A9 BE00000000              	mov rsi, 0
 19572                                  .L_lambda_simple_params_loop_4fac:	; copy params
 19573 0000F8AE 4883FE02                	cmp rsi, 2
 19574 0000F8B2 740E                    	je .L_lambda_simple_params_end_4fac
 19575 0000F8B4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19576 0000F8B9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19577 0000F8BD 48FFC6                  	inc rsi
 19578 0000F8C0 EBEC                    	jmp .L_lambda_simple_params_loop_4fac
 19579                                  .L_lambda_simple_params_end_4fac:
 19580 0000F8C2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19581 0000F8C5 4889C3                  	mov rbx, rax
 19582 0000F8C8 58                      	pop rax
 19583 0000F8C9 C60005                  	mov byte [rax], T_closure
 19584 0000F8CC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19585 0000F8D0 48C74009[DDF80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fac
 19586 0000F8D8 E9A6000000              	jmp .L_lambda_simple_end_4fac
 19587                                  .L_lambda_simple_code_4fac:	; lambda-simple body
 19588 0000F8DD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19589 0000F8E3 740B                    	je .L_lambda_simple_arity_check_ok_4fac
 19590 0000F8E5 FF742410                	push qword [rsp + 8 * 2]
 19591 0000F8E9 6A01                    	push 1
 19592 0000F8EB E97D2F0000              	jmp L_error_incorrect_arity_simple
 19593                                  .L_lambda_simple_arity_check_ok_4fac:
 19594 0000F8F0 C8000000                	enter 0, 0
 19595 0000F8F4 488B4520                	mov rax, PARAM(0)
 19596 0000F8F8 50                      	push rax
 19597 0000F8F9 488B4510                	mov rax, qword [rbp + 8*2]
 19598 0000F8FD 488B00                  	mov rax, qword [rax + 8*0]
 19599 0000F900 488B00                  	mov rax, qword [rax + 8*0]
 19600 0000F903 50                      	push rax
 19601 0000F904 6A02                    	push 2
 19602 0000F906 488B4510                	mov rax, qword [rbp + 8*2]
 19603 0000F90A 488B4008                	mov rax, qword [rax + 8*1]
 19604 0000F90E 488B00                  	mov rax, qword [rax + 8*0]
 19605                                  	assert_closure(rax)
    65 0000F911 803805              <1>  cmp byte [%1], %2
    66 0000F914 0F851A480000        <1>  jne L_error_incorrect_type
 19606 0000F91A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19607 0000F91E 53                      	push rbx
 19608 0000F91F FF7508                  	push RET_ADDR
 19609 0000F922 488B7D18                	mov rdi, COUNT
 19610 0000F926 4883C703                	add rdi, 3
 19611 0000F92A 48C1E703                	shl rdi, 3
 19612 0000F92E 4801EF                  	add rdi, rbp
 19613 0000F931 488B6D00                	mov rbp, OLD_RDP
 19614 0000F935 BE00000000              	mov rsi, 0
 19615                                  .L_tc_recycle_frame_loop_5d39:	 ; start recycle frame loop
 19616 0000F93A 4883FE05                	cmp rsi, 5
 19617 0000F93E 7427                    	je .L_tc_recycle_frame_done_5d39
 19618 0000F940 B904000000              	mov rcx, 4
 19619 0000F945 4829F1                  	sub rcx, rsi
 19620 0000F948 48C1E103                	shl rcx, 3
 19621 0000F94C 4801E1                  	add rcx, rsp ; rcx is the address to move
 19622 0000F94F 4889F3                  	mov rbx, rsi
 19623 0000F952 48C1E303                	shl rbx, 3
 19624 0000F956 48F7DB                  	neg rbx
 19625 0000F959 4801FB                  	add rbx, rdi ;rbx is the address to move to
 19626 0000F95C 488B09                  	mov rcx, [rcx]
 19627 0000F95F 48890B                  	mov [rbx], rcx
 19628 0000F962 48FFC6                  	inc rsi
 19629 0000F965 EBD3                    	jmp .L_tc_recycle_frame_loop_5d39
 19630                                  .L_tc_recycle_frame_done_5d39:	 ; end recycle frame loop
 19631 0000F967 BB04000000              	mov rbx, 4
 19632 0000F96C 48C1E303                	shl rbx, 3
 19633 0000F970 48F7DB                  	neg rbx
 19634 0000F973 4801FB                  	add rbx, rdi
 19635 0000F976 4889DC                  	mov rsp, rbx
 19636 0000F979 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19637 0000F97D FFE3                    	jmp rbx
 19638 0000F97F C9                      	leave
 19639 0000F980 C21800                  	ret 8 * (2 + 1)
 19640                                  .L_lambda_simple_end_4fac:	; new closure is in rax
 19641                                  	assert_closure(rax)
    65 0000F983 803805              <1>  cmp byte [%1], %2
    66 0000F986 0F85A8470000        <1>  jne L_error_incorrect_type
 19642 0000F98C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19643 0000F990 53                      	push rbx
 19644 0000F991 FF7508                  	push RET_ADDR
 19645 0000F994 488B7D18                	mov rdi, COUNT
 19646 0000F998 4883C703                	add rdi, 3
 19647 0000F99C 48C1E703                	shl rdi, 3
 19648 0000F9A0 4801EF                  	add rdi, rbp
 19649 0000F9A3 488B6D00                	mov rbp, OLD_RDP
 19650 0000F9A7 BE00000000              	mov rsi, 0
 19651                                  .L_tc_recycle_frame_loop_5d38:	 ; start recycle frame loop
 19652 0000F9AC 4883FE04                	cmp rsi, 4
 19653 0000F9B0 7427                    	je .L_tc_recycle_frame_done_5d38
 19654 0000F9B2 B903000000              	mov rcx, 3
 19655 0000F9B7 4829F1                  	sub rcx, rsi
 19656 0000F9BA 48C1E103                	shl rcx, 3
 19657 0000F9BE 4801E1                  	add rcx, rsp ; rcx is the address to move
 19658 0000F9C1 4889F3                  	mov rbx, rsi
 19659 0000F9C4 48C1E303                	shl rbx, 3
 19660 0000F9C8 48F7DB                  	neg rbx
 19661 0000F9CB 4801FB                  	add rbx, rdi ;rbx is the address to move to
 19662 0000F9CE 488B09                  	mov rcx, [rcx]
 19663 0000F9D1 48890B                  	mov [rbx], rcx
 19664 0000F9D4 48FFC6                  	inc rsi
 19665 0000F9D7 EBD3                    	jmp .L_tc_recycle_frame_loop_5d38
 19666                                  .L_tc_recycle_frame_done_5d38:	 ; end recycle frame loop
 19667 0000F9D9 BB03000000              	mov rbx, 3
 19668 0000F9DE 48C1E303                	shl rbx, 3
 19669 0000F9E2 48F7DB                  	neg rbx
 19670 0000F9E5 4801FB                  	add rbx, rdi
 19671 0000F9E8 4889DC                  	mov rsp, rbx
 19672 0000F9EB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19673 0000F9EF FFE3                    	jmp rbx
 19674 0000F9F1 C9                      	leave
 19675 0000F9F2 C22000                  	ret AND_KILL_FRAME(2)
 19676                                  .L_lambda_opt_end_0c99:	; new closure is in rax
 19677 0000F9F5 C9                      	leave
 19678 0000F9F6 C21800                  	ret 8 * (2 + 1)
 19679                                  .L_lambda_simple_end_4fab:	; new closure is in rax
 19680                                  	assert_closure(rax)
    65 0000F9F9 803805              <1>  cmp byte [%1], %2
    66 0000F9FC 0F8532470000        <1>  jne L_error_incorrect_type
 19681 0000FA02 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19682 0000FA06 53                      	push rbx
 19683 0000FA07 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19684 0000FA0B FFD3                    	call rbx
 19685 0000FA0D 48890425[98010000]      	mov qword [free_var_51], rax
 19686 0000FA15 48B8-                   	mov rax, sob_void
 19686 0000FA17 [0000000000000000] 
 19687                                  
 19688 0000FA1F 4889C7                  	mov rdi, rax
 19689 0000FA22 E89E2E0000              	call print_sexpr_if_not_void
 19690                                  
 19691 0000FA27 488B0425[A0010000]      	mov rax, qword [free_var_52]
 19692 0000FA2F 50                      	push rax
 19693 0000FA30 6A01                    	push 1
 19694 0000FA32 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19695 0000FA37 E8782E0000              	call malloc
 19696 0000FA3C 50                      	push rax
 19697 0000FA3D BF00000000              	mov rdi, 8 * 0	; new rib
 19698 0000FA42 E86D2E0000              	call malloc
 19699 0000FA47 50                      	push rax
 19700 0000FA48 BF08000000              	mov rdi, 8 * 1	; extended env
 19701 0000FA4D E8622E0000              	call malloc
 19702 0000FA52 488B7D10                	mov rdi, ENV
 19703 0000FA56 BE00000000              	mov rsi, 0
 19704 0000FA5B BA01000000              	mov rdx, 1
 19705                                  .L_lambda_simple_env_loop_4fad:	; ext_env[i + 1] <-- env[i]
 19706 0000FA60 4883FE00                	cmp rsi, 0
 19707 0000FA64 7410                    	je .L_lambda_simple_env_end_4fad
 19708 0000FA66 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 19709 0000FA6A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19710 0000FA6E 48FFC6                  	inc rsi
 19711 0000FA71 48FFC2                  	inc rdx
 19712 0000FA74 EBEA                    	jmp .L_lambda_simple_env_loop_4fad
 19713                                  .L_lambda_simple_env_end_4fad:
 19714 0000FA76 5B                      	pop rbx
 19715 0000FA77 BE00000000              	mov rsi, 0
 19716                                  .L_lambda_simple_params_loop_4fad:	; copy params
 19717 0000FA7C 4883FE00                	cmp rsi, 0
 19718 0000FA80 740E                    	je .L_lambda_simple_params_end_4fad
 19719 0000FA82 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19720 0000FA87 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19721 0000FA8B 48FFC6                  	inc rsi
 19722 0000FA8E EBEC                    	jmp .L_lambda_simple_params_loop_4fad
 19723                                  .L_lambda_simple_params_end_4fad:
 19724 0000FA90 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19725 0000FA93 4889C3                  	mov rbx, rax
 19726 0000FA96 58                      	pop rax
 19727 0000FA97 C60005                  	mov byte [rax], T_closure
 19728 0000FA9A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19729 0000FA9E 48C74009[ABFA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fad
 19730 0000FAA6 E92D040000              	jmp .L_lambda_simple_end_4fad
 19731                                  .L_lambda_simple_code_4fad:	; lambda-simple body
 19732 0000FAAB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19733 0000FAB1 740B                    	je .L_lambda_simple_arity_check_ok_4fad
 19734 0000FAB3 FF742410                	push qword [rsp + 8 * 2]
 19735 0000FAB7 6A01                    	push 1
 19736 0000FAB9 E9AF2D0000              	jmp L_error_incorrect_arity_simple
 19737                                  .L_lambda_simple_arity_check_ok_4fad:
 19738 0000FABE C8000000                	enter 0, 0
 19739 0000FAC2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19740 0000FAC7 E8E82D0000              	call malloc
 19741 0000FACC 50                      	push rax
 19742 0000FACD BF08000000              	mov rdi, 8 * 1	; new rib
 19743 0000FAD2 E8DD2D0000              	call malloc
 19744 0000FAD7 50                      	push rax
 19745 0000FAD8 BF10000000              	mov rdi, 8 * 2	; extended env
 19746 0000FADD E8D22D0000              	call malloc
 19747 0000FAE2 488B7D10                	mov rdi, ENV
 19748 0000FAE6 BE00000000              	mov rsi, 0
 19749 0000FAEB BA01000000              	mov rdx, 1
 19750                                  .L_lambda_opt_env_loop_0c9a:	; ext_env[i + 1] <-- env[i]
 19751 0000FAF0 4883FE01                	cmp rsi, 1
 19752 0000FAF4 7410                    	je .L_lambda_opt_env_end_0c9a
 19753 0000FAF6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 19754 0000FAFA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19755 0000FAFE 48FFC6                  	inc rsi
 19756 0000FB01 48FFC2                  	inc rdx
 19757 0000FB04 EBEA                    	jmp .L_lambda_opt_env_loop_0c9a
 19758                                  .L_lambda_opt_env_end_0c9a:
 19759 0000FB06 5B                      	pop rbx
 19760 0000FB07 BE00000000              	mov rsi, 0
 19761                                  .L_lambda_opt_params_loop_0c9a:	; copy params
 19762 0000FB0C 4883FE01                	cmp rsi, 1
 19763 0000FB10 740E                    	je .L_lambda_opt_params_end_0c9a
 19764 0000FB12 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19765 0000FB17 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19766 0000FB1B 48FFC6                  	inc rsi
 19767 0000FB1E EBEC                    	jmp .L_lambda_opt_params_loop_0c9a
 19768                                  .L_lambda_opt_params_end_0c9a:
 19769 0000FB20 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19770 0000FB23 4889C3                  	mov rbx, rax
 19771 0000FB26 58                      	pop rax
 19772 0000FB27 C60005                  	mov byte [rax], T_closure
 19773 0000FB2A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19774 0000FB2E 48C74009[3BFB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c9a
 19775 0000FB36 E999030000              	jmp .L_lambda_opt_end_0c9a
 19776                                  .L_lambda_opt_code_0c9a:	; lambda-opt body
 19777 0000FB3B 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 19778 0000FB40 4889FB                  	mov rbx, rdi
 19779 0000FB43 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
 19780 0000FB47 4883FB00                	cmp rbx, 0
 19781 0000FB4B 7F45                    	jg .L_lambda_opt_arity_check_more_0c9a
 19782                                  .L_lambda_opt_arity_check_exact_0c9a:	 ; if params in opt is exact
 19783 0000FB4D 4883EC08                	sub rsp, 8
 19784 0000FB51 BE00000000              	mov rsi, 0 ; index
 19785                                  .L_lambda_opt_stack_enlarge_loop_0c9a:	 ; stack loop enlarge start
 19786 0000FB56 4883FE04                	cmp rsi, 4
 19787 0000FB5A 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c9a
 19788 0000FB5C 4889F7                  	mov rdi, rsi
 19789 0000FB5F 48FFC7                  	inc rdi
 19790 0000FB62 48C1E703                	shl rdi, 3
 19791 0000FB66 4801E7                  	add rdi, rsp
 19792 0000FB69 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 19793 0000FB6C 4883EB08                	sub rbx, 8
 19794 0000FB70 488B3F                  	mov rdi, [rdi]
 19795 0000FB73 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 19796 0000FB76 48FFC6                  	inc rsi
 19797 0000FB79 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c9a
 19798                                  .L_lambda_opt_stack_enlarge_loop_exit_0c9a:	 ; end of stack enlarge loop
 19799 0000FB7B 48C7442420-             	mov qword [rsp + 4*8], sob_nil
 19799 0000FB80 [01000000]         
 19800 0000FB84 48C744241002000000      	mov qword [rsp + 2*8], 2
 19801 0000FB8D E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c9a
 19802                                  .L_lambda_opt_arity_check_more_0c9a:	 ; if params in opt is more
 19803 0000FB92 48B8-                   	mov rax, sob_nil
 19803 0000FB94 [0100000000000000] 
 19804 0000FB9C 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 19805 0000FB9F 48FFCE                  	dec rsi
 19806                                  .L_lambda_opt_list_create_loop_0c9a:	; start of list creation loop
 19807 0000FBA2 4883FEFF                	cmp rsi, -1
 19808 0000FBA6 7422                    	je .L_lambda_opt_list_create_loop_exit_0c9a
 19809 0000FBA8 488D4E04                	lea rcx, [rsi + (3 + 1)]
 19810 0000FBAC 48C1E103                	shl rcx, 3
 19811 0000FBB0 4801E1                  	add rcx, rsp
 19812 0000FBB3 488B09                  	mov rcx, [rcx]
 19813 0000FBB6 56                      	push rsi ; save params
 19814 0000FBB7 53                      	push rbx
 19815                                  
 19816 0000FBB8 50                      	push rax ; cdr
 19817 0000FBB9 51                      	push rcx ; car
 19818 0000FBBA 6A02                    	push qword 2 ; push num of args
 19819 0000FBBC 6A01                    	push qword 1 ; push garbage as env
 19820 0000FBBE E878360000              	call L_code_ptr_cons
 19821                                  
 19822 0000FBC3 5B                      	pop rbx ; restore params
 19823 0000FBC4 5E                      	pop rsi
 19824 0000FBC5 48FFCE                  	dec rsi
 19825 0000FBC8 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c9a
 19826                                  .L_lambda_opt_list_create_loop_exit_0c9a:	; end of list creation loop
 19827 0000FBCA 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 19828 0000FBCF 4883C302                	add rbx, 2
 19829 0000FBD3 4889DF                  	mov rdi, rbx
 19830 0000FBD6 48C1E703                	shl rdi,3
 19831 0000FBDA 4801E7                  	add rdi, rsp
 19832 0000FBDD 488907                  	mov [rdi], rax
 19833 0000FBE0 BE00000000              	mov rsi, 0 ;index
 19834                                  .L_lambda_opt_stack_shrink_loop_0c9a:	; start of stack shrink loop
 19835 0000FBE5 4883FE04                	cmp rsi, 4
 19836 0000FBE9 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c9a
 19837 0000FBEB BF03000000              	mov rdi, 3
 19838 0000FBF0 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 19839 0000FBF3 4889D9                  	mov rcx, rbx
 19840 0000FBF6 4829F1                  	sub rcx, rsi
 19841 0000FBF9 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 19842 0000FBFC 4889FA                  	mov rdx, rdi
 19843 0000FBFF 48C1E203                	shl rdx, 3
 19844 0000FC03 4801E2                  	add rdx, rsp
 19845 0000FC06 48C1E103                	shl rcx, 3
 19846 0000FC0A 4801E1                  	add rcx, rsp
 19847 0000FC0D 488B12                  	mov rdx, [rdx]
 19848 0000FC10 488911                  	mov [rcx], rdx
 19849 0000FC13 48FFC6                  	inc rsi
 19850 0000FC16 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c9a
 19851                                  .L_lambda_opt_stack_shrink_loop_exit_0c9a:	; end of stack shrink loop
 19852 0000FC18 4883EB02                	sub rbx, 2 ; rbx has number of args
 19853 0000FC1C 4883EB02                	sub rbx, 2
 19854 0000FC20 48C1E303                	shl rbx, 3
 19855 0000FC24 4801DC                  	add rsp, rbx
 19856 0000FC27 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 19857                                  .L_lambda_opt_stack_adjusted_0c9a:
 19858 0000FC30 C8000000                	enter 0, 0
 19859 0000FC34 488B4528                	mov rax, PARAM(1)
 19860 0000FC38 50                      	push rax
 19861 0000FC39 6A01                    	push 1
 19862 0000FC3B 488B0425[00000000]      	mov rax, qword [free_var_0]
 19863                                  	assert_closure(rax)
    65 0000FC43 803805              <1>  cmp byte [%1], %2
    66 0000FC46 0F85E8440000        <1>  jne L_error_incorrect_type
 19864 0000FC4C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19865 0000FC50 53                      	push rbx
 19866 0000FC51 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19867 0000FC55 FFD3                    	call rbx
 19868 0000FC57 483D[02000000]          	cmp rax, sob_boolean_false
 19869 0000FC5D 740D                    	je .L_if_else_56c7
 19870 0000FC5F 488D0425[04000000]      	lea rax, [4 + L_constants]
 19871 0000FC67 E9D4000000              	jmp .L_if_end_56c7
 19872                                  	.L_if_else_56c7:
 19873 0000FC6C 488B4528                	mov rax, PARAM(1)
 19874 0000FC70 50                      	push rax
 19875 0000FC71 6A01                    	push 1
 19876 0000FC73 488B0425[08000000]      	mov rax, qword [free_var_1]
 19877                                  	assert_closure(rax)
    65 0000FC7B 803805              <1>  cmp byte [%1], %2
    66 0000FC7E 0F85B0440000        <1>  jne L_error_incorrect_type
 19878 0000FC84 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19879 0000FC88 53                      	push rbx
 19880 0000FC89 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19881 0000FC8D FFD3                    	call rbx
 19882 0000FC8F 483D[02000000]          	cmp rax, sob_boolean_false
 19883 0000FC95 7444                    	je .L_if_else_56c9
 19884 0000FC97 488B4528                	mov rax, PARAM(1)
 19885 0000FC9B 50                      	push rax
 19886 0000FC9C 6A01                    	push 1
 19887 0000FC9E 488B0425[88000000]      	mov rax, qword [free_var_17]
 19888                                  	assert_closure(rax)
    65 0000FCA6 803805              <1>  cmp byte [%1], %2
    66 0000FCA9 0F8585440000        <1>  jne L_error_incorrect_type
 19889 0000FCAF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19890 0000FCB3 53                      	push rbx
 19891 0000FCB4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19892 0000FCB8 FFD3                    	call rbx
 19893 0000FCBA 50                      	push rax
 19894 0000FCBB 6A01                    	push 1
 19895 0000FCBD 488B0425[00000000]      	mov rax, qword [free_var_0]
 19896                                  	assert_closure(rax)
    65 0000FCC5 803805              <1>  cmp byte [%1], %2
    66 0000FCC8 0F8566440000        <1>  jne L_error_incorrect_type
 19897 0000FCCE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19898 0000FCD2 53                      	push rbx
 19899 0000FCD3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19900 0000FCD7 FFD3                    	call rbx
 19901 0000FCD9 EB08                    	jmp .L_if_end_56c9
 19902                                  	.L_if_else_56c9:
 19903 0000FCDB 488D0425[02000000]      	lea rax, [2 + L_constants]
 19904                                  	.L_if_end_56c9:
 19905 0000FCE3 483D[02000000]          	cmp rax, sob_boolean_false
 19906 0000FCE9 7425                    	je .L_if_else_56c8
 19907 0000FCEB 488B4528                	mov rax, PARAM(1)
 19908 0000FCEF 50                      	push rax
 19909 0000FCF0 6A01                    	push 1
 19910 0000FCF2 488B0425[80000000]      	mov rax, qword [free_var_16]
 19911                                  	assert_closure(rax)
    65 0000FCFA 803805              <1>  cmp byte [%1], %2
    66 0000FCFD 0F8531440000        <1>  jne L_error_incorrect_type
 19912 0000FD03 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19913 0000FD07 53                      	push rbx
 19914 0000FD08 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19915 0000FD0C FFD3                    	call rbx
 19916 0000FD0E EB30                    	jmp .L_if_end_56c8
 19917                                  	.L_if_else_56c8:
 19918 0000FD10 488D0425[CC010000]      	lea rax, [460 + L_constants]
 19919 0000FD18 50                      	push rax
 19920 0000FD19 488D0425[C3010000]      	lea rax, [451 + L_constants]
 19921 0000FD21 50                      	push rax
 19922 0000FD22 6A02                    	push 2
 19923 0000FD24 488B0425[30010000]      	mov rax, qword [free_var_38]
 19924                                  	assert_closure(rax)
    65 0000FD2C 803805              <1>  cmp byte [%1], %2
    66 0000FD2F 0F85FF430000        <1>  jne L_error_incorrect_type
 19925 0000FD35 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19926 0000FD39 53                      	push rbx
 19927 0000FD3A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19928 0000FD3E FFD3                    	call rbx
 19929                                  	.L_if_end_56c8:
 19930                                  	.L_if_end_56c7:
 19931 0000FD40 50                      	push rax
 19932 0000FD41 6A01                    	push 1
 19933 0000FD43 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19934 0000FD48 E8672B0000              	call malloc
 19935 0000FD4D 50                      	push rax
 19936 0000FD4E BF10000000              	mov rdi, 8 * 2	; new rib
 19937 0000FD53 E85C2B0000              	call malloc
 19938 0000FD58 50                      	push rax
 19939 0000FD59 BF18000000              	mov rdi, 8 * 3	; extended env
 19940 0000FD5E E8512B0000              	call malloc
 19941 0000FD63 488B7D10                	mov rdi, ENV
 19942 0000FD67 BE00000000              	mov rsi, 0
 19943 0000FD6C BA01000000              	mov rdx, 1
 19944                                  .L_lambda_simple_env_loop_4fae:	; ext_env[i + 1] <-- env[i]
 19945 0000FD71 4883FE02                	cmp rsi, 2
 19946 0000FD75 7410                    	je .L_lambda_simple_env_end_4fae
 19947 0000FD77 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 19948 0000FD7B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19949 0000FD7F 48FFC6                  	inc rsi
 19950 0000FD82 48FFC2                  	inc rdx
 19951 0000FD85 EBEA                    	jmp .L_lambda_simple_env_loop_4fae
 19952                                  .L_lambda_simple_env_end_4fae:
 19953 0000FD87 5B                      	pop rbx
 19954 0000FD88 BE00000000              	mov rsi, 0
 19955                                  .L_lambda_simple_params_loop_4fae:	; copy params
 19956 0000FD8D 4883FE02                	cmp rsi, 2
 19957 0000FD91 740E                    	je .L_lambda_simple_params_end_4fae
 19958 0000FD93 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19959 0000FD98 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19960 0000FD9C 48FFC6                  	inc rsi
 19961 0000FD9F EBEC                    	jmp .L_lambda_simple_params_loop_4fae
 19962                                  .L_lambda_simple_params_end_4fae:
 19963 0000FDA1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19964 0000FDA4 4889C3                  	mov rbx, rax
 19965 0000FDA7 58                      	pop rax
 19966 0000FDA8 C60005                  	mov byte [rax], T_closure
 19967 0000FDAB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19968 0000FDAF 48C74009[BCFD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fae
 19969 0000FDB7 E9A6000000              	jmp .L_lambda_simple_end_4fae
 19970                                  .L_lambda_simple_code_4fae:	; lambda-simple body
 19971 0000FDBC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19972 0000FDC2 740B                    	je .L_lambda_simple_arity_check_ok_4fae
 19973 0000FDC4 FF742410                	push qword [rsp + 8 * 2]
 19974 0000FDC8 6A01                    	push 1
 19975 0000FDCA E99E2A0000              	jmp L_error_incorrect_arity_simple
 19976                                  .L_lambda_simple_arity_check_ok_4fae:
 19977 0000FDCF C8000000                	enter 0, 0
 19978 0000FDD3 488B4520                	mov rax, PARAM(0)
 19979 0000FDD7 50                      	push rax
 19980 0000FDD8 488B4510                	mov rax, qword [rbp + 8*2]
 19981 0000FDDC 488B00                  	mov rax, qword [rax + 8*0]
 19982 0000FDDF 488B00                  	mov rax, qword [rax + 8*0]
 19983 0000FDE2 50                      	push rax
 19984 0000FDE3 6A02                    	push 2
 19985 0000FDE5 488B4510                	mov rax, qword [rbp + 8*2]
 19986 0000FDE9 488B4008                	mov rax, qword [rax + 8*1]
 19987 0000FDED 488B00                  	mov rax, qword [rax + 8*0]
 19988                                  	assert_closure(rax)
    65 0000FDF0 803805              <1>  cmp byte [%1], %2
    66 0000FDF3 0F853B430000        <1>  jne L_error_incorrect_type
 19989 0000FDF9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19990 0000FDFD 53                      	push rbx
 19991 0000FDFE FF7508                  	push RET_ADDR
 19992 0000FE01 488B7D18                	mov rdi, COUNT
 19993 0000FE05 4883C703                	add rdi, 3
 19994 0000FE09 48C1E703                	shl rdi, 3
 19995 0000FE0D 4801EF                  	add rdi, rbp
 19996 0000FE10 488B6D00                	mov rbp, OLD_RDP
 19997 0000FE14 BE00000000              	mov rsi, 0
 19998                                  .L_tc_recycle_frame_loop_5d3b:	 ; start recycle frame loop
 19999 0000FE19 4883FE05                	cmp rsi, 5
 20000 0000FE1D 7427                    	je .L_tc_recycle_frame_done_5d3b
 20001 0000FE1F B904000000              	mov rcx, 4
 20002 0000FE24 4829F1                  	sub rcx, rsi
 20003 0000FE27 48C1E103                	shl rcx, 3
 20004 0000FE2B 4801E1                  	add rcx, rsp ; rcx is the address to move
 20005 0000FE2E 4889F3                  	mov rbx, rsi
 20006 0000FE31 48C1E303                	shl rbx, 3
 20007 0000FE35 48F7DB                  	neg rbx
 20008 0000FE38 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20009 0000FE3B 488B09                  	mov rcx, [rcx]
 20010 0000FE3E 48890B                  	mov [rbx], rcx
 20011 0000FE41 48FFC6                  	inc rsi
 20012 0000FE44 EBD3                    	jmp .L_tc_recycle_frame_loop_5d3b
 20013                                  .L_tc_recycle_frame_done_5d3b:	 ; end recycle frame loop
 20014 0000FE46 BB04000000              	mov rbx, 4
 20015 0000FE4B 48C1E303                	shl rbx, 3
 20016 0000FE4F 48F7DB                  	neg rbx
 20017 0000FE52 4801FB                  	add rbx, rdi
 20018 0000FE55 4889DC                  	mov rsp, rbx
 20019 0000FE58 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20020 0000FE5C FFE3                    	jmp rbx
 20021 0000FE5E C9                      	leave
 20022 0000FE5F C21800                  	ret 8 * (2 + 1)
 20023                                  .L_lambda_simple_end_4fae:	; new closure is in rax
 20024                                  	assert_closure(rax)
    65 0000FE62 803805              <1>  cmp byte [%1], %2
    66 0000FE65 0F85C9420000        <1>  jne L_error_incorrect_type
 20025 0000FE6B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20026 0000FE6F 53                      	push rbx
 20027 0000FE70 FF7508                  	push RET_ADDR
 20028 0000FE73 488B7D18                	mov rdi, COUNT
 20029 0000FE77 4883C703                	add rdi, 3
 20030 0000FE7B 48C1E703                	shl rdi, 3
 20031 0000FE7F 4801EF                  	add rdi, rbp
 20032 0000FE82 488B6D00                	mov rbp, OLD_RDP
 20033 0000FE86 BE00000000              	mov rsi, 0
 20034                                  .L_tc_recycle_frame_loop_5d3a:	 ; start recycle frame loop
 20035 0000FE8B 4883FE04                	cmp rsi, 4
 20036 0000FE8F 7427                    	je .L_tc_recycle_frame_done_5d3a
 20037 0000FE91 B903000000              	mov rcx, 3
 20038 0000FE96 4829F1                  	sub rcx, rsi
 20039 0000FE99 48C1E103                	shl rcx, 3
 20040 0000FE9D 4801E1                  	add rcx, rsp ; rcx is the address to move
 20041 0000FEA0 4889F3                  	mov rbx, rsi
 20042 0000FEA3 48C1E303                	shl rbx, 3
 20043 0000FEA7 48F7DB                  	neg rbx
 20044 0000FEAA 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20045 0000FEAD 488B09                  	mov rcx, [rcx]
 20046 0000FEB0 48890B                  	mov [rbx], rcx
 20047 0000FEB3 48FFC6                  	inc rsi
 20048 0000FEB6 EBD3                    	jmp .L_tc_recycle_frame_loop_5d3a
 20049                                  .L_tc_recycle_frame_done_5d3a:	 ; end recycle frame loop
 20050 0000FEB8 BB03000000              	mov rbx, 3
 20051 0000FEBD 48C1E303                	shl rbx, 3
 20052 0000FEC1 48F7DB                  	neg rbx
 20053 0000FEC4 4801FB                  	add rbx, rdi
 20054 0000FEC7 4889DC                  	mov rsp, rbx
 20055 0000FECA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20056 0000FECE FFE3                    	jmp rbx
 20057 0000FED0 C9                      	leave
 20058 0000FED1 C22000                  	ret AND_KILL_FRAME(2)
 20059                                  .L_lambda_opt_end_0c9a:	; new closure is in rax
 20060 0000FED4 C9                      	leave
 20061 0000FED5 C21800                  	ret 8 * (2 + 1)
 20062                                  .L_lambda_simple_end_4fad:	; new closure is in rax
 20063                                  	assert_closure(rax)
    65 0000FED8 803805              <1>  cmp byte [%1], %2
    66 0000FEDB 0F8553420000        <1>  jne L_error_incorrect_type
 20064 0000FEE1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20065 0000FEE5 53                      	push rbx
 20066 0000FEE6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20067 0000FEEA FFD3                    	call rbx
 20068 0000FEEC 48890425[A0010000]      	mov qword [free_var_52], rax
 20069 0000FEF4 48B8-                   	mov rax, sob_void
 20069 0000FEF6 [0000000000000000] 
 20070                                  
 20071 0000FEFE 4889C7                  	mov rdi, rax
 20072 0000FF01 E8BF290000              	call print_sexpr_if_not_void
 20073                                  
 20074 0000FF06 488D0425[17000000]      	lea rax, [23 + L_constants]
 20075 0000FF0E 50                      	push rax
 20076 0000FF0F 6A01                    	push 1
 20077 0000FF11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20078 0000FF16 E899290000              	call malloc
 20079 0000FF1B 50                      	push rax
 20080 0000FF1C BF00000000              	mov rdi, 8 * 0	; new rib
 20081 0000FF21 E88E290000              	call malloc
 20082 0000FF26 50                      	push rax
 20083 0000FF27 BF08000000              	mov rdi, 8 * 1	; extended env
 20084 0000FF2C E883290000              	call malloc
 20085 0000FF31 488B7D10                	mov rdi, ENV
 20086 0000FF35 BE00000000              	mov rsi, 0
 20087 0000FF3A BA01000000              	mov rdx, 1
 20088                                  .L_lambda_simple_env_loop_4faf:	; ext_env[i + 1] <-- env[i]
 20089 0000FF3F 4883FE00                	cmp rsi, 0
 20090 0000FF43 7410                    	je .L_lambda_simple_env_end_4faf
 20091 0000FF45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 20092 0000FF49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20093 0000FF4D 48FFC6                  	inc rsi
 20094 0000FF50 48FFC2                  	inc rdx
 20095 0000FF53 EBEA                    	jmp .L_lambda_simple_env_loop_4faf
 20096                                  .L_lambda_simple_env_end_4faf:
 20097 0000FF55 5B                      	pop rbx
 20098 0000FF56 BE00000000              	mov rsi, 0
 20099                                  .L_lambda_simple_params_loop_4faf:	; copy params
 20100 0000FF5B 4883FE00                	cmp rsi, 0
 20101 0000FF5F 740E                    	je .L_lambda_simple_params_end_4faf
 20102 0000FF61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20103 0000FF66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20104 0000FF6A 48FFC6                  	inc rsi
 20105 0000FF6D EBEC                    	jmp .L_lambda_simple_params_loop_4faf
 20106                                  .L_lambda_simple_params_end_4faf:
 20107 0000FF6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20108 0000FF72 4889C3                  	mov rbx, rax
 20109 0000FF75 58                      	pop rax
 20110 0000FF76 C60005                  	mov byte [rax], T_closure
 20111 0000FF79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20112 0000FF7D 48C74009[8AFF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4faf
 20113 0000FF85 E984040000              	jmp .L_lambda_simple_end_4faf
 20114                                  .L_lambda_simple_code_4faf:	; lambda-simple body
 20115 0000FF8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20116 0000FF90 740B                    	je .L_lambda_simple_arity_check_ok_4faf
 20117 0000FF92 FF742410                	push qword [rsp + 8 * 2]
 20118 0000FF96 6A01                    	push 1
 20119 0000FF98 E9D0280000              	jmp L_error_incorrect_arity_simple
 20120                                  .L_lambda_simple_arity_check_ok_4faf:
 20121 0000FF9D C8000000                	enter 0, 0
 20122 0000FFA1 BF11000000              	mov qword rdi, (1 + 8 + 8)
 20123 0000FFA6 E809290000              	call malloc
 20124 0000FFAB 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 20125 0000FFAF 48B8-                   	mov rax, sob_void
 20125 0000FFB1 [0000000000000000] 
 20126                                  
 20127 0000FFB9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20128 0000FFBE E8F1280000              	call malloc
 20129 0000FFC3 50                      	push rax
 20130 0000FFC4 BF08000000              	mov rdi, 8 * 1	; new rib
 20131 0000FFC9 E8E6280000              	call malloc
 20132 0000FFCE 50                      	push rax
 20133 0000FFCF BF10000000              	mov rdi, 8 * 2	; extended env
 20134 0000FFD4 E8DB280000              	call malloc
 20135 0000FFD9 488B7D10                	mov rdi, ENV
 20136 0000FFDD BE00000000              	mov rsi, 0
 20137 0000FFE2 BA01000000              	mov rdx, 1
 20138                                  .L_lambda_simple_env_loop_4fb0:	; ext_env[i + 1] <-- env[i]
 20139 0000FFE7 4883FE01                	cmp rsi, 1
 20140 0000FFEB 7410                    	je .L_lambda_simple_env_end_4fb0
 20141 0000FFED 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 20142 0000FFF1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20143 0000FFF5 48FFC6                  	inc rsi
 20144 0000FFF8 48FFC2                  	inc rdx
 20145 0000FFFB EBEA                    	jmp .L_lambda_simple_env_loop_4fb0
 20146                                  .L_lambda_simple_env_end_4fb0:
 20147 0000FFFD 5B                      	pop rbx
 20148 0000FFFE BE00000000              	mov rsi, 0
 20149                                  .L_lambda_simple_params_loop_4fb0:	; copy params
 20150 00010003 4883FE01                	cmp rsi, 1
 20151 00010007 740E                    	je .L_lambda_simple_params_end_4fb0
 20152 00010009 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20153 0001000E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20154 00010012 48FFC6                  	inc rsi
 20155 00010015 EBEC                    	jmp .L_lambda_simple_params_loop_4fb0
 20156                                  .L_lambda_simple_params_end_4fb0:
 20157 00010017 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20158 0001001A 4889C3                  	mov rbx, rax
 20159 0001001D 58                      	pop rax
 20160 0001001E C60005                  	mov byte [rax], T_closure
 20161 00010021 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20162 00010025 48C74009[32000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb0
 20163 0001002D E9A8020000              	jmp .L_lambda_simple_end_4fb0
 20164                                  .L_lambda_simple_code_4fb0:	; lambda-simple body
 20165 00010032 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20166 00010038 740B                    	je .L_lambda_simple_arity_check_ok_4fb0
 20167 0001003A FF742410                	push qword [rsp + 8 * 2]
 20168 0001003E 6A02                    	push 2
 20169 00010040 E928280000              	jmp L_error_incorrect_arity_simple
 20170                                  .L_lambda_simple_arity_check_ok_4fb0:
 20171 00010045 C8000000                	enter 0, 0
 20172 00010049 488B4520                	mov rax, PARAM(0)
 20173 0001004D 50                      	push rax
 20174 0001004E 6A01                    	push 1
 20175 00010050 488B0425[00000000]      	mov rax, qword [free_var_0]
 20176                                  	assert_closure(rax)
    65 00010058 803805              <1>  cmp byte [%1], %2
    66 0001005B 0F85D3400000        <1>  jne L_error_incorrect_type
 20177 00010061 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20178 00010065 53                      	push rbx
 20179 00010066 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20180 0001006A FFD3                    	call rbx
 20181 0001006C 483D[02000000]          	cmp rax, sob_boolean_false
 20182 00010072 0F848B000000            	je .L_if_else_56ca
 20183 00010078 488D0425[00000000]      	lea rax, [0 + L_constants]
 20184 00010080 50                      	push rax
 20185 00010081 488B4528                	mov rax, PARAM(1)
 20186 00010085 50                      	push rax
 20187 00010086 6A02                    	push 2
 20188 00010088 488B0425[98010000]      	mov rax, qword [free_var_51]
 20189                                  	assert_closure(rax)
    65 00010090 803805              <1>  cmp byte [%1], %2
    66 00010093 0F859B400000        <1>  jne L_error_incorrect_type
 20190 00010099 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20191 0001009D 53                      	push rbx
 20192 0001009E FF7508                  	push RET_ADDR
 20193 000100A1 488B7D18                	mov rdi, COUNT
 20194 000100A5 4883C703                	add rdi, 3
 20195 000100A9 48C1E703                	shl rdi, 3
 20196 000100AD 4801EF                  	add rdi, rbp
 20197 000100B0 488B6D00                	mov rbp, OLD_RDP
 20198 000100B4 BE00000000              	mov rsi, 0
 20199                                  .L_tc_recycle_frame_loop_5d3c:	 ; start recycle frame loop
 20200 000100B9 4883FE05                	cmp rsi, 5
 20201 000100BD 7427                    	je .L_tc_recycle_frame_done_5d3c
 20202 000100BF B904000000              	mov rcx, 4
 20203 000100C4 4829F1                  	sub rcx, rsi
 20204 000100C7 48C1E103                	shl rcx, 3
 20205 000100CB 4801E1                  	add rcx, rsp ; rcx is the address to move
 20206 000100CE 4889F3                  	mov rbx, rsi
 20207 000100D1 48C1E303                	shl rbx, 3
 20208 000100D5 48F7DB                  	neg rbx
 20209 000100D8 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20210 000100DB 488B09                  	mov rcx, [rcx]
 20211 000100DE 48890B                  	mov [rbx], rcx
 20212 000100E1 48FFC6                  	inc rsi
 20213 000100E4 EBD3                    	jmp .L_tc_recycle_frame_loop_5d3c
 20214                                  .L_tc_recycle_frame_done_5d3c:	 ; end recycle frame loop
 20215 000100E6 BB04000000              	mov rbx, 4
 20216 000100EB 48C1E303                	shl rbx, 3
 20217 000100EF 48F7DB                  	neg rbx
 20218 000100F2 4801FB                  	add rbx, rdi
 20219 000100F5 4889DC                  	mov rsp, rbx
 20220 000100F8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20221 000100FC FFE3                    	jmp rbx
 20222 000100FE E9D3010000              	jmp .L_if_end_56ca
 20223                                  	.L_if_else_56ca:
 20224 00010103 488D0425[80000000]      	lea rax, [128 + L_constants]
 20225 0001010B 50                      	push rax
 20226 0001010C 488B4528                	mov rax, PARAM(1)
 20227 00010110 50                      	push rax
 20228 00010111 6A02                    	push 2
 20229 00010113 488B0425[08030000]      	mov rax, qword [free_var_97]
 20230                                  	assert_closure(rax)
    65 0001011B 803805              <1>  cmp byte [%1], %2
    66 0001011E 0F8510400000        <1>  jne L_error_incorrect_type
 20231 00010124 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20232 00010128 53                      	push rbx
 20233 00010129 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20234 0001012D FFD3                    	call rbx
 20235 0001012F 50                      	push rax
 20236 00010130 488B4520                	mov rax, PARAM(0)
 20237 00010134 50                      	push rax
 20238 00010135 6A01                    	push 1
 20239 00010137 488B0425[88000000]      	mov rax, qword [free_var_17]
 20240                                  	assert_closure(rax)
    65 0001013F 803805              <1>  cmp byte [%1], %2
    66 00010142 0F85EC3F0000        <1>  jne L_error_incorrect_type
 20241 00010148 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20242 0001014C 53                      	push rbx
 20243 0001014D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20244 00010151 FFD3                    	call rbx
 20245 00010153 50                      	push rax
 20246 00010154 6A02                    	push 2
 20247 00010156 488B4510                	mov rax, qword [rbp + 8*2]
 20248 0001015A 488B00                  	mov rax, qword [rax + 8*0]
 20249 0001015D 488B00                  	mov rax, qword [rax + 8*0]
 20250 00010160 488B00                  	mov rax, qword [rax]
 20251                                  	assert_closure(rax)
    65 00010163 803805              <1>  cmp byte [%1], %2
    66 00010166 0F85C83F0000        <1>  jne L_error_incorrect_type
 20252 0001016C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20253 00010170 53                      	push rbx
 20254 00010171 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20255 00010175 FFD3                    	call rbx
 20256 00010177 50                      	push rax
 20257 00010178 6A01                    	push 1
 20258 0001017A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20259 0001017F E830270000              	call malloc
 20260 00010184 50                      	push rax
 20261 00010185 BF10000000              	mov rdi, 8 * 2	; new rib
 20262 0001018A E825270000              	call malloc
 20263 0001018F 50                      	push rax
 20264 00010190 BF18000000              	mov rdi, 8 * 3	; extended env
 20265 00010195 E81A270000              	call malloc
 20266 0001019A 488B7D10                	mov rdi, ENV
 20267 0001019E BE00000000              	mov rsi, 0
 20268 000101A3 BA01000000              	mov rdx, 1
 20269                                  .L_lambda_simple_env_loop_4fb1:	; ext_env[i + 1] <-- env[i]
 20270 000101A8 4883FE02                	cmp rsi, 2
 20271 000101AC 7410                    	je .L_lambda_simple_env_end_4fb1
 20272 000101AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 20273 000101B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20274 000101B6 48FFC6                  	inc rsi
 20275 000101B9 48FFC2                  	inc rdx
 20276 000101BC EBEA                    	jmp .L_lambda_simple_env_loop_4fb1
 20277                                  .L_lambda_simple_env_end_4fb1:
 20278 000101BE 5B                      	pop rbx
 20279 000101BF BE00000000              	mov rsi, 0
 20280                                  .L_lambda_simple_params_loop_4fb1:	; copy params
 20281 000101C4 4883FE02                	cmp rsi, 2
 20282 000101C8 740E                    	je .L_lambda_simple_params_end_4fb1
 20283 000101CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20284 000101CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20285 000101D3 48FFC6                  	inc rsi
 20286 000101D6 EBEC                    	jmp .L_lambda_simple_params_loop_4fb1
 20287                                  .L_lambda_simple_params_end_4fb1:
 20288 000101D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20289 000101DB 4889C3                  	mov rbx, rax
 20290 000101DE 58                      	pop rax
 20291 000101DF C60005                  	mov byte [rax], T_closure
 20292 000101E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20293 000101E6 48C74009[F0010100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb1
 20294 000101EE EB78                    	jmp .L_lambda_simple_end_4fb1
 20295                                  .L_lambda_simple_code_4fb1:	; lambda-simple body
 20296 000101F0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20297 000101F6 740B                    	je .L_lambda_simple_arity_check_ok_4fb1
 20298 000101F8 FF742410                	push qword [rsp + 8 * 2]
 20299 000101FC 6A01                    	push 1
 20300 000101FE E96A260000              	jmp L_error_incorrect_arity_simple
 20301                                  .L_lambda_simple_arity_check_ok_4fb1:
 20302 00010203 C8000000                	enter 0, 0
 20303 00010207 488B4510                	mov rax, qword [rbp + 8*2]
 20304 0001020B 488B00                  	mov rax, qword [rax + 8*0]
 20305 0001020E 488B00                  	mov rax, qword [rax + 8*0]
 20306 00010211 50                      	push rax
 20307 00010212 6A01                    	push 1
 20308 00010214 488B0425[80000000]      	mov rax, qword [free_var_16]
 20309                                  	assert_closure(rax)
    65 0001021C 803805              <1>  cmp byte [%1], %2
    66 0001021F 0F850F3F0000        <1>  jne L_error_incorrect_type
 20310 00010225 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20311 00010229 53                      	push rbx
 20312 0001022A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20313 0001022E FFD3                    	call rbx
 20314 00010230 50                      	push rax
 20315 00010231 488B4510                	mov rax, qword [rbp + 8*2]
 20316 00010235 488B00                  	mov rax, qword [rax + 8*0]
 20317 00010238 488B4008                	mov rax, qword [rax + 8*1]
 20318 0001023C 50                      	push rax
 20319 0001023D 488B4520                	mov rax, PARAM(0)
 20320 00010241 50                      	push rax
 20321 00010242 6A03                    	push 3
 20322 00010244 488B0425[88010000]      	mov rax, qword [free_var_49]
 20323                                  	assert_closure(rax)
    65 0001024C 803805              <1>  cmp byte [%1], %2
    66 0001024F 0F85DF3E0000        <1>  jne L_error_incorrect_type
 20324 00010255 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20325 00010259 53                      	push rbx
 20326 0001025A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20327 0001025E FFD3                    	call rbx
 20328                                  
 20329 00010260 488B4520                	mov rax, PARAM(0)
 20330 00010264 C9                      	leave
 20331 00010265 C21800                  	ret 8 * (2 + 1)
 20332                                  .L_lambda_simple_end_4fb1:	; new closure is in rax
 20333                                  	assert_closure(rax)
    65 00010268 803805              <1>  cmp byte [%1], %2
    66 0001026B 0F85C33E0000        <1>  jne L_error_incorrect_type
 20334 00010271 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20335 00010275 53                      	push rbx
 20336 00010276 FF7508                  	push RET_ADDR
 20337 00010279 488B7D18                	mov rdi, COUNT
 20338 0001027D 4883C703                	add rdi, 3
 20339 00010281 48C1E703                	shl rdi, 3
 20340 00010285 4801EF                  	add rdi, rbp
 20341 00010288 488B6D00                	mov rbp, OLD_RDP
 20342 0001028C BE00000000              	mov rsi, 0
 20343                                  .L_tc_recycle_frame_loop_5d3d:	 ; start recycle frame loop
 20344 00010291 4883FE04                	cmp rsi, 4
 20345 00010295 7427                    	je .L_tc_recycle_frame_done_5d3d
 20346 00010297 B903000000              	mov rcx, 3
 20347 0001029C 4829F1                  	sub rcx, rsi
 20348 0001029F 48C1E103                	shl rcx, 3
 20349 000102A3 4801E1                  	add rcx, rsp ; rcx is the address to move
 20350 000102A6 4889F3                  	mov rbx, rsi
 20351 000102A9 48C1E303                	shl rbx, 3
 20352 000102AD 48F7DB                  	neg rbx
 20353 000102B0 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20354 000102B3 488B09                  	mov rcx, [rcx]
 20355 000102B6 48890B                  	mov [rbx], rcx
 20356 000102B9 48FFC6                  	inc rsi
 20357 000102BC EBD3                    	jmp .L_tc_recycle_frame_loop_5d3d
 20358                                  .L_tc_recycle_frame_done_5d3d:	 ; end recycle frame loop
 20359 000102BE BB03000000              	mov rbx, 3
 20360 000102C3 48C1E303                	shl rbx, 3
 20361 000102C7 48F7DB                  	neg rbx
 20362 000102CA 4801FB                  	add rbx, rdi
 20363 000102CD 4889DC                  	mov rsp, rbx
 20364 000102D0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20365 000102D4 FFE3                    	jmp rbx
 20366                                  	.L_if_end_56ca:
 20367 000102D6 C9                      	leave
 20368 000102D7 C22000                  	ret 8 * (2 + 2)
 20369                                  .L_lambda_simple_end_4fb0:	; new closure is in rax
 20370 000102DA 50                      	push rax
 20371 000102DB 488B4520                	mov rax, PARAM(0)
 20372 000102DF 8F00                    	pop qword [rax]
 20373 000102E1 48B8-                   	mov rax, sob_void
 20373 000102E3 [0000000000000000] 
 20374                                  
 20375 000102EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20376 000102F0 E8BF250000              	call malloc
 20377 000102F5 50                      	push rax
 20378 000102F6 BF08000000              	mov rdi, 8 * 1	; new rib
 20379 000102FB E8B4250000              	call malloc
 20380 00010300 50                      	push rax
 20381 00010301 BF10000000              	mov rdi, 8 * 2	; extended env
 20382 00010306 E8A9250000              	call malloc
 20383 0001030B 488B7D10                	mov rdi, ENV
 20384 0001030F BE00000000              	mov rsi, 0
 20385 00010314 BA01000000              	mov rdx, 1
 20386                                  .L_lambda_simple_env_loop_4fb2:	; ext_env[i + 1] <-- env[i]
 20387 00010319 4883FE01                	cmp rsi, 1
 20388 0001031D 7410                    	je .L_lambda_simple_env_end_4fb2
 20389 0001031F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 20390 00010323 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20391 00010327 48FFC6                  	inc rsi
 20392 0001032A 48FFC2                  	inc rdx
 20393 0001032D EBEA                    	jmp .L_lambda_simple_env_loop_4fb2
 20394                                  .L_lambda_simple_env_end_4fb2:
 20395 0001032F 5B                      	pop rbx
 20396 00010330 BE00000000              	mov rsi, 0
 20397                                  .L_lambda_simple_params_loop_4fb2:	; copy params
 20398 00010335 4883FE01                	cmp rsi, 1
 20399 00010339 740E                    	je .L_lambda_simple_params_end_4fb2
 20400 0001033B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20401 00010340 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20402 00010344 48FFC6                  	inc rsi
 20403 00010347 EBEC                    	jmp .L_lambda_simple_params_loop_4fb2
 20404                                  .L_lambda_simple_params_end_4fb2:
 20405 00010349 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20406 0001034C 4889C3                  	mov rbx, rax
 20407 0001034F 58                      	pop rax
 20408 00010350 C60005                  	mov byte [rax], T_closure
 20409 00010353 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20410 00010357 48C74009[64030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb2
 20411 0001035F E9A6000000              	jmp .L_lambda_simple_end_4fb2
 20412                                  .L_lambda_simple_code_4fb2:	; lambda-simple body
 20413 00010364 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20414 0001036A 740B                    	je .L_lambda_simple_arity_check_ok_4fb2
 20415 0001036C FF742410                	push qword [rsp + 8 * 2]
 20416 00010370 6A01                    	push 1
 20417 00010372 E9F6240000              	jmp L_error_incorrect_arity_simple
 20418                                  .L_lambda_simple_arity_check_ok_4fb2:
 20419 00010377 C8000000                	enter 0, 0
 20420 0001037B 488D0425[20000000]      	lea rax, [32 + L_constants]
 20421 00010383 50                      	push rax
 20422 00010384 488B4520                	mov rax, PARAM(0)
 20423 00010388 50                      	push rax
 20424 00010389 6A02                    	push 2
 20425 0001038B 488B4510                	mov rax, qword [rbp + 8*2]
 20426 0001038F 488B00                  	mov rax, qword [rax + 8*0]
 20427 00010392 488B00                  	mov rax, qword [rax + 8*0]
 20428 00010395 488B00                  	mov rax, qword [rax]
 20429                                  	assert_closure(rax)
    65 00010398 803805              <1>  cmp byte [%1], %2
    66 0001039B 0F85933D0000        <1>  jne L_error_incorrect_type
 20430 000103A1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20431 000103A5 53                      	push rbx
 20432 000103A6 FF7508                  	push RET_ADDR
 20433 000103A9 488B7D18                	mov rdi, COUNT
 20434 000103AD 4883C703                	add rdi, 3
 20435 000103B1 48C1E703                	shl rdi, 3
 20436 000103B5 4801EF                  	add rdi, rbp
 20437 000103B8 488B6D00                	mov rbp, OLD_RDP
 20438 000103BC BE00000000              	mov rsi, 0
 20439                                  .L_tc_recycle_frame_loop_5d3e:	 ; start recycle frame loop
 20440 000103C1 4883FE05                	cmp rsi, 5
 20441 000103C5 7427                    	je .L_tc_recycle_frame_done_5d3e
 20442 000103C7 B904000000              	mov rcx, 4
 20443 000103CC 4829F1                  	sub rcx, rsi
 20444 000103CF 48C1E103                	shl rcx, 3
 20445 000103D3 4801E1                  	add rcx, rsp ; rcx is the address to move
 20446 000103D6 4889F3                  	mov rbx, rsi
 20447 000103D9 48C1E303                	shl rbx, 3
 20448 000103DD 48F7DB                  	neg rbx
 20449 000103E0 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20450 000103E3 488B09                  	mov rcx, [rcx]
 20451 000103E6 48890B                  	mov [rbx], rcx
 20452 000103E9 48FFC6                  	inc rsi
 20453 000103EC EBD3                    	jmp .L_tc_recycle_frame_loop_5d3e
 20454                                  .L_tc_recycle_frame_done_5d3e:	 ; end recycle frame loop
 20455 000103EE BB04000000              	mov rbx, 4
 20456 000103F3 48C1E303                	shl rbx, 3
 20457 000103F7 48F7DB                  	neg rbx
 20458 000103FA 4801FB                  	add rbx, rdi
 20459 000103FD 4889DC                  	mov rsp, rbx
 20460 00010400 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20461 00010404 FFE3                    	jmp rbx
 20462 00010406 C9                      	leave
 20463 00010407 C21800                  	ret 8 * (2 + 1)
 20464                                  .L_lambda_simple_end_4fb2:	; new closure is in rax
 20465 0001040A C9                      	leave
 20466 0001040B C21800                  	ret 8 * (2 + 1)
 20467                                  .L_lambda_simple_end_4faf:	; new closure is in rax
 20468                                  	assert_closure(rax)
    65 0001040E 803805              <1>  cmp byte [%1], %2
    66 00010411 0F851D3D0000        <1>  jne L_error_incorrect_type
 20469 00010417 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20470 0001041B 53                      	push rbx
 20471 0001041C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20472 00010420 FFD3                    	call rbx
 20473 00010422 48890425[38040000]      	mov qword [free_var_135], rax
 20474 0001042A 48B8-                   	mov rax, sob_void
 20474 0001042C [0000000000000000] 
 20475                                  
 20476 00010434 4889C7                  	mov rdi, rax
 20477 00010437 E889240000              	call print_sexpr_if_not_void
 20478                                  
 20479 0001043C 488D0425[17000000]      	lea rax, [23 + L_constants]
 20480 00010444 50                      	push rax
 20481 00010445 6A01                    	push 1
 20482 00010447 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20483 0001044C E863240000              	call malloc
 20484 00010451 50                      	push rax
 20485 00010452 BF00000000              	mov rdi, 8 * 0	; new rib
 20486 00010457 E858240000              	call malloc
 20487 0001045C 50                      	push rax
 20488 0001045D BF08000000              	mov rdi, 8 * 1	; extended env
 20489 00010462 E84D240000              	call malloc
 20490 00010467 488B7D10                	mov rdi, ENV
 20491 0001046B BE00000000              	mov rsi, 0
 20492 00010470 BA01000000              	mov rdx, 1
 20493                                  .L_lambda_simple_env_loop_4fb3:	; ext_env[i + 1] <-- env[i]
 20494 00010475 4883FE00                	cmp rsi, 0
 20495 00010479 7410                    	je .L_lambda_simple_env_end_4fb3
 20496 0001047B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 20497 0001047F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20498 00010483 48FFC6                  	inc rsi
 20499 00010486 48FFC2                  	inc rdx
 20500 00010489 EBEA                    	jmp .L_lambda_simple_env_loop_4fb3
 20501                                  .L_lambda_simple_env_end_4fb3:
 20502 0001048B 5B                      	pop rbx
 20503 0001048C BE00000000              	mov rsi, 0
 20504                                  .L_lambda_simple_params_loop_4fb3:	; copy params
 20505 00010491 4883FE00                	cmp rsi, 0
 20506 00010495 740E                    	je .L_lambda_simple_params_end_4fb3
 20507 00010497 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20508 0001049C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20509 000104A0 48FFC6                  	inc rsi
 20510 000104A3 EBEC                    	jmp .L_lambda_simple_params_loop_4fb3
 20511                                  .L_lambda_simple_params_end_4fb3:
 20512 000104A5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20513 000104A8 4889C3                  	mov rbx, rax
 20514 000104AB 58                      	pop rax
 20515 000104AC C60005                  	mov byte [rax], T_closure
 20516 000104AF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20517 000104B3 48C74009[C0040100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb3
 20518 000104BB E984040000              	jmp .L_lambda_simple_end_4fb3
 20519                                  .L_lambda_simple_code_4fb3:	; lambda-simple body
 20520 000104C0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20521 000104C6 740B                    	je .L_lambda_simple_arity_check_ok_4fb3
 20522 000104C8 FF742410                	push qword [rsp + 8 * 2]
 20523 000104CC 6A01                    	push 1
 20524 000104CE E99A230000              	jmp L_error_incorrect_arity_simple
 20525                                  .L_lambda_simple_arity_check_ok_4fb3:
 20526 000104D3 C8000000                	enter 0, 0
 20527 000104D7 BF11000000              	mov qword rdi, (1 + 8 + 8)
 20528 000104DC E8D3230000              	call malloc
 20529 000104E1 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 20530 000104E5 48B8-                   	mov rax, sob_void
 20530 000104E7 [0000000000000000] 
 20531                                  
 20532 000104EF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20533 000104F4 E8BB230000              	call malloc
 20534 000104F9 50                      	push rax
 20535 000104FA BF08000000              	mov rdi, 8 * 1	; new rib
 20536 000104FF E8B0230000              	call malloc
 20537 00010504 50                      	push rax
 20538 00010505 BF10000000              	mov rdi, 8 * 2	; extended env
 20539 0001050A E8A5230000              	call malloc
 20540 0001050F 488B7D10                	mov rdi, ENV
 20541 00010513 BE00000000              	mov rsi, 0
 20542 00010518 BA01000000              	mov rdx, 1
 20543                                  .L_lambda_simple_env_loop_4fb4:	; ext_env[i + 1] <-- env[i]
 20544 0001051D 4883FE01                	cmp rsi, 1
 20545 00010521 7410                    	je .L_lambda_simple_env_end_4fb4
 20546 00010523 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 20547 00010527 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20548 0001052B 48FFC6                  	inc rsi
 20549 0001052E 48FFC2                  	inc rdx
 20550 00010531 EBEA                    	jmp .L_lambda_simple_env_loop_4fb4
 20551                                  .L_lambda_simple_env_end_4fb4:
 20552 00010533 5B                      	pop rbx
 20553 00010534 BE00000000              	mov rsi, 0
 20554                                  .L_lambda_simple_params_loop_4fb4:	; copy params
 20555 00010539 4883FE01                	cmp rsi, 1
 20556 0001053D 740E                    	je .L_lambda_simple_params_end_4fb4
 20557 0001053F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20558 00010544 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20559 00010548 48FFC6                  	inc rsi
 20560 0001054B EBEC                    	jmp .L_lambda_simple_params_loop_4fb4
 20561                                  .L_lambda_simple_params_end_4fb4:
 20562 0001054D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20563 00010550 4889C3                  	mov rbx, rax
 20564 00010553 58                      	pop rax
 20565 00010554 C60005                  	mov byte [rax], T_closure
 20566 00010557 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20567 0001055B 48C74009[68050100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb4
 20568 00010563 E9A8020000              	jmp .L_lambda_simple_end_4fb4
 20569                                  .L_lambda_simple_code_4fb4:	; lambda-simple body
 20570 00010568 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20571 0001056E 740B                    	je .L_lambda_simple_arity_check_ok_4fb4
 20572 00010570 FF742410                	push qword [rsp + 8 * 2]
 20573 00010574 6A02                    	push 2
 20574 00010576 E9F2220000              	jmp L_error_incorrect_arity_simple
 20575                                  .L_lambda_simple_arity_check_ok_4fb4:
 20576 0001057B C8000000                	enter 0, 0
 20577 0001057F 488B4520                	mov rax, PARAM(0)
 20578 00010583 50                      	push rax
 20579 00010584 6A01                    	push 1
 20580 00010586 488B0425[00000000]      	mov rax, qword [free_var_0]
 20581                                  	assert_closure(rax)
    65 0001058E 803805              <1>  cmp byte [%1], %2
    66 00010591 0F859D3B0000        <1>  jne L_error_incorrect_type
 20582 00010597 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20583 0001059B 53                      	push rbx
 20584 0001059C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20585 000105A0 FFD3                    	call rbx
 20586 000105A2 483D[02000000]          	cmp rax, sob_boolean_false
 20587 000105A8 0F848B000000            	je .L_if_else_56cb
 20588 000105AE 488D0425[04000000]      	lea rax, [4 + L_constants]
 20589 000105B6 50                      	push rax
 20590 000105B7 488B4528                	mov rax, PARAM(1)
 20591 000105BB 50                      	push rax
 20592 000105BC 6A02                    	push 2
 20593 000105BE 488B0425[A0010000]      	mov rax, qword [free_var_52]
 20594                                  	assert_closure(rax)
    65 000105C6 803805              <1>  cmp byte [%1], %2
    66 000105C9 0F85653B0000        <1>  jne L_error_incorrect_type
 20595 000105CF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20596 000105D3 53                      	push rbx
 20597 000105D4 FF7508                  	push RET_ADDR
 20598 000105D7 488B7D18                	mov rdi, COUNT
 20599 000105DB 4883C703                	add rdi, 3
 20600 000105DF 48C1E703                	shl rdi, 3
 20601 000105E3 4801EF                  	add rdi, rbp
 20602 000105E6 488B6D00                	mov rbp, OLD_RDP
 20603 000105EA BE00000000              	mov rsi, 0
 20604                                  .L_tc_recycle_frame_loop_5d3f:	 ; start recycle frame loop
 20605 000105EF 4883FE05                	cmp rsi, 5
 20606 000105F3 7427                    	je .L_tc_recycle_frame_done_5d3f
 20607 000105F5 B904000000              	mov rcx, 4
 20608 000105FA 4829F1                  	sub rcx, rsi
 20609 000105FD 48C1E103                	shl rcx, 3
 20610 00010601 4801E1                  	add rcx, rsp ; rcx is the address to move
 20611 00010604 4889F3                  	mov rbx, rsi
 20612 00010607 48C1E303                	shl rbx, 3
 20613 0001060B 48F7DB                  	neg rbx
 20614 0001060E 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20615 00010611 488B09                  	mov rcx, [rcx]
 20616 00010614 48890B                  	mov [rbx], rcx
 20617 00010617 48FFC6                  	inc rsi
 20618 0001061A EBD3                    	jmp .L_tc_recycle_frame_loop_5d3f
 20619                                  .L_tc_recycle_frame_done_5d3f:	 ; end recycle frame loop
 20620 0001061C BB04000000              	mov rbx, 4
 20621 00010621 48C1E303                	shl rbx, 3
 20622 00010625 48F7DB                  	neg rbx
 20623 00010628 4801FB                  	add rbx, rdi
 20624 0001062B 4889DC                  	mov rsp, rbx
 20625 0001062E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20626 00010632 FFE3                    	jmp rbx
 20627 00010634 E9D3010000              	jmp .L_if_end_56cb
 20628                                  	.L_if_else_56cb:
 20629 00010639 488D0425[80000000]      	lea rax, [128 + L_constants]
 20630 00010641 50                      	push rax
 20631 00010642 488B4528                	mov rax, PARAM(1)
 20632 00010646 50                      	push rax
 20633 00010647 6A02                    	push 2
 20634 00010649 488B0425[08030000]      	mov rax, qword [free_var_97]
 20635                                  	assert_closure(rax)
    65 00010651 803805              <1>  cmp byte [%1], %2
    66 00010654 0F85DA3A0000        <1>  jne L_error_incorrect_type
 20636 0001065A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20637 0001065E 53                      	push rbx
 20638 0001065F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20639 00010663 FFD3                    	call rbx
 20640 00010665 50                      	push rax
 20641 00010666 488B4520                	mov rax, PARAM(0)
 20642 0001066A 50                      	push rax
 20643 0001066B 6A01                    	push 1
 20644 0001066D 488B0425[88000000]      	mov rax, qword [free_var_17]
 20645                                  	assert_closure(rax)
    65 00010675 803805              <1>  cmp byte [%1], %2
    66 00010678 0F85B63A0000        <1>  jne L_error_incorrect_type
 20646 0001067E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20647 00010682 53                      	push rbx
 20648 00010683 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20649 00010687 FFD3                    	call rbx
 20650 00010689 50                      	push rax
 20651 0001068A 6A02                    	push 2
 20652 0001068C 488B4510                	mov rax, qword [rbp + 8*2]
 20653 00010690 488B00                  	mov rax, qword [rax + 8*0]
 20654 00010693 488B00                  	mov rax, qword [rax + 8*0]
 20655 00010696 488B00                  	mov rax, qword [rax]
 20656                                  	assert_closure(rax)
    65 00010699 803805              <1>  cmp byte [%1], %2
    66 0001069C 0F85923A0000        <1>  jne L_error_incorrect_type
 20657 000106A2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20658 000106A6 53                      	push rbx
 20659 000106A7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20660 000106AB FFD3                    	call rbx
 20661 000106AD 50                      	push rax
 20662 000106AE 6A01                    	push 1
 20663 000106B0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20664 000106B5 E8FA210000              	call malloc
 20665 000106BA 50                      	push rax
 20666 000106BB BF10000000              	mov rdi, 8 * 2	; new rib
 20667 000106C0 E8EF210000              	call malloc
 20668 000106C5 50                      	push rax
 20669 000106C6 BF18000000              	mov rdi, 8 * 3	; extended env
 20670 000106CB E8E4210000              	call malloc
 20671 000106D0 488B7D10                	mov rdi, ENV
 20672 000106D4 BE00000000              	mov rsi, 0
 20673 000106D9 BA01000000              	mov rdx, 1
 20674                                  .L_lambda_simple_env_loop_4fb5:	; ext_env[i + 1] <-- env[i]
 20675 000106DE 4883FE02                	cmp rsi, 2
 20676 000106E2 7410                    	je .L_lambda_simple_env_end_4fb5
 20677 000106E4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 20678 000106E8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20679 000106EC 48FFC6                  	inc rsi
 20680 000106EF 48FFC2                  	inc rdx
 20681 000106F2 EBEA                    	jmp .L_lambda_simple_env_loop_4fb5
 20682                                  .L_lambda_simple_env_end_4fb5:
 20683 000106F4 5B                      	pop rbx
 20684 000106F5 BE00000000              	mov rsi, 0
 20685                                  .L_lambda_simple_params_loop_4fb5:	; copy params
 20686 000106FA 4883FE02                	cmp rsi, 2
 20687 000106FE 740E                    	je .L_lambda_simple_params_end_4fb5
 20688 00010700 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20689 00010705 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20690 00010709 48FFC6                  	inc rsi
 20691 0001070C EBEC                    	jmp .L_lambda_simple_params_loop_4fb5
 20692                                  .L_lambda_simple_params_end_4fb5:
 20693 0001070E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20694 00010711 4889C3                  	mov rbx, rax
 20695 00010714 58                      	pop rax
 20696 00010715 C60005                  	mov byte [rax], T_closure
 20697 00010718 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20698 0001071C 48C74009[26070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb5
 20699 00010724 EB78                    	jmp .L_lambda_simple_end_4fb5
 20700                                  .L_lambda_simple_code_4fb5:	; lambda-simple body
 20701 00010726 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20702 0001072C 740B                    	je .L_lambda_simple_arity_check_ok_4fb5
 20703 0001072E FF742410                	push qword [rsp + 8 * 2]
 20704 00010732 6A01                    	push 1
 20705 00010734 E934210000              	jmp L_error_incorrect_arity_simple
 20706                                  .L_lambda_simple_arity_check_ok_4fb5:
 20707 00010739 C8000000                	enter 0, 0
 20708 0001073D 488B4510                	mov rax, qword [rbp + 8*2]
 20709 00010741 488B00                  	mov rax, qword [rax + 8*0]
 20710 00010744 488B00                  	mov rax, qword [rax + 8*0]
 20711 00010747 50                      	push rax
 20712 00010748 6A01                    	push 1
 20713 0001074A 488B0425[80000000]      	mov rax, qword [free_var_16]
 20714                                  	assert_closure(rax)
    65 00010752 803805              <1>  cmp byte [%1], %2
    66 00010755 0F85D9390000        <1>  jne L_error_incorrect_type
 20715 0001075B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20716 0001075F 53                      	push rbx
 20717 00010760 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20718 00010764 FFD3                    	call rbx
 20719 00010766 50                      	push rax
 20720 00010767 488B4510                	mov rax, qword [rbp + 8*2]
 20721 0001076B 488B00                  	mov rax, qword [rax + 8*0]
 20722 0001076E 488B4008                	mov rax, qword [rax + 8*1]
 20723 00010772 50                      	push rax
 20724 00010773 488B4520                	mov rax, PARAM(0)
 20725 00010777 50                      	push rax
 20726 00010778 6A03                    	push 3
 20727 0001077A 488B0425[90010000]      	mov rax, qword [free_var_50]
 20728                                  	assert_closure(rax)
    65 00010782 803805              <1>  cmp byte [%1], %2
    66 00010785 0F85A9390000        <1>  jne L_error_incorrect_type
 20729 0001078B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20730 0001078F 53                      	push rbx
 20731 00010790 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20732 00010794 FFD3                    	call rbx
 20733                                  
 20734 00010796 488B4520                	mov rax, PARAM(0)
 20735 0001079A C9                      	leave
 20736 0001079B C21800                  	ret 8 * (2 + 1)
 20737                                  .L_lambda_simple_end_4fb5:	; new closure is in rax
 20738                                  	assert_closure(rax)
    65 0001079E 803805              <1>  cmp byte [%1], %2
    66 000107A1 0F858D390000        <1>  jne L_error_incorrect_type
 20739 000107A7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20740 000107AB 53                      	push rbx
 20741 000107AC FF7508                  	push RET_ADDR
 20742 000107AF 488B7D18                	mov rdi, COUNT
 20743 000107B3 4883C703                	add rdi, 3
 20744 000107B7 48C1E703                	shl rdi, 3
 20745 000107BB 4801EF                  	add rdi, rbp
 20746 000107BE 488B6D00                	mov rbp, OLD_RDP
 20747 000107C2 BE00000000              	mov rsi, 0
 20748                                  .L_tc_recycle_frame_loop_5d40:	 ; start recycle frame loop
 20749 000107C7 4883FE04                	cmp rsi, 4
 20750 000107CB 7427                    	je .L_tc_recycle_frame_done_5d40
 20751 000107CD B903000000              	mov rcx, 3
 20752 000107D2 4829F1                  	sub rcx, rsi
 20753 000107D5 48C1E103                	shl rcx, 3
 20754 000107D9 4801E1                  	add rcx, rsp ; rcx is the address to move
 20755 000107DC 4889F3                  	mov rbx, rsi
 20756 000107DF 48C1E303                	shl rbx, 3
 20757 000107E3 48F7DB                  	neg rbx
 20758 000107E6 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20759 000107E9 488B09                  	mov rcx, [rcx]
 20760 000107EC 48890B                  	mov [rbx], rcx
 20761 000107EF 48FFC6                  	inc rsi
 20762 000107F2 EBD3                    	jmp .L_tc_recycle_frame_loop_5d40
 20763                                  .L_tc_recycle_frame_done_5d40:	 ; end recycle frame loop
 20764 000107F4 BB03000000              	mov rbx, 3
 20765 000107F9 48C1E303                	shl rbx, 3
 20766 000107FD 48F7DB                  	neg rbx
 20767 00010800 4801FB                  	add rbx, rdi
 20768 00010803 4889DC                  	mov rsp, rbx
 20769 00010806 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20770 0001080A FFE3                    	jmp rbx
 20771                                  	.L_if_end_56cb:
 20772 0001080C C9                      	leave
 20773 0001080D C22000                  	ret 8 * (2 + 2)
 20774                                  .L_lambda_simple_end_4fb4:	; new closure is in rax
 20775 00010810 50                      	push rax
 20776 00010811 488B4520                	mov rax, PARAM(0)
 20777 00010815 8F00                    	pop qword [rax]
 20778 00010817 48B8-                   	mov rax, sob_void
 20778 00010819 [0000000000000000] 
 20779                                  
 20780 00010821 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20781 00010826 E889200000              	call malloc
 20782 0001082B 50                      	push rax
 20783 0001082C BF08000000              	mov rdi, 8 * 1	; new rib
 20784 00010831 E87E200000              	call malloc
 20785 00010836 50                      	push rax
 20786 00010837 BF10000000              	mov rdi, 8 * 2	; extended env
 20787 0001083C E873200000              	call malloc
 20788 00010841 488B7D10                	mov rdi, ENV
 20789 00010845 BE00000000              	mov rsi, 0
 20790 0001084A BA01000000              	mov rdx, 1
 20791                                  .L_lambda_simple_env_loop_4fb6:	; ext_env[i + 1] <-- env[i]
 20792 0001084F 4883FE01                	cmp rsi, 1
 20793 00010853 7410                    	je .L_lambda_simple_env_end_4fb6
 20794 00010855 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 20795 00010859 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20796 0001085D 48FFC6                  	inc rsi
 20797 00010860 48FFC2                  	inc rdx
 20798 00010863 EBEA                    	jmp .L_lambda_simple_env_loop_4fb6
 20799                                  .L_lambda_simple_env_end_4fb6:
 20800 00010865 5B                      	pop rbx
 20801 00010866 BE00000000              	mov rsi, 0
 20802                                  .L_lambda_simple_params_loop_4fb6:	; copy params
 20803 0001086B 4883FE01                	cmp rsi, 1
 20804 0001086F 740E                    	je .L_lambda_simple_params_end_4fb6
 20805 00010871 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20806 00010876 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20807 0001087A 48FFC6                  	inc rsi
 20808 0001087D EBEC                    	jmp .L_lambda_simple_params_loop_4fb6
 20809                                  .L_lambda_simple_params_end_4fb6:
 20810 0001087F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20811 00010882 4889C3                  	mov rbx, rax
 20812 00010885 58                      	pop rax
 20813 00010886 C60005                  	mov byte [rax], T_closure
 20814 00010889 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20815 0001088D 48C74009[9A080100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb6
 20816 00010895 E9A6000000              	jmp .L_lambda_simple_end_4fb6
 20817                                  .L_lambda_simple_code_4fb6:	; lambda-simple body
 20818 0001089A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20819 000108A0 740B                    	je .L_lambda_simple_arity_check_ok_4fb6
 20820 000108A2 FF742410                	push qword [rsp + 8 * 2]
 20821 000108A6 6A01                    	push 1
 20822 000108A8 E9C01F0000              	jmp L_error_incorrect_arity_simple
 20823                                  .L_lambda_simple_arity_check_ok_4fb6:
 20824 000108AD C8000000                	enter 0, 0
 20825 000108B1 488D0425[20000000]      	lea rax, [32 + L_constants]
 20826 000108B9 50                      	push rax
 20827 000108BA 488B4520                	mov rax, PARAM(0)
 20828 000108BE 50                      	push rax
 20829 000108BF 6A02                    	push 2
 20830 000108C1 488B4510                	mov rax, qword [rbp + 8*2]
 20831 000108C5 488B00                  	mov rax, qword [rax + 8*0]
 20832 000108C8 488B00                  	mov rax, qword [rax + 8*0]
 20833 000108CB 488B00                  	mov rax, qword [rax]
 20834                                  	assert_closure(rax)
    65 000108CE 803805              <1>  cmp byte [%1], %2
    66 000108D1 0F855D380000        <1>  jne L_error_incorrect_type
 20835 000108D7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20836 000108DB 53                      	push rbx
 20837 000108DC FF7508                  	push RET_ADDR
 20838 000108DF 488B7D18                	mov rdi, COUNT
 20839 000108E3 4883C703                	add rdi, 3
 20840 000108E7 48C1E703                	shl rdi, 3
 20841 000108EB 4801EF                  	add rdi, rbp
 20842 000108EE 488B6D00                	mov rbp, OLD_RDP
 20843 000108F2 BE00000000              	mov rsi, 0
 20844                                  .L_tc_recycle_frame_loop_5d41:	 ; start recycle frame loop
 20845 000108F7 4883FE05                	cmp rsi, 5
 20846 000108FB 7427                    	je .L_tc_recycle_frame_done_5d41
 20847 000108FD B904000000              	mov rcx, 4
 20848 00010902 4829F1                  	sub rcx, rsi
 20849 00010905 48C1E103                	shl rcx, 3
 20850 00010909 4801E1                  	add rcx, rsp ; rcx is the address to move
 20851 0001090C 4889F3                  	mov rbx, rsi
 20852 0001090F 48C1E303                	shl rbx, 3
 20853 00010913 48F7DB                  	neg rbx
 20854 00010916 4801FB                  	add rbx, rdi ;rbx is the address to move to
 20855 00010919 488B09                  	mov rcx, [rcx]
 20856 0001091C 48890B                  	mov [rbx], rcx
 20857 0001091F 48FFC6                  	inc rsi
 20858 00010922 EBD3                    	jmp .L_tc_recycle_frame_loop_5d41
 20859                                  .L_tc_recycle_frame_done_5d41:	 ; end recycle frame loop
 20860 00010924 BB04000000              	mov rbx, 4
 20861 00010929 48C1E303                	shl rbx, 3
 20862 0001092D 48F7DB                  	neg rbx
 20863 00010930 4801FB                  	add rbx, rdi
 20864 00010933 4889DC                  	mov rsp, rbx
 20865 00010936 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20866 0001093A FFE3                    	jmp rbx
 20867 0001093C C9                      	leave
 20868 0001093D C21800                  	ret 8 * (2 + 1)
 20869                                  .L_lambda_simple_end_4fb6:	; new closure is in rax
 20870 00010940 C9                      	leave
 20871 00010941 C21800                  	ret 8 * (2 + 1)
 20872                                  .L_lambda_simple_end_4fb3:	; new closure is in rax
 20873                                  	assert_closure(rax)
    65 00010944 803805              <1>  cmp byte [%1], %2
    66 00010947 0F85E7370000        <1>  jne L_error_incorrect_type
 20874 0001094D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20875 00010951 53                      	push rbx
 20876 00010952 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20877 00010956 FFD3                    	call rbx
 20878 00010958 48890425[D0030000]      	mov qword [free_var_122], rax
 20879 00010960 48B8-                   	mov rax, sob_void
 20879 00010962 [0000000000000000] 
 20880                                  
 20881 0001096A 4889C7                  	mov rdi, rax
 20882 0001096D E8531F0000              	call print_sexpr_if_not_void
 20883                                  
 20884 00010972 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20885 00010977 E8381F0000              	call malloc
 20886 0001097C 50                      	push rax
 20887 0001097D BF00000000              	mov rdi, 8 * 0	; new rib
 20888 00010982 E82D1F0000              	call malloc
 20889 00010987 50                      	push rax
 20890 00010988 BF08000000              	mov rdi, 8 * 1	; extended env
 20891 0001098D E8221F0000              	call malloc
 20892 00010992 488B7D10                	mov rdi, ENV
 20893 00010996 BE00000000              	mov rsi, 0
 20894 0001099B BA01000000              	mov rdx, 1
 20895                                  .L_lambda_opt_env_loop_0c9b:	; ext_env[i + 1] <-- env[i]
 20896 000109A0 4883FE00                	cmp rsi, 0
 20897 000109A4 7410                    	je .L_lambda_opt_env_end_0c9b
 20898 000109A6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 20899 000109AA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20900 000109AE 48FFC6                  	inc rsi
 20901 000109B1 48FFC2                  	inc rdx
 20902 000109B4 EBEA                    	jmp .L_lambda_opt_env_loop_0c9b
 20903                                  .L_lambda_opt_env_end_0c9b:
 20904 000109B6 5B                      	pop rbx
 20905 000109B7 BE00000000              	mov rsi, 0
 20906                                  .L_lambda_opt_params_loop_0c9b:	; copy params
 20907 000109BC 4883FE00                	cmp rsi, 0
 20908 000109C0 740E                    	je .L_lambda_opt_params_end_0c9b
 20909 000109C2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20910 000109C7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20911 000109CB 48FFC6                  	inc rsi
 20912 000109CE EBEC                    	jmp .L_lambda_opt_params_loop_0c9b
 20913                                  .L_lambda_opt_params_end_0c9b:
 20914 000109D0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20915 000109D3 4889C3                  	mov rbx, rax
 20916 000109D6 58                      	pop rax
 20917 000109D7 C60005                  	mov byte [rax], T_closure
 20918 000109DA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20919 000109DE 48C74009[EB090100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0c9b
 20920 000109E6 E97A010000              	jmp .L_lambda_opt_end_0c9b
 20921                                  .L_lambda_opt_code_0c9b:	; lambda-opt body
 20922 000109EB 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
 20923 000109F0 4889FB                  	mov rbx, rdi
 20924 000109F3 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
 20925 000109F7 4883FB00                	cmp rbx, 0
 20926 000109FB 7F45                    	jg .L_lambda_opt_arity_check_more_0c9b
 20927                                  .L_lambda_opt_arity_check_exact_0c9b:	 ; if params in opt is exact
 20928 000109FD 4883EC08                	sub rsp, 8
 20929 00010A01 BE00000000              	mov rsi, 0 ; index
 20930                                  .L_lambda_opt_stack_enlarge_loop_0c9b:	 ; stack loop enlarge start
 20931 00010A06 4883FE03                	cmp rsi, 3
 20932 00010A0A 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_0c9b
 20933 00010A0C 4889F7                  	mov rdi, rsi
 20934 00010A0F 48FFC7                  	inc rdi
 20935 00010A12 48C1E703                	shl rdi, 3
 20936 00010A16 4801E7                  	add rdi, rsp
 20937 00010A19 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
 20938 00010A1C 4883EB08                	sub rbx, 8
 20939 00010A20 488B3F                  	mov rdi, [rdi]
 20940 00010A23 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
 20941 00010A26 48FFC6                  	inc rsi
 20942 00010A29 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_0c9b
 20943                                  .L_lambda_opt_stack_enlarge_loop_exit_0c9b:	 ; end of stack enlarge loop
 20944 00010A2B 48C7442418-             	mov qword [rsp + 3*8], sob_nil
 20944 00010A30 [01000000]         
 20945 00010A34 48C744241001000000      	mov qword [rsp + 2*8], 1
 20946 00010A3D E99E000000              	jmp .L_lambda_opt_stack_adjusted_0c9b
 20947                                  .L_lambda_opt_arity_check_more_0c9b:	 ; if params in opt is more
 20948 00010A42 48B8-                   	mov rax, sob_nil
 20948 00010A44 [0100000000000000] 
 20949 00010A4C 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
 20950 00010A4F 48FFCE                  	dec rsi
 20951                                  .L_lambda_opt_list_create_loop_0c9b:	; start of list creation loop
 20952 00010A52 4883FEFF                	cmp rsi, -1
 20953 00010A56 7422                    	je .L_lambda_opt_list_create_loop_exit_0c9b
 20954 00010A58 488D4E03                	lea rcx, [rsi + (3 + 0)]
 20955 00010A5C 48C1E103                	shl rcx, 3
 20956 00010A60 4801E1                  	add rcx, rsp
 20957 00010A63 488B09                  	mov rcx, [rcx]
 20958 00010A66 56                      	push rsi ; save params
 20959 00010A67 53                      	push rbx
 20960                                  
 20961 00010A68 50                      	push rax ; cdr
 20962 00010A69 51                      	push rcx ; car
 20963 00010A6A 6A02                    	push qword 2 ; push num of args
 20964 00010A6C 6A01                    	push qword 1 ; push garbage as env
 20965 00010A6E E8C8270000              	call L_code_ptr_cons
 20966                                  
 20967 00010A73 5B                      	pop rbx ; restore params
 20968 00010A74 5E                      	pop rsi
 20969 00010A75 48FFCE                  	dec rsi
 20970 00010A78 EBD8                    	jmp .L_lambda_opt_list_create_loop_0c9b
 20971                                  .L_lambda_opt_list_create_loop_exit_0c9b:	; end of list creation loop
 20972 00010A7A 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 20973 00010A7F 4883C302                	add rbx, 2
 20974 00010A83 4889DF                  	mov rdi, rbx
 20975 00010A86 48C1E703                	shl rdi,3
 20976 00010A8A 4801E7                  	add rdi, rsp
 20977 00010A8D 488907                  	mov [rdi], rax
 20978 00010A90 BE00000000              	mov rsi, 0 ;index
 20979                                  .L_lambda_opt_stack_shrink_loop_0c9b:	; start of stack shrink loop
 20980 00010A95 4883FE03                	cmp rsi, 3
 20981 00010A99 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_0c9b
 20982 00010A9B BF02000000              	mov rdi, 2
 20983 00010AA0 4829F7                  	sub rdi, rsi; the index of the current stack member to move
 20984 00010AA3 4889D9                  	mov rcx, rbx
 20985 00010AA6 4829F1                  	sub rcx, rsi
 20986 00010AA9 48FFC9                  	dec rcx ; the index of the target stack place to put the member
 20987 00010AAC 4889FA                  	mov rdx, rdi
 20988 00010AAF 48C1E203                	shl rdx, 3
 20989 00010AB3 4801E2                  	add rdx, rsp
 20990 00010AB6 48C1E103                	shl rcx, 3
 20991 00010ABA 4801E1                  	add rcx, rsp
 20992 00010ABD 488B12                  	mov rdx, [rdx]
 20993 00010AC0 488911                  	mov [rcx], rdx
 20994 00010AC3 48FFC6                  	inc rsi
 20995 00010AC6 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_0c9b
 20996                                  .L_lambda_opt_stack_shrink_loop_exit_0c9b:	; end of stack shrink loop
 20997 00010AC8 4883EB02                	sub rbx, 2 ; rbx has number of args
 20998 00010ACC 4883EB01                	sub rbx, 1
 20999 00010AD0 48C1E303                	shl rbx, 3
 21000 00010AD4 4801DC                  	add rsp, rbx
 21001 00010AD7 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 21002                                  .L_lambda_opt_stack_adjusted_0c9b:
 21003 00010AE0 C8000000                	enter 0, 0
 21004 00010AE4 488B4520                	mov rax, PARAM(0)
 21005 00010AE8 50                      	push rax
 21006 00010AE9 6A01                    	push 1
 21007 00010AEB 488B0425[38040000]      	mov rax, qword [free_var_135]
 21008                                  	assert_closure(rax)
    65 00010AF3 803805              <1>  cmp byte [%1], %2
    66 00010AF6 0F8538360000        <1>  jne L_error_incorrect_type
 21009 00010AFC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21010 00010B00 53                      	push rbx
 21011 00010B01 FF7508                  	push RET_ADDR
 21012 00010B04 488B7D18                	mov rdi, COUNT
 21013 00010B08 4883C703                	add rdi, 3
 21014 00010B0C 48C1E703                	shl rdi, 3
 21015 00010B10 4801EF                  	add rdi, rbp
 21016 00010B13 488B6D00                	mov rbp, OLD_RDP
 21017 00010B17 BE00000000              	mov rsi, 0
 21018                                  .L_tc_recycle_frame_loop_5d42:	 ; start recycle frame loop
 21019 00010B1C 4883FE04                	cmp rsi, 4
 21020 00010B20 7427                    	je .L_tc_recycle_frame_done_5d42
 21021 00010B22 B903000000              	mov rcx, 3
 21022 00010B27 4829F1                  	sub rcx, rsi
 21023 00010B2A 48C1E103                	shl rcx, 3
 21024 00010B2E 4801E1                  	add rcx, rsp ; rcx is the address to move
 21025 00010B31 4889F3                  	mov rbx, rsi
 21026 00010B34 48C1E303                	shl rbx, 3
 21027 00010B38 48F7DB                  	neg rbx
 21028 00010B3B 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21029 00010B3E 488B09                  	mov rcx, [rcx]
 21030 00010B41 48890B                  	mov [rbx], rcx
 21031 00010B44 48FFC6                  	inc rsi
 21032 00010B47 EBD3                    	jmp .L_tc_recycle_frame_loop_5d42
 21033                                  .L_tc_recycle_frame_done_5d42:	 ; end recycle frame loop
 21034 00010B49 BB03000000              	mov rbx, 3
 21035 00010B4E 48C1E303                	shl rbx, 3
 21036 00010B52 48F7DB                  	neg rbx
 21037 00010B55 4801FB                  	add rbx, rdi
 21038 00010B58 4889DC                  	mov rsp, rbx
 21039 00010B5B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21040 00010B5F FFE3                    	jmp rbx
 21041 00010B61 C9                      	leave
 21042 00010B62 C21800                  	ret AND_KILL_FRAME(1)
 21043                                  .L_lambda_opt_end_0c9b:	; new closure is in rax
 21044 00010B65 48890425[40040000]      	mov qword [free_var_136], rax
 21045 00010B6D 48B8-                   	mov rax, sob_void
 21045 00010B6F [0000000000000000] 
 21046                                  
 21047 00010B77 4889C7                  	mov rdi, rax
 21048 00010B7A E8461D0000              	call print_sexpr_if_not_void
 21049                                  
 21050 00010B7F 488D0425[17000000]      	lea rax, [23 + L_constants]
 21051 00010B87 50                      	push rax
 21052 00010B88 6A01                    	push 1
 21053 00010B8A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21054 00010B8F E8201D0000              	call malloc
 21055 00010B94 50                      	push rax
 21056 00010B95 BF00000000              	mov rdi, 8 * 0	; new rib
 21057 00010B9A E8151D0000              	call malloc
 21058 00010B9F 50                      	push rax
 21059 00010BA0 BF08000000              	mov rdi, 8 * 1	; extended env
 21060 00010BA5 E80A1D0000              	call malloc
 21061 00010BAA 488B7D10                	mov rdi, ENV
 21062 00010BAE BE00000000              	mov rsi, 0
 21063 00010BB3 BA01000000              	mov rdx, 1
 21064                                  .L_lambda_simple_env_loop_4fb7:	; ext_env[i + 1] <-- env[i]
 21065 00010BB8 4883FE00                	cmp rsi, 0
 21066 00010BBC 7410                    	je .L_lambda_simple_env_end_4fb7
 21067 00010BBE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 21068 00010BC2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21069 00010BC6 48FFC6                  	inc rsi
 21070 00010BC9 48FFC2                  	inc rdx
 21071 00010BCC EBEA                    	jmp .L_lambda_simple_env_loop_4fb7
 21072                                  .L_lambda_simple_env_end_4fb7:
 21073 00010BCE 5B                      	pop rbx
 21074 00010BCF BE00000000              	mov rsi, 0
 21075                                  .L_lambda_simple_params_loop_4fb7:	; copy params
 21076 00010BD4 4883FE00                	cmp rsi, 0
 21077 00010BD8 740E                    	je .L_lambda_simple_params_end_4fb7
 21078 00010BDA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21079 00010BDF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21080 00010BE3 48FFC6                  	inc rsi
 21081 00010BE6 EBEC                    	jmp .L_lambda_simple_params_loop_4fb7
 21082                                  .L_lambda_simple_params_end_4fb7:
 21083 00010BE8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21084 00010BEB 4889C3                  	mov rbx, rax
 21085 00010BEE 58                      	pop rax
 21086 00010BEF C60005                  	mov byte [rax], T_closure
 21087 00010BF2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21088 00010BF6 48C74009[030C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb7
 21089 00010BFE E955030000              	jmp .L_lambda_simple_end_4fb7
 21090                                  .L_lambda_simple_code_4fb7:	; lambda-simple body
 21091 00010C03 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21092 00010C09 740B                    	je .L_lambda_simple_arity_check_ok_4fb7
 21093 00010C0B FF742410                	push qword [rsp + 8 * 2]
 21094 00010C0F 6A01                    	push 1
 21095 00010C11 E9571C0000              	jmp L_error_incorrect_arity_simple
 21096                                  .L_lambda_simple_arity_check_ok_4fb7:
 21097 00010C16 C8000000                	enter 0, 0
 21098 00010C1A BF11000000              	mov qword rdi, (1 + 8 + 8)
 21099 00010C1F E8901C0000              	call malloc
 21100 00010C24 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 21101 00010C28 48B8-                   	mov rax, sob_void
 21101 00010C2A [0000000000000000] 
 21102                                  
 21103 00010C32 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21104 00010C37 E8781C0000              	call malloc
 21105 00010C3C 50                      	push rax
 21106 00010C3D BF08000000              	mov rdi, 8 * 1	; new rib
 21107 00010C42 E86D1C0000              	call malloc
 21108 00010C47 50                      	push rax
 21109 00010C48 BF10000000              	mov rdi, 8 * 2	; extended env
 21110 00010C4D E8621C0000              	call malloc
 21111 00010C52 488B7D10                	mov rdi, ENV
 21112 00010C56 BE00000000              	mov rsi, 0
 21113 00010C5B BA01000000              	mov rdx, 1
 21114                                  .L_lambda_simple_env_loop_4fb8:	; ext_env[i + 1] <-- env[i]
 21115 00010C60 4883FE01                	cmp rsi, 1
 21116 00010C64 7410                    	je .L_lambda_simple_env_end_4fb8
 21117 00010C66 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 21118 00010C6A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21119 00010C6E 48FFC6                  	inc rsi
 21120 00010C71 48FFC2                  	inc rdx
 21121 00010C74 EBEA                    	jmp .L_lambda_simple_env_loop_4fb8
 21122                                  .L_lambda_simple_env_end_4fb8:
 21123 00010C76 5B                      	pop rbx
 21124 00010C77 BE00000000              	mov rsi, 0
 21125                                  .L_lambda_simple_params_loop_4fb8:	; copy params
 21126 00010C7C 4883FE01                	cmp rsi, 1
 21127 00010C80 740E                    	je .L_lambda_simple_params_end_4fb8
 21128 00010C82 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21129 00010C87 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21130 00010C8B 48FFC6                  	inc rsi
 21131 00010C8E EBEC                    	jmp .L_lambda_simple_params_loop_4fb8
 21132                                  .L_lambda_simple_params_end_4fb8:
 21133 00010C90 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21134 00010C93 4889C3                  	mov rbx, rax
 21135 00010C96 58                      	pop rax
 21136 00010C97 C60005                  	mov byte [rax], T_closure
 21137 00010C9A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21138 00010C9E 48C74009[AB0C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb8
 21139 00010CA6 E955010000              	jmp .L_lambda_simple_end_4fb8
 21140                                  .L_lambda_simple_code_4fb8:	; lambda-simple body
 21141 00010CAB 48837C241003            	cmp qword [rsp + 8 * 2], 3
 21142 00010CB1 740B                    	je .L_lambda_simple_arity_check_ok_4fb8
 21143 00010CB3 FF742410                	push qword [rsp + 8 * 2]
 21144 00010CB7 6A03                    	push 3
 21145 00010CB9 E9AF1B0000              	jmp L_error_incorrect_arity_simple
 21146                                  .L_lambda_simple_arity_check_ok_4fb8:
 21147 00010CBE C8000000                	enter 0, 0
 21148 00010CC2 488B4530                	mov rax, PARAM(2)
 21149 00010CC6 50                      	push rax
 21150 00010CC7 488B4528                	mov rax, PARAM(1)
 21151 00010CCB 50                      	push rax
 21152 00010CCC 6A02                    	push 2
 21153 00010CCE 488B0425[30030000]      	mov rax, qword [free_var_102]
 21154                                  	assert_closure(rax)
    65 00010CD6 803805              <1>  cmp byte [%1], %2
    66 00010CD9 0F8555340000        <1>  jne L_error_incorrect_type
 21155 00010CDF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21156 00010CE3 53                      	push rbx
 21157 00010CE4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21158 00010CE8 FFD3                    	call rbx
 21159 00010CEA 483D[02000000]          	cmp rax, sob_boolean_false
 21160 00010CF0 0F84FE000000            	je .L_if_else_56cc
 21161 00010CF6 488B4530                	mov rax, PARAM(2)
 21162 00010CFA 50                      	push rax
 21163 00010CFB 488D0425[80000000]      	lea rax, [128 + L_constants]
 21164 00010D03 50                      	push rax
 21165 00010D04 488B4528                	mov rax, PARAM(1)
 21166 00010D08 50                      	push rax
 21167 00010D09 6A02                    	push 2
 21168 00010D0B 488B0425[08030000]      	mov rax, qword [free_var_97]
 21169                                  	assert_closure(rax)
    65 00010D13 803805              <1>  cmp byte [%1], %2
    66 00010D16 0F8518340000        <1>  jne L_error_incorrect_type
 21170 00010D1C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21171 00010D20 53                      	push rbx
 21172 00010D21 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21173 00010D25 FFD3                    	call rbx
 21174 00010D27 50                      	push rax
 21175 00010D28 488B4520                	mov rax, PARAM(0)
 21176 00010D2C 50                      	push rax
 21177 00010D2D 6A03                    	push 3
 21178 00010D2F 488B4510                	mov rax, qword [rbp + 8*2]
 21179 00010D33 488B00                  	mov rax, qword [rax + 8*0]
 21180 00010D36 488B00                  	mov rax, qword [rax + 8*0]
 21181 00010D39 488B00                  	mov rax, qword [rax]
 21182                                  	assert_closure(rax)
    65 00010D3C 803805              <1>  cmp byte [%1], %2
    66 00010D3F 0F85EF330000        <1>  jne L_error_incorrect_type
 21183 00010D45 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21184 00010D49 53                      	push rbx
 21185 00010D4A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21186 00010D4E FFD3                    	call rbx
 21187 00010D50 50                      	push rax
 21188 00010D51 488B4528                	mov rax, PARAM(1)
 21189 00010D55 50                      	push rax
 21190 00010D56 488B4520                	mov rax, PARAM(0)
 21191 00010D5A 50                      	push rax
 21192 00010D5B 6A02                    	push 2
 21193 00010D5D 488B0425[78010000]      	mov rax, qword [free_var_47]
 21194                                  	assert_closure(rax)
    65 00010D65 803805              <1>  cmp byte [%1], %2
    66 00010D68 0F85C6330000        <1>  jne L_error_incorrect_type
 21195 00010D6E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21196 00010D72 53                      	push rbx
 21197 00010D73 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21198 00010D77 FFD3                    	call rbx
 21199 00010D79 50                      	push rax
 21200 00010D7A 6A02                    	push 2
 21201 00010D7C 488B0425[68000000]      	mov rax, qword [free_var_13]
 21202                                  	assert_closure(rax)
    65 00010D84 803805              <1>  cmp byte [%1], %2
    66 00010D87 0F85A7330000        <1>  jne L_error_incorrect_type
 21203 00010D8D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21204 00010D91 53                      	push rbx
 21205 00010D92 FF7508                  	push RET_ADDR
 21206 00010D95 488B7D18                	mov rdi, COUNT
 21207 00010D99 4883C703                	add rdi, 3
 21208 00010D9D 48C1E703                	shl rdi, 3
 21209 00010DA1 4801EF                  	add rdi, rbp
 21210 00010DA4 488B6D00                	mov rbp, OLD_RDP
 21211 00010DA8 BE00000000              	mov rsi, 0
 21212                                  .L_tc_recycle_frame_loop_5d43:	 ; start recycle frame loop
 21213 00010DAD 4883FE05                	cmp rsi, 5
 21214 00010DB1 7427                    	je .L_tc_recycle_frame_done_5d43
 21215 00010DB3 B904000000              	mov rcx, 4
 21216 00010DB8 4829F1                  	sub rcx, rsi
 21217 00010DBB 48C1E103                	shl rcx, 3
 21218 00010DBF 4801E1                  	add rcx, rsp ; rcx is the address to move
 21219 00010DC2 4889F3                  	mov rbx, rsi
 21220 00010DC5 48C1E303                	shl rbx, 3
 21221 00010DC9 48F7DB                  	neg rbx
 21222 00010DCC 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21223 00010DCF 488B09                  	mov rcx, [rcx]
 21224 00010DD2 48890B                  	mov [rbx], rcx
 21225 00010DD5 48FFC6                  	inc rsi
 21226 00010DD8 EBD3                    	jmp .L_tc_recycle_frame_loop_5d43
 21227                                  .L_tc_recycle_frame_done_5d43:	 ; end recycle frame loop
 21228 00010DDA BB04000000              	mov rbx, 4
 21229 00010DDF 48C1E303                	shl rbx, 3
 21230 00010DE3 48F7DB                  	neg rbx
 21231 00010DE6 4801FB                  	add rbx, rdi
 21232 00010DE9 4889DC                  	mov rsp, rbx
 21233 00010DEC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21234 00010DF0 FFE3                    	jmp rbx
 21235 00010DF2 EB08                    	jmp .L_if_end_56cc
 21236                                  	.L_if_else_56cc:
 21237 00010DF4 488D0425[01000000]      	lea rax, [1 + L_constants]
 21238                                  	.L_if_end_56cc:
 21239 00010DFC C9                      	leave
 21240 00010DFD C22800                  	ret 8 * (2 + 3)
 21241                                  .L_lambda_simple_end_4fb8:	; new closure is in rax
 21242 00010E00 50                      	push rax
 21243 00010E01 488B4520                	mov rax, PARAM(0)
 21244 00010E05 8F00                    	pop qword [rax]
 21245 00010E07 48B8-                   	mov rax, sob_void
 21245 00010E09 [0000000000000000] 
 21246                                  
 21247 00010E11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21248 00010E16 E8991A0000              	call malloc
 21249 00010E1B 50                      	push rax
 21250 00010E1C BF08000000              	mov rdi, 8 * 1	; new rib
 21251 00010E21 E88E1A0000              	call malloc
 21252 00010E26 50                      	push rax
 21253 00010E27 BF10000000              	mov rdi, 8 * 2	; extended env
 21254 00010E2C E8831A0000              	call malloc
 21255 00010E31 488B7D10                	mov rdi, ENV
 21256 00010E35 BE00000000              	mov rsi, 0
 21257 00010E3A BA01000000              	mov rdx, 1
 21258                                  .L_lambda_simple_env_loop_4fb9:	; ext_env[i + 1] <-- env[i]
 21259 00010E3F 4883FE01                	cmp rsi, 1
 21260 00010E43 7410                    	je .L_lambda_simple_env_end_4fb9
 21261 00010E45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 21262 00010E49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21263 00010E4D 48FFC6                  	inc rsi
 21264 00010E50 48FFC2                  	inc rdx
 21265 00010E53 EBEA                    	jmp .L_lambda_simple_env_loop_4fb9
 21266                                  .L_lambda_simple_env_end_4fb9:
 21267 00010E55 5B                      	pop rbx
 21268 00010E56 BE00000000              	mov rsi, 0
 21269                                  .L_lambda_simple_params_loop_4fb9:	; copy params
 21270 00010E5B 4883FE01                	cmp rsi, 1
 21271 00010E5F 740E                    	je .L_lambda_simple_params_end_4fb9
 21272 00010E61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21273 00010E66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21274 00010E6A 48FFC6                  	inc rsi
 21275 00010E6D EBEC                    	jmp .L_lambda_simple_params_loop_4fb9
 21276                                  .L_lambda_simple_params_end_4fb9:
 21277 00010E6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21278 00010E72 4889C3                  	mov rbx, rax
 21279 00010E75 58                      	pop rax
 21280 00010E76 C60005                  	mov byte [rax], T_closure
 21281 00010E79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21282 00010E7D 48C74009[8A0E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fb9
 21283 00010E85 E9CA000000              	jmp .L_lambda_simple_end_4fb9
 21284                                  .L_lambda_simple_code_4fb9:	; lambda-simple body
 21285 00010E8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21286 00010E90 740B                    	je .L_lambda_simple_arity_check_ok_4fb9
 21287 00010E92 FF742410                	push qword [rsp + 8 * 2]
 21288 00010E96 6A01                    	push 1
 21289 00010E98 E9D0190000              	jmp L_error_incorrect_arity_simple
 21290                                  .L_lambda_simple_arity_check_ok_4fb9:
 21291 00010E9D C8000000                	enter 0, 0
 21292 00010EA1 488B4520                	mov rax, PARAM(0)
 21293 00010EA5 50                      	push rax
 21294 00010EA6 6A01                    	push 1
 21295 00010EA8 488B0425[90000000]      	mov rax, qword [free_var_18]
 21296                                  	assert_closure(rax)
    65 00010EB0 803805              <1>  cmp byte [%1], %2
    66 00010EB3 0F857B320000        <1>  jne L_error_incorrect_type
 21297 00010EB9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21298 00010EBD 53                      	push rbx
 21299 00010EBE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21300 00010EC2 FFD3                    	call rbx
 21301 00010EC4 50                      	push rax
 21302 00010EC5 488D0425[20000000]      	lea rax, [32 + L_constants]
 21303 00010ECD 50                      	push rax
 21304 00010ECE 488B4520                	mov rax, PARAM(0)
 21305 00010ED2 50                      	push rax
 21306 00010ED3 6A03                    	push 3
 21307 00010ED5 488B4510                	mov rax, qword [rbp + 8*2]
 21308 00010ED9 488B00                  	mov rax, qword [rax + 8*0]
 21309 00010EDC 488B00                  	mov rax, qword [rax + 8*0]
 21310 00010EDF 488B00                  	mov rax, qword [rax]
 21311                                  	assert_closure(rax)
    65 00010EE2 803805              <1>  cmp byte [%1], %2
    66 00010EE5 0F8549320000        <1>  jne L_error_incorrect_type
 21312 00010EEB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21313 00010EEF 53                      	push rbx
 21314 00010EF0 FF7508                  	push RET_ADDR
 21315 00010EF3 488B7D18                	mov rdi, COUNT
 21316 00010EF7 4883C703                	add rdi, 3
 21317 00010EFB 48C1E703                	shl rdi, 3
 21318 00010EFF 4801EF                  	add rdi, rbp
 21319 00010F02 488B6D00                	mov rbp, OLD_RDP
 21320 00010F06 BE00000000              	mov rsi, 0
 21321                                  .L_tc_recycle_frame_loop_5d44:	 ; start recycle frame loop
 21322 00010F0B 4883FE06                	cmp rsi, 6
 21323 00010F0F 7427                    	je .L_tc_recycle_frame_done_5d44
 21324 00010F11 B905000000              	mov rcx, 5
 21325 00010F16 4829F1                  	sub rcx, rsi
 21326 00010F19 48C1E103                	shl rcx, 3
 21327 00010F1D 4801E1                  	add rcx, rsp ; rcx is the address to move
 21328 00010F20 4889F3                  	mov rbx, rsi
 21329 00010F23 48C1E303                	shl rbx, 3
 21330 00010F27 48F7DB                  	neg rbx
 21331 00010F2A 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21332 00010F2D 488B09                  	mov rcx, [rcx]
 21333 00010F30 48890B                  	mov [rbx], rcx
 21334 00010F33 48FFC6                  	inc rsi
 21335 00010F36 EBD3                    	jmp .L_tc_recycle_frame_loop_5d44
 21336                                  .L_tc_recycle_frame_done_5d44:	 ; end recycle frame loop
 21337 00010F38 BB05000000              	mov rbx, 5
 21338 00010F3D 48C1E303                	shl rbx, 3
 21339 00010F41 48F7DB                  	neg rbx
 21340 00010F44 4801FB                  	add rbx, rdi
 21341 00010F47 4889DC                  	mov rsp, rbx
 21342 00010F4A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21343 00010F4E FFE3                    	jmp rbx
 21344 00010F50 C9                      	leave
 21345 00010F51 C21800                  	ret 8 * (2 + 1)
 21346                                  .L_lambda_simple_end_4fb9:	; new closure is in rax
 21347 00010F54 C9                      	leave
 21348 00010F55 C21800                  	ret 8 * (2 + 1)
 21349                                  .L_lambda_simple_end_4fb7:	; new closure is in rax
 21350                                  	assert_closure(rax)
    65 00010F58 803805              <1>  cmp byte [%1], %2
    66 00010F5B 0F85D3310000        <1>  jne L_error_incorrect_type
 21351 00010F61 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21352 00010F65 53                      	push rbx
 21353 00010F66 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21354 00010F6A FFD3                    	call rbx
 21355 00010F6C 48890425[D8030000]      	mov qword [free_var_123], rax
 21356 00010F74 48B8-                   	mov rax, sob_void
 21356 00010F76 [0000000000000000] 
 21357                                  
 21358 00010F7E 4889C7                  	mov rdi, rax
 21359 00010F81 E83F190000              	call print_sexpr_if_not_void
 21360                                  
 21361 00010F86 488D0425[17000000]      	lea rax, [23 + L_constants]
 21362 00010F8E 50                      	push rax
 21363 00010F8F 6A01                    	push 1
 21364 00010F91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21365 00010F96 E819190000              	call malloc
 21366 00010F9B 50                      	push rax
 21367 00010F9C BF00000000              	mov rdi, 8 * 0	; new rib
 21368 00010FA1 E80E190000              	call malloc
 21369 00010FA6 50                      	push rax
 21370 00010FA7 BF08000000              	mov rdi, 8 * 1	; extended env
 21371 00010FAC E803190000              	call malloc
 21372 00010FB1 488B7D10                	mov rdi, ENV
 21373 00010FB5 BE00000000              	mov rsi, 0
 21374 00010FBA BA01000000              	mov rdx, 1
 21375                                  .L_lambda_simple_env_loop_4fba:	; ext_env[i + 1] <-- env[i]
 21376 00010FBF 4883FE00                	cmp rsi, 0
 21377 00010FC3 7410                    	je .L_lambda_simple_env_end_4fba
 21378 00010FC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 21379 00010FC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21380 00010FCD 48FFC6                  	inc rsi
 21381 00010FD0 48FFC2                  	inc rdx
 21382 00010FD3 EBEA                    	jmp .L_lambda_simple_env_loop_4fba
 21383                                  .L_lambda_simple_env_end_4fba:
 21384 00010FD5 5B                      	pop rbx
 21385 00010FD6 BE00000000              	mov rsi, 0
 21386                                  .L_lambda_simple_params_loop_4fba:	; copy params
 21387 00010FDB 4883FE00                	cmp rsi, 0
 21388 00010FDF 740E                    	je .L_lambda_simple_params_end_4fba
 21389 00010FE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21390 00010FE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21391 00010FEA 48FFC6                  	inc rsi
 21392 00010FED EBEC                    	jmp .L_lambda_simple_params_loop_4fba
 21393                                  .L_lambda_simple_params_end_4fba:
 21394 00010FEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21395 00010FF2 4889C3                  	mov rbx, rax
 21396 00010FF5 58                      	pop rax
 21397 00010FF6 C60005                  	mov byte [rax], T_closure
 21398 00010FF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21399 00010FFD 48C74009[0A100100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fba
 21400 00011005 E955030000              	jmp .L_lambda_simple_end_4fba
 21401                                  .L_lambda_simple_code_4fba:	; lambda-simple body
 21402 0001100A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21403 00011010 740B                    	je .L_lambda_simple_arity_check_ok_4fba
 21404 00011012 FF742410                	push qword [rsp + 8 * 2]
 21405 00011016 6A01                    	push 1
 21406 00011018 E950180000              	jmp L_error_incorrect_arity_simple
 21407                                  .L_lambda_simple_arity_check_ok_4fba:
 21408 0001101D C8000000                	enter 0, 0
 21409 00011021 BF11000000              	mov qword rdi, (1 + 8 + 8)
 21410 00011026 E889180000              	call malloc
 21411 0001102B 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 21412 0001102F 48B8-                   	mov rax, sob_void
 21412 00011031 [0000000000000000] 
 21413                                  
 21414 00011039 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21415 0001103E E871180000              	call malloc
 21416 00011043 50                      	push rax
 21417 00011044 BF08000000              	mov rdi, 8 * 1	; new rib
 21418 00011049 E866180000              	call malloc
 21419 0001104E 50                      	push rax
 21420 0001104F BF10000000              	mov rdi, 8 * 2	; extended env
 21421 00011054 E85B180000              	call malloc
 21422 00011059 488B7D10                	mov rdi, ENV
 21423 0001105D BE00000000              	mov rsi, 0
 21424 00011062 BA01000000              	mov rdx, 1
 21425                                  .L_lambda_simple_env_loop_4fbb:	; ext_env[i + 1] <-- env[i]
 21426 00011067 4883FE01                	cmp rsi, 1
 21427 0001106B 7410                    	je .L_lambda_simple_env_end_4fbb
 21428 0001106D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 21429 00011071 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21430 00011075 48FFC6                  	inc rsi
 21431 00011078 48FFC2                  	inc rdx
 21432 0001107B EBEA                    	jmp .L_lambda_simple_env_loop_4fbb
 21433                                  .L_lambda_simple_env_end_4fbb:
 21434 0001107D 5B                      	pop rbx
 21435 0001107E BE00000000              	mov rsi, 0
 21436                                  .L_lambda_simple_params_loop_4fbb:	; copy params
 21437 00011083 4883FE01                	cmp rsi, 1
 21438 00011087 740E                    	je .L_lambda_simple_params_end_4fbb
 21439 00011089 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21440 0001108E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21441 00011092 48FFC6                  	inc rsi
 21442 00011095 EBEC                    	jmp .L_lambda_simple_params_loop_4fbb
 21443                                  .L_lambda_simple_params_end_4fbb:
 21444 00011097 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21445 0001109A 4889C3                  	mov rbx, rax
 21446 0001109D 58                      	pop rax
 21447 0001109E C60005                  	mov byte [rax], T_closure
 21448 000110A1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21449 000110A5 48C74009[B2100100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fbb
 21450 000110AD E955010000              	jmp .L_lambda_simple_end_4fbb
 21451                                  .L_lambda_simple_code_4fbb:	; lambda-simple body
 21452 000110B2 48837C241003            	cmp qword [rsp + 8 * 2], 3
 21453 000110B8 740B                    	je .L_lambda_simple_arity_check_ok_4fbb
 21454 000110BA FF742410                	push qword [rsp + 8 * 2]
 21455 000110BE 6A03                    	push 3
 21456 000110C0 E9A8170000              	jmp L_error_incorrect_arity_simple
 21457                                  .L_lambda_simple_arity_check_ok_4fbb:
 21458 000110C5 C8000000                	enter 0, 0
 21459 000110C9 488B4530                	mov rax, PARAM(2)
 21460 000110CD 50                      	push rax
 21461 000110CE 488B4528                	mov rax, PARAM(1)
 21462 000110D2 50                      	push rax
 21463 000110D3 6A02                    	push 2
 21464 000110D5 488B0425[30030000]      	mov rax, qword [free_var_102]
 21465                                  	assert_closure(rax)
    65 000110DD 803805              <1>  cmp byte [%1], %2
    66 000110E0 0F854E300000        <1>  jne L_error_incorrect_type
 21466 000110E6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21467 000110EA 53                      	push rbx
 21468 000110EB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21469 000110EF FFD3                    	call rbx
 21470 000110F1 483D[02000000]          	cmp rax, sob_boolean_false
 21471 000110F7 0F84FE000000            	je .L_if_else_56cd
 21472 000110FD 488B4530                	mov rax, PARAM(2)
 21473 00011101 50                      	push rax
 21474 00011102 488D0425[80000000]      	lea rax, [128 + L_constants]
 21475 0001110A 50                      	push rax
 21476 0001110B 488B4528                	mov rax, PARAM(1)
 21477 0001110F 50                      	push rax
 21478 00011110 6A02                    	push 2
 21479 00011112 488B0425[08030000]      	mov rax, qword [free_var_97]
 21480                                  	assert_closure(rax)
    65 0001111A 803805              <1>  cmp byte [%1], %2
    66 0001111D 0F8511300000        <1>  jne L_error_incorrect_type
 21481 00011123 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21482 00011127 53                      	push rbx
 21483 00011128 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21484 0001112C FFD3                    	call rbx
 21485 0001112E 50                      	push rax
 21486 0001112F 488B4520                	mov rax, PARAM(0)
 21487 00011133 50                      	push rax
 21488 00011134 6A03                    	push 3
 21489 00011136 488B4510                	mov rax, qword [rbp + 8*2]
 21490 0001113A 488B00                  	mov rax, qword [rax + 8*0]
 21491 0001113D 488B00                  	mov rax, qword [rax + 8*0]
 21492 00011140 488B00                  	mov rax, qword [rax]
 21493                                  	assert_closure(rax)
    65 00011143 803805              <1>  cmp byte [%1], %2
    66 00011146 0F85E82F0000        <1>  jne L_error_incorrect_type
 21494 0001114C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21495 00011150 53                      	push rbx
 21496 00011151 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21497 00011155 FFD3                    	call rbx
 21498 00011157 50                      	push rax
 21499 00011158 488B4528                	mov rax, PARAM(1)
 21500 0001115C 50                      	push rax
 21501 0001115D 488B4520                	mov rax, PARAM(0)
 21502 00011161 50                      	push rax
 21503 00011162 6A02                    	push 2
 21504 00011164 488B0425[80010000]      	mov rax, qword [free_var_48]
 21505                                  	assert_closure(rax)
    65 0001116C 803805              <1>  cmp byte [%1], %2
    66 0001116F 0F85BF2F0000        <1>  jne L_error_incorrect_type
 21506 00011175 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21507 00011179 53                      	push rbx
 21508 0001117A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21509 0001117E FFD3                    	call rbx
 21510 00011180 50                      	push rax
 21511 00011181 6A02                    	push 2
 21512 00011183 488B0425[68000000]      	mov rax, qword [free_var_13]
 21513                                  	assert_closure(rax)
    65 0001118B 803805              <1>  cmp byte [%1], %2
    66 0001118E 0F85A02F0000        <1>  jne L_error_incorrect_type
 21514 00011194 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21515 00011198 53                      	push rbx
 21516 00011199 FF7508                  	push RET_ADDR
 21517 0001119C 488B7D18                	mov rdi, COUNT
 21518 000111A0 4883C703                	add rdi, 3
 21519 000111A4 48C1E703                	shl rdi, 3
 21520 000111A8 4801EF                  	add rdi, rbp
 21521 000111AB 488B6D00                	mov rbp, OLD_RDP
 21522 000111AF BE00000000              	mov rsi, 0
 21523                                  .L_tc_recycle_frame_loop_5d45:	 ; start recycle frame loop
 21524 000111B4 4883FE05                	cmp rsi, 5
 21525 000111B8 7427                    	je .L_tc_recycle_frame_done_5d45
 21526 000111BA B904000000              	mov rcx, 4
 21527 000111BF 4829F1                  	sub rcx, rsi
 21528 000111C2 48C1E103                	shl rcx, 3
 21529 000111C6 4801E1                  	add rcx, rsp ; rcx is the address to move
 21530 000111C9 4889F3                  	mov rbx, rsi
 21531 000111CC 48C1E303                	shl rbx, 3
 21532 000111D0 48F7DB                  	neg rbx
 21533 000111D3 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21534 000111D6 488B09                  	mov rcx, [rcx]
 21535 000111D9 48890B                  	mov [rbx], rcx
 21536 000111DC 48FFC6                  	inc rsi
 21537 000111DF EBD3                    	jmp .L_tc_recycle_frame_loop_5d45
 21538                                  .L_tc_recycle_frame_done_5d45:	 ; end recycle frame loop
 21539 000111E1 BB04000000              	mov rbx, 4
 21540 000111E6 48C1E303                	shl rbx, 3
 21541 000111EA 48F7DB                  	neg rbx
 21542 000111ED 4801FB                  	add rbx, rdi
 21543 000111F0 4889DC                  	mov rsp, rbx
 21544 000111F3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21545 000111F7 FFE3                    	jmp rbx
 21546 000111F9 EB08                    	jmp .L_if_end_56cd
 21547                                  	.L_if_else_56cd:
 21548 000111FB 488D0425[01000000]      	lea rax, [1 + L_constants]
 21549                                  	.L_if_end_56cd:
 21550 00011203 C9                      	leave
 21551 00011204 C22800                  	ret 8 * (2 + 3)
 21552                                  .L_lambda_simple_end_4fbb:	; new closure is in rax
 21553 00011207 50                      	push rax
 21554 00011208 488B4520                	mov rax, PARAM(0)
 21555 0001120C 8F00                    	pop qword [rax]
 21556 0001120E 48B8-                   	mov rax, sob_void
 21556 00011210 [0000000000000000] 
 21557                                  
 21558 00011218 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21559 0001121D E892160000              	call malloc
 21560 00011222 50                      	push rax
 21561 00011223 BF08000000              	mov rdi, 8 * 1	; new rib
 21562 00011228 E887160000              	call malloc
 21563 0001122D 50                      	push rax
 21564 0001122E BF10000000              	mov rdi, 8 * 2	; extended env
 21565 00011233 E87C160000              	call malloc
 21566 00011238 488B7D10                	mov rdi, ENV
 21567 0001123C BE00000000              	mov rsi, 0
 21568 00011241 BA01000000              	mov rdx, 1
 21569                                  .L_lambda_simple_env_loop_4fbc:	; ext_env[i + 1] <-- env[i]
 21570 00011246 4883FE01                	cmp rsi, 1
 21571 0001124A 7410                    	je .L_lambda_simple_env_end_4fbc
 21572 0001124C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 21573 00011250 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21574 00011254 48FFC6                  	inc rsi
 21575 00011257 48FFC2                  	inc rdx
 21576 0001125A EBEA                    	jmp .L_lambda_simple_env_loop_4fbc
 21577                                  .L_lambda_simple_env_end_4fbc:
 21578 0001125C 5B                      	pop rbx
 21579 0001125D BE00000000              	mov rsi, 0
 21580                                  .L_lambda_simple_params_loop_4fbc:	; copy params
 21581 00011262 4883FE01                	cmp rsi, 1
 21582 00011266 740E                    	je .L_lambda_simple_params_end_4fbc
 21583 00011268 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21584 0001126D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21585 00011271 48FFC6                  	inc rsi
 21586 00011274 EBEC                    	jmp .L_lambda_simple_params_loop_4fbc
 21587                                  .L_lambda_simple_params_end_4fbc:
 21588 00011276 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21589 00011279 4889C3                  	mov rbx, rax
 21590 0001127C 58                      	pop rax
 21591 0001127D C60005                  	mov byte [rax], T_closure
 21592 00011280 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21593 00011284 48C74009[91120100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fbc
 21594 0001128C E9CA000000              	jmp .L_lambda_simple_end_4fbc
 21595                                  .L_lambda_simple_code_4fbc:	; lambda-simple body
 21596 00011291 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21597 00011297 740B                    	je .L_lambda_simple_arity_check_ok_4fbc
 21598 00011299 FF742410                	push qword [rsp + 8 * 2]
 21599 0001129D 6A01                    	push 1
 21600 0001129F E9C9150000              	jmp L_error_incorrect_arity_simple
 21601                                  .L_lambda_simple_arity_check_ok_4fbc:
 21602 000112A4 C8000000                	enter 0, 0
 21603 000112A8 488B4520                	mov rax, PARAM(0)
 21604 000112AC 50                      	push rax
 21605 000112AD 6A01                    	push 1
 21606 000112AF 488B0425[98000000]      	mov rax, qword [free_var_19]
 21607                                  	assert_closure(rax)
    65 000112B7 803805              <1>  cmp byte [%1], %2
    66 000112BA 0F85742E0000        <1>  jne L_error_incorrect_type
 21608 000112C0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21609 000112C4 53                      	push rbx
 21610 000112C5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21611 000112C9 FFD3                    	call rbx
 21612 000112CB 50                      	push rax
 21613 000112CC 488D0425[20000000]      	lea rax, [32 + L_constants]
 21614 000112D4 50                      	push rax
 21615 000112D5 488B4520                	mov rax, PARAM(0)
 21616 000112D9 50                      	push rax
 21617 000112DA 6A03                    	push 3
 21618 000112DC 488B4510                	mov rax, qword [rbp + 8*2]
 21619 000112E0 488B00                  	mov rax, qword [rax + 8*0]
 21620 000112E3 488B00                  	mov rax, qword [rax + 8*0]
 21621 000112E6 488B00                  	mov rax, qword [rax]
 21622                                  	assert_closure(rax)
    65 000112E9 803805              <1>  cmp byte [%1], %2
    66 000112EC 0F85422E0000        <1>  jne L_error_incorrect_type
 21623 000112F2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21624 000112F6 53                      	push rbx
 21625 000112F7 FF7508                  	push RET_ADDR
 21626 000112FA 488B7D18                	mov rdi, COUNT
 21627 000112FE 4883C703                	add rdi, 3
 21628 00011302 48C1E703                	shl rdi, 3
 21629 00011306 4801EF                  	add rdi, rbp
 21630 00011309 488B6D00                	mov rbp, OLD_RDP
 21631 0001130D BE00000000              	mov rsi, 0
 21632                                  .L_tc_recycle_frame_loop_5d46:	 ; start recycle frame loop
 21633 00011312 4883FE06                	cmp rsi, 6
 21634 00011316 7427                    	je .L_tc_recycle_frame_done_5d46
 21635 00011318 B905000000              	mov rcx, 5
 21636 0001131D 4829F1                  	sub rcx, rsi
 21637 00011320 48C1E103                	shl rcx, 3
 21638 00011324 4801E1                  	add rcx, rsp ; rcx is the address to move
 21639 00011327 4889F3                  	mov rbx, rsi
 21640 0001132A 48C1E303                	shl rbx, 3
 21641 0001132E 48F7DB                  	neg rbx
 21642 00011331 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21643 00011334 488B09                  	mov rcx, [rcx]
 21644 00011337 48890B                  	mov [rbx], rcx
 21645 0001133A 48FFC6                  	inc rsi
 21646 0001133D EBD3                    	jmp .L_tc_recycle_frame_loop_5d46
 21647                                  .L_tc_recycle_frame_done_5d46:	 ; end recycle frame loop
 21648 0001133F BB05000000              	mov rbx, 5
 21649 00011344 48C1E303                	shl rbx, 3
 21650 00011348 48F7DB                  	neg rbx
 21651 0001134B 4801FB                  	add rbx, rdi
 21652 0001134E 4889DC                  	mov rsp, rbx
 21653 00011351 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21654 00011355 FFE3                    	jmp rbx
 21655 00011357 C9                      	leave
 21656 00011358 C21800                  	ret 8 * (2 + 1)
 21657                                  .L_lambda_simple_end_4fbc:	; new closure is in rax
 21658 0001135B C9                      	leave
 21659 0001135C C21800                  	ret 8 * (2 + 1)
 21660                                  .L_lambda_simple_end_4fba:	; new closure is in rax
 21661                                  	assert_closure(rax)
    65 0001135F 803805              <1>  cmp byte [%1], %2
    66 00011362 0F85CC2D0000        <1>  jne L_error_incorrect_type
 21662 00011368 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21663 0001136C 53                      	push rbx
 21664 0001136D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21665 00011371 FFD3                    	call rbx
 21666 00011373 48890425[48040000]      	mov qword [free_var_137], rax
 21667 0001137B 48B8-                   	mov rax, sob_void
 21667 0001137D [0000000000000000] 
 21668                                  
 21669 00011385 4889C7                  	mov rdi, rax
 21670 00011388 E838150000              	call print_sexpr_if_not_void
 21671                                  
 21672 0001138D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21673 00011392 E81D150000              	call malloc
 21674 00011397 50                      	push rax
 21675 00011398 BF00000000              	mov rdi, 8 * 0	; new rib
 21676 0001139D E812150000              	call malloc
 21677 000113A2 50                      	push rax
 21678 000113A3 BF08000000              	mov rdi, 8 * 1	; extended env
 21679 000113A8 E807150000              	call malloc
 21680 000113AD 488B7D10                	mov rdi, ENV
 21681 000113B1 BE00000000              	mov rsi, 0
 21682 000113B6 BA01000000              	mov rdx, 1
 21683                                  .L_lambda_simple_env_loop_4fbd:	; ext_env[i + 1] <-- env[i]
 21684 000113BB 4883FE00                	cmp rsi, 0
 21685 000113BF 7410                    	je .L_lambda_simple_env_end_4fbd
 21686 000113C1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 21687 000113C5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21688 000113C9 48FFC6                  	inc rsi
 21689 000113CC 48FFC2                  	inc rdx
 21690 000113CF EBEA                    	jmp .L_lambda_simple_env_loop_4fbd
 21691                                  .L_lambda_simple_env_end_4fbd:
 21692 000113D1 5B                      	pop rbx
 21693 000113D2 BE00000000              	mov rsi, 0
 21694                                  .L_lambda_simple_params_loop_4fbd:	; copy params
 21695 000113D7 4883FE00                	cmp rsi, 0
 21696 000113DB 740E                    	je .L_lambda_simple_params_end_4fbd
 21697 000113DD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21698 000113E2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21699 000113E6 48FFC6                  	inc rsi
 21700 000113E9 EBEC                    	jmp .L_lambda_simple_params_loop_4fbd
 21701                                  .L_lambda_simple_params_end_4fbd:
 21702 000113EB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21703 000113EE 4889C3                  	mov rbx, rax
 21704 000113F1 58                      	pop rax
 21705 000113F2 C60005                  	mov byte [rax], T_closure
 21706 000113F5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21707 000113F9 48C74009[06140100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fbd
 21708 00011401 E9B7000000              	jmp .L_lambda_simple_end_4fbd
 21709                                  .L_lambda_simple_code_4fbd:	; lambda-simple body
 21710 00011406 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21711 0001140C 740B                    	je .L_lambda_simple_arity_check_ok_4fbd
 21712 0001140E FF742410                	push qword [rsp + 8 * 2]
 21713 00011412 6A01                    	push 1
 21714 00011414 E954140000              	jmp L_error_incorrect_arity_simple
 21715                                  .L_lambda_simple_arity_check_ok_4fbd:
 21716 00011419 C8000000                	enter 0, 0
 21717 0001141D 488B4520                	mov rax, PARAM(0)
 21718 00011421 50                      	push rax
 21719 00011422 6A00                    	push 0
 21720 00011424 488B0425[D0000000]      	mov rax, qword [free_var_26]
 21721                                  	assert_closure(rax)
    65 0001142C 803805              <1>  cmp byte [%1], %2
    66 0001142F 0F85FF2C0000        <1>  jne L_error_incorrect_type
 21722 00011435 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21723 00011439 53                      	push rbx
 21724 0001143A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21725 0001143E FFD3                    	call rbx
 21726 00011440 50                      	push rax
 21727 00011441 6A02                    	push 2
 21728 00011443 488B0425[60010000]      	mov rax, qword [free_var_44]
 21729                                  	assert_closure(rax)
    65 0001144B 803805              <1>  cmp byte [%1], %2
    66 0001144E 0F85E02C0000        <1>  jne L_error_incorrect_type
 21730 00011454 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21731 00011458 53                      	push rbx
 21732 00011459 FF7508                  	push RET_ADDR
 21733 0001145C 488B7D18                	mov rdi, COUNT
 21734 00011460 4883C703                	add rdi, 3
 21735 00011464 48C1E703                	shl rdi, 3
 21736 00011468 4801EF                  	add rdi, rbp
 21737 0001146B 488B6D00                	mov rbp, OLD_RDP
 21738 0001146F BE00000000              	mov rsi, 0
 21739                                  .L_tc_recycle_frame_loop_5d47:	 ; start recycle frame loop
 21740 00011474 4883FE05                	cmp rsi, 5
 21741 00011478 7427                    	je .L_tc_recycle_frame_done_5d47
 21742 0001147A B904000000              	mov rcx, 4
 21743 0001147F 4829F1                  	sub rcx, rsi
 21744 00011482 48C1E103                	shl rcx, 3
 21745 00011486 4801E1                  	add rcx, rsp ; rcx is the address to move
 21746 00011489 4889F3                  	mov rbx, rsi
 21747 0001148C 48C1E303                	shl rbx, 3
 21748 00011490 48F7DB                  	neg rbx
 21749 00011493 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21750 00011496 488B09                  	mov rcx, [rcx]
 21751 00011499 48890B                  	mov [rbx], rcx
 21752 0001149C 48FFC6                  	inc rsi
 21753 0001149F EBD3                    	jmp .L_tc_recycle_frame_loop_5d47
 21754                                  .L_tc_recycle_frame_done_5d47:	 ; end recycle frame loop
 21755 000114A1 BB04000000              	mov rbx, 4
 21756 000114A6 48C1E303                	shl rbx, 3
 21757 000114AA 48F7DB                  	neg rbx
 21758 000114AD 4801FB                  	add rbx, rdi
 21759 000114B0 4889DC                  	mov rsp, rbx
 21760 000114B3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21761 000114B7 FFE3                    	jmp rbx
 21762 000114B9 C9                      	leave
 21763 000114BA C21800                  	ret 8 * (2 + 1)
 21764                                  .L_lambda_simple_end_4fbd:	; new closure is in rax
 21765 000114BD 48890425[50040000]      	mov qword [free_var_138], rax
 21766 000114C5 48B8-                   	mov rax, sob_void
 21766 000114C7 [0000000000000000] 
 21767                                  
 21768 000114CF 4889C7                  	mov rdi, rax
 21769 000114D2 E8EE130000              	call print_sexpr_if_not_void
 21770                                  
 21771 000114D7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21772 000114DC E8D3130000              	call malloc
 21773 000114E1 50                      	push rax
 21774 000114E2 BF00000000              	mov rdi, 8 * 0	; new rib
 21775 000114E7 E8C8130000              	call malloc
 21776 000114EC 50                      	push rax
 21777 000114ED BF08000000              	mov rdi, 8 * 1	; extended env
 21778 000114F2 E8BD130000              	call malloc
 21779 000114F7 488B7D10                	mov rdi, ENV
 21780 000114FB BE00000000              	mov rsi, 0
 21781 00011500 BA01000000              	mov rdx, 1
 21782                                  .L_lambda_simple_env_loop_4fbe:	; ext_env[i + 1] <-- env[i]
 21783 00011505 4883FE00                	cmp rsi, 0
 21784 00011509 7410                    	je .L_lambda_simple_env_end_4fbe
 21785 0001150B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 21786 0001150F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21787 00011513 48FFC6                  	inc rsi
 21788 00011516 48FFC2                  	inc rdx
 21789 00011519 EBEA                    	jmp .L_lambda_simple_env_loop_4fbe
 21790                                  .L_lambda_simple_env_end_4fbe:
 21791 0001151B 5B                      	pop rbx
 21792 0001151C BE00000000              	mov rsi, 0
 21793                                  .L_lambda_simple_params_loop_4fbe:	; copy params
 21794 00011521 4883FE00                	cmp rsi, 0
 21795 00011525 740E                    	je .L_lambda_simple_params_end_4fbe
 21796 00011527 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21797 0001152C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21798 00011530 48FFC6                  	inc rsi
 21799 00011533 EBEC                    	jmp .L_lambda_simple_params_loop_4fbe
 21800                                  .L_lambda_simple_params_end_4fbe:
 21801 00011535 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21802 00011538 4889C3                  	mov rbx, rax
 21803 0001153B 58                      	pop rax
 21804 0001153C C60005                  	mov byte [rax], T_closure
 21805 0001153F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21806 00011543 48C74009[50150100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fbe
 21807 0001154B E9A1000000              	jmp .L_lambda_simple_end_4fbe
 21808                                  .L_lambda_simple_code_4fbe:	; lambda-simple body
 21809 00011550 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21810 00011556 740B                    	je .L_lambda_simple_arity_check_ok_4fbe
 21811 00011558 FF742410                	push qword [rsp + 8 * 2]
 21812 0001155C 6A01                    	push 1
 21813 0001155E E90A130000              	jmp L_error_incorrect_arity_simple
 21814                                  .L_lambda_simple_arity_check_ok_4fbe:
 21815 00011563 C8000000                	enter 0, 0
 21816 00011567 488B4520                	mov rax, PARAM(0)
 21817 0001156B 50                      	push rax
 21818 0001156C 488D0425[20000000]      	lea rax, [32 + L_constants]
 21819 00011574 50                      	push rax
 21820 00011575 6A02                    	push 2
 21821 00011577 488B0425[30030000]      	mov rax, qword [free_var_102]
 21822                                  	assert_closure(rax)
    65 0001157F 803805              <1>  cmp byte [%1], %2
    66 00011582 0F85AC2B0000        <1>  jne L_error_incorrect_type
 21823 00011588 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21824 0001158C 53                      	push rbx
 21825 0001158D FF7508                  	push RET_ADDR
 21826 00011590 488B7D18                	mov rdi, COUNT
 21827 00011594 4883C703                	add rdi, 3
 21828 00011598 48C1E703                	shl rdi, 3
 21829 0001159C 4801EF                  	add rdi, rbp
 21830 0001159F 488B6D00                	mov rbp, OLD_RDP
 21831 000115A3 BE00000000              	mov rsi, 0
 21832                                  .L_tc_recycle_frame_loop_5d48:	 ; start recycle frame loop
 21833 000115A8 4883FE05                	cmp rsi, 5
 21834 000115AC 7427                    	je .L_tc_recycle_frame_done_5d48
 21835 000115AE B904000000              	mov rcx, 4
 21836 000115B3 4829F1                  	sub rcx, rsi
 21837 000115B6 48C1E103                	shl rcx, 3
 21838 000115BA 4801E1                  	add rcx, rsp ; rcx is the address to move
 21839 000115BD 4889F3                  	mov rbx, rsi
 21840 000115C0 48C1E303                	shl rbx, 3
 21841 000115C4 48F7DB                  	neg rbx
 21842 000115C7 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21843 000115CA 488B09                  	mov rcx, [rcx]
 21844 000115CD 48890B                  	mov [rbx], rcx
 21845 000115D0 48FFC6                  	inc rsi
 21846 000115D3 EBD3                    	jmp .L_tc_recycle_frame_loop_5d48
 21847                                  .L_tc_recycle_frame_done_5d48:	 ; end recycle frame loop
 21848 000115D5 BB04000000              	mov rbx, 4
 21849 000115DA 48C1E303                	shl rbx, 3
 21850 000115DE 48F7DB                  	neg rbx
 21851 000115E1 4801FB                  	add rbx, rdi
 21852 000115E4 4889DC                  	mov rsp, rbx
 21853 000115E7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21854 000115EB FFE3                    	jmp rbx
 21855 000115ED C9                      	leave
 21856 000115EE C21800                  	ret 8 * (2 + 1)
 21857                                  .L_lambda_simple_end_4fbe:	; new closure is in rax
 21858 000115F1 48890425[58040000]      	mov qword [free_var_139], rax
 21859 000115F9 48B8-                   	mov rax, sob_void
 21859 000115FB [0000000000000000] 
 21860                                  
 21861 00011603 4889C7                  	mov rdi, rax
 21862 00011606 E8BA120000              	call print_sexpr_if_not_void
 21863                                  
 21864 0001160B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21865 00011610 E89F120000              	call malloc
 21866 00011615 50                      	push rax
 21867 00011616 BF00000000              	mov rdi, 8 * 0	; new rib
 21868 0001161B E894120000              	call malloc
 21869 00011620 50                      	push rax
 21870 00011621 BF08000000              	mov rdi, 8 * 1	; extended env
 21871 00011626 E889120000              	call malloc
 21872 0001162B 488B7D10                	mov rdi, ENV
 21873 0001162F BE00000000              	mov rsi, 0
 21874 00011634 BA01000000              	mov rdx, 1
 21875                                  .L_lambda_simple_env_loop_4fbf:	; ext_env[i + 1] <-- env[i]
 21876 00011639 4883FE00                	cmp rsi, 0
 21877 0001163D 7410                    	je .L_lambda_simple_env_end_4fbf
 21878 0001163F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 21879 00011643 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21880 00011647 48FFC6                  	inc rsi
 21881 0001164A 48FFC2                  	inc rdx
 21882 0001164D EBEA                    	jmp .L_lambda_simple_env_loop_4fbf
 21883                                  .L_lambda_simple_env_end_4fbf:
 21884 0001164F 5B                      	pop rbx
 21885 00011650 BE00000000              	mov rsi, 0
 21886                                  .L_lambda_simple_params_loop_4fbf:	; copy params
 21887 00011655 4883FE00                	cmp rsi, 0
 21888 00011659 740E                    	je .L_lambda_simple_params_end_4fbf
 21889 0001165B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21890 00011660 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21891 00011664 48FFC6                  	inc rsi
 21892 00011667 EBEC                    	jmp .L_lambda_simple_params_loop_4fbf
 21893                                  .L_lambda_simple_params_end_4fbf:
 21894 00011669 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21895 0001166C 4889C3                  	mov rbx, rax
 21896 0001166F 58                      	pop rax
 21897 00011670 C60005                  	mov byte [rax], T_closure
 21898 00011673 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21899 00011677 48C74009[84160100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fbf
 21900 0001167F E9A1000000              	jmp .L_lambda_simple_end_4fbf
 21901                                  .L_lambda_simple_code_4fbf:	; lambda-simple body
 21902 00011684 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21903 0001168A 740B                    	je .L_lambda_simple_arity_check_ok_4fbf
 21904 0001168C FF742410                	push qword [rsp + 8 * 2]
 21905 00011690 6A01                    	push 1
 21906 00011692 E9D6110000              	jmp L_error_incorrect_arity_simple
 21907                                  .L_lambda_simple_arity_check_ok_4fbf:
 21908 00011697 C8000000                	enter 0, 0
 21909 0001169B 488D0425[20000000]      	lea rax, [32 + L_constants]
 21910 000116A3 50                      	push rax
 21911 000116A4 488B4520                	mov rax, PARAM(0)
 21912 000116A8 50                      	push rax
 21913 000116A9 6A02                    	push 2
 21914 000116AB 488B0425[30030000]      	mov rax, qword [free_var_102]
 21915                                  	assert_closure(rax)
    65 000116B3 803805              <1>  cmp byte [%1], %2
    66 000116B6 0F85782A0000        <1>  jne L_error_incorrect_type
 21916 000116BC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21917 000116C0 53                      	push rbx
 21918 000116C1 FF7508                  	push RET_ADDR
 21919 000116C4 488B7D18                	mov rdi, COUNT
 21920 000116C8 4883C703                	add rdi, 3
 21921 000116CC 48C1E703                	shl rdi, 3
 21922 000116D0 4801EF                  	add rdi, rbp
 21923 000116D3 488B6D00                	mov rbp, OLD_RDP
 21924 000116D7 BE00000000              	mov rsi, 0
 21925                                  .L_tc_recycle_frame_loop_5d49:	 ; start recycle frame loop
 21926 000116DC 4883FE05                	cmp rsi, 5
 21927 000116E0 7427                    	je .L_tc_recycle_frame_done_5d49
 21928 000116E2 B904000000              	mov rcx, 4
 21929 000116E7 4829F1                  	sub rcx, rsi
 21930 000116EA 48C1E103                	shl rcx, 3
 21931 000116EE 4801E1                  	add rcx, rsp ; rcx is the address to move
 21932 000116F1 4889F3                  	mov rbx, rsi
 21933 000116F4 48C1E303                	shl rbx, 3
 21934 000116F8 48F7DB                  	neg rbx
 21935 000116FB 4801FB                  	add rbx, rdi ;rbx is the address to move to
 21936 000116FE 488B09                  	mov rcx, [rcx]
 21937 00011701 48890B                  	mov [rbx], rcx
 21938 00011704 48FFC6                  	inc rsi
 21939 00011707 EBD3                    	jmp .L_tc_recycle_frame_loop_5d49
 21940                                  .L_tc_recycle_frame_done_5d49:	 ; end recycle frame loop
 21941 00011709 BB04000000              	mov rbx, 4
 21942 0001170E 48C1E303                	shl rbx, 3
 21943 00011712 48F7DB                  	neg rbx
 21944 00011715 4801FB                  	add rbx, rdi
 21945 00011718 4889DC                  	mov rsp, rbx
 21946 0001171B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21947 0001171F FFE3                    	jmp rbx
 21948 00011721 C9                      	leave
 21949 00011722 C21800                  	ret 8 * (2 + 1)
 21950                                  .L_lambda_simple_end_4fbf:	; new closure is in rax
 21951 00011725 48890425[60040000]      	mov qword [free_var_140], rax
 21952 0001172D 48B8-                   	mov rax, sob_void
 21952 0001172F [0000000000000000] 
 21953                                  
 21954 00011737 4889C7                  	mov rdi, rax
 21955 0001173A E886110000              	call print_sexpr_if_not_void
 21956                                  
 21957 0001173F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21958 00011744 E86B110000              	call malloc
 21959 00011749 50                      	push rax
 21960 0001174A BF00000000              	mov rdi, 8 * 0	; new rib
 21961 0001174F E860110000              	call malloc
 21962 00011754 50                      	push rax
 21963 00011755 BF08000000              	mov rdi, 8 * 1	; extended env
 21964 0001175A E855110000              	call malloc
 21965 0001175F 488B7D10                	mov rdi, ENV
 21966 00011763 BE00000000              	mov rsi, 0
 21967 00011768 BA01000000              	mov rdx, 1
 21968                                  .L_lambda_simple_env_loop_4fc0:	; ext_env[i + 1] <-- env[i]
 21969 0001176D 4883FE00                	cmp rsi, 0
 21970 00011771 7410                    	je .L_lambda_simple_env_end_4fc0
 21971 00011773 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 21972 00011777 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21973 0001177B 48FFC6                  	inc rsi
 21974 0001177E 48FFC2                  	inc rdx
 21975 00011781 EBEA                    	jmp .L_lambda_simple_env_loop_4fc0
 21976                                  .L_lambda_simple_env_end_4fc0:
 21977 00011783 5B                      	pop rbx
 21978 00011784 BE00000000              	mov rsi, 0
 21979                                  .L_lambda_simple_params_loop_4fc0:	; copy params
 21980 00011789 4883FE00                	cmp rsi, 0
 21981 0001178D 740E                    	je .L_lambda_simple_params_end_4fc0
 21982 0001178F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21983 00011794 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21984 00011798 48FFC6                  	inc rsi
 21985 0001179B EBEC                    	jmp .L_lambda_simple_params_loop_4fc0
 21986                                  .L_lambda_simple_params_end_4fc0:
 21987 0001179D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21988 000117A0 4889C3                  	mov rbx, rax
 21989 000117A3 58                      	pop rax
 21990 000117A4 C60005                  	mov byte [rax], T_closure
 21991 000117A7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21992 000117AB 48C74009[B8170100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc0
 21993 000117B3 E9C0000000              	jmp .L_lambda_simple_end_4fc0
 21994                                  .L_lambda_simple_code_4fc0:	; lambda-simple body
 21995 000117B8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21996 000117BE 740B                    	je .L_lambda_simple_arity_check_ok_4fc0
 21997 000117C0 FF742410                	push qword [rsp + 8 * 2]
 21998 000117C4 6A01                    	push 1
 21999 000117C6 E9A2100000              	jmp L_error_incorrect_arity_simple
 22000                                  .L_lambda_simple_arity_check_ok_4fc0:
 22001 000117CB C8000000                	enter 0, 0
 22002 000117CF 488D0425[00020000]      	lea rax, [512 + L_constants]
 22003 000117D7 50                      	push rax
 22004 000117D8 488B4520                	mov rax, PARAM(0)
 22005 000117DC 50                      	push rax
 22006 000117DD 6A02                    	push 2
 22007 000117DF 488B0425[60010000]      	mov rax, qword [free_var_44]
 22008                                  	assert_closure(rax)
    65 000117E7 803805              <1>  cmp byte [%1], %2
    66 000117EA 0F8544290000        <1>  jne L_error_incorrect_type
 22009 000117F0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22010 000117F4 53                      	push rbx
 22011 000117F5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22012 000117F9 FFD3                    	call rbx
 22013 000117FB 50                      	push rax
 22014 000117FC 6A01                    	push 1
 22015 000117FE 488B0425[D8000000]      	mov rax, qword [free_var_27]
 22016                                  	assert_closure(rax)
    65 00011806 803805              <1>  cmp byte [%1], %2
    66 00011809 0F8525290000        <1>  jne L_error_incorrect_type
 22017 0001180F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22018 00011813 53                      	push rbx
 22019 00011814 FF7508                  	push RET_ADDR
 22020 00011817 488B7D18                	mov rdi, COUNT
 22021 0001181B 4883C703                	add rdi, 3
 22022 0001181F 48C1E703                	shl rdi, 3
 22023 00011823 4801EF                  	add rdi, rbp
 22024 00011826 488B6D00                	mov rbp, OLD_RDP
 22025 0001182A BE00000000              	mov rsi, 0
 22026                                  .L_tc_recycle_frame_loop_5d4a:	 ; start recycle frame loop
 22027 0001182F 4883FE04                	cmp rsi, 4
 22028 00011833 7427                    	je .L_tc_recycle_frame_done_5d4a
 22029 00011835 B903000000              	mov rcx, 3
 22030 0001183A 4829F1                  	sub rcx, rsi
 22031 0001183D 48C1E103                	shl rcx, 3
 22032 00011841 4801E1                  	add rcx, rsp ; rcx is the address to move
 22033 00011844 4889F3                  	mov rbx, rsi
 22034 00011847 48C1E303                	shl rbx, 3
 22035 0001184B 48F7DB                  	neg rbx
 22036 0001184E 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22037 00011851 488B09                  	mov rcx, [rcx]
 22038 00011854 48890B                  	mov [rbx], rcx
 22039 00011857 48FFC6                  	inc rsi
 22040 0001185A EBD3                    	jmp .L_tc_recycle_frame_loop_5d4a
 22041                                  .L_tc_recycle_frame_done_5d4a:	 ; end recycle frame loop
 22042 0001185C BB03000000              	mov rbx, 3
 22043 00011861 48C1E303                	shl rbx, 3
 22044 00011865 48F7DB                  	neg rbx
 22045 00011868 4801FB                  	add rbx, rdi
 22046 0001186B 4889DC                  	mov rsp, rbx
 22047 0001186E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22048 00011872 FFE3                    	jmp rbx
 22049 00011874 C9                      	leave
 22050 00011875 C21800                  	ret 8 * (2 + 1)
 22051                                  .L_lambda_simple_end_4fc0:	; new closure is in rax
 22052 00011878 48890425[68040000]      	mov qword [free_var_141], rax
 22053 00011880 48B8-                   	mov rax, sob_void
 22053 00011882 [0000000000000000] 
 22054                                  
 22055 0001188A 4889C7                  	mov rdi, rax
 22056 0001188D E833100000              	call print_sexpr_if_not_void
 22057                                  
 22058 00011892 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22059 00011897 E818100000              	call malloc
 22060 0001189C 50                      	push rax
 22061 0001189D BF00000000              	mov rdi, 8 * 0	; new rib
 22062 000118A2 E80D100000              	call malloc
 22063 000118A7 50                      	push rax
 22064 000118A8 BF08000000              	mov rdi, 8 * 1	; extended env
 22065 000118AD E802100000              	call malloc
 22066 000118B2 488B7D10                	mov rdi, ENV
 22067 000118B6 BE00000000              	mov rsi, 0
 22068 000118BB BA01000000              	mov rdx, 1
 22069                                  .L_lambda_simple_env_loop_4fc1:	; ext_env[i + 1] <-- env[i]
 22070 000118C0 4883FE00                	cmp rsi, 0
 22071 000118C4 7410                    	je .L_lambda_simple_env_end_4fc1
 22072 000118C6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 22073 000118CA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22074 000118CE 48FFC6                  	inc rsi
 22075 000118D1 48FFC2                  	inc rdx
 22076 000118D4 EBEA                    	jmp .L_lambda_simple_env_loop_4fc1
 22077                                  .L_lambda_simple_env_end_4fc1:
 22078 000118D6 5B                      	pop rbx
 22079 000118D7 BE00000000              	mov rsi, 0
 22080                                  .L_lambda_simple_params_loop_4fc1:	; copy params
 22081 000118DC 4883FE00                	cmp rsi, 0
 22082 000118E0 740E                    	je .L_lambda_simple_params_end_4fc1
 22083 000118E2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22084 000118E7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22085 000118EB 48FFC6                  	inc rsi
 22086 000118EE EBEC                    	jmp .L_lambda_simple_params_loop_4fc1
 22087                                  .L_lambda_simple_params_end_4fc1:
 22088 000118F0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22089 000118F3 4889C3                  	mov rbx, rax
 22090 000118F6 58                      	pop rax
 22091 000118F7 C60005                  	mov byte [rax], T_closure
 22092 000118FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22093 000118FE 48C74009[0B190100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc1
 22094 00011906 E9B7000000              	jmp .L_lambda_simple_end_4fc1
 22095                                  .L_lambda_simple_code_4fc1:	; lambda-simple body
 22096 0001190B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22097 00011911 740B                    	je .L_lambda_simple_arity_check_ok_4fc1
 22098 00011913 FF742410                	push qword [rsp + 8 * 2]
 22099 00011917 6A01                    	push 1
 22100 00011919 E94F0F0000              	jmp L_error_incorrect_arity_simple
 22101                                  .L_lambda_simple_arity_check_ok_4fc1:
 22102 0001191E C8000000                	enter 0, 0
 22103 00011922 488B4520                	mov rax, PARAM(0)
 22104 00011926 50                      	push rax
 22105 00011927 6A01                    	push 1
 22106 00011929 488B0425[68040000]      	mov rax, qword [free_var_141]
 22107                                  	assert_closure(rax)
    65 00011931 803805              <1>  cmp byte [%1], %2
    66 00011934 0F85FA270000        <1>  jne L_error_incorrect_type
 22108 0001193A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22109 0001193E 53                      	push rbx
 22110 0001193F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22111 00011943 FFD3                    	call rbx
 22112 00011945 50                      	push rax
 22113 00011946 6A01                    	push 1
 22114 00011948 488B0425[B0020000]      	mov rax, qword [free_var_86]
 22115                                  	assert_closure(rax)
    65 00011950 803805              <1>  cmp byte [%1], %2
    66 00011953 0F85DB270000        <1>  jne L_error_incorrect_type
 22116 00011959 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22117 0001195D 53                      	push rbx
 22118 0001195E FF7508                  	push RET_ADDR
 22119 00011961 488B7D18                	mov rdi, COUNT
 22120 00011965 4883C703                	add rdi, 3
 22121 00011969 48C1E703                	shl rdi, 3
 22122 0001196D 4801EF                  	add rdi, rbp
 22123 00011970 488B6D00                	mov rbp, OLD_RDP
 22124 00011974 BE00000000              	mov rsi, 0
 22125                                  .L_tc_recycle_frame_loop_5d4b:	 ; start recycle frame loop
 22126 00011979 4883FE04                	cmp rsi, 4
 22127 0001197D 7427                    	je .L_tc_recycle_frame_done_5d4b
 22128 0001197F B903000000              	mov rcx, 3
 22129 00011984 4829F1                  	sub rcx, rsi
 22130 00011987 48C1E103                	shl rcx, 3
 22131 0001198B 4801E1                  	add rcx, rsp ; rcx is the address to move
 22132 0001198E 4889F3                  	mov rbx, rsi
 22133 00011991 48C1E303                	shl rbx, 3
 22134 00011995 48F7DB                  	neg rbx
 22135 00011998 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22136 0001199B 488B09                  	mov rcx, [rcx]
 22137 0001199E 48890B                  	mov [rbx], rcx
 22138 000119A1 48FFC6                  	inc rsi
 22139 000119A4 EBD3                    	jmp .L_tc_recycle_frame_loop_5d4b
 22140                                  .L_tc_recycle_frame_done_5d4b:	 ; end recycle frame loop
 22141 000119A6 BB03000000              	mov rbx, 3
 22142 000119AB 48C1E303                	shl rbx, 3
 22143 000119AF 48F7DB                  	neg rbx
 22144 000119B2 4801FB                  	add rbx, rdi
 22145 000119B5 4889DC                  	mov rsp, rbx
 22146 000119B8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22147 000119BC FFE3                    	jmp rbx
 22148 000119BE C9                      	leave
 22149 000119BF C21800                  	ret 8 * (2 + 1)
 22150                                  .L_lambda_simple_end_4fc1:	; new closure is in rax
 22151 000119C2 48890425[70040000]      	mov qword [free_var_142], rax
 22152 000119CA 48B8-                   	mov rax, sob_void
 22152 000119CC [0000000000000000] 
 22153                                  
 22154 000119D4 4889C7                  	mov rdi, rax
 22155 000119D7 E8E90E0000              	call print_sexpr_if_not_void
 22156                                  
 22157 000119DC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22158 000119E1 E8CE0E0000              	call malloc
 22159 000119E6 50                      	push rax
 22160 000119E7 BF00000000              	mov rdi, 8 * 0	; new rib
 22161 000119EC E8C30E0000              	call malloc
 22162 000119F1 50                      	push rax
 22163 000119F2 BF08000000              	mov rdi, 8 * 1	; extended env
 22164 000119F7 E8B80E0000              	call malloc
 22165 000119FC 488B7D10                	mov rdi, ENV
 22166 00011A00 BE00000000              	mov rsi, 0
 22167 00011A05 BA01000000              	mov rdx, 1
 22168                                  .L_lambda_simple_env_loop_4fc2:	; ext_env[i + 1] <-- env[i]
 22169 00011A0A 4883FE00                	cmp rsi, 0
 22170 00011A0E 7410                    	je .L_lambda_simple_env_end_4fc2
 22171 00011A10 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 22172 00011A14 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22173 00011A18 48FFC6                  	inc rsi
 22174 00011A1B 48FFC2                  	inc rdx
 22175 00011A1E EBEA                    	jmp .L_lambda_simple_env_loop_4fc2
 22176                                  .L_lambda_simple_env_end_4fc2:
 22177 00011A20 5B                      	pop rbx
 22178 00011A21 BE00000000              	mov rsi, 0
 22179                                  .L_lambda_simple_params_loop_4fc2:	; copy params
 22180 00011A26 4883FE00                	cmp rsi, 0
 22181 00011A2A 740E                    	je .L_lambda_simple_params_end_4fc2
 22182 00011A2C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22183 00011A31 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22184 00011A35 48FFC6                  	inc rsi
 22185 00011A38 EBEC                    	jmp .L_lambda_simple_params_loop_4fc2
 22186                                  .L_lambda_simple_params_end_4fc2:
 22187 00011A3A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22188 00011A3D 4889C3                  	mov rbx, rax
 22189 00011A40 58                      	pop rax
 22190 00011A41 C60005                  	mov byte [rax], T_closure
 22191 00011A44 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22192 00011A48 48C74009[551A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc2
 22193 00011A50 E9CD000000              	jmp .L_lambda_simple_end_4fc2
 22194                                  .L_lambda_simple_code_4fc2:	; lambda-simple body
 22195 00011A55 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22196 00011A5B 740B                    	je .L_lambda_simple_arity_check_ok_4fc2
 22197 00011A5D FF742410                	push qword [rsp + 8 * 2]
 22198 00011A61 6A01                    	push 1
 22199 00011A63 E9050E0000              	jmp L_error_incorrect_arity_simple
 22200                                  .L_lambda_simple_arity_check_ok_4fc2:
 22201 00011A68 C8000000                	enter 0, 0
 22202 00011A6C 488B4520                	mov rax, PARAM(0)
 22203 00011A70 50                      	push rax
 22204 00011A71 6A01                    	push 1
 22205 00011A73 488B0425[60040000]      	mov rax, qword [free_var_140]
 22206                                  	assert_closure(rax)
    65 00011A7B 803805              <1>  cmp byte [%1], %2
    66 00011A7E 0F85B0260000        <1>  jne L_error_incorrect_type
 22207 00011A84 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22208 00011A88 53                      	push rbx
 22209 00011A89 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22210 00011A8D FFD3                    	call rbx
 22211 00011A8F 483D[02000000]          	cmp rax, sob_boolean_false
 22212 00011A95 0F847F000000            	je .L_if_else_56ce
 22213 00011A9B 488B4520                	mov rax, PARAM(0)
 22214 00011A9F 50                      	push rax
 22215 00011AA0 6A01                    	push 1
 22216 00011AA2 488B0425[10030000]      	mov rax, qword [free_var_98]
 22217                                  	assert_closure(rax)
    65 00011AAA 803805              <1>  cmp byte [%1], %2
    66 00011AAD 0F8581260000        <1>  jne L_error_incorrect_type
 22218 00011AB3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22219 00011AB7 53                      	push rbx
 22220 00011AB8 FF7508                  	push RET_ADDR
 22221 00011ABB 488B7D18                	mov rdi, COUNT
 22222 00011ABF 4883C703                	add rdi, 3
 22223 00011AC3 48C1E703                	shl rdi, 3
 22224 00011AC7 4801EF                  	add rdi, rbp
 22225 00011ACA 488B6D00                	mov rbp, OLD_RDP
 22226 00011ACE BE00000000              	mov rsi, 0
 22227                                  .L_tc_recycle_frame_loop_5d4c:	 ; start recycle frame loop
 22228 00011AD3 4883FE04                	cmp rsi, 4
 22229 00011AD7 7427                    	je .L_tc_recycle_frame_done_5d4c
 22230 00011AD9 B903000000              	mov rcx, 3
 22231 00011ADE 4829F1                  	sub rcx, rsi
 22232 00011AE1 48C1E103                	shl rcx, 3
 22233 00011AE5 4801E1                  	add rcx, rsp ; rcx is the address to move
 22234 00011AE8 4889F3                  	mov rbx, rsi
 22235 00011AEB 48C1E303                	shl rbx, 3
 22236 00011AEF 48F7DB                  	neg rbx
 22237 00011AF2 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22238 00011AF5 488B09                  	mov rcx, [rcx]
 22239 00011AF8 48890B                  	mov [rbx], rcx
 22240 00011AFB 48FFC6                  	inc rsi
 22241 00011AFE EBD3                    	jmp .L_tc_recycle_frame_loop_5d4c
 22242                                  .L_tc_recycle_frame_done_5d4c:	 ; end recycle frame loop
 22243 00011B00 BB03000000              	mov rbx, 3
 22244 00011B05 48C1E303                	shl rbx, 3
 22245 00011B09 48F7DB                  	neg rbx
 22246 00011B0C 4801FB                  	add rbx, rdi
 22247 00011B0F 4889DC                  	mov rsp, rbx
 22248 00011B12 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22249 00011B16 FFE3                    	jmp rbx
 22250 00011B18 EB04                    	jmp .L_if_end_56ce
 22251                                  	.L_if_else_56ce:
 22252 00011B1A 488B4520                	mov rax, PARAM(0)
 22253                                  	.L_if_end_56ce:
 22254 00011B1E C9                      	leave
 22255 00011B1F C21800                  	ret 8 * (2 + 1)
 22256                                  .L_lambda_simple_end_4fc2:	; new closure is in rax
 22257 00011B22 48890425[78040000]      	mov qword [free_var_143], rax
 22258 00011B2A 48B8-                   	mov rax, sob_void
 22258 00011B2C [0000000000000000] 
 22259                                  
 22260 00011B34 4889C7                  	mov rdi, rax
 22261 00011B37 E8890D0000              	call print_sexpr_if_not_void
 22262                                  
 22263 00011B3C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22264 00011B41 E86E0D0000              	call malloc
 22265 00011B46 50                      	push rax
 22266 00011B47 BF00000000              	mov rdi, 8 * 0	; new rib
 22267 00011B4C E8630D0000              	call malloc
 22268 00011B51 50                      	push rax
 22269 00011B52 BF08000000              	mov rdi, 8 * 1	; extended env
 22270 00011B57 E8580D0000              	call malloc
 22271 00011B5C 488B7D10                	mov rdi, ENV
 22272 00011B60 BE00000000              	mov rsi, 0
 22273 00011B65 BA01000000              	mov rdx, 1
 22274                                  .L_lambda_simple_env_loop_4fc3:	; ext_env[i + 1] <-- env[i]
 22275 00011B6A 4883FE00                	cmp rsi, 0
 22276 00011B6E 7410                    	je .L_lambda_simple_env_end_4fc3
 22277 00011B70 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 22278 00011B74 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22279 00011B78 48FFC6                  	inc rsi
 22280 00011B7B 48FFC2                  	inc rdx
 22281 00011B7E EBEA                    	jmp .L_lambda_simple_env_loop_4fc3
 22282                                  .L_lambda_simple_env_end_4fc3:
 22283 00011B80 5B                      	pop rbx
 22284 00011B81 BE00000000              	mov rsi, 0
 22285                                  .L_lambda_simple_params_loop_4fc3:	; copy params
 22286 00011B86 4883FE00                	cmp rsi, 0
 22287 00011B8A 740E                    	je .L_lambda_simple_params_end_4fc3
 22288 00011B8C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22289 00011B91 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22290 00011B95 48FFC6                  	inc rsi
 22291 00011B98 EBEC                    	jmp .L_lambda_simple_params_loop_4fc3
 22292                                  .L_lambda_simple_params_end_4fc3:
 22293 00011B9A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22294 00011B9D 4889C3                  	mov rbx, rax
 22295 00011BA0 58                      	pop rax
 22296 00011BA1 C60005                  	mov byte [rax], T_closure
 22297 00011BA4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22298 00011BA8 48C74009[B51B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc3
 22299 00011BB0 E94E050000              	jmp .L_lambda_simple_end_4fc3
 22300                                  .L_lambda_simple_code_4fc3:	; lambda-simple body
 22301 00011BB5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22302 00011BBB 740B                    	je .L_lambda_simple_arity_check_ok_4fc3
 22303 00011BBD FF742410                	push qword [rsp + 8 * 2]
 22304 00011BC1 6A02                    	push 2
 22305 00011BC3 E9A50C0000              	jmp L_error_incorrect_arity_simple
 22306                                  .L_lambda_simple_arity_check_ok_4fc3:
 22307 00011BC8 C8000000                	enter 0, 0
 22308 00011BCC 488B4520                	mov rax, PARAM(0)
 22309 00011BD0 50                      	push rax
 22310 00011BD1 6A01                    	push 1
 22311 00011BD3 488B0425[08000000]      	mov rax, qword [free_var_1]
 22312                                  	assert_closure(rax)
    65 00011BDB 803805              <1>  cmp byte [%1], %2
    66 00011BDE 0F8550250000        <1>  jne L_error_incorrect_type
 22313 00011BE4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22314 00011BE8 53                      	push rbx
 22315 00011BE9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22316 00011BED FFD3                    	call rbx
 22317 00011BEF 483D[02000000]          	cmp rax, sob_boolean_false
 22318 00011BF5 7425                    	je .L_if_else_56d0
 22319 00011BF7 488B4528                	mov rax, PARAM(1)
 22320 00011BFB 50                      	push rax
 22321 00011BFC 6A01                    	push 1
 22322 00011BFE 488B0425[08000000]      	mov rax, qword [free_var_1]
 22323                                  	assert_closure(rax)
    65 00011C06 803805              <1>  cmp byte [%1], %2
    66 00011C09 0F8525250000        <1>  jne L_error_incorrect_type
 22324 00011C0F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22325 00011C13 53                      	push rbx
 22326 00011C14 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22327 00011C18 FFD3                    	call rbx
 22328 00011C1A EB08                    	jmp .L_if_end_56d0
 22329                                  	.L_if_else_56d0:
 22330 00011C1C 488D0425[02000000]      	lea rax, [2 + L_constants]
 22331                                  	.L_if_end_56d0:
 22332 00011C24 483D[02000000]          	cmp rax, sob_boolean_false
 22333 00011C2A 0F8441010000            	je .L_if_else_56cf
 22334 00011C30 488B4528                	mov rax, PARAM(1)
 22335 00011C34 50                      	push rax
 22336 00011C35 6A01                    	push 1
 22337 00011C37 488B0425[80000000]      	mov rax, qword [free_var_16]
 22338                                  	assert_closure(rax)
    65 00011C3F 803805              <1>  cmp byte [%1], %2
    66 00011C42 0F85EC240000        <1>  jne L_error_incorrect_type
 22339 00011C48 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22340 00011C4C 53                      	push rbx
 22341 00011C4D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22342 00011C51 FFD3                    	call rbx
 22343 00011C53 50                      	push rax
 22344 00011C54 488B4520                	mov rax, PARAM(0)
 22345 00011C58 50                      	push rax
 22346 00011C59 6A01                    	push 1
 22347 00011C5B 488B0425[80000000]      	mov rax, qword [free_var_16]
 22348                                  	assert_closure(rax)
    65 00011C63 803805              <1>  cmp byte [%1], %2
    66 00011C66 0F85C8240000        <1>  jne L_error_incorrect_type
 22349 00011C6C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22350 00011C70 53                      	push rbx
 22351 00011C71 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22352 00011C75 FFD3                    	call rbx
 22353 00011C77 50                      	push rax
 22354 00011C78 6A02                    	push 2
 22355 00011C7A 488B0425[80040000]      	mov rax, qword [free_var_144]
 22356                                  	assert_closure(rax)
    65 00011C82 803805              <1>  cmp byte [%1], %2
    66 00011C85 0F85A9240000        <1>  jne L_error_incorrect_type
 22357 00011C8B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22358 00011C8F 53                      	push rbx
 22359 00011C90 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22360 00011C94 FFD3                    	call rbx
 22361 00011C96 483D[02000000]          	cmp rax, sob_boolean_false
 22362 00011C9C 0F84C2000000            	je .L_if_else_56d1
 22363 00011CA2 488B4528                	mov rax, PARAM(1)
 22364 00011CA6 50                      	push rax
 22365 00011CA7 6A01                    	push 1
 22366 00011CA9 488B0425[88000000]      	mov rax, qword [free_var_17]
 22367                                  	assert_closure(rax)
    65 00011CB1 803805              <1>  cmp byte [%1], %2
    66 00011CB4 0F857A240000        <1>  jne L_error_incorrect_type
 22368 00011CBA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22369 00011CBE 53                      	push rbx
 22370 00011CBF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22371 00011CC3 FFD3                    	call rbx
 22372 00011CC5 50                      	push rax
 22373 00011CC6 488B4520                	mov rax, PARAM(0)
 22374 00011CCA 50                      	push rax
 22375 00011CCB 6A01                    	push 1
 22376 00011CCD 488B0425[88000000]      	mov rax, qword [free_var_17]
 22377                                  	assert_closure(rax)
    65 00011CD5 803805              <1>  cmp byte [%1], %2
    66 00011CD8 0F8556240000        <1>  jne L_error_incorrect_type
 22378 00011CDE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22379 00011CE2 53                      	push rbx
 22380 00011CE3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22381 00011CE7 FFD3                    	call rbx
 22382 00011CE9 50                      	push rax
 22383 00011CEA 6A02                    	push 2
 22384 00011CEC 488B0425[80040000]      	mov rax, qword [free_var_144]
 22385                                  	assert_closure(rax)
    65 00011CF4 803805              <1>  cmp byte [%1], %2
    66 00011CF7 0F8537240000        <1>  jne L_error_incorrect_type
 22386 00011CFD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22387 00011D01 53                      	push rbx
 22388 00011D02 FF7508                  	push RET_ADDR
 22389 00011D05 488B7D18                	mov rdi, COUNT
 22390 00011D09 4883C703                	add rdi, 3
 22391 00011D0D 48C1E703                	shl rdi, 3
 22392 00011D11 4801EF                  	add rdi, rbp
 22393 00011D14 488B6D00                	mov rbp, OLD_RDP
 22394 00011D18 BE00000000              	mov rsi, 0
 22395                                  .L_tc_recycle_frame_loop_5d4d:	 ; start recycle frame loop
 22396 00011D1D 4883FE05                	cmp rsi, 5
 22397 00011D21 7427                    	je .L_tc_recycle_frame_done_5d4d
 22398 00011D23 B904000000              	mov rcx, 4
 22399 00011D28 4829F1                  	sub rcx, rsi
 22400 00011D2B 48C1E103                	shl rcx, 3
 22401 00011D2F 4801E1                  	add rcx, rsp ; rcx is the address to move
 22402 00011D32 4889F3                  	mov rbx, rsi
 22403 00011D35 48C1E303                	shl rbx, 3
 22404 00011D39 48F7DB                  	neg rbx
 22405 00011D3C 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22406 00011D3F 488B09                  	mov rcx, [rcx]
 22407 00011D42 48890B                  	mov [rbx], rcx
 22408 00011D45 48FFC6                  	inc rsi
 22409 00011D48 EBD3                    	jmp .L_tc_recycle_frame_loop_5d4d
 22410                                  .L_tc_recycle_frame_done_5d4d:	 ; end recycle frame loop
 22411 00011D4A BB04000000              	mov rbx, 4
 22412 00011D4F 48C1E303                	shl rbx, 3
 22413 00011D53 48F7DB                  	neg rbx
 22414 00011D56 4801FB                  	add rbx, rdi
 22415 00011D59 4889DC                  	mov rsp, rbx
 22416 00011D5C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22417 00011D60 FFE3                    	jmp rbx
 22418 00011D62 EB08                    	jmp .L_if_end_56d1
 22419                                  	.L_if_else_56d1:
 22420 00011D64 488D0425[02000000]      	lea rax, [2 + L_constants]
 22421                                  	.L_if_end_56d1:
 22422 00011D6C E98E030000              	jmp .L_if_end_56cf
 22423                                  	.L_if_else_56cf:
 22424 00011D71 488B4520                	mov rax, PARAM(0)
 22425 00011D75 50                      	push rax
 22426 00011D76 6A01                    	push 1
 22427 00011D78 488B0425[30000000]      	mov rax, qword [free_var_6]
 22428                                  	assert_closure(rax)
    65 00011D80 803805              <1>  cmp byte [%1], %2
    66 00011D83 0F85AB230000        <1>  jne L_error_incorrect_type
 22429 00011D89 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22430 00011D8D 53                      	push rbx
 22431 00011D8E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22432 00011D92 FFD3                    	call rbx
 22433 00011D94 483D[02000000]          	cmp rax, sob_boolean_false
 22434 00011D9A 0F849D000000            	je .L_if_else_56d3
 22435 00011DA0 488B4528                	mov rax, PARAM(1)
 22436 00011DA4 50                      	push rax
 22437 00011DA5 6A01                    	push 1
 22438 00011DA7 488B0425[30000000]      	mov rax, qword [free_var_6]
 22439                                  	assert_closure(rax)
    65 00011DAF 803805              <1>  cmp byte [%1], %2
    66 00011DB2 0F857C230000        <1>  jne L_error_incorrect_type
 22440 00011DB8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22441 00011DBC 53                      	push rbx
 22442 00011DBD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22443 00011DC1 FFD3                    	call rbx
 22444 00011DC3 483D[02000000]          	cmp rax, sob_boolean_false
 22445 00011DC9 7468                    	je .L_if_else_56d4
 22446 00011DCB 488B4528                	mov rax, PARAM(1)
 22447 00011DCF 50                      	push rax
 22448 00011DD0 6A01                    	push 1
 22449 00011DD2 488B0425[98000000]      	mov rax, qword [free_var_19]
 22450                                  	assert_closure(rax)
    65 00011DDA 803805              <1>  cmp byte [%1], %2
    66 00011DDD 0F8551230000        <1>  jne L_error_incorrect_type
 22451 00011DE3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22452 00011DE7 53                      	push rbx
 22453 00011DE8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22454 00011DEC FFD3                    	call rbx
 22455 00011DEE 50                      	push rax
 22456 00011DEF 488B4520                	mov rax, PARAM(0)
 22457 00011DF3 50                      	push rax
 22458 00011DF4 6A01                    	push 1
 22459 00011DF6 488B0425[98000000]      	mov rax, qword [free_var_19]
 22460                                  	assert_closure(rax)
    65 00011DFE 803805              <1>  cmp byte [%1], %2
    66 00011E01 0F852D230000        <1>  jne L_error_incorrect_type
 22461 00011E07 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22462 00011E0B 53                      	push rbx
 22463 00011E0C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22464 00011E10 FFD3                    	call rbx
 22465 00011E12 50                      	push rax
 22466 00011E13 6A02                    	push 2
 22467 00011E15 488B0425[50030000]      	mov rax, qword [free_var_106]
 22468                                  	assert_closure(rax)
    65 00011E1D 803805              <1>  cmp byte [%1], %2
    66 00011E20 0F850E230000        <1>  jne L_error_incorrect_type
 22469 00011E26 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22470 00011E2A 53                      	push rbx
 22471 00011E2B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22472 00011E2F FFD3                    	call rbx
 22473 00011E31 EB08                    	jmp .L_if_end_56d4
 22474                                  	.L_if_else_56d4:
 22475 00011E33 488D0425[02000000]      	lea rax, [2 + L_constants]
 22476                                  	.L_if_end_56d4:
 22477 00011E3B EB08                    	jmp .L_if_end_56d3
 22478                                  	.L_if_else_56d3:
 22479 00011E3D 488D0425[02000000]      	lea rax, [2 + L_constants]
 22480                                  	.L_if_end_56d3:
 22481 00011E45 483D[02000000]          	cmp rax, sob_boolean_false
 22482 00011E4B 0F84C5000000            	je .L_if_else_56d2
 22483 00011E51 488B4528                	mov rax, PARAM(1)
 22484 00011E55 50                      	push rax
 22485 00011E56 6A01                    	push 1
 22486 00011E58 488B0425[48040000]      	mov rax, qword [free_var_137]
 22487                                  	assert_closure(rax)
    65 00011E60 803805              <1>  cmp byte [%1], %2
    66 00011E63 0F85CB220000        <1>  jne L_error_incorrect_type
 22488 00011E69 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22489 00011E6D 53                      	push rbx
 22490 00011E6E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22491 00011E72 FFD3                    	call rbx
 22492 00011E74 50                      	push rax
 22493 00011E75 488B4520                	mov rax, PARAM(0)
 22494 00011E79 50                      	push rax
 22495 00011E7A 6A01                    	push 1
 22496 00011E7C 488B0425[48040000]      	mov rax, qword [free_var_137]
 22497                                  	assert_closure(rax)
    65 00011E84 803805              <1>  cmp byte [%1], %2
    66 00011E87 0F85A7220000        <1>  jne L_error_incorrect_type
 22498 00011E8D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22499 00011E91 53                      	push rbx
 22500 00011E92 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22501 00011E96 FFD3                    	call rbx
 22502 00011E98 50                      	push rax
 22503 00011E99 6A02                    	push 2
 22504 00011E9B 488B0425[80040000]      	mov rax, qword [free_var_144]
 22505                                  	assert_closure(rax)
    65 00011EA3 803805              <1>  cmp byte [%1], %2
    66 00011EA6 0F8588220000        <1>  jne L_error_incorrect_type
 22506 00011EAC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22507 00011EB0 53                      	push rbx
 22508 00011EB1 FF7508                  	push RET_ADDR
 22509 00011EB4 488B7D18                	mov rdi, COUNT
 22510 00011EB8 4883C703                	add rdi, 3
 22511 00011EBC 48C1E703                	shl rdi, 3
 22512 00011EC0 4801EF                  	add rdi, rbp
 22513 00011EC3 488B6D00                	mov rbp, OLD_RDP
 22514 00011EC7 BE00000000              	mov rsi, 0
 22515                                  .L_tc_recycle_frame_loop_5d4e:	 ; start recycle frame loop
 22516 00011ECC 4883FE05                	cmp rsi, 5
 22517 00011ED0 7427                    	je .L_tc_recycle_frame_done_5d4e
 22518 00011ED2 B904000000              	mov rcx, 4
 22519 00011ED7 4829F1                  	sub rcx, rsi
 22520 00011EDA 48C1E103                	shl rcx, 3
 22521 00011EDE 4801E1                  	add rcx, rsp ; rcx is the address to move
 22522 00011EE1 4889F3                  	mov rbx, rsi
 22523 00011EE4 48C1E303                	shl rbx, 3
 22524 00011EE8 48F7DB                  	neg rbx
 22525 00011EEB 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22526 00011EEE 488B09                  	mov rcx, [rcx]
 22527 00011EF1 48890B                  	mov [rbx], rcx
 22528 00011EF4 48FFC6                  	inc rsi
 22529 00011EF7 EBD3                    	jmp .L_tc_recycle_frame_loop_5d4e
 22530                                  .L_tc_recycle_frame_done_5d4e:	 ; end recycle frame loop
 22531 00011EF9 BB04000000              	mov rbx, 4
 22532 00011EFE 48C1E303                	shl rbx, 3
 22533 00011F02 48F7DB                  	neg rbx
 22534 00011F05 4801FB                  	add rbx, rdi
 22535 00011F08 4889DC                  	mov rsp, rbx
 22536 00011F0B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22537 00011F0F FFE3                    	jmp rbx
 22538 00011F11 E9E9010000              	jmp .L_if_end_56d2
 22539                                  	.L_if_else_56d2:
 22540 00011F16 488B4520                	mov rax, PARAM(0)
 22541 00011F1A 50                      	push rax
 22542 00011F1B 6A01                    	push 1
 22543 00011F1D 488B0425[20000000]      	mov rax, qword [free_var_4]
 22544                                  	assert_closure(rax)
    65 00011F25 803805              <1>  cmp byte [%1], %2
    66 00011F28 0F8506220000        <1>  jne L_error_incorrect_type
 22545 00011F2E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22546 00011F32 53                      	push rbx
 22547 00011F33 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22548 00011F37 FFD3                    	call rbx
 22549 00011F39 483D[02000000]          	cmp rax, sob_boolean_false
 22550 00011F3F 0F849D000000            	je .L_if_else_56d6
 22551 00011F45 488B4528                	mov rax, PARAM(1)
 22552 00011F49 50                      	push rax
 22553 00011F4A 6A01                    	push 1
 22554 00011F4C 488B0425[20000000]      	mov rax, qword [free_var_4]
 22555                                  	assert_closure(rax)
    65 00011F54 803805              <1>  cmp byte [%1], %2
    66 00011F57 0F85D7210000        <1>  jne L_error_incorrect_type
 22556 00011F5D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22557 00011F61 53                      	push rbx
 22558 00011F62 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22559 00011F66 FFD3                    	call rbx
 22560 00011F68 483D[02000000]          	cmp rax, sob_boolean_false
 22561 00011F6E 7468                    	je .L_if_else_56d7
 22562 00011F70 488B4528                	mov rax, PARAM(1)
 22563 00011F74 50                      	push rax
 22564 00011F75 6A01                    	push 1
 22565 00011F77 488B0425[90000000]      	mov rax, qword [free_var_18]
 22566                                  	assert_closure(rax)
    65 00011F7F 803805              <1>  cmp byte [%1], %2
    66 00011F82 0F85AC210000        <1>  jne L_error_incorrect_type
 22567 00011F88 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22568 00011F8C 53                      	push rbx
 22569 00011F8D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22570 00011F91 FFD3                    	call rbx
 22571 00011F93 50                      	push rax
 22572 00011F94 488B4520                	mov rax, PARAM(0)
 22573 00011F98 50                      	push rax
 22574 00011F99 6A01                    	push 1
 22575 00011F9B 488B0425[90000000]      	mov rax, qword [free_var_18]
 22576                                  	assert_closure(rax)
    65 00011FA3 803805              <1>  cmp byte [%1], %2
    66 00011FA6 0F8588210000        <1>  jne L_error_incorrect_type
 22577 00011FAC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22578 00011FB0 53                      	push rbx
 22579 00011FB1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22580 00011FB5 FFD3                    	call rbx
 22581 00011FB7 50                      	push rax
 22582 00011FB8 6A02                    	push 2
 22583 00011FBA 488B0425[50030000]      	mov rax, qword [free_var_106]
 22584                                  	assert_closure(rax)
    65 00011FC2 803805              <1>  cmp byte [%1], %2
    66 00011FC5 0F8569210000        <1>  jne L_error_incorrect_type
 22585 00011FCB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22586 00011FCF 53                      	push rbx
 22587 00011FD0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22588 00011FD4 FFD3                    	call rbx
 22589 00011FD6 EB08                    	jmp .L_if_end_56d7
 22590                                  	.L_if_else_56d7:
 22591 00011FD8 488D0425[02000000]      	lea rax, [2 + L_constants]
 22592                                  	.L_if_end_56d7:
 22593 00011FE0 EB08                    	jmp .L_if_end_56d6
 22594                                  	.L_if_else_56d6:
 22595 00011FE2 488D0425[02000000]      	lea rax, [2 + L_constants]
 22596                                  	.L_if_end_56d6:
 22597 00011FEA 483D[02000000]          	cmp rax, sob_boolean_false
 22598 00011FF0 0F8487000000            	je .L_if_else_56d5
 22599 00011FF6 488B4528                	mov rax, PARAM(1)
 22600 00011FFA 50                      	push rax
 22601 00011FFB 488B4520                	mov rax, PARAM(0)
 22602 00011FFF 50                      	push rax
 22603 00012000 6A02                    	push 2
 22604 00012002 488B0425[F0030000]      	mov rax, qword [free_var_126]
 22605                                  	assert_closure(rax)
    65 0001200A 803805              <1>  cmp byte [%1], %2
    66 0001200D 0F8521210000        <1>  jne L_error_incorrect_type
 22606 00012013 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22607 00012017 53                      	push rbx
 22608 00012018 FF7508                  	push RET_ADDR
 22609 0001201B 488B7D18                	mov rdi, COUNT
 22610 0001201F 4883C703                	add rdi, 3
 22611 00012023 48C1E703                	shl rdi, 3
 22612 00012027 4801EF                  	add rdi, rbp
 22613 0001202A 488B6D00                	mov rbp, OLD_RDP
 22614 0001202E BE00000000              	mov rsi, 0
 22615                                  .L_tc_recycle_frame_loop_5d4f:	 ; start recycle frame loop
 22616 00012033 4883FE05                	cmp rsi, 5
 22617 00012037 7427                    	je .L_tc_recycle_frame_done_5d4f
 22618 00012039 B904000000              	mov rcx, 4
 22619 0001203E 4829F1                  	sub rcx, rsi
 22620 00012041 48C1E103                	shl rcx, 3
 22621 00012045 4801E1                  	add rcx, rsp ; rcx is the address to move
 22622 00012048 4889F3                  	mov rbx, rsi
 22623 0001204B 48C1E303                	shl rbx, 3
 22624 0001204F 48F7DB                  	neg rbx
 22625 00012052 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22626 00012055 488B09                  	mov rcx, [rcx]
 22627 00012058 48890B                  	mov [rbx], rcx
 22628 0001205B 48FFC6                  	inc rsi
 22629 0001205E EBD3                    	jmp .L_tc_recycle_frame_loop_5d4f
 22630                                  .L_tc_recycle_frame_done_5d4f:	 ; end recycle frame loop
 22631 00012060 BB04000000              	mov rbx, 4
 22632 00012065 48C1E303                	shl rbx, 3
 22633 00012069 48F7DB                  	neg rbx
 22634 0001206C 4801FB                  	add rbx, rdi
 22635 0001206F 4889DC                  	mov rsp, rbx
 22636 00012072 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22637 00012076 FFE3                    	jmp rbx
 22638 00012078 E982000000              	jmp .L_if_end_56d5
 22639                                  	.L_if_else_56d5:
 22640 0001207D 488B4528                	mov rax, PARAM(1)
 22641 00012081 50                      	push rax
 22642 00012082 488B4520                	mov rax, PARAM(0)
 22643 00012086 50                      	push rax
 22644 00012087 6A02                    	push 2
 22645 00012089 488B0425[B8010000]      	mov rax, qword [free_var_55]
 22646                                  	assert_closure(rax)
    65 00012091 803805              <1>  cmp byte [%1], %2
    66 00012094 0F859A200000        <1>  jne L_error_incorrect_type
 22647 0001209A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22648 0001209E 53                      	push rbx
 22649 0001209F FF7508                  	push RET_ADDR
 22650 000120A2 488B7D18                	mov rdi, COUNT
 22651 000120A6 4883C703                	add rdi, 3
 22652 000120AA 48C1E703                	shl rdi, 3
 22653 000120AE 4801EF                  	add rdi, rbp
 22654 000120B1 488B6D00                	mov rbp, OLD_RDP
 22655 000120B5 BE00000000              	mov rsi, 0
 22656                                  .L_tc_recycle_frame_loop_5d50:	 ; start recycle frame loop
 22657 000120BA 4883FE05                	cmp rsi, 5
 22658 000120BE 7427                    	je .L_tc_recycle_frame_done_5d50
 22659 000120C0 B904000000              	mov rcx, 4
 22660 000120C5 4829F1                  	sub rcx, rsi
 22661 000120C8 48C1E103                	shl rcx, 3
 22662 000120CC 4801E1                  	add rcx, rsp ; rcx is the address to move
 22663 000120CF 4889F3                  	mov rbx, rsi
 22664 000120D2 48C1E303                	shl rbx, 3
 22665 000120D6 48F7DB                  	neg rbx
 22666 000120D9 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22667 000120DC 488B09                  	mov rcx, [rcx]
 22668 000120DF 48890B                  	mov [rbx], rcx
 22669 000120E2 48FFC6                  	inc rsi
 22670 000120E5 EBD3                    	jmp .L_tc_recycle_frame_loop_5d50
 22671                                  .L_tc_recycle_frame_done_5d50:	 ; end recycle frame loop
 22672 000120E7 BB04000000              	mov rbx, 4
 22673 000120EC 48C1E303                	shl rbx, 3
 22674 000120F0 48F7DB                  	neg rbx
 22675 000120F3 4801FB                  	add rbx, rdi
 22676 000120F6 4889DC                  	mov rsp, rbx
 22677 000120F9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22678 000120FD FFE3                    	jmp rbx
 22679                                  	.L_if_end_56d5:
 22680                                  	.L_if_end_56d2:
 22681                                  	.L_if_end_56cf:
 22682 000120FF C9                      	leave
 22683 00012100 C22000                  	ret 8 * (2 + 2)
 22684                                  .L_lambda_simple_end_4fc3:	; new closure is in rax
 22685 00012103 48890425[80040000]      	mov qword [free_var_144], rax
 22686 0001210B 48B8-                   	mov rax, sob_void
 22686 0001210D [0000000000000000] 
 22687                                  
 22688 00012115 4889C7                  	mov rdi, rax
 22689 00012118 E8A8070000              	call print_sexpr_if_not_void
 22690                                  
 22691 0001211D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22692 00012122 E88D070000              	call malloc
 22693 00012127 50                      	push rax
 22694 00012128 BF00000000              	mov rdi, 8 * 0	; new rib
 22695 0001212D E882070000              	call malloc
 22696 00012132 50                      	push rax
 22697 00012133 BF08000000              	mov rdi, 8 * 1	; extended env
 22698 00012138 E877070000              	call malloc
 22699 0001213D 488B7D10                	mov rdi, ENV
 22700 00012141 BE00000000              	mov rsi, 0
 22701 00012146 BA01000000              	mov rdx, 1
 22702                                  .L_lambda_simple_env_loop_4fc4:	; ext_env[i + 1] <-- env[i]
 22703 0001214B 4883FE00                	cmp rsi, 0
 22704 0001214F 7410                    	je .L_lambda_simple_env_end_4fc4
 22705 00012151 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 22706 00012155 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22707 00012159 48FFC6                  	inc rsi
 22708 0001215C 48FFC2                  	inc rdx
 22709 0001215F EBEA                    	jmp .L_lambda_simple_env_loop_4fc4
 22710                                  .L_lambda_simple_env_end_4fc4:
 22711 00012161 5B                      	pop rbx
 22712 00012162 BE00000000              	mov rsi, 0
 22713                                  .L_lambda_simple_params_loop_4fc4:	; copy params
 22714 00012167 4883FE00                	cmp rsi, 0
 22715 0001216B 740E                    	je .L_lambda_simple_params_end_4fc4
 22716 0001216D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22717 00012172 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22718 00012176 48FFC6                  	inc rsi
 22719 00012179 EBEC                    	jmp .L_lambda_simple_params_loop_4fc4
 22720                                  .L_lambda_simple_params_end_4fc4:
 22721 0001217B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22722 0001217E 4889C3                  	mov rbx, rax
 22723 00012181 58                      	pop rax
 22724 00012182 C60005                  	mov byte [rax], T_closure
 22725 00012185 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22726 00012189 48C74009[96210100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc4
 22727 00012191 E9C9010000              	jmp .L_lambda_simple_end_4fc4
 22728                                  .L_lambda_simple_code_4fc4:	; lambda-simple body
 22729 00012196 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22730 0001219C 740B                    	je .L_lambda_simple_arity_check_ok_4fc4
 22731 0001219E FF742410                	push qword [rsp + 8 * 2]
 22732 000121A2 6A02                    	push 2
 22733 000121A4 E9C4060000              	jmp L_error_incorrect_arity_simple
 22734                                  .L_lambda_simple_arity_check_ok_4fc4:
 22735 000121A9 C8000000                	enter 0, 0
 22736 000121AD 488B4528                	mov rax, PARAM(1)
 22737 000121B1 50                      	push rax
 22738 000121B2 6A01                    	push 1
 22739 000121B4 488B0425[00000000]      	mov rax, qword [free_var_0]
 22740                                  	assert_closure(rax)
    65 000121BC 803805              <1>  cmp byte [%1], %2
    66 000121BF 0F856F1F0000        <1>  jne L_error_incorrect_type
 22741 000121C5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22742 000121C9 53                      	push rbx
 22743 000121CA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22744 000121CE FFD3                    	call rbx
 22745 000121D0 483D[02000000]          	cmp rax, sob_boolean_false
 22746 000121D6 740D                    	je .L_if_else_56d8
 22747 000121D8 488D0425[02000000]      	lea rax, [2 + L_constants]
 22748 000121E0 E976010000              	jmp .L_if_end_56d8
 22749                                  	.L_if_else_56d8:
 22750 000121E5 488B4520                	mov rax, PARAM(0)
 22751 000121E9 50                      	push rax
 22752 000121EA 488B4528                	mov rax, PARAM(1)
 22753 000121EE 50                      	push rax
 22754 000121EF 6A01                    	push 1
 22755 000121F1 488B0425[C0010000]      	mov rax, qword [free_var_56]
 22756                                  	assert_closure(rax)
    65 000121F9 803805              <1>  cmp byte [%1], %2
    66 000121FC 0F85321F0000        <1>  jne L_error_incorrect_type
 22757 00012202 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22758 00012206 53                      	push rbx
 22759 00012207 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22760 0001220B FFD3                    	call rbx
 22761 0001220D 50                      	push rax
 22762 0001220E 6A02                    	push 2
 22763 00012210 488B0425[B8010000]      	mov rax, qword [free_var_55]
 22764                                  	assert_closure(rax)
    65 00012218 803805              <1>  cmp byte [%1], %2
    66 0001221B 0F85131F0000        <1>  jne L_error_incorrect_type
 22765 00012221 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22766 00012225 53                      	push rbx
 22767 00012226 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22768 0001222A FFD3                    	call rbx
 22769 0001222C 483D[02000000]          	cmp rax, sob_boolean_false
 22770 00012232 0F8482000000            	je .L_if_else_56d9
 22771 00012238 488B4528                	mov rax, PARAM(1)
 22772 0001223C 50                      	push rax
 22773 0001223D 6A01                    	push 1
 22774 0001223F 488B0425[80000000]      	mov rax, qword [free_var_16]
 22775                                  	assert_closure(rax)
    65 00012247 803805              <1>  cmp byte [%1], %2
    66 0001224A 0F85E41E0000        <1>  jne L_error_incorrect_type
 22776 00012250 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22777 00012254 53                      	push rbx
 22778 00012255 FF7508                  	push RET_ADDR
 22779 00012258 488B7D18                	mov rdi, COUNT
 22780 0001225C 4883C703                	add rdi, 3
 22781 00012260 48C1E703                	shl rdi, 3
 22782 00012264 4801EF                  	add rdi, rbp
 22783 00012267 488B6D00                	mov rbp, OLD_RDP
 22784 0001226B BE00000000              	mov rsi, 0
 22785                                  .L_tc_recycle_frame_loop_5d51:	 ; start recycle frame loop
 22786 00012270 4883FE04                	cmp rsi, 4
 22787 00012274 7427                    	je .L_tc_recycle_frame_done_5d51
 22788 00012276 B903000000              	mov rcx, 3
 22789 0001227B 4829F1                  	sub rcx, rsi
 22790 0001227E 48C1E103                	shl rcx, 3
 22791 00012282 4801E1                  	add rcx, rsp ; rcx is the address to move
 22792 00012285 4889F3                  	mov rbx, rsi
 22793 00012288 48C1E303                	shl rbx, 3
 22794 0001228C 48F7DB                  	neg rbx
 22795 0001228F 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22796 00012292 488B09                  	mov rcx, [rcx]
 22797 00012295 48890B                  	mov [rbx], rcx
 22798 00012298 48FFC6                  	inc rsi
 22799 0001229B EBD3                    	jmp .L_tc_recycle_frame_loop_5d51
 22800                                  .L_tc_recycle_frame_done_5d51:	 ; end recycle frame loop
 22801 0001229D BB03000000              	mov rbx, 3
 22802 000122A2 48C1E303                	shl rbx, 3
 22803 000122A6 48F7DB                  	neg rbx
 22804 000122A9 4801FB                  	add rbx, rdi
 22805 000122AC 4889DC                  	mov rsp, rbx
 22806 000122AF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22807 000122B3 FFE3                    	jmp rbx
 22808 000122B5 E9A1000000              	jmp .L_if_end_56d9
 22809                                  	.L_if_else_56d9:
 22810 000122BA 488B4528                	mov rax, PARAM(1)
 22811 000122BE 50                      	push rax
 22812 000122BF 6A01                    	push 1
 22813 000122C1 488B0425[88000000]      	mov rax, qword [free_var_17]
 22814                                  	assert_closure(rax)
    65 000122C9 803805              <1>  cmp byte [%1], %2
    66 000122CC 0F85621E0000        <1>  jne L_error_incorrect_type
 22815 000122D2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22816 000122D6 53                      	push rbx
 22817 000122D7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22818 000122DB FFD3                    	call rbx
 22819 000122DD 50                      	push rax
 22820 000122DE 488B4520                	mov rax, PARAM(0)
 22821 000122E2 50                      	push rax
 22822 000122E3 6A02                    	push 2
 22823 000122E5 488B0425[88040000]      	mov rax, qword [free_var_145]
 22824                                  	assert_closure(rax)
    65 000122ED 803805              <1>  cmp byte [%1], %2
    66 000122F0 0F853E1E0000        <1>  jne L_error_incorrect_type
 22825 000122F6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22826 000122FA 53                      	push rbx
 22827 000122FB FF7508                  	push RET_ADDR
 22828 000122FE 488B7D18                	mov rdi, COUNT
 22829 00012302 4883C703                	add rdi, 3
 22830 00012306 48C1E703                	shl rdi, 3
 22831 0001230A 4801EF                  	add rdi, rbp
 22832 0001230D 488B6D00                	mov rbp, OLD_RDP
 22833 00012311 BE00000000              	mov rsi, 0
 22834                                  .L_tc_recycle_frame_loop_5d52:	 ; start recycle frame loop
 22835 00012316 4883FE05                	cmp rsi, 5
 22836 0001231A 7427                    	je .L_tc_recycle_frame_done_5d52
 22837 0001231C B904000000              	mov rcx, 4
 22838 00012321 4829F1                  	sub rcx, rsi
 22839 00012324 48C1E103                	shl rcx, 3
 22840 00012328 4801E1                  	add rcx, rsp ; rcx is the address to move
 22841 0001232B 4889F3                  	mov rbx, rsi
 22842 0001232E 48C1E303                	shl rbx, 3
 22843 00012332 48F7DB                  	neg rbx
 22844 00012335 4801FB                  	add rbx, rdi ;rbx is the address to move to
 22845 00012338 488B09                  	mov rcx, [rcx]
 22846 0001233B 48890B                  	mov [rbx], rcx
 22847 0001233E 48FFC6                  	inc rsi
 22848 00012341 EBD3                    	jmp .L_tc_recycle_frame_loop_5d52
 22849                                  .L_tc_recycle_frame_done_5d52:	 ; end recycle frame loop
 22850 00012343 BB04000000              	mov rbx, 4
 22851 00012348 48C1E303                	shl rbx, 3
 22852 0001234C 48F7DB                  	neg rbx
 22853 0001234F 4801FB                  	add rbx, rdi
 22854 00012352 4889DC                  	mov rsp, rbx
 22855 00012355 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22856 00012359 FFE3                    	jmp rbx
 22857                                  	.L_if_end_56d9:
 22858                                  	.L_if_end_56d8:
 22859 0001235B C9                      	leave
 22860 0001235C C22000                  	ret 8 * (2 + 2)
 22861                                  .L_lambda_simple_end_4fc4:	; new closure is in rax
 22862 0001235F 48890425[88040000]      	mov qword [free_var_145], rax
 22863 00012367 48B8-                   	mov rax, sob_void
 22863 00012369 [0000000000000000] 
 22864                                  
 22865 00012371 4889C7                  	mov rdi, rax
 22866 00012374 E84C050000              	call print_sexpr_if_not_void
 22867                                  
 22868 00012379 488D0425[17000000]      	lea rax, [23 + L_constants]
 22869 00012381 50                      	push rax
 22870 00012382 488D0425[17000000]      	lea rax, [23 + L_constants]
 22871 0001238A 50                      	push rax
 22872 0001238B 6A02                    	push 2
 22873 0001238D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22874 00012392 E81D050000              	call malloc
 22875 00012397 50                      	push rax
 22876 00012398 BF00000000              	mov rdi, 8 * 0	; new rib
 22877 0001239D E812050000              	call malloc
 22878 000123A2 50                      	push rax
 22879 000123A3 BF08000000              	mov rdi, 8 * 1	; extended env
 22880 000123A8 E807050000              	call malloc
 22881 000123AD 488B7D10                	mov rdi, ENV
 22882 000123B1 BE00000000              	mov rsi, 0
 22883 000123B6 BA01000000              	mov rdx, 1
 22884                                  .L_lambda_simple_env_loop_4fc5:	; ext_env[i + 1] <-- env[i]
 22885 000123BB 4883FE00                	cmp rsi, 0
 22886 000123BF 7410                    	je .L_lambda_simple_env_end_4fc5
 22887 000123C1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 22888 000123C5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22889 000123C9 48FFC6                  	inc rsi
 22890 000123CC 48FFC2                  	inc rdx
 22891 000123CF EBEA                    	jmp .L_lambda_simple_env_loop_4fc5
 22892                                  .L_lambda_simple_env_end_4fc5:
 22893 000123D1 5B                      	pop rbx
 22894 000123D2 BE00000000              	mov rsi, 0
 22895                                  .L_lambda_simple_params_loop_4fc5:	; copy params
 22896 000123D7 4883FE00                	cmp rsi, 0
 22897 000123DB 740E                    	je .L_lambda_simple_params_end_4fc5
 22898 000123DD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22899 000123E2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22900 000123E6 48FFC6                  	inc rsi
 22901 000123E9 EBEC                    	jmp .L_lambda_simple_params_loop_4fc5
 22902                                  .L_lambda_simple_params_end_4fc5:
 22903 000123EB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22904 000123EE 4889C3                  	mov rbx, rax
 22905 000123F1 58                      	pop rax
 22906 000123F2 C60005                  	mov byte [rax], T_closure
 22907 000123F5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22908 000123F9 48C74009[06240100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc5
 22909 00012401 E9BB030000              	jmp .L_lambda_simple_end_4fc5
 22910                                  .L_lambda_simple_code_4fc5:	; lambda-simple body
 22911 00012406 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22912 0001240C 740B                    	je .L_lambda_simple_arity_check_ok_4fc5
 22913 0001240E FF742410                	push qword [rsp + 8 * 2]
 22914 00012412 6A02                    	push 2
 22915 00012414 E954040000              	jmp L_error_incorrect_arity_simple
 22916                                  .L_lambda_simple_arity_check_ok_4fc5:
 22917 00012419 C8000000                	enter 0, 0
 22918 0001241D BF11000000              	mov qword rdi, (1 + 8 + 8)
 22919 00012422 E88D040000              	call malloc
 22920 00012427 48894520                	mov qword [rbp + 8*(4 + 0)], rax
 22921 0001242B 48B8-                   	mov rax, sob_void
 22921 0001242D [0000000000000000] 
 22922                                  
 22923 00012435 BF11000000              	mov qword rdi, (1 + 8 + 8)
 22924 0001243A E875040000              	call malloc
 22925 0001243F 48894528                	mov qword [rbp + 8*(4 + 1)], rax
 22926 00012443 48B8-                   	mov rax, sob_void
 22926 00012445 [0000000000000000] 
 22927                                  
 22928 0001244D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22929 00012452 E85D040000              	call malloc
 22930 00012457 50                      	push rax
 22931 00012458 BF10000000              	mov rdi, 8 * 2	; new rib
 22932 0001245D E852040000              	call malloc
 22933 00012462 50                      	push rax
 22934 00012463 BF10000000              	mov rdi, 8 * 2	; extended env
 22935 00012468 E847040000              	call malloc
 22936 0001246D 488B7D10                	mov rdi, ENV
 22937 00012471 BE00000000              	mov rsi, 0
 22938 00012476 BA01000000              	mov rdx, 1
 22939                                  .L_lambda_simple_env_loop_4fc6:	; ext_env[i + 1] <-- env[i]
 22940 0001247B 4883FE01                	cmp rsi, 1
 22941 0001247F 7410                    	je .L_lambda_simple_env_end_4fc6
 22942 00012481 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 22943 00012485 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22944 00012489 48FFC6                  	inc rsi
 22945 0001248C 48FFC2                  	inc rdx
 22946 0001248F EBEA                    	jmp .L_lambda_simple_env_loop_4fc6
 22947                                  .L_lambda_simple_env_end_4fc6:
 22948 00012491 5B                      	pop rbx
 22949 00012492 BE00000000              	mov rsi, 0
 22950                                  .L_lambda_simple_params_loop_4fc6:	; copy params
 22951 00012497 4883FE02                	cmp rsi, 2
 22952 0001249B 740E                    	je .L_lambda_simple_params_end_4fc6
 22953 0001249D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22954 000124A2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22955 000124A6 48FFC6                  	inc rsi
 22956 000124A9 EBEC                    	jmp .L_lambda_simple_params_loop_4fc6
 22957                                  .L_lambda_simple_params_end_4fc6:
 22958 000124AB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22959 000124AE 4889C3                  	mov rbx, rax
 22960 000124B1 58                      	pop rax
 22961 000124B2 C60005                  	mov byte [rax], T_closure
 22962 000124B5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22963 000124B9 48C74009[C6240100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc6
 22964 000124C1 E9E9000000              	jmp .L_lambda_simple_end_4fc6
 22965                                  .L_lambda_simple_code_4fc6:	; lambda-simple body
 22966 000124C6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22967 000124CC 740B                    	je .L_lambda_simple_arity_check_ok_4fc6
 22968 000124CE FF742410                	push qword [rsp + 8 * 2]
 22969 000124D2 6A02                    	push 2
 22970 000124D4 E994030000              	jmp L_error_incorrect_arity_simple
 22971                                  .L_lambda_simple_arity_check_ok_4fc6:
 22972 000124D9 C8000000                	enter 0, 0
 22973 000124DD 488B4528                	mov rax, PARAM(1)
 22974 000124E1 50                      	push rax
 22975 000124E2 6A01                    	push 1
 22976 000124E4 488B0425[D8000000]      	mov rax, qword [free_var_27]
 22977                                  	assert_closure(rax)
    65 000124EC 803805              <1>  cmp byte [%1], %2
    66 000124EF 0F853F1C0000        <1>  jne L_error_incorrect_type
 22978 000124F5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22979 000124F9 53                      	push rbx
 22980 000124FA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22981 000124FE FFD3                    	call rbx
 22982 00012500 483D[02000000]          	cmp rax, sob_boolean_false
 22983 00012506 7409                    	je .L_if_else_56da
 22984 00012508 488B4528                	mov rax, PARAM(1)
 22985 0001250C E99A000000              	jmp .L_if_end_56da
 22986                                  	.L_if_else_56da:
 22987 00012511 488D0425[01000000]      	lea rax, [1 + L_constants]
 22988 00012519 50                      	push rax
 22989 0001251A 488B4528                	mov rax, PARAM(1)
 22990 0001251E 50                      	push rax
 22991 0001251F 488B4520                	mov rax, PARAM(0)
 22992 00012523 50                      	push rax
 22993 00012524 488B4510                	mov rax, qword [rbp + 8*2]
 22994 00012528 488B00                  	mov rax, qword [rax + 8*0]
 22995 0001252B 488B4008                	mov rax, qword [rax + 8*1]
 22996 0001252F 488B00                  	mov rax, qword [rax]
 22997 00012532 50                      	push rax
 22998 00012533 6A04                    	push 4
 22999 00012535 488B0425[C8020000]      	mov rax, qword [free_var_89]
 23000                                  	assert_closure(rax)
    65 0001253D 803805              <1>  cmp byte [%1], %2
    66 00012540 0F85EE1B0000        <1>  jne L_error_incorrect_type
 23001 00012546 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 23002 0001254A 53                      	push rbx
 23003 0001254B FF7508                  	push RET_ADDR
 23004 0001254E 488B7D18                	mov rdi, COUNT
 23005 00012552 4883C703                	add rdi, 3
 23006 00012556 48C1E703                	shl rdi, 3
 23007 0001255A 4801EF                  	add rdi, rbp
 23008 0001255D 488B6D00                	mov rbp, OLD_RDP
 23009 00012561 BE00000000              	mov rsi, 0
 23010                                  .L_tc_recycle_frame_loop_5d53:	 ; start recycle frame loop
 23011 00012566 4883FE07                	cmp rsi, 7
 23012 0001256A 7427                    	je .L_tc_recycle_frame_done_5d53
 23013 0001256C B906000000              	mov rcx, 6
 23014 00012571 4829F1                  	sub rcx, rsi
 23015 00012574 48C1E103                	shl rcx, 3
 23016 00012578 4801E1                  	add rcx, rsp ; rcx is the address to move
 23017 0001257B 4889F3                  	mov rbx, rsi
 23018 0001257E 48C1E303                	shl rbx, 3
 23019 00012582 48F7DB                  	neg rbx
 23020 00012585 4801FB                  	add rbx, rdi ;rbx is the address to move to
 23021 00012588 488B09                  	mov rcx, [rcx]
 23022 0001258B 48890B                  	mov [rbx], rcx
 23023 0001258E 48FFC6                  	inc rsi
 23024 00012591 EBD3                    	jmp .L_tc_recycle_frame_loop_5d53
 23025                                  .L_tc_recycle_frame_done_5d53:	 ; end recycle frame loop
 23026 00012593 BB06000000              	mov rbx, 6
 23027 00012598 48C1E303                	shl rbx, 3
 23028 0001259C 48F7DB                  	neg rbx
 23029 0001259F 4801FB                  	add rbx, rdi
 23030 000125A2 4889DC                  	mov rsp, rbx
 23031 000125A5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 23032 000125A9 FFE3                    	jmp rbx
 23033                                  	.L_if_end_56da:
 23034 000125AB C9                      	leave
 23035 000125AC C22000                  	ret 8 * (2 + 2)
 23036                                  .L_lambda_simple_end_4fc6:	; new closure is in rax
 23037 000125AF 50                      	push rax
 23038 000125B0 488B4520                	mov rax, PARAM(0)
 23039 000125B4 8F00                    	pop qword [rax]
 23040 000125B6 48B8-                   	mov rax, sob_void
 23040 000125B8 [0000000000000000] 
 23041                                  
 23042 000125C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23043 000125C5 E8EA020000              	call malloc
 23044 000125CA 50                      	push rax
 23045 000125CB BF10000000              	mov rdi, 8 * 2	; new rib
 23046 000125D0 E8DF020000              	call malloc
 23047 000125D5 50                      	push rax
 23048 000125D6 BF10000000              	mov rdi, 8 * 2	; extended env
 23049 000125DB E8D4020000              	call malloc
 23050 000125E0 488B7D10                	mov rdi, ENV
 23051 000125E4 BE00000000              	mov rsi, 0
 23052 000125E9 BA01000000              	mov rdx, 1
 23053                                  .L_lambda_simple_env_loop_4fc7:	; ext_env[i + 1] <-- env[i]
 23054 000125EE 4883FE01                	cmp rsi, 1
 23055 000125F2 7410                    	je .L_lambda_simple_env_end_4fc7
 23056 000125F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
 23057 000125F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23058 000125FC 48FFC6                  	inc rsi
 23059 000125FF 48FFC2                  	inc rdx
 23060 00012602 EBEA                    	jmp .L_lambda_simple_env_loop_4fc7
 23061                                  .L_lambda_simple_env_end_4fc7:
 23062 00012604 5B                      	pop rbx
 23063 00012605 BE00000000              	mov rsi, 0
 23064                                  .L_lambda_simple_params_loop_4fc7:	; copy params
 23065 0001260A 4883FE02                	cmp rsi, 2
 23066 0001260E 740E                    	je .L_lambda_simple_params_end_4fc7
 23067 00012610 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23068 00012615 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23069 00012619 48FFC6                  	inc rsi
 23070 0001261C EBEC                    	jmp .L_lambda_simple_params_loop_4fc7
 23071                                  .L_lambda_simple_params_end_4fc7:
 23072 0001261E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23073 00012621 4889C3                  	mov rbx, rax
 23074 00012624 58                      	pop rax
 23075 00012625 C60005                  	mov byte [rax], T_closure
 23076 00012628 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23077 0001262C 48C74009[39260100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_4fc7
 23078 00012634 E9D8000000              	jmp .L_lambda_simple_end_4fc7
 23079                                  .L_lambda_simple_code_4fc7:	; lambda-simple body
 23080 00012639 48837C241002            	cmp qword [rsp + 8 * 2], 2
 23081 0001263F 740B                    	je .L_lambda_simple_arity_check_ok_4fc7
 23082 00012641 FF742410                	push qword [rsp + 8 * 2]
 23083 00012645 6A02                    	push 2
 23084 00012647 E921020000              	jmp L_error_incorrect_arity_simple
 23085                                  .L_lambda_simple_arity_check_ok_4fc7:
 23086 0001264C C8000000                	enter 0, 0
 23087 00012650 488D0425[01000000]      	lea rax, [1 + L_constants]
 23088 00012658 50                      	push rax
 23089 00012659 488D0425[80000000]      	lea rax, [128 + L_constants]
 23090 00012661 50                      	push rax
 23091 00012662 488B4528                	mov rax, PARAM(1)
 23092 00012666 50                      	push rax
 23093 00012667 6A02                    	push 2
 23094 00012669 488B4520                	mov rax, PARAM(0)
 23095                                  	assert_closure(rax)
    65 0001266D 803805              <1>  cmp byte [%1], %2
    66 00012670 0F85BE1A0000        <1>  jne L_error_incorrect_type
 23096 00012676 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 23097 0001267A 53                      	push rbx
 23098 0001267B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 23099 0001267F FFD3                    	call rbx
 23100 00012681 50                      	push rax
 23101 00012682 488B4520                	mov rax, PARAM(0)
 23102 00012686 50                      	push rax
 23103 00012687 488B4510                	mov rax, qword [rbp + 8*2]
 23104 0001268B 488B00                  	mov rax, qword [rax + 8*0]
 23105 0001268E 488B00                  	mov rax, qword [rax + 8*0]
 23106 00012691 488B00                  	mov rax, qword [rax]
 23107 00012694 50                      	push rax
 23108 00012695 6A04                    	push 4
 23109 00012697 488B0425[C8020000]      	mov rax, qword [free_var_89]
 23110                                  	assert_closure(rax)
    65 0001269F 803805              <1>  cmp byte [%1], %2
    66 000126A2 0F858C1A0000        <1>  jne L_error_incorrect_type
 23111 000126A8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 23112 000126AC 53                      	push rbx
 23113 000126AD FF7508                  	push RET_ADDR
 23114 000126B0 488B7D18                	mov rdi, COUNT
 23115 000126B4 4883C703                	add rdi, 3
 23116 000126B8 48C1E703                	shl rdi, 3
 23117 000126BC 4801EF                  	add rdi, rbp
 23118 000126BF 488B6D00                	mov rbp, OLD_RDP
 23119 000126C3 BE00000000              	mov rsi, 0
 23120                                  .L_tc_recycle_frame_loop_5d54:	 ; start recycle frame loop
 23121 000126C8 4883FE07                	cmp rsi, 7
 23122 000126CC 7427                    	je .L_tc_recycle_frame_done_5d54
 23123 000126CE B906000000              	mov rcx, 6
 23124 000126D3 4829F1                  	sub rcx, rsi
 23125 000126D6 48C1E103                	shl rcx, 3
 23126 000126DA 4801E1                  	add rcx, rsp ; rcx is the address to move
 23127 000126DD 4889F3                  	mov rbx, rsi
 23128 000126E0 48C1E303                	shl rbx, 3
 23129 000126E4 48F7DB                  	neg rbx
 23130 000126E7 4801FB                  	add rbx, rdi ;rbx is the address to move to
 23131 000126EA 488B09                  	mov rcx, [rcx]
 23132 000126ED 48890B                  	mov [rbx], rcx
 23133 000126F0 48FFC6                  	inc rsi
 23134 000126F3 EBD3                    	jmp .L_tc_recycle_frame_loop_5d54
 23135                                  .L_tc_recycle_frame_done_5d54:	 ; end recycle frame loop
 23136 000126F5 BB06000000              	mov rbx, 6
 23137 000126FA 48C1E303                	shl rbx, 3
 23138 000126FE 48F7DB                  	neg rbx
 23139 00012701 4801FB                  	add rbx, rdi
 23140 00012704 4889DC                  	mov rsp, rbx
 23141 00012707 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 23142 0001270B FFE3                    	jmp rbx
 23143 0001270D C9                      	leave
 23144 0001270E C22000                  	ret 8 * (2 + 2)
 23145                                  .L_lambda_simple_end_4fc7:	; new closure is in rax
 23146 00012711 50                      	push rax
 23147 00012712 488B4528                	mov rax, PARAM(1)
 23148 00012716 8F00                    	pop qword [rax]
 23149 00012718 48B8-                   	mov rax, sob_void
 23149 0001271A [0000000000000000] 
 23150                                  
 23151 00012722 488D0425[01000000]      	lea rax, [1 + L_constants]
 23152 0001272A 50                      	push rax
 23153 0001272B 488D0425[11020000]      	lea rax, [529 + L_constants]
 23154 00012733 50                      	push rax
 23155 00012734 488B0425[18010000]      	mov rax, qword [free_var_35]
 23156 0001273C 50                      	push rax
 23157 0001273D 488B4520                	mov rax, PARAM(0)
 23158 00012741 488B00                  	mov rax, qword [rax]
 23159 00012744 50                      	push rax
 23160 00012745 6A04                    	push 4
 23161 00012747 488B0425[C8020000]      	mov rax, qword [free_var_89]
 23162                                  	assert_closure(rax)
    65 0001274F 803805              <1>  cmp byte [%1], %2
    66 00012752 0F85DC190000        <1>  jne L_error_incorrect_type
 23163 00012758 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 23164 0001275C 53                      	push rbx
 23165 0001275D FF7508                  	push RET_ADDR
 23166 00012760 488B7D18                	mov rdi, COUNT
 23167 00012764 4883C703                	add rdi, 3
 23168 00012768 48C1E703                	shl rdi, 3
 23169 0001276C 4801EF                  	add rdi, rbp
 23170 0001276F 488B6D00                	mov rbp, OLD_RDP
 23171 00012773 BE00000000              	mov rsi, 0
 23172                                  .L_tc_recycle_frame_loop_5d55:	 ; start recycle frame loop
 23173 00012778 4883FE07                	cmp rsi, 7
 23174 0001277C 7427                    	je .L_tc_recycle_frame_done_5d55
 23175 0001277E B906000000              	mov rcx, 6
 23176 00012783 4829F1                  	sub rcx, rsi
 23177 00012786 48C1E103                	shl rcx, 3
 23178 0001278A 4801E1                  	add rcx, rsp ; rcx is the address to move
 23179 0001278D 4889F3                  	mov rbx, rsi
 23180 00012790 48C1E303                	shl rbx, 3
 23181 00012794 48F7DB                  	neg rbx
 23182 00012797 4801FB                  	add rbx, rdi ;rbx is the address to move to
 23183 0001279A 488B09                  	mov rcx, [rcx]
 23184 0001279D 48890B                  	mov [rbx], rcx
 23185 000127A0 48FFC6                  	inc rsi
 23186 000127A3 EBD3                    	jmp .L_tc_recycle_frame_loop_5d55
 23187                                  .L_tc_recycle_frame_done_5d55:	 ; end recycle frame loop
 23188 000127A5 BB06000000              	mov rbx, 6
 23189 000127AA 48C1E303                	shl rbx, 3
 23190 000127AE 48F7DB                  	neg rbx
 23191 000127B1 4801FB                  	add rbx, rdi
 23192 000127B4 4889DC                  	mov rsp, rbx
 23193 000127B7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 23194 000127BB FFE3                    	jmp rbx
 23195 000127BD C9                      	leave
 23196 000127BE C22000                  	ret 8 * (2 + 2)
 23197                                  .L_lambda_simple_end_4fc5:	; new closure is in rax
 23198                                  	assert_closure(rax)
    65 000127C1 803805              <1>  cmp byte [%1], %2
    66 000127C4 0F856A190000        <1>  jne L_error_incorrect_type
 23199 000127CA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 23200 000127CE 53                      	push rbx
 23201 000127CF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 23202 000127D3 FFD3                    	call rbx
 23203                                  
 23204 000127D5 4889C7                  	mov rdi, rax
 23205 000127D8 E8E8000000              	call print_sexpr_if_not_void
 23206                                  
 23207 000127DD 48BF-                           mov rdi, fmt_memory_usage
 23207 000127DF [8102000000000000] 
 23208 000127E7 488B3425[1C030000]              mov rsi, qword [top_of_memory]
 23209 000127EF 4881EE[90040000]                sub rsi, memory
 23210 000127F6 B800000000                      mov rax, 0
 23211                                  	ENTER
    56 000127FB C8000000            <1>  enter 0, 0
    57 000127FF 4883E4F0            <1>  and rsp, ~15
 23212 00012803 E8(00000000)                    call printf
 23213                                  	LEAVE
    61 00012808 C9                  <1>  leave
 23214 00012809 C9                      	leave
 23215 0001280A C3                      	ret
 23216                                  
 23217                                  L_error_non_closure:
 23218 0001280B 488B3C25[00000000]              mov rdi, qword [stderr]
 23219 00012813 48BE-                           mov rsi, fmt_non_closure
 23219 00012815 [B802000000000000] 
 23220 0001281D B800000000                      mov rax, 0
 23221                                  	ENTER
    56 00012822 C8000000            <1>  enter 0, 0
    57 00012826 4883E4F0            <1>  and rsp, ~15
 23222 0001282A E8(00000000)                    call fprintf
 23223                                  	LEAVE
    61 0001282F C9                  <1>  leave
 23224 00012830 48C7C0FEFFFFFF                  mov rax, -2
 23225 00012837 E8(00000000)                    call exit
 23226                                  
 23227                                  L_error_improper_list:
 23228 0001283C 488B3C25[00000000]      	mov rdi, qword [stderr]
 23229 00012844 48BE-                   	mov rsi, fmt_error_improper_list
 23229 00012846 [E002000000000000] 
 23230 0001284E B800000000              	mov rax, 0
 23231                                  	ENTER
    56 00012853 C8000000            <1>  enter 0, 0
    57 00012857 4883E4F0            <1>  and rsp, ~15
 23232 0001285B E8(00000000)            	call fprintf
 23233                                  	LEAVE
    61 00012860 C9                  <1>  leave
 23234 00012861 48C7C0F9FFFFFF          	mov rax, -7
 23235 00012868 E8(00000000)            	call exit
 23236                                  
 23237                                  L_error_incorrect_arity_simple:
 23238 0001286D 488B3C25[00000000]              mov rdi, qword [stderr]
 23239 00012875 48BE-                           mov rsi, fmt_incorrect_arity_simple
 23239 00012877 [2202000000000000] 
 23240 0001287F EB12                            jmp L_error_incorrect_arity_common
 23241                                  L_error_incorrect_arity_opt:
 23242 00012881 488B3C25[00000000]              mov rdi, qword [stderr]
 23243 00012889 48BE-                           mov rsi, fmt_incorrect_arity_opt
 23243 0001288B [4D02000000000000] 
 23244                                  L_error_incorrect_arity_common:
 23245 00012893 5A                              pop rdx
 23246 00012894 59                              pop rcx
 23247 00012895 B800000000                      mov rax, 0
 23248                                  	ENTER
    56 0001289A C8000000            <1>  enter 0, 0
    57 0001289E 4883E4F0            <1>  and rsp, ~15
 23249 000128A2 E8(00000000)                    call fprintf
 23250                                  	LEAVE
    61 000128A7 C9                  <1>  leave
 23251 000128A8 48C7C0FAFFFFFF                  mov rax, -6
 23252 000128AF E8(00000000)                    call exit
 23253                                  
 23254                                  section .data
 23255                                  fmt_incorrect_arity_simple:
 23256 00000222 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 23256 0000022B 74656420256C642061-
 23256 00000234 7267756D656E74732C-
 23256 0000023D 206275742067697665-
 23256 00000246 6E20256C640A00     
 23257                                  fmt_incorrect_arity_opt:
 23258 0000024D 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 23258 00000256 746564206174206C65-
 23258 0000025F 61737420256C642061-
 23258 00000268 7267756D656E74732C-
 23258 00000271 206275742067697665-
 23258 0000027A 6E20256C640A00     
 23259                                  fmt_memory_usage:
 23260 00000281 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 23260 0000028A 6420256C6420627974-
 23260 00000293 6573206F662064796E-
 23260 0000029C 616D6963616C6C792D-
 23260 000002A5 616C6C6F6361746564-
 23260 000002AE 206D656D6F72790A0A-
 23260 000002B7 00                 
 23261                                  fmt_non_closure:
 23262 000002B8 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 23262 000002C1 7074696E6720746F20-
 23262 000002CA 6170706C792061206E-
 23262 000002D3 6F6E2D636C6F737572-
 23262 000002DC 65210A00           
 23263                                  fmt_error_improper_list:
 23264 000002E0 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 23264 000002E9 7267756D656E742069-
 23264 000002F2 73206E6F7420612070-
 23264 000002FB 726F706572206C6973-
 23264 00000304 74210A00           
 23265                                  fmt_test:
 23266 00000308 746573742068657265-             db `test here %d at %d\n\0`
 23266 00000311 202564206174202564-
 23266 0000031A 0A00               
 23267                                  
 23268                                  section .bss
 23269                                  memory:
 23270 00000490 <res 40000000h>         	resb gbytes(1)
 23271                                  
 23272                                  section .data
 23273                                  top_of_memory:
 23274 0000031C [9004000000000000]              dq memory
 23275                                  
 23276                                  section .text
 23277                                  malloc:
 23278 000128B4 488B0425[1C030000]              mov rax, qword [top_of_memory]
 23279 000128BC 48013C25[1C030000]              add qword [top_of_memory], rdi
 23280 000128C4 C3                              ret
 23281                                          
 23282                                  print_sexpr_if_not_void:
 23283 000128C5 4881FF[00000000]        	cmp rdi, sob_void
 23284 000128CC 7501                    	jne print_sexpr
 23285 000128CE C3                      	ret
 23286                                  
 23287                                  section .data
 23288                                  fmt_void:
 23289 00000324 233C766F69643E00        	db `#<void>\0`
 23290                                  fmt_nil:
 23291 0000032C 282900                  	db `()\0`
 23292                                  fmt_boolean_false:
 23293 0000032F 236600                  	db `#f\0`
 23294                                  fmt_boolean_true:
 23295 00000332 237400                  	db `#t\0`
 23296                                  fmt_char_backslash:
 23297 00000335 235C5C00                	db `#\\\\\0`
 23298                                  fmt_char_dquote:
 23299 00000339 235C2200                	db `#\\"\0`
 23300                                  fmt_char_simple:
 23301 0000033D 235C256300              	db `#\\%c\0`
 23302                                  fmt_char_null:
 23303 00000342 235C6E756C00            	db `#\\nul\0`
 23304                                  fmt_char_bell:
 23305 00000348 235C62656C6C00          	db `#\\bell\0`
 23306                                  fmt_char_backspace:
 23307 0000034F 235C6261636B737061-     	db `#\\backspace\0`
 23307 00000358 636500             
 23308                                  fmt_char_tab:
 23309 0000035B 235C74616200            	db `#\\tab\0`
 23310                                  fmt_char_newline:
 23311 00000361 235C6E65776C696E65-     	db `#\\newline\0`
 23311 0000036A 00                 
 23312                                  fmt_char_formfeed:
 23313 0000036B 235C7061676500          	db `#\\page\0`
 23314                                  fmt_char_return:
 23315 00000372 235C72657475726E00      	db `#\\return\0`
 23316                                  fmt_char_escape:
 23317 0000037B 235C65736300            	db `#\\esc\0`
 23318                                  fmt_char_space:
 23319 00000381 235C737061636500        	db `#\\space\0`
 23320                                  fmt_char_hex:
 23321 00000389 235C782530325800        	db `#\\x%02X\0`
 23322                                  fmt_closure:
 23323 00000391 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 23323 0000039A 206174203078253038-
 23323 000003A3 5820656E763D307825-
 23323 000003AC 30385820636F64653D-
 23323 000003B5 3078253038583E00   
 23324                                  fmt_lparen:
 23325 000003BD 2800                    	db `(\0`
 23326                                  fmt_dotted_pair:
 23327 000003BF 202E2000                	db ` . \0`
 23328                                  fmt_rparen:
 23329 000003C3 2900                    	db `)\0`
 23330                                  fmt_space:
 23331 000003C5 2000                    	db ` \0`
 23332                                  fmt_empty_vector:
 23333 000003C7 23282900                	db `#()\0`
 23334                                  fmt_vector:
 23335 000003CB 232800                  	db `#(\0`
 23336                                  fmt_real:
 23337 000003CE 256600                  	db `%f\0`
 23338                                  fmt_fraction:
 23339 000003D1 256C642F256C6400        	db `%ld/%ld\0`
 23340                                  fmt_zero:
 23341 000003D9 3000                    	db `0\0`
 23342                                  fmt_int:
 23343 000003DB 256C6400                	db `%ld\0`
 23344                                  fmt_unknown_sexpr_error:
 23345 000003DF 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
 23345 000003E8 6F723A20556E6B6E6F-
 23345 000003F1 776E2074797065206F-
 23345 000003FA 662073657870722028-
 23345 00000403 3078253032582920   
 23346 0000040B 617420616464726573-     	db `at address 0x%08X\n\n\0`
 23346 00000414 73203078253038580A-
 23346 0000041D 0A00               
 23347                                  fmt_dquote:
 23348 0000041F 2200                    	db `\"\0`
 23349                                  fmt_string_char:
 23350 00000421 256300                          db `%c\0`
 23351                                  fmt_string_char_7:
 23352 00000424 5C6100                          db `\\a\0`
 23353                                  fmt_string_char_8:
 23354 00000427 5C6200                          db `\\b\0`
 23355                                  fmt_string_char_9:
 23356 0000042A 5C7400                          db `\\t\0`
 23357                                  fmt_string_char_10:
 23358 0000042D 5C6E00                          db `\\n\0`
 23359                                  fmt_string_char_11:
 23360 00000430 5C7600                          db `\\v\0`
 23361                                  fmt_string_char_12:
 23362 00000433 5C6600                          db `\\f\0`
 23363                                  fmt_string_char_13:
 23364 00000436 5C7200                          db `\\r\0`
 23365                                  fmt_string_char_34:
 23366 00000439 5C2200                          db `\\"\0`
 23367                                  fmt_string_char_92:
 23368 0000043C 5C5C00                          db `\\\\\0`
 23369                                  fmt_string_char_hex:
 23370 0000043F 5C7825583B00                    db `\\x%X;\0`
 23371                                  
 23372                                  section .text
 23373                                  
 23374                                  print_sexpr:
 23375                                  	ENTER
    56 000128CF C8000000            <1>  enter 0, 0
    57 000128D3 4883E4F0            <1>  and rsp, ~15
 23376 000128D7 8A07                    	mov al, byte [rdi]
 23377 000128D9 3C00                    	cmp al, T_void
 23378 000128DB 744D                    	je .Lvoid
 23379 000128DD 3C01                    	cmp al, T_nil
 23380 000128DF 7458                    	je .Lnil
 23381 000128E1 3C09                    	cmp al, T_boolean_false
 23382 000128E3 7463                    	je .Lboolean_false
 23383 000128E5 3C0A                    	cmp al, T_boolean_true
 23384 000128E7 746E                    	je .Lboolean_true
 23385 000128E9 3C02                    	cmp al, T_char
 23386 000128EB 7479                    	je .Lchar
 23387 000128ED 3C04                    	cmp al, T_symbol
 23388 000128EF 0F84BB010000            	je .Lsymbol
 23389 000128F5 3C21                    	cmp al, T_pair
 23390 000128F7 0F84D6010000            	je .Lpair
 23391 000128FD 3C22                    	cmp al, T_vector
 23392 000128FF 0F849F020000            	je .Lvector
 23393 00012905 3C05                    	cmp al, T_closure
 23394 00012907 0F8489010000            	je .Lclosure
 23395 0001290D 3C12                    	cmp al, T_real
 23396 0001290F 0F8430030000            	je .Lreal
 23397 00012915 3C11                    	cmp al, T_rational
 23398 00012917 0F8456030000            	je .Lrational
 23399 0001291D 3C03                    	cmp al, T_string
 23400 0001291F 0F848F030000            	je .Lstring
 23401                                  
 23402 00012925 E9C7040000              	jmp .Lunknown_sexpr_type
 23403                                  
 23404                                  .Lvoid:
 23405 0001292A 48BF-                   	mov rdi, fmt_void
 23405 0001292C [2403000000000000] 
 23406 00012934 E9F5040000              	jmp .Lemit
 23407                                  
 23408                                  .Lnil:
 23409 00012939 48BF-                   	mov rdi, fmt_nil
 23409 0001293B [2C03000000000000] 
 23410 00012943 E9E6040000              	jmp .Lemit
 23411                                  
 23412                                  .Lboolean_false:
 23413 00012948 48BF-                   	mov rdi, fmt_boolean_false
 23413 0001294A [2F03000000000000] 
 23414 00012952 E9D7040000              	jmp .Lemit
 23415                                  
 23416                                  .Lboolean_true:
 23417 00012957 48BF-                   	mov rdi, fmt_boolean_true
 23417 00012959 [3203000000000000] 
 23418 00012961 E9C8040000              	jmp .Lemit
 23419                                  
 23420                                  .Lchar:
 23421 00012966 8A4701                  	mov al, byte [rdi + 1]
 23422 00012969 3C20                    	cmp al, ' '
 23423 0001296B 7E28                    	jle .Lchar_whitespace
 23424 0001296D 3C5C                    	cmp al, 92 		; backslash
 23425 0001296F 0F847C000000            	je .Lchar_backslash
 23426 00012975 3C22                    	cmp al, '"'
 23427 00012977 0F8483000000            	je .Lchar_dquote
 23428 0001297D 4825FF000000            	and rax, 255
 23429 00012983 48BF-                   	mov rdi, fmt_char_simple
 23429 00012985 [3D03000000000000] 
 23430 0001298D 4889C6                  	mov rsi, rax
 23431 00012990 E999040000              	jmp .Lemit
 23432                                  
 23433                                  .Lchar_whitespace:
 23434 00012995 3C00                    	cmp al, 0
 23435 00012997 7476                    	je .Lchar_null
 23436 00012999 3C07                    	cmp al, 7
 23437 0001299B 0F847D000000            	je .Lchar_bell
 23438 000129A1 3C08                    	cmp al, 8
 23439 000129A3 0F8484000000            	je .Lchar_backspace
 23440 000129A9 3C09                    	cmp al, 9
 23441 000129AB 0F848B000000            	je .Lchar_tab
 23442 000129B1 3C0A                    	cmp al, 10
 23443 000129B3 0F8492000000            	je .Lchar_newline
 23444 000129B9 3C0C                    	cmp al, 12
 23445 000129BB 0F8499000000            	je .Lchar_formfeed
 23446 000129C1 3C0D                    	cmp al, 13
 23447 000129C3 0F84A0000000            	je .Lchar_return
 23448 000129C9 3C1B                    	cmp al, 27
 23449 000129CB 0F84A7000000            	je .Lchar_escape
 23450 000129D1 4825FF000000            	and rax, 255
 23451 000129D7 3C20                    	cmp al, ' '
 23452 000129D9 0F84A8000000            	je .Lchar_space
 23453 000129DF 48BF-                   	mov rdi, fmt_char_hex
 23453 000129E1 [8903000000000000] 
 23454 000129E9 4889C6                  	mov rsi, rax
 23455 000129EC E93D040000              	jmp .Lemit	
 23456                                  
 23457                                  .Lchar_backslash:
 23458 000129F1 48BF-                   	mov rdi, fmt_char_backslash
 23458 000129F3 [3503000000000000] 
 23459 000129FB E92E040000              	jmp .Lemit
 23460                                  
 23461                                  .Lchar_dquote:
 23462 00012A00 48BF-                   	mov rdi, fmt_char_dquote
 23462 00012A02 [3903000000000000] 
 23463 00012A0A E91F040000              	jmp .Lemit
 23464                                  
 23465                                  .Lchar_null:
 23466 00012A0F 48BF-                   	mov rdi, fmt_char_null
 23466 00012A11 [4203000000000000] 
 23467 00012A19 E910040000              	jmp .Lemit
 23468                                  
 23469                                  .Lchar_bell:
 23470 00012A1E 48BF-                   	mov rdi, fmt_char_bell
 23470 00012A20 [4803000000000000] 
 23471 00012A28 E901040000              	jmp .Lemit
 23472                                  
 23473                                  .Lchar_backspace:
 23474 00012A2D 48BF-                   	mov rdi, fmt_char_backspace
 23474 00012A2F [4F03000000000000] 
 23475 00012A37 E9F2030000              	jmp .Lemit
 23476                                  
 23477                                  .Lchar_tab:
 23478 00012A3C 48BF-                   	mov rdi, fmt_char_tab
 23478 00012A3E [5B03000000000000] 
 23479 00012A46 E9E3030000              	jmp .Lemit
 23480                                  
 23481                                  .Lchar_newline:
 23482 00012A4B 48BF-                   	mov rdi, fmt_char_newline
 23482 00012A4D [6103000000000000] 
 23483 00012A55 E9D4030000              	jmp .Lemit
 23484                                  
 23485                                  .Lchar_formfeed:
 23486 00012A5A 48BF-                   	mov rdi, fmt_char_formfeed
 23486 00012A5C [6B03000000000000] 
 23487 00012A64 E9C5030000              	jmp .Lemit
 23488                                  
 23489                                  .Lchar_return:
 23490 00012A69 48BF-                   	mov rdi, fmt_char_return
 23490 00012A6B [7203000000000000] 
 23491 00012A73 E9B6030000              	jmp .Lemit
 23492                                  
 23493                                  .Lchar_escape:
 23494 00012A78 48BF-                   	mov rdi, fmt_char_escape
 23494 00012A7A [7B03000000000000] 
 23495 00012A82 E9A7030000              	jmp .Lemit
 23496                                  
 23497                                  .Lchar_space:
 23498 00012A87 48BF-                   	mov rdi, fmt_char_space
 23498 00012A89 [8103000000000000] 
 23499 00012A91 E998030000              	jmp .Lemit
 23500                                  
 23501                                  .Lclosure:
 23502 00012A96 4889FE                  	mov rsi, qword rdi
 23503 00012A99 48BF-                   	mov rdi, fmt_closure
 23503 00012A9B [9103000000000000] 
 23504 00012AA3 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 23505 00012AA7 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 23506 00012AAB E97E030000              	jmp .Lemit
 23507                                  
 23508                                  .Lsymbol:
 23509 00012AB0 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 23510 00012AB4 BE01000000              	mov rsi, 1		 ; size = 1 byte
 23511 00012AB9 488B5701                	mov rdx, qword [rdi + 1] ; length
 23512 00012ABD 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 23513 00012AC1 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 23514 00012AC9 E8(00000000)            	call fwrite
 23515 00012ACE E970030000              	jmp .Lend
 23516                                  	
 23517                                  .Lpair:
 23518 00012AD3 57                      	push rdi
 23519 00012AD4 48BF-                   	mov rdi, fmt_lparen
 23519 00012AD6 [BD03000000000000] 
 23520 00012ADE B800000000              	mov rax, 0
 23521                                          ENTER
    56 00012AE3 C8000000            <1>  enter 0, 0
    57 00012AE7 4883E4F0            <1>  and rsp, ~15
 23522 00012AEB E8(00000000)            	call printf
 23523                                          LEAVE
    61 00012AF0 C9                  <1>  leave
 23524 00012AF1 488B3C24                	mov rdi, qword [rsp] 	; pair
 23525 00012AF5 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 23526 00012AF9 E8D1FDFFFF              	call print_sexpr
 23527 00012AFE 5F                      	pop rdi 		; pair
 23528 00012AFF 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 23529                                  .Lcdr:
 23530 00012B03 8A07                    	mov al, byte [rdi]
 23531 00012B05 3C01                    	cmp al, T_nil
 23532 00012B07 7447                    	je .Lcdr_nil
 23533 00012B09 3C21                    	cmp al, T_pair
 23534 00012B0B 7462                    	je .Lcdr_pair
 23535 00012B0D 57                      	push rdi
 23536 00012B0E 48BF-                   	mov rdi, fmt_dotted_pair
 23536 00012B10 [BF03000000000000] 
 23537 00012B18 B800000000              	mov rax, 0
 23538                                  	ENTER
    56 00012B1D C8000000            <1>  enter 0, 0
    57 00012B21 4883E4F0            <1>  and rsp, ~15
 23539 00012B25 E8(00000000)            	call printf
 23540                                  	LEAVE
    61 00012B2A C9                  <1>  leave
 23541 00012B2B 5F                      	pop rdi
 23542 00012B2C E89EFDFFFF              	call print_sexpr
 23543 00012B31 48BF-                   	mov rdi, fmt_rparen
 23543 00012B33 [C303000000000000] 
 23544 00012B3B B800000000              	mov rax, 0
 23545                                  	ENTER
    56 00012B40 C8000000            <1>  enter 0, 0
    57 00012B44 4883E4F0            <1>  and rsp, ~15
 23546 00012B48 E8(00000000)            	call printf
 23547                                  	LEAVE
    61 00012B4D C9                  <1>  leave
 23548                                  	LEAVE
    61 00012B4E C9                  <1>  leave
 23549 00012B4F C3                      	ret
 23550                                  
 23551                                  .Lcdr_nil:
 23552 00012B50 48BF-                   	mov rdi, fmt_rparen
 23552 00012B52 [C303000000000000] 
 23553 00012B5A B800000000              	mov rax, 0
 23554                                  	ENTER
    56 00012B5F C8000000            <1>  enter 0, 0
    57 00012B63 4883E4F0            <1>  and rsp, ~15
 23555 00012B67 E8(00000000)            	call printf
 23556                                  	LEAVE
    61 00012B6C C9                  <1>  leave
 23557                                  	LEAVE
    61 00012B6D C9                  <1>  leave
 23558 00012B6E C3                      	ret
 23559                                  
 23560                                  .Lcdr_pair:
 23561 00012B6F 57                      	push rdi
 23562 00012B70 48BF-                   	mov rdi, fmt_space
 23562 00012B72 [C503000000000000] 
 23563 00012B7A B800000000              	mov rax, 0
 23564                                  	ENTER
    56 00012B7F C8000000            <1>  enter 0, 0
    57 00012B83 4883E4F0            <1>  and rsp, ~15
 23565 00012B87 E8(00000000)            	call printf
 23566                                  	LEAVE
    61 00012B8C C9                  <1>  leave
 23567 00012B8D 488B3C24                	mov rdi, qword [rsp]
 23568 00012B91 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 23569 00012B95 E835FDFFFF              	call print_sexpr
 23570 00012B9A 5F                      	pop rdi
 23571 00012B9B 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 23572 00012B9F E95FFFFFFF              	jmp .Lcdr
 23573                                  
 23574                                  .Lvector:
 23575 00012BA4 488B4701                	mov rax, qword [rdi + 1] ; length
 23576 00012BA8 4883F800                	cmp rax, 0
 23577 00012BAC 0F8484000000            	je .Lvector_empty
 23578 00012BB2 57                      	push rdi
 23579 00012BB3 48BF-                   	mov rdi, fmt_vector
 23579 00012BB5 [CB03000000000000] 
 23580 00012BBD B800000000              	mov rax, 0
 23581                                  	ENTER
    56 00012BC2 C8000000            <1>  enter 0, 0
    57 00012BC6 4883E4F0            <1>  and rsp, ~15
 23582 00012BCA E8(00000000)            	call printf
 23583                                  	LEAVE
    61 00012BCF C9                  <1>  leave
 23584 00012BD0 488B3C24                	mov rdi, qword [rsp]
 23585 00012BD4 FF7701                  	push qword [rdi + 1]
 23586 00012BD7 6A01                    	push 1
 23587 00012BD9 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 23588 00012BDD E8EDFCFFFF              	call print_sexpr
 23589                                  .Lvector_loop:
 23590                                  	; [rsp] index
 23591                                  	; [rsp + 8*1] limit
 23592                                  	; [rsp + 8*2] vector
 23593 00012BE2 488B0424                	mov rax, qword [rsp]
 23594 00012BE6 483B442408              	cmp rax, qword [rsp + 8*1]
 23595 00012BEB 7436                    	je .Lvector_end
 23596 00012BED 48BF-                   	mov rdi, fmt_space
 23596 00012BEF [C503000000000000] 
 23597 00012BF7 B800000000              	mov rax, 0
 23598                                  	ENTER
    56 00012BFC C8000000            <1>  enter 0, 0
    57 00012C00 4883E4F0            <1>  and rsp, ~15
 23599 00012C04 E8(00000000)            	call printf
 23600                                  	LEAVE
    61 00012C09 C9                  <1>  leave
 23601 00012C0A 488B0424                	mov rax, qword [rsp]
 23602 00012C0E 488B5C2410              	mov rbx, qword [rsp + 8*2]
 23603 00012C13 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 23604 00012C18 E8B2FCFFFF              	call print_sexpr
 23605 00012C1D 48FF0424                	inc qword [rsp]
 23606 00012C21 EBBF                    	jmp .Lvector_loop
 23607                                  
 23608                                  .Lvector_end:
 23609 00012C23 4883C418                	add rsp, 8*3
 23610 00012C27 48BF-                   	mov rdi, fmt_rparen
 23610 00012C29 [C303000000000000] 
 23611 00012C31 E9F8010000              	jmp .Lemit	
 23612                                  
 23613                                  .Lvector_empty:
 23614 00012C36 48BF-                   	mov rdi, fmt_empty_vector
 23614 00012C38 [C703000000000000] 
 23615 00012C40 E9E9010000              	jmp .Lemit
 23616                                  
 23617                                  .Lreal:
 23618 00012C45 FF7701                  	push qword [rdi + 1]
 23619 00012C48 F20F100424              	movsd xmm0, qword [rsp]
 23620 00012C4D 4883C408                	add rsp, 8*1
 23621 00012C51 48BF-                   	mov rdi, fmt_real
 23621 00012C53 [CE03000000000000] 
 23622 00012C5B B801000000              	mov rax, 1
 23623                                  	ENTER
    56 00012C60 C8000000            <1>  enter 0, 0
    57 00012C64 4883E4F0            <1>  and rsp, ~15
 23624 00012C68 E8(00000000)            	call printf
 23625                                  	LEAVE
    61 00012C6D C9                  <1>  leave
 23626 00012C6E E9D0010000              	jmp .Lend
 23627                                  
 23628                                  .Lrational:
 23629 00012C73 488B7701                	mov rsi, qword [rdi + 1]
 23630 00012C77 488B5709                	mov rdx, qword [rdi + 1 + 8]
 23631 00012C7B 4883FE00                	cmp rsi, 0
 23632 00012C7F 7415                    	je .Lrat_zero
 23633 00012C81 4883FA01                	cmp rdx, 1
 23634 00012C85 741E                    	je .Lrat_int
 23635 00012C87 48BF-                   	mov rdi, fmt_fraction
 23635 00012C89 [D103000000000000] 
 23636 00012C91 E998010000              	jmp .Lemit
 23637                                  
 23638                                  .Lrat_zero:
 23639 00012C96 48BF-                   	mov rdi, fmt_zero
 23639 00012C98 [D903000000000000] 
 23640 00012CA0 E989010000              	jmp .Lemit
 23641                                  
 23642                                  .Lrat_int:
 23643 00012CA5 48BF-                   	mov rdi, fmt_int
 23643 00012CA7 [DB03000000000000] 
 23644 00012CAF E97A010000              	jmp .Lemit
 23645                                  
 23646                                  .Lstring:
 23647 00012CB4 488D4709                	lea rax, [rdi + 1 + 8]
 23648 00012CB8 50                      	push rax
 23649 00012CB9 FF7701                  	push qword [rdi + 1]
 23650 00012CBC 48BF-                   	mov rdi, fmt_dquote
 23650 00012CBE [1F04000000000000] 
 23651 00012CC6 B800000000              	mov rax, 0
 23652                                  	ENTER
    56 00012CCB C8000000            <1>  enter 0, 0
    57 00012CCF 4883E4F0            <1>  and rsp, ~15
 23653 00012CD3 E8(00000000)            	call printf
 23654                                  	LEAVE
    61 00012CD8 C9                  <1>  leave
 23655                                  .Lstring_loop:
 23656                                  	; qword [rsp]: limit
 23657                                  	; qword [rsp + 8*1]: char *
 23658 00012CD9 48833C2400              	cmp qword [rsp], 0
 23659 00012CDE 0F84FD000000            	je .Lstring_end
 23660 00012CE4 488B442408              	mov rax, qword [rsp + 8*1]
 23661 00012CE9 8A00                    	mov al, byte [rax]
 23662 00012CEB 4825FF000000            	and rax, 255
 23663 00012CF1 3C07                    	cmp al, 7
 23664 00012CF3 7468                            je .Lstring_char_7
 23665 00012CF5 3C08                            cmp al, 8
 23666 00012CF7 7470                            je .Lstring_char_8
 23667 00012CF9 3C09                            cmp al, 9
 23668 00012CFB 7478                            je .Lstring_char_9
 23669 00012CFD 3C0A                            cmp al, 10
 23670 00012CFF 0F847C000000                    je .Lstring_char_10
 23671 00012D05 3C0B                            cmp al, 11
 23672 00012D07 0F8480000000                    je .Lstring_char_11
 23673 00012D0D 3C0C                            cmp al, 12
 23674 00012D0F 0F8484000000                    je .Lstring_char_12
 23675 00012D15 3C0D                            cmp al, 13
 23676 00012D17 0F8488000000                    je .Lstring_char_13
 23677 00012D1D 3C22                            cmp al, 34
 23678 00012D1F 0F848C000000                    je .Lstring_char_34
 23679 00012D25 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 23681 00012D27 3C20                            cmp al, ' '
 23682 00012D29 0F8CA0000000                    jl .Lstring_char_hex
 23683 00012D2F 48BF-                           mov rdi, fmt_string_char
 23683 00012D31 [2104000000000000] 
 23684 00012D39 4889C6                          mov rsi, rax
 23685                                  .Lstring_char_emit:
 23686 00012D3C B800000000                      mov rax, 0
 23687                                          ENTER
    56 00012D41 C8000000            <1>  enter 0, 0
    57 00012D45 4883E4F0            <1>  and rsp, ~15
 23688 00012D49 E8(00000000)                    call printf
 23689                                          LEAVE
    61 00012D4E C9                  <1>  leave
 23690 00012D4F 48FF0C24                        dec qword [rsp]
 23691 00012D53 48FF442408                      inc qword [rsp + 8*1]
 23692 00012D58 E97CFFFFFF                      jmp .Lstring_loop
 23693                                  
 23694                                  .Lstring_char_7:
 23695 00012D5D 48BF-                           mov rdi, fmt_string_char_7
 23695 00012D5F [2404000000000000] 
 23696 00012D67 EBD3                            jmp .Lstring_char_emit
 23697                                  
 23698                                  .Lstring_char_8:
 23699 00012D69 48BF-                           mov rdi, fmt_string_char_8
 23699 00012D6B [2704000000000000] 
 23700 00012D73 EBC7                            jmp .Lstring_char_emit
 23701                                          
 23702                                  .Lstring_char_9:
 23703 00012D75 48BF-                           mov rdi, fmt_string_char_9
 23703 00012D77 [2A04000000000000] 
 23704 00012D7F EBBB                            jmp .Lstring_char_emit
 23705                                  
 23706                                  .Lstring_char_10:
 23707 00012D81 48BF-                           mov rdi, fmt_string_char_10
 23707 00012D83 [2D04000000000000] 
 23708 00012D8B EBAF                            jmp .Lstring_char_emit
 23709                                  
 23710                                  .Lstring_char_11:
 23711 00012D8D 48BF-                           mov rdi, fmt_string_char_11
 23711 00012D8F [3004000000000000] 
 23712 00012D97 EBA3                            jmp .Lstring_char_emit
 23713                                  
 23714                                  .Lstring_char_12:
 23715 00012D99 48BF-                           mov rdi, fmt_string_char_12
 23715 00012D9B [3304000000000000] 
 23716 00012DA3 EB97                            jmp .Lstring_char_emit
 23717                                  
 23718                                  .Lstring_char_13:
 23719 00012DA5 48BF-                           mov rdi, fmt_string_char_13
 23719 00012DA7 [3604000000000000] 
 23720 00012DAF EB8B                            jmp .Lstring_char_emit
 23721                                  
 23722                                  .Lstring_char_34:
 23723 00012DB1 48BF-                           mov rdi, fmt_string_char_34
 23723 00012DB3 [3904000000000000] 
 23724 00012DBB E97CFFFFFF                      jmp .Lstring_char_emit
 23725                                  
 23726                                  .Lstring_char_92:
 23727 00012DC0 48BF-                           mov rdi, fmt_string_char_92
 23727 00012DC2 [3C04000000000000] 
 23728 00012DCA E96DFFFFFF                      jmp .Lstring_char_emit
 23729                                  
 23730                                  .Lstring_char_hex:
 23731 00012DCF 48BF-                           mov rdi, fmt_string_char_hex
 23731 00012DD1 [3F04000000000000] 
 23732 00012DD9 4889C6                          mov rsi, rax
 23733 00012DDC E95BFFFFFF                      jmp .Lstring_char_emit        
 23734                                  
 23735                                  .Lstring_end:
 23736 00012DE1 4883C410                	add rsp, 8 * 2
 23737 00012DE5 48BF-                   	mov rdi, fmt_dquote
 23737 00012DE7 [1F04000000000000] 
 23738 00012DEF EB3D                    	jmp .Lemit
 23739                                  
 23740                                  .Lunknown_sexpr_type:
 23741 00012DF1 48BE-                   	mov rsi, fmt_unknown_sexpr_error
 23741 00012DF3 [DF03000000000000] 
 23742 00012DFB 4825FF000000            	and rax, 255
 23743 00012E01 4889C2                  	mov rdx, rax
 23744 00012E04 4889F9                  	mov rcx, rdi
 23745 00012E07 488B3C25[00000000]      	mov rdi, qword [stderr]
 23746 00012E0F B800000000              	mov rax, 0
 23747                                  	ENTER
    56 00012E14 C8000000            <1>  enter 0, 0
    57 00012E18 4883E4F0            <1>  and rsp, ~15
 23748 00012E1C E8(00000000)            	call fprintf
 23749                                  	LEAVE
    61 00012E21 C9                  <1>  leave
 23750 00012E22 48C7C0FFFFFFFF          	mov rax, -1
 23751 00012E29 E8(00000000)            	call exit
 23752                                  
 23753                                  .Lemit:
 23754 00012E2E B800000000              	mov rax, 0
 23755                                  	ENTER
    56 00012E33 C8000000            <1>  enter 0, 0
    57 00012E37 4883E4F0            <1>  and rsp, ~15
 23756 00012E3B E8(00000000)            	call printf
 23757                                  	LEAVE
    61 00012E40 C9                  <1>  leave
 23758 00012E41 EB00                    	jmp .Lend
 23759                                  
 23760                                  .Lend:
 23761                                  	LEAVE
    61 00012E43 C9                  <1>  leave
 23762 00012E44 C3                      	ret
 23763                                  
 23764                                  ;;; rdi: address of free variable
 23765                                  ;;; rsi: address of code-pointer
 23766                                  bind_primitive:
 23767                                          ENTER
    56 00012E45 C8000000            <1>  enter 0, 0
    57 00012E49 4883E4F0            <1>  and rsp, ~15
 23768 00012E4D 57                              push rdi
 23769 00012E4E BF11000000                      mov rdi, (1 + 8 + 8)
 23770 00012E53 E85CFAFFFF                      call malloc
 23771 00012E58 5F                              pop rdi
 23772 00012E59 C60005                          mov byte [rax], T_closure
 23773 00012E5C 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 23774 00012E64 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 23775 00012E68 488907                          mov qword [rdi], rax
 23776                                          LEAVE
    61 00012E6B C9                  <1>  leave
 23777 00012E6C C3                              ret
 23778                                  
 23779                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
 23780                                  L_code_ptr_bin_apply:
 23781 00012E6D C8000000                        enter 0,0
 23782                                          ; loop over the list and push all its members
 23783 00012E71 BE00000000                      mov rsi, 0
 23784 00012E76 488B5D18                        mov rbx, COUNT
 23785 00012E7A 48FFCB                          dec rbx
 23786 00012E7D 4883C304                        add rbx, 4
 23787 00012E81 48C1E303                        shl rbx, 3
 23788 00012E85 4801EB                          add rbx, rbp
 23789 00012E88 488B1B                          mov rbx, [rbx] ; rbx = [rbp + 8 * (4 + (COUNT-1))]
 23790                                  L_bin_apply_list_loop_start: ; start pushing list to stack
 23791 00012E8B 803B01                          cmp byte [rbx], T_nil
 23792 00012E8E 740C                            je L_bin_apply_list_loop_end
 23793 00012E90 48FFC6                          inc rsi
 23794 00012E93 FF7301                          push SOB_PAIR_CAR(rbx)
 23795 00012E96 488B5B09                        mov rbx, SOB_PAIR_CDR(rbx)
 23796 00012E9A EBEF                            jmp L_bin_apply_list_loop_start
 23797                                  L_bin_apply_list_loop_end: ; end pushing list to stack
 23798                                          ; flip the list on the stack
 23799 00012E9C BB00000000                      mov rbx, 0 ; index
 23800                                  L_bin_apply_list_flip_start:
 23801 00012EA1 4889F1                          mov rcx, rsi
 23802 00012EA4 48FFC9                          dec rcx
 23803 00012EA7 4829D9                          sub rcx, rbx ; rcx is the higher 
 23804 00012EAA 4829D9                          sub rcx, rbx
 23805 00012EAD 4883F900                        cmp rcx, 0
 23806 00012EB1 7E27                            jle L_bin_apply_list_flip_end
 23807 00012EB3 4801D9                          add rcx, rbx ; rcx is the relative higher. rbx is the relative lower
 23808 00012EB6 4889DF                          mov rdi, rbx
 23809 00012EB9 48C1E703                        shl rdi, 3
 23810 00012EBD 4801E7                          add rdi, rsp ; rdi is the absolute higher
 23811 00012EC0 488B07                          mov rax, [rdi] ; rdi = [rsp + 8*rsi] ->  rax is the absolute higher value
 23812 00012EC3 48C1E103                        shl rcx, 3
 23813 00012EC7 4801E1                          add rcx, rsp ; rcx = rsp + 8*(length-1-index) -> rcx is the absolute lower
 23814 00012ECA 53                              push rbx ; save rbx
 23815 00012ECB 488B19                          mov rbx, [rcx]
 23816 00012ECE 48891F                          mov [rdi], rbx ; [rsp + 8*rsi] = [rsp + 8*(length-1-index)]
 23817 00012ED1 488901                          mov [rcx], rax ; [rsp + 8*(length-1-index)] = [rsp + 8*rsi]
 23818 00012ED4 5B                              pop rbx ; restore rbx
 23819 00012ED5 48FFC3                          inc rbx
 23820 00012ED8 EBC7                            jmp L_bin_apply_list_flip_start
 23821                                  L_bin_apply_list_flip_end:
 23822                                          ; push all the rest of the arguments
 23823 00012EDA 488B4D18                        mov rcx, COUNT
 23824 00012EDE 4883E902                        sub rcx, 2
 23825                                  L_bin_apply_args_loop_start: ; start pushing the rest of args
 23826 00012EE2 4883F900                        cmp rcx, 0
 23827 00012EE6 741A                            je L_bin_apply_args_loop_end
 23828 00012EE8 48FFC6                          inc rsi ; for counting number of args
 23829 00012EEB 4889CB                          mov rbx, rcx
 23830 00012EEE 4883C304                        add rbx, 4
 23831 00012EF2 48C1E303                        shl rbx, 3
 23832 00012EF6 4801EB                          add rbx, rbp
 23833 00012EF9 488B1B                          mov rbx, [rbx] ; rbx = [rbp + 8 * (4 + rcx)]
 23834 00012EFC 53                              push rbx
 23835 00012EFD 48FFC9                          dec rcx
 23836 00012F00 EBE0                            jmp L_bin_apply_args_loop_start
 23837                                  L_bin_apply_args_loop_end:
 23838                                          ; push number of arguments
 23839 00012F02 56                              push rsi
 23840                                          ; push lex env
 23841 00012F03 488B4520                        mov rax, PARAM(0)
 23842 00012F07 FF7001                          push SOB_CLOSURE_ENV(rax)
 23843                                          ; push ret add
 23844 00012F0A FF7508                          push RET_ADDR
 23845                                          ; fix the stack
 23846                                          ; loop over the stack and move it to the top of the previos stack
 23847 00012F0D 4889F2                          mov rdx, rsi
 23848                                  
 23849 00012F10 488B7D18                        mov rdi, COUNT 
 23850 00012F14 4883C703                        add rdi, 3 ; rdi = COUNT + 3 = COUNT + (num_of_args, lex, ret)
 23851 00012F18 48C1E703                        shl rdi, 3
 23852 00012F1C 4801EF                          add rdi, rbp
 23853                                  
 23854 00012F1F 488B6D00                        mov rbp, OLD_RDP
 23855 00012F23 BE00000000                      mov rsi, 0
 23856                                  L_bin_apply_fix_stack_start:
 23857 00012F28 4889D1                          mov rcx, rdx
 23858 00012F2B 4883C103                        add rcx, 3
 23859 00012F2F 4839CE                          cmp rsi, rcx
 23860 00012F32 7429                            je L_bin_apply_fix_stack_end
 23861 00012F34 4889D1                          mov rcx, rdx 
 23862 00012F37 4883C102                        add rcx, 2 
 23863 00012F3B 4829F1                          sub rcx, rsi 
 23864 00012F3E 48C1E103                        shl rcx, 3
 23865 00012F42 4801E1                          add rcx, rsp ; rcx is the address to move.
 23866 00012F45 4889F3                          mov rbx, rsi
 23867 00012F48 48C1E303                        shl rbx, 3
 23868 00012F4C 48F7DB                          neg rbx
 23869 00012F4F 4801FB                          add rbx, rdi ; rbx is the address to move to.
 23870 00012F52 488B09                          mov rcx, [rcx]
 23871 00012F55 48890B                          mov [rbx], rcx
 23872 00012F58 48FFC6                          inc rsi
 23873 00012F5B EBCB                            jmp L_bin_apply_fix_stack_start
 23874                                  L_bin_apply_fix_stack_end:
 23875                                          ; fix rsp
 23876 00012F5D 4889D3                          mov rbx, rdx
 23877 00012F60 4883C302                        add rbx, 2
 23878 00012F64 48C1E303                        shl rbx, 3
 23879 00012F68 48F7DB                          neg rbx
 23880 00012F6B 4801FB                          add rbx, rdi
 23881 00012F6E 4889DC                          mov rsp, rbx
 23882 00012F71 488B5809                        mov rbx, SOB_CLOSURE_CODE(rax)
 23883 00012F75 FFE3                            jmp rbx
 23884                                  	
 23885                                  L_code_ptr_is_null:
 23886                                          ENTER
    56 00012F77 C8000000            <1>  enter 0, 0
    57 00012F7B 4883E4F0            <1>  and rsp, ~15
 23887 00012F7F 48837D1801                      cmp COUNT, 1
 23888 00012F84 0F85A5100000                    jne L_error_arg_count_1
 23889 00012F8A 488B4520                        mov rax, PARAM(0)
 23890 00012F8E 803801                          cmp byte [rax], T_nil
 23891 00012F91 750C                            jne .L_false
 23892 00012F93 48B8-                           mov rax, sob_boolean_true
 23892 00012F95 [0300000000000000] 
 23893 00012F9D EB0A                            jmp .L_end
 23894                                  .L_false:
 23895 00012F9F 48B8-                           mov rax, sob_boolean_false
 23895 00012FA1 [0200000000000000] 
 23896                                  .L_end:
 23897                                          LEAVE
    61 00012FA9 C9                  <1>  leave
 23898 00012FAA C21800                          ret AND_KILL_FRAME(1)
 23899                                  
 23900                                  L_code_ptr_is_pair:
 23901                                          ENTER
    56 00012FAD C8000000            <1>  enter 0, 0
    57 00012FB1 4883E4F0            <1>  and rsp, ~15
 23902 00012FB5 48837D1801                      cmp COUNT, 1
 23903 00012FBA 0F856F100000                    jne L_error_arg_count_1
 23904 00012FC0 488B4520                        mov rax, PARAM(0)
 23905 00012FC4 803821                          cmp byte [rax], T_pair
 23906 00012FC7 750C                            jne .L_false
 23907 00012FC9 48B8-                           mov rax, sob_boolean_true
 23907 00012FCB [0300000000000000] 
 23908 00012FD3 EB0A                            jmp .L_end
 23909                                  .L_false:
 23910 00012FD5 48B8-                           mov rax, sob_boolean_false
 23910 00012FD7 [0200000000000000] 
 23911                                  .L_end:
 23912                                          LEAVE
    61 00012FDF C9                  <1>  leave
 23913 00012FE0 C21800                          ret AND_KILL_FRAME(1)
 23914                                          
 23915                                  L_code_ptr_is_void:
 23916                                          ENTER
    56 00012FE3 C8000000            <1>  enter 0, 0
    57 00012FE7 4883E4F0            <1>  and rsp, ~15
 23917 00012FEB 48837D1801                      cmp COUNT, 1
 23918 00012FF0 0F8539100000                    jne L_error_arg_count_1
 23919 00012FF6 488B4520                        mov rax, PARAM(0)
 23920 00012FFA 803800                          cmp byte [rax], T_void
 23921 00012FFD 750C                            jne .L_false
 23922 00012FFF 48B8-                           mov rax, sob_boolean_true
 23922 00013001 [0300000000000000] 
 23923 00013009 EB0A                            jmp .L_end
 23924                                  .L_false:
 23925 0001300B 48B8-                           mov rax, sob_boolean_false
 23925 0001300D [0200000000000000] 
 23926                                  .L_end:
 23927                                          LEAVE
    61 00013015 C9                  <1>  leave
 23928 00013016 C21800                          ret AND_KILL_FRAME(1)
 23929                                  
 23930                                  L_code_ptr_is_char:
 23931                                          ENTER
    56 00013019 C8000000            <1>  enter 0, 0
    57 0001301D 4883E4F0            <1>  and rsp, ~15
 23932 00013021 48837D1801                      cmp COUNT, 1
 23933 00013026 0F8503100000                    jne L_error_arg_count_1
 23934 0001302C 488B4520                        mov rax, PARAM(0)
 23935 00013030 803802                          cmp byte [rax], T_char
 23936 00013033 750C                            jne .L_false
 23937 00013035 48B8-                           mov rax, sob_boolean_true
 23937 00013037 [0300000000000000] 
 23938 0001303F EB0A                            jmp .L_end
 23939                                  .L_false:
 23940 00013041 48B8-                           mov rax, sob_boolean_false
 23940 00013043 [0200000000000000] 
 23941                                  .L_end:
 23942                                          LEAVE
    61 0001304B C9                  <1>  leave
 23943 0001304C C21800                          ret AND_KILL_FRAME(1)
 23944                                  
 23945                                  L_code_ptr_is_string:
 23946                                          ENTER
    56 0001304F C8000000            <1>  enter 0, 0
    57 00013053 4883E4F0            <1>  and rsp, ~15
 23947 00013057 48837D1801                      cmp COUNT, 1
 23948 0001305C 0F85CD0F0000                    jne L_error_arg_count_1
 23949 00013062 488B4520                        mov rax, PARAM(0)
 23950 00013066 803803                          cmp byte [rax], T_string
 23951 00013069 750C                            jne .L_false
 23952 0001306B 48B8-                           mov rax, sob_boolean_true
 23952 0001306D [0300000000000000] 
 23953 00013075 EB0A                            jmp .L_end
 23954                                  .L_false:
 23955 00013077 48B8-                           mov rax, sob_boolean_false
 23955 00013079 [0200000000000000] 
 23956                                  .L_end:
 23957                                          LEAVE
    61 00013081 C9                  <1>  leave
 23958 00013082 C21800                          ret AND_KILL_FRAME(1)
 23959                                  
 23960                                  L_code_ptr_is_symbol:
 23961                                          ENTER
    56 00013085 C8000000            <1>  enter 0, 0
    57 00013089 4883E4F0            <1>  and rsp, ~15
 23962 0001308D 48837D1801                      cmp COUNT, 1
 23963 00013092 0F85970F0000                    jne L_error_arg_count_1
 23964 00013098 488B4520                        mov rax, PARAM(0)
 23965 0001309C 803804                          cmp byte [rax], T_symbol
 23966 0001309F 750C                            jne .L_false
 23967 000130A1 48B8-                           mov rax, sob_boolean_true
 23967 000130A3 [0300000000000000] 
 23968 000130AB EB0A                            jmp .L_end
 23969                                  .L_false:
 23970 000130AD 48B8-                           mov rax, sob_boolean_false
 23970 000130AF [0200000000000000] 
 23971                                  .L_end:
 23972                                          LEAVE
    61 000130B7 C9                  <1>  leave
 23973 000130B8 C21800                          ret AND_KILL_FRAME(1)
 23974                                  
 23975                                  L_code_ptr_is_vector:
 23976                                          ENTER
    56 000130BB C8000000            <1>  enter 0, 0
    57 000130BF 4883E4F0            <1>  and rsp, ~15
 23977 000130C3 48837D1801                      cmp COUNT, 1
 23978 000130C8 0F85610F0000                    jne L_error_arg_count_1
 23979 000130CE 488B4520                        mov rax, PARAM(0)
 23980 000130D2 803822                          cmp byte [rax], T_vector
 23981 000130D5 750C                            jne .L_false
 23982 000130D7 48B8-                           mov rax, sob_boolean_true
 23982 000130D9 [0300000000000000] 
 23983 000130E1 EB0A                            jmp .L_end
 23984                                  .L_false:
 23985 000130E3 48B8-                           mov rax, sob_boolean_false
 23985 000130E5 [0200000000000000] 
 23986                                  .L_end:
 23987                                          LEAVE
    61 000130ED C9                  <1>  leave
 23988 000130EE C21800                          ret AND_KILL_FRAME(1)
 23989                                  
 23990                                  L_code_ptr_is_closure:
 23991                                          ENTER
    56 000130F1 C8000000            <1>  enter 0, 0
    57 000130F5 4883E4F0            <1>  and rsp, ~15
 23992 000130F9 48837D1801                      cmp COUNT, 1
 23993 000130FE 0F852B0F0000                    jne L_error_arg_count_1
 23994 00013104 488B4520                        mov rax, PARAM(0)
 23995 00013108 803805                          cmp byte [rax], T_closure
 23996 0001310B 750C                            jne .L_false
 23997 0001310D 48B8-                           mov rax, sob_boolean_true
 23997 0001310F [0300000000000000] 
 23998 00013117 EB0A                            jmp .L_end
 23999                                  .L_false:
 24000 00013119 48B8-                           mov rax, sob_boolean_false
 24000 0001311B [0200000000000000] 
 24001                                  .L_end:
 24002                                          LEAVE
    61 00013123 C9                  <1>  leave
 24003 00013124 C21800                          ret AND_KILL_FRAME(1)
 24004                                  
 24005                                  L_code_ptr_is_real:
 24006                                          ENTER
    56 00013127 C8000000            <1>  enter 0, 0
    57 0001312B 4883E4F0            <1>  and rsp, ~15
 24007 0001312F 48837D1801                      cmp COUNT, 1
 24008 00013134 0F85F50E0000                    jne L_error_arg_count_1
 24009 0001313A 488B4520                        mov rax, PARAM(0)
 24010 0001313E 803812                          cmp byte [rax], T_real
 24011 00013141 750C                            jne .L_false
 24012 00013143 48B8-                           mov rax, sob_boolean_true
 24012 00013145 [0300000000000000] 
 24013 0001314D EB0A                            jmp .L_end
 24014                                  .L_false:
 24015 0001314F 48B8-                           mov rax, sob_boolean_false
 24015 00013151 [0200000000000000] 
 24016                                  .L_end:
 24017                                          LEAVE
    61 00013159 C9                  <1>  leave
 24018 0001315A C21800                          ret AND_KILL_FRAME(1)
 24019                                  
 24020                                  L_code_ptr_is_rational:
 24021                                          ENTER
    56 0001315D C8000000            <1>  enter 0, 0
    57 00013161 4883E4F0            <1>  and rsp, ~15
 24022 00013165 48837D1801                      cmp COUNT, 1
 24023 0001316A 0F85BF0E0000                    jne L_error_arg_count_1
 24024 00013170 488B4520                        mov rax, PARAM(0)
 24025 00013174 803811                          cmp byte [rax], T_rational
 24026 00013177 750C                            jne .L_false
 24027 00013179 48B8-                           mov rax, sob_boolean_true
 24027 0001317B [0300000000000000] 
 24028 00013183 EB0A                            jmp .L_end
 24029                                  .L_false:
 24030 00013185 48B8-                           mov rax, sob_boolean_false
 24030 00013187 [0200000000000000] 
 24031                                  .L_end:
 24032                                          LEAVE
    61 0001318F C9                  <1>  leave
 24033 00013190 C21800                          ret AND_KILL_FRAME(1)
 24034                                  
 24035                                  L_code_ptr_is_boolean:
 24036                                          ENTER
    56 00013193 C8000000            <1>  enter 0, 0
    57 00013197 4883E4F0            <1>  and rsp, ~15
 24037 0001319B 48837D1801                      cmp COUNT, 1
 24038 000131A0 0F85890E0000                    jne L_error_arg_count_1
 24039 000131A6 488B4520                        mov rax, PARAM(0)
 24040 000131AA 8A18                            mov bl, byte [rax]
 24041 000131AC 80E308                          and bl, T_boolean
 24042 000131AF 740C                            je .L_false
 24043 000131B1 48B8-                           mov rax, sob_boolean_true
 24043 000131B3 [0300000000000000] 
 24044 000131BB EB0A                            jmp .L_end
 24045                                  .L_false:
 24046 000131BD 48B8-                           mov rax, sob_boolean_false
 24046 000131BF [0200000000000000] 
 24047                                  .L_end:
 24048                                          LEAVE
    61 000131C7 C9                  <1>  leave
 24049 000131C8 C21800                          ret AND_KILL_FRAME(1)
 24050                                          
 24051                                  L_code_ptr_is_number:
 24052                                          ENTER
    56 000131CB C8000000            <1>  enter 0, 0
    57 000131CF 4883E4F0            <1>  and rsp, ~15
 24053 000131D3 48837D1801                      cmp COUNT, 1
 24054 000131D8 0F85510E0000                    jne L_error_arg_count_1
 24055 000131DE 488B4520                        mov rax, PARAM(0)
 24056 000131E2 8A18                            mov bl, byte [rax]
 24057 000131E4 80E310                          and bl, T_number
 24058 000131E7 740C                            je .L_false
 24059 000131E9 48B8-                           mov rax, sob_boolean_true
 24059 000131EB [0300000000000000] 
 24060 000131F3 EB0A                            jmp .L_end
 24061                                  .L_false:
 24062 000131F5 48B8-                           mov rax, sob_boolean_false
 24062 000131F7 [0200000000000000] 
 24063                                  .L_end:
 24064                                          LEAVE
    61 000131FF C9                  <1>  leave
 24065 00013200 C21800                          ret AND_KILL_FRAME(1)
 24066                                          
 24067                                  L_code_ptr_is_collection:
 24068                                          ENTER
    56 00013203 C8000000            <1>  enter 0, 0
    57 00013207 4883E4F0            <1>  and rsp, ~15
 24069 0001320B 48837D1801                      cmp COUNT, 1
 24070 00013210 0F85190E0000                    jne L_error_arg_count_1
 24071 00013216 488B4520                        mov rax, PARAM(0)
 24072 0001321A 8A18                            mov bl, byte [rax]
 24073 0001321C 80E320                          and bl, T_collection
 24074 0001321F 740C                            je .L_false
 24075 00013221 48B8-                           mov rax, sob_boolean_true
 24075 00013223 [0300000000000000] 
 24076 0001322B EB0A                            jmp .L_end
 24077                                  .L_false:
 24078 0001322D 48B8-                           mov rax, sob_boolean_false
 24078 0001322F [0200000000000000] 
 24079                                  .L_end:
 24080                                          LEAVE
    61 00013237 C9                  <1>  leave
 24081 00013238 C21800                          ret AND_KILL_FRAME(1)
 24082                                  
 24083                                  L_code_ptr_cons:
 24084                                          ENTER
    56 0001323B C8000000            <1>  enter 0, 0
    57 0001323F 4883E4F0            <1>  and rsp, ~15
 24085 00013243 48837D1802                      cmp COUNT, 2
 24086 00013248 0F85160E0000                    jne L_error_arg_count_2
 24087 0001324E BF11000000                      mov rdi, (1 + 8 + 8)
 24088 00013253 E85CF6FFFF                      call malloc
 24089 00013258 C60021                          mov byte [rax], T_pair
 24090 0001325B 488B5D20                        mov rbx, PARAM(0)
 24091 0001325F 48895801                        mov SOB_PAIR_CAR(rax), rbx
 24092 00013263 488B5D28                        mov rbx, PARAM(1)
 24093 00013267 48895809                        mov SOB_PAIR_CDR(rax), rbx
 24094                                          LEAVE
    61 0001326B C9                  <1>  leave
 24095 0001326C C22000                          ret AND_KILL_FRAME(2)
 24096                                  
 24097                                  L_code_ptr_display_sexpr:
 24098                                          ENTER
    56 0001326F C8000000            <1>  enter 0, 0
    57 00013273 4883E4F0            <1>  and rsp, ~15
 24099 00013277 48837D1801                      cmp COUNT, 1
 24100 0001327C 0F85AD0D0000                    jne L_error_arg_count_1
 24101 00013282 488B7D20                        mov rdi, PARAM(0)
 24102 00013286 E844F6FFFF                      call print_sexpr
 24103 0001328B 48B8-                           mov rax, sob_void
 24103 0001328D [0000000000000000] 
 24104                                          LEAVE
    61 00013295 C9                  <1>  leave
 24105 00013296 C21800                          ret AND_KILL_FRAME(1)
 24106                                  
 24107                                  L_code_ptr_write_char:
 24108                                          ENTER
    56 00013299 C8000000            <1>  enter 0, 0
    57 0001329D 4883E4F0            <1>  and rsp, ~15
 24109 000132A1 48837D1801                      cmp COUNT, 1
 24110 000132A6 0F85830D0000                    jne L_error_arg_count_1
 24111 000132AC 488B4520                        mov rax, PARAM(0)
 24112                                          assert_char(rax)
    65 000132B0 803802              <1>  cmp byte [%1], %2
    66 000132B3 0F857B0E0000        <1>  jne L_error_incorrect_type
 24113 000132B9 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 24114 000132BC 4825FF000000                    and rax, 255
 24115 000132C2 48BF-                           mov rdi, fmt_char
 24115 000132C4 [4504000000000000] 
 24116 000132CC 4889C6                          mov rsi, rax
 24117 000132CF B800000000                      mov rax, 0
 24118                                  	ENTER
    56 000132D4 C8000000            <1>  enter 0, 0
    57 000132D8 4883E4F0            <1>  and rsp, ~15
 24119 000132DC E8(00000000)                    call printf
 24120                                  	LEAVE
    61 000132E1 C9                  <1>  leave
 24121 000132E2 48B8-                           mov rax, sob_void
 24121 000132E4 [0000000000000000] 
 24122                                          LEAVE
    61 000132EC C9                  <1>  leave
 24123 000132ED C21800                          ret AND_KILL_FRAME(1)
 24124                                  
 24125                                  L_code_ptr_car:
 24126                                          ENTER
    56 000132F0 C8000000            <1>  enter 0, 0
    57 000132F4 4883E4F0            <1>  and rsp, ~15
 24127 000132F8 48837D1801                      cmp COUNT, 1
 24128 000132FD 0F852C0D0000                    jne L_error_arg_count_1
 24129 00013303 488B4520                        mov rax, PARAM(0)
 24130                                          assert_pair(rax)
    65 00013307 803821              <1>  cmp byte [%1], %2
    66 0001330A 0F85240E0000        <1>  jne L_error_incorrect_type
 24131 00013310 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 24132                                          LEAVE
    61 00013314 C9                  <1>  leave
 24133 00013315 C21800                          ret AND_KILL_FRAME(1)
 24134                                          
 24135                                  L_code_ptr_cdr:
 24136                                          ENTER
    56 00013318 C8000000            <1>  enter 0, 0
    57 0001331C 4883E4F0            <1>  and rsp, ~15
 24137 00013320 48837D1801                      cmp COUNT, 1
 24138 00013325 0F85040D0000                    jne L_error_arg_count_1
 24139 0001332B 488B4520                        mov rax, PARAM(0)
 24140                                          assert_pair(rax)
    65 0001332F 803821              <1>  cmp byte [%1], %2
    66 00013332 0F85FC0D0000        <1>  jne L_error_incorrect_type
 24141 00013338 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 24142                                          LEAVE
    61 0001333C C9                  <1>  leave
 24143 0001333D C21800                          ret AND_KILL_FRAME(1)
 24144                                          
 24145                                  L_code_ptr_string_length:
 24146                                          ENTER
    56 00013340 C8000000            <1>  enter 0, 0
    57 00013344 4883E4F0            <1>  and rsp, ~15
 24147 00013348 48837D1801                      cmp COUNT, 1
 24148 0001334D 0F85DC0C0000                    jne L_error_arg_count_1
 24149 00013353 488B4520                        mov rax, PARAM(0)
 24150                                          assert_string(rax)
    65 00013357 803803              <1>  cmp byte [%1], %2
    66 0001335A 0F85D40D0000        <1>  jne L_error_incorrect_type
 24151 00013360 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 24152 00013364 E83A0C0000                      call make_integer
 24153                                          LEAVE
    61 00013369 C9                  <1>  leave
 24154 0001336A C21800                          ret AND_KILL_FRAME(1)
 24155                                  
 24156                                  L_code_ptr_vector_length:
 24157                                          ENTER
    56 0001336D C8000000            <1>  enter 0, 0
    57 00013371 4883E4F0            <1>  and rsp, ~15
 24158 00013375 48837D1801                      cmp COUNT, 1
 24159 0001337A 0F85AF0C0000                    jne L_error_arg_count_1
 24160 00013380 488B4520                        mov rax, PARAM(0)
 24161                                          assert_vector(rax)
    65 00013384 803822              <1>  cmp byte [%1], %2
    66 00013387 0F85A70D0000        <1>  jne L_error_incorrect_type
 24162 0001338D 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 24163 00013391 E80D0C0000                      call make_integer
 24164                                          LEAVE
    61 00013396 C9                  <1>  leave
 24165 00013397 C21800                          ret AND_KILL_FRAME(1)
 24166                                  
 24167                                  L_code_ptr_real_to_integer:
 24168                                          ENTER
    56 0001339A C8000000            <1>  enter 0, 0
    57 0001339E 4883E4F0            <1>  and rsp, ~15
 24169 000133A2 48837D1801                      cmp COUNT, 1
 24170 000133A7 0F85820C0000                    jne L_error_arg_count_1
 24171 000133AD 488B5D20                        mov rbx, PARAM(0)
 24172                                          assert_real(rbx)
    65 000133B1 803B12              <1>  cmp byte [%1], %2
    66 000133B4 0F857A0D0000        <1>  jne L_error_incorrect_type
 24173 000133BA F20F104301                      movsd xmm0, qword [rbx + 1]
 24174 000133BF F2480F2CF8                      cvttsd2si rdi, xmm0
 24175 000133C4 E8DA0B0000                      call make_integer
 24176                                          LEAVE
    61 000133C9 C9                  <1>  leave
 24177 000133CA C21800                          ret AND_KILL_FRAME(1)
 24178                                  
 24179                                  L_code_ptr_exit:
 24180                                          ENTER
    56 000133CD C8000000            <1>  enter 0, 0
    57 000133D1 4883E4F0            <1>  and rsp, ~15
 24181 000133D5 48837D1800                      cmp COUNT, 0
 24182 000133DA 0F851A0C0000                    jne L_error_arg_count_0
 24183 000133E0 B800000000                      mov rax, 0
 24184 000133E5 E8(00000000)                    call exit
 24185                                  
 24186                                  L_code_ptr_integer_to_real:
 24187                                          ENTER
    56 000133EA C8000000            <1>  enter 0, 0
    57 000133EE 4883E4F0            <1>  and rsp, ~15
 24188 000133F2 48837D1801                      cmp COUNT, 1
 24189 000133F7 0F85320C0000                    jne L_error_arg_count_1
 24190 000133FD 488B4520                        mov rax, PARAM(0)
 24191                                          assert_integer(rax)
    70                              <1>  assert_rational(%1)
    65 00013401 803811              <2>  cmp byte [%1], %2
    66 00013404 0F852A0D0000        <2>  jne L_error_incorrect_type
    71 0001340A 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    72 0001340F 0F851F0D0000        <1>  jne L_error_incorrect_type
 24192 00013415 FF7001                          push qword [rax + 1]
 24193 00013418 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 24194 0001341E E8640B0000                      call make_real
 24195                                          LEAVE
    61 00013423 C9                  <1>  leave
 24196 00013424 C21800                          ret AND_KILL_FRAME(1)
 24197                                  
 24198                                  L_code_ptr_rational_to_real:
 24199                                          ENTER
    56 00013427 C8000000            <1>  enter 0, 0
    57 0001342B 4883E4F0            <1>  and rsp, ~15
 24200 0001342F 48837D1801                      cmp COUNT, 1
 24201 00013434 0F85F50B0000                    jne L_error_arg_count_1
 24202 0001343A 488B4520                        mov rax, PARAM(0)
 24203                                          assert_rational(rax)
    65 0001343E 803811              <1>  cmp byte [%1], %2
    66 00013441 0F85ED0C0000        <1>  jne L_error_incorrect_type
 24204 00013447 FF7001                          push qword [rax + 1]
 24205 0001344A F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 24206 00013450 FF7009                          push qword [rax + 1 + 8]
 24207 00013453 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 24208 00013459 F20F5EC1                        divsd xmm0, xmm1
 24209 0001345D E8250B0000                      call make_real
 24210                                          LEAVE
    61 00013462 C9                  <1>  leave
 24211 00013463 C21800                          ret AND_KILL_FRAME(1)
 24212                                  
 24213                                  L_code_ptr_char_to_integer:
 24214                                          ENTER
    56 00013466 C8000000            <1>  enter 0, 0
    57 0001346A 4883E4F0            <1>  and rsp, ~15
 24215 0001346E 48837D1801                      cmp COUNT, 1
 24216 00013473 0F85B60B0000                    jne L_error_arg_count_1
 24217 00013479 488B4520                        mov rax, PARAM(0)
 24218                                          assert_char(rax)
    65 0001347D 803802              <1>  cmp byte [%1], %2
    66 00013480 0F85AE0C0000        <1>  jne L_error_incorrect_type
 24219 00013486 8A4001                          mov al, byte [rax + 1]
 24220 00013489 4825FF000000                    and rax, 255
 24221 0001348F 4889C7                          mov rdi, rax
 24222 00013492 E80C0B0000                      call make_integer
 24223                                          LEAVE
    61 00013497 C9                  <1>  leave
 24224 00013498 C21800                          ret AND_KILL_FRAME(1)
 24225                                  
 24226                                  L_code_ptr_integer_to_char:
 24227                                          ENTER
    56 0001349B C8000000            <1>  enter 0, 0
    57 0001349F 4883E4F0            <1>  and rsp, ~15
 24228 000134A3 48837D1801                      cmp COUNT, 1
 24229 000134A8 0F85810B0000                    jne L_error_arg_count_1
 24230 000134AE 488B4520                        mov rax, PARAM(0)
 24231                                          assert_integer(rax)
    70                              <1>  assert_rational(%1)
    65 000134B2 803811              <2>  cmp byte [%1], %2
    66 000134B5 0F85790C0000        <2>  jne L_error_incorrect_type
    71 000134BB 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    72 000134C0 0F856E0C0000        <1>  jne L_error_incorrect_type
 24232 000134C6 488B5801                        mov rbx, qword [rax + 1]
 24233 000134CA 4883FB00                        cmp rbx, 0
 24234 000134CE 0F8EF50A0000                    jle L_error_integer_range
 24235 000134D4 4881FB00010000                  cmp rbx, 256
 24236 000134DB 0F8DE80A0000                    jge L_error_integer_range
 24237 000134E1 BF02000000                      mov rdi, (1 + 1)
 24238 000134E6 E8C9F3FFFF                      call malloc
 24239 000134EB C60002                          mov byte [rax], T_char
 24240 000134EE 885801                          mov byte [rax + 1], bl
 24241                                          LEAVE
    61 000134F1 C9                  <1>  leave
 24242 000134F2 C21800                          ret AND_KILL_FRAME(1)
 24243                                  
 24244                                  L_code_ptr_trng:
 24245                                          ENTER
    56 000134F5 C8000000            <1>  enter 0, 0
    57 000134F9 4883E4F0            <1>  and rsp, ~15
 24246 000134FD 48837D1800                      cmp COUNT, 0
 24247 00013502 0F85F20A0000                    jne L_error_arg_count_0
 24248 00013508 480FC7F7                        rdrand rdi
 24249 0001350C 48D1EF                          shr rdi, 1
 24250 0001350F E88F0A0000                      call make_integer
 24251                                          LEAVE
    61 00013514 C9                  <1>  leave
 24252 00013515 C21000                          ret AND_KILL_FRAME(0)
 24253                                  
 24254                                  L_code_ptr_is_zero:
 24255                                          ENTER
    56 00013518 C8000000            <1>  enter 0, 0
    57 0001351C 4883E4F0            <1>  and rsp, ~15
 24256 00013520 48837D1801                      cmp COUNT, 1
 24257 00013525 0F85040B0000                    jne L_error_arg_count_1
 24258 0001352B 488B4520                        mov rax, PARAM(0)
 24259 0001352F 803811                          cmp byte [rax], T_rational
 24260 00013532 740A                            je .L_rational
 24261 00013534 803812                          cmp byte [rax], T_real
 24262 00013537 740E                            je .L_real
 24263 00013539 E9F60B0000                      jmp L_error_incorrect_type
 24264                                  .L_rational:
 24265 0001353E 4883780100                      cmp qword [rax + 1], 0
 24266 00013543 7420                            je .L_zero
 24267 00013545 EB12                            jmp .L_not_zero
 24268                                  .L_real:
 24269 00013547 660FEFC0                        pxor xmm0, xmm0
 24270 0001354B FF7001                          push qword [rax + 1]
 24271 0001354E F20F100C24                      movsd xmm1, qword [rsp]
 24272 00013553 660F2EC1                        ucomisd xmm0, xmm1
 24273 00013557 740C                            je .L_zero
 24274                                  .L_not_zero:
 24275 00013559 48B8-                           mov rax, sob_boolean_false
 24275 0001355B [0200000000000000] 
 24276 00013563 EB0A                            jmp .L_end
 24277                                  .L_zero:
 24278 00013565 48B8-                           mov rax, sob_boolean_true
 24278 00013567 [0300000000000000] 
 24279                                  .L_end:
 24280                                          LEAVE
    61 0001356F C9                  <1>  leave
 24281 00013570 C21800                          ret AND_KILL_FRAME(1)
 24282                                  
 24283                                  L_code_ptr_is_integer:
 24284                                          ENTER
    56 00013573 C8000000            <1>  enter 0, 0
    57 00013577 4883E4F0            <1>  and rsp, ~15
 24285 0001357B 48837D1801                      cmp COUNT, 1
 24286 00013580 0F85A90A0000                    jne L_error_arg_count_1
 24287 00013586 488B4520                        mov rax, PARAM(0)
 24288 0001358A 803811                          cmp byte [rax], T_rational
 24289 0001358D 7513                            jne .L_false
 24290 0001358F 4883780901                      cmp qword [rax + 1 + 8], 1
 24291 00013594 750C                            jne .L_false
 24292 00013596 48B8-                           mov rax, sob_boolean_true
 24292 00013598 [0300000000000000] 
 24293 000135A0 EB0A                            jmp .L_exit
 24294                                  .L_false:
 24295 000135A2 48B8-                           mov rax, sob_boolean_false
 24295 000135A4 [0200000000000000] 
 24296                                  .L_exit:
 24297                                          LEAVE
    61 000135AC C9                  <1>  leave
 24298 000135AD C21800                          ret AND_KILL_FRAME(1)
 24299                                  
 24300                                  L_code_ptr_raw_bin_add_rr:
 24301                                          ENTER
    56 000135B0 C8000000            <1>  enter 0, 0
    57 000135B4 4883E4F0            <1>  and rsp, ~15
 24302 000135B8 48837D1802                      cmp COUNT, 2
 24303 000135BD 0F85A10A0000                    jne L_error_arg_count_2
 24304 000135C3 488B5D20                        mov rbx, PARAM(0)
 24305                                          assert_real(rbx)
    65 000135C7 803B12              <1>  cmp byte [%1], %2
    66 000135CA 0F85640B0000        <1>  jne L_error_incorrect_type
 24306 000135D0 488B4D28                        mov rcx, PARAM(1)
 24307                                          assert_real(rcx)
    65 000135D4 803912              <1>  cmp byte [%1], %2
    66 000135D7 0F85570B0000        <1>  jne L_error_incorrect_type
 24308 000135DD F20F104301                      movsd xmm0, qword [rbx + 1]
 24309 000135E2 F20F104901                      movsd xmm1, qword [rcx + 1]
 24310 000135E7 F20F58C1                        addsd xmm0, xmm1
 24311 000135EB E897090000                      call make_real
 24312                                          LEAVE
    61 000135F0 C9                  <1>  leave
 24313 000135F1 C22000                          ret AND_KILL_FRAME(2)
 24314                                  
 24315                                  L_code_ptr_raw_bin_sub_rr:
 24316                                          ENTER
    56 000135F4 C8000000            <1>  enter 0, 0
    57 000135F8 4883E4F0            <1>  and rsp, ~15
 24317 000135FC 48837D1802                      cmp COUNT, 2
 24318 00013601 0F855D0A0000                    jne L_error_arg_count_2
 24319 00013607 488B5D20                        mov rbx, PARAM(0)
 24320                                          assert_real(rbx)
    65 0001360B 803B12              <1>  cmp byte [%1], %2
    66 0001360E 0F85200B0000        <1>  jne L_error_incorrect_type
 24321 00013614 488B4D28                        mov rcx, PARAM(1)
 24322                                          assert_real(rcx)
    65 00013618 803912              <1>  cmp byte [%1], %2
    66 0001361B 0F85130B0000        <1>  jne L_error_incorrect_type
 24323 00013621 F20F104301                      movsd xmm0, qword [rbx + 1]
 24324 00013626 F20F104901                      movsd xmm1, qword [rcx + 1]
 24325 0001362B F20F5CC1                        subsd xmm0, xmm1
 24326 0001362F E853090000                      call make_real
 24327                                          LEAVE
    61 00013634 C9                  <1>  leave
 24328 00013635 C22000                          ret AND_KILL_FRAME(2)
 24329                                  
 24330                                  L_code_ptr_raw_bin_mul_rr:
 24331                                          ENTER
    56 00013638 C8000000            <1>  enter 0, 0
    57 0001363C 4883E4F0            <1>  and rsp, ~15
 24332 00013640 48837D1802                      cmp COUNT, 2
 24333 00013645 0F85190A0000                    jne L_error_arg_count_2
 24334 0001364B 488B5D20                        mov rbx, PARAM(0)
 24335                                          assert_real(rbx)
    65 0001364F 803B12              <1>  cmp byte [%1], %2
    66 00013652 0F85DC0A0000        <1>  jne L_error_incorrect_type
 24336 00013658 488B4D28                        mov rcx, PARAM(1)
 24337                                          assert_real(rcx)
    65 0001365C 803912              <1>  cmp byte [%1], %2
    66 0001365F 0F85CF0A0000        <1>  jne L_error_incorrect_type
 24338 00013665 F20F104301                      movsd xmm0, qword [rbx + 1]
 24339 0001366A F20F104901                      movsd xmm1, qword [rcx + 1]
 24340 0001366F F20F59C1                        mulsd xmm0, xmm1
 24341 00013673 E80F090000                      call make_real
 24342                                          LEAVE
    61 00013678 C9                  <1>  leave
 24343 00013679 C22000                          ret AND_KILL_FRAME(2)
 24344                                  
 24345                                  L_code_ptr_raw_bin_div_rr:
 24346                                          ENTER
    56 0001367C C8000000            <1>  enter 0, 0
    57 00013680 4883E4F0            <1>  and rsp, ~15
 24347 00013684 48837D1802                      cmp COUNT, 2
 24348 00013689 0F85D5090000                    jne L_error_arg_count_2
 24349 0001368F 488B5D20                        mov rbx, PARAM(0)
 24350                                          assert_real(rbx)
    65 00013693 803B12              <1>  cmp byte [%1], %2
    66 00013696 0F85980A0000        <1>  jne L_error_incorrect_type
 24351 0001369C 488B4D28                        mov rcx, PARAM(1)
 24352                                          assert_real(rcx)
    65 000136A0 803912              <1>  cmp byte [%1], %2
    66 000136A3 0F858B0A0000        <1>  jne L_error_incorrect_type
 24353 000136A9 F20F104301                      movsd xmm0, qword [rbx + 1]
 24354 000136AE F20F104901                      movsd xmm1, qword [rcx + 1]
 24355 000136B3 660FEFD2                        pxor xmm2, xmm2
 24356 000136B7 660F2ECA                        ucomisd xmm1, xmm2
 24357 000136BB 0F84A40A0000                    je L_error_division_by_zero
 24358 000136C1 F20F5EC1                        divsd xmm0, xmm1
 24359 000136C5 E8BD080000                      call make_real
 24360                                          LEAVE
    61 000136CA C9                  <1>  leave
 24361 000136CB C22000                          ret AND_KILL_FRAME(2)
 24362                                  
 24363                                  L_code_ptr_raw_bin_add_qq:
 24364                                          ENTER
    56 000136CE C8000000            <1>  enter 0, 0
    57 000136D2 4883E4F0            <1>  and rsp, ~15
 24365 000136D6 48837D1802                      cmp COUNT, 2
 24366 000136DB 0F8583090000                    jne L_error_arg_count_2
 24367 000136E1 4C8B4520                        mov r8, PARAM(0)
 24368                                          assert_rational(r8)
    65 000136E5 41803811            <1>  cmp byte [%1], %2
    66 000136E9 0F85450A0000        <1>  jne L_error_incorrect_type
 24369 000136EF 4C8B4D28                        mov r9, PARAM(1)
 24370                                          assert_rational(r9)
    65 000136F3 41803911            <1>  cmp byte [%1], %2
    66 000136F7 0F85370A0000        <1>  jne L_error_incorrect_type
 24371 000136FD 498B4001                        mov rax, qword [r8 + 1] ; num1
 24372 00013701 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 24373 00013705 4899                            cqo
 24374 00013707 48F7EB                          imul rbx
 24375 0001370A 4889C6                          mov rsi, rax
 24376 0001370D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24377 00013711 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 24378 00013715 4899                            cqo
 24379 00013717 48F7EB                          imul rbx
 24380 0001371A 4801C6                          add rsi, rax
 24381 0001371D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24382 00013721 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 24383 00013725 4899                            cqo
 24384 00013727 48F7EB                          imul rbx
 24385 0001372A 4889C7                          mov rdi, rax
 24386 0001372D E827010000                      call normalize_rational
 24387                                          LEAVE
    61 00013732 C9                  <1>  leave
 24388 00013733 C22000                          ret AND_KILL_FRAME(2)
 24389                                  
 24390                                  L_code_ptr_raw_bin_sub_qq:
 24391                                          ENTER
    56 00013736 C8000000            <1>  enter 0, 0
    57 0001373A 4883E4F0            <1>  and rsp, ~15
 24392 0001373E 48837D1802                      cmp COUNT, 2
 24393 00013743 0F851B090000                    jne L_error_arg_count_2
 24394 00013749 4C8B4520                        mov r8, PARAM(0)
 24395                                          assert_rational(r8)
    65 0001374D 41803811            <1>  cmp byte [%1], %2
    66 00013751 0F85DD090000        <1>  jne L_error_incorrect_type
 24396 00013757 4C8B4D28                        mov r9, PARAM(1)
 24397                                          assert_rational(r9)
    65 0001375B 41803911            <1>  cmp byte [%1], %2
    66 0001375F 0F85CF090000        <1>  jne L_error_incorrect_type
 24398 00013765 498B4001                        mov rax, qword [r8 + 1] ; num1
 24399 00013769 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 24400 0001376D 4899                            cqo
 24401 0001376F 48F7EB                          imul rbx
 24402 00013772 4889C6                          mov rsi, rax
 24403 00013775 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24404 00013779 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 24405 0001377D 4899                            cqo
 24406 0001377F 48F7EB                          imul rbx
 24407 00013782 4829C6                          sub rsi, rax
 24408 00013785 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24409 00013789 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 24410 0001378D 4899                            cqo
 24411 0001378F 48F7EB                          imul rbx
 24412 00013792 4889C7                          mov rdi, rax
 24413 00013795 E8BF000000                      call normalize_rational
 24414                                          LEAVE
    61 0001379A C9                  <1>  leave
 24415 0001379B C22000                          ret AND_KILL_FRAME(2)
 24416                                  
 24417                                  L_code_ptr_raw_bin_mul_qq:
 24418                                          ENTER
    56 0001379E C8000000            <1>  enter 0, 0
    57 000137A2 4883E4F0            <1>  and rsp, ~15
 24419 000137A6 48837D1802                      cmp COUNT, 2
 24420 000137AB 0F85B3080000                    jne L_error_arg_count_2
 24421 000137B1 4C8B4520                        mov r8, PARAM(0)
 24422                                          assert_rational(r8)
    65 000137B5 41803811            <1>  cmp byte [%1], %2
    66 000137B9 0F8575090000        <1>  jne L_error_incorrect_type
 24423 000137BF 4C8B4D28                        mov r9, PARAM(1)
 24424                                          assert_rational(r9)
    65 000137C3 41803911            <1>  cmp byte [%1], %2
    66 000137C7 0F8567090000        <1>  jne L_error_incorrect_type
 24425 000137CD 498B4001                        mov rax, qword [r8 + 1] ; num1
 24426 000137D1 498B5901                        mov rbx, qword [r9 + 1] ; num2
 24427 000137D5 4899                            cqo
 24428 000137D7 48F7EB                          imul rbx
 24429 000137DA 4889C6                          mov rsi, rax
 24430 000137DD 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24431 000137E1 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 24432 000137E5 4899                            cqo
 24433 000137E7 48F7EB                          imul rbx
 24434 000137EA 4889C7                          mov rdi, rax
 24435 000137ED E867000000                      call normalize_rational
 24436                                          LEAVE
    61 000137F2 C9                  <1>  leave
 24437 000137F3 C22000                          ret AND_KILL_FRAME(2)
 24438                                          
 24439                                  L_code_ptr_raw_bin_div_qq:
 24440                                          ENTER
    56 000137F6 C8000000            <1>  enter 0, 0
    57 000137FA 4883E4F0            <1>  and rsp, ~15
 24441 000137FE 48837D1802                      cmp COUNT, 2
 24442 00013803 0F855B080000                    jne L_error_arg_count_2
 24443 00013809 4C8B4520                        mov r8, PARAM(0)
 24444                                          assert_rational(r8)
    65 0001380D 41803811            <1>  cmp byte [%1], %2
    66 00013811 0F851D090000        <1>  jne L_error_incorrect_type
 24445 00013817 4C8B4D28                        mov r9, PARAM(1)
 24446                                          assert_rational(r9)
    65 0001381B 41803911            <1>  cmp byte [%1], %2
    66 0001381F 0F850F090000        <1>  jne L_error_incorrect_type
 24447 00013825 4983790100                      cmp qword [r9 + 1], 0
 24448 0001382A 0F8435090000                    je L_error_division_by_zero
 24449 00013830 498B4001                        mov rax, qword [r8 + 1] ; num1
 24450 00013834 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 24451 00013838 4899                            cqo
 24452 0001383A 48F7EB                          imul rbx
 24453 0001383D 4889C6                          mov rsi, rax
 24454 00013840 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24455 00013844 498B5901                        mov rbx, qword [r9 + 1] ; num2
 24456 00013848 4899                            cqo
 24457 0001384A 48F7EB                          imul rbx
 24458 0001384D 4889C7                          mov rdi, rax
 24459 00013850 E804000000                      call normalize_rational
 24460                                          LEAVE
    61 00013855 C9                  <1>  leave
 24461 00013856 C22000                          ret AND_KILL_FRAME(2)
 24462                                          
 24463                                  normalize_rational:
 24464 00013859 56                              push rsi
 24465 0001385A 57                              push rdi
 24466 0001385B E839000000                      call gcd
 24467 00013860 4889C3                          mov rbx, rax
 24468 00013863 58                              pop rax
 24469 00013864 4899                            cqo
 24470 00013866 48F7FB                          idiv rbx
 24471 00013869 4989C0                          mov r8, rax
 24472 0001386C 58                              pop rax
 24473 0001386D 4899                            cqo
 24474 0001386F 48F7FB                          idiv rbx
 24475 00013872 4989C1                          mov r9, rax
 24476 00013875 BF11000000                      mov rdi, (1 + 8 + 8)
 24477 0001387A E835F0FFFF                      call malloc
 24478 0001387F C60011                          mov byte [rax], T_rational
 24479 00013882 4C894801                        mov qword [rax + 1], r9
 24480 00013886 4C894009                        mov qword [rax + 1 + 8], r8
 24481 0001388A C3                              ret
 24482                                  
 24483                                  iabs:
 24484 0001388B 4889F8                          mov rax, rdi
 24485 0001388E 4883F800                        cmp rax, 0
 24486 00013892 7C01                            jl .Lneg
 24487 00013894 C3                              ret
 24488                                  .Lneg:
 24489 00013895 48F7D8                          neg rax
 24490 00013898 C3                              ret
 24491                                  
 24492                                  gcd:
 24493 00013899 E8EDFFFFFF                      call iabs
 24494 0001389E 4889C3                          mov rbx, rax
 24495 000138A1 4889F7                          mov rdi, rsi
 24496 000138A4 E8E2FFFFFF                      call iabs
 24497 000138A9 4883F800                        cmp rax, 0
 24498 000138AD 7502                            jne .L0
 24499 000138AF 4893                            xchg rax, rbx
 24500                                  .L0:
 24501 000138B1 4883FB00                        cmp rbx, 0
 24502 000138B5 740C                            je .L1
 24503 000138B7 4899                            cqo
 24504 000138B9 48F7F3                          div rbx
 24505 000138BC 4889D0                          mov rax, rdx
 24506 000138BF 4893                            xchg rax, rbx
 24507 000138C1 EBEE                            jmp .L0
 24508                                  .L1:
 24509 000138C3 C3                              ret
 24510                                  
 24511                                  L_code_ptr_error:
 24512                                          ENTER
    56 000138C4 C8000000            <1>  enter 0, 0
    57 000138C8 4883E4F0            <1>  and rsp, ~15
 24513 000138CC 48837D1802                      cmp COUNT, 2
 24514 000138D1 0F858D070000                    jne L_error_arg_count_2
 24515 000138D7 488B7520                        mov rsi, PARAM(0)
 24516                                          assert_symbol(rsi)
    65 000138DB 803E04              <1>  cmp byte [%1], %2
    66 000138DE 0F8550080000        <1>  jne L_error_incorrect_type
 24517 000138E4 488B7528                        mov rsi, PARAM(1)
 24518                                          assert_string(rsi)
    65 000138E8 803E03              <1>  cmp byte [%1], %2
    66 000138EB 0F8543080000        <1>  jne L_error_incorrect_type
 24519 000138F1 48BF-                           mov rdi, fmt_scheme_error_part_1
 24519 000138F3 [B505000000000000] 
 24520 000138FB B800000000                      mov rax, 0
 24521                                  	ENTER
    56 00013900 C8000000            <1>  enter 0, 0
    57 00013904 4883E4F0            <1>  and rsp, ~15
 24522 00013908 E8(00000000)                    call printf
 24523                                  	LEAVE
    61 0001390D C9                  <1>  leave
 24524 0001390E 488B7D20                        mov rdi, PARAM(0)
 24525 00013912 E8B8EFFFFF                      call print_sexpr
 24526 00013917 48BF-                           mov rdi, fmt_scheme_error_part_2
 24526 00013919 [C905000000000000] 
 24527 00013921 B800000000                      mov rax, 0
 24528                                  	ENTER
    56 00013926 C8000000            <1>  enter 0, 0
    57 0001392A 4883E4F0            <1>  and rsp, ~15
 24529 0001392E E8(00000000)                    call printf
 24530                                  	LEAVE
    61 00013933 C9                  <1>  leave
 24531 00013934 488B4528                        mov rax, PARAM(1)       ; sob_string
 24532 00013938 BE01000000                      mov rsi, 1              ; size = 1 byte
 24533 0001393D 488B5001                        mov rdx, qword [rax + 1] ; length
 24534 00013941 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 24535 00013945 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 24536 0001394D E8(00000000)                    call fwrite
 24537 00013952 48BF-                           mov rdi, fmt_scheme_error_part_3
 24537 00013954 [0B06000000000000] 
 24538 0001395C B800000000                      mov rax, 0
 24539                                  	ENTER
    56 00013961 C8000000            <1>  enter 0, 0
    57 00013965 4883E4F0            <1>  and rsp, ~15
 24540 00013969 E8(00000000)                    call printf
 24541                                  	LEAVE
    61 0001396E C9                  <1>  leave
 24542 0001396F 48C7C0F7FFFFFF                  mov rax, -9
 24543 00013976 E8(00000000)                    call exit
 24544                                  
 24545                                  L_code_ptr_raw_less_than_rr:
 24546                                          ENTER
    56 0001397B C8000000            <1>  enter 0, 0
    57 0001397F 4883E4F0            <1>  and rsp, ~15
 24547 00013983 48837D1802                      cmp COUNT, 2
 24548 00013988 0F85D6060000                    jne L_error_arg_count_2
 24549 0001398E 488B7520                        mov rsi, PARAM(0)
 24550                                          assert_real(rsi)
    65 00013992 803E12              <1>  cmp byte [%1], %2
    66 00013995 0F8599070000        <1>  jne L_error_incorrect_type
 24551 0001399B 488B7D28                        mov rdi, PARAM(1)
 24552                                          assert_real(rdi)
    65 0001399F 803F12              <1>  cmp byte [%1], %2
    66 000139A2 0F858C070000        <1>  jne L_error_incorrect_type
 24553 000139A8 F20F104601                      movsd xmm0, qword [rsi + 1]
 24554 000139AD F20F104F01                      movsd xmm1, qword [rdi + 1]
 24555 000139B2 660F2FC1                        comisd xmm0, xmm1
 24556 000139B6 730C                            jae .L_false
 24557 000139B8 48B8-                           mov rax, sob_boolean_true
 24557 000139BA [0300000000000000] 
 24558 000139C2 EB0A                            jmp .L_exit
 24559                                  .L_false:
 24560 000139C4 48B8-                           mov rax, sob_boolean_false
 24560 000139C6 [0200000000000000] 
 24561                                  .L_exit:
 24562                                          LEAVE
    61 000139CE C9                  <1>  leave
 24563 000139CF C22000                          ret AND_KILL_FRAME(2)
 24564                                          
 24565                                  L_code_ptr_raw_less_than_qq:
 24566                                          ENTER
    56 000139D2 C8000000            <1>  enter 0, 0
    57 000139D6 4883E4F0            <1>  and rsp, ~15
 24567 000139DA 48837D1802                      cmp COUNT, 2
 24568 000139DF 0F857F060000                    jne L_error_arg_count_2
 24569 000139E5 488B7520                        mov rsi, PARAM(0)
 24570                                          assert_rational(rsi)
    65 000139E9 803E11              <1>  cmp byte [%1], %2
    66 000139EC 0F8542070000        <1>  jne L_error_incorrect_type
 24571 000139F2 488B7D28                        mov rdi, PARAM(1)
 24572                                          assert_rational(rdi)
    65 000139F6 803F11              <1>  cmp byte [%1], %2
    66 000139F9 0F8535070000        <1>  jne L_error_incorrect_type
 24573 000139FF 488B4601                        mov rax, qword [rsi + 1] ; num1
 24574 00013A03 4899                            cqo
 24575 00013A05 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 24576 00013A09 4889C1                          mov rcx, rax
 24577 00013A0C 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 24578 00013A10 4899                            cqo
 24579 00013A12 48F76F01                        imul qword [rdi + 1]          ; num2
 24580 00013A16 4829C1                          sub rcx, rax
 24581 00013A19 7D0C                            jge .L_false
 24582 00013A1B 48B8-                           mov rax, sob_boolean_true
 24582 00013A1D [0300000000000000] 
 24583 00013A25 EB0A                            jmp .L_exit
 24584                                  .L_false:
 24585 00013A27 48B8-                           mov rax, sob_boolean_false
 24585 00013A29 [0200000000000000] 
 24586                                  .L_exit:
 24587                                          LEAVE
    61 00013A31 C9                  <1>  leave
 24588 00013A32 C22000                          ret AND_KILL_FRAME(2)
 24589                                  
 24590                                  L_code_ptr_raw_equal_rr:
 24591                                          ENTER
    56 00013A35 C8000000            <1>  enter 0, 0
    57 00013A39 4883E4F0            <1>  and rsp, ~15
 24592 00013A3D 48837D1802                      cmp COUNT, 2
 24593 00013A42 0F851C060000                    jne L_error_arg_count_2
 24594 00013A48 488B7520                        mov rsi, PARAM(0)
 24595                                          assert_real(rsi)
    65 00013A4C 803E12              <1>  cmp byte [%1], %2
    66 00013A4F 0F85DF060000        <1>  jne L_error_incorrect_type
 24596 00013A55 488B7D28                        mov rdi, PARAM(1)
 24597                                          assert_real(rdi)
    65 00013A59 803F12              <1>  cmp byte [%1], %2
    66 00013A5C 0F85D2060000        <1>  jne L_error_incorrect_type
 24598 00013A62 F20F104601                      movsd xmm0, qword [rsi + 1]
 24599 00013A67 F20F104F01                      movsd xmm1, qword [rdi + 1]
 24600 00013A6C 660F2FC1                        comisd xmm0, xmm1
 24601 00013A70 750C                            jne .L_false
 24602 00013A72 48B8-                           mov rax, sob_boolean_true
 24602 00013A74 [0300000000000000] 
 24603 00013A7C EB0A                            jmp .L_exit
 24604                                  .L_false:
 24605 00013A7E 48B8-                           mov rax, sob_boolean_false
 24605 00013A80 [0200000000000000] 
 24606                                  .L_exit:
 24607                                          LEAVE
    61 00013A88 C9                  <1>  leave
 24608 00013A89 C22000                          ret AND_KILL_FRAME(2)
 24609                                          
 24610                                  L_code_ptr_raw_equal_qq:
 24611                                          ENTER
    56 00013A8C C8000000            <1>  enter 0, 0
    57 00013A90 4883E4F0            <1>  and rsp, ~15
 24612 00013A94 48837D1802                      cmp COUNT, 2
 24613 00013A99 0F85C5050000                    jne L_error_arg_count_2
 24614 00013A9F 488B7520                        mov rsi, PARAM(0)
 24615                                          assert_rational(rsi)
    65 00013AA3 803E11              <1>  cmp byte [%1], %2
    66 00013AA6 0F8588060000        <1>  jne L_error_incorrect_type
 24616 00013AAC 488B7D28                        mov rdi, PARAM(1)
 24617                                          assert_rational(rdi)
    65 00013AB0 803F11              <1>  cmp byte [%1], %2
    66 00013AB3 0F857B060000        <1>  jne L_error_incorrect_type
 24618 00013AB9 488B4601                        mov rax, qword [rsi + 1] ; num1
 24619 00013ABD 4899                            cqo
 24620 00013ABF 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 24621 00013AC3 4889C1                          mov rcx, rax
 24622 00013AC6 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 24623 00013ACA 4899                            cqo
 24624 00013ACC 48F76F01                        imul qword [rdi + 1]          ; num2
 24625 00013AD0 4829C1                          sub rcx, rax
 24626 00013AD3 750C                            jne .L_false
 24627 00013AD5 48B8-                           mov rax, sob_boolean_true
 24627 00013AD7 [0300000000000000] 
 24628 00013ADF EB0A                            jmp .L_exit
 24629                                  .L_false:
 24630 00013AE1 48B8-                           mov rax, sob_boolean_false
 24630 00013AE3 [0200000000000000] 
 24631                                  .L_exit:
 24632                                          LEAVE
    61 00013AEB C9                  <1>  leave
 24633 00013AEC C22000                          ret AND_KILL_FRAME(2)
 24634                                  
 24635                                  L_code_ptr_quotient:
 24636                                          ENTER
    56 00013AEF C8000000            <1>  enter 0, 0
    57 00013AF3 4883E4F0            <1>  and rsp, ~15
 24637 00013AF7 48837D1802                      cmp COUNT, 2
 24638 00013AFC 0F8562050000                    jne L_error_arg_count_2
 24639 00013B02 488B7520                        mov rsi, PARAM(0)
 24640                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00013B06 803E11              <2>  cmp byte [%1], %2
    66 00013B09 0F8525060000        <2>  jne L_error_incorrect_type
    71 00013B0F 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00013B14 0F851A060000        <1>  jne L_error_incorrect_type
 24641 00013B1A 488B7D28                        mov rdi, PARAM(1)
 24642                                          assert_integer(rdi)
    70                              <1>  assert_rational(%1)
    65 00013B1E 803F11              <2>  cmp byte [%1], %2
    66 00013B21 0F850D060000        <2>  jne L_error_incorrect_type
    71 00013B27 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00013B2C 0F8502060000        <1>  jne L_error_incorrect_type
 24643 00013B32 488B4601                        mov rax, qword [rsi + 1]
 24644 00013B36 488B5F01                        mov rbx, qword [rdi + 1]
 24645 00013B3A 4883FB00                        cmp rbx, 0
 24646 00013B3E 0F8421060000                    je L_error_division_by_zero
 24647 00013B44 4899                            cqo
 24648 00013B46 48F7FB                          idiv rbx
 24649 00013B49 4889C7                          mov rdi, rax
 24650 00013B4C E852040000                      call make_integer
 24651                                          LEAVE
    61 00013B51 C9                  <1>  leave
 24652 00013B52 C22000                          ret AND_KILL_FRAME(2)
 24653                                          
 24654                                  L_code_ptr_remainder:
 24655                                          ENTER
    56 00013B55 C8000000            <1>  enter 0, 0
    57 00013B59 4883E4F0            <1>  and rsp, ~15
 24656 00013B5D 48837D1802                      cmp COUNT, 2
 24657 00013B62 0F85FC040000                    jne L_error_arg_count_2
 24658 00013B68 488B7520                        mov rsi, PARAM(0)
 24659                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00013B6C 803E11              <2>  cmp byte [%1], %2
    66 00013B6F 0F85BF050000        <2>  jne L_error_incorrect_type
    71 00013B75 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00013B7A 0F85B4050000        <1>  jne L_error_incorrect_type
 24660 00013B80 488B7D28                        mov rdi, PARAM(1)
 24661                                          assert_integer(rdi)
    70                              <1>  assert_rational(%1)
    65 00013B84 803F11              <2>  cmp byte [%1], %2
    66 00013B87 0F85A7050000        <2>  jne L_error_incorrect_type
    71 00013B8D 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00013B92 0F859C050000        <1>  jne L_error_incorrect_type
 24662 00013B98 488B4601                        mov rax, qword [rsi + 1]
 24663 00013B9C 488B5F01                        mov rbx, qword [rdi + 1]
 24664 00013BA0 4883FB00                        cmp rbx, 0
 24665 00013BA4 0F84BB050000                    je L_error_division_by_zero
 24666 00013BAA 4899                            cqo
 24667 00013BAC 48F7FB                          idiv rbx
 24668 00013BAF 4889D7                          mov rdi, rdx
 24669 00013BB2 E8EC030000                      call make_integer
 24670                                          LEAVE
    61 00013BB7 C9                  <1>  leave
 24671 00013BB8 C22000                          ret AND_KILL_FRAME(2)
 24672                                  
 24673                                  L_code_ptr_set_car:
 24674                                          ENTER
    56 00013BBB C8000000            <1>  enter 0, 0
    57 00013BBF 4883E4F0            <1>  and rsp, ~15
 24675 00013BC3 48837D1802                      cmp COUNT, 2
 24676 00013BC8 0F8596040000                    jne L_error_arg_count_2
 24677 00013BCE 488B4520                        mov rax, PARAM(0)
 24678                                          assert_pair(rax)
    65 00013BD2 803821              <1>  cmp byte [%1], %2
    66 00013BD5 0F8559050000        <1>  jne L_error_incorrect_type
 24679 00013BDB 488B5D28                        mov rbx, PARAM(1)
 24680 00013BDF 48895801                        mov SOB_PAIR_CAR(rax), rbx
 24681 00013BE3 48B8-                           mov rax, sob_void
 24681 00013BE5 [0000000000000000] 
 24682                                          LEAVE
    61 00013BED C9                  <1>  leave
 24683 00013BEE C22000                          ret AND_KILL_FRAME(2)
 24684                                  
 24685                                  L_code_ptr_set_cdr:
 24686                                          ENTER
    56 00013BF1 C8000000            <1>  enter 0, 0
    57 00013BF5 4883E4F0            <1>  and rsp, ~15
 24687 00013BF9 48837D1802                      cmp COUNT, 2
 24688 00013BFE 0F8560040000                    jne L_error_arg_count_2
 24689 00013C04 488B4520                        mov rax, PARAM(0)
 24690                                          assert_pair(rax)
    65 00013C08 803821              <1>  cmp byte [%1], %2
    66 00013C0B 0F8523050000        <1>  jne L_error_incorrect_type
 24691 00013C11 488B5D28                        mov rbx, PARAM(1)
 24692 00013C15 48895809                        mov SOB_PAIR_CDR(rax), rbx
 24693 00013C19 48B8-                           mov rax, sob_void
 24693 00013C1B [0000000000000000] 
 24694                                          LEAVE
    61 00013C23 C9                  <1>  leave
 24695 00013C24 C22000                          ret AND_KILL_FRAME(2)
 24696                                  
 24697                                  L_code_ptr_string_ref:
 24698                                          ENTER
    56 00013C27 C8000000            <1>  enter 0, 0
    57 00013C2B 4883E4F0            <1>  and rsp, ~15
 24699 00013C2F 48837D1802                      cmp COUNT, 2
 24700 00013C34 0F852A040000                    jne L_error_arg_count_2
 24701 00013C3A 488B7D20                        mov rdi, PARAM(0)
 24702                                          assert_string(rdi)
    65 00013C3E 803F03              <1>  cmp byte [%1], %2
    66 00013C41 0F85ED040000        <1>  jne L_error_incorrect_type
 24703 00013C47 488B7528                        mov rsi, PARAM(1)
 24704                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00013C4B 803E11              <2>  cmp byte [%1], %2
    66 00013C4E 0F85E0040000        <2>  jne L_error_incorrect_type
    71 00013C54 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00013C59 0F85D5040000        <1>  jne L_error_incorrect_type
 24705 00013C5F 488B5701                        mov rdx, qword [rdi + 1]
 24706 00013C63 488B4E01                        mov rcx, qword [rsi + 1]
 24707 00013C67 4839D1                          cmp rcx, rdx
 24708 00013C6A 0F8D59030000                    jge L_error_integer_range
 24709 00013C70 4883F900                        cmp rcx, 0
 24710 00013C74 0F8C4F030000                    jl L_error_integer_range
 24711 00013C7A 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 24712 00013C7E BF02000000                      mov rdi, 2
 24713 00013C83 E82CECFFFF                      call malloc
 24714 00013C88 C60002                          mov byte [rax], T_char
 24715 00013C8B 885801                          mov byte [rax + 1], bl
 24716                                          LEAVE
    61 00013C8E C9                  <1>  leave
 24717 00013C8F C22000                          ret AND_KILL_FRAME(2)
 24718                                  
 24719                                  L_code_ptr_vector_ref:
 24720                                          ENTER
    56 00013C92 C8000000            <1>  enter 0, 0
    57 00013C96 4883E4F0            <1>  and rsp, ~15
 24721 00013C9A 48837D1802                      cmp COUNT, 2
 24722 00013C9F 0F85BF030000                    jne L_error_arg_count_2
 24723 00013CA5 488B7D20                        mov rdi, PARAM(0)
 24724                                          assert_vector(rdi)
    65 00013CA9 803F22              <1>  cmp byte [%1], %2
    66 00013CAC 0F8582040000        <1>  jne L_error_incorrect_type
 24725 00013CB2 488B7528                        mov rsi, PARAM(1)
 24726                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00013CB6 803E11              <2>  cmp byte [%1], %2
    66 00013CB9 0F8575040000        <2>  jne L_error_incorrect_type
    71 00013CBF 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00013CC4 0F856A040000        <1>  jne L_error_incorrect_type
 24727 00013CCA 488B5701                        mov rdx, qword [rdi + 1]
 24728 00013CCE 488B4E01                        mov rcx, qword [rsi + 1]
 24729 00013CD2 4839D1                          cmp rcx, rdx
 24730 00013CD5 0F8DEE020000                    jge L_error_integer_range
 24731 00013CDB 4883F900                        cmp rcx, 0
 24732 00013CDF 0F8CE4020000                    jl L_error_integer_range
 24733 00013CE5 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 24734                                          LEAVE
    61 00013CEA C9                  <1>  leave
 24735 00013CEB C22000                          ret AND_KILL_FRAME(2)
 24736                                  
 24737                                  L_code_ptr_vector_set:
 24738                                          ENTER
    56 00013CEE C8000000            <1>  enter 0, 0
    57 00013CF2 4883E4F0            <1>  and rsp, ~15
 24739 00013CF6 48837D1803                      cmp COUNT, 3
 24740 00013CFB 0F85CD030000                    jne L_error_arg_count_3
 24741 00013D01 488B7D20                        mov rdi, PARAM(0)
 24742                                          assert_vector(rdi)
    65 00013D05 803F22              <1>  cmp byte [%1], %2
    66 00013D08 0F8526040000        <1>  jne L_error_incorrect_type
 24743 00013D0E 488B7528                        mov rsi, PARAM(1)
 24744                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00013D12 803E11              <2>  cmp byte [%1], %2
    66 00013D15 0F8519040000        <2>  jne L_error_incorrect_type
    71 00013D1B 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00013D20 0F850E040000        <1>  jne L_error_incorrect_type
 24745 00013D26 488B5701                        mov rdx, qword [rdi + 1]
 24746 00013D2A 488B4E01                        mov rcx, qword [rsi + 1]
 24747 00013D2E 4839D1                          cmp rcx, rdx
 24748 00013D31 0F8D92020000                    jge L_error_integer_range
 24749 00013D37 4883F900                        cmp rcx, 0
 24750 00013D3B 0F8C88020000                    jl L_error_integer_range
 24751 00013D41 488B4530                        mov rax, PARAM(2)
 24752 00013D45 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 24753 00013D4A 48B8-                           mov rax, sob_void
 24753 00013D4C [0000000000000000] 
 24754                                          LEAVE
    61 00013D54 C9                  <1>  leave
 24755 00013D55 C22800                          ret AND_KILL_FRAME(3)
 24756                                  
 24757                                  L_code_ptr_string_set:
 24758                                          ENTER
    56 00013D58 C8000000            <1>  enter 0, 0
    57 00013D5C 4883E4F0            <1>  and rsp, ~15
 24759 00013D60 48837D1803                      cmp COUNT, 3
 24760 00013D65 0F8563030000                    jne L_error_arg_count_3
 24761 00013D6B 488B7D20                        mov rdi, PARAM(0)
 24762                                          assert_string(rdi)
    65 00013D6F 803F03              <1>  cmp byte [%1], %2
    66 00013D72 0F85BC030000        <1>  jne L_error_incorrect_type
 24763 00013D78 488B7528                        mov rsi, PARAM(1)
 24764                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00013D7C 803E11              <2>  cmp byte [%1], %2
    66 00013D7F 0F85AF030000        <2>  jne L_error_incorrect_type
    71 00013D85 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00013D8A 0F85A4030000        <1>  jne L_error_incorrect_type
 24765 00013D90 488B5701                        mov rdx, qword [rdi + 1]
 24766 00013D94 488B4E01                        mov rcx, qword [rsi + 1]
 24767 00013D98 4839D1                          cmp rcx, rdx
 24768 00013D9B 0F8D28020000                    jge L_error_integer_range
 24769 00013DA1 4883F900                        cmp rcx, 0
 24770 00013DA5 0F8C1E020000                    jl L_error_integer_range
 24771 00013DAB 488B4530                        mov rax, PARAM(2)
 24772                                          assert_char(rax)
    65 00013DAF 803802              <1>  cmp byte [%1], %2
    66 00013DB2 0F857C030000        <1>  jne L_error_incorrect_type
 24773 00013DB8 8A4001                          mov al, byte [rax + 1]
 24774 00013DBB 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 24775 00013DBF 48B8-                           mov rax, sob_void
 24775 00013DC1 [0000000000000000] 
 24776                                          LEAVE
    61 00013DC9 C9                  <1>  leave
 24777 00013DCA C22800                          ret AND_KILL_FRAME(3)
 24778                                  
 24779                                  L_code_ptr_make_vector:
 24780                                          ENTER
    56 00013DCD C8000000            <1>  enter 0, 0
    57 00013DD1 4883E4F0            <1>  and rsp, ~15
 24781 00013DD5 48837D1802                      cmp COUNT, 2
 24782 00013DDA 0F8584020000                    jne L_error_arg_count_2
 24783 00013DE0 488B4D20                        mov rcx, PARAM(0)
 24784                                          assert_integer(rcx)
    70                              <1>  assert_rational(%1)
    65 00013DE4 803911              <2>  cmp byte [%1], %2
    66 00013DE7 0F8547030000        <2>  jne L_error_incorrect_type
    71 00013DED 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00013DF2 0F853C030000        <1>  jne L_error_incorrect_type
 24785 00013DF8 488B4901                        mov rcx, qword [rcx + 1]
 24786 00013DFC 4883F900                        cmp rcx, 0
 24787 00013E00 0F8CC3010000                    jl L_error_integer_range
 24788 00013E06 488B5528                        mov rdx, PARAM(1)
 24789 00013E0A 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 24790 00013E12 E89DEAFFFF                      call malloc
 24791 00013E17 C60022                          mov byte [rax], T_vector
 24792 00013E1A 48894801                        mov qword [rax + 1], rcx
 24793 00013E1E 41B800000000                    mov r8, 0
 24794                                  .L0:
 24795 00013E24 4939C8                          cmp r8, rcx
 24796 00013E27 740A                            je .L1
 24797 00013E29 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 24798 00013E2E 49FFC0                          inc r8
 24799 00013E31 EBF1                            jmp .L0
 24800                                  .L1:
 24801                                          LEAVE
    61 00013E33 C9                  <1>  leave
 24802 00013E34 C22000                          ret AND_KILL_FRAME(2)
 24803                                          
 24804                                  L_code_ptr_make_string:
 24805                                          ENTER
    56 00013E37 C8000000            <1>  enter 0, 0
    57 00013E3B 4883E4F0            <1>  and rsp, ~15
 24806 00013E3F 48837D1802                      cmp COUNT, 2
 24807 00013E44 0F851A020000                    jne L_error_arg_count_2
 24808 00013E4A 488B4D20                        mov rcx, PARAM(0)
 24809                                          assert_integer(rcx)
    70                              <1>  assert_rational(%1)
    65 00013E4E 803911              <2>  cmp byte [%1], %2
    66 00013E51 0F85DD020000        <2>  jne L_error_incorrect_type
    71 00013E57 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00013E5C 0F85D2020000        <1>  jne L_error_incorrect_type
 24810 00013E62 488B4901                        mov rcx, qword [rcx + 1]
 24811 00013E66 4883F900                        cmp rcx, 0
 24812 00013E6A 0F8C59010000                    jl L_error_integer_range
 24813 00013E70 488B5528                        mov rdx, PARAM(1)
 24814                                          assert_char(rdx)
    65 00013E74 803A02              <1>  cmp byte [%1], %2
    66 00013E77 0F85B7020000        <1>  jne L_error_incorrect_type
 24815 00013E7D 8A5201                          mov dl, byte [rdx + 1]
 24816 00013E80 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 24817 00013E84 E82BEAFFFF                      call malloc
 24818 00013E89 C60003                          mov byte [rax], T_string
 24819 00013E8C 48894801                        mov qword [rax + 1], rcx
 24820 00013E90 41B800000000                    mov r8, 0
 24821                                  .L0:
 24822 00013E96 4939C8                          cmp r8, rcx
 24823 00013E99 740A                            je .L1
 24824 00013E9B 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 24825 00013EA0 49FFC0                          inc r8
 24826 00013EA3 EBF1                            jmp .L0
 24827                                  .L1:
 24828                                          LEAVE
    61 00013EA5 C9                  <1>  leave
 24829 00013EA6 C22000                          ret AND_KILL_FRAME(2)
 24830                                  
 24831                                  L_code_ptr_numerator:
 24832                                          ENTER
    56 00013EA9 C8000000            <1>  enter 0, 0
    57 00013EAD 4883E4F0            <1>  and rsp, ~15
 24833 00013EB1 48837D1801                      cmp COUNT, 1
 24834 00013EB6 0F8573010000                    jne L_error_arg_count_1
 24835 00013EBC 488B4520                        mov rax, PARAM(0)
 24836                                          assert_rational(rax)
    65 00013EC0 803811              <1>  cmp byte [%1], %2
    66 00013EC3 0F856B020000        <1>  jne L_error_incorrect_type
 24837 00013EC9 488B7801                        mov rdi, qword [rax + 1]
 24838 00013ECD E8D1000000                      call make_integer
 24839                                          LEAVE
    61 00013ED2 C9                  <1>  leave
 24840 00013ED3 C21800                          ret AND_KILL_FRAME(1)
 24841                                          
 24842                                  L_code_ptr_denominator:
 24843                                          ENTER
    56 00013ED6 C8000000            <1>  enter 0, 0
    57 00013EDA 4883E4F0            <1>  and rsp, ~15
 24844 00013EDE 48837D1801                      cmp COUNT, 1
 24845 00013EE3 0F8546010000                    jne L_error_arg_count_1
 24846 00013EE9 488B4520                        mov rax, PARAM(0)
 24847                                          assert_rational(rax)
    65 00013EED 803811              <1>  cmp byte [%1], %2
    66 00013EF0 0F853E020000        <1>  jne L_error_incorrect_type
 24848 00013EF6 488B7809                        mov rdi, qword [rax + 1 + 8]
 24849 00013EFA E8A4000000                      call make_integer
 24850                                          LEAVE
    61 00013EFF C9                  <1>  leave
 24851 00013F00 C21800                          ret AND_KILL_FRAME(1)
 24852                                  
 24853                                  L_code_ptr_eq:
 24854                                  	ENTER
    56 00013F03 C8000000            <1>  enter 0, 0
    57 00013F07 4883E4F0            <1>  and rsp, ~15
 24855 00013F0B 48837D1802              	cmp COUNT, 2
 24856 00013F10 0F854E010000            	jne L_error_arg_count_2
 24857 00013F16 488B7D20                	mov rdi, PARAM(0)
 24858 00013F1A 488B7528                	mov rsi, PARAM(1)
 24859 00013F1E 4839F7                  	cmp rdi, rsi
 24860 00013F21 744A                    	je .L_eq_true
 24861 00013F23 8A17                    	mov dl, byte [rdi]
 24862 00013F25 3A16                    	cmp dl, byte [rsi]
 24863 00013F27 7550                    	jne .L_eq_false
 24864 00013F29 80FA02                  	cmp dl, T_char
 24865 00013F2C 7437                    	je .L_char
 24866 00013F2E 80FA04                  	cmp dl, T_symbol
 24867 00013F31 742A                    	je .L_symbol
 24868 00013F33 80FA12                  	cmp dl, T_real
 24869 00013F36 741D                    	je .L_real
 24870 00013F38 80FA11                  	cmp dl, T_rational
 24871 00013F3B 7402                    	je .L_rational
 24872 00013F3D EB3A                    	jmp .L_eq_false
 24873                                  .L_rational:
 24874 00013F3F 488B4601                	mov rax, qword [rsi + 1]
 24875 00013F43 483B4701                	cmp rax, qword [rdi + 1]
 24876 00013F47 7530                    	jne .L_eq_false
 24877 00013F49 488B4609                	mov rax, qword [rsi + 1 + 8]
 24878 00013F4D 483B4709                	cmp rax, qword [rdi + 1 + 8]
 24879 00013F51 7526                    	jne .L_eq_false
 24880 00013F53 EB18                    	jmp .L_eq_true
 24881                                  .L_real:
 24882 00013F55 488B4601                	mov rax, qword [rsi + 1]
 24883 00013F59 483B4701                	cmp rax, qword [rdi + 1]
 24884                                  .L_symbol:
 24885                                  	; never reached, because symbols are static!
 24886                                  	; but I'm keeping it in case, I'll ever change
 24887                                  	; the implementation
 24888 00013F5D 488B4601                	mov rax, qword [rsi + 1]
 24889 00013F61 483B4701                	cmp rax, qword [rdi + 1]
 24890                                  .L_char:
 24891 00013F65 8A5E01                  	mov bl, byte [rsi + 1]
 24892 00013F68 3A5F01                  	cmp bl, byte [rdi + 1]
 24893 00013F6B 750C                    	jne .L_eq_false
 24894                                  .L_eq_true:
 24895 00013F6D 48B8-                   	mov rax, sob_boolean_true
 24895 00013F6F [0300000000000000] 
 24896 00013F77 EB0A                    	jmp .L_eq_exit
 24897                                  .L_eq_false:
 24898 00013F79 48B8-                   	mov rax, sob_boolean_false
 24898 00013F7B [0200000000000000] 
 24899                                  .L_eq_exit:
 24900                                  	LEAVE
    61 00013F83 C9                  <1>  leave
 24901 00013F84 C22000                  	ret AND_KILL_FRAME(2)
 24902                                  
 24903                                  make_real:
 24904                                          ENTER
    56 00013F87 C8000000            <1>  enter 0, 0
    57 00013F8B 4883E4F0            <1>  and rsp, ~15
 24905 00013F8F BF09000000                      mov rdi, (1 + 8)
 24906 00013F94 E81BE9FFFF                      call malloc
 24907 00013F99 C60012                          mov byte [rax], T_real
 24908 00013F9C F20F114001                      movsd qword [rax + 1], xmm0
 24909                                          LEAVE
    61 00013FA1 C9                  <1>  leave
 24910 00013FA2 C3                              ret
 24911                                          
 24912                                  make_integer:
 24913                                          ENTER
    56 00013FA3 C8000000            <1>  enter 0, 0
    57 00013FA7 4883E4F0            <1>  and rsp, ~15
 24914 00013FAB 4889FE                          mov rsi, rdi
 24915 00013FAE BF11000000                      mov rdi, (1 + 8 + 8)
 24916 00013FB3 E8FCE8FFFF                      call malloc
 24917 00013FB8 C60011                          mov byte [rax], T_rational
 24918 00013FBB 48897001                        mov qword [rax + 1], rsi
 24919 00013FBF 48C7400901000000                mov qword [rax + 1 + 8], 1
 24920                                          LEAVE
    61 00013FC7 C9                  <1>  leave
 24921 00013FC8 C3                              ret
 24922                                          
 24923                                  L_error_integer_range:
 24924 00013FC9 488B3C25[00000000]              mov rdi, qword [stderr]
 24925 00013FD1 48BE-                           mov rsi, fmt_integer_range
 24925 00013FD3 [8205000000000000] 
 24926 00013FDB B800000000                      mov rax, 0
 24927                                  	ENTER
    56 00013FE0 C8000000            <1>  enter 0, 0
    57 00013FE4 4883E4F0            <1>  and rsp, ~15
 24928 00013FE8 E8(00000000)                    call fprintf
 24929                                  	LEAVE
    61 00013FED C9                  <1>  leave
 24930 00013FEE 48C7C0FBFFFFFF                  mov rax, -5
 24931 00013FF5 E8(00000000)                    call exit
 24932                                  
 24933                                  L_error_arg_count_0:
 24934 00013FFA 488B3C25[00000000]              mov rdi, qword [stderr]
 24935 00014002 48BE-                           mov rsi, fmt_arg_count_0
 24935 00014004 [4804000000000000] 
 24936 0001400C 488B5518                        mov rdx, COUNT
 24937 00014010 B800000000                      mov rax, 0
 24938                                  	ENTER
    56 00014015 C8000000            <1>  enter 0, 0
    57 00014019 4883E4F0            <1>  and rsp, ~15
 24939 0001401D E8(00000000)                    call fprintf
 24940                                  	LEAVE
    61 00014022 C9                  <1>  leave
 24941 00014023 48C7C0FDFFFFFF                  mov rax, -3
 24942 0001402A E8(00000000)                    call exit
 24943                                  
 24944                                  L_error_arg_count_1:
 24945 0001402F 488B3C25[00000000]              mov rdi, qword [stderr]
 24946 00014037 48BE-                           mov rsi, fmt_arg_count_1
 24946 00014039 [7004000000000000] 
 24947 00014041 488B5518                        mov rdx, COUNT
 24948 00014045 B800000000                      mov rax, 0
 24949                                  	ENTER
    56 0001404A C8000000            <1>  enter 0, 0
    57 0001404E 4883E4F0            <1>  and rsp, ~15
 24950 00014052 E8(00000000)                    call fprintf
 24951                                  	LEAVE
    61 00014057 C9                  <1>  leave
 24952 00014058 48C7C0FDFFFFFF                  mov rax, -3
 24953 0001405F E8(00000000)                    call exit
 24954                                  
 24955                                  L_error_arg_count_2:
 24956 00014064 488B3C25[00000000]              mov rdi, qword [stderr]
 24957 0001406C 48BE-                           mov rsi, fmt_arg_count_2
 24957 0001406E [D604000000000000] 
 24958 00014076 488B5518                        mov rdx, COUNT
 24959 0001407A B800000000                      mov rax, 0
 24960                                  	ENTER
    56 0001407F C8000000            <1>  enter 0, 0
    57 00014083 4883E4F0            <1>  and rsp, ~15
 24961 00014087 E8(00000000)                    call fprintf
 24962                                  	LEAVE
    61 0001408C C9                  <1>  leave
 24963 0001408D 48C7C0FDFFFFFF                  mov rax, -3
 24964 00014094 E8(00000000)                    call exit
 24965                                  
 24966                                  L_error_arg_count_12:
 24967 00014099 488B3C25[00000000]              mov rdi, qword [stderr]
 24968 000140A1 48BE-                           mov rsi, fmt_arg_count_12
 24968 000140A3 [9604000000000000] 
 24969 000140AB 488B5518                        mov rdx, COUNT
 24970 000140AF B800000000                      mov rax, 0
 24971                                  	ENTER
    56 000140B4 C8000000            <1>  enter 0, 0
    57 000140B8 4883E4F0            <1>  and rsp, ~15
 24972 000140BC E8(00000000)                    call fprintf
 24973                                  	LEAVE
    61 000140C1 C9                  <1>  leave
 24974 000140C2 48C7C0FDFFFFFF                  mov rax, -3
 24975 000140C9 E8(00000000)                    call exit
 24976                                  
 24977                                  L_error_arg_count_3:
 24978 000140CE 488B3C25[00000000]              mov rdi, qword [stderr]
 24979 000140D6 48BE-                           mov rsi, fmt_arg_count_3
 24979 000140D8 [FD04000000000000] 
 24980 000140E0 488B5518                        mov rdx, COUNT
 24981 000140E4 B800000000                      mov rax, 0
 24982                                  	ENTER
    56 000140E9 C8000000            <1>  enter 0, 0
    57 000140ED 4883E4F0            <1>  and rsp, ~15
 24983 000140F1 E8(00000000)                    call fprintf
 24984                                  	LEAVE
    61 000140F6 C9                  <1>  leave
 24985 000140F7 48C7C0FDFFFFFF                  mov rax, -3
 24986 000140FE E8(00000000)                    call exit
 24987                                  
 24988                                  L_error_arg_apply_no_list:
 24989 00014103 488B3C25[00000000]              mov rdi, qword [stderr]
 24990 0001410B 48BE-                           mov rsi, fmt_arg_apply_no_list
 24990 0001410D [2605000000000000] 
 24991 00014115 B800000000                      mov rax, 0
 24992                                  	ENTER
    56 0001411A C8000000            <1>  enter 0, 0
    57 0001411E 4883E4F0            <1>  and rsp, ~15
 24993 00014122 E8(00000000)                    call fprintf
 24994                                  	LEAVE
    61 00014127 C9                  <1>  leave
 24995 00014128 48C7C0FCFFFFFF                  mov rax, -4
 24996 0001412F E8(00000000)                    call exit  
 24997                                  
 24998                                  L_error_incorrect_type:
 24999 00014134 488B3C25[00000000]              mov rdi, qword [stderr]
 25000 0001413C 48BE-                           mov rsi, fmt_type
 25000 0001413E [5E05000000000000] 
 25001 00014146 B800000000                      mov rax, 0
 25002                                  	ENTER
    56 0001414B C8000000            <1>  enter 0, 0
    57 0001414F 4883E4F0            <1>  and rsp, ~15
 25003 00014153 E8(00000000)                    call fprintf
 25004                                  	LEAVE
    61 00014158 C9                  <1>  leave
 25005 00014159 48C7C0FCFFFFFF                  mov rax, -4
 25006 00014160 E8(00000000)                    call exit
 25007                                  
 25008                                  L_error_division_by_zero:
 25009 00014165 488B3C25[00000000]              mov rdi, qword [stderr]
 25010 0001416D 48BE-                           mov rsi, fmt_division_by_zero
 25010 0001416F [9F05000000000000] 
 25011 00014177 B800000000                      mov rax, 0
 25012                                  	ENTER
    56 0001417C C8000000            <1>  enter 0, 0
    57 00014180 4883E4F0            <1>  and rsp, ~15
 25013 00014184 E8(00000000)                    call fprintf
 25014                                  	LEAVE
    61 00014189 C9                  <1>  leave
 25015 0001418A 48C7C0F8FFFFFF                  mov rax, -8
 25016 00014191 E8(00000000)                    call exit
 25017                                  
 25018                                  section .data
 25019                                  fmt_char:
 25020 00000445 256300                          db `%c\0`
 25021                                  fmt_arg_count_0:
 25022 00000448 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 25022 00000451 74696E67207A65726F-
 25022 0000045A 20617267756D656E74-
 25022 00000463 732E20466F756E6420-
 25022 0000046C 25640A00           
 25023                                  fmt_arg_count_1:
 25024 00000470 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 25024 00000479 74696E67206F6E6520-
 25024 00000482 617267756D656E742E-
 25024 0000048B 20466F756E64202564-
 25024 00000494 0A00               
 25025                                  fmt_arg_count_12:
 25026 00000496 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 25026 0000049F 74696E67206F6E6520-
 25026 000004A8 726571756972656420-
 25026 000004B1 616E64206F6E65206F-
 25026 000004BA 7074696F6E616C2061-
 25026 000004C3 7267756D656E742E20-
 25026 000004CC 466F756E642025640A-
 25026 000004D5 00                 
 25027                                  fmt_arg_count_2:
 25028 000004D6 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 25028 000004DF 74696E672074776F20-
 25028 000004E8 617267756D656E7473-
 25028 000004F1 2E20466F756E642025-
 25028 000004FA 640A00             
 25029                                  fmt_arg_count_3:
 25030 000004FD 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 25030 00000506 74696E672074687265-
 25030 0000050F 6520617267756D656E-
 25030 00000518 74732E20466F756E64-
 25030 00000521 2025640A00         
 25031                                  fmt_arg_apply_no_list:
 25032 00000526 21212120546865206C-             db `!!! The last argument in apply should be a proper list\n\0`
 25032 0000052F 61737420617267756D-
 25032 00000538 656E7420696E206170-
 25032 00000541 706C792073686F756C-
 25032 0000054A 642062652061207072-
 25032 00000553 6F706572206C697374-
 25032 0000055C 0A00               
 25033                                  fmt_type:
 25034 0000055E 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 25034 00000567 696F6E207061737365-
 25034 00000570 6420696E636F727265-
 25034 00000579 637420747970650A00 
 25035                                  fmt_integer_range:
 25036 00000582 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 25036 0000058B 7265637420696E7465-
 25036 00000594 6765722072616E6765-
 25036 0000059D 0A00               
 25037                                  fmt_division_by_zero:
 25038 0000059F 212121204469766973-             db `!!! Division by zero\n\0`
 25038 000005A8 696F6E206279207A65-
 25038 000005B1 726F0A00           
 25039                                  fmt_scheme_error_part_1:
 25040 000005B5 0A2121212054686520-             db `\n!!! The procedure \0`
 25040 000005BE 70726F636564757265-
 25040 000005C7 2000               
 25041                                  fmt_scheme_error_part_2:
 25042 000005C9 2061736B656420746F-             db ` asked to terminate the program\n`
 25042 000005D2 207465726D696E6174-
 25042 000005DB 65207468652070726F-
 25042 000005E4 6772616D0A         
 25043 000005E9 202020207769746820-             db `    with the following message:\n\n\0`
 25043 000005F2 74686520666F6C6C6F-
 25043 000005FB 77696E67206D657373-
 25043 00000604 6167653A0A0A00     
 25044                                  fmt_scheme_error_part_3:
 25045 0000060B 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 25045 00000614 210A0A00           
