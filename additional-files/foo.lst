     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %macro PRINT_TEST 2
    18                                          push rax
    19                                          push rbx
    20                                          push rcx
    21                                          push rdx
    22                                          push rdi
    23                                          push rsi
    24                                          mov rdi, qword [stderr]
    25                                          mov rsi, fmt_test
    26                                          mov rdx, %1
    27                                          mov rcx, %2
    28                                          mov rax, 0
    29                                          ENTER
    30                                          call fprintf
    31                                          LEAVE
    32                                          pop rsi
    33                                          pop rdi
    34                                          pop rdx
    35                                          pop rcx
    36                                          pop rbx
    37                                          pop rax
    38                                  %endmacro
    39                                  
    40                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    41                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    42                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    43                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    44                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    45                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    46                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    47                                  
    48                                  %define OLD_RDP 			qword [rbp]
    49                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    50                                  %define ENV 				qword [rbp + 8 * 2]
    51                                  %define COUNT 				qword [rbp + 8 * 3]
    52                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    53                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    54                                  
    55                                  %macro ENTER 0
    56                                  	enter 0, 0
    57                                  	and rsp, ~15
    58                                  %endmacro
    59                                  
    60                                  %macro LEAVE 0
    61                                  	leave
    62                                  %endmacro
    63                                  
    64                                  %macro assert_type 2
    65                                          cmp byte [%1], %2
    66                                          jne L_error_incorrect_type
    67                                  %endmacro
    68                                  
    69                                  %macro assert_type_integer 1
    70                                          assert_rational(%1)
    71                                          cmp qword [%1 + 1 + 8], 1
    72                                          jne L_error_incorrect_type
    73                                  %endmacro
    74                                  
    75                                  %define assert_void(reg)		assert_type reg, T_void
    76                                  %define assert_nil(reg)			assert_type reg, T_nil
    77                                  %define assert_char(reg)		assert_type reg, T_char
    78                                  %define assert_string(reg)		assert_type reg, T_string
    79                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    80                                  %define assert_closure(reg)		assert_type reg, T_closure
    81                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    82                                  %define assert_rational(reg)		assert_type reg, T_rational
    83                                  %define assert_integer(reg)		assert_type_integer reg
    84                                  %define assert_real(reg)		assert_type reg, T_real
    85                                  %define assert_pair(reg)		assert_type reg, T_pair
    86                                  %define assert_vector(reg)		assert_type reg, T_vector
    87                                  
    88                                  %define sob_void			(L_constants + 0)
    89                                  %define sob_nil				(L_constants + 1)
    90                                  %define sob_boolean_false		(L_constants + 2)
    91                                  %define sob_boolean_true		(L_constants + 3)
    92                                  %define sob_char_nul			(L_constants + 4)
    93                                  
    94                                  %define bytes(n)			(n)
    95                                  %define kbytes(n) 			(bytes(n) << 10)
    96                                  %define mbytes(n) 			(kbytes(n) << 10)
    97                                  %define gbytes(n) 			(mbytes(n) << 10)
    98                                  
    99                                  section .data
   100                                  L_constants:
   101 00000000 00                      	db T_void
   102 00000001 01                      	db T_nil
   103 00000002 09                      	db T_boolean_false
   104 00000003 0A                      	db T_boolean_true
   105 00000004 0200                    	db T_char, 0x00	; #\x0
   106 00000006 03                      	db T_string	; "whatever"
   107 00000007 0800000000000000        	dq 8
   108 0000000F 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   109 00000017 04                      	db T_symbol	; whatever
   110 00000018 [0600000000000000]      	dq L_constants + 6
   111 00000020 11                      	db T_rational	; 0
   112 00000021 000000000000000001-     	dq 0, 1
   112 0000002A 00000000000000     
   113 00000031 03                      	db T_string	; "+"
   114 00000032 0100000000000000        	dq 1
   115 0000003A 2B                      	db 0x2B
   116 0000003B 04                      	db T_symbol	; +
   117 0000003C [3100000000000000]      	dq L_constants + 49
   118 00000044 03                      	db T_string	; "all arguments need ...
   119 00000045 2000000000000000        	dq 32
   120 0000004D 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   121 00000055 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   122 0000005D 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   123 00000065 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   124 0000006D 03                      	db T_string	; "-"
   125 0000006E 0100000000000000        	dq 1
   126 00000076 2D                      	db 0x2D
   127 00000077 04                      	db T_symbol	; -
   128 00000078 [6D00000000000000]      	dq L_constants + 109
   129 00000080 11                      	db T_rational	; 8
   130 00000081 080000000000000001-     	dq 8, 1
   130 0000008A 00000000000000     
   131 00000091 11                      	db T_rational	; 5
   132 00000092 050000000000000001-     	dq 5, 1
   132 0000009B 00000000000000     
   133 000000A2 11                      	db T_rational	; 7
   134 000000A3 070000000000000001-     	dq 7, 1
   134 000000AC 00000000000000     
   135 000000B3 11                      	db T_rational	; 4
   136 000000B4 040000000000000001-     	dq 4, 1
   136 000000BD 00000000000000     
   137 000000C4 21                      	db T_pair	; (4)
   138 000000C5 [B300000000000000]-     	dq L_constants + 179, L_constants + 1
   138 000000CD [0100000000000000] 
   139 000000D5 21                      	db T_pair	; (7 4)
   140 000000D6 [A200000000000000]-     	dq L_constants + 162, L_constants + 196
   140 000000DE [C400000000000000] 
   141 000000E6 21                      	db T_pair	; (5 7 4)
   142 000000E7 [9100000000000000]-     	dq L_constants + 145, L_constants + 213
   142 000000EF [D500000000000000] 
   143                                  
   144                                  section .bss
   145                                  free_var_0:	; location of null?
   146 00000000 ????????????????        	resq 1
   147                                  free_var_1:	; location of pair?
   148 00000008 ????????????????        	resq 1
   149                                  free_var_2:	; location of void?
   150 00000010 ????????????????        	resq 1
   151                                  free_var_3:	; location of char?
   152 00000018 ????????????????        	resq 1
   153                                  free_var_4:	; location of string?
   154 00000020 ????????????????        	resq 1
   155                                  free_var_5:	; location of symbol?
   156 00000028 ????????????????        	resq 1
   157                                  free_var_6:	; location of vector?
   158 00000030 ????????????????        	resq 1
   159                                  free_var_7:	; location of procedure?
   160 00000038 ????????????????        	resq 1
   161                                  free_var_8:	; location of real?
   162 00000040 ????????????????        	resq 1
   163                                  free_var_9:	; location of rational?
   164 00000048 ????????????????        	resq 1
   165                                  free_var_10:	; location of boolean?
   166 00000050 ????????????????        	resq 1
   167                                  free_var_11:	; location of number?
   168 00000058 ????????????????        	resq 1
   169                                  free_var_12:	; location of collection?
   170 00000060 ????????????????        	resq 1
   171                                  free_var_13:	; location of cons
   172 00000068 ????????????????        	resq 1
   173                                  free_var_14:	; location of display-sexpr
   174 00000070 ????????????????        	resq 1
   175                                  free_var_15:	; location of write-char
   176 00000078 ????????????????        	resq 1
   177                                  free_var_16:	; location of car
   178 00000080 ????????????????        	resq 1
   179                                  free_var_17:	; location of cdr
   180 00000088 ????????????????        	resq 1
   181                                  free_var_18:	; location of string-length
   182 00000090 ????????????????        	resq 1
   183                                  free_var_19:	; location of vector-length
   184 00000098 ????????????????        	resq 1
   185                                  free_var_20:	; location of real->integer
   186 000000A0 ????????????????        	resq 1
   187                                  free_var_21:	; location of exit
   188 000000A8 ????????????????        	resq 1
   189                                  free_var_22:	; location of integer->real
   190 000000B0 ????????????????        	resq 1
   191                                  free_var_23:	; location of rational->real
   192 000000B8 ????????????????        	resq 1
   193                                  free_var_24:	; location of char->integer
   194 000000C0 ????????????????        	resq 1
   195                                  free_var_25:	; location of integer->char
   196 000000C8 ????????????????        	resq 1
   197                                  free_var_26:	; location of trng
   198 000000D0 ????????????????        	resq 1
   199                                  free_var_27:	; location of zero?
   200 000000D8 ????????????????        	resq 1
   201                                  free_var_28:	; location of integer?
   202 000000E0 ????????????????        	resq 1
   203                                  free_var_29:	; location of __bin-apply
   204 000000E8 ????????????????        	resq 1
   205                                  free_var_30:	; location of __bin-add-rr
   206 000000F0 ????????????????        	resq 1
   207                                  free_var_31:	; location of __bin-sub-rr
   208 000000F8 ????????????????        	resq 1
   209                                  free_var_32:	; location of __bin-mul-rr
   210 00000100 ????????????????        	resq 1
   211                                  free_var_33:	; location of __bin-div-rr
   212 00000108 ????????????????        	resq 1
   213                                  free_var_34:	; location of __bin-add-qq
   214 00000110 ????????????????        	resq 1
   215                                  free_var_35:	; location of __bin-sub-qq
   216 00000118 ????????????????        	resq 1
   217                                  free_var_36:	; location of __bin-mul-qq
   218 00000120 ????????????????        	resq 1
   219                                  free_var_37:	; location of __bin-div-qq
   220 00000128 ????????????????        	resq 1
   221                                  free_var_38:	; location of error
   222 00000130 ????????????????        	resq 1
   223                                  free_var_39:	; location of __bin-less-than-rr
   224 00000138 ????????????????        	resq 1
   225                                  free_var_40:	; location of __bin-less-than-qq
   226 00000140 ????????????????        	resq 1
   227                                  free_var_41:	; location of __bin-equal-rr
   228 00000148 ????????????????        	resq 1
   229                                  free_var_42:	; location of __bin-equal-qq
   230 00000150 ????????????????        	resq 1
   231                                  free_var_43:	; location of quotient
   232 00000158 ????????????????        	resq 1
   233                                  free_var_44:	; location of remainder
   234 00000160 ????????????????        	resq 1
   235                                  free_var_45:	; location of set-car!
   236 00000168 ????????????????        	resq 1
   237                                  free_var_46:	; location of set-cdr!
   238 00000170 ????????????????        	resq 1
   239                                  free_var_47:	; location of string-ref
   240 00000178 ????????????????        	resq 1
   241                                  free_var_48:	; location of vector-ref
   242 00000180 ????????????????        	resq 1
   243                                  free_var_49:	; location of vector-set!
   244 00000188 ????????????????        	resq 1
   245                                  free_var_50:	; location of string-set!
   246 00000190 ????????????????        	resq 1
   247                                  free_var_51:	; location of make-vector
   248 00000198 ????????????????        	resq 1
   249                                  free_var_52:	; location of make-string
   250 000001A0 ????????????????        	resq 1
   251                                  free_var_53:	; location of numerator
   252 000001A8 ????????????????        	resq 1
   253                                  free_var_54:	; location of denominator
   254 000001B0 ????????????????        	resq 1
   255                                  free_var_55:	; location of eq?
   256 000001B8 ????????????????        	resq 1
   257                                  free_var_56:	; location of apply
   258 000001C0 ????????????????        	resq 1
   259                                  free_var_57:	; location of ormap
   260 000001C8 ????????????????        	resq 1
   261                                  free_var_58:	; location of map
   262 000001D0 ????????????????        	resq 1
   263                                  free_var_59:	; location of andmap
   264 000001D8 ????????????????        	resq 1
   265                                  free_var_60:	; location of reverse
   266 000001E0 ????????????????        	resq 1
   267                                  free_var_61:	; location of append
   268 000001E8 ????????????????        	resq 1
   269                                  free_var_62:	; location of fold-left
   270 000001F0 ????????????????        	resq 1
   271                                  free_var_63:	; location of fold-right
   272 000001F8 ????????????????        	resq 1
   273                                  free_var_64:	; location of +
   274 00000200 ????????????????        	resq 1
   275                                  free_var_65:	; location of -
   276 00000208 ????????????????        	resq 1
   277                                  free_var_66:	; location of list
   278 00000210 ????????????????        	resq 1
   279                                  
   280                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   281                                  global main
   282                                  section .text
   283                                  main:
   284 00000000 C8000000                        enter 0, 0
   285                                          
   286                                  	; building closure for null?
   287 00000004 48BF-                   	mov rdi, free_var_0
   287 00000006 [0000000000000000] 
   288 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   288 00000010 [8E4F000000000000] 
   289 00000018 E83F4E0000              	call bind_primitive
   290                                  
   291                                  	; building closure for pair?
   292 0000001D 48BF-                   	mov rdi, free_var_1
   292 0000001F [0800000000000000] 
   293 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   293 00000029 [C44F000000000000] 
   294 00000031 E8264E0000              	call bind_primitive
   295                                  
   296                                  	; building closure for void?
   297 00000036 48BF-                   	mov rdi, free_var_2
   297 00000038 [1000000000000000] 
   298 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   298 00000042 [FA4F000000000000] 
   299 0000004A E80D4E0000              	call bind_primitive
   300                                  
   301                                  	; building closure for char?
   302 0000004F 48BF-                   	mov rdi, free_var_3
   302 00000051 [1800000000000000] 
   303 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   303 0000005B [3050000000000000] 
   304 00000063 E8F44D0000              	call bind_primitive
   305                                  
   306                                  	; building closure for string?
   307 00000068 48BF-                   	mov rdi, free_var_4
   307 0000006A [2000000000000000] 
   308 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   308 00000074 [6650000000000000] 
   309 0000007C E8DB4D0000              	call bind_primitive
   310                                  
   311                                  	; building closure for symbol?
   312 00000081 48BF-                   	mov rdi, free_var_5
   312 00000083 [2800000000000000] 
   313 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   313 0000008D [9C50000000000000] 
   314 00000095 E8C24D0000              	call bind_primitive
   315                                  
   316                                  	; building closure for vector?
   317 0000009A 48BF-                   	mov rdi, free_var_6
   317 0000009C [3000000000000000] 
   318 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   318 000000A6 [D250000000000000] 
   319 000000AE E8A94D0000              	call bind_primitive
   320                                  
   321                                  	; building closure for procedure?
   322 000000B3 48BF-                   	mov rdi, free_var_7
   322 000000B5 [3800000000000000] 
   323 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   323 000000BF [0851000000000000] 
   324 000000C7 E8904D0000              	call bind_primitive
   325                                  
   326                                  	; building closure for real?
   327 000000CC 48BF-                   	mov rdi, free_var_8
   327 000000CE [4000000000000000] 
   328 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   328 000000D8 [3E51000000000000] 
   329 000000E0 E8774D0000              	call bind_primitive
   330                                  
   331                                  	; building closure for rational?
   332 000000E5 48BF-                   	mov rdi, free_var_9
   332 000000E7 [4800000000000000] 
   333 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   333 000000F1 [7451000000000000] 
   334 000000F9 E85E4D0000              	call bind_primitive
   335                                  
   336                                  	; building closure for boolean?
   337 000000FE 48BF-                   	mov rdi, free_var_10
   337 00000100 [5000000000000000] 
   338 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   338 0000010A [AA51000000000000] 
   339 00000112 E8454D0000              	call bind_primitive
   340                                  
   341                                  	; building closure for number?
   342 00000117 48BF-                   	mov rdi, free_var_11
   342 00000119 [5800000000000000] 
   343 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   343 00000123 [E251000000000000] 
   344 0000012B E82C4D0000              	call bind_primitive
   345                                  
   346                                  	; building closure for collection?
   347 00000130 48BF-                   	mov rdi, free_var_12
   347 00000132 [6000000000000000] 
   348 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   348 0000013C [1A52000000000000] 
   349 00000144 E8134D0000              	call bind_primitive
   350                                  
   351                                  	; building closure for cons
   352 00000149 48BF-                   	mov rdi, free_var_13
   352 0000014B [6800000000000000] 
   353 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   353 00000155 [5252000000000000] 
   354 0000015D E8FA4C0000              	call bind_primitive
   355                                  
   356                                  	; building closure for display-sexpr
   357 00000162 48BF-                   	mov rdi, free_var_14
   357 00000164 [7000000000000000] 
   358 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   358 0000016E [8652000000000000] 
   359 00000176 E8E14C0000              	call bind_primitive
   360                                  
   361                                  	; building closure for write-char
   362 0000017B 48BF-                   	mov rdi, free_var_15
   362 0000017D [7800000000000000] 
   363 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   363 00000187 [B052000000000000] 
   364 0000018F E8C84C0000              	call bind_primitive
   365                                  
   366                                  	; building closure for car
   367 00000194 48BF-                   	mov rdi, free_var_16
   367 00000196 [8000000000000000] 
   368 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   368 000001A0 [0753000000000000] 
   369 000001A8 E8AF4C0000              	call bind_primitive
   370                                  
   371                                  	; building closure for cdr
   372 000001AD 48BF-                   	mov rdi, free_var_17
   372 000001AF [8800000000000000] 
   373 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   373 000001B9 [2F53000000000000] 
   374 000001C1 E8964C0000              	call bind_primitive
   375                                  
   376                                  	; building closure for string-length
   377 000001C6 48BF-                   	mov rdi, free_var_18
   377 000001C8 [9000000000000000] 
   378 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   378 000001D2 [5753000000000000] 
   379 000001DA E87D4C0000              	call bind_primitive
   380                                  
   381                                  	; building closure for vector-length
   382 000001DF 48BF-                   	mov rdi, free_var_19
   382 000001E1 [9800000000000000] 
   383 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   383 000001EB [8453000000000000] 
   384 000001F3 E8644C0000              	call bind_primitive
   385                                  
   386                                  	; building closure for real->integer
   387 000001F8 48BF-                   	mov rdi, free_var_20
   387 000001FA [A000000000000000] 
   388 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   388 00000204 [B153000000000000] 
   389 0000020C E84B4C0000              	call bind_primitive
   390                                  
   391                                  	; building closure for exit
   392 00000211 48BF-                   	mov rdi, free_var_21
   392 00000213 [A800000000000000] 
   393 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   393 0000021D [E453000000000000] 
   394 00000225 E8324C0000              	call bind_primitive
   395                                  
   396                                  	; building closure for integer->real
   397 0000022A 48BF-                   	mov rdi, free_var_22
   397 0000022C [B000000000000000] 
   398 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   398 00000236 [0154000000000000] 
   399 0000023E E8194C0000              	call bind_primitive
   400                                  
   401                                  	; building closure for rational->real
   402 00000243 48BF-                   	mov rdi, free_var_23
   402 00000245 [B800000000000000] 
   403 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   403 0000024F [3E54000000000000] 
   404 00000257 E8004C0000              	call bind_primitive
   405                                  
   406                                  	; building closure for char->integer
   407 0000025C 48BF-                   	mov rdi, free_var_24
   407 0000025E [C000000000000000] 
   408 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   408 00000268 [7D54000000000000] 
   409 00000270 E8E74B0000              	call bind_primitive
   410                                  
   411                                  	; building closure for integer->char
   412 00000275 48BF-                   	mov rdi, free_var_25
   412 00000277 [C800000000000000] 
   413 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   413 00000281 [B254000000000000] 
   414 00000289 E8CE4B0000              	call bind_primitive
   415                                  
   416                                  	; building closure for trng
   417 0000028E 48BF-                   	mov rdi, free_var_26
   417 00000290 [D000000000000000] 
   418 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   418 0000029A [0C55000000000000] 
   419 000002A2 E8B54B0000              	call bind_primitive
   420                                  
   421                                  	; building closure for zero?
   422 000002A7 48BF-                   	mov rdi, free_var_27
   422 000002A9 [D800000000000000] 
   423 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   423 000002B3 [2F55000000000000] 
   424 000002BB E89C4B0000              	call bind_primitive
   425                                  
   426                                  	; building closure for integer?
   427 000002C0 48BF-                   	mov rdi, free_var_28
   427 000002C2 [E000000000000000] 
   428 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   428 000002CC [8A55000000000000] 
   429 000002D4 E8834B0000              	call bind_primitive
   430                                  
   431                                  	; building closure for __bin-apply
   432 000002D9 48BF-                   	mov rdi, free_var_29
   432 000002DB [E800000000000000] 
   433 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   433 000002E5 [844E000000000000] 
   434 000002ED E86A4B0000              	call bind_primitive
   435                                  
   436                                  	; building closure for __bin-add-rr
   437 000002F2 48BF-                   	mov rdi, free_var_30
   437 000002F4 [F000000000000000] 
   438 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   438 000002FE [C755000000000000] 
   439 00000306 E8514B0000              	call bind_primitive
   440                                  
   441                                  	; building closure for __bin-sub-rr
   442 0000030B 48BF-                   	mov rdi, free_var_31
   442 0000030D [F800000000000000] 
   443 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   443 00000317 [0B56000000000000] 
   444 0000031F E8384B0000              	call bind_primitive
   445                                  
   446                                  	; building closure for __bin-mul-rr
   447 00000324 48BF-                   	mov rdi, free_var_32
   447 00000326 [0001000000000000] 
   448 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   448 00000330 [4F56000000000000] 
   449 00000338 E81F4B0000              	call bind_primitive
   450                                  
   451                                  	; building closure for __bin-div-rr
   452 0000033D 48BF-                   	mov rdi, free_var_33
   452 0000033F [0801000000000000] 
   453 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   453 00000349 [9356000000000000] 
   454 00000351 E8064B0000              	call bind_primitive
   455                                  
   456                                  	; building closure for __bin-add-qq
   457 00000356 48BF-                   	mov rdi, free_var_34
   457 00000358 [1001000000000000] 
   458 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   458 00000362 [E556000000000000] 
   459 0000036A E8ED4A0000              	call bind_primitive
   460                                  
   461                                  	; building closure for __bin-sub-qq
   462 0000036F 48BF-                   	mov rdi, free_var_35
   462 00000371 [1801000000000000] 
   463 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   463 0000037B [4D57000000000000] 
   464 00000383 E8D44A0000              	call bind_primitive
   465                                  
   466                                  	; building closure for __bin-mul-qq
   467 00000388 48BF-                   	mov rdi, free_var_36
   467 0000038A [2001000000000000] 
   468 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   468 00000394 [B557000000000000] 
   469 0000039C E8BB4A0000              	call bind_primitive
   470                                  
   471                                  	; building closure for __bin-div-qq
   472 000003A1 48BF-                   	mov rdi, free_var_37
   472 000003A3 [2801000000000000] 
   473 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   473 000003AD [0D58000000000000] 
   474 000003B5 E8A24A0000              	call bind_primitive
   475                                  
   476                                  	; building closure for error
   477 000003BA 48BF-                   	mov rdi, free_var_38
   477 000003BC [3001000000000000] 
   478 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   478 000003C6 [DB58000000000000] 
   479 000003CE E8894A0000              	call bind_primitive
   480                                  
   481                                  	; building closure for __bin-less-than-rr
   482 000003D3 48BF-                   	mov rdi, free_var_39
   482 000003D5 [3801000000000000] 
   483 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   483 000003DF [9259000000000000] 
   484 000003E7 E8704A0000              	call bind_primitive
   485                                  
   486                                  	; building closure for __bin-less-than-qq
   487 000003EC 48BF-                   	mov rdi, free_var_40
   487 000003EE [4001000000000000] 
   488 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   488 000003F8 [E959000000000000] 
   489 00000400 E8574A0000              	call bind_primitive
   490                                  
   491                                  	; building closure for __bin-equal-rr
   492 00000405 48BF-                   	mov rdi, free_var_41
   492 00000407 [4801000000000000] 
   493 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   493 00000411 [4C5A000000000000] 
   494 00000419 E83E4A0000              	call bind_primitive
   495                                  
   496                                  	; building closure for __bin-equal-qq
   497 0000041E 48BF-                   	mov rdi, free_var_42
   497 00000420 [5001000000000000] 
   498 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   498 0000042A [A35A000000000000] 
   499 00000432 E8254A0000              	call bind_primitive
   500                                  
   501                                  	; building closure for quotient
   502 00000437 48BF-                   	mov rdi, free_var_43
   502 00000439 [5801000000000000] 
   503 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   503 00000443 [065B000000000000] 
   504 0000044B E80C4A0000              	call bind_primitive
   505                                  
   506                                  	; building closure for remainder
   507 00000450 48BF-                   	mov rdi, free_var_44
   507 00000452 [6001000000000000] 
   508 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   508 0000045C [6C5B000000000000] 
   509 00000464 E8F3490000              	call bind_primitive
   510                                  
   511                                  	; building closure for set-car!
   512 00000469 48BF-                   	mov rdi, free_var_45
   512 0000046B [6801000000000000] 
   513 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   513 00000475 [D25B000000000000] 
   514 0000047D E8DA490000              	call bind_primitive
   515                                  
   516                                  	; building closure for set-cdr!
   517 00000482 48BF-                   	mov rdi, free_var_46
   517 00000484 [7001000000000000] 
   518 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   518 0000048E [085C000000000000] 
   519 00000496 E8C1490000              	call bind_primitive
   520                                  
   521                                  	; building closure for string-ref
   522 0000049B 48BF-                   	mov rdi, free_var_47
   522 0000049D [7801000000000000] 
   523 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   523 000004A7 [3E5C000000000000] 
   524 000004AF E8A8490000              	call bind_primitive
   525                                  
   526                                  	; building closure for vector-ref
   527 000004B4 48BF-                   	mov rdi, free_var_48
   527 000004B6 [8001000000000000] 
   528 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   528 000004C0 [A95C000000000000] 
   529 000004C8 E88F490000              	call bind_primitive
   530                                  
   531                                  	; building closure for vector-set!
   532 000004CD 48BF-                   	mov rdi, free_var_49
   532 000004CF [8801000000000000] 
   533 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   533 000004D9 [055D000000000000] 
   534 000004E1 E876490000              	call bind_primitive
   535                                  
   536                                  	; building closure for string-set!
   537 000004E6 48BF-                   	mov rdi, free_var_50
   537 000004E8 [9001000000000000] 
   538 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   538 000004F2 [6F5D000000000000] 
   539 000004FA E85D490000              	call bind_primitive
   540                                  
   541                                  	; building closure for make-vector
   542 000004FF 48BF-                   	mov rdi, free_var_51
   542 00000501 [9801000000000000] 
   543 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   543 0000050B [E45D000000000000] 
   544 00000513 E844490000              	call bind_primitive
   545                                  
   546                                  	; building closure for make-string
   547 00000518 48BF-                   	mov rdi, free_var_52
   547 0000051A [A001000000000000] 
   548 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   548 00000524 [4E5E000000000000] 
   549 0000052C E82B490000              	call bind_primitive
   550                                  
   551                                  	; building closure for numerator
   552 00000531 48BF-                   	mov rdi, free_var_53
   552 00000533 [A801000000000000] 
   553 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   553 0000053D [C05E000000000000] 
   554 00000545 E812490000              	call bind_primitive
   555                                  
   556                                  	; building closure for denominator
   557 0000054A 48BF-                   	mov rdi, free_var_54
   557 0000054C [B001000000000000] 
   558 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   558 00000556 [ED5E000000000000] 
   559 0000055E E8F9480000              	call bind_primitive
   560                                  
   561                                  	; building closure for eq?
   562 00000563 48BF-                   	mov rdi, free_var_55
   562 00000565 [B801000000000000] 
   563 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   563 0000056F [1A5F000000000000] 
   564 00000577 E8E0480000              	call bind_primitive
   565                                  
   566 0000057C 488D0425[17000000]      	lea rax, [23 + L_constants]
   567 00000584 50                      	push rax
   568 00000585 6A01                    	push 1
   569 00000587 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   570 0000058C E83A430000              	call malloc
   571 00000591 50                      	push rax
   572 00000592 BF00000000              	mov rdi, 8 * 0	; new rib
   573 00000597 E82F430000              	call malloc
   574 0000059C 50                      	push rax
   575 0000059D BF08000000              	mov rdi, 8 * 1	; extended env
   576 000005A2 E824430000              	call malloc
   577 000005A7 488B7D10                	mov rdi, ENV
   578 000005AB BE00000000              	mov rsi, 0
   579 000005B0 BA01000000              	mov rdx, 1
   580                                  .L_lambda_simple_env_loop_0a25:	; ext_env[i + 1] <-- env[i]
   581 000005B5 4883FE00                	cmp rsi, 0
   582 000005B9 7410                    	je .L_lambda_simple_env_end_0a25
   583 000005BB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
   584 000005BF 48890CD0                	mov qword [rax + 8 * rdx], rcx
   585 000005C3 48FFC6                  	inc rsi
   586 000005C6 48FFC2                  	inc rdx
   587 000005C9 EBEA                    	jmp .L_lambda_simple_env_loop_0a25
   588                                  .L_lambda_simple_env_end_0a25:
   589 000005CB 5B                      	pop rbx
   590 000005CC BE00000000              	mov rsi, 0
   591                                  .L_lambda_simple_params_loop_0a25:	; copy params
   592 000005D1 4883FE00                	cmp rsi, 0
   593 000005D5 740E                    	je .L_lambda_simple_params_end_0a25
   594 000005D7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   595 000005DC 488914F3                	mov qword [rbx + 8 * rsi], rdx
   596 000005E0 48FFC6                  	inc rsi
   597 000005E3 EBEC                    	jmp .L_lambda_simple_params_loop_0a25
   598                                  .L_lambda_simple_params_end_0a25:
   599 000005E5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   600 000005E8 4889C3                  	mov rbx, rax
   601 000005EB 58                      	pop rax
   602 000005EC C60005                  	mov byte [rax], T_closure
   603 000005EF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   604 000005F3 48C74009[00060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a25
   605 000005FB E955040000              	jmp .L_lambda_simple_end_0a25
   606                                  .L_lambda_simple_code_0a25:	; lambda-simple body
   607 00000600 48837C241001            	cmp qword [rsp + 8 * 2], 1
   608 00000606 740B                    	je .L_lambda_simple_arity_check_ok_0a25
   609 00000608 FF742410                	push qword [rsp + 8 * 2]
   610 0000060C 6A01                    	push 1
   611 0000060E E971420000              	jmp L_error_incorrect_arity_simple
   612                                  .L_lambda_simple_arity_check_ok_0a25:
   613 00000613 C8000000                	enter 0, 0
   614 00000617 BF08000000              	mov qword rdi, 8
   615 0000061C E8AA420000              	call malloc
   616 00000621 48894520                	mov qword [rbp + 8*(4 + 0)], rax
   617 00000625 48B8-                   	mov rax, sob_void
   617 00000627 [0000000000000000] 
   618                                  
   619 0000062F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   620 00000634 E892420000              	call malloc
   621 00000639 50                      	push rax
   622 0000063A BF08000000              	mov rdi, 8 * 1	; new rib
   623 0000063F E887420000              	call malloc
   624 00000644 50                      	push rax
   625 00000645 BF10000000              	mov rdi, 8 * 2	; extended env
   626 0000064A E87C420000              	call malloc
   627 0000064F 488B7D10                	mov rdi, ENV
   628 00000653 BE00000000              	mov rsi, 0
   629 00000658 BA01000000              	mov rdx, 1
   630                                  .L_lambda_simple_env_loop_0a26:	; ext_env[i + 1] <-- env[i]
   631 0000065D 4883FE01                	cmp rsi, 1
   632 00000661 7410                    	je .L_lambda_simple_env_end_0a26
   633 00000663 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
   634 00000667 48890CD0                	mov qword [rax + 8 * rdx], rcx
   635 0000066B 48FFC6                  	inc rsi
   636 0000066E 48FFC2                  	inc rdx
   637 00000671 EBEA                    	jmp .L_lambda_simple_env_loop_0a26
   638                                  .L_lambda_simple_env_end_0a26:
   639 00000673 5B                      	pop rbx
   640 00000674 BE00000000              	mov rsi, 0
   641                                  .L_lambda_simple_params_loop_0a26:	; copy params
   642 00000679 4883FE01                	cmp rsi, 1
   643 0000067D 740E                    	je .L_lambda_simple_params_end_0a26
   644 0000067F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   645 00000684 488914F3                	mov qword [rbx + 8 * rsi], rdx
   646 00000688 48FFC6                  	inc rsi
   647 0000068B EBEC                    	jmp .L_lambda_simple_params_loop_0a26
   648                                  .L_lambda_simple_params_end_0a26:
   649 0000068D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   650 00000690 4889C3                  	mov rbx, rax
   651 00000693 58                      	pop rax
   652 00000694 C60005                  	mov byte [rax], T_closure
   653 00000697 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   654 0000069B 48C74009[A8060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a26
   655 000006A3 E939010000              	jmp .L_lambda_simple_end_0a26
   656                                  .L_lambda_simple_code_0a26:	; lambda-simple body
   657 000006A8 48837C241002            	cmp qword [rsp + 8 * 2], 2
   658 000006AE 740B                    	je .L_lambda_simple_arity_check_ok_0a26
   659 000006B0 FF742410                	push qword [rsp + 8 * 2]
   660 000006B4 6A02                    	push 2
   661 000006B6 E9C9410000              	jmp L_error_incorrect_arity_simple
   662                                  .L_lambda_simple_arity_check_ok_0a26:
   663 000006BB C8000000                	enter 0, 0
   664 000006BF 488B4528                	mov rax, PARAM(1)
   665 000006C3 50                      	push rax
   666 000006C4 6A01                    	push 1
   667 000006C6 488B0425[08000000]      	mov rax, qword [free_var_1]
   668                                  	assert_closure(rax)
    65 000006CE 803805              <1>  cmp byte [%1], %2
    66 000006D1 0F85745A0000        <1>  jne L_error_incorrect_type
   669 000006D7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   670 000006DB 53                      	push rbx
   671 000006DC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   672 000006E0 FFD3                    	call rbx
   673 000006E2 483D[02000000]          	cmp rax, sob_boolean_false
   674 000006E8 0F84EB000000            	je .L_if_else_090c
   675 000006EE 488B4528                	mov rax, PARAM(1)
   676 000006F2 50                      	push rax
   677 000006F3 6A01                    	push 1
   678 000006F5 488B0425[88000000]      	mov rax, qword [free_var_17]
   679                                  	assert_closure(rax)
    65 000006FD 803805              <1>  cmp byte [%1], %2
    66 00000700 0F85455A0000        <1>  jne L_error_incorrect_type
   680 00000706 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   681 0000070A 53                      	push rbx
   682 0000070B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   683 0000070F FFD3                    	call rbx
   684 00000711 50                      	push rax
   685 00000712 488B4528                	mov rax, PARAM(1)
   686 00000716 50                      	push rax
   687 00000717 6A01                    	push 1
   688 00000719 488B0425[80000000]      	mov rax, qword [free_var_16]
   689                                  	assert_closure(rax)
    65 00000721 803805              <1>  cmp byte [%1], %2
    66 00000724 0F85215A0000        <1>  jne L_error_incorrect_type
   690 0000072A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   691 0000072E 53                      	push rbx
   692 0000072F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   693 00000733 FFD3                    	call rbx
   694 00000735 50                      	push rax
   695 00000736 6A02                    	push 2
   696 00000738 488B4510                	mov rax, qword [rbp + 8*2]
   697 0000073C 488B00                  	mov rax, qword [rax + 8*0]
   698 0000073F 488B00                  	mov rax, qword [rax + 8*0]
   699 00000742 488B00                  	mov rax, qword [rax]
   700                                  	assert_closure(rax)
    65 00000745 803805              <1>  cmp byte [%1], %2
    66 00000748 0F85FD590000        <1>  jne L_error_incorrect_type
   701 0000074E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   702 00000752 53                      	push rbx
   703 00000753 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   704 00000757 FFD3                    	call rbx
   705 00000759 50                      	push rax
   706 0000075A 488B4520                	mov rax, PARAM(0)
   707 0000075E 50                      	push rax
   708 0000075F 6A02                    	push 2
   709 00000761 488B0425[68000000]      	mov rax, qword [free_var_13]
   710                                  	assert_closure(rax)
    65 00000769 803805              <1>  cmp byte [%1], %2
    66 0000076C 0F85D9590000        <1>  jne L_error_incorrect_type
   711 00000772 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   712 00000776 53                      	push rbx
   713 00000777 FF7508                  	push RET_ADDR
   714 0000077A 488B7D18                	mov rdi, COUNT
   715 0000077E 4883C703                	add rdi, 3
   716 00000782 48C1E703                	shl rdi, 3
   717 00000786 4801EF                  	add rdi, rbp
   718 00000789 488B6D00                	mov rbp, OLD_RDP
   719 0000078D BE00000000              	mov rsi, 0
   720                                  .L_tc_recycle_frame_loop_0f9c:	 ; start recycle frame loop
   721 00000792 4883FE05                	cmp rsi, 5
   722 00000796 7427                    	je .L_tc_recycle_frame_done_0f9c
   723 00000798 B904000000              	mov rcx, 4
   724 0000079D 4829F1                  	sub rcx, rsi
   725 000007A0 48C1E103                	shl rcx, 3
   726 000007A4 4801E1                  	add rcx, rsp ; rcx is the address to move
   727 000007A7 4889F3                  	mov rbx, rsi
   728 000007AA 48C1E303                	shl rbx, 3
   729 000007AE 48F7DB                  	neg rbx
   730 000007B1 4801FB                  	add rbx, rdi ;rbx is the address to move to
   731 000007B4 488B09                  	mov rcx, [rcx]
   732 000007B7 48890B                  	mov [rbx], rcx
   733 000007BA 48FFC6                  	inc rsi
   734 000007BD EBD3                    	jmp .L_tc_recycle_frame_loop_0f9c
   735                                  .L_tc_recycle_frame_done_0f9c:	 ; end recycle frame loop
   736 000007BF BB04000000              	mov rbx, 4
   737 000007C4 48C1E303                	shl rbx, 3
   738 000007C8 48F7DB                  	neg rbx
   739 000007CB 4801FB                  	add rbx, rdi
   740 000007CE 4889DC                  	mov rsp, rbx
   741 000007D1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   742 000007D5 FFE3                    	jmp rbx
   743 000007D7 EB04                    	jmp .L_if_end_090c
   744                                  	.L_if_else_090c:
   745 000007D9 488B4520                	mov rax, PARAM(0)
   746                                  	.L_if_end_090c:
   747 000007DD C9                      	leave
   748 000007DE C22000                  	ret 8 * (2 + 2)
   749                                  .L_lambda_simple_end_0a26:	; new closure is in rax
   750 000007E1 50                      	push rax
   751 000007E2 488B4520                	mov rax, PARAM(0)
   752 000007E6 8F00                    	pop qword [rax]
   753 000007E8 48B8-                   	mov rax, sob_void
   753 000007EA [0000000000000000] 
   754                                  
   755 000007F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   756 000007F7 E8CF400000              	call malloc
   757 000007FC 50                      	push rax
   758 000007FD BF08000000              	mov rdi, 8 * 1	; new rib
   759 00000802 E8C4400000              	call malloc
   760 00000807 50                      	push rax
   761 00000808 BF10000000              	mov rdi, 8 * 2	; extended env
   762 0000080D E8B9400000              	call malloc
   763 00000812 488B7D10                	mov rdi, ENV
   764 00000816 BE00000000              	mov rsi, 0
   765 0000081B BA01000000              	mov rdx, 1
   766                                  .L_lambda_opt_env_loop_03c6:	; ext_env[i + 1] <-- env[i]
   767 00000820 4883FE01                	cmp rsi, 1
   768 00000824 7410                    	je .L_lambda_opt_env_end_03c6
   769 00000826 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
   770 0000082A 48890CD0                	mov qword [rax + 8 * rdx], rcx
   771 0000082E 48FFC6                  	inc rsi
   772 00000831 48FFC2                  	inc rdx
   773 00000834 EBEA                    	jmp .L_lambda_opt_env_loop_03c6
   774                                  .L_lambda_opt_env_end_03c6:
   775 00000836 5B                      	pop rbx
   776 00000837 BE00000000              	mov rsi, 0
   777                                  .L_lambda_opt_params_loop_03c6:	; copy params
   778 0000083C 4883FE01                	cmp rsi, 1
   779 00000840 740E                    	je .L_lambda_opt_params_end_03c6
   780 00000842 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   781 00000847 488914F3                	mov qword [rbx + 8 * rsi], rdx
   782 0000084B 48FFC6                  	inc rsi
   783 0000084E EBEC                    	jmp .L_lambda_opt_params_loop_03c6
   784                                  .L_lambda_opt_params_end_03c6:
   785 00000850 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   786 00000853 4889C3                  	mov rbx, rax
   787 00000856 58                      	pop rax
   788 00000857 C60005                  	mov byte [rax], T_closure
   789 0000085A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   790 0000085E 48C74009[6B080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_03c6
   791 00000866 E9E6010000              	jmp .L_lambda_opt_end_03c6
   792                                  .L_lambda_opt_code_03c6:	; lambda-opt body
   793 0000086B 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
   794 00000870 4889FB                  	mov rbx, rdi
   795 00000873 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
   796 00000877 4883FB00                	cmp rbx, 0
   797 0000087B 7F45                    	jg .L_lambda_opt_arity_check_more_03c6
   798                                  .L_lambda_opt_arity_check_exact_03c6:	 ; if params in opt is exact
   799 0000087D 4883EC08                	sub rsp, 8
   800 00000881 BE00000000              	mov rsi, 0 ; index
   801                                  .L_lambda_opt_stack_enlarge_loop_03c6:	 ; stack loop enlarge start
   802 00000886 4883FE04                	cmp rsi, 4
   803 0000088A 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_03c6
   804 0000088C 4889F7                  	mov rdi, rsi
   805 0000088F 48FFC7                  	inc rdi
   806 00000892 48C1E703                	shl rdi, 3
   807 00000896 4801E7                  	add rdi, rsp
   808 00000899 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
   809 0000089C 4883EB08                	sub rbx, 8
   810 000008A0 488B3F                  	mov rdi, [rdi]
   811 000008A3 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
   812 000008A6 48FFC6                  	inc rsi
   813 000008A9 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_03c6
   814                                  .L_lambda_opt_stack_enlarge_loop_exit_03c6:	 ; end of stack enlarge loop
   815 000008AB 48C7442420-             	mov qword [rsp + 4*8], sob_nil
   815 000008B0 [01000000]         
   816 000008B4 48C744241002000000      	mov qword [rsp + 2*8], 2
   817 000008BD E99E000000              	jmp .L_lambda_opt_stack_adjusted_03c6
   818                                  .L_lambda_opt_arity_check_more_03c6:	 ; if params in opt is more
   819 000008C2 48B8-                   	mov rax, sob_nil
   819 000008C4 [0100000000000000] 
   820 000008CC 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
   821 000008CF 48FFCE                  	dec rsi
   822                                  .L_lambda_opt_list_create_loop_03c6:	; start of list creation loop
   823 000008D2 4883FEFF                	cmp rsi, -1
   824 000008D6 7422                    	je .L_lambda_opt_list_create_loop_exit_03c6
   825 000008D8 488D4E04                	lea rcx, [rsi + (3 + 1)]
   826 000008DC 48C1E103                	shl rcx, 3
   827 000008E0 4801E1                  	add rcx, rsp
   828 000008E3 488B09                  	mov rcx, [rcx]
   829 000008E6 56                      	push rsi ; save params
   830 000008E7 53                      	push rbx
   831                                  
   832 000008E8 50                      	push rax ; cdr
   833 000008E9 51                      	push rcx ; car
   834 000008EA 6A02                    	push qword 2 ; push num of args
   835 000008EC 6A01                    	push qword 1 ; push garbage as env
   836 000008EE E85F490000              	call L_code_ptr_cons
   837                                  
   838 000008F3 5B                      	pop rbx ; restore params
   839 000008F4 5E                      	pop rsi
   840 000008F5 48FFCE                  	dec rsi
   841 000008F8 EBD8                    	jmp .L_lambda_opt_list_create_loop_03c6
   842                                  .L_lambda_opt_list_create_loop_exit_03c6:	; end of list creation loop
   843 000008FA 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
   844 000008FF 4883C302                	add rbx, 2
   845 00000903 4889DF                  	mov rdi, rbx
   846 00000906 48C1E703                	shl rdi,3
   847 0000090A 4801E7                  	add rdi, rsp
   848 0000090D 488907                  	mov [rdi], rax
   849 00000910 BE00000000              	mov rsi, 0 ;index
   850                                  .L_lambda_opt_stack_shrink_loop_03c6:	; start of stack shrink loop
   851 00000915 4883FE04                	cmp rsi, 4
   852 00000919 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_03c6
   853 0000091B BF03000000              	mov rdi, 3
   854 00000920 4829F7                  	sub rdi, rsi; the index of the current stack member to move
   855 00000923 4889D9                  	mov rcx, rbx
   856 00000926 4829F1                  	sub rcx, rsi
   857 00000929 48FFC9                  	dec rcx ; the index of the target stack place to put the member
   858 0000092C 4889FA                  	mov rdx, rdi
   859 0000092F 48C1E203                	shl rdx, 3
   860 00000933 4801E2                  	add rdx, rsp
   861 00000936 48C1E103                	shl rcx, 3
   862 0000093A 4801E1                  	add rcx, rsp
   863 0000093D 488B12                  	mov rdx, [rdx]
   864 00000940 488911                  	mov [rcx], rdx
   865 00000943 48FFC6                  	inc rsi
   866 00000946 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_03c6
   867                                  .L_lambda_opt_stack_shrink_loop_exit_03c6:	; end of stack shrink loop
   868 00000948 4883EB02                	sub rbx, 2 ; rbx has number of args
   869 0000094C 4883EB02                	sub rbx, 2
   870 00000950 48C1E303                	shl rbx, 3
   871 00000954 4801DC                  	add rsp, rbx
   872 00000957 48C744241002000000      	mov qword [rsp + 8 * 2], 2
   873                                  .L_lambda_opt_stack_adjusted_03c6:
   874 00000960 C8000000                	enter 0, 0
   875 00000964 488B4528                	mov rax, PARAM(1)
   876 00000968 50                      	push rax
   877 00000969 6A01                    	push 1
   878 0000096B 488B0425[88000000]      	mov rax, qword [free_var_17]
   879                                  	assert_closure(rax)
    65 00000973 803805              <1>  cmp byte [%1], %2
    66 00000976 0F85CF570000        <1>  jne L_error_incorrect_type
   880 0000097C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   881 00000980 53                      	push rbx
   882 00000981 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   883 00000985 FFD3                    	call rbx
   884 00000987 50                      	push rax
   885 00000988 488B4528                	mov rax, PARAM(1)
   886 0000098C 50                      	push rax
   887 0000098D 6A01                    	push 1
   888 0000098F 488B0425[80000000]      	mov rax, qword [free_var_16]
   889                                  	assert_closure(rax)
    65 00000997 803805              <1>  cmp byte [%1], %2
    66 0000099A 0F85AB570000        <1>  jne L_error_incorrect_type
   890 000009A0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   891 000009A4 53                      	push rbx
   892 000009A5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   893 000009A9 FFD3                    	call rbx
   894 000009AB 50                      	push rax
   895 000009AC 6A02                    	push 2
   896 000009AE 488B4510                	mov rax, qword [rbp + 8*2]
   897 000009B2 488B00                  	mov rax, qword [rax + 8*0]
   898 000009B5 488B00                  	mov rax, qword [rax + 8*0]
   899 000009B8 488B00                  	mov rax, qword [rax]
   900                                  	assert_closure(rax)
    65 000009BB 803805              <1>  cmp byte [%1], %2
    66 000009BE 0F8587570000        <1>  jne L_error_incorrect_type
   901 000009C4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   902 000009C8 53                      	push rbx
   903 000009C9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   904 000009CD FFD3                    	call rbx
   905 000009CF 50                      	push rax
   906 000009D0 488B4520                	mov rax, PARAM(0)
   907 000009D4 50                      	push rax
   908 000009D5 6A02                    	push 2
   909 000009D7 488B0425[E8000000]      	mov rax, qword [free_var_29]
   910                                  	assert_closure(rax)
    65 000009DF 803805              <1>  cmp byte [%1], %2
    66 000009E2 0F8563570000        <1>  jne L_error_incorrect_type
   911 000009E8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   912 000009EC 53                      	push rbx
   913 000009ED FF7508                  	push RET_ADDR
   914 000009F0 488B7D18                	mov rdi, COUNT
   915 000009F4 4883C703                	add rdi, 3
   916 000009F8 48C1E703                	shl rdi, 3
   917 000009FC 4801EF                  	add rdi, rbp
   918 000009FF 488B6D00                	mov rbp, OLD_RDP
   919 00000A03 BE00000000              	mov rsi, 0
   920                                  .L_tc_recycle_frame_loop_0f9d:	 ; start recycle frame loop
   921 00000A08 4883FE05                	cmp rsi, 5
   922 00000A0C 7427                    	je .L_tc_recycle_frame_done_0f9d
   923 00000A0E B904000000              	mov rcx, 4
   924 00000A13 4829F1                  	sub rcx, rsi
   925 00000A16 48C1E103                	shl rcx, 3
   926 00000A1A 4801E1                  	add rcx, rsp ; rcx is the address to move
   927 00000A1D 4889F3                  	mov rbx, rsi
   928 00000A20 48C1E303                	shl rbx, 3
   929 00000A24 48F7DB                  	neg rbx
   930 00000A27 4801FB                  	add rbx, rdi ;rbx is the address to move to
   931 00000A2A 488B09                  	mov rcx, [rcx]
   932 00000A2D 48890B                  	mov [rbx], rcx
   933 00000A30 48FFC6                  	inc rsi
   934 00000A33 EBD3                    	jmp .L_tc_recycle_frame_loop_0f9d
   935                                  .L_tc_recycle_frame_done_0f9d:	 ; end recycle frame loop
   936 00000A35 BB04000000              	mov rbx, 4
   937 00000A3A 48C1E303                	shl rbx, 3
   938 00000A3E 48F7DB                  	neg rbx
   939 00000A41 4801FB                  	add rbx, rdi
   940 00000A44 4889DC                  	mov rsp, rbx
   941 00000A47 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   942 00000A4B FFE3                    	jmp rbx
   943 00000A4D C9                      	leave
   944 00000A4E C22000                  	ret AND_KILL_FRAME(2)
   945                                  .L_lambda_opt_end_03c6:	; new closure is in rax
   946 00000A51 C9                      	leave
   947 00000A52 C21800                  	ret 8 * (2 + 1)
   948                                  .L_lambda_simple_end_0a25:	; new closure is in rax
   949                                  	assert_closure(rax)
    65 00000A55 803805              <1>  cmp byte [%1], %2
    66 00000A58 0F85ED560000        <1>  jne L_error_incorrect_type
   950 00000A5E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   951 00000A62 53                      	push rbx
   952 00000A63 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   953 00000A67 FFD3                    	call rbx
   954 00000A69 48890425[C0010000]      	mov qword [free_var_56], rax
   955 00000A71 48B8-                   	mov rax, sob_void
   955 00000A73 [0000000000000000] 
   956                                  
   957 00000A7B 4889C7                  	mov rdi, rax
   958 00000A7E E8593E0000              	call print_sexpr_if_not_void
   959                                  
   960 00000A83 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   961 00000A88 E83E3E0000              	call malloc
   962 00000A8D 50                      	push rax
   963 00000A8E BF00000000              	mov rdi, 8 * 0	; new rib
   964 00000A93 E8333E0000              	call malloc
   965 00000A98 50                      	push rax
   966 00000A99 BF08000000              	mov rdi, 8 * 1	; extended env
   967 00000A9E E8283E0000              	call malloc
   968 00000AA3 488B7D10                	mov rdi, ENV
   969 00000AA7 BE00000000              	mov rsi, 0
   970 00000AAC BA01000000              	mov rdx, 1
   971                                  .L_lambda_opt_env_loop_03c7:	; ext_env[i + 1] <-- env[i]
   972 00000AB1 4883FE00                	cmp rsi, 0
   973 00000AB5 7410                    	je .L_lambda_opt_env_end_03c7
   974 00000AB7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
   975 00000ABB 48890CD0                	mov qword [rax + 8 * rdx], rcx
   976 00000ABF 48FFC6                  	inc rsi
   977 00000AC2 48FFC2                  	inc rdx
   978 00000AC5 EBEA                    	jmp .L_lambda_opt_env_loop_03c7
   979                                  .L_lambda_opt_env_end_03c7:
   980 00000AC7 5B                      	pop rbx
   981 00000AC8 BE00000000              	mov rsi, 0
   982                                  .L_lambda_opt_params_loop_03c7:	; copy params
   983 00000ACD 4883FE00                	cmp rsi, 0
   984 00000AD1 740E                    	je .L_lambda_opt_params_end_03c7
   985 00000AD3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   986 00000AD8 488914F3                	mov qword [rbx + 8 * rsi], rdx
   987 00000ADC 48FFC6                  	inc rsi
   988 00000ADF EBEC                    	jmp .L_lambda_opt_params_loop_03c7
   989                                  .L_lambda_opt_params_end_03c7:
   990 00000AE1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   991 00000AE4 4889C3                  	mov rbx, rax
   992 00000AE7 58                      	pop rax
   993 00000AE8 C60005                  	mov byte [rax], T_closure
   994 00000AEB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   995 00000AEF 48C74009[FC0A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_03c7
   996 00000AF7 E9AF040000              	jmp .L_lambda_opt_end_03c7
   997                                  .L_lambda_opt_code_03c7:	; lambda-opt body
   998 00000AFC 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
   999 00000B01 4889FB                  	mov rbx, rdi
  1000 00000B04 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  1001 00000B08 4883FB00                	cmp rbx, 0
  1002 00000B0C 7F45                    	jg .L_lambda_opt_arity_check_more_03c7
  1003                                  .L_lambda_opt_arity_check_exact_03c7:	 ; if params in opt is exact
  1004 00000B0E 4883EC08                	sub rsp, 8
  1005 00000B12 BE00000000              	mov rsi, 0 ; index
  1006                                  .L_lambda_opt_stack_enlarge_loop_03c7:	 ; stack loop enlarge start
  1007 00000B17 4883FE04                	cmp rsi, 4
  1008 00000B1B 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_03c7
  1009 00000B1D 4889F7                  	mov rdi, rsi
  1010 00000B20 48FFC7                  	inc rdi
  1011 00000B23 48C1E703                	shl rdi, 3
  1012 00000B27 4801E7                  	add rdi, rsp
  1013 00000B2A 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  1014 00000B2D 4883EB08                	sub rbx, 8
  1015 00000B31 488B3F                  	mov rdi, [rdi]
  1016 00000B34 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  1017 00000B37 48FFC6                  	inc rsi
  1018 00000B3A EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_03c7
  1019                                  .L_lambda_opt_stack_enlarge_loop_exit_03c7:	 ; end of stack enlarge loop
  1020 00000B3C 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  1020 00000B41 [01000000]         
  1021 00000B45 48C744241002000000      	mov qword [rsp + 2*8], 2
  1022 00000B4E E99E000000              	jmp .L_lambda_opt_stack_adjusted_03c7
  1023                                  .L_lambda_opt_arity_check_more_03c7:	 ; if params in opt is more
  1024 00000B53 48B8-                   	mov rax, sob_nil
  1024 00000B55 [0100000000000000] 
  1025 00000B5D 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  1026 00000B60 48FFCE                  	dec rsi
  1027                                  .L_lambda_opt_list_create_loop_03c7:	; start of list creation loop
  1028 00000B63 4883FEFF                	cmp rsi, -1
  1029 00000B67 7422                    	je .L_lambda_opt_list_create_loop_exit_03c7
  1030 00000B69 488D4E04                	lea rcx, [rsi + (3 + 1)]
  1031 00000B6D 48C1E103                	shl rcx, 3
  1032 00000B71 4801E1                  	add rcx, rsp
  1033 00000B74 488B09                  	mov rcx, [rcx]
  1034 00000B77 56                      	push rsi ; save params
  1035 00000B78 53                      	push rbx
  1036                                  
  1037 00000B79 50                      	push rax ; cdr
  1038 00000B7A 51                      	push rcx ; car
  1039 00000B7B 6A02                    	push qword 2 ; push num of args
  1040 00000B7D 6A01                    	push qword 1 ; push garbage as env
  1041 00000B7F E8CE460000              	call L_code_ptr_cons
  1042                                  
  1043 00000B84 5B                      	pop rbx ; restore params
  1044 00000B85 5E                      	pop rsi
  1045 00000B86 48FFCE                  	dec rsi
  1046 00000B89 EBD8                    	jmp .L_lambda_opt_list_create_loop_03c7
  1047                                  .L_lambda_opt_list_create_loop_exit_03c7:	; end of list creation loop
  1048 00000B8B 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  1049 00000B90 4883C302                	add rbx, 2
  1050 00000B94 4889DF                  	mov rdi, rbx
  1051 00000B97 48C1E703                	shl rdi,3
  1052 00000B9B 4801E7                  	add rdi, rsp
  1053 00000B9E 488907                  	mov [rdi], rax
  1054 00000BA1 BE00000000              	mov rsi, 0 ;index
  1055                                  .L_lambda_opt_stack_shrink_loop_03c7:	; start of stack shrink loop
  1056 00000BA6 4883FE04                	cmp rsi, 4
  1057 00000BAA 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_03c7
  1058 00000BAC BF03000000              	mov rdi, 3
  1059 00000BB1 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  1060 00000BB4 4889D9                  	mov rcx, rbx
  1061 00000BB7 4829F1                  	sub rcx, rsi
  1062 00000BBA 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  1063 00000BBD 4889FA                  	mov rdx, rdi
  1064 00000BC0 48C1E203                	shl rdx, 3
  1065 00000BC4 4801E2                  	add rdx, rsp
  1066 00000BC7 48C1E103                	shl rcx, 3
  1067 00000BCB 4801E1                  	add rcx, rsp
  1068 00000BCE 488B12                  	mov rdx, [rdx]
  1069 00000BD1 488911                  	mov [rcx], rdx
  1070 00000BD4 48FFC6                  	inc rsi
  1071 00000BD7 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_03c7
  1072                                  .L_lambda_opt_stack_shrink_loop_exit_03c7:	; end of stack shrink loop
  1073 00000BD9 4883EB02                	sub rbx, 2 ; rbx has number of args
  1074 00000BDD 4883EB02                	sub rbx, 2
  1075 00000BE1 48C1E303                	shl rbx, 3
  1076 00000BE5 4801DC                  	add rsp, rbx
  1077 00000BE8 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  1078                                  .L_lambda_opt_stack_adjusted_03c7:
  1079 00000BF1 C8000000                	enter 0, 0
  1080 00000BF5 488D0425[17000000]      	lea rax, [23 + L_constants]
  1081 00000BFD 50                      	push rax
  1082 00000BFE 6A01                    	push 1
  1083 00000C00 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1084 00000C05 E8C13C0000              	call malloc
  1085 00000C0A 50                      	push rax
  1086 00000C0B BF10000000              	mov rdi, 8 * 2	; new rib
  1087 00000C10 E8B63C0000              	call malloc
  1088 00000C15 50                      	push rax
  1089 00000C16 BF10000000              	mov rdi, 8 * 2	; extended env
  1090 00000C1B E8AB3C0000              	call malloc
  1091 00000C20 488B7D10                	mov rdi, ENV
  1092 00000C24 BE00000000              	mov rsi, 0
  1093 00000C29 BA01000000              	mov rdx, 1
  1094                                  .L_lambda_simple_env_loop_0a27:	; ext_env[i + 1] <-- env[i]
  1095 00000C2E 4883FE01                	cmp rsi, 1
  1096 00000C32 7410                    	je .L_lambda_simple_env_end_0a27
  1097 00000C34 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1098 00000C38 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1099 00000C3C 48FFC6                  	inc rsi
  1100 00000C3F 48FFC2                  	inc rdx
  1101 00000C42 EBEA                    	jmp .L_lambda_simple_env_loop_0a27
  1102                                  .L_lambda_simple_env_end_0a27:
  1103 00000C44 5B                      	pop rbx
  1104 00000C45 BE00000000              	mov rsi, 0
  1105                                  .L_lambda_simple_params_loop_0a27:	; copy params
  1106 00000C4A 4883FE02                	cmp rsi, 2
  1107 00000C4E 740E                    	je .L_lambda_simple_params_end_0a27
  1108 00000C50 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1109 00000C55 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1110 00000C59 48FFC6                  	inc rsi
  1111 00000C5C EBEC                    	jmp .L_lambda_simple_params_loop_0a27
  1112                                  .L_lambda_simple_params_end_0a27:
  1113 00000C5E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1114 00000C61 4889C3                  	mov rbx, rax
  1115 00000C64 58                      	pop rax
  1116 00000C65 C60005                  	mov byte [rax], T_closure
  1117 00000C68 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1118 00000C6C 48C74009[790C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a27
  1119 00000C74 E9C0020000              	jmp .L_lambda_simple_end_0a27
  1120                                  .L_lambda_simple_code_0a27:	; lambda-simple body
  1121 00000C79 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1122 00000C7F 740B                    	je .L_lambda_simple_arity_check_ok_0a27
  1123 00000C81 FF742410                	push qword [rsp + 8 * 2]
  1124 00000C85 6A01                    	push 1
  1125 00000C87 E9F83B0000              	jmp L_error_incorrect_arity_simple
  1126                                  .L_lambda_simple_arity_check_ok_0a27:
  1127 00000C8C C8000000                	enter 0, 0
  1128 00000C90 BF08000000              	mov qword rdi, 8
  1129 00000C95 E8313C0000              	call malloc
  1130 00000C9A 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  1131 00000C9E 48B8-                   	mov rax, sob_void
  1131 00000CA0 [0000000000000000] 
  1132                                  
  1133 00000CA8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1134 00000CAD E8193C0000              	call malloc
  1135 00000CB2 50                      	push rax
  1136 00000CB3 BF08000000              	mov rdi, 8 * 1	; new rib
  1137 00000CB8 E80E3C0000              	call malloc
  1138 00000CBD 50                      	push rax
  1139 00000CBE BF18000000              	mov rdi, 8 * 3	; extended env
  1140 00000CC3 E8033C0000              	call malloc
  1141 00000CC8 488B7D10                	mov rdi, ENV
  1142 00000CCC BE00000000              	mov rsi, 0
  1143 00000CD1 BA01000000              	mov rdx, 1
  1144                                  .L_lambda_simple_env_loop_0a28:	; ext_env[i + 1] <-- env[i]
  1145 00000CD6 4883FE02                	cmp rsi, 2
  1146 00000CDA 7410                    	je .L_lambda_simple_env_end_0a28
  1147 00000CDC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1148 00000CE0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1149 00000CE4 48FFC6                  	inc rsi
  1150 00000CE7 48FFC2                  	inc rdx
  1151 00000CEA EBEA                    	jmp .L_lambda_simple_env_loop_0a28
  1152                                  .L_lambda_simple_env_end_0a28:
  1153 00000CEC 5B                      	pop rbx
  1154 00000CED BE00000000              	mov rsi, 0
  1155                                  .L_lambda_simple_params_loop_0a28:	; copy params
  1156 00000CF2 4883FE01                	cmp rsi, 1
  1157 00000CF6 740E                    	je .L_lambda_simple_params_end_0a28
  1158 00000CF8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1159 00000CFD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1160 00000D01 48FFC6                  	inc rsi
  1161 00000D04 EBEC                    	jmp .L_lambda_simple_params_loop_0a28
  1162                                  .L_lambda_simple_params_end_0a28:
  1163 00000D06 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1164 00000D09 4889C3                  	mov rbx, rax
  1165 00000D0C 58                      	pop rax
  1166 00000D0D C60005                  	mov byte [rax], T_closure
  1167 00000D10 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1168 00000D14 48C74009[210D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a28
  1169 00000D1C E980010000              	jmp .L_lambda_simple_end_0a28
  1170                                  .L_lambda_simple_code_0a28:	; lambda-simple body
  1171 00000D21 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1172 00000D27 740B                    	je .L_lambda_simple_arity_check_ok_0a28
  1173 00000D29 FF742410                	push qword [rsp + 8 * 2]
  1174 00000D2D 6A01                    	push 1
  1175 00000D2F E9503B0000              	jmp L_error_incorrect_arity_simple
  1176                                  .L_lambda_simple_arity_check_ok_0a28:
  1177 00000D34 C8000000                	enter 0, 0
  1178 00000D38 488B4520                	mov rax, PARAM(0)
  1179 00000D3C 50                      	push rax
  1180 00000D3D 6A01                    	push 1
  1181 00000D3F 488B0425[80000000]      	mov rax, qword [free_var_16]
  1182                                  	assert_closure(rax)
    65 00000D47 803805              <1>  cmp byte [%1], %2
    66 00000D4A 0F85FB530000        <1>  jne L_error_incorrect_type
  1183 00000D50 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1184 00000D54 53                      	push rbx
  1185 00000D55 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1186 00000D59 FFD3                    	call rbx
  1187 00000D5B 50                      	push rax
  1188 00000D5C 6A01                    	push 1
  1189 00000D5E 488B0425[08000000]      	mov rax, qword [free_var_1]
  1190                                  	assert_closure(rax)
    65 00000D66 803805              <1>  cmp byte [%1], %2
    66 00000D69 0F85DC530000        <1>  jne L_error_incorrect_type
  1191 00000D6F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1192 00000D73 53                      	push rbx
  1193 00000D74 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1194 00000D78 FFD3                    	call rbx
  1195 00000D7A 483D[02000000]          	cmp rax, sob_boolean_false
  1196 00000D80 0F840F010000            	je .L_if_else_090d
  1197 00000D86 488B4520                	mov rax, PARAM(0)
  1198 00000D8A 50                      	push rax
  1199 00000D8B 488B0425[80000000]      	mov rax, qword [free_var_16]
  1200 00000D93 50                      	push rax
  1201 00000D94 6A02                    	push 2
  1202 00000D96 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1203                                  	assert_closure(rax)
    65 00000D9E 803805              <1>  cmp byte [%1], %2
    66 00000DA1 0F85A4530000        <1>  jne L_error_incorrect_type
  1204 00000DA7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1205 00000DAB 53                      	push rbx
  1206 00000DAC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1207 00000DB0 FFD3                    	call rbx
  1208 00000DB2 50                      	push rax
  1209 00000DB3 488B4510                	mov rax, qword [rbp + 8*2]
  1210 00000DB7 488B4008                	mov rax, qword [rax + 8*1]
  1211 00000DBB 488B00                  	mov rax, qword [rax + 8*0]
  1212 00000DBE 50                      	push rax
  1213 00000DBF 6A02                    	push 2
  1214 00000DC1 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1215                                  	assert_closure(rax)
    65 00000DC9 803805              <1>  cmp byte [%1], %2
    66 00000DCC 0F8579530000        <1>  jne L_error_incorrect_type
  1216 00000DD2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1217 00000DD6 53                      	push rbx
  1218 00000DD7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1219 00000DDB FFD3                    	call rbx
  1220 00000DDD 483D[02000000]          	cmp rax, sob_boolean_false
  1221 00000DE3 0F85AA000000            	jne .L_or_end_00ca
  1222 00000DE9 488B4520                	mov rax, PARAM(0)
  1223 00000DED 50                      	push rax
  1224 00000DEE 488B0425[88000000]      	mov rax, qword [free_var_17]
  1225 00000DF6 50                      	push rax
  1226 00000DF7 6A02                    	push 2
  1227 00000DF9 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1228                                  	assert_closure(rax)
    65 00000E01 803805              <1>  cmp byte [%1], %2
    66 00000E04 0F8541530000        <1>  jne L_error_incorrect_type
  1229 00000E0A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1230 00000E0E 53                      	push rbx
  1231 00000E0F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1232 00000E13 FFD3                    	call rbx
  1233 00000E15 50                      	push rax
  1234 00000E16 6A01                    	push 1
  1235 00000E18 488B4510                	mov rax, qword [rbp + 8*2]
  1236 00000E1C 488B00                  	mov rax, qword [rax + 8*0]
  1237 00000E1F 488B00                  	mov rax, qword [rax + 8*0]
  1238 00000E22 488B00                  	mov rax, qword [rax]
  1239                                  	assert_closure(rax)
    65 00000E25 803805              <1>  cmp byte [%1], %2
    66 00000E28 0F851D530000        <1>  jne L_error_incorrect_type
  1240 00000E2E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1241 00000E32 53                      	push rbx
  1242 00000E33 FF7508                  	push RET_ADDR
  1243 00000E36 488B7D18                	mov rdi, COUNT
  1244 00000E3A 4883C703                	add rdi, 3
  1245 00000E3E 48C1E703                	shl rdi, 3
  1246 00000E42 4801EF                  	add rdi, rbp
  1247 00000E45 488B6D00                	mov rbp, OLD_RDP
  1248 00000E49 BE00000000              	mov rsi, 0
  1249                                  .L_tc_recycle_frame_loop_0f9f:	 ; start recycle frame loop
  1250 00000E4E 4883FE04                	cmp rsi, 4
  1251 00000E52 7427                    	je .L_tc_recycle_frame_done_0f9f
  1252 00000E54 B903000000              	mov rcx, 3
  1253 00000E59 4829F1                  	sub rcx, rsi
  1254 00000E5C 48C1E103                	shl rcx, 3
  1255 00000E60 4801E1                  	add rcx, rsp ; rcx is the address to move
  1256 00000E63 4889F3                  	mov rbx, rsi
  1257 00000E66 48C1E303                	shl rbx, 3
  1258 00000E6A 48F7DB                  	neg rbx
  1259 00000E6D 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1260 00000E70 488B09                  	mov rcx, [rcx]
  1261 00000E73 48890B                  	mov [rbx], rcx
  1262 00000E76 48FFC6                  	inc rsi
  1263 00000E79 EBD3                    	jmp .L_tc_recycle_frame_loop_0f9f
  1264                                  .L_tc_recycle_frame_done_0f9f:	 ; end recycle frame loop
  1265 00000E7B BB03000000              	mov rbx, 3
  1266 00000E80 48C1E303                	shl rbx, 3
  1267 00000E84 48F7DB                  	neg rbx
  1268 00000E87 4801FB                  	add rbx, rdi
  1269 00000E8A 4889DC                  	mov rsp, rbx
  1270 00000E8D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1271 00000E91 FFE3                    	jmp rbx
  1272                                  .L_or_end_00ca:
  1273 00000E93 EB08                    	jmp .L_if_end_090d
  1274                                  	.L_if_else_090d:
  1275 00000E95 488D0425[02000000]      	lea rax, [2 + L_constants]
  1276                                  	.L_if_end_090d:
  1277 00000E9D C9                      	leave
  1278 00000E9E C21800                  	ret 8 * (2 + 1)
  1279                                  .L_lambda_simple_end_0a28:	; new closure is in rax
  1280 00000EA1 50                      	push rax
  1281 00000EA2 488B4520                	mov rax, PARAM(0)
  1282 00000EA6 8F00                    	pop qword [rax]
  1283 00000EA8 48B8-                   	mov rax, sob_void
  1283 00000EAA [0000000000000000] 
  1284                                  
  1285 00000EB2 488B4510                	mov rax, qword [rbp + 8*2]
  1286 00000EB6 488B00                  	mov rax, qword [rax + 8*0]
  1287 00000EB9 488B4008                	mov rax, qword [rax + 8*1]
  1288 00000EBD 50                      	push rax
  1289 00000EBE 6A01                    	push 1
  1290 00000EC0 488B4520                	mov rax, PARAM(0)
  1291 00000EC4 488B00                  	mov rax, qword [rax]
  1292                                  	assert_closure(rax)
    65 00000EC7 803805              <1>  cmp byte [%1], %2
    66 00000ECA 0F857B520000        <1>  jne L_error_incorrect_type
  1293 00000ED0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1294 00000ED4 53                      	push rbx
  1295 00000ED5 FF7508                  	push RET_ADDR
  1296 00000ED8 488B7D18                	mov rdi, COUNT
  1297 00000EDC 4883C703                	add rdi, 3
  1298 00000EE0 48C1E703                	shl rdi, 3
  1299 00000EE4 4801EF                  	add rdi, rbp
  1300 00000EE7 488B6D00                	mov rbp, OLD_RDP
  1301 00000EEB BE00000000              	mov rsi, 0
  1302                                  .L_tc_recycle_frame_loop_0fa0:	 ; start recycle frame loop
  1303 00000EF0 4883FE04                	cmp rsi, 4
  1304 00000EF4 7427                    	je .L_tc_recycle_frame_done_0fa0
  1305 00000EF6 B903000000              	mov rcx, 3
  1306 00000EFB 4829F1                  	sub rcx, rsi
  1307 00000EFE 48C1E103                	shl rcx, 3
  1308 00000F02 4801E1                  	add rcx, rsp ; rcx is the address to move
  1309 00000F05 4889F3                  	mov rbx, rsi
  1310 00000F08 48C1E303                	shl rbx, 3
  1311 00000F0C 48F7DB                  	neg rbx
  1312 00000F0F 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1313 00000F12 488B09                  	mov rcx, [rcx]
  1314 00000F15 48890B                  	mov [rbx], rcx
  1315 00000F18 48FFC6                  	inc rsi
  1316 00000F1B EBD3                    	jmp .L_tc_recycle_frame_loop_0fa0
  1317                                  .L_tc_recycle_frame_done_0fa0:	 ; end recycle frame loop
  1318 00000F1D BB03000000              	mov rbx, 3
  1319 00000F22 48C1E303                	shl rbx, 3
  1320 00000F26 48F7DB                  	neg rbx
  1321 00000F29 4801FB                  	add rbx, rdi
  1322 00000F2C 4889DC                  	mov rsp, rbx
  1323 00000F2F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1324 00000F33 FFE3                    	jmp rbx
  1325 00000F35 C9                      	leave
  1326 00000F36 C21800                  	ret 8 * (2 + 1)
  1327                                  .L_lambda_simple_end_0a27:	; new closure is in rax
  1328                                  	assert_closure(rax)
    65 00000F39 803805              <1>  cmp byte [%1], %2
    66 00000F3C 0F8509520000        <1>  jne L_error_incorrect_type
  1329 00000F42 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1330 00000F46 53                      	push rbx
  1331 00000F47 FF7508                  	push RET_ADDR
  1332 00000F4A 488B7D18                	mov rdi, COUNT
  1333 00000F4E 4883C703                	add rdi, 3
  1334 00000F52 48C1E703                	shl rdi, 3
  1335 00000F56 4801EF                  	add rdi, rbp
  1336 00000F59 488B6D00                	mov rbp, OLD_RDP
  1337 00000F5D BE00000000              	mov rsi, 0
  1338                                  .L_tc_recycle_frame_loop_0f9e:	 ; start recycle frame loop
  1339 00000F62 4883FE04                	cmp rsi, 4
  1340 00000F66 7427                    	je .L_tc_recycle_frame_done_0f9e
  1341 00000F68 B903000000              	mov rcx, 3
  1342 00000F6D 4829F1                  	sub rcx, rsi
  1343 00000F70 48C1E103                	shl rcx, 3
  1344 00000F74 4801E1                  	add rcx, rsp ; rcx is the address to move
  1345 00000F77 4889F3                  	mov rbx, rsi
  1346 00000F7A 48C1E303                	shl rbx, 3
  1347 00000F7E 48F7DB                  	neg rbx
  1348 00000F81 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1349 00000F84 488B09                  	mov rcx, [rcx]
  1350 00000F87 48890B                  	mov [rbx], rcx
  1351 00000F8A 48FFC6                  	inc rsi
  1352 00000F8D EBD3                    	jmp .L_tc_recycle_frame_loop_0f9e
  1353                                  .L_tc_recycle_frame_done_0f9e:	 ; end recycle frame loop
  1354 00000F8F BB03000000              	mov rbx, 3
  1355 00000F94 48C1E303                	shl rbx, 3
  1356 00000F98 48F7DB                  	neg rbx
  1357 00000F9B 4801FB                  	add rbx, rdi
  1358 00000F9E 4889DC                  	mov rsp, rbx
  1359 00000FA1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1360 00000FA5 FFE3                    	jmp rbx
  1361 00000FA7 C9                      	leave
  1362 00000FA8 C22000                  	ret AND_KILL_FRAME(2)
  1363                                  .L_lambda_opt_end_03c7:	; new closure is in rax
  1364 00000FAB 48890425[C8010000]      	mov qword [free_var_57], rax
  1365 00000FB3 48B8-                   	mov rax, sob_void
  1365 00000FB5 [0000000000000000] 
  1366                                  
  1367 00000FBD 4889C7                  	mov rdi, rax
  1368 00000FC0 E817390000              	call print_sexpr_if_not_void
  1369                                  
  1370 00000FC5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1371 00000FCA E8FC380000              	call malloc
  1372 00000FCF 50                      	push rax
  1373 00000FD0 BF00000000              	mov rdi, 8 * 0	; new rib
  1374 00000FD5 E8F1380000              	call malloc
  1375 00000FDA 50                      	push rax
  1376 00000FDB BF08000000              	mov rdi, 8 * 1	; extended env
  1377 00000FE0 E8E6380000              	call malloc
  1378 00000FE5 488B7D10                	mov rdi, ENV
  1379 00000FE9 BE00000000              	mov rsi, 0
  1380 00000FEE BA01000000              	mov rdx, 1
  1381                                  .L_lambda_opt_env_loop_03c8:	; ext_env[i + 1] <-- env[i]
  1382 00000FF3 4883FE00                	cmp rsi, 0
  1383 00000FF7 7410                    	je .L_lambda_opt_env_end_03c8
  1384 00000FF9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1385 00000FFD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1386 00001001 48FFC6                  	inc rsi
  1387 00001004 48FFC2                  	inc rdx
  1388 00001007 EBEA                    	jmp .L_lambda_opt_env_loop_03c8
  1389                                  .L_lambda_opt_env_end_03c8:
  1390 00001009 5B                      	pop rbx
  1391 0000100A BE00000000              	mov rsi, 0
  1392                                  .L_lambda_opt_params_loop_03c8:	; copy params
  1393 0000100F 4883FE00                	cmp rsi, 0
  1394 00001013 740E                    	je .L_lambda_opt_params_end_03c8
  1395 00001015 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1396 0000101A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1397 0000101E 48FFC6                  	inc rsi
  1398 00001021 EBEC                    	jmp .L_lambda_opt_params_loop_03c8
  1399                                  .L_lambda_opt_params_end_03c8:
  1400 00001023 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1401 00001026 4889C3                  	mov rbx, rax
  1402 00001029 58                      	pop rax
  1403 0000102A C60005                  	mov byte [rax], T_closure
  1404 0000102D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1405 00001031 48C74009[3E100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_03c8
  1406 00001039 E9AF040000              	jmp .L_lambda_opt_end_03c8
  1407                                  .L_lambda_opt_code_03c8:	; lambda-opt body
  1408 0000103E 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  1409 00001043 4889FB                  	mov rbx, rdi
  1410 00001046 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  1411 0000104A 4883FB00                	cmp rbx, 0
  1412 0000104E 7F45                    	jg .L_lambda_opt_arity_check_more_03c8
  1413                                  .L_lambda_opt_arity_check_exact_03c8:	 ; if params in opt is exact
  1414 00001050 4883EC08                	sub rsp, 8
  1415 00001054 BE00000000              	mov rsi, 0 ; index
  1416                                  .L_lambda_opt_stack_enlarge_loop_03c8:	 ; stack loop enlarge start
  1417 00001059 4883FE04                	cmp rsi, 4
  1418 0000105D 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_03c8
  1419 0000105F 4889F7                  	mov rdi, rsi
  1420 00001062 48FFC7                  	inc rdi
  1421 00001065 48C1E703                	shl rdi, 3
  1422 00001069 4801E7                  	add rdi, rsp
  1423 0000106C 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  1424 0000106F 4883EB08                	sub rbx, 8
  1425 00001073 488B3F                  	mov rdi, [rdi]
  1426 00001076 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  1427 00001079 48FFC6                  	inc rsi
  1428 0000107C EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_03c8
  1429                                  .L_lambda_opt_stack_enlarge_loop_exit_03c8:	 ; end of stack enlarge loop
  1430 0000107E 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  1430 00001083 [01000000]         
  1431 00001087 48C744241002000000      	mov qword [rsp + 2*8], 2
  1432 00001090 E99E000000              	jmp .L_lambda_opt_stack_adjusted_03c8
  1433                                  .L_lambda_opt_arity_check_more_03c8:	 ; if params in opt is more
  1434 00001095 48B8-                   	mov rax, sob_nil
  1434 00001097 [0100000000000000] 
  1435 0000109F 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  1436 000010A2 48FFCE                  	dec rsi
  1437                                  .L_lambda_opt_list_create_loop_03c8:	; start of list creation loop
  1438 000010A5 4883FEFF                	cmp rsi, -1
  1439 000010A9 7422                    	je .L_lambda_opt_list_create_loop_exit_03c8
  1440 000010AB 488D4E04                	lea rcx, [rsi + (3 + 1)]
  1441 000010AF 48C1E103                	shl rcx, 3
  1442 000010B3 4801E1                  	add rcx, rsp
  1443 000010B6 488B09                  	mov rcx, [rcx]
  1444 000010B9 56                      	push rsi ; save params
  1445 000010BA 53                      	push rbx
  1446                                  
  1447 000010BB 50                      	push rax ; cdr
  1448 000010BC 51                      	push rcx ; car
  1449 000010BD 6A02                    	push qword 2 ; push num of args
  1450 000010BF 6A01                    	push qword 1 ; push garbage as env
  1451 000010C1 E88C410000              	call L_code_ptr_cons
  1452                                  
  1453 000010C6 5B                      	pop rbx ; restore params
  1454 000010C7 5E                      	pop rsi
  1455 000010C8 48FFCE                  	dec rsi
  1456 000010CB EBD8                    	jmp .L_lambda_opt_list_create_loop_03c8
  1457                                  .L_lambda_opt_list_create_loop_exit_03c8:	; end of list creation loop
  1458 000010CD 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  1459 000010D2 4883C302                	add rbx, 2
  1460 000010D6 4889DF                  	mov rdi, rbx
  1461 000010D9 48C1E703                	shl rdi,3
  1462 000010DD 4801E7                  	add rdi, rsp
  1463 000010E0 488907                  	mov [rdi], rax
  1464 000010E3 BE00000000              	mov rsi, 0 ;index
  1465                                  .L_lambda_opt_stack_shrink_loop_03c8:	; start of stack shrink loop
  1466 000010E8 4883FE04                	cmp rsi, 4
  1467 000010EC 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_03c8
  1468 000010EE BF03000000              	mov rdi, 3
  1469 000010F3 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  1470 000010F6 4889D9                  	mov rcx, rbx
  1471 000010F9 4829F1                  	sub rcx, rsi
  1472 000010FC 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  1473 000010FF 4889FA                  	mov rdx, rdi
  1474 00001102 48C1E203                	shl rdx, 3
  1475 00001106 4801E2                  	add rdx, rsp
  1476 00001109 48C1E103                	shl rcx, 3
  1477 0000110D 4801E1                  	add rcx, rsp
  1478 00001110 488B12                  	mov rdx, [rdx]
  1479 00001113 488911                  	mov [rcx], rdx
  1480 00001116 48FFC6                  	inc rsi
  1481 00001119 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_03c8
  1482                                  .L_lambda_opt_stack_shrink_loop_exit_03c8:	; end of stack shrink loop
  1483 0000111B 4883EB02                	sub rbx, 2 ; rbx has number of args
  1484 0000111F 4883EB02                	sub rbx, 2
  1485 00001123 48C1E303                	shl rbx, 3
  1486 00001127 4801DC                  	add rsp, rbx
  1487 0000112A 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  1488                                  .L_lambda_opt_stack_adjusted_03c8:
  1489 00001133 C8000000                	enter 0, 0
  1490 00001137 488D0425[17000000]      	lea rax, [23 + L_constants]
  1491 0000113F 50                      	push rax
  1492 00001140 6A01                    	push 1
  1493 00001142 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1494 00001147 E87F370000              	call malloc
  1495 0000114C 50                      	push rax
  1496 0000114D BF10000000              	mov rdi, 8 * 2	; new rib
  1497 00001152 E874370000              	call malloc
  1498 00001157 50                      	push rax
  1499 00001158 BF10000000              	mov rdi, 8 * 2	; extended env
  1500 0000115D E869370000              	call malloc
  1501 00001162 488B7D10                	mov rdi, ENV
  1502 00001166 BE00000000              	mov rsi, 0
  1503 0000116B BA01000000              	mov rdx, 1
  1504                                  .L_lambda_simple_env_loop_0a29:	; ext_env[i + 1] <-- env[i]
  1505 00001170 4883FE01                	cmp rsi, 1
  1506 00001174 7410                    	je .L_lambda_simple_env_end_0a29
  1507 00001176 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1508 0000117A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1509 0000117E 48FFC6                  	inc rsi
  1510 00001181 48FFC2                  	inc rdx
  1511 00001184 EBEA                    	jmp .L_lambda_simple_env_loop_0a29
  1512                                  .L_lambda_simple_env_end_0a29:
  1513 00001186 5B                      	pop rbx
  1514 00001187 BE00000000              	mov rsi, 0
  1515                                  .L_lambda_simple_params_loop_0a29:	; copy params
  1516 0000118C 4883FE02                	cmp rsi, 2
  1517 00001190 740E                    	je .L_lambda_simple_params_end_0a29
  1518 00001192 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1519 00001197 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1520 0000119B 48FFC6                  	inc rsi
  1521 0000119E EBEC                    	jmp .L_lambda_simple_params_loop_0a29
  1522                                  .L_lambda_simple_params_end_0a29:
  1523 000011A0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1524 000011A3 4889C3                  	mov rbx, rax
  1525 000011A6 58                      	pop rax
  1526 000011A7 C60005                  	mov byte [rax], T_closure
  1527 000011AA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1528 000011AE 48C74009[BB110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a29
  1529 000011B6 E9C0020000              	jmp .L_lambda_simple_end_0a29
  1530                                  .L_lambda_simple_code_0a29:	; lambda-simple body
  1531 000011BB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1532 000011C1 740B                    	je .L_lambda_simple_arity_check_ok_0a29
  1533 000011C3 FF742410                	push qword [rsp + 8 * 2]
  1534 000011C7 6A01                    	push 1
  1535 000011C9 E9B6360000              	jmp L_error_incorrect_arity_simple
  1536                                  .L_lambda_simple_arity_check_ok_0a29:
  1537 000011CE C8000000                	enter 0, 0
  1538 000011D2 BF08000000              	mov qword rdi, 8
  1539 000011D7 E8EF360000              	call malloc
  1540 000011DC 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  1541 000011E0 48B8-                   	mov rax, sob_void
  1541 000011E2 [0000000000000000] 
  1542                                  
  1543 000011EA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1544 000011EF E8D7360000              	call malloc
  1545 000011F4 50                      	push rax
  1546 000011F5 BF08000000              	mov rdi, 8 * 1	; new rib
  1547 000011FA E8CC360000              	call malloc
  1548 000011FF 50                      	push rax
  1549 00001200 BF18000000              	mov rdi, 8 * 3	; extended env
  1550 00001205 E8C1360000              	call malloc
  1551 0000120A 488B7D10                	mov rdi, ENV
  1552 0000120E BE00000000              	mov rsi, 0
  1553 00001213 BA01000000              	mov rdx, 1
  1554                                  .L_lambda_simple_env_loop_0a2a:	; ext_env[i + 1] <-- env[i]
  1555 00001218 4883FE02                	cmp rsi, 2
  1556 0000121C 7410                    	je .L_lambda_simple_env_end_0a2a
  1557 0000121E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1558 00001222 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1559 00001226 48FFC6                  	inc rsi
  1560 00001229 48FFC2                  	inc rdx
  1561 0000122C EBEA                    	jmp .L_lambda_simple_env_loop_0a2a
  1562                                  .L_lambda_simple_env_end_0a2a:
  1563 0000122E 5B                      	pop rbx
  1564 0000122F BE00000000              	mov rsi, 0
  1565                                  .L_lambda_simple_params_loop_0a2a:	; copy params
  1566 00001234 4883FE01                	cmp rsi, 1
  1567 00001238 740E                    	je .L_lambda_simple_params_end_0a2a
  1568 0000123A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1569 0000123F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1570 00001243 48FFC6                  	inc rsi
  1571 00001246 EBEC                    	jmp .L_lambda_simple_params_loop_0a2a
  1572                                  .L_lambda_simple_params_end_0a2a:
  1573 00001248 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1574 0000124B 4889C3                  	mov rbx, rax
  1575 0000124E 58                      	pop rax
  1576 0000124F C60005                  	mov byte [rax], T_closure
  1577 00001252 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1578 00001256 48C74009[63120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a2a
  1579 0000125E E980010000              	jmp .L_lambda_simple_end_0a2a
  1580                                  .L_lambda_simple_code_0a2a:	; lambda-simple body
  1581 00001263 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1582 00001269 740B                    	je .L_lambda_simple_arity_check_ok_0a2a
  1583 0000126B FF742410                	push qword [rsp + 8 * 2]
  1584 0000126F 6A01                    	push 1
  1585 00001271 E90E360000              	jmp L_error_incorrect_arity_simple
  1586                                  .L_lambda_simple_arity_check_ok_0a2a:
  1587 00001276 C8000000                	enter 0, 0
  1588 0000127A 488B4520                	mov rax, PARAM(0)
  1589 0000127E 50                      	push rax
  1590 0000127F 6A01                    	push 1
  1591 00001281 488B0425[80000000]      	mov rax, qword [free_var_16]
  1592                                  	assert_closure(rax)
    65 00001289 803805              <1>  cmp byte [%1], %2
    66 0000128C 0F85B94E0000        <1>  jne L_error_incorrect_type
  1593 00001292 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1594 00001296 53                      	push rbx
  1595 00001297 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1596 0000129B FFD3                    	call rbx
  1597 0000129D 50                      	push rax
  1598 0000129E 6A01                    	push 1
  1599 000012A0 488B0425[00000000]      	mov rax, qword [free_var_0]
  1600                                  	assert_closure(rax)
    65 000012A8 803805              <1>  cmp byte [%1], %2
    66 000012AB 0F859A4E0000        <1>  jne L_error_incorrect_type
  1601 000012B1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1602 000012B5 53                      	push rbx
  1603 000012B6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1604 000012BA FFD3                    	call rbx
  1605 000012BC 483D[02000000]          	cmp rax, sob_boolean_false
  1606 000012C2 0F8517010000            	jne .L_or_end_00cb
  1607 000012C8 488B4520                	mov rax, PARAM(0)
  1608 000012CC 50                      	push rax
  1609 000012CD 488B0425[80000000]      	mov rax, qword [free_var_16]
  1610 000012D5 50                      	push rax
  1611 000012D6 6A02                    	push 2
  1612 000012D8 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1613                                  	assert_closure(rax)
    65 000012E0 803805              <1>  cmp byte [%1], %2
    66 000012E3 0F85624E0000        <1>  jne L_error_incorrect_type
  1614 000012E9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1615 000012ED 53                      	push rbx
  1616 000012EE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1617 000012F2 FFD3                    	call rbx
  1618 000012F4 50                      	push rax
  1619 000012F5 488B4510                	mov rax, qword [rbp + 8*2]
  1620 000012F9 488B4008                	mov rax, qword [rax + 8*1]
  1621 000012FD 488B00                  	mov rax, qword [rax + 8*0]
  1622 00001300 50                      	push rax
  1623 00001301 6A02                    	push 2
  1624 00001303 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1625                                  	assert_closure(rax)
    65 0000130B 803805              <1>  cmp byte [%1], %2
    66 0000130E 0F85374E0000        <1>  jne L_error_incorrect_type
  1626 00001314 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1627 00001318 53                      	push rbx
  1628 00001319 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1629 0000131D FFD3                    	call rbx
  1630 0000131F 483D[02000000]          	cmp rax, sob_boolean_false
  1631 00001325 0F84AC000000            	je .L_if_else_090e
  1632 0000132B 488B4520                	mov rax, PARAM(0)
  1633 0000132F 50                      	push rax
  1634 00001330 488B0425[88000000]      	mov rax, qword [free_var_17]
  1635 00001338 50                      	push rax
  1636 00001339 6A02                    	push 2
  1637 0000133B 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1638                                  	assert_closure(rax)
    65 00001343 803805              <1>  cmp byte [%1], %2
    66 00001346 0F85FF4D0000        <1>  jne L_error_incorrect_type
  1639 0000134C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1640 00001350 53                      	push rbx
  1641 00001351 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1642 00001355 FFD3                    	call rbx
  1643 00001357 50                      	push rax
  1644 00001358 6A01                    	push 1
  1645 0000135A 488B4510                	mov rax, qword [rbp + 8*2]
  1646 0000135E 488B00                  	mov rax, qword [rax + 8*0]
  1647 00001361 488B00                  	mov rax, qword [rax + 8*0]
  1648 00001364 488B00                  	mov rax, qword [rax]
  1649                                  	assert_closure(rax)
    65 00001367 803805              <1>  cmp byte [%1], %2
    66 0000136A 0F85DB4D0000        <1>  jne L_error_incorrect_type
  1650 00001370 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1651 00001374 53                      	push rbx
  1652 00001375 FF7508                  	push RET_ADDR
  1653 00001378 488B7D18                	mov rdi, COUNT
  1654 0000137C 4883C703                	add rdi, 3
  1655 00001380 48C1E703                	shl rdi, 3
  1656 00001384 4801EF                  	add rdi, rbp
  1657 00001387 488B6D00                	mov rbp, OLD_RDP
  1658 0000138B BE00000000              	mov rsi, 0
  1659                                  .L_tc_recycle_frame_loop_0fa2:	 ; start recycle frame loop
  1660 00001390 4883FE04                	cmp rsi, 4
  1661 00001394 7427                    	je .L_tc_recycle_frame_done_0fa2
  1662 00001396 B903000000              	mov rcx, 3
  1663 0000139B 4829F1                  	sub rcx, rsi
  1664 0000139E 48C1E103                	shl rcx, 3
  1665 000013A2 4801E1                  	add rcx, rsp ; rcx is the address to move
  1666 000013A5 4889F3                  	mov rbx, rsi
  1667 000013A8 48C1E303                	shl rbx, 3
  1668 000013AC 48F7DB                  	neg rbx
  1669 000013AF 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1670 000013B2 488B09                  	mov rcx, [rcx]
  1671 000013B5 48890B                  	mov [rbx], rcx
  1672 000013B8 48FFC6                  	inc rsi
  1673 000013BB EBD3                    	jmp .L_tc_recycle_frame_loop_0fa2
  1674                                  .L_tc_recycle_frame_done_0fa2:	 ; end recycle frame loop
  1675 000013BD BB03000000              	mov rbx, 3
  1676 000013C2 48C1E303                	shl rbx, 3
  1677 000013C6 48F7DB                  	neg rbx
  1678 000013C9 4801FB                  	add rbx, rdi
  1679 000013CC 4889DC                  	mov rsp, rbx
  1680 000013CF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1681 000013D3 FFE3                    	jmp rbx
  1682 000013D5 EB08                    	jmp .L_if_end_090e
  1683                                  	.L_if_else_090e:
  1684 000013D7 488D0425[02000000]      	lea rax, [2 + L_constants]
  1685                                  	.L_if_end_090e:
  1686                                  .L_or_end_00cb:
  1687 000013DF C9                      	leave
  1688 000013E0 C21800                  	ret 8 * (2 + 1)
  1689                                  .L_lambda_simple_end_0a2a:	; new closure is in rax
  1690 000013E3 50                      	push rax
  1691 000013E4 488B4520                	mov rax, PARAM(0)
  1692 000013E8 8F00                    	pop qword [rax]
  1693 000013EA 48B8-                   	mov rax, sob_void
  1693 000013EC [0000000000000000] 
  1694                                  
  1695 000013F4 488B4510                	mov rax, qword [rbp + 8*2]
  1696 000013F8 488B00                  	mov rax, qword [rax + 8*0]
  1697 000013FB 488B4008                	mov rax, qword [rax + 8*1]
  1698 000013FF 50                      	push rax
  1699 00001400 6A01                    	push 1
  1700 00001402 488B4520                	mov rax, PARAM(0)
  1701 00001406 488B00                  	mov rax, qword [rax]
  1702                                  	assert_closure(rax)
    65 00001409 803805              <1>  cmp byte [%1], %2
    66 0000140C 0F85394D0000        <1>  jne L_error_incorrect_type
  1703 00001412 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1704 00001416 53                      	push rbx
  1705 00001417 FF7508                  	push RET_ADDR
  1706 0000141A 488B7D18                	mov rdi, COUNT
  1707 0000141E 4883C703                	add rdi, 3
  1708 00001422 48C1E703                	shl rdi, 3
  1709 00001426 4801EF                  	add rdi, rbp
  1710 00001429 488B6D00                	mov rbp, OLD_RDP
  1711 0000142D BE00000000              	mov rsi, 0
  1712                                  .L_tc_recycle_frame_loop_0fa3:	 ; start recycle frame loop
  1713 00001432 4883FE04                	cmp rsi, 4
  1714 00001436 7427                    	je .L_tc_recycle_frame_done_0fa3
  1715 00001438 B903000000              	mov rcx, 3
  1716 0000143D 4829F1                  	sub rcx, rsi
  1717 00001440 48C1E103                	shl rcx, 3
  1718 00001444 4801E1                  	add rcx, rsp ; rcx is the address to move
  1719 00001447 4889F3                  	mov rbx, rsi
  1720 0000144A 48C1E303                	shl rbx, 3
  1721 0000144E 48F7DB                  	neg rbx
  1722 00001451 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1723 00001454 488B09                  	mov rcx, [rcx]
  1724 00001457 48890B                  	mov [rbx], rcx
  1725 0000145A 48FFC6                  	inc rsi
  1726 0000145D EBD3                    	jmp .L_tc_recycle_frame_loop_0fa3
  1727                                  .L_tc_recycle_frame_done_0fa3:	 ; end recycle frame loop
  1728 0000145F BB03000000              	mov rbx, 3
  1729 00001464 48C1E303                	shl rbx, 3
  1730 00001468 48F7DB                  	neg rbx
  1731 0000146B 4801FB                  	add rbx, rdi
  1732 0000146E 4889DC                  	mov rsp, rbx
  1733 00001471 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1734 00001475 FFE3                    	jmp rbx
  1735 00001477 C9                      	leave
  1736 00001478 C21800                  	ret 8 * (2 + 1)
  1737                                  .L_lambda_simple_end_0a29:	; new closure is in rax
  1738                                  	assert_closure(rax)
    65 0000147B 803805              <1>  cmp byte [%1], %2
    66 0000147E 0F85C74C0000        <1>  jne L_error_incorrect_type
  1739 00001484 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1740 00001488 53                      	push rbx
  1741 00001489 FF7508                  	push RET_ADDR
  1742 0000148C 488B7D18                	mov rdi, COUNT
  1743 00001490 4883C703                	add rdi, 3
  1744 00001494 48C1E703                	shl rdi, 3
  1745 00001498 4801EF                  	add rdi, rbp
  1746 0000149B 488B6D00                	mov rbp, OLD_RDP
  1747 0000149F BE00000000              	mov rsi, 0
  1748                                  .L_tc_recycle_frame_loop_0fa1:	 ; start recycle frame loop
  1749 000014A4 4883FE04                	cmp rsi, 4
  1750 000014A8 7427                    	je .L_tc_recycle_frame_done_0fa1
  1751 000014AA B903000000              	mov rcx, 3
  1752 000014AF 4829F1                  	sub rcx, rsi
  1753 000014B2 48C1E103                	shl rcx, 3
  1754 000014B6 4801E1                  	add rcx, rsp ; rcx is the address to move
  1755 000014B9 4889F3                  	mov rbx, rsi
  1756 000014BC 48C1E303                	shl rbx, 3
  1757 000014C0 48F7DB                  	neg rbx
  1758 000014C3 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1759 000014C6 488B09                  	mov rcx, [rcx]
  1760 000014C9 48890B                  	mov [rbx], rcx
  1761 000014CC 48FFC6                  	inc rsi
  1762 000014CF EBD3                    	jmp .L_tc_recycle_frame_loop_0fa1
  1763                                  .L_tc_recycle_frame_done_0fa1:	 ; end recycle frame loop
  1764 000014D1 BB03000000              	mov rbx, 3
  1765 000014D6 48C1E303                	shl rbx, 3
  1766 000014DA 48F7DB                  	neg rbx
  1767 000014DD 4801FB                  	add rbx, rdi
  1768 000014E0 4889DC                  	mov rsp, rbx
  1769 000014E3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1770 000014E7 FFE3                    	jmp rbx
  1771 000014E9 C9                      	leave
  1772 000014EA C22000                  	ret AND_KILL_FRAME(2)
  1773                                  .L_lambda_opt_end_03c8:	; new closure is in rax
  1774 000014ED 48890425[D8010000]      	mov qword [free_var_59], rax
  1775 000014F5 48B8-                   	mov rax, sob_void
  1775 000014F7 [0000000000000000] 
  1776                                  
  1777 000014FF 4889C7                  	mov rdi, rax
  1778 00001502 E8D5330000              	call print_sexpr_if_not_void
  1779                                  
  1780 00001507 488D0425[17000000]      	lea rax, [23 + L_constants]
  1781 0000150F 50                      	push rax
  1782 00001510 488D0425[17000000]      	lea rax, [23 + L_constants]
  1783 00001518 50                      	push rax
  1784 00001519 6A02                    	push 2
  1785 0000151B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1786 00001520 E8A6330000              	call malloc
  1787 00001525 50                      	push rax
  1788 00001526 BF00000000              	mov rdi, 8 * 0	; new rib
  1789 0000152B E89B330000              	call malloc
  1790 00001530 50                      	push rax
  1791 00001531 BF08000000              	mov rdi, 8 * 1	; extended env
  1792 00001536 E890330000              	call malloc
  1793 0000153B 488B7D10                	mov rdi, ENV
  1794 0000153F BE00000000              	mov rsi, 0
  1795 00001544 BA01000000              	mov rdx, 1
  1796                                  .L_lambda_simple_env_loop_0a2b:	; ext_env[i + 1] <-- env[i]
  1797 00001549 4883FE00                	cmp rsi, 0
  1798 0000154D 7410                    	je .L_lambda_simple_env_end_0a2b
  1799 0000154F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1800 00001553 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1801 00001557 48FFC6                  	inc rsi
  1802 0000155A 48FFC2                  	inc rdx
  1803 0000155D EBEA                    	jmp .L_lambda_simple_env_loop_0a2b
  1804                                  .L_lambda_simple_env_end_0a2b:
  1805 0000155F 5B                      	pop rbx
  1806 00001560 BE00000000              	mov rsi, 0
  1807                                  .L_lambda_simple_params_loop_0a2b:	; copy params
  1808 00001565 4883FE00                	cmp rsi, 0
  1809 00001569 740E                    	je .L_lambda_simple_params_end_0a2b
  1810 0000156B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1811 00001570 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1812 00001574 48FFC6                  	inc rsi
  1813 00001577 EBEC                    	jmp .L_lambda_simple_params_loop_0a2b
  1814                                  .L_lambda_simple_params_end_0a2b:
  1815 00001579 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1816 0000157C 4889C3                  	mov rbx, rax
  1817 0000157F 58                      	pop rax
  1818 00001580 C60005                  	mov byte [rax], T_closure
  1819 00001583 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1820 00001587 48C74009[94150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a2b
  1821 0000158F E988060000              	jmp .L_lambda_simple_end_0a2b
  1822                                  .L_lambda_simple_code_0a2b:	; lambda-simple body
  1823 00001594 48837C241002            	cmp qword [rsp + 8 * 2], 2
  1824 0000159A 740B                    	je .L_lambda_simple_arity_check_ok_0a2b
  1825 0000159C FF742410                	push qword [rsp + 8 * 2]
  1826 000015A0 6A02                    	push 2
  1827 000015A2 E9DD320000              	jmp L_error_incorrect_arity_simple
  1828                                  .L_lambda_simple_arity_check_ok_0a2b:
  1829 000015A7 C8000000                	enter 0, 0
  1830 000015AB BF08000000              	mov qword rdi, 8
  1831 000015B0 E816330000              	call malloc
  1832 000015B5 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  1833 000015B9 48B8-                   	mov rax, sob_void
  1833 000015BB [0000000000000000] 
  1834                                  
  1835 000015C3 BF08000000              	mov qword rdi, 8
  1836 000015C8 E8FE320000              	call malloc
  1837 000015CD 48894528                	mov qword [rbp + 8*(4 + 1)], rax
  1838 000015D1 48B8-                   	mov rax, sob_void
  1838 000015D3 [0000000000000000] 
  1839                                  
  1840 000015DB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1841 000015E0 E8E6320000              	call malloc
  1842 000015E5 50                      	push rax
  1843 000015E6 BF10000000              	mov rdi, 8 * 2	; new rib
  1844 000015EB E8DB320000              	call malloc
  1845 000015F0 50                      	push rax
  1846 000015F1 BF10000000              	mov rdi, 8 * 2	; extended env
  1847 000015F6 E8D0320000              	call malloc
  1848 000015FB 488B7D10                	mov rdi, ENV
  1849 000015FF BE00000000              	mov rsi, 0
  1850 00001604 BA01000000              	mov rdx, 1
  1851                                  .L_lambda_simple_env_loop_0a2c:	; ext_env[i + 1] <-- env[i]
  1852 00001609 4883FE01                	cmp rsi, 1
  1853 0000160D 7410                    	je .L_lambda_simple_env_end_0a2c
  1854 0000160F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1855 00001613 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1856 00001617 48FFC6                  	inc rsi
  1857 0000161A 48FFC2                  	inc rdx
  1858 0000161D EBEA                    	jmp .L_lambda_simple_env_loop_0a2c
  1859                                  .L_lambda_simple_env_end_0a2c:
  1860 0000161F 5B                      	pop rbx
  1861 00001620 BE00000000              	mov rsi, 0
  1862                                  .L_lambda_simple_params_loop_0a2c:	; copy params
  1863 00001625 4883FE02                	cmp rsi, 2
  1864 00001629 740E                    	je .L_lambda_simple_params_end_0a2c
  1865 0000162B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1866 00001630 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1867 00001634 48FFC6                  	inc rsi
  1868 00001637 EBEC                    	jmp .L_lambda_simple_params_loop_0a2c
  1869                                  .L_lambda_simple_params_end_0a2c:
  1870 00001639 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1871 0000163C 4889C3                  	mov rbx, rax
  1872 0000163F 58                      	pop rax
  1873 00001640 C60005                  	mov byte [rax], T_closure
  1874 00001643 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1875 00001647 48C74009[54160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a2c
  1876 0000164F E957010000              	jmp .L_lambda_simple_end_0a2c
  1877                                  .L_lambda_simple_code_0a2c:	; lambda-simple body
  1878 00001654 48837C241002            	cmp qword [rsp + 8 * 2], 2
  1879 0000165A 740B                    	je .L_lambda_simple_arity_check_ok_0a2c
  1880 0000165C FF742410                	push qword [rsp + 8 * 2]
  1881 00001660 6A02                    	push 2
  1882 00001662 E91D320000              	jmp L_error_incorrect_arity_simple
  1883                                  .L_lambda_simple_arity_check_ok_0a2c:
  1884 00001667 C8000000                	enter 0, 0
  1885 0000166B 488B4528                	mov rax, PARAM(1)
  1886 0000166F 50                      	push rax
  1887 00001670 6A01                    	push 1
  1888 00001672 488B0425[00000000]      	mov rax, qword [free_var_0]
  1889                                  	assert_closure(rax)
    65 0000167A 803805              <1>  cmp byte [%1], %2
    66 0000167D 0F85C84A0000        <1>  jne L_error_incorrect_type
  1890 00001683 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1891 00001687 53                      	push rbx
  1892 00001688 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1893 0000168C FFD3                    	call rbx
  1894 0000168E 483D[02000000]          	cmp rax, sob_boolean_false
  1895 00001694 740D                    	je .L_if_else_090f
  1896 00001696 488D0425[01000000]      	lea rax, [1 + L_constants]
  1897 0000169E E904010000              	jmp .L_if_end_090f
  1898                                  	.L_if_else_090f:
  1899 000016A3 488B4528                	mov rax, PARAM(1)
  1900 000016A7 50                      	push rax
  1901 000016A8 6A01                    	push 1
  1902 000016AA 488B0425[88000000]      	mov rax, qword [free_var_17]
  1903                                  	assert_closure(rax)
    65 000016B2 803805              <1>  cmp byte [%1], %2
    66 000016B5 0F85904A0000        <1>  jne L_error_incorrect_type
  1904 000016BB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1905 000016BF 53                      	push rbx
  1906 000016C0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1907 000016C4 FFD3                    	call rbx
  1908 000016C6 50                      	push rax
  1909 000016C7 488B4520                	mov rax, PARAM(0)
  1910 000016CB 50                      	push rax
  1911 000016CC 6A02                    	push 2
  1912 000016CE 488B4510                	mov rax, qword [rbp + 8*2]
  1913 000016D2 488B00                  	mov rax, qword [rax + 8*0]
  1914 000016D5 488B00                  	mov rax, qword [rax + 8*0]
  1915 000016D8 488B00                  	mov rax, qword [rax]
  1916                                  	assert_closure(rax)
    65 000016DB 803805              <1>  cmp byte [%1], %2
    66 000016DE 0F85674A0000        <1>  jne L_error_incorrect_type
  1917 000016E4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1918 000016E8 53                      	push rbx
  1919 000016E9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1920 000016ED FFD3                    	call rbx
  1921 000016EF 50                      	push rax
  1922 000016F0 488B4528                	mov rax, PARAM(1)
  1923 000016F4 50                      	push rax
  1924 000016F5 6A01                    	push 1
  1925 000016F7 488B0425[80000000]      	mov rax, qword [free_var_16]
  1926                                  	assert_closure(rax)
    65 000016FF 803805              <1>  cmp byte [%1], %2
    66 00001702 0F85434A0000        <1>  jne L_error_incorrect_type
  1927 00001708 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1928 0000170C 53                      	push rbx
  1929 0000170D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1930 00001711 FFD3                    	call rbx
  1931 00001713 50                      	push rax
  1932 00001714 6A01                    	push 1
  1933 00001716 488B4520                	mov rax, PARAM(0)
  1934                                  	assert_closure(rax)
    65 0000171A 803805              <1>  cmp byte [%1], %2
    66 0000171D 0F85284A0000        <1>  jne L_error_incorrect_type
  1935 00001723 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1936 00001727 53                      	push rbx
  1937 00001728 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1938 0000172C FFD3                    	call rbx
  1939 0000172E 50                      	push rax
  1940 0000172F 6A02                    	push 2
  1941 00001731 488B0425[68000000]      	mov rax, qword [free_var_13]
  1942                                  	assert_closure(rax)
    65 00001739 803805              <1>  cmp byte [%1], %2
    66 0000173C 0F85094A0000        <1>  jne L_error_incorrect_type
  1943 00001742 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1944 00001746 53                      	push rbx
  1945 00001747 FF7508                  	push RET_ADDR
  1946 0000174A 488B7D18                	mov rdi, COUNT
  1947 0000174E 4883C703                	add rdi, 3
  1948 00001752 48C1E703                	shl rdi, 3
  1949 00001756 4801EF                  	add rdi, rbp
  1950 00001759 488B6D00                	mov rbp, OLD_RDP
  1951 0000175D BE00000000              	mov rsi, 0
  1952                                  .L_tc_recycle_frame_loop_0fa4:	 ; start recycle frame loop
  1953 00001762 4883FE05                	cmp rsi, 5
  1954 00001766 7427                    	je .L_tc_recycle_frame_done_0fa4
  1955 00001768 B904000000              	mov rcx, 4
  1956 0000176D 4829F1                  	sub rcx, rsi
  1957 00001770 48C1E103                	shl rcx, 3
  1958 00001774 4801E1                  	add rcx, rsp ; rcx is the address to move
  1959 00001777 4889F3                  	mov rbx, rsi
  1960 0000177A 48C1E303                	shl rbx, 3
  1961 0000177E 48F7DB                  	neg rbx
  1962 00001781 4801FB                  	add rbx, rdi ;rbx is the address to move to
  1963 00001784 488B09                  	mov rcx, [rcx]
  1964 00001787 48890B                  	mov [rbx], rcx
  1965 0000178A 48FFC6                  	inc rsi
  1966 0000178D EBD3                    	jmp .L_tc_recycle_frame_loop_0fa4
  1967                                  .L_tc_recycle_frame_done_0fa4:	 ; end recycle frame loop
  1968 0000178F BB04000000              	mov rbx, 4
  1969 00001794 48C1E303                	shl rbx, 3
  1970 00001798 48F7DB                  	neg rbx
  1971 0000179B 4801FB                  	add rbx, rdi
  1972 0000179E 4889DC                  	mov rsp, rbx
  1973 000017A1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1974 000017A5 FFE3                    	jmp rbx
  1975                                  	.L_if_end_090f:
  1976 000017A7 C9                      	leave
  1977 000017A8 C22000                  	ret 8 * (2 + 2)
  1978                                  .L_lambda_simple_end_0a2c:	; new closure is in rax
  1979 000017AB 50                      	push rax
  1980 000017AC 488B4520                	mov rax, PARAM(0)
  1981 000017B0 8F00                    	pop qword [rax]
  1982 000017B2 48B8-                   	mov rax, sob_void
  1982 000017B4 [0000000000000000] 
  1983                                  
  1984 000017BC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1985 000017C1 E805310000              	call malloc
  1986 000017C6 50                      	push rax
  1987 000017C7 BF10000000              	mov rdi, 8 * 2	; new rib
  1988 000017CC E8FA300000              	call malloc
  1989 000017D1 50                      	push rax
  1990 000017D2 BF10000000              	mov rdi, 8 * 2	; extended env
  1991 000017D7 E8EF300000              	call malloc
  1992 000017DC 488B7D10                	mov rdi, ENV
  1993 000017E0 BE00000000              	mov rsi, 0
  1994 000017E5 BA01000000              	mov rdx, 1
  1995                                  .L_lambda_simple_env_loop_0a2d:	; ext_env[i + 1] <-- env[i]
  1996 000017EA 4883FE01                	cmp rsi, 1
  1997 000017EE 7410                    	je .L_lambda_simple_env_end_0a2d
  1998 000017F0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1999 000017F4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2000 000017F8 48FFC6                  	inc rsi
  2001 000017FB 48FFC2                  	inc rdx
  2002 000017FE EBEA                    	jmp .L_lambda_simple_env_loop_0a2d
  2003                                  .L_lambda_simple_env_end_0a2d:
  2004 00001800 5B                      	pop rbx
  2005 00001801 BE00000000              	mov rsi, 0
  2006                                  .L_lambda_simple_params_loop_0a2d:	; copy params
  2007 00001806 4883FE02                	cmp rsi, 2
  2008 0000180A 740E                    	je .L_lambda_simple_params_end_0a2d
  2009 0000180C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2010 00001811 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2011 00001815 48FFC6                  	inc rsi
  2012 00001818 EBEC                    	jmp .L_lambda_simple_params_loop_0a2d
  2013                                  .L_lambda_simple_params_end_0a2d:
  2014 0000181A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2015 0000181D 4889C3                  	mov rbx, rax
  2016 00001820 58                      	pop rax
  2017 00001821 C60005                  	mov byte [rax], T_closure
  2018 00001824 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2019 00001828 48C74009[35180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a2d
  2020 00001830 E99C010000              	jmp .L_lambda_simple_end_0a2d
  2021                                  .L_lambda_simple_code_0a2d:	; lambda-simple body
  2022 00001835 48837C241002            	cmp qword [rsp + 8 * 2], 2
  2023 0000183B 740B                    	je .L_lambda_simple_arity_check_ok_0a2d
  2024 0000183D FF742410                	push qword [rsp + 8 * 2]
  2025 00001841 6A02                    	push 2
  2026 00001843 E93C300000              	jmp L_error_incorrect_arity_simple
  2027                                  .L_lambda_simple_arity_check_ok_0a2d:
  2028 00001848 C8000000                	enter 0, 0
  2029 0000184C 488B4528                	mov rax, PARAM(1)
  2030 00001850 50                      	push rax
  2031 00001851 6A01                    	push 1
  2032 00001853 488B0425[80000000]      	mov rax, qword [free_var_16]
  2033                                  	assert_closure(rax)
    65 0000185B 803805              <1>  cmp byte [%1], %2
    66 0000185E 0F85E7480000        <1>  jne L_error_incorrect_type
  2034 00001864 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2035 00001868 53                      	push rbx
  2036 00001869 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2037 0000186D FFD3                    	call rbx
  2038 0000186F 50                      	push rax
  2039 00001870 6A01                    	push 1
  2040 00001872 488B0425[00000000]      	mov rax, qword [free_var_0]
  2041                                  	assert_closure(rax)
    65 0000187A 803805              <1>  cmp byte [%1], %2
    66 0000187D 0F85C8480000        <1>  jne L_error_incorrect_type
  2042 00001883 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2043 00001887 53                      	push rbx
  2044 00001888 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2045 0000188C FFD3                    	call rbx
  2046 0000188E 483D[02000000]          	cmp rax, sob_boolean_false
  2047 00001894 740D                    	je .L_if_else_0910
  2048 00001896 488D0425[01000000]      	lea rax, [1 + L_constants]
  2049 0000189E E92A010000              	jmp .L_if_end_0910
  2050                                  	.L_if_else_0910:
  2051 000018A3 488B4528                	mov rax, PARAM(1)
  2052 000018A7 50                      	push rax
  2053 000018A8 488B0425[88000000]      	mov rax, qword [free_var_17]
  2054 000018B0 50                      	push rax
  2055 000018B1 6A02                    	push 2
  2056 000018B3 488B4510                	mov rax, qword [rbp + 8*2]
  2057 000018B7 488B00                  	mov rax, qword [rax + 8*0]
  2058 000018BA 488B00                  	mov rax, qword [rax + 8*0]
  2059 000018BD 488B00                  	mov rax, qword [rax]
  2060                                  	assert_closure(rax)
    65 000018C0 803805              <1>  cmp byte [%1], %2
    66 000018C3 0F8582480000        <1>  jne L_error_incorrect_type
  2061 000018C9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2062 000018CD 53                      	push rbx
  2063 000018CE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2064 000018D2 FFD3                    	call rbx
  2065 000018D4 50                      	push rax
  2066 000018D5 488B4520                	mov rax, PARAM(0)
  2067 000018D9 50                      	push rax
  2068 000018DA 6A02                    	push 2
  2069 000018DC 488B4510                	mov rax, qword [rbp + 8*2]
  2070 000018E0 488B00                  	mov rax, qword [rax + 8*0]
  2071 000018E3 488B4008                	mov rax, qword [rax + 8*1]
  2072 000018E7 488B00                  	mov rax, qword [rax]
  2073                                  	assert_closure(rax)
    65 000018EA 803805              <1>  cmp byte [%1], %2
    66 000018ED 0F8558480000        <1>  jne L_error_incorrect_type
  2074 000018F3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2075 000018F7 53                      	push rbx
  2076 000018F8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2077 000018FC FFD3                    	call rbx
  2078 000018FE 50                      	push rax
  2079 000018FF 488B4528                	mov rax, PARAM(1)
  2080 00001903 50                      	push rax
  2081 00001904 488B0425[80000000]      	mov rax, qword [free_var_16]
  2082 0000190C 50                      	push rax
  2083 0000190D 6A02                    	push 2
  2084 0000190F 488B4510                	mov rax, qword [rbp + 8*2]
  2085 00001913 488B00                  	mov rax, qword [rax + 8*0]
  2086 00001916 488B00                  	mov rax, qword [rax + 8*0]
  2087 00001919 488B00                  	mov rax, qword [rax]
  2088                                  	assert_closure(rax)
    65 0000191C 803805              <1>  cmp byte [%1], %2
    66 0000191F 0F8526480000        <1>  jne L_error_incorrect_type
  2089 00001925 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2090 00001929 53                      	push rbx
  2091 0000192A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2092 0000192E FFD3                    	call rbx
  2093 00001930 50                      	push rax
  2094 00001931 488B4520                	mov rax, PARAM(0)
  2095 00001935 50                      	push rax
  2096 00001936 6A02                    	push 2
  2097 00001938 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2098                                  	assert_closure(rax)
    65 00001940 803805              <1>  cmp byte [%1], %2
    66 00001943 0F8502480000        <1>  jne L_error_incorrect_type
  2099 00001949 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2100 0000194D 53                      	push rbx
  2101 0000194E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2102 00001952 FFD3                    	call rbx
  2103 00001954 50                      	push rax
  2104 00001955 6A02                    	push 2
  2105 00001957 488B0425[68000000]      	mov rax, qword [free_var_13]
  2106                                  	assert_closure(rax)
    65 0000195F 803805              <1>  cmp byte [%1], %2
    66 00001962 0F85E3470000        <1>  jne L_error_incorrect_type
  2107 00001968 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2108 0000196C 53                      	push rbx
  2109 0000196D FF7508                  	push RET_ADDR
  2110 00001970 488B7D18                	mov rdi, COUNT
  2111 00001974 4883C703                	add rdi, 3
  2112 00001978 48C1E703                	shl rdi, 3
  2113 0000197C 4801EF                  	add rdi, rbp
  2114 0000197F 488B6D00                	mov rbp, OLD_RDP
  2115 00001983 BE00000000              	mov rsi, 0
  2116                                  .L_tc_recycle_frame_loop_0fa5:	 ; start recycle frame loop
  2117 00001988 4883FE05                	cmp rsi, 5
  2118 0000198C 7427                    	je .L_tc_recycle_frame_done_0fa5
  2119 0000198E B904000000              	mov rcx, 4
  2120 00001993 4829F1                  	sub rcx, rsi
  2121 00001996 48C1E103                	shl rcx, 3
  2122 0000199A 4801E1                  	add rcx, rsp ; rcx is the address to move
  2123 0000199D 4889F3                  	mov rbx, rsi
  2124 000019A0 48C1E303                	shl rbx, 3
  2125 000019A4 48F7DB                  	neg rbx
  2126 000019A7 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2127 000019AA 488B09                  	mov rcx, [rcx]
  2128 000019AD 48890B                  	mov [rbx], rcx
  2129 000019B0 48FFC6                  	inc rsi
  2130 000019B3 EBD3                    	jmp .L_tc_recycle_frame_loop_0fa5
  2131                                  .L_tc_recycle_frame_done_0fa5:	 ; end recycle frame loop
  2132 000019B5 BB04000000              	mov rbx, 4
  2133 000019BA 48C1E303                	shl rbx, 3
  2134 000019BE 48F7DB                  	neg rbx
  2135 000019C1 4801FB                  	add rbx, rdi
  2136 000019C4 4889DC                  	mov rsp, rbx
  2137 000019C7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2138 000019CB FFE3                    	jmp rbx
  2139                                  	.L_if_end_0910:
  2140 000019CD C9                      	leave
  2141 000019CE C22000                  	ret 8 * (2 + 2)
  2142                                  .L_lambda_simple_end_0a2d:	; new closure is in rax
  2143 000019D1 50                      	push rax
  2144 000019D2 488B4528                	mov rax, PARAM(1)
  2145 000019D6 8F00                    	pop qword [rax]
  2146 000019D8 48B8-                   	mov rax, sob_void
  2146 000019DA [0000000000000000] 
  2147                                  
  2148 000019E2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2149 000019E7 E8DF2E0000              	call malloc
  2150 000019EC 50                      	push rax
  2151 000019ED BF10000000              	mov rdi, 8 * 2	; new rib
  2152 000019F2 E8D42E0000              	call malloc
  2153 000019F7 50                      	push rax
  2154 000019F8 BF10000000              	mov rdi, 8 * 2	; extended env
  2155 000019FD E8C92E0000              	call malloc
  2156 00001A02 488B7D10                	mov rdi, ENV
  2157 00001A06 BE00000000              	mov rsi, 0
  2158 00001A0B BA01000000              	mov rdx, 1
  2159                                  .L_lambda_opt_env_loop_03c9:	; ext_env[i + 1] <-- env[i]
  2160 00001A10 4883FE01                	cmp rsi, 1
  2161 00001A14 7410                    	je .L_lambda_opt_env_end_03c9
  2162 00001A16 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2163 00001A1A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2164 00001A1E 48FFC6                  	inc rsi
  2165 00001A21 48FFC2                  	inc rdx
  2166 00001A24 EBEA                    	jmp .L_lambda_opt_env_loop_03c9
  2167                                  .L_lambda_opt_env_end_03c9:
  2168 00001A26 5B                      	pop rbx
  2169 00001A27 BE00000000              	mov rsi, 0
  2170                                  .L_lambda_opt_params_loop_03c9:	; copy params
  2171 00001A2C 4883FE02                	cmp rsi, 2
  2172 00001A30 740E                    	je .L_lambda_opt_params_end_03c9
  2173 00001A32 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2174 00001A37 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2175 00001A3B 48FFC6                  	inc rsi
  2176 00001A3E EBEC                    	jmp .L_lambda_opt_params_loop_03c9
  2177                                  .L_lambda_opt_params_end_03c9:
  2178 00001A40 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2179 00001A43 4889C3                  	mov rbx, rax
  2180 00001A46 58                      	pop rax
  2181 00001A47 C60005                  	mov byte [rax], T_closure
  2182 00001A4A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2183 00001A4E 48C74009[5B1A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_03c9
  2184 00001A56 E9BD010000              	jmp .L_lambda_opt_end_03c9
  2185                                  .L_lambda_opt_code_03c9:	; lambda-opt body
  2186 00001A5B 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  2187 00001A60 4889FB                  	mov rbx, rdi
  2188 00001A63 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  2189 00001A67 4883FB00                	cmp rbx, 0
  2190 00001A6B 7F45                    	jg .L_lambda_opt_arity_check_more_03c9
  2191                                  .L_lambda_opt_arity_check_exact_03c9:	 ; if params in opt is exact
  2192 00001A6D 4883EC08                	sub rsp, 8
  2193 00001A71 BE00000000              	mov rsi, 0 ; index
  2194                                  .L_lambda_opt_stack_enlarge_loop_03c9:	 ; stack loop enlarge start
  2195 00001A76 4883FE04                	cmp rsi, 4
  2196 00001A7A 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_03c9
  2197 00001A7C 4889F7                  	mov rdi, rsi
  2198 00001A7F 48FFC7                  	inc rdi
  2199 00001A82 48C1E703                	shl rdi, 3
  2200 00001A86 4801E7                  	add rdi, rsp
  2201 00001A89 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  2202 00001A8C 4883EB08                	sub rbx, 8
  2203 00001A90 488B3F                  	mov rdi, [rdi]
  2204 00001A93 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  2205 00001A96 48FFC6                  	inc rsi
  2206 00001A99 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_03c9
  2207                                  .L_lambda_opt_stack_enlarge_loop_exit_03c9:	 ; end of stack enlarge loop
  2208 00001A9B 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  2208 00001AA0 [01000000]         
  2209 00001AA4 48C744241002000000      	mov qword [rsp + 2*8], 2
  2210 00001AAD E99E000000              	jmp .L_lambda_opt_stack_adjusted_03c9
  2211                                  .L_lambda_opt_arity_check_more_03c9:	 ; if params in opt is more
  2212 00001AB2 48B8-                   	mov rax, sob_nil
  2212 00001AB4 [0100000000000000] 
  2213 00001ABC 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  2214 00001ABF 48FFCE                  	dec rsi
  2215                                  .L_lambda_opt_list_create_loop_03c9:	; start of list creation loop
  2216 00001AC2 4883FEFF                	cmp rsi, -1
  2217 00001AC6 7422                    	je .L_lambda_opt_list_create_loop_exit_03c9
  2218 00001AC8 488D4E04                	lea rcx, [rsi + (3 + 1)]
  2219 00001ACC 48C1E103                	shl rcx, 3
  2220 00001AD0 4801E1                  	add rcx, rsp
  2221 00001AD3 488B09                  	mov rcx, [rcx]
  2222 00001AD6 56                      	push rsi ; save params
  2223 00001AD7 53                      	push rbx
  2224                                  
  2225 00001AD8 50                      	push rax ; cdr
  2226 00001AD9 51                      	push rcx ; car
  2227 00001ADA 6A02                    	push qword 2 ; push num of args
  2228 00001ADC 6A01                    	push qword 1 ; push garbage as env
  2229 00001ADE E86F370000              	call L_code_ptr_cons
  2230                                  
  2231 00001AE3 5B                      	pop rbx ; restore params
  2232 00001AE4 5E                      	pop rsi
  2233 00001AE5 48FFCE                  	dec rsi
  2234 00001AE8 EBD8                    	jmp .L_lambda_opt_list_create_loop_03c9
  2235                                  .L_lambda_opt_list_create_loop_exit_03c9:	; end of list creation loop
  2236 00001AEA 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  2237 00001AEF 4883C302                	add rbx, 2
  2238 00001AF3 4889DF                  	mov rdi, rbx
  2239 00001AF6 48C1E703                	shl rdi,3
  2240 00001AFA 4801E7                  	add rdi, rsp
  2241 00001AFD 488907                  	mov [rdi], rax
  2242 00001B00 BE00000000              	mov rsi, 0 ;index
  2243                                  .L_lambda_opt_stack_shrink_loop_03c9:	; start of stack shrink loop
  2244 00001B05 4883FE04                	cmp rsi, 4
  2245 00001B09 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_03c9
  2246 00001B0B BF03000000              	mov rdi, 3
  2247 00001B10 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  2248 00001B13 4889D9                  	mov rcx, rbx
  2249 00001B16 4829F1                  	sub rcx, rsi
  2250 00001B19 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  2251 00001B1C 4889FA                  	mov rdx, rdi
  2252 00001B1F 48C1E203                	shl rdx, 3
  2253 00001B23 4801E2                  	add rdx, rsp
  2254 00001B26 48C1E103                	shl rcx, 3
  2255 00001B2A 4801E1                  	add rcx, rsp
  2256 00001B2D 488B12                  	mov rdx, [rdx]
  2257 00001B30 488911                  	mov [rcx], rdx
  2258 00001B33 48FFC6                  	inc rsi
  2259 00001B36 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_03c9
  2260                                  .L_lambda_opt_stack_shrink_loop_exit_03c9:	; end of stack shrink loop
  2261 00001B38 4883EB02                	sub rbx, 2 ; rbx has number of args
  2262 00001B3C 4883EB02                	sub rbx, 2
  2263 00001B40 48C1E303                	shl rbx, 3
  2264 00001B44 4801DC                  	add rsp, rbx
  2265 00001B47 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  2266                                  .L_lambda_opt_stack_adjusted_03c9:
  2267 00001B50 C8000000                	enter 0, 0
  2268 00001B54 488B4528                	mov rax, PARAM(1)
  2269 00001B58 50                      	push rax
  2270 00001B59 6A01                    	push 1
  2271 00001B5B 488B0425[00000000]      	mov rax, qword [free_var_0]
  2272                                  	assert_closure(rax)
    65 00001B63 803805              <1>  cmp byte [%1], %2
    66 00001B66 0F85DF450000        <1>  jne L_error_incorrect_type
  2273 00001B6C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2274 00001B70 53                      	push rbx
  2275 00001B71 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2276 00001B75 FFD3                    	call rbx
  2277 00001B77 483D[02000000]          	cmp rax, sob_boolean_false
  2278 00001B7D 740D                    	je .L_if_else_0911
  2279 00001B7F 488D0425[01000000]      	lea rax, [1 + L_constants]
  2280 00001B87 E988000000              	jmp .L_if_end_0911
  2281                                  	.L_if_else_0911:
  2282 00001B8C 488B4528                	mov rax, PARAM(1)
  2283 00001B90 50                      	push rax
  2284 00001B91 488B4520                	mov rax, PARAM(0)
  2285 00001B95 50                      	push rax
  2286 00001B96 6A02                    	push 2
  2287 00001B98 488B4510                	mov rax, qword [rbp + 8*2]
  2288 00001B9C 488B00                  	mov rax, qword [rax + 8*0]
  2289 00001B9F 488B4008                	mov rax, qword [rax + 8*1]
  2290 00001BA3 488B00                  	mov rax, qword [rax]
  2291                                  	assert_closure(rax)
    65 00001BA6 803805              <1>  cmp byte [%1], %2
    66 00001BA9 0F859C450000        <1>  jne L_error_incorrect_type
  2292 00001BAF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2293 00001BB3 53                      	push rbx
  2294 00001BB4 FF7508                  	push RET_ADDR
  2295 00001BB7 488B7D18                	mov rdi, COUNT
  2296 00001BBB 4883C703                	add rdi, 3
  2297 00001BBF 48C1E703                	shl rdi, 3
  2298 00001BC3 4801EF                  	add rdi, rbp
  2299 00001BC6 488B6D00                	mov rbp, OLD_RDP
  2300 00001BCA BE00000000              	mov rsi, 0
  2301                                  .L_tc_recycle_frame_loop_0fa6:	 ; start recycle frame loop
  2302 00001BCF 4883FE05                	cmp rsi, 5
  2303 00001BD3 7427                    	je .L_tc_recycle_frame_done_0fa6
  2304 00001BD5 B904000000              	mov rcx, 4
  2305 00001BDA 4829F1                  	sub rcx, rsi
  2306 00001BDD 48C1E103                	shl rcx, 3
  2307 00001BE1 4801E1                  	add rcx, rsp ; rcx is the address to move
  2308 00001BE4 4889F3                  	mov rbx, rsi
  2309 00001BE7 48C1E303                	shl rbx, 3
  2310 00001BEB 48F7DB                  	neg rbx
  2311 00001BEE 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2312 00001BF1 488B09                  	mov rcx, [rcx]
  2313 00001BF4 48890B                  	mov [rbx], rcx
  2314 00001BF7 48FFC6                  	inc rsi
  2315 00001BFA EBD3                    	jmp .L_tc_recycle_frame_loop_0fa6
  2316                                  .L_tc_recycle_frame_done_0fa6:	 ; end recycle frame loop
  2317 00001BFC BB04000000              	mov rbx, 4
  2318 00001C01 48C1E303                	shl rbx, 3
  2319 00001C05 48F7DB                  	neg rbx
  2320 00001C08 4801FB                  	add rbx, rdi
  2321 00001C0B 4889DC                  	mov rsp, rbx
  2322 00001C0E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2323 00001C12 FFE3                    	jmp rbx
  2324                                  	.L_if_end_0911:
  2325 00001C14 C9                      	leave
  2326 00001C15 C22000                  	ret AND_KILL_FRAME(2)
  2327                                  .L_lambda_opt_end_03c9:	; new closure is in rax
  2328 00001C18 C9                      	leave
  2329 00001C19 C22000                  	ret 8 * (2 + 2)
  2330                                  .L_lambda_simple_end_0a2b:	; new closure is in rax
  2331                                  	assert_closure(rax)
    65 00001C1C 803805              <1>  cmp byte [%1], %2
    66 00001C1F 0F8526450000        <1>  jne L_error_incorrect_type
  2332 00001C25 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2333 00001C29 53                      	push rbx
  2334 00001C2A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2335 00001C2E FFD3                    	call rbx
  2336 00001C30 48890425[D0010000]      	mov qword [free_var_58], rax
  2337 00001C38 48B8-                   	mov rax, sob_void
  2337 00001C3A [0000000000000000] 
  2338                                  
  2339 00001C42 4889C7                  	mov rdi, rax
  2340 00001C45 E8922C0000              	call print_sexpr_if_not_void
  2341                                  
  2342 00001C4A 488D0425[17000000]      	lea rax, [23 + L_constants]
  2343 00001C52 50                      	push rax
  2344 00001C53 6A01                    	push 1
  2345 00001C55 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2346 00001C5A E86C2C0000              	call malloc
  2347 00001C5F 50                      	push rax
  2348 00001C60 BF00000000              	mov rdi, 8 * 0	; new rib
  2349 00001C65 E8612C0000              	call malloc
  2350 00001C6A 50                      	push rax
  2351 00001C6B BF08000000              	mov rdi, 8 * 1	; extended env
  2352 00001C70 E8562C0000              	call malloc
  2353 00001C75 488B7D10                	mov rdi, ENV
  2354 00001C79 BE00000000              	mov rsi, 0
  2355 00001C7E BA01000000              	mov rdx, 1
  2356                                  .L_lambda_simple_env_loop_0a2e:	; ext_env[i + 1] <-- env[i]
  2357 00001C83 4883FE00                	cmp rsi, 0
  2358 00001C87 7410                    	je .L_lambda_simple_env_end_0a2e
  2359 00001C89 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2360 00001C8D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2361 00001C91 48FFC6                  	inc rsi
  2362 00001C94 48FFC2                  	inc rdx
  2363 00001C97 EBEA                    	jmp .L_lambda_simple_env_loop_0a2e
  2364                                  .L_lambda_simple_env_end_0a2e:
  2365 00001C99 5B                      	pop rbx
  2366 00001C9A BE00000000              	mov rsi, 0
  2367                                  .L_lambda_simple_params_loop_0a2e:	; copy params
  2368 00001C9F 4883FE00                	cmp rsi, 0
  2369 00001CA3 740E                    	je .L_lambda_simple_params_end_0a2e
  2370 00001CA5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2371 00001CAA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2372 00001CAE 48FFC6                  	inc rsi
  2373 00001CB1 EBEC                    	jmp .L_lambda_simple_params_loop_0a2e
  2374                                  .L_lambda_simple_params_end_0a2e:
  2375 00001CB3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2376 00001CB6 4889C3                  	mov rbx, rax
  2377 00001CB9 58                      	pop rax
  2378 00001CBA C60005                  	mov byte [rax], T_closure
  2379 00001CBD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2380 00001CC1 48C74009[CE1C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a2e
  2381 00001CC9 E914030000              	jmp .L_lambda_simple_end_0a2e
  2382                                  .L_lambda_simple_code_0a2e:	; lambda-simple body
  2383 00001CCE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2384 00001CD4 740B                    	je .L_lambda_simple_arity_check_ok_0a2e
  2385 00001CD6 FF742410                	push qword [rsp + 8 * 2]
  2386 00001CDA 6A01                    	push 1
  2387 00001CDC E9A32B0000              	jmp L_error_incorrect_arity_simple
  2388                                  .L_lambda_simple_arity_check_ok_0a2e:
  2389 00001CE1 C8000000                	enter 0, 0
  2390 00001CE5 BF08000000              	mov qword rdi, 8
  2391 00001CEA E8DC2B0000              	call malloc
  2392 00001CEF 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  2393 00001CF3 48B8-                   	mov rax, sob_void
  2393 00001CF5 [0000000000000000] 
  2394                                  
  2395 00001CFD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2396 00001D02 E8C42B0000              	call malloc
  2397 00001D07 50                      	push rax
  2398 00001D08 BF08000000              	mov rdi, 8 * 1	; new rib
  2399 00001D0D E8B92B0000              	call malloc
  2400 00001D12 50                      	push rax
  2401 00001D13 BF10000000              	mov rdi, 8 * 2	; extended env
  2402 00001D18 E8AE2B0000              	call malloc
  2403 00001D1D 488B7D10                	mov rdi, ENV
  2404 00001D21 BE00000000              	mov rsi, 0
  2405 00001D26 BA01000000              	mov rdx, 1
  2406                                  .L_lambda_simple_env_loop_0a2f:	; ext_env[i + 1] <-- env[i]
  2407 00001D2B 4883FE01                	cmp rsi, 1
  2408 00001D2F 7410                    	je .L_lambda_simple_env_end_0a2f
  2409 00001D31 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2410 00001D35 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2411 00001D39 48FFC6                  	inc rsi
  2412 00001D3C 48FFC2                  	inc rdx
  2413 00001D3F EBEA                    	jmp .L_lambda_simple_env_loop_0a2f
  2414                                  .L_lambda_simple_env_end_0a2f:
  2415 00001D41 5B                      	pop rbx
  2416 00001D42 BE00000000              	mov rsi, 0
  2417                                  .L_lambda_simple_params_loop_0a2f:	; copy params
  2418 00001D47 4883FE01                	cmp rsi, 1
  2419 00001D4B 740E                    	je .L_lambda_simple_params_end_0a2f
  2420 00001D4D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2421 00001D52 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2422 00001D56 48FFC6                  	inc rsi
  2423 00001D59 EBEC                    	jmp .L_lambda_simple_params_loop_0a2f
  2424                                  .L_lambda_simple_params_end_0a2f:
  2425 00001D5B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2426 00001D5E 4889C3                  	mov rbx, rax
  2427 00001D61 58                      	pop rax
  2428 00001D62 C60005                  	mov byte [rax], T_closure
  2429 00001D65 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2430 00001D69 48C74009[761D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a2f
  2431 00001D71 E938010000              	jmp .L_lambda_simple_end_0a2f
  2432                                  .L_lambda_simple_code_0a2f:	; lambda-simple body
  2433 00001D76 48837C241002            	cmp qword [rsp + 8 * 2], 2
  2434 00001D7C 740B                    	je .L_lambda_simple_arity_check_ok_0a2f
  2435 00001D7E FF742410                	push qword [rsp + 8 * 2]
  2436 00001D82 6A02                    	push 2
  2437 00001D84 E9FB2A0000              	jmp L_error_incorrect_arity_simple
  2438                                  .L_lambda_simple_arity_check_ok_0a2f:
  2439 00001D89 C8000000                	enter 0, 0
  2440 00001D8D 488B4520                	mov rax, PARAM(0)
  2441 00001D91 50                      	push rax
  2442 00001D92 6A01                    	push 1
  2443 00001D94 488B0425[00000000]      	mov rax, qword [free_var_0]
  2444                                  	assert_closure(rax)
    65 00001D9C 803805              <1>  cmp byte [%1], %2
    66 00001D9F 0F85A6430000        <1>  jne L_error_incorrect_type
  2445 00001DA5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2446 00001DA9 53                      	push rbx
  2447 00001DAA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2448 00001DAE FFD3                    	call rbx
  2449 00001DB0 483D[02000000]          	cmp rax, sob_boolean_false
  2450 00001DB6 7409                    	je .L_if_else_0912
  2451 00001DB8 488B4528                	mov rax, PARAM(1)
  2452 00001DBC E9E9000000              	jmp .L_if_end_0912
  2453                                  	.L_if_else_0912:
  2454 00001DC1 488B4528                	mov rax, PARAM(1)
  2455 00001DC5 50                      	push rax
  2456 00001DC6 488B4520                	mov rax, PARAM(0)
  2457 00001DCA 50                      	push rax
  2458 00001DCB 6A01                    	push 1
  2459 00001DCD 488B0425[80000000]      	mov rax, qword [free_var_16]
  2460                                  	assert_closure(rax)
    65 00001DD5 803805              <1>  cmp byte [%1], %2
    66 00001DD8 0F856D430000        <1>  jne L_error_incorrect_type
  2461 00001DDE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2462 00001DE2 53                      	push rbx
  2463 00001DE3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2464 00001DE7 FFD3                    	call rbx
  2465 00001DE9 50                      	push rax
  2466 00001DEA 6A02                    	push 2
  2467 00001DEC 488B0425[68000000]      	mov rax, qword [free_var_13]
  2468                                  	assert_closure(rax)
    65 00001DF4 803805              <1>  cmp byte [%1], %2
    66 00001DF7 0F854E430000        <1>  jne L_error_incorrect_type
  2469 00001DFD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2470 00001E01 53                      	push rbx
  2471 00001E02 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2472 00001E06 FFD3                    	call rbx
  2473 00001E08 50                      	push rax
  2474 00001E09 488B4520                	mov rax, PARAM(0)
  2475 00001E0D 50                      	push rax
  2476 00001E0E 6A01                    	push 1
  2477 00001E10 488B0425[88000000]      	mov rax, qword [free_var_17]
  2478                                  	assert_closure(rax)
    65 00001E18 803805              <1>  cmp byte [%1], %2
    66 00001E1B 0F852A430000        <1>  jne L_error_incorrect_type
  2479 00001E21 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2480 00001E25 53                      	push rbx
  2481 00001E26 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2482 00001E2A FFD3                    	call rbx
  2483 00001E2C 50                      	push rax
  2484 00001E2D 6A02                    	push 2
  2485 00001E2F 488B4510                	mov rax, qword [rbp + 8*2]
  2486 00001E33 488B00                  	mov rax, qword [rax + 8*0]
  2487 00001E36 488B00                  	mov rax, qword [rax + 8*0]
  2488 00001E39 488B00                  	mov rax, qword [rax]
  2489                                  	assert_closure(rax)
    65 00001E3C 803805              <1>  cmp byte [%1], %2
    66 00001E3F 0F8506430000        <1>  jne L_error_incorrect_type
  2490 00001E45 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2491 00001E49 53                      	push rbx
  2492 00001E4A FF7508                  	push RET_ADDR
  2493 00001E4D 488B7D18                	mov rdi, COUNT
  2494 00001E51 4883C703                	add rdi, 3
  2495 00001E55 48C1E703                	shl rdi, 3
  2496 00001E59 4801EF                  	add rdi, rbp
  2497 00001E5C 488B6D00                	mov rbp, OLD_RDP
  2498 00001E60 BE00000000              	mov rsi, 0
  2499                                  .L_tc_recycle_frame_loop_0fa7:	 ; start recycle frame loop
  2500 00001E65 4883FE05                	cmp rsi, 5
  2501 00001E69 7427                    	je .L_tc_recycle_frame_done_0fa7
  2502 00001E6B B904000000              	mov rcx, 4
  2503 00001E70 4829F1                  	sub rcx, rsi
  2504 00001E73 48C1E103                	shl rcx, 3
  2505 00001E77 4801E1                  	add rcx, rsp ; rcx is the address to move
  2506 00001E7A 4889F3                  	mov rbx, rsi
  2507 00001E7D 48C1E303                	shl rbx, 3
  2508 00001E81 48F7DB                  	neg rbx
  2509 00001E84 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2510 00001E87 488B09                  	mov rcx, [rcx]
  2511 00001E8A 48890B                  	mov [rbx], rcx
  2512 00001E8D 48FFC6                  	inc rsi
  2513 00001E90 EBD3                    	jmp .L_tc_recycle_frame_loop_0fa7
  2514                                  .L_tc_recycle_frame_done_0fa7:	 ; end recycle frame loop
  2515 00001E92 BB04000000              	mov rbx, 4
  2516 00001E97 48C1E303                	shl rbx, 3
  2517 00001E9B 48F7DB                  	neg rbx
  2518 00001E9E 4801FB                  	add rbx, rdi
  2519 00001EA1 4889DC                  	mov rsp, rbx
  2520 00001EA4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2521 00001EA8 FFE3                    	jmp rbx
  2522                                  	.L_if_end_0912:
  2523 00001EAA C9                      	leave
  2524 00001EAB C22000                  	ret 8 * (2 + 2)
  2525                                  .L_lambda_simple_end_0a2f:	; new closure is in rax
  2526 00001EAE 50                      	push rax
  2527 00001EAF 488B4520                	mov rax, PARAM(0)
  2528 00001EB3 8F00                    	pop qword [rax]
  2529 00001EB5 48B8-                   	mov rax, sob_void
  2529 00001EB7 [0000000000000000] 
  2530                                  
  2531 00001EBF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2532 00001EC4 E8022A0000              	call malloc
  2533 00001EC9 50                      	push rax
  2534 00001ECA BF08000000              	mov rdi, 8 * 1	; new rib
  2535 00001ECF E8F7290000              	call malloc
  2536 00001ED4 50                      	push rax
  2537 00001ED5 BF10000000              	mov rdi, 8 * 2	; extended env
  2538 00001EDA E8EC290000              	call malloc
  2539 00001EDF 488B7D10                	mov rdi, ENV
  2540 00001EE3 BE00000000              	mov rsi, 0
  2541 00001EE8 BA01000000              	mov rdx, 1
  2542                                  .L_lambda_simple_env_loop_0a30:	; ext_env[i + 1] <-- env[i]
  2543 00001EED 4883FE01                	cmp rsi, 1
  2544 00001EF1 7410                    	je .L_lambda_simple_env_end_0a30
  2545 00001EF3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2546 00001EF7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2547 00001EFB 48FFC6                  	inc rsi
  2548 00001EFE 48FFC2                  	inc rdx
  2549 00001F01 EBEA                    	jmp .L_lambda_simple_env_loop_0a30
  2550                                  .L_lambda_simple_env_end_0a30:
  2551 00001F03 5B                      	pop rbx
  2552 00001F04 BE00000000              	mov rsi, 0
  2553                                  .L_lambda_simple_params_loop_0a30:	; copy params
  2554 00001F09 4883FE01                	cmp rsi, 1
  2555 00001F0D 740E                    	je .L_lambda_simple_params_end_0a30
  2556 00001F0F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2557 00001F14 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2558 00001F18 48FFC6                  	inc rsi
  2559 00001F1B EBEC                    	jmp .L_lambda_simple_params_loop_0a30
  2560                                  .L_lambda_simple_params_end_0a30:
  2561 00001F1D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2562 00001F20 4889C3                  	mov rbx, rax
  2563 00001F23 58                      	pop rax
  2564 00001F24 C60005                  	mov byte [rax], T_closure
  2565 00001F27 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2566 00001F2B 48C74009[381F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a30
  2567 00001F33 E9A6000000              	jmp .L_lambda_simple_end_0a30
  2568                                  .L_lambda_simple_code_0a30:	; lambda-simple body
  2569 00001F38 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2570 00001F3E 740B                    	je .L_lambda_simple_arity_check_ok_0a30
  2571 00001F40 FF742410                	push qword [rsp + 8 * 2]
  2572 00001F44 6A01                    	push 1
  2573 00001F46 E939290000              	jmp L_error_incorrect_arity_simple
  2574                                  .L_lambda_simple_arity_check_ok_0a30:
  2575 00001F4B C8000000                	enter 0, 0
  2576 00001F4F 488D0425[01000000]      	lea rax, [1 + L_constants]
  2577 00001F57 50                      	push rax
  2578 00001F58 488B4520                	mov rax, PARAM(0)
  2579 00001F5C 50                      	push rax
  2580 00001F5D 6A02                    	push 2
  2581 00001F5F 488B4510                	mov rax, qword [rbp + 8*2]
  2582 00001F63 488B00                  	mov rax, qword [rax + 8*0]
  2583 00001F66 488B00                  	mov rax, qword [rax + 8*0]
  2584 00001F69 488B00                  	mov rax, qword [rax]
  2585                                  	assert_closure(rax)
    65 00001F6C 803805              <1>  cmp byte [%1], %2
    66 00001F6F 0F85D6410000        <1>  jne L_error_incorrect_type
  2586 00001F75 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2587 00001F79 53                      	push rbx
  2588 00001F7A FF7508                  	push RET_ADDR
  2589 00001F7D 488B7D18                	mov rdi, COUNT
  2590 00001F81 4883C703                	add rdi, 3
  2591 00001F85 48C1E703                	shl rdi, 3
  2592 00001F89 4801EF                  	add rdi, rbp
  2593 00001F8C 488B6D00                	mov rbp, OLD_RDP
  2594 00001F90 BE00000000              	mov rsi, 0
  2595                                  .L_tc_recycle_frame_loop_0fa8:	 ; start recycle frame loop
  2596 00001F95 4883FE05                	cmp rsi, 5
  2597 00001F99 7427                    	je .L_tc_recycle_frame_done_0fa8
  2598 00001F9B B904000000              	mov rcx, 4
  2599 00001FA0 4829F1                  	sub rcx, rsi
  2600 00001FA3 48C1E103                	shl rcx, 3
  2601 00001FA7 4801E1                  	add rcx, rsp ; rcx is the address to move
  2602 00001FAA 4889F3                  	mov rbx, rsi
  2603 00001FAD 48C1E303                	shl rbx, 3
  2604 00001FB1 48F7DB                  	neg rbx
  2605 00001FB4 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2606 00001FB7 488B09                  	mov rcx, [rcx]
  2607 00001FBA 48890B                  	mov [rbx], rcx
  2608 00001FBD 48FFC6                  	inc rsi
  2609 00001FC0 EBD3                    	jmp .L_tc_recycle_frame_loop_0fa8
  2610                                  .L_tc_recycle_frame_done_0fa8:	 ; end recycle frame loop
  2611 00001FC2 BB04000000              	mov rbx, 4
  2612 00001FC7 48C1E303                	shl rbx, 3
  2613 00001FCB 48F7DB                  	neg rbx
  2614 00001FCE 4801FB                  	add rbx, rdi
  2615 00001FD1 4889DC                  	mov rsp, rbx
  2616 00001FD4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2617 00001FD8 FFE3                    	jmp rbx
  2618 00001FDA C9                      	leave
  2619 00001FDB C21800                  	ret 8 * (2 + 1)
  2620                                  .L_lambda_simple_end_0a30:	; new closure is in rax
  2621 00001FDE C9                      	leave
  2622 00001FDF C21800                  	ret 8 * (2 + 1)
  2623                                  .L_lambda_simple_end_0a2e:	; new closure is in rax
  2624                                  	assert_closure(rax)
    65 00001FE2 803805              <1>  cmp byte [%1], %2
    66 00001FE5 0F8560410000        <1>  jne L_error_incorrect_type
  2625 00001FEB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2626 00001FEF 53                      	push rbx
  2627 00001FF0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2628 00001FF4 FFD3                    	call rbx
  2629 00001FF6 48890425[E0010000]      	mov qword [free_var_60], rax
  2630 00001FFE 48B8-                   	mov rax, sob_void
  2630 00002000 [0000000000000000] 
  2631                                  
  2632 00002008 4889C7                  	mov rdi, rax
  2633 0000200B E8CC280000              	call print_sexpr_if_not_void
  2634                                  
  2635 00002010 488D0425[17000000]      	lea rax, [23 + L_constants]
  2636 00002018 50                      	push rax
  2637 00002019 488D0425[17000000]      	lea rax, [23 + L_constants]
  2638 00002021 50                      	push rax
  2639 00002022 6A02                    	push 2
  2640 00002024 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2641 00002029 E89D280000              	call malloc
  2642 0000202E 50                      	push rax
  2643 0000202F BF00000000              	mov rdi, 8 * 0	; new rib
  2644 00002034 E892280000              	call malloc
  2645 00002039 50                      	push rax
  2646 0000203A BF08000000              	mov rdi, 8 * 1	; extended env
  2647 0000203F E887280000              	call malloc
  2648 00002044 488B7D10                	mov rdi, ENV
  2649 00002048 BE00000000              	mov rsi, 0
  2650 0000204D BA01000000              	mov rdx, 1
  2651                                  .L_lambda_simple_env_loop_0a31:	; ext_env[i + 1] <-- env[i]
  2652 00002052 4883FE00                	cmp rsi, 0
  2653 00002056 7410                    	je .L_lambda_simple_env_end_0a31
  2654 00002058 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2655 0000205C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2656 00002060 48FFC6                  	inc rsi
  2657 00002063 48FFC2                  	inc rdx
  2658 00002066 EBEA                    	jmp .L_lambda_simple_env_loop_0a31
  2659                                  .L_lambda_simple_env_end_0a31:
  2660 00002068 5B                      	pop rbx
  2661 00002069 BE00000000              	mov rsi, 0
  2662                                  .L_lambda_simple_params_loop_0a31:	; copy params
  2663 0000206E 4883FE00                	cmp rsi, 0
  2664 00002072 740E                    	je .L_lambda_simple_params_end_0a31
  2665 00002074 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2666 00002079 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2667 0000207D 48FFC6                  	inc rsi
  2668 00002080 EBEC                    	jmp .L_lambda_simple_params_loop_0a31
  2669                                  .L_lambda_simple_params_end_0a31:
  2670 00002082 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2671 00002085 4889C3                  	mov rbx, rax
  2672 00002088 58                      	pop rax
  2673 00002089 C60005                  	mov byte [rax], T_closure
  2674 0000208C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2675 00002090 48C74009[9D200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a31
  2676 00002098 E949060000              	jmp .L_lambda_simple_end_0a31
  2677                                  .L_lambda_simple_code_0a31:	; lambda-simple body
  2678 0000209D 48837C241002            	cmp qword [rsp + 8 * 2], 2
  2679 000020A3 740B                    	je .L_lambda_simple_arity_check_ok_0a31
  2680 000020A5 FF742410                	push qword [rsp + 8 * 2]
  2681 000020A9 6A02                    	push 2
  2682 000020AB E9D4270000              	jmp L_error_incorrect_arity_simple
  2683                                  .L_lambda_simple_arity_check_ok_0a31:
  2684 000020B0 C8000000                	enter 0, 0
  2685 000020B4 BF08000000              	mov qword rdi, 8
  2686 000020B9 E80D280000              	call malloc
  2687 000020BE 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  2688 000020C2 48B8-                   	mov rax, sob_void
  2688 000020C4 [0000000000000000] 
  2689                                  
  2690 000020CC BF08000000              	mov qword rdi, 8
  2691 000020D1 E8F5270000              	call malloc
  2692 000020D6 48894528                	mov qword [rbp + 8*(4 + 1)], rax
  2693 000020DA 48B8-                   	mov rax, sob_void
  2693 000020DC [0000000000000000] 
  2694                                  
  2695 000020E4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2696 000020E9 E8DD270000              	call malloc
  2697 000020EE 50                      	push rax
  2698 000020EF BF10000000              	mov rdi, 8 * 2	; new rib
  2699 000020F4 E8D2270000              	call malloc
  2700 000020F9 50                      	push rax
  2701 000020FA BF10000000              	mov rdi, 8 * 2	; extended env
  2702 000020FF E8C7270000              	call malloc
  2703 00002104 488B7D10                	mov rdi, ENV
  2704 00002108 BE00000000              	mov rsi, 0
  2705 0000210D BA01000000              	mov rdx, 1
  2706                                  .L_lambda_simple_env_loop_0a32:	; ext_env[i + 1] <-- env[i]
  2707 00002112 4883FE01                	cmp rsi, 1
  2708 00002116 7410                    	je .L_lambda_simple_env_end_0a32
  2709 00002118 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2710 0000211C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2711 00002120 48FFC6                  	inc rsi
  2712 00002123 48FFC2                  	inc rdx
  2713 00002126 EBEA                    	jmp .L_lambda_simple_env_loop_0a32
  2714                                  .L_lambda_simple_env_end_0a32:
  2715 00002128 5B                      	pop rbx
  2716 00002129 BE00000000              	mov rsi, 0
  2717                                  .L_lambda_simple_params_loop_0a32:	; copy params
  2718 0000212E 4883FE02                	cmp rsi, 2
  2719 00002132 740E                    	je .L_lambda_simple_params_end_0a32
  2720 00002134 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2721 00002139 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2722 0000213D 48FFC6                  	inc rsi
  2723 00002140 EBEC                    	jmp .L_lambda_simple_params_loop_0a32
  2724                                  .L_lambda_simple_params_end_0a32:
  2725 00002142 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2726 00002145 4889C3                  	mov rbx, rax
  2727 00002148 58                      	pop rax
  2728 00002149 C60005                  	mov byte [rax], T_closure
  2729 0000214C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2730 00002150 48C74009[5D210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a32
  2731 00002158 E93E010000              	jmp .L_lambda_simple_end_0a32
  2732                                  .L_lambda_simple_code_0a32:	; lambda-simple body
  2733 0000215D 48837C241002            	cmp qword [rsp + 8 * 2], 2
  2734 00002163 740B                    	je .L_lambda_simple_arity_check_ok_0a32
  2735 00002165 FF742410                	push qword [rsp + 8 * 2]
  2736 00002169 6A02                    	push 2
  2737 0000216B E914270000              	jmp L_error_incorrect_arity_simple
  2738                                  .L_lambda_simple_arity_check_ok_0a32:
  2739 00002170 C8000000                	enter 0, 0
  2740 00002174 488B4528                	mov rax, PARAM(1)
  2741 00002178 50                      	push rax
  2742 00002179 6A01                    	push 1
  2743 0000217B 488B0425[00000000]      	mov rax, qword [free_var_0]
  2744                                  	assert_closure(rax)
    65 00002183 803805              <1>  cmp byte [%1], %2
    66 00002186 0F85BF3F0000        <1>  jne L_error_incorrect_type
  2745 0000218C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2746 00002190 53                      	push rbx
  2747 00002191 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2748 00002195 FFD3                    	call rbx
  2749 00002197 483D[02000000]          	cmp rax, sob_boolean_false
  2750 0000219D 7409                    	je .L_if_else_0913
  2751 0000219F 488B4520                	mov rax, PARAM(0)
  2752 000021A3 E9EF000000              	jmp .L_if_end_0913
  2753                                  	.L_if_else_0913:
  2754 000021A8 488B4528                	mov rax, PARAM(1)
  2755 000021AC 50                      	push rax
  2756 000021AD 6A01                    	push 1
  2757 000021AF 488B0425[88000000]      	mov rax, qword [free_var_17]
  2758                                  	assert_closure(rax)
    65 000021B7 803805              <1>  cmp byte [%1], %2
    66 000021BA 0F858B3F0000        <1>  jne L_error_incorrect_type
  2759 000021C0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2760 000021C4 53                      	push rbx
  2761 000021C5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2762 000021C9 FFD3                    	call rbx
  2763 000021CB 50                      	push rax
  2764 000021CC 488B4528                	mov rax, PARAM(1)
  2765 000021D0 50                      	push rax
  2766 000021D1 6A01                    	push 1
  2767 000021D3 488B0425[80000000]      	mov rax, qword [free_var_16]
  2768                                  	assert_closure(rax)
    65 000021DB 803805              <1>  cmp byte [%1], %2
    66 000021DE 0F85673F0000        <1>  jne L_error_incorrect_type
  2769 000021E4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2770 000021E8 53                      	push rbx
  2771 000021E9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2772 000021ED FFD3                    	call rbx
  2773 000021EF 50                      	push rax
  2774 000021F0 6A02                    	push 2
  2775 000021F2 488B4510                	mov rax, qword [rbp + 8*2]
  2776 000021F6 488B00                  	mov rax, qword [rax + 8*0]
  2777 000021F9 488B00                  	mov rax, qword [rax + 8*0]
  2778 000021FC 488B00                  	mov rax, qword [rax]
  2779                                  	assert_closure(rax)
    65 000021FF 803805              <1>  cmp byte [%1], %2
    66 00002202 0F85433F0000        <1>  jne L_error_incorrect_type
  2780 00002208 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2781 0000220C 53                      	push rbx
  2782 0000220D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2783 00002211 FFD3                    	call rbx
  2784 00002213 50                      	push rax
  2785 00002214 488B4520                	mov rax, PARAM(0)
  2786 00002218 50                      	push rax
  2787 00002219 6A02                    	push 2
  2788 0000221B 488B4510                	mov rax, qword [rbp + 8*2]
  2789 0000221F 488B00                  	mov rax, qword [rax + 8*0]
  2790 00002222 488B4008                	mov rax, qword [rax + 8*1]
  2791 00002226 488B00                  	mov rax, qword [rax]
  2792                                  	assert_closure(rax)
    65 00002229 803805              <1>  cmp byte [%1], %2
    66 0000222C 0F85193F0000        <1>  jne L_error_incorrect_type
  2793 00002232 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2794 00002236 53                      	push rbx
  2795 00002237 FF7508                  	push RET_ADDR
  2796 0000223A 488B7D18                	mov rdi, COUNT
  2797 0000223E 4883C703                	add rdi, 3
  2798 00002242 48C1E703                	shl rdi, 3
  2799 00002246 4801EF                  	add rdi, rbp
  2800 00002249 488B6D00                	mov rbp, OLD_RDP
  2801 0000224D BE00000000              	mov rsi, 0
  2802                                  .L_tc_recycle_frame_loop_0fa9:	 ; start recycle frame loop
  2803 00002252 4883FE05                	cmp rsi, 5
  2804 00002256 7427                    	je .L_tc_recycle_frame_done_0fa9
  2805 00002258 B904000000              	mov rcx, 4
  2806 0000225D 4829F1                  	sub rcx, rsi
  2807 00002260 48C1E103                	shl rcx, 3
  2808 00002264 4801E1                  	add rcx, rsp ; rcx is the address to move
  2809 00002267 4889F3                  	mov rbx, rsi
  2810 0000226A 48C1E303                	shl rbx, 3
  2811 0000226E 48F7DB                  	neg rbx
  2812 00002271 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2813 00002274 488B09                  	mov rcx, [rcx]
  2814 00002277 48890B                  	mov [rbx], rcx
  2815 0000227A 48FFC6                  	inc rsi
  2816 0000227D EBD3                    	jmp .L_tc_recycle_frame_loop_0fa9
  2817                                  .L_tc_recycle_frame_done_0fa9:	 ; end recycle frame loop
  2818 0000227F BB04000000              	mov rbx, 4
  2819 00002284 48C1E303                	shl rbx, 3
  2820 00002288 48F7DB                  	neg rbx
  2821 0000228B 4801FB                  	add rbx, rdi
  2822 0000228E 4889DC                  	mov rsp, rbx
  2823 00002291 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2824 00002295 FFE3                    	jmp rbx
  2825                                  	.L_if_end_0913:
  2826 00002297 C9                      	leave
  2827 00002298 C22000                  	ret 8 * (2 + 2)
  2828                                  .L_lambda_simple_end_0a32:	; new closure is in rax
  2829 0000229B 50                      	push rax
  2830 0000229C 488B4520                	mov rax, PARAM(0)
  2831 000022A0 8F00                    	pop qword [rax]
  2832 000022A2 48B8-                   	mov rax, sob_void
  2832 000022A4 [0000000000000000] 
  2833                                  
  2834 000022AC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2835 000022B1 E815260000              	call malloc
  2836 000022B6 50                      	push rax
  2837 000022B7 BF10000000              	mov rdi, 8 * 2	; new rib
  2838 000022BC E80A260000              	call malloc
  2839 000022C1 50                      	push rax
  2840 000022C2 BF10000000              	mov rdi, 8 * 2	; extended env
  2841 000022C7 E8FF250000              	call malloc
  2842 000022CC 488B7D10                	mov rdi, ENV
  2843 000022D0 BE00000000              	mov rsi, 0
  2844 000022D5 BA01000000              	mov rdx, 1
  2845                                  .L_lambda_simple_env_loop_0a33:	; ext_env[i + 1] <-- env[i]
  2846 000022DA 4883FE01                	cmp rsi, 1
  2847 000022DE 7410                    	je .L_lambda_simple_env_end_0a33
  2848 000022E0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2849 000022E4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2850 000022E8 48FFC6                  	inc rsi
  2851 000022EB 48FFC2                  	inc rdx
  2852 000022EE EBEA                    	jmp .L_lambda_simple_env_loop_0a33
  2853                                  .L_lambda_simple_env_end_0a33:
  2854 000022F0 5B                      	pop rbx
  2855 000022F1 BE00000000              	mov rsi, 0
  2856                                  .L_lambda_simple_params_loop_0a33:	; copy params
  2857 000022F6 4883FE02                	cmp rsi, 2
  2858 000022FA 740E                    	je .L_lambda_simple_params_end_0a33
  2859 000022FC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2860 00002301 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2861 00002305 48FFC6                  	inc rsi
  2862 00002308 EBEC                    	jmp .L_lambda_simple_params_loop_0a33
  2863                                  .L_lambda_simple_params_end_0a33:
  2864 0000230A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2865 0000230D 4889C3                  	mov rbx, rax
  2866 00002310 58                      	pop rax
  2867 00002311 C60005                  	mov byte [rax], T_closure
  2868 00002314 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2869 00002318 48C74009[25230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a33
  2870 00002320 E939010000              	jmp .L_lambda_simple_end_0a33
  2871                                  .L_lambda_simple_code_0a33:	; lambda-simple body
  2872 00002325 48837C241002            	cmp qword [rsp + 8 * 2], 2
  2873 0000232B 740B                    	je .L_lambda_simple_arity_check_ok_0a33
  2874 0000232D FF742410                	push qword [rsp + 8 * 2]
  2875 00002331 6A02                    	push 2
  2876 00002333 E94C250000              	jmp L_error_incorrect_arity_simple
  2877                                  .L_lambda_simple_arity_check_ok_0a33:
  2878 00002338 C8000000                	enter 0, 0
  2879 0000233C 488B4520                	mov rax, PARAM(0)
  2880 00002340 50                      	push rax
  2881 00002341 6A01                    	push 1
  2882 00002343 488B0425[00000000]      	mov rax, qword [free_var_0]
  2883                                  	assert_closure(rax)
    65 0000234B 803805              <1>  cmp byte [%1], %2
    66 0000234E 0F85F73D0000        <1>  jne L_error_incorrect_type
  2884 00002354 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2885 00002358 53                      	push rbx
  2886 00002359 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2887 0000235D FFD3                    	call rbx
  2888 0000235F 483D[02000000]          	cmp rax, sob_boolean_false
  2889 00002365 7409                    	je .L_if_else_0914
  2890 00002367 488B4528                	mov rax, PARAM(1)
  2891 0000236B E9EA000000              	jmp .L_if_end_0914
  2892                                  	.L_if_else_0914:
  2893 00002370 488B4528                	mov rax, PARAM(1)
  2894 00002374 50                      	push rax
  2895 00002375 488B4520                	mov rax, PARAM(0)
  2896 00002379 50                      	push rax
  2897 0000237A 6A01                    	push 1
  2898 0000237C 488B0425[88000000]      	mov rax, qword [free_var_17]
  2899                                  	assert_closure(rax)
    65 00002384 803805              <1>  cmp byte [%1], %2
    66 00002387 0F85BE3D0000        <1>  jne L_error_incorrect_type
  2900 0000238D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2901 00002391 53                      	push rbx
  2902 00002392 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2903 00002396 FFD3                    	call rbx
  2904 00002398 50                      	push rax
  2905 00002399 6A02                    	push 2
  2906 0000239B 488B4510                	mov rax, qword [rbp + 8*2]
  2907 0000239F 488B00                  	mov rax, qword [rax + 8*0]
  2908 000023A2 488B4008                	mov rax, qword [rax + 8*1]
  2909 000023A6 488B00                  	mov rax, qword [rax]
  2910                                  	assert_closure(rax)
    65 000023A9 803805              <1>  cmp byte [%1], %2
    66 000023AC 0F85993D0000        <1>  jne L_error_incorrect_type
  2911 000023B2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2912 000023B6 53                      	push rbx
  2913 000023B7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2914 000023BB FFD3                    	call rbx
  2915 000023BD 50                      	push rax
  2916 000023BE 488B4520                	mov rax, PARAM(0)
  2917 000023C2 50                      	push rax
  2918 000023C3 6A01                    	push 1
  2919 000023C5 488B0425[80000000]      	mov rax, qword [free_var_16]
  2920                                  	assert_closure(rax)
    65 000023CD 803805              <1>  cmp byte [%1], %2
    66 000023D0 0F85753D0000        <1>  jne L_error_incorrect_type
  2921 000023D6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2922 000023DA 53                      	push rbx
  2923 000023DB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2924 000023DF FFD3                    	call rbx
  2925 000023E1 50                      	push rax
  2926 000023E2 6A02                    	push 2
  2927 000023E4 488B0425[68000000]      	mov rax, qword [free_var_13]
  2928                                  	assert_closure(rax)
    65 000023EC 803805              <1>  cmp byte [%1], %2
    66 000023EF 0F85563D0000        <1>  jne L_error_incorrect_type
  2929 000023F5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2930 000023F9 53                      	push rbx
  2931 000023FA FF7508                  	push RET_ADDR
  2932 000023FD 488B7D18                	mov rdi, COUNT
  2933 00002401 4883C703                	add rdi, 3
  2934 00002405 48C1E703                	shl rdi, 3
  2935 00002409 4801EF                  	add rdi, rbp
  2936 0000240C 488B6D00                	mov rbp, OLD_RDP
  2937 00002410 BE00000000              	mov rsi, 0
  2938                                  .L_tc_recycle_frame_loop_0faa:	 ; start recycle frame loop
  2939 00002415 4883FE05                	cmp rsi, 5
  2940 00002419 7427                    	je .L_tc_recycle_frame_done_0faa
  2941 0000241B B904000000              	mov rcx, 4
  2942 00002420 4829F1                  	sub rcx, rsi
  2943 00002423 48C1E103                	shl rcx, 3
  2944 00002427 4801E1                  	add rcx, rsp ; rcx is the address to move
  2945 0000242A 4889F3                  	mov rbx, rsi
  2946 0000242D 48C1E303                	shl rbx, 3
  2947 00002431 48F7DB                  	neg rbx
  2948 00002434 4801FB                  	add rbx, rdi ;rbx is the address to move to
  2949 00002437 488B09                  	mov rcx, [rcx]
  2950 0000243A 48890B                  	mov [rbx], rcx
  2951 0000243D 48FFC6                  	inc rsi
  2952 00002440 EBD3                    	jmp .L_tc_recycle_frame_loop_0faa
  2953                                  .L_tc_recycle_frame_done_0faa:	 ; end recycle frame loop
  2954 00002442 BB04000000              	mov rbx, 4
  2955 00002447 48C1E303                	shl rbx, 3
  2956 0000244B 48F7DB                  	neg rbx
  2957 0000244E 4801FB                  	add rbx, rdi
  2958 00002451 4889DC                  	mov rsp, rbx
  2959 00002454 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2960 00002458 FFE3                    	jmp rbx
  2961                                  	.L_if_end_0914:
  2962 0000245A C9                      	leave
  2963 0000245B C22000                  	ret 8 * (2 + 2)
  2964                                  .L_lambda_simple_end_0a33:	; new closure is in rax
  2965 0000245E 50                      	push rax
  2966 0000245F 488B4528                	mov rax, PARAM(1)
  2967 00002463 8F00                    	pop qword [rax]
  2968 00002465 48B8-                   	mov rax, sob_void
  2968 00002467 [0000000000000000] 
  2969                                  
  2970 0000246F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2971 00002474 E852240000              	call malloc
  2972 00002479 50                      	push rax
  2973 0000247A BF10000000              	mov rdi, 8 * 2	; new rib
  2974 0000247F E847240000              	call malloc
  2975 00002484 50                      	push rax
  2976 00002485 BF10000000              	mov rdi, 8 * 2	; extended env
  2977 0000248A E83C240000              	call malloc
  2978 0000248F 488B7D10                	mov rdi, ENV
  2979 00002493 BE00000000              	mov rsi, 0
  2980 00002498 BA01000000              	mov rdx, 1
  2981                                  .L_lambda_opt_env_loop_03ca:	; ext_env[i + 1] <-- env[i]
  2982 0000249D 4883FE01                	cmp rsi, 1
  2983 000024A1 7410                    	je .L_lambda_opt_env_end_03ca
  2984 000024A3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  2985 000024A7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2986 000024AB 48FFC6                  	inc rsi
  2987 000024AE 48FFC2                  	inc rdx
  2988 000024B1 EBEA                    	jmp .L_lambda_opt_env_loop_03ca
  2989                                  .L_lambda_opt_env_end_03ca:
  2990 000024B3 5B                      	pop rbx
  2991 000024B4 BE00000000              	mov rsi, 0
  2992                                  .L_lambda_opt_params_loop_03ca:	; copy params
  2993 000024B9 4883FE02                	cmp rsi, 2
  2994 000024BD 740E                    	je .L_lambda_opt_params_end_03ca
  2995 000024BF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2996 000024C4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2997 000024C8 48FFC6                  	inc rsi
  2998 000024CB EBEC                    	jmp .L_lambda_opt_params_loop_03ca
  2999                                  .L_lambda_opt_params_end_03ca:
  3000 000024CD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3001 000024D0 4889C3                  	mov rbx, rax
  3002 000024D3 58                      	pop rax
  3003 000024D4 C60005                  	mov byte [rax], T_closure
  3004 000024D7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3005 000024DB 48C74009[E8240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_03ca
  3006 000024E3 E9FA010000              	jmp .L_lambda_opt_end_03ca
  3007                                  .L_lambda_opt_code_03ca:	; lambda-opt body
  3008 000024E8 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  3009 000024ED 4889FB                  	mov rbx, rdi
  3010 000024F0 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
  3011 000024F4 4883FB00                	cmp rbx, 0
  3012 000024F8 7F45                    	jg .L_lambda_opt_arity_check_more_03ca
  3013                                  .L_lambda_opt_arity_check_exact_03ca:	 ; if params in opt is exact
  3014 000024FA 4883EC08                	sub rsp, 8
  3015 000024FE BE00000000              	mov rsi, 0 ; index
  3016                                  .L_lambda_opt_stack_enlarge_loop_03ca:	 ; stack loop enlarge start
  3017 00002503 4883FE03                	cmp rsi, 3
  3018 00002507 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_03ca
  3019 00002509 4889F7                  	mov rdi, rsi
  3020 0000250C 48FFC7                  	inc rdi
  3021 0000250F 48C1E703                	shl rdi, 3
  3022 00002513 4801E7                  	add rdi, rsp
  3023 00002516 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  3024 00002519 4883EB08                	sub rbx, 8
  3025 0000251D 488B3F                  	mov rdi, [rdi]
  3026 00002520 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  3027 00002523 48FFC6                  	inc rsi
  3028 00002526 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_03ca
  3029                                  .L_lambda_opt_stack_enlarge_loop_exit_03ca:	 ; end of stack enlarge loop
  3030 00002528 48C7442418-             	mov qword [rsp + 3*8], sob_nil
  3030 0000252D [01000000]         
  3031 00002531 48C744241001000000      	mov qword [rsp + 2*8], 1
  3032 0000253A E99E000000              	jmp .L_lambda_opt_stack_adjusted_03ca
  3033                                  .L_lambda_opt_arity_check_more_03ca:	 ; if params in opt is more
  3034 0000253F 48B8-                   	mov rax, sob_nil
  3034 00002541 [0100000000000000] 
  3035 00002549 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  3036 0000254C 48FFCE                  	dec rsi
  3037                                  .L_lambda_opt_list_create_loop_03ca:	; start of list creation loop
  3038 0000254F 4883FEFF                	cmp rsi, -1
  3039 00002553 7422                    	je .L_lambda_opt_list_create_loop_exit_03ca
  3040 00002555 488D4E03                	lea rcx, [rsi + (3 + 0)]
  3041 00002559 48C1E103                	shl rcx, 3
  3042 0000255D 4801E1                  	add rcx, rsp
  3043 00002560 488B09                  	mov rcx, [rcx]
  3044 00002563 56                      	push rsi ; save params
  3045 00002564 53                      	push rbx
  3046                                  
  3047 00002565 50                      	push rax ; cdr
  3048 00002566 51                      	push rcx ; car
  3049 00002567 6A02                    	push qword 2 ; push num of args
  3050 00002569 6A01                    	push qword 1 ; push garbage as env
  3051 0000256B E8E22C0000              	call L_code_ptr_cons
  3052                                  
  3053 00002570 5B                      	pop rbx ; restore params
  3054 00002571 5E                      	pop rsi
  3055 00002572 48FFCE                  	dec rsi
  3056 00002575 EBD8                    	jmp .L_lambda_opt_list_create_loop_03ca
  3057                                  .L_lambda_opt_list_create_loop_exit_03ca:	; end of list creation loop
  3058 00002577 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  3059 0000257C 4883C302                	add rbx, 2
  3060 00002580 4889DF                  	mov rdi, rbx
  3061 00002583 48C1E703                	shl rdi,3
  3062 00002587 4801E7                  	add rdi, rsp
  3063 0000258A 488907                  	mov [rdi], rax
  3064 0000258D BE00000000              	mov rsi, 0 ;index
  3065                                  .L_lambda_opt_stack_shrink_loop_03ca:	; start of stack shrink loop
  3066 00002592 4883FE03                	cmp rsi, 3
  3067 00002596 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_03ca
  3068 00002598 BF02000000              	mov rdi, 2
  3069 0000259D 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  3070 000025A0 4889D9                  	mov rcx, rbx
  3071 000025A3 4829F1                  	sub rcx, rsi
  3072 000025A6 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  3073 000025A9 4889FA                  	mov rdx, rdi
  3074 000025AC 48C1E203                	shl rdx, 3
  3075 000025B0 4801E2                  	add rdx, rsp
  3076 000025B3 48C1E103                	shl rcx, 3
  3077 000025B7 4801E1                  	add rcx, rsp
  3078 000025BA 488B12                  	mov rdx, [rdx]
  3079 000025BD 488911                  	mov [rcx], rdx
  3080 000025C0 48FFC6                  	inc rsi
  3081 000025C3 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_03ca
  3082                                  .L_lambda_opt_stack_shrink_loop_exit_03ca:	; end of stack shrink loop
  3083 000025C5 4883EB02                	sub rbx, 2 ; rbx has number of args
  3084 000025C9 4883EB01                	sub rbx, 1
  3085 000025CD 48C1E303                	shl rbx, 3
  3086 000025D1 4801DC                  	add rsp, rbx
  3087 000025D4 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  3088                                  .L_lambda_opt_stack_adjusted_03ca:
  3089 000025DD C8000000                	enter 0, 0
  3090 000025E1 488B4520                	mov rax, PARAM(0)
  3091 000025E5 50                      	push rax
  3092 000025E6 6A01                    	push 1
  3093 000025E8 488B0425[00000000]      	mov rax, qword [free_var_0]
  3094                                  	assert_closure(rax)
    65 000025F0 803805              <1>  cmp byte [%1], %2
    66 000025F3 0F85523B0000        <1>  jne L_error_incorrect_type
  3095 000025F9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3096 000025FD 53                      	push rbx
  3097 000025FE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3098 00002602 FFD3                    	call rbx
  3099 00002604 483D[02000000]          	cmp rax, sob_boolean_false
  3100 0000260A 740D                    	je .L_if_else_0915
  3101 0000260C 488D0425[01000000]      	lea rax, [1 + L_constants]
  3102 00002614 E9C5000000              	jmp .L_if_end_0915
  3103                                  	.L_if_else_0915:
  3104 00002619 488B4520                	mov rax, PARAM(0)
  3105 0000261D 50                      	push rax
  3106 0000261E 6A01                    	push 1
  3107 00002620 488B0425[88000000]      	mov rax, qword [free_var_17]
  3108                                  	assert_closure(rax)
    65 00002628 803805              <1>  cmp byte [%1], %2
    66 0000262B 0F851A3B0000        <1>  jne L_error_incorrect_type
  3109 00002631 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3110 00002635 53                      	push rbx
  3111 00002636 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3112 0000263A FFD3                    	call rbx
  3113 0000263C 50                      	push rax
  3114 0000263D 488B4520                	mov rax, PARAM(0)
  3115 00002641 50                      	push rax
  3116 00002642 6A01                    	push 1
  3117 00002644 488B0425[80000000]      	mov rax, qword [free_var_16]
  3118                                  	assert_closure(rax)
    65 0000264C 803805              <1>  cmp byte [%1], %2
    66 0000264F 0F85F63A0000        <1>  jne L_error_incorrect_type
  3119 00002655 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3120 00002659 53                      	push rbx
  3121 0000265A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3122 0000265E FFD3                    	call rbx
  3123 00002660 50                      	push rax
  3124 00002661 6A02                    	push 2
  3125 00002663 488B4510                	mov rax, qword [rbp + 8*2]
  3126 00002667 488B00                  	mov rax, qword [rax + 8*0]
  3127 0000266A 488B00                  	mov rax, qword [rax + 8*0]
  3128 0000266D 488B00                  	mov rax, qword [rax]
  3129                                  	assert_closure(rax)
    65 00002670 803805              <1>  cmp byte [%1], %2
    66 00002673 0F85D23A0000        <1>  jne L_error_incorrect_type
  3130 00002679 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3131 0000267D 53                      	push rbx
  3132 0000267E FF7508                  	push RET_ADDR
  3133 00002681 488B7D18                	mov rdi, COUNT
  3134 00002685 4883C703                	add rdi, 3
  3135 00002689 48C1E703                	shl rdi, 3
  3136 0000268D 4801EF                  	add rdi, rbp
  3137 00002690 488B6D00                	mov rbp, OLD_RDP
  3138 00002694 BE00000000              	mov rsi, 0
  3139                                  .L_tc_recycle_frame_loop_0fab:	 ; start recycle frame loop
  3140 00002699 4883FE05                	cmp rsi, 5
  3141 0000269D 7427                    	je .L_tc_recycle_frame_done_0fab
  3142 0000269F B904000000              	mov rcx, 4
  3143 000026A4 4829F1                  	sub rcx, rsi
  3144 000026A7 48C1E103                	shl rcx, 3
  3145 000026AB 4801E1                  	add rcx, rsp ; rcx is the address to move
  3146 000026AE 4889F3                  	mov rbx, rsi
  3147 000026B1 48C1E303                	shl rbx, 3
  3148 000026B5 48F7DB                  	neg rbx
  3149 000026B8 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3150 000026BB 488B09                  	mov rcx, [rcx]
  3151 000026BE 48890B                  	mov [rbx], rcx
  3152 000026C1 48FFC6                  	inc rsi
  3153 000026C4 EBD3                    	jmp .L_tc_recycle_frame_loop_0fab
  3154                                  .L_tc_recycle_frame_done_0fab:	 ; end recycle frame loop
  3155 000026C6 BB04000000              	mov rbx, 4
  3156 000026CB 48C1E303                	shl rbx, 3
  3157 000026CF 48F7DB                  	neg rbx
  3158 000026D2 4801FB                  	add rbx, rdi
  3159 000026D5 4889DC                  	mov rsp, rbx
  3160 000026D8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3161 000026DC FFE3                    	jmp rbx
  3162                                  	.L_if_end_0915:
  3163 000026DE C9                      	leave
  3164 000026DF C21800                  	ret AND_KILL_FRAME(1)
  3165                                  .L_lambda_opt_end_03ca:	; new closure is in rax
  3166 000026E2 C9                      	leave
  3167 000026E3 C22000                  	ret 8 * (2 + 2)
  3168                                  .L_lambda_simple_end_0a31:	; new closure is in rax
  3169                                  	assert_closure(rax)
    65 000026E6 803805              <1>  cmp byte [%1], %2
    66 000026E9 0F855C3A0000        <1>  jne L_error_incorrect_type
  3170 000026EF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3171 000026F3 53                      	push rbx
  3172 000026F4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3173 000026F8 FFD3                    	call rbx
  3174 000026FA 48890425[E8010000]      	mov qword [free_var_61], rax
  3175 00002702 48B8-                   	mov rax, sob_void
  3175 00002704 [0000000000000000] 
  3176                                  
  3177 0000270C 4889C7                  	mov rdi, rax
  3178 0000270F E8C8210000              	call print_sexpr_if_not_void
  3179                                  
  3180 00002714 488D0425[17000000]      	lea rax, [23 + L_constants]
  3181 0000271C 50                      	push rax
  3182 0000271D 6A01                    	push 1
  3183 0000271F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3184 00002724 E8A2210000              	call malloc
  3185 00002729 50                      	push rax
  3186 0000272A BF00000000              	mov rdi, 8 * 0	; new rib
  3187 0000272F E897210000              	call malloc
  3188 00002734 50                      	push rax
  3189 00002735 BF08000000              	mov rdi, 8 * 1	; extended env
  3190 0000273A E88C210000              	call malloc
  3191 0000273F 488B7D10                	mov rdi, ENV
  3192 00002743 BE00000000              	mov rsi, 0
  3193 00002748 BA01000000              	mov rdx, 1
  3194                                  .L_lambda_simple_env_loop_0a34:	; ext_env[i + 1] <-- env[i]
  3195 0000274D 4883FE00                	cmp rsi, 0
  3196 00002751 7410                    	je .L_lambda_simple_env_end_0a34
  3197 00002753 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3198 00002757 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3199 0000275B 48FFC6                  	inc rsi
  3200 0000275E 48FFC2                  	inc rdx
  3201 00002761 EBEA                    	jmp .L_lambda_simple_env_loop_0a34
  3202                                  .L_lambda_simple_env_end_0a34:
  3203 00002763 5B                      	pop rbx
  3204 00002764 BE00000000              	mov rsi, 0
  3205                                  .L_lambda_simple_params_loop_0a34:	; copy params
  3206 00002769 4883FE00                	cmp rsi, 0
  3207 0000276D 740E                    	je .L_lambda_simple_params_end_0a34
  3208 0000276F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3209 00002774 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3210 00002778 48FFC6                  	inc rsi
  3211 0000277B EBEC                    	jmp .L_lambda_simple_params_loop_0a34
  3212                                  .L_lambda_simple_params_end_0a34:
  3213 0000277D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3214 00002780 4889C3                  	mov rbx, rax
  3215 00002783 58                      	pop rax
  3216 00002784 C60005                  	mov byte [rax], T_closure
  3217 00002787 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3218 0000278B 48C74009[98270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a34
  3219 00002793 E91C040000              	jmp .L_lambda_simple_end_0a34
  3220                                  .L_lambda_simple_code_0a34:	; lambda-simple body
  3221 00002798 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3222 0000279E 740B                    	je .L_lambda_simple_arity_check_ok_0a34
  3223 000027A0 FF742410                	push qword [rsp + 8 * 2]
  3224 000027A4 6A01                    	push 1
  3225 000027A6 E9D9200000              	jmp L_error_incorrect_arity_simple
  3226                                  .L_lambda_simple_arity_check_ok_0a34:
  3227 000027AB C8000000                	enter 0, 0
  3228 000027AF BF08000000              	mov qword rdi, 8
  3229 000027B4 E812210000              	call malloc
  3230 000027B9 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  3231 000027BD 48B8-                   	mov rax, sob_void
  3231 000027BF [0000000000000000] 
  3232                                  
  3233 000027C7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3234 000027CC E8FA200000              	call malloc
  3235 000027D1 50                      	push rax
  3236 000027D2 BF08000000              	mov rdi, 8 * 1	; new rib
  3237 000027D7 E8EF200000              	call malloc
  3238 000027DC 50                      	push rax
  3239 000027DD BF10000000              	mov rdi, 8 * 2	; extended env
  3240 000027E2 E8E4200000              	call malloc
  3241 000027E7 488B7D10                	mov rdi, ENV
  3242 000027EB BE00000000              	mov rsi, 0
  3243 000027F0 BA01000000              	mov rdx, 1
  3244                                  .L_lambda_simple_env_loop_0a35:	; ext_env[i + 1] <-- env[i]
  3245 000027F5 4883FE01                	cmp rsi, 1
  3246 000027F9 7410                    	je .L_lambda_simple_env_end_0a35
  3247 000027FB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3248 000027FF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3249 00002803 48FFC6                  	inc rsi
  3250 00002806 48FFC2                  	inc rdx
  3251 00002809 EBEA                    	jmp .L_lambda_simple_env_loop_0a35
  3252                                  .L_lambda_simple_env_end_0a35:
  3253 0000280B 5B                      	pop rbx
  3254 0000280C BE00000000              	mov rsi, 0
  3255                                  .L_lambda_simple_params_loop_0a35:	; copy params
  3256 00002811 4883FE01                	cmp rsi, 1
  3257 00002815 740E                    	je .L_lambda_simple_params_end_0a35
  3258 00002817 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3259 0000281C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3260 00002820 48FFC6                  	inc rsi
  3261 00002823 EBEC                    	jmp .L_lambda_simple_params_loop_0a35
  3262                                  .L_lambda_simple_params_end_0a35:
  3263 00002825 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3264 00002828 4889C3                  	mov rbx, rax
  3265 0000282B 58                      	pop rax
  3266 0000282C C60005                  	mov byte [rax], T_closure
  3267 0000282F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3268 00002833 48C74009[40280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a35
  3269 0000283B E95D010000              	jmp .L_lambda_simple_end_0a35
  3270                                  .L_lambda_simple_code_0a35:	; lambda-simple body
  3271 00002840 48837C241003            	cmp qword [rsp + 8 * 2], 3
  3272 00002846 740B                    	je .L_lambda_simple_arity_check_ok_0a35
  3273 00002848 FF742410                	push qword [rsp + 8 * 2]
  3274 0000284C 6A03                    	push 3
  3275 0000284E E931200000              	jmp L_error_incorrect_arity_simple
  3276                                  .L_lambda_simple_arity_check_ok_0a35:
  3277 00002853 C8000000                	enter 0, 0
  3278 00002857 488B4530                	mov rax, PARAM(2)
  3279 0000285B 50                      	push rax
  3280 0000285C 488B0425[00000000]      	mov rax, qword [free_var_0]
  3281 00002864 50                      	push rax
  3282 00002865 6A02                    	push 2
  3283 00002867 488B0425[C8010000]      	mov rax, qword [free_var_57]
  3284                                  	assert_closure(rax)
    65 0000286F 803805              <1>  cmp byte [%1], %2
    66 00002872 0F85D3380000        <1>  jne L_error_incorrect_type
  3285 00002878 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3286 0000287C 53                      	push rbx
  3287 0000287D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3288 00002881 FFD3                    	call rbx
  3289 00002883 483D[02000000]          	cmp rax, sob_boolean_false
  3290 00002889 7409                    	je .L_if_else_0916
  3291 0000288B 488B4528                	mov rax, PARAM(1)
  3292 0000288F E905010000              	jmp .L_if_end_0916
  3293                                  	.L_if_else_0916:
  3294 00002894 488B4530                	mov rax, PARAM(2)
  3295 00002898 50                      	push rax
  3296 00002899 488B0425[88000000]      	mov rax, qword [free_var_17]
  3297 000028A1 50                      	push rax
  3298 000028A2 6A02                    	push 2
  3299 000028A4 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3300                                  	assert_closure(rax)
    65 000028AC 803805              <1>  cmp byte [%1], %2
    66 000028AF 0F8596380000        <1>  jne L_error_incorrect_type
  3301 000028B5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3302 000028B9 53                      	push rbx
  3303 000028BA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3304 000028BE FFD3                    	call rbx
  3305 000028C0 50                      	push rax
  3306 000028C1 488B4530                	mov rax, PARAM(2)
  3307 000028C5 50                      	push rax
  3308 000028C6 488B0425[80000000]      	mov rax, qword [free_var_16]
  3309 000028CE 50                      	push rax
  3310 000028CF 6A02                    	push 2
  3311 000028D1 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3312                                  	assert_closure(rax)
    65 000028D9 803805              <1>  cmp byte [%1], %2
    66 000028DC 0F8569380000        <1>  jne L_error_incorrect_type
  3313 000028E2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3314 000028E6 53                      	push rbx
  3315 000028E7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3316 000028EB FFD3                    	call rbx
  3317 000028ED 50                      	push rax
  3318 000028EE 488B4528                	mov rax, PARAM(1)
  3319 000028F2 50                      	push rax
  3320 000028F3 488B4520                	mov rax, PARAM(0)
  3321 000028F7 50                      	push rax
  3322 000028F8 6A03                    	push 3
  3323 000028FA 488B0425[C0010000]      	mov rax, qword [free_var_56]
  3324                                  	assert_closure(rax)
    65 00002902 803805              <1>  cmp byte [%1], %2
    66 00002905 0F8540380000        <1>  jne L_error_incorrect_type
  3325 0000290B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3326 0000290F 53                      	push rbx
  3327 00002910 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3328 00002914 FFD3                    	call rbx
  3329 00002916 50                      	push rax
  3330 00002917 488B4520                	mov rax, PARAM(0)
  3331 0000291B 50                      	push rax
  3332 0000291C 6A03                    	push 3
  3333 0000291E 488B4510                	mov rax, qword [rbp + 8*2]
  3334 00002922 488B00                  	mov rax, qword [rax + 8*0]
  3335 00002925 488B00                  	mov rax, qword [rax + 8*0]
  3336 00002928 488B00                  	mov rax, qword [rax]
  3337                                  	assert_closure(rax)
    65 0000292B 803805              <1>  cmp byte [%1], %2
    66 0000292E 0F8517380000        <1>  jne L_error_incorrect_type
  3338 00002934 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3339 00002938 53                      	push rbx
  3340 00002939 FF7508                  	push RET_ADDR
  3341 0000293C 488B7D18                	mov rdi, COUNT
  3342 00002940 4883C703                	add rdi, 3
  3343 00002944 48C1E703                	shl rdi, 3
  3344 00002948 4801EF                  	add rdi, rbp
  3345 0000294B 488B6D00                	mov rbp, OLD_RDP
  3346 0000294F BE00000000              	mov rsi, 0
  3347                                  .L_tc_recycle_frame_loop_0fac:	 ; start recycle frame loop
  3348 00002954 4883FE06                	cmp rsi, 6
  3349 00002958 7427                    	je .L_tc_recycle_frame_done_0fac
  3350 0000295A B905000000              	mov rcx, 5
  3351 0000295F 4829F1                  	sub rcx, rsi
  3352 00002962 48C1E103                	shl rcx, 3
  3353 00002966 4801E1                  	add rcx, rsp ; rcx is the address to move
  3354 00002969 4889F3                  	mov rbx, rsi
  3355 0000296C 48C1E303                	shl rbx, 3
  3356 00002970 48F7DB                  	neg rbx
  3357 00002973 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3358 00002976 488B09                  	mov rcx, [rcx]
  3359 00002979 48890B                  	mov [rbx], rcx
  3360 0000297C 48FFC6                  	inc rsi
  3361 0000297F EBD3                    	jmp .L_tc_recycle_frame_loop_0fac
  3362                                  .L_tc_recycle_frame_done_0fac:	 ; end recycle frame loop
  3363 00002981 BB05000000              	mov rbx, 5
  3364 00002986 48C1E303                	shl rbx, 3
  3365 0000298A 48F7DB                  	neg rbx
  3366 0000298D 4801FB                  	add rbx, rdi
  3367 00002990 4889DC                  	mov rsp, rbx
  3368 00002993 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3369 00002997 FFE3                    	jmp rbx
  3370                                  	.L_if_end_0916:
  3371 00002999 C9                      	leave
  3372 0000299A C22800                  	ret 8 * (2 + 3)
  3373                                  .L_lambda_simple_end_0a35:	; new closure is in rax
  3374 0000299D 50                      	push rax
  3375 0000299E 488B4520                	mov rax, PARAM(0)
  3376 000029A2 8F00                    	pop qword [rax]
  3377 000029A4 48B8-                   	mov rax, sob_void
  3377 000029A6 [0000000000000000] 
  3378                                  
  3379 000029AE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3380 000029B3 E8131F0000              	call malloc
  3381 000029B8 50                      	push rax
  3382 000029B9 BF08000000              	mov rdi, 8 * 1	; new rib
  3383 000029BE E8081F0000              	call malloc
  3384 000029C3 50                      	push rax
  3385 000029C4 BF10000000              	mov rdi, 8 * 2	; extended env
  3386 000029C9 E8FD1E0000              	call malloc
  3387 000029CE 488B7D10                	mov rdi, ENV
  3388 000029D2 BE00000000              	mov rsi, 0
  3389 000029D7 BA01000000              	mov rdx, 1
  3390                                  .L_lambda_opt_env_loop_03cb:	; ext_env[i + 1] <-- env[i]
  3391 000029DC 4883FE01                	cmp rsi, 1
  3392 000029E0 7410                    	je .L_lambda_opt_env_end_03cb
  3393 000029E2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3394 000029E6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3395 000029EA 48FFC6                  	inc rsi
  3396 000029ED 48FFC2                  	inc rdx
  3397 000029F0 EBEA                    	jmp .L_lambda_opt_env_loop_03cb
  3398                                  .L_lambda_opt_env_end_03cb:
  3399 000029F2 5B                      	pop rbx
  3400 000029F3 BE00000000              	mov rsi, 0
  3401                                  .L_lambda_opt_params_loop_03cb:	; copy params
  3402 000029F8 4883FE01                	cmp rsi, 1
  3403 000029FC 740E                    	je .L_lambda_opt_params_end_03cb
  3404 000029FE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3405 00002A03 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3406 00002A07 48FFC6                  	inc rsi
  3407 00002A0A EBEC                    	jmp .L_lambda_opt_params_loop_03cb
  3408                                  .L_lambda_opt_params_end_03cb:
  3409 00002A0C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3410 00002A0F 4889C3                  	mov rbx, rax
  3411 00002A12 58                      	pop rax
  3412 00002A13 C60005                  	mov byte [rax], T_closure
  3413 00002A16 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3414 00002A1A 48C74009[272A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_03cb
  3415 00002A22 E989010000              	jmp .L_lambda_opt_end_03cb
  3416                                  .L_lambda_opt_code_03cb:	; lambda-opt body
  3417 00002A27 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  3418 00002A2C 4889FB                  	mov rbx, rdi
  3419 00002A2F 4883EB02                	sub rbx, 2 ; rbx is the num of extra args
  3420 00002A33 4883FB00                	cmp rbx, 0
  3421 00002A37 7F45                    	jg .L_lambda_opt_arity_check_more_03cb
  3422                                  .L_lambda_opt_arity_check_exact_03cb:	 ; if params in opt is exact
  3423 00002A39 4883EC08                	sub rsp, 8
  3424 00002A3D BE00000000              	mov rsi, 0 ; index
  3425                                  .L_lambda_opt_stack_enlarge_loop_03cb:	 ; stack loop enlarge start
  3426 00002A42 4883FE05                	cmp rsi, 5
  3427 00002A46 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_03cb
  3428 00002A48 4889F7                  	mov rdi, rsi
  3429 00002A4B 48FFC7                  	inc rdi
  3430 00002A4E 48C1E703                	shl rdi, 3
  3431 00002A52 4801E7                  	add rdi, rsp
  3432 00002A55 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  3433 00002A58 4883EB08                	sub rbx, 8
  3434 00002A5C 488B3F                  	mov rdi, [rdi]
  3435 00002A5F 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  3436 00002A62 48FFC6                  	inc rsi
  3437 00002A65 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_03cb
  3438                                  .L_lambda_opt_stack_enlarge_loop_exit_03cb:	 ; end of stack enlarge loop
  3439 00002A67 48C7442428-             	mov qword [rsp + 5*8], sob_nil
  3439 00002A6C [01000000]         
  3440 00002A70 48C744241003000000      	mov qword [rsp + 2*8], 3
  3441 00002A79 E99E000000              	jmp .L_lambda_opt_stack_adjusted_03cb
  3442                                  .L_lambda_opt_arity_check_more_03cb:	 ; if params in opt is more
  3443 00002A7E 48B8-                   	mov rax, sob_nil
  3443 00002A80 [0100000000000000] 
  3444 00002A88 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  3445 00002A8B 48FFCE                  	dec rsi
  3446                                  .L_lambda_opt_list_create_loop_03cb:	; start of list creation loop
  3447 00002A8E 4883FEFF                	cmp rsi, -1
  3448 00002A92 7422                    	je .L_lambda_opt_list_create_loop_exit_03cb
  3449 00002A94 488D4E05                	lea rcx, [rsi + (3 + 2)]
  3450 00002A98 48C1E103                	shl rcx, 3
  3451 00002A9C 4801E1                  	add rcx, rsp
  3452 00002A9F 488B09                  	mov rcx, [rcx]
  3453 00002AA2 56                      	push rsi ; save params
  3454 00002AA3 53                      	push rbx
  3455                                  
  3456 00002AA4 50                      	push rax ; cdr
  3457 00002AA5 51                      	push rcx ; car
  3458 00002AA6 6A02                    	push qword 2 ; push num of args
  3459 00002AA8 6A01                    	push qword 1 ; push garbage as env
  3460 00002AAA E8A3270000              	call L_code_ptr_cons
  3461                                  
  3462 00002AAF 5B                      	pop rbx ; restore params
  3463 00002AB0 5E                      	pop rsi
  3464 00002AB1 48FFCE                  	dec rsi
  3465 00002AB4 EBD8                    	jmp .L_lambda_opt_list_create_loop_03cb
  3466                                  .L_lambda_opt_list_create_loop_exit_03cb:	; end of list creation loop
  3467 00002AB6 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  3468 00002ABB 4883C302                	add rbx, 2
  3469 00002ABF 4889DF                  	mov rdi, rbx
  3470 00002AC2 48C1E703                	shl rdi,3
  3471 00002AC6 4801E7                  	add rdi, rsp
  3472 00002AC9 488907                  	mov [rdi], rax
  3473 00002ACC BE00000000              	mov rsi, 0 ;index
  3474                                  .L_lambda_opt_stack_shrink_loop_03cb:	; start of stack shrink loop
  3475 00002AD1 4883FE05                	cmp rsi, 5
  3476 00002AD5 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_03cb
  3477 00002AD7 BF04000000              	mov rdi, 4
  3478 00002ADC 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  3479 00002ADF 4889D9                  	mov rcx, rbx
  3480 00002AE2 4829F1                  	sub rcx, rsi
  3481 00002AE5 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  3482 00002AE8 4889FA                  	mov rdx, rdi
  3483 00002AEB 48C1E203                	shl rdx, 3
  3484 00002AEF 4801E2                  	add rdx, rsp
  3485 00002AF2 48C1E103                	shl rcx, 3
  3486 00002AF6 4801E1                  	add rcx, rsp
  3487 00002AF9 488B12                  	mov rdx, [rdx]
  3488 00002AFC 488911                  	mov [rcx], rdx
  3489 00002AFF 48FFC6                  	inc rsi
  3490 00002B02 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_03cb
  3491                                  .L_lambda_opt_stack_shrink_loop_exit_03cb:	; end of stack shrink loop
  3492 00002B04 4883EB02                	sub rbx, 2 ; rbx has number of args
  3493 00002B08 4883EB03                	sub rbx, 3
  3494 00002B0C 48C1E303                	shl rbx, 3
  3495 00002B10 4801DC                  	add rsp, rbx
  3496 00002B13 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  3497                                  .L_lambda_opt_stack_adjusted_03cb:
  3498 00002B1C C8000000                	enter 0, 0
  3499 00002B20 488B4530                	mov rax, PARAM(2)
  3500 00002B24 50                      	push rax
  3501 00002B25 488B4528                	mov rax, PARAM(1)
  3502 00002B29 50                      	push rax
  3503 00002B2A 488B4520                	mov rax, PARAM(0)
  3504 00002B2E 50                      	push rax
  3505 00002B2F 6A03                    	push 3
  3506 00002B31 488B4510                	mov rax, qword [rbp + 8*2]
  3507 00002B35 488B00                  	mov rax, qword [rax + 8*0]
  3508 00002B38 488B00                  	mov rax, qword [rax + 8*0]
  3509 00002B3B 488B00                  	mov rax, qword [rax]
  3510                                  	assert_closure(rax)
    65 00002B3E 803805              <1>  cmp byte [%1], %2
    66 00002B41 0F8504360000        <1>  jne L_error_incorrect_type
  3511 00002B47 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3512 00002B4B 53                      	push rbx
  3513 00002B4C FF7508                  	push RET_ADDR
  3514 00002B4F 488B7D18                	mov rdi, COUNT
  3515 00002B53 4883C703                	add rdi, 3
  3516 00002B57 48C1E703                	shl rdi, 3
  3517 00002B5B 4801EF                  	add rdi, rbp
  3518 00002B5E 488B6D00                	mov rbp, OLD_RDP
  3519 00002B62 BE00000000              	mov rsi, 0
  3520                                  .L_tc_recycle_frame_loop_0fad:	 ; start recycle frame loop
  3521 00002B67 4883FE06                	cmp rsi, 6
  3522 00002B6B 7427                    	je .L_tc_recycle_frame_done_0fad
  3523 00002B6D B905000000              	mov rcx, 5
  3524 00002B72 4829F1                  	sub rcx, rsi
  3525 00002B75 48C1E103                	shl rcx, 3
  3526 00002B79 4801E1                  	add rcx, rsp ; rcx is the address to move
  3527 00002B7C 4889F3                  	mov rbx, rsi
  3528 00002B7F 48C1E303                	shl rbx, 3
  3529 00002B83 48F7DB                  	neg rbx
  3530 00002B86 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3531 00002B89 488B09                  	mov rcx, [rcx]
  3532 00002B8C 48890B                  	mov [rbx], rcx
  3533 00002B8F 48FFC6                  	inc rsi
  3534 00002B92 EBD3                    	jmp .L_tc_recycle_frame_loop_0fad
  3535                                  .L_tc_recycle_frame_done_0fad:	 ; end recycle frame loop
  3536 00002B94 BB05000000              	mov rbx, 5
  3537 00002B99 48C1E303                	shl rbx, 3
  3538 00002B9D 48F7DB                  	neg rbx
  3539 00002BA0 4801FB                  	add rbx, rdi
  3540 00002BA3 4889DC                  	mov rsp, rbx
  3541 00002BA6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3542 00002BAA FFE3                    	jmp rbx
  3543 00002BAC C9                      	leave
  3544 00002BAD C22800                  	ret AND_KILL_FRAME(3)
  3545                                  .L_lambda_opt_end_03cb:	; new closure is in rax
  3546 00002BB0 C9                      	leave
  3547 00002BB1 C21800                  	ret 8 * (2 + 1)
  3548                                  .L_lambda_simple_end_0a34:	; new closure is in rax
  3549                                  	assert_closure(rax)
    65 00002BB4 803805              <1>  cmp byte [%1], %2
    66 00002BB7 0F858E350000        <1>  jne L_error_incorrect_type
  3550 00002BBD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3551 00002BC1 53                      	push rbx
  3552 00002BC2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3553 00002BC6 FFD3                    	call rbx
  3554 00002BC8 48890425[F0010000]      	mov qword [free_var_62], rax
  3555 00002BD0 48B8-                   	mov rax, sob_void
  3555 00002BD2 [0000000000000000] 
  3556                                  
  3557 00002BDA 4889C7                  	mov rdi, rax
  3558 00002BDD E8FA1C0000              	call print_sexpr_if_not_void
  3559                                  
  3560 00002BE2 488D0425[17000000]      	lea rax, [23 + L_constants]
  3561 00002BEA 50                      	push rax
  3562 00002BEB 6A01                    	push 1
  3563 00002BED BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3564 00002BF2 E8D41C0000              	call malloc
  3565 00002BF7 50                      	push rax
  3566 00002BF8 BF00000000              	mov rdi, 8 * 0	; new rib
  3567 00002BFD E8C91C0000              	call malloc
  3568 00002C02 50                      	push rax
  3569 00002C03 BF08000000              	mov rdi, 8 * 1	; extended env
  3570 00002C08 E8BE1C0000              	call malloc
  3571 00002C0D 488B7D10                	mov rdi, ENV
  3572 00002C11 BE00000000              	mov rsi, 0
  3573 00002C16 BA01000000              	mov rdx, 1
  3574                                  .L_lambda_simple_env_loop_0a36:	; ext_env[i + 1] <-- env[i]
  3575 00002C1B 4883FE00                	cmp rsi, 0
  3576 00002C1F 7410                    	je .L_lambda_simple_env_end_0a36
  3577 00002C21 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3578 00002C25 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3579 00002C29 48FFC6                  	inc rsi
  3580 00002C2C 48FFC2                  	inc rdx
  3581 00002C2F EBEA                    	jmp .L_lambda_simple_env_loop_0a36
  3582                                  .L_lambda_simple_env_end_0a36:
  3583 00002C31 5B                      	pop rbx
  3584 00002C32 BE00000000              	mov rsi, 0
  3585                                  .L_lambda_simple_params_loop_0a36:	; copy params
  3586 00002C37 4883FE00                	cmp rsi, 0
  3587 00002C3B 740E                    	je .L_lambda_simple_params_end_0a36
  3588 00002C3D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3589 00002C42 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3590 00002C46 48FFC6                  	inc rsi
  3591 00002C49 EBEC                    	jmp .L_lambda_simple_params_loop_0a36
  3592                                  .L_lambda_simple_params_end_0a36:
  3593 00002C4B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3594 00002C4E 4889C3                  	mov rbx, rax
  3595 00002C51 58                      	pop rax
  3596 00002C52 C60005                  	mov byte [rax], T_closure
  3597 00002C55 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3598 00002C59 48C74009[662C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a36
  3599 00002C61 E963040000              	jmp .L_lambda_simple_end_0a36
  3600                                  .L_lambda_simple_code_0a36:	; lambda-simple body
  3601 00002C66 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3602 00002C6C 740B                    	je .L_lambda_simple_arity_check_ok_0a36
  3603 00002C6E FF742410                	push qword [rsp + 8 * 2]
  3604 00002C72 6A01                    	push 1
  3605 00002C74 E90B1C0000              	jmp L_error_incorrect_arity_simple
  3606                                  .L_lambda_simple_arity_check_ok_0a36:
  3607 00002C79 C8000000                	enter 0, 0
  3608 00002C7D BF08000000              	mov qword rdi, 8
  3609 00002C82 E8441C0000              	call malloc
  3610 00002C87 48894520                	mov qword [rbp + 8*(4 + 0)], rax
  3611 00002C8B 48B8-                   	mov rax, sob_void
  3611 00002C8D [0000000000000000] 
  3612                                  
  3613 00002C95 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3614 00002C9A E82C1C0000              	call malloc
  3615 00002C9F 50                      	push rax
  3616 00002CA0 BF08000000              	mov rdi, 8 * 1	; new rib
  3617 00002CA5 E8211C0000              	call malloc
  3618 00002CAA 50                      	push rax
  3619 00002CAB BF10000000              	mov rdi, 8 * 2	; extended env
  3620 00002CB0 E8161C0000              	call malloc
  3621 00002CB5 488B7D10                	mov rdi, ENV
  3622 00002CB9 BE00000000              	mov rsi, 0
  3623 00002CBE BA01000000              	mov rdx, 1
  3624                                  .L_lambda_simple_env_loop_0a37:	; ext_env[i + 1] <-- env[i]
  3625 00002CC3 4883FE01                	cmp rsi, 1
  3626 00002CC7 7410                    	je .L_lambda_simple_env_end_0a37
  3627 00002CC9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3628 00002CCD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3629 00002CD1 48FFC6                  	inc rsi
  3630 00002CD4 48FFC2                  	inc rdx
  3631 00002CD7 EBEA                    	jmp .L_lambda_simple_env_loop_0a37
  3632                                  .L_lambda_simple_env_end_0a37:
  3633 00002CD9 5B                      	pop rbx
  3634 00002CDA BE00000000              	mov rsi, 0
  3635                                  .L_lambda_simple_params_loop_0a37:	; copy params
  3636 00002CDF 4883FE01                	cmp rsi, 1
  3637 00002CE3 740E                    	je .L_lambda_simple_params_end_0a37
  3638 00002CE5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3639 00002CEA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3640 00002CEE 48FFC6                  	inc rsi
  3641 00002CF1 EBEC                    	jmp .L_lambda_simple_params_loop_0a37
  3642                                  .L_lambda_simple_params_end_0a37:
  3643 00002CF3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3644 00002CF6 4889C3                  	mov rbx, rax
  3645 00002CF9 58                      	pop rax
  3646 00002CFA C60005                  	mov byte [rax], T_closure
  3647 00002CFD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3648 00002D01 48C74009[0E2D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a37
  3649 00002D09 E9A4010000              	jmp .L_lambda_simple_end_0a37
  3650                                  .L_lambda_simple_code_0a37:	; lambda-simple body
  3651 00002D0E 48837C241003            	cmp qword [rsp + 8 * 2], 3
  3652 00002D14 740B                    	je .L_lambda_simple_arity_check_ok_0a37
  3653 00002D16 FF742410                	push qword [rsp + 8 * 2]
  3654 00002D1A 6A03                    	push 3
  3655 00002D1C E9631B0000              	jmp L_error_incorrect_arity_simple
  3656                                  .L_lambda_simple_arity_check_ok_0a37:
  3657 00002D21 C8000000                	enter 0, 0
  3658 00002D25 488B4530                	mov rax, PARAM(2)
  3659 00002D29 50                      	push rax
  3660 00002D2A 488B0425[00000000]      	mov rax, qword [free_var_0]
  3661 00002D32 50                      	push rax
  3662 00002D33 6A02                    	push 2
  3663 00002D35 488B0425[C8010000]      	mov rax, qword [free_var_57]
  3664                                  	assert_closure(rax)
    65 00002D3D 803805              <1>  cmp byte [%1], %2
    66 00002D40 0F8505340000        <1>  jne L_error_incorrect_type
  3665 00002D46 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3666 00002D4A 53                      	push rbx
  3667 00002D4B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3668 00002D4F FFD3                    	call rbx
  3669 00002D51 483D[02000000]          	cmp rax, sob_boolean_false
  3670 00002D57 7409                    	je .L_if_else_0917
  3671 00002D59 488B4528                	mov rax, PARAM(1)
  3672 00002D5D E94C010000              	jmp .L_if_end_0917
  3673                                  	.L_if_else_0917:
  3674 00002D62 488D0425[01000000]      	lea rax, [1 + L_constants]
  3675 00002D6A 50                      	push rax
  3676 00002D6B 488B4530                	mov rax, PARAM(2)
  3677 00002D6F 50                      	push rax
  3678 00002D70 488B0425[88000000]      	mov rax, qword [free_var_17]
  3679 00002D78 50                      	push rax
  3680 00002D79 6A02                    	push 2
  3681 00002D7B 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3682                                  	assert_closure(rax)
    65 00002D83 803805              <1>  cmp byte [%1], %2
    66 00002D86 0F85BF330000        <1>  jne L_error_incorrect_type
  3683 00002D8C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3684 00002D90 53                      	push rbx
  3685 00002D91 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3686 00002D95 FFD3                    	call rbx
  3687 00002D97 50                      	push rax
  3688 00002D98 488B4528                	mov rax, PARAM(1)
  3689 00002D9C 50                      	push rax
  3690 00002D9D 488B4520                	mov rax, PARAM(0)
  3691 00002DA1 50                      	push rax
  3692 00002DA2 6A03                    	push 3
  3693 00002DA4 488B4510                	mov rax, qword [rbp + 8*2]
  3694 00002DA8 488B00                  	mov rax, qword [rax + 8*0]
  3695 00002DAB 488B00                  	mov rax, qword [rax + 8*0]
  3696 00002DAE 488B00                  	mov rax, qword [rax]
  3697                                  	assert_closure(rax)
    65 00002DB1 803805              <1>  cmp byte [%1], %2
    66 00002DB4 0F8591330000        <1>  jne L_error_incorrect_type
  3698 00002DBA 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3699 00002DBE 53                      	push rbx
  3700 00002DBF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3701 00002DC3 FFD3                    	call rbx
  3702 00002DC5 50                      	push rax
  3703 00002DC6 6A02                    	push 2
  3704 00002DC8 488B0425[68000000]      	mov rax, qword [free_var_13]
  3705                                  	assert_closure(rax)
    65 00002DD0 803805              <1>  cmp byte [%1], %2
    66 00002DD3 0F8572330000        <1>  jne L_error_incorrect_type
  3706 00002DD9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3707 00002DDD 53                      	push rbx
  3708 00002DDE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3709 00002DE2 FFD3                    	call rbx
  3710 00002DE4 50                      	push rax
  3711 00002DE5 488B4530                	mov rax, PARAM(2)
  3712 00002DE9 50                      	push rax
  3713 00002DEA 488B0425[80000000]      	mov rax, qword [free_var_16]
  3714 00002DF2 50                      	push rax
  3715 00002DF3 6A02                    	push 2
  3716 00002DF5 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3717                                  	assert_closure(rax)
    65 00002DFD 803805              <1>  cmp byte [%1], %2
    66 00002E00 0F8545330000        <1>  jne L_error_incorrect_type
  3718 00002E06 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3719 00002E0A 53                      	push rbx
  3720 00002E0B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3721 00002E0F FFD3                    	call rbx
  3722 00002E11 50                      	push rax
  3723 00002E12 6A02                    	push 2
  3724 00002E14 488B0425[E8010000]      	mov rax, qword [free_var_61]
  3725                                  	assert_closure(rax)
    65 00002E1C 803805              <1>  cmp byte [%1], %2
    66 00002E1F 0F8526330000        <1>  jne L_error_incorrect_type
  3726 00002E25 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3727 00002E29 53                      	push rbx
  3728 00002E2A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3729 00002E2E FFD3                    	call rbx
  3730 00002E30 50                      	push rax
  3731 00002E31 488B4520                	mov rax, PARAM(0)
  3732 00002E35 50                      	push rax
  3733 00002E36 6A02                    	push 2
  3734 00002E38 488B0425[C0010000]      	mov rax, qword [free_var_56]
  3735                                  	assert_closure(rax)
    65 00002E40 803805              <1>  cmp byte [%1], %2
    66 00002E43 0F8502330000        <1>  jne L_error_incorrect_type
  3736 00002E49 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3737 00002E4D 53                      	push rbx
  3738 00002E4E FF7508                  	push RET_ADDR
  3739 00002E51 488B7D18                	mov rdi, COUNT
  3740 00002E55 4883C703                	add rdi, 3
  3741 00002E59 48C1E703                	shl rdi, 3
  3742 00002E5D 4801EF                  	add rdi, rbp
  3743 00002E60 488B6D00                	mov rbp, OLD_RDP
  3744 00002E64 BE00000000              	mov rsi, 0
  3745                                  .L_tc_recycle_frame_loop_0fae:	 ; start recycle frame loop
  3746 00002E69 4883FE05                	cmp rsi, 5
  3747 00002E6D 7427                    	je .L_tc_recycle_frame_done_0fae
  3748 00002E6F B904000000              	mov rcx, 4
  3749 00002E74 4829F1                  	sub rcx, rsi
  3750 00002E77 48C1E103                	shl rcx, 3
  3751 00002E7B 4801E1                  	add rcx, rsp ; rcx is the address to move
  3752 00002E7E 4889F3                  	mov rbx, rsi
  3753 00002E81 48C1E303                	shl rbx, 3
  3754 00002E85 48F7DB                  	neg rbx
  3755 00002E88 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3756 00002E8B 488B09                  	mov rcx, [rcx]
  3757 00002E8E 48890B                  	mov [rbx], rcx
  3758 00002E91 48FFC6                  	inc rsi
  3759 00002E94 EBD3                    	jmp .L_tc_recycle_frame_loop_0fae
  3760                                  .L_tc_recycle_frame_done_0fae:	 ; end recycle frame loop
  3761 00002E96 BB04000000              	mov rbx, 4
  3762 00002E9B 48C1E303                	shl rbx, 3
  3763 00002E9F 48F7DB                  	neg rbx
  3764 00002EA2 4801FB                  	add rbx, rdi
  3765 00002EA5 4889DC                  	mov rsp, rbx
  3766 00002EA8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3767 00002EAC FFE3                    	jmp rbx
  3768                                  	.L_if_end_0917:
  3769 00002EAE C9                      	leave
  3770 00002EAF C22800                  	ret 8 * (2 + 3)
  3771                                  .L_lambda_simple_end_0a37:	; new closure is in rax
  3772 00002EB2 50                      	push rax
  3773 00002EB3 488B4520                	mov rax, PARAM(0)
  3774 00002EB7 8F00                    	pop qword [rax]
  3775 00002EB9 48B8-                   	mov rax, sob_void
  3775 00002EBB [0000000000000000] 
  3776                                  
  3777 00002EC3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3778 00002EC8 E8FE190000              	call malloc
  3779 00002ECD 50                      	push rax
  3780 00002ECE BF08000000              	mov rdi, 8 * 1	; new rib
  3781 00002ED3 E8F3190000              	call malloc
  3782 00002ED8 50                      	push rax
  3783 00002ED9 BF10000000              	mov rdi, 8 * 2	; extended env
  3784 00002EDE E8E8190000              	call malloc
  3785 00002EE3 488B7D10                	mov rdi, ENV
  3786 00002EE7 BE00000000              	mov rsi, 0
  3787 00002EEC BA01000000              	mov rdx, 1
  3788                                  .L_lambda_opt_env_loop_03cc:	; ext_env[i + 1] <-- env[i]
  3789 00002EF1 4883FE01                	cmp rsi, 1
  3790 00002EF5 7410                    	je .L_lambda_opt_env_end_03cc
  3791 00002EF7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3792 00002EFB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3793 00002EFF 48FFC6                  	inc rsi
  3794 00002F02 48FFC2                  	inc rdx
  3795 00002F05 EBEA                    	jmp .L_lambda_opt_env_loop_03cc
  3796                                  .L_lambda_opt_env_end_03cc:
  3797 00002F07 5B                      	pop rbx
  3798 00002F08 BE00000000              	mov rsi, 0
  3799                                  .L_lambda_opt_params_loop_03cc:	; copy params
  3800 00002F0D 4883FE01                	cmp rsi, 1
  3801 00002F11 740E                    	je .L_lambda_opt_params_end_03cc
  3802 00002F13 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3803 00002F18 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3804 00002F1C 48FFC6                  	inc rsi
  3805 00002F1F EBEC                    	jmp .L_lambda_opt_params_loop_03cc
  3806                                  .L_lambda_opt_params_end_03cc:
  3807 00002F21 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3808 00002F24 4889C3                  	mov rbx, rax
  3809 00002F27 58                      	pop rax
  3810 00002F28 C60005                  	mov byte [rax], T_closure
  3811 00002F2B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3812 00002F2F 48C74009[3C2F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_03cc
  3813 00002F37 E989010000              	jmp .L_lambda_opt_end_03cc
  3814                                  .L_lambda_opt_code_03cc:	; lambda-opt body
  3815 00002F3C 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  3816 00002F41 4889FB                  	mov rbx, rdi
  3817 00002F44 4883EB02                	sub rbx, 2 ; rbx is the num of extra args
  3818 00002F48 4883FB00                	cmp rbx, 0
  3819 00002F4C 7F45                    	jg .L_lambda_opt_arity_check_more_03cc
  3820                                  .L_lambda_opt_arity_check_exact_03cc:	 ; if params in opt is exact
  3821 00002F4E 4883EC08                	sub rsp, 8
  3822 00002F52 BE00000000              	mov rsi, 0 ; index
  3823                                  .L_lambda_opt_stack_enlarge_loop_03cc:	 ; stack loop enlarge start
  3824 00002F57 4883FE05                	cmp rsi, 5
  3825 00002F5B 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_03cc
  3826 00002F5D 4889F7                  	mov rdi, rsi
  3827 00002F60 48FFC7                  	inc rdi
  3828 00002F63 48C1E703                	shl rdi, 3
  3829 00002F67 4801E7                  	add rdi, rsp
  3830 00002F6A 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  3831 00002F6D 4883EB08                	sub rbx, 8
  3832 00002F71 488B3F                  	mov rdi, [rdi]
  3833 00002F74 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  3834 00002F77 48FFC6                  	inc rsi
  3835 00002F7A EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_03cc
  3836                                  .L_lambda_opt_stack_enlarge_loop_exit_03cc:	 ; end of stack enlarge loop
  3837 00002F7C 48C7442428-             	mov qword [rsp + 5*8], sob_nil
  3837 00002F81 [01000000]         
  3838 00002F85 48C744241003000000      	mov qword [rsp + 2*8], 3
  3839 00002F8E E99E000000              	jmp .L_lambda_opt_stack_adjusted_03cc
  3840                                  .L_lambda_opt_arity_check_more_03cc:	 ; if params in opt is more
  3841 00002F93 48B8-                   	mov rax, sob_nil
  3841 00002F95 [0100000000000000] 
  3842 00002F9D 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  3843 00002FA0 48FFCE                  	dec rsi
  3844                                  .L_lambda_opt_list_create_loop_03cc:	; start of list creation loop
  3845 00002FA3 4883FEFF                	cmp rsi, -1
  3846 00002FA7 7422                    	je .L_lambda_opt_list_create_loop_exit_03cc
  3847 00002FA9 488D4E05                	lea rcx, [rsi + (3 + 2)]
  3848 00002FAD 48C1E103                	shl rcx, 3
  3849 00002FB1 4801E1                  	add rcx, rsp
  3850 00002FB4 488B09                  	mov rcx, [rcx]
  3851 00002FB7 56                      	push rsi ; save params
  3852 00002FB8 53                      	push rbx
  3853                                  
  3854 00002FB9 50                      	push rax ; cdr
  3855 00002FBA 51                      	push rcx ; car
  3856 00002FBB 6A02                    	push qword 2 ; push num of args
  3857 00002FBD 6A01                    	push qword 1 ; push garbage as env
  3858 00002FBF E88E220000              	call L_code_ptr_cons
  3859                                  
  3860 00002FC4 5B                      	pop rbx ; restore params
  3861 00002FC5 5E                      	pop rsi
  3862 00002FC6 48FFCE                  	dec rsi
  3863 00002FC9 EBD8                    	jmp .L_lambda_opt_list_create_loop_03cc
  3864                                  .L_lambda_opt_list_create_loop_exit_03cc:	; end of list creation loop
  3865 00002FCB 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  3866 00002FD0 4883C302                	add rbx, 2
  3867 00002FD4 4889DF                  	mov rdi, rbx
  3868 00002FD7 48C1E703                	shl rdi,3
  3869 00002FDB 4801E7                  	add rdi, rsp
  3870 00002FDE 488907                  	mov [rdi], rax
  3871 00002FE1 BE00000000              	mov rsi, 0 ;index
  3872                                  .L_lambda_opt_stack_shrink_loop_03cc:	; start of stack shrink loop
  3873 00002FE6 4883FE05                	cmp rsi, 5
  3874 00002FEA 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_03cc
  3875 00002FEC BF04000000              	mov rdi, 4
  3876 00002FF1 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  3877 00002FF4 4889D9                  	mov rcx, rbx
  3878 00002FF7 4829F1                  	sub rcx, rsi
  3879 00002FFA 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  3880 00002FFD 4889FA                  	mov rdx, rdi
  3881 00003000 48C1E203                	shl rdx, 3
  3882 00003004 4801E2                  	add rdx, rsp
  3883 00003007 48C1E103                	shl rcx, 3
  3884 0000300B 4801E1                  	add rcx, rsp
  3885 0000300E 488B12                  	mov rdx, [rdx]
  3886 00003011 488911                  	mov [rcx], rdx
  3887 00003014 48FFC6                  	inc rsi
  3888 00003017 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_03cc
  3889                                  .L_lambda_opt_stack_shrink_loop_exit_03cc:	; end of stack shrink loop
  3890 00003019 4883EB02                	sub rbx, 2 ; rbx has number of args
  3891 0000301D 4883EB03                	sub rbx, 3
  3892 00003021 48C1E303                	shl rbx, 3
  3893 00003025 4801DC                  	add rsp, rbx
  3894 00003028 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  3895                                  .L_lambda_opt_stack_adjusted_03cc:
  3896 00003031 C8000000                	enter 0, 0
  3897 00003035 488B4530                	mov rax, PARAM(2)
  3898 00003039 50                      	push rax
  3899 0000303A 488B4528                	mov rax, PARAM(1)
  3900 0000303E 50                      	push rax
  3901 0000303F 488B4520                	mov rax, PARAM(0)
  3902 00003043 50                      	push rax
  3903 00003044 6A03                    	push 3
  3904 00003046 488B4510                	mov rax, qword [rbp + 8*2]
  3905 0000304A 488B00                  	mov rax, qword [rax + 8*0]
  3906 0000304D 488B00                  	mov rax, qword [rax + 8*0]
  3907 00003050 488B00                  	mov rax, qword [rax]
  3908                                  	assert_closure(rax)
    65 00003053 803805              <1>  cmp byte [%1], %2
    66 00003056 0F85EF300000        <1>  jne L_error_incorrect_type
  3909 0000305C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3910 00003060 53                      	push rbx
  3911 00003061 FF7508                  	push RET_ADDR
  3912 00003064 488B7D18                	mov rdi, COUNT
  3913 00003068 4883C703                	add rdi, 3
  3914 0000306C 48C1E703                	shl rdi, 3
  3915 00003070 4801EF                  	add rdi, rbp
  3916 00003073 488B6D00                	mov rbp, OLD_RDP
  3917 00003077 BE00000000              	mov rsi, 0
  3918                                  .L_tc_recycle_frame_loop_0faf:	 ; start recycle frame loop
  3919 0000307C 4883FE06                	cmp rsi, 6
  3920 00003080 7427                    	je .L_tc_recycle_frame_done_0faf
  3921 00003082 B905000000              	mov rcx, 5
  3922 00003087 4829F1                  	sub rcx, rsi
  3923 0000308A 48C1E103                	shl rcx, 3
  3924 0000308E 4801E1                  	add rcx, rsp ; rcx is the address to move
  3925 00003091 4889F3                  	mov rbx, rsi
  3926 00003094 48C1E303                	shl rbx, 3
  3927 00003098 48F7DB                  	neg rbx
  3928 0000309B 4801FB                  	add rbx, rdi ;rbx is the address to move to
  3929 0000309E 488B09                  	mov rcx, [rcx]
  3930 000030A1 48890B                  	mov [rbx], rcx
  3931 000030A4 48FFC6                  	inc rsi
  3932 000030A7 EBD3                    	jmp .L_tc_recycle_frame_loop_0faf
  3933                                  .L_tc_recycle_frame_done_0faf:	 ; end recycle frame loop
  3934 000030A9 BB05000000              	mov rbx, 5
  3935 000030AE 48C1E303                	shl rbx, 3
  3936 000030B2 48F7DB                  	neg rbx
  3937 000030B5 4801FB                  	add rbx, rdi
  3938 000030B8 4889DC                  	mov rsp, rbx
  3939 000030BB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3940 000030BF FFE3                    	jmp rbx
  3941 000030C1 C9                      	leave
  3942 000030C2 C22800                  	ret AND_KILL_FRAME(3)
  3943                                  .L_lambda_opt_end_03cc:	; new closure is in rax
  3944 000030C5 C9                      	leave
  3945 000030C6 C21800                  	ret 8 * (2 + 1)
  3946                                  .L_lambda_simple_end_0a36:	; new closure is in rax
  3947                                  	assert_closure(rax)
    65 000030C9 803805              <1>  cmp byte [%1], %2
    66 000030CC 0F8579300000        <1>  jne L_error_incorrect_type
  3948 000030D2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3949 000030D6 53                      	push rbx
  3950 000030D7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3951 000030DB FFD3                    	call rbx
  3952 000030DD 48890425[F8010000]      	mov qword [free_var_63], rax
  3953 000030E5 48B8-                   	mov rax, sob_void
  3953 000030E7 [0000000000000000] 
  3954                                  
  3955 000030EF 4889C7                  	mov rdi, rax
  3956 000030F2 E8E5170000              	call print_sexpr_if_not_void
  3957                                  
  3958 000030F7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3959 000030FC E8CA170000              	call malloc
  3960 00003101 50                      	push rax
  3961 00003102 BF00000000              	mov rdi, 8 * 0	; new rib
  3962 00003107 E8BF170000              	call malloc
  3963 0000310C 50                      	push rax
  3964 0000310D BF08000000              	mov rdi, 8 * 1	; extended env
  3965 00003112 E8B4170000              	call malloc
  3966 00003117 488B7D10                	mov rdi, ENV
  3967 0000311B BE00000000              	mov rsi, 0
  3968 00003120 BA01000000              	mov rdx, 1
  3969                                  .L_lambda_simple_env_loop_0a38:	; ext_env[i + 1] <-- env[i]
  3970 00003125 4883FE00                	cmp rsi, 0
  3971 00003129 7410                    	je .L_lambda_simple_env_end_0a38
  3972 0000312B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  3973 0000312F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3974 00003133 48FFC6                  	inc rsi
  3975 00003136 48FFC2                  	inc rdx
  3976 00003139 EBEA                    	jmp .L_lambda_simple_env_loop_0a38
  3977                                  .L_lambda_simple_env_end_0a38:
  3978 0000313B 5B                      	pop rbx
  3979 0000313C BE00000000              	mov rsi, 0
  3980                                  .L_lambda_simple_params_loop_0a38:	; copy params
  3981 00003141 4883FE00                	cmp rsi, 0
  3982 00003145 740E                    	je .L_lambda_simple_params_end_0a38
  3983 00003147 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3984 0000314C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3985 00003150 48FFC6                  	inc rsi
  3986 00003153 EBEC                    	jmp .L_lambda_simple_params_loop_0a38
  3987                                  .L_lambda_simple_params_end_0a38:
  3988 00003155 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3989 00003158 4889C3                  	mov rbx, rax
  3990 0000315B 58                      	pop rax
  3991 0000315C C60005                  	mov byte [rax], T_closure
  3992 0000315F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3993 00003163 48C74009[70310000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a38
  3994 0000316B E9A5000000              	jmp .L_lambda_simple_end_0a38
  3995                                  .L_lambda_simple_code_0a38:	; lambda-simple body
  3996 00003170 48837C241000            	cmp qword [rsp + 8 * 2], 0
  3997 00003176 740B                    	je .L_lambda_simple_arity_check_ok_0a38
  3998 00003178 FF742410                	push qword [rsp + 8 * 2]
  3999 0000317C 6A00                    	push 0
  4000 0000317E E901170000              	jmp L_error_incorrect_arity_simple
  4001                                  .L_lambda_simple_arity_check_ok_0a38:
  4002 00003183 C8000000                	enter 0, 0
  4003 00003187 488D0425[44000000]      	lea rax, [68 + L_constants]
  4004 0000318F 50                      	push rax
  4005 00003190 488D0425[3B000000]      	lea rax, [59 + L_constants]
  4006 00003198 50                      	push rax
  4007 00003199 6A02                    	push 2
  4008 0000319B 488B0425[30010000]      	mov rax, qword [free_var_38]
  4009                                  	assert_closure(rax)
    65 000031A3 803805              <1>  cmp byte [%1], %2
    66 000031A6 0F859F2F0000        <1>  jne L_error_incorrect_type
  4010 000031AC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4011 000031B0 53                      	push rbx
  4012 000031B1 FF7508                  	push RET_ADDR
  4013 000031B4 488B7D18                	mov rdi, COUNT
  4014 000031B8 4883C703                	add rdi, 3
  4015 000031BC 48C1E703                	shl rdi, 3
  4016 000031C0 4801EF                  	add rdi, rbp
  4017 000031C3 488B6D00                	mov rbp, OLD_RDP
  4018 000031C7 BE00000000              	mov rsi, 0
  4019                                  .L_tc_recycle_frame_loop_0fb0:	 ; start recycle frame loop
  4020 000031CC 4883FE05                	cmp rsi, 5
  4021 000031D0 7427                    	je .L_tc_recycle_frame_done_0fb0
  4022 000031D2 B904000000              	mov rcx, 4
  4023 000031D7 4829F1                  	sub rcx, rsi
  4024 000031DA 48C1E103                	shl rcx, 3
  4025 000031DE 4801E1                  	add rcx, rsp ; rcx is the address to move
  4026 000031E1 4889F3                  	mov rbx, rsi
  4027 000031E4 48C1E303                	shl rbx, 3
  4028 000031E8 48F7DB                  	neg rbx
  4029 000031EB 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4030 000031EE 488B09                  	mov rcx, [rcx]
  4031 000031F1 48890B                  	mov [rbx], rcx
  4032 000031F4 48FFC6                  	inc rsi
  4033 000031F7 EBD3                    	jmp .L_tc_recycle_frame_loop_0fb0
  4034                                  .L_tc_recycle_frame_done_0fb0:	 ; end recycle frame loop
  4035 000031F9 BB04000000              	mov rbx, 4
  4036 000031FE 48C1E303                	shl rbx, 3
  4037 00003202 48F7DB                  	neg rbx
  4038 00003205 4801FB                  	add rbx, rdi
  4039 00003208 4889DC                  	mov rsp, rbx
  4040 0000320B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4041 0000320F FFE3                    	jmp rbx
  4042 00003211 C9                      	leave
  4043 00003212 C21000                  	ret 8 * (2 + 0)
  4044                                  .L_lambda_simple_end_0a38:	; new closure is in rax
  4045 00003215 50                      	push rax
  4046 00003216 6A01                    	push 1
  4047 00003218 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4048 0000321D E8A9160000              	call malloc
  4049 00003222 50                      	push rax
  4050 00003223 BF00000000              	mov rdi, 8 * 0	; new rib
  4051 00003228 E89E160000              	call malloc
  4052 0000322D 50                      	push rax
  4053 0000322E BF08000000              	mov rdi, 8 * 1	; extended env
  4054 00003233 E893160000              	call malloc
  4055 00003238 488B7D10                	mov rdi, ENV
  4056 0000323C BE00000000              	mov rsi, 0
  4057 00003241 BA01000000              	mov rdx, 1
  4058                                  .L_lambda_simple_env_loop_0a39:	; ext_env[i + 1] <-- env[i]
  4059 00003246 4883FE00                	cmp rsi, 0
  4060 0000324A 7410                    	je .L_lambda_simple_env_end_0a39
  4061 0000324C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4062 00003250 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4063 00003254 48FFC6                  	inc rsi
  4064 00003257 48FFC2                  	inc rdx
  4065 0000325A EBEA                    	jmp .L_lambda_simple_env_loop_0a39
  4066                                  .L_lambda_simple_env_end_0a39:
  4067 0000325C 5B                      	pop rbx
  4068 0000325D BE00000000              	mov rsi, 0
  4069                                  .L_lambda_simple_params_loop_0a39:	; copy params
  4070 00003262 4883FE00                	cmp rsi, 0
  4071 00003266 740E                    	je .L_lambda_simple_params_end_0a39
  4072 00003268 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4073 0000326D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4074 00003271 48FFC6                  	inc rsi
  4075 00003274 EBEC                    	jmp .L_lambda_simple_params_loop_0a39
  4076                                  .L_lambda_simple_params_end_0a39:
  4077 00003276 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4078 00003279 4889C3                  	mov rbx, rax
  4079 0000327C 58                      	pop rax
  4080 0000327D C60005                  	mov byte [rax], T_closure
  4081 00003280 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4082 00003284 48C74009[91320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a39
  4083 0000328C E99E080000              	jmp .L_lambda_simple_end_0a39
  4084                                  .L_lambda_simple_code_0a39:	; lambda-simple body
  4085 00003291 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4086 00003297 740B                    	je .L_lambda_simple_arity_check_ok_0a39
  4087 00003299 FF742410                	push qword [rsp + 8 * 2]
  4088 0000329D 6A01                    	push 1
  4089 0000329F E9E0150000              	jmp L_error_incorrect_arity_simple
  4090                                  .L_lambda_simple_arity_check_ok_0a39:
  4091 000032A4 C8000000                	enter 0, 0
  4092 000032A8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4093 000032AD E819160000              	call malloc
  4094 000032B2 50                      	push rax
  4095 000032B3 BF08000000              	mov rdi, 8 * 1	; new rib
  4096 000032B8 E80E160000              	call malloc
  4097 000032BD 50                      	push rax
  4098 000032BE BF10000000              	mov rdi, 8 * 2	; extended env
  4099 000032C3 E803160000              	call malloc
  4100 000032C8 488B7D10                	mov rdi, ENV
  4101 000032CC BE00000000              	mov rsi, 0
  4102 000032D1 BA01000000              	mov rdx, 1
  4103                                  .L_lambda_simple_env_loop_0a3a:	; ext_env[i + 1] <-- env[i]
  4104 000032D6 4883FE01                	cmp rsi, 1
  4105 000032DA 7410                    	je .L_lambda_simple_env_end_0a3a
  4106 000032DC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4107 000032E0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4108 000032E4 48FFC6                  	inc rsi
  4109 000032E7 48FFC2                  	inc rdx
  4110 000032EA EBEA                    	jmp .L_lambda_simple_env_loop_0a3a
  4111                                  .L_lambda_simple_env_end_0a3a:
  4112 000032EC 5B                      	pop rbx
  4113 000032ED BE00000000              	mov rsi, 0
  4114                                  .L_lambda_simple_params_loop_0a3a:	; copy params
  4115 000032F2 4883FE01                	cmp rsi, 1
  4116 000032F6 740E                    	je .L_lambda_simple_params_end_0a3a
  4117 000032F8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4118 000032FD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4119 00003301 48FFC6                  	inc rsi
  4120 00003304 EBEC                    	jmp .L_lambda_simple_params_loop_0a3a
  4121                                  .L_lambda_simple_params_end_0a3a:
  4122 00003306 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4123 00003309 4889C3                  	mov rbx, rax
  4124 0000330C 58                      	pop rax
  4125 0000330D C60005                  	mov byte [rax], T_closure
  4126 00003310 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4127 00003314 48C74009[21330000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a3a
  4128 0000331C E9FE040000              	jmp .L_lambda_simple_end_0a3a
  4129                                  .L_lambda_simple_code_0a3a:	; lambda-simple body
  4130 00003321 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4131 00003327 740B                    	je .L_lambda_simple_arity_check_ok_0a3a
  4132 00003329 FF742410                	push qword [rsp + 8 * 2]
  4133 0000332D 6A02                    	push 2
  4134 0000332F E950150000              	jmp L_error_incorrect_arity_simple
  4135                                  .L_lambda_simple_arity_check_ok_0a3a:
  4136 00003334 C8000000                	enter 0, 0
  4137 00003338 488B4520                	mov rax, PARAM(0)
  4138 0000333C 50                      	push rax
  4139 0000333D 6A01                    	push 1
  4140 0000333F 488B0425[48000000]      	mov rax, qword [free_var_9]
  4141                                  	assert_closure(rax)
    65 00003347 803805              <1>  cmp byte [%1], %2
    66 0000334A 0F85FB2D0000        <1>  jne L_error_incorrect_type
  4142 00003350 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4143 00003354 53                      	push rbx
  4144 00003355 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4145 00003359 FFD3                    	call rbx
  4146 0000335B 483D[02000000]          	cmp rax, sob_boolean_false
  4147 00003361 0F8407020000            	je .L_if_else_0918
  4148 00003367 488B4528                	mov rax, PARAM(1)
  4149 0000336B 50                      	push rax
  4150 0000336C 6A01                    	push 1
  4151 0000336E 488B0425[48000000]      	mov rax, qword [free_var_9]
  4152                                  	assert_closure(rax)
    65 00003376 803805              <1>  cmp byte [%1], %2
    66 00003379 0F85CC2D0000        <1>  jne L_error_incorrect_type
  4153 0000337F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4154 00003383 53                      	push rbx
  4155 00003384 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4156 00003388 FFD3                    	call rbx
  4157 0000338A 483D[02000000]          	cmp rax, sob_boolean_false
  4158 00003390 0F8487000000            	je .L_if_else_0919
  4159 00003396 488B4528                	mov rax, PARAM(1)
  4160 0000339A 50                      	push rax
  4161 0000339B 488B4520                	mov rax, PARAM(0)
  4162 0000339F 50                      	push rax
  4163 000033A0 6A02                    	push 2
  4164 000033A2 488B0425[10010000]      	mov rax, qword [free_var_34]
  4165                                  	assert_closure(rax)
    65 000033AA 803805              <1>  cmp byte [%1], %2
    66 000033AD 0F85982D0000        <1>  jne L_error_incorrect_type
  4166 000033B3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4167 000033B7 53                      	push rbx
  4168 000033B8 FF7508                  	push RET_ADDR
  4169 000033BB 488B7D18                	mov rdi, COUNT
  4170 000033BF 4883C703                	add rdi, 3
  4171 000033C3 48C1E703                	shl rdi, 3
  4172 000033C7 4801EF                  	add rdi, rbp
  4173 000033CA 488B6D00                	mov rbp, OLD_RDP
  4174 000033CE BE00000000              	mov rsi, 0
  4175                                  .L_tc_recycle_frame_loop_0fb2:	 ; start recycle frame loop
  4176 000033D3 4883FE05                	cmp rsi, 5
  4177 000033D7 7427                    	je .L_tc_recycle_frame_done_0fb2
  4178 000033D9 B904000000              	mov rcx, 4
  4179 000033DE 4829F1                  	sub rcx, rsi
  4180 000033E1 48C1E103                	shl rcx, 3
  4181 000033E5 4801E1                  	add rcx, rsp ; rcx is the address to move
  4182 000033E8 4889F3                  	mov rbx, rsi
  4183 000033EB 48C1E303                	shl rbx, 3
  4184 000033EF 48F7DB                  	neg rbx
  4185 000033F2 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4186 000033F5 488B09                  	mov rcx, [rcx]
  4187 000033F8 48890B                  	mov [rbx], rcx
  4188 000033FB 48FFC6                  	inc rsi
  4189 000033FE EBD3                    	jmp .L_tc_recycle_frame_loop_0fb2
  4190                                  .L_tc_recycle_frame_done_0fb2:	 ; end recycle frame loop
  4191 00003400 BB04000000              	mov rbx, 4
  4192 00003405 48C1E303                	shl rbx, 3
  4193 00003409 48F7DB                  	neg rbx
  4194 0000340C 4801FB                  	add rbx, rdi
  4195 0000340F 4889DC                  	mov rsp, rbx
  4196 00003412 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4197 00003416 FFE3                    	jmp rbx
  4198 00003418 E94C010000              	jmp .L_if_end_0919
  4199                                  	.L_if_else_0919:
  4200 0000341D 488B4528                	mov rax, PARAM(1)
  4201 00003421 50                      	push rax
  4202 00003422 6A01                    	push 1
  4203 00003424 488B0425[40000000]      	mov rax, qword [free_var_8]
  4204                                  	assert_closure(rax)
    65 0000342C 803805              <1>  cmp byte [%1], %2
    66 0000342F 0F85162D0000        <1>  jne L_error_incorrect_type
  4205 00003435 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4206 00003439 53                      	push rbx
  4207 0000343A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4208 0000343E FFD3                    	call rbx
  4209 00003440 483D[02000000]          	cmp rax, sob_boolean_false
  4210 00003446 0F84A3000000            	je .L_if_else_091a
  4211 0000344C 488B4528                	mov rax, PARAM(1)
  4212 00003450 50                      	push rax
  4213 00003451 488B4520                	mov rax, PARAM(0)
  4214 00003455 50                      	push rax
  4215 00003456 6A01                    	push 1
  4216 00003458 488B0425[B8000000]      	mov rax, qword [free_var_23]
  4217                                  	assert_closure(rax)
    65 00003460 803805              <1>  cmp byte [%1], %2
    66 00003463 0F85E22C0000        <1>  jne L_error_incorrect_type
  4218 00003469 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4219 0000346D 53                      	push rbx
  4220 0000346E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4221 00003472 FFD3                    	call rbx
  4222 00003474 50                      	push rax
  4223 00003475 6A02                    	push 2
  4224 00003477 488B0425[F0000000]      	mov rax, qword [free_var_30]
  4225                                  	assert_closure(rax)
    65 0000347F 803805              <1>  cmp byte [%1], %2
    66 00003482 0F85C32C0000        <1>  jne L_error_incorrect_type
  4226 00003488 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4227 0000348C 53                      	push rbx
  4228 0000348D FF7508                  	push RET_ADDR
  4229 00003490 488B7D18                	mov rdi, COUNT
  4230 00003494 4883C703                	add rdi, 3
  4231 00003498 48C1E703                	shl rdi, 3
  4232 0000349C 4801EF                  	add rdi, rbp
  4233 0000349F 488B6D00                	mov rbp, OLD_RDP
  4234 000034A3 BE00000000              	mov rsi, 0
  4235                                  .L_tc_recycle_frame_loop_0fb3:	 ; start recycle frame loop
  4236 000034A8 4883FE05                	cmp rsi, 5
  4237 000034AC 7427                    	je .L_tc_recycle_frame_done_0fb3
  4238 000034AE B904000000              	mov rcx, 4
  4239 000034B3 4829F1                  	sub rcx, rsi
  4240 000034B6 48C1E103                	shl rcx, 3
  4241 000034BA 4801E1                  	add rcx, rsp ; rcx is the address to move
  4242 000034BD 4889F3                  	mov rbx, rsi
  4243 000034C0 48C1E303                	shl rbx, 3
  4244 000034C4 48F7DB                  	neg rbx
  4245 000034C7 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4246 000034CA 488B09                  	mov rcx, [rcx]
  4247 000034CD 48890B                  	mov [rbx], rcx
  4248 000034D0 48FFC6                  	inc rsi
  4249 000034D3 EBD3                    	jmp .L_tc_recycle_frame_loop_0fb3
  4250                                  .L_tc_recycle_frame_done_0fb3:	 ; end recycle frame loop
  4251 000034D5 BB04000000              	mov rbx, 4
  4252 000034DA 48C1E303                	shl rbx, 3
  4253 000034DE 48F7DB                  	neg rbx
  4254 000034E1 4801FB                  	add rbx, rdi
  4255 000034E4 4889DC                  	mov rsp, rbx
  4256 000034E7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4257 000034EB FFE3                    	jmp rbx
  4258 000034ED EB7A                    	jmp .L_if_end_091a
  4259                                  	.L_if_else_091a:
  4260 000034EF 6A00                    	push 0
  4261 000034F1 488B4510                	mov rax, qword [rbp + 8*2]
  4262 000034F5 488B00                  	mov rax, qword [rax + 8*0]
  4263 000034F8 488B00                  	mov rax, qword [rax + 8*0]
  4264                                  	assert_closure(rax)
    65 000034FB 803805              <1>  cmp byte [%1], %2
    66 000034FE 0F85472C0000        <1>  jne L_error_incorrect_type
  4265 00003504 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4266 00003508 53                      	push rbx
  4267 00003509 FF7508                  	push RET_ADDR
  4268 0000350C 488B7D18                	mov rdi, COUNT
  4269 00003510 4883C703                	add rdi, 3
  4270 00003514 48C1E703                	shl rdi, 3
  4271 00003518 4801EF                  	add rdi, rbp
  4272 0000351B 488B6D00                	mov rbp, OLD_RDP
  4273 0000351F BE00000000              	mov rsi, 0
  4274                                  .L_tc_recycle_frame_loop_0fb4:	 ; start recycle frame loop
  4275 00003524 4883FE03                	cmp rsi, 3
  4276 00003528 7427                    	je .L_tc_recycle_frame_done_0fb4
  4277 0000352A B902000000              	mov rcx, 2
  4278 0000352F 4829F1                  	sub rcx, rsi
  4279 00003532 48C1E103                	shl rcx, 3
  4280 00003536 4801E1                  	add rcx, rsp ; rcx is the address to move
  4281 00003539 4889F3                  	mov rbx, rsi
  4282 0000353C 48C1E303                	shl rbx, 3
  4283 00003540 48F7DB                  	neg rbx
  4284 00003543 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4285 00003546 488B09                  	mov rcx, [rcx]
  4286 00003549 48890B                  	mov [rbx], rcx
  4287 0000354C 48FFC6                  	inc rsi
  4288 0000354F EBD3                    	jmp .L_tc_recycle_frame_loop_0fb4
  4289                                  .L_tc_recycle_frame_done_0fb4:	 ; end recycle frame loop
  4290 00003551 BB02000000              	mov rbx, 2
  4291 00003556 48C1E303                	shl rbx, 3
  4292 0000355A 48F7DB                  	neg rbx
  4293 0000355D 4801FB                  	add rbx, rdi
  4294 00003560 4889DC                  	mov rsp, rbx
  4295 00003563 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4296 00003567 FFE3                    	jmp rbx
  4297                                  	.L_if_end_091a:
  4298                                  	.L_if_end_0919:
  4299 00003569 E9AD020000              	jmp .L_if_end_0918
  4300                                  	.L_if_else_0918:
  4301 0000356E 488B4520                	mov rax, PARAM(0)
  4302 00003572 50                      	push rax
  4303 00003573 6A01                    	push 1
  4304 00003575 488B0425[40000000]      	mov rax, qword [free_var_8]
  4305                                  	assert_closure(rax)
    65 0000357D 803805              <1>  cmp byte [%1], %2
    66 00003580 0F85C52B0000        <1>  jne L_error_incorrect_type
  4306 00003586 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4307 0000358A 53                      	push rbx
  4308 0000358B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4309 0000358F FFD3                    	call rbx
  4310 00003591 483D[02000000]          	cmp rax, sob_boolean_false
  4311 00003597 0F8404020000            	je .L_if_else_091b
  4312 0000359D 488B4528                	mov rax, PARAM(1)
  4313 000035A1 50                      	push rax
  4314 000035A2 6A01                    	push 1
  4315 000035A4 488B0425[48000000]      	mov rax, qword [free_var_9]
  4316                                  	assert_closure(rax)
    65 000035AC 803805              <1>  cmp byte [%1], %2
    66 000035AF 0F85962B0000        <1>  jne L_error_incorrect_type
  4317 000035B5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4318 000035B9 53                      	push rbx
  4319 000035BA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4320 000035BE FFD3                    	call rbx
  4321 000035C0 483D[02000000]          	cmp rax, sob_boolean_false
  4322 000035C6 0F84A6000000            	je .L_if_else_091c
  4323 000035CC 488B4528                	mov rax, PARAM(1)
  4324 000035D0 50                      	push rax
  4325 000035D1 6A01                    	push 1
  4326 000035D3 488B0425[B8000000]      	mov rax, qword [free_var_23]
  4327                                  	assert_closure(rax)
    65 000035DB 803805              <1>  cmp byte [%1], %2
    66 000035DE 0F85672B0000        <1>  jne L_error_incorrect_type
  4328 000035E4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4329 000035E8 53                      	push rbx
  4330 000035E9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4331 000035ED FFD3                    	call rbx
  4332 000035EF 50                      	push rax
  4333 000035F0 488B4520                	mov rax, PARAM(0)
  4334 000035F4 50                      	push rax
  4335 000035F5 6A02                    	push 2
  4336 000035F7 488B0425[F0000000]      	mov rax, qword [free_var_30]
  4337                                  	assert_closure(rax)
    65 000035FF 803805              <1>  cmp byte [%1], %2
    66 00003602 0F85432B0000        <1>  jne L_error_incorrect_type
  4338 00003608 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4339 0000360C 53                      	push rbx
  4340 0000360D FF7508                  	push RET_ADDR
  4341 00003610 488B7D18                	mov rdi, COUNT
  4342 00003614 4883C703                	add rdi, 3
  4343 00003618 48C1E703                	shl rdi, 3
  4344 0000361C 4801EF                  	add rdi, rbp
  4345 0000361F 488B6D00                	mov rbp, OLD_RDP
  4346 00003623 BE00000000              	mov rsi, 0
  4347                                  .L_tc_recycle_frame_loop_0fb5:	 ; start recycle frame loop
  4348 00003628 4883FE05                	cmp rsi, 5
  4349 0000362C 7427                    	je .L_tc_recycle_frame_done_0fb5
  4350 0000362E B904000000              	mov rcx, 4
  4351 00003633 4829F1                  	sub rcx, rsi
  4352 00003636 48C1E103                	shl rcx, 3
  4353 0000363A 4801E1                  	add rcx, rsp ; rcx is the address to move
  4354 0000363D 4889F3                  	mov rbx, rsi
  4355 00003640 48C1E303                	shl rbx, 3
  4356 00003644 48F7DB                  	neg rbx
  4357 00003647 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4358 0000364A 488B09                  	mov rcx, [rcx]
  4359 0000364D 48890B                  	mov [rbx], rcx
  4360 00003650 48FFC6                  	inc rsi
  4361 00003653 EBD3                    	jmp .L_tc_recycle_frame_loop_0fb5
  4362                                  .L_tc_recycle_frame_done_0fb5:	 ; end recycle frame loop
  4363 00003655 BB04000000              	mov rbx, 4
  4364 0000365A 48C1E303                	shl rbx, 3
  4365 0000365E 48F7DB                  	neg rbx
  4366 00003661 4801FB                  	add rbx, rdi
  4367 00003664 4889DC                  	mov rsp, rbx
  4368 00003667 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4369 0000366B FFE3                    	jmp rbx
  4370 0000366D E92D010000              	jmp .L_if_end_091c
  4371                                  	.L_if_else_091c:
  4372 00003672 488B4528                	mov rax, PARAM(1)
  4373 00003676 50                      	push rax
  4374 00003677 6A01                    	push 1
  4375 00003679 488B0425[40000000]      	mov rax, qword [free_var_8]
  4376                                  	assert_closure(rax)
    65 00003681 803805              <1>  cmp byte [%1], %2
    66 00003684 0F85C12A0000        <1>  jne L_error_incorrect_type
  4377 0000368A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4378 0000368E 53                      	push rbx
  4379 0000368F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4380 00003693 FFD3                    	call rbx
  4381 00003695 483D[02000000]          	cmp rax, sob_boolean_false
  4382 0000369B 0F8484000000            	je .L_if_else_091d
  4383 000036A1 488B4528                	mov rax, PARAM(1)
  4384 000036A5 50                      	push rax
  4385 000036A6 488B4520                	mov rax, PARAM(0)
  4386 000036AA 50                      	push rax
  4387 000036AB 6A02                    	push 2
  4388 000036AD 488B0425[F0000000]      	mov rax, qword [free_var_30]
  4389                                  	assert_closure(rax)
    65 000036B5 803805              <1>  cmp byte [%1], %2
    66 000036B8 0F858D2A0000        <1>  jne L_error_incorrect_type
  4390 000036BE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4391 000036C2 53                      	push rbx
  4392 000036C3 FF7508                  	push RET_ADDR
  4393 000036C6 488B7D18                	mov rdi, COUNT
  4394 000036CA 4883C703                	add rdi, 3
  4395 000036CE 48C1E703                	shl rdi, 3
  4396 000036D2 4801EF                  	add rdi, rbp
  4397 000036D5 488B6D00                	mov rbp, OLD_RDP
  4398 000036D9 BE00000000              	mov rsi, 0
  4399                                  .L_tc_recycle_frame_loop_0fb6:	 ; start recycle frame loop
  4400 000036DE 4883FE05                	cmp rsi, 5
  4401 000036E2 7427                    	je .L_tc_recycle_frame_done_0fb6
  4402 000036E4 B904000000              	mov rcx, 4
  4403 000036E9 4829F1                  	sub rcx, rsi
  4404 000036EC 48C1E103                	shl rcx, 3
  4405 000036F0 4801E1                  	add rcx, rsp ; rcx is the address to move
  4406 000036F3 4889F3                  	mov rbx, rsi
  4407 000036F6 48C1E303                	shl rbx, 3
  4408 000036FA 48F7DB                  	neg rbx
  4409 000036FD 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4410 00003700 488B09                  	mov rcx, [rcx]
  4411 00003703 48890B                  	mov [rbx], rcx
  4412 00003706 48FFC6                  	inc rsi
  4413 00003709 EBD3                    	jmp .L_tc_recycle_frame_loop_0fb6
  4414                                  .L_tc_recycle_frame_done_0fb6:	 ; end recycle frame loop
  4415 0000370B BB04000000              	mov rbx, 4
  4416 00003710 48C1E303                	shl rbx, 3
  4417 00003714 48F7DB                  	neg rbx
  4418 00003717 4801FB                  	add rbx, rdi
  4419 0000371A 4889DC                  	mov rsp, rbx
  4420 0000371D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4421 00003721 FFE3                    	jmp rbx
  4422 00003723 EB7A                    	jmp .L_if_end_091d
  4423                                  	.L_if_else_091d:
  4424 00003725 6A00                    	push 0
  4425 00003727 488B4510                	mov rax, qword [rbp + 8*2]
  4426 0000372B 488B00                  	mov rax, qword [rax + 8*0]
  4427 0000372E 488B00                  	mov rax, qword [rax + 8*0]
  4428                                  	assert_closure(rax)
    65 00003731 803805              <1>  cmp byte [%1], %2
    66 00003734 0F85112A0000        <1>  jne L_error_incorrect_type
  4429 0000373A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4430 0000373E 53                      	push rbx
  4431 0000373F FF7508                  	push RET_ADDR
  4432 00003742 488B7D18                	mov rdi, COUNT
  4433 00003746 4883C703                	add rdi, 3
  4434 0000374A 48C1E703                	shl rdi, 3
  4435 0000374E 4801EF                  	add rdi, rbp
  4436 00003751 488B6D00                	mov rbp, OLD_RDP
  4437 00003755 BE00000000              	mov rsi, 0
  4438                                  .L_tc_recycle_frame_loop_0fb7:	 ; start recycle frame loop
  4439 0000375A 4883FE03                	cmp rsi, 3
  4440 0000375E 7427                    	je .L_tc_recycle_frame_done_0fb7
  4441 00003760 B902000000              	mov rcx, 2
  4442 00003765 4829F1                  	sub rcx, rsi
  4443 00003768 48C1E103                	shl rcx, 3
  4444 0000376C 4801E1                  	add rcx, rsp ; rcx is the address to move
  4445 0000376F 4889F3                  	mov rbx, rsi
  4446 00003772 48C1E303                	shl rbx, 3
  4447 00003776 48F7DB                  	neg rbx
  4448 00003779 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4449 0000377C 488B09                  	mov rcx, [rcx]
  4450 0000377F 48890B                  	mov [rbx], rcx
  4451 00003782 48FFC6                  	inc rsi
  4452 00003785 EBD3                    	jmp .L_tc_recycle_frame_loop_0fb7
  4453                                  .L_tc_recycle_frame_done_0fb7:	 ; end recycle frame loop
  4454 00003787 BB02000000              	mov rbx, 2
  4455 0000378C 48C1E303                	shl rbx, 3
  4456 00003790 48F7DB                  	neg rbx
  4457 00003793 4801FB                  	add rbx, rdi
  4458 00003796 4889DC                  	mov rsp, rbx
  4459 00003799 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4460 0000379D FFE3                    	jmp rbx
  4461                                  	.L_if_end_091d:
  4462                                  	.L_if_end_091c:
  4463 0000379F EB7A                    	jmp .L_if_end_091b
  4464                                  	.L_if_else_091b:
  4465 000037A1 6A00                    	push 0
  4466 000037A3 488B4510                	mov rax, qword [rbp + 8*2]
  4467 000037A7 488B00                  	mov rax, qword [rax + 8*0]
  4468 000037AA 488B00                  	mov rax, qword [rax + 8*0]
  4469                                  	assert_closure(rax)
    65 000037AD 803805              <1>  cmp byte [%1], %2
    66 000037B0 0F8595290000        <1>  jne L_error_incorrect_type
  4470 000037B6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4471 000037BA 53                      	push rbx
  4472 000037BB FF7508                  	push RET_ADDR
  4473 000037BE 488B7D18                	mov rdi, COUNT
  4474 000037C2 4883C703                	add rdi, 3
  4475 000037C6 48C1E703                	shl rdi, 3
  4476 000037CA 4801EF                  	add rdi, rbp
  4477 000037CD 488B6D00                	mov rbp, OLD_RDP
  4478 000037D1 BE00000000              	mov rsi, 0
  4479                                  .L_tc_recycle_frame_loop_0fb8:	 ; start recycle frame loop
  4480 000037D6 4883FE03                	cmp rsi, 3
  4481 000037DA 7427                    	je .L_tc_recycle_frame_done_0fb8
  4482 000037DC B902000000              	mov rcx, 2
  4483 000037E1 4829F1                  	sub rcx, rsi
  4484 000037E4 48C1E103                	shl rcx, 3
  4485 000037E8 4801E1                  	add rcx, rsp ; rcx is the address to move
  4486 000037EB 4889F3                  	mov rbx, rsi
  4487 000037EE 48C1E303                	shl rbx, 3
  4488 000037F2 48F7DB                  	neg rbx
  4489 000037F5 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4490 000037F8 488B09                  	mov rcx, [rcx]
  4491 000037FB 48890B                  	mov [rbx], rcx
  4492 000037FE 48FFC6                  	inc rsi
  4493 00003801 EBD3                    	jmp .L_tc_recycle_frame_loop_0fb8
  4494                                  .L_tc_recycle_frame_done_0fb8:	 ; end recycle frame loop
  4495 00003803 BB02000000              	mov rbx, 2
  4496 00003808 48C1E303                	shl rbx, 3
  4497 0000380C 48F7DB                  	neg rbx
  4498 0000380F 4801FB                  	add rbx, rdi
  4499 00003812 4889DC                  	mov rsp, rbx
  4500 00003815 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4501 00003819 FFE3                    	jmp rbx
  4502                                  	.L_if_end_091b:
  4503                                  	.L_if_end_0918:
  4504 0000381B C9                      	leave
  4505 0000381C C22000                  	ret 8 * (2 + 2)
  4506                                  .L_lambda_simple_end_0a3a:	; new closure is in rax
  4507 0000381F 50                      	push rax
  4508 00003820 6A01                    	push 1
  4509 00003822 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4510 00003827 E89F100000              	call malloc
  4511 0000382C 50                      	push rax
  4512 0000382D BF08000000              	mov rdi, 8 * 1	; new rib
  4513 00003832 E894100000              	call malloc
  4514 00003837 50                      	push rax
  4515 00003838 BF10000000              	mov rdi, 8 * 2	; extended env
  4516 0000383D E889100000              	call malloc
  4517 00003842 488B7D10                	mov rdi, ENV
  4518 00003846 BE00000000              	mov rsi, 0
  4519 0000384B BA01000000              	mov rdx, 1
  4520                                  .L_lambda_simple_env_loop_0a3b:	; ext_env[i + 1] <-- env[i]
  4521 00003850 4883FE01                	cmp rsi, 1
  4522 00003854 7410                    	je .L_lambda_simple_env_end_0a3b
  4523 00003856 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4524 0000385A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4525 0000385E 48FFC6                  	inc rsi
  4526 00003861 48FFC2                  	inc rdx
  4527 00003864 EBEA                    	jmp .L_lambda_simple_env_loop_0a3b
  4528                                  .L_lambda_simple_env_end_0a3b:
  4529 00003866 5B                      	pop rbx
  4530 00003867 BE00000000              	mov rsi, 0
  4531                                  .L_lambda_simple_params_loop_0a3b:	; copy params
  4532 0000386C 4883FE01                	cmp rsi, 1
  4533 00003870 740E                    	je .L_lambda_simple_params_end_0a3b
  4534 00003872 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4535 00003877 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4536 0000387B 48FFC6                  	inc rsi
  4537 0000387E EBEC                    	jmp .L_lambda_simple_params_loop_0a3b
  4538                                  .L_lambda_simple_params_end_0a3b:
  4539 00003880 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4540 00003883 4889C3                  	mov rbx, rax
  4541 00003886 58                      	pop rax
  4542 00003887 C60005                  	mov byte [rax], T_closure
  4543 0000388A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4544 0000388E 48C74009[9B380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a3b
  4545 00003896 E922020000              	jmp .L_lambda_simple_end_0a3b
  4546                                  .L_lambda_simple_code_0a3b:	; lambda-simple body
  4547 0000389B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4548 000038A1 740B                    	je .L_lambda_simple_arity_check_ok_0a3b
  4549 000038A3 FF742410                	push qword [rsp + 8 * 2]
  4550 000038A7 6A01                    	push 1
  4551 000038A9 E9D60F0000              	jmp L_error_incorrect_arity_simple
  4552                                  .L_lambda_simple_arity_check_ok_0a3b:
  4553 000038AE C8000000                	enter 0, 0
  4554 000038B2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4555 000038B7 E80F100000              	call malloc
  4556 000038BC 50                      	push rax
  4557 000038BD BF08000000              	mov rdi, 8 * 1	; new rib
  4558 000038C2 E804100000              	call malloc
  4559 000038C7 50                      	push rax
  4560 000038C8 BF18000000              	mov rdi, 8 * 3	; extended env
  4561 000038CD E8F90F0000              	call malloc
  4562 000038D2 488B7D10                	mov rdi, ENV
  4563 000038D6 BE00000000              	mov rsi, 0
  4564 000038DB BA01000000              	mov rdx, 1
  4565                                  .L_lambda_opt_env_loop_03cd:	; ext_env[i + 1] <-- env[i]
  4566 000038E0 4883FE02                	cmp rsi, 2
  4567 000038E4 7410                    	je .L_lambda_opt_env_end_03cd
  4568 000038E6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4569 000038EA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4570 000038EE 48FFC6                  	inc rsi
  4571 000038F1 48FFC2                  	inc rdx
  4572 000038F4 EBEA                    	jmp .L_lambda_opt_env_loop_03cd
  4573                                  .L_lambda_opt_env_end_03cd:
  4574 000038F6 5B                      	pop rbx
  4575 000038F7 BE00000000              	mov rsi, 0
  4576                                  .L_lambda_opt_params_loop_03cd:	; copy params
  4577 000038FC 4883FE01                	cmp rsi, 1
  4578 00003900 740E                    	je .L_lambda_opt_params_end_03cd
  4579 00003902 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4580 00003907 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4581 0000390B 48FFC6                  	inc rsi
  4582 0000390E EBEC                    	jmp .L_lambda_opt_params_loop_03cd
  4583                                  .L_lambda_opt_params_end_03cd:
  4584 00003910 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4585 00003913 4889C3                  	mov rbx, rax
  4586 00003916 58                      	pop rax
  4587 00003917 C60005                  	mov byte [rax], T_closure
  4588 0000391A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4589 0000391E 48C74009[2B390000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_03cd
  4590 00003926 E98E010000              	jmp .L_lambda_opt_end_03cd
  4591                                  .L_lambda_opt_code_03cd:	; lambda-opt body
  4592 0000392B 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  4593 00003930 4889FB                  	mov rbx, rdi
  4594 00003933 4883EB00                	sub rbx, 0 ; rbx is the num of extra args
  4595 00003937 4883FB00                	cmp rbx, 0
  4596 0000393B 7F45                    	jg .L_lambda_opt_arity_check_more_03cd
  4597                                  .L_lambda_opt_arity_check_exact_03cd:	 ; if params in opt is exact
  4598 0000393D 4883EC08                	sub rsp, 8
  4599 00003941 BE00000000              	mov rsi, 0 ; index
  4600                                  .L_lambda_opt_stack_enlarge_loop_03cd:	 ; stack loop enlarge start
  4601 00003946 4883FE03                	cmp rsi, 3
  4602 0000394A 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_03cd
  4603 0000394C 4889F7                  	mov rdi, rsi
  4604 0000394F 48FFC7                  	inc rdi
  4605 00003952 48C1E703                	shl rdi, 3
  4606 00003956 4801E7                  	add rdi, rsp
  4607 00003959 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  4608 0000395C 4883EB08                	sub rbx, 8
  4609 00003960 488B3F                  	mov rdi, [rdi]
  4610 00003963 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  4611 00003966 48FFC6                  	inc rsi
  4612 00003969 EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_03cd
  4613                                  .L_lambda_opt_stack_enlarge_loop_exit_03cd:	 ; end of stack enlarge loop
  4614 0000396B 48C7442418-             	mov qword [rsp + 3*8], sob_nil
  4614 00003970 [01000000]         
  4615 00003974 48C744241001000000      	mov qword [rsp + 2*8], 1
  4616 0000397D E99E000000              	jmp .L_lambda_opt_stack_adjusted_03cd
  4617                                  .L_lambda_opt_arity_check_more_03cd:	 ; if params in opt is more
  4618 00003982 48B8-                   	mov rax, sob_nil
  4618 00003984 [0100000000000000] 
  4619 0000398C 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  4620 0000398F 48FFCE                  	dec rsi
  4621                                  .L_lambda_opt_list_create_loop_03cd:	; start of list creation loop
  4622 00003992 4883FEFF                	cmp rsi, -1
  4623 00003996 7422                    	je .L_lambda_opt_list_create_loop_exit_03cd
  4624 00003998 488D4E03                	lea rcx, [rsi + (3 + 0)]
  4625 0000399C 48C1E103                	shl rcx, 3
  4626 000039A0 4801E1                  	add rcx, rsp
  4627 000039A3 488B09                  	mov rcx, [rcx]
  4628 000039A6 56                      	push rsi ; save params
  4629 000039A7 53                      	push rbx
  4630                                  
  4631 000039A8 50                      	push rax ; cdr
  4632 000039A9 51                      	push rcx ; car
  4633 000039AA 6A02                    	push qword 2 ; push num of args
  4634 000039AC 6A01                    	push qword 1 ; push garbage as env
  4635 000039AE E89F180000              	call L_code_ptr_cons
  4636                                  
  4637 000039B3 5B                      	pop rbx ; restore params
  4638 000039B4 5E                      	pop rsi
  4639 000039B5 48FFCE                  	dec rsi
  4640 000039B8 EBD8                    	jmp .L_lambda_opt_list_create_loop_03cd
  4641                                  .L_lambda_opt_list_create_loop_exit_03cd:	; end of list creation loop
  4642 000039BA 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  4643 000039BF 4883C302                	add rbx, 2
  4644 000039C3 4889DF                  	mov rdi, rbx
  4645 000039C6 48C1E703                	shl rdi,3
  4646 000039CA 4801E7                  	add rdi, rsp
  4647 000039CD 488907                  	mov [rdi], rax
  4648 000039D0 BE00000000              	mov rsi, 0 ;index
  4649                                  .L_lambda_opt_stack_shrink_loop_03cd:	; start of stack shrink loop
  4650 000039D5 4883FE03                	cmp rsi, 3
  4651 000039D9 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_03cd
  4652 000039DB BF02000000              	mov rdi, 2
  4653 000039E0 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  4654 000039E3 4889D9                  	mov rcx, rbx
  4655 000039E6 4829F1                  	sub rcx, rsi
  4656 000039E9 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  4657 000039EC 4889FA                  	mov rdx, rdi
  4658 000039EF 48C1E203                	shl rdx, 3
  4659 000039F3 4801E2                  	add rdx, rsp
  4660 000039F6 48C1E103                	shl rcx, 3
  4661 000039FA 4801E1                  	add rcx, rsp
  4662 000039FD 488B12                  	mov rdx, [rdx]
  4663 00003A00 488911                  	mov [rcx], rdx
  4664 00003A03 48FFC6                  	inc rsi
  4665 00003A06 EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_03cd
  4666                                  .L_lambda_opt_stack_shrink_loop_exit_03cd:	; end of stack shrink loop
  4667 00003A08 4883EB02                	sub rbx, 2 ; rbx has number of args
  4668 00003A0C 4883EB01                	sub rbx, 1
  4669 00003A10 48C1E303                	shl rbx, 3
  4670 00003A14 4801DC                  	add rsp, rbx
  4671 00003A17 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  4672                                  .L_lambda_opt_stack_adjusted_03cd:
  4673 00003A20 C8000000                	enter 0, 0
  4674 00003A24 488B4520                	mov rax, PARAM(0)
  4675 00003A28 50                      	push rax
  4676 00003A29 488D0425[20000000]      	lea rax, [32 + L_constants]
  4677 00003A31 50                      	push rax
  4678 00003A32 488B4510                	mov rax, qword [rbp + 8*2]
  4679 00003A36 488B00                  	mov rax, qword [rax + 8*0]
  4680 00003A39 488B00                  	mov rax, qword [rax + 8*0]
  4681 00003A3C 50                      	push rax
  4682 00003A3D 6A03                    	push 3
  4683 00003A3F 488B0425[F0010000]      	mov rax, qword [free_var_62]
  4684                                  	assert_closure(rax)
    65 00003A47 803805              <1>  cmp byte [%1], %2
    66 00003A4A 0F85FB260000        <1>  jne L_error_incorrect_type
  4685 00003A50 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4686 00003A54 53                      	push rbx
  4687 00003A55 FF7508                  	push RET_ADDR
  4688 00003A58 488B7D18                	mov rdi, COUNT
  4689 00003A5C 4883C703                	add rdi, 3
  4690 00003A60 48C1E703                	shl rdi, 3
  4691 00003A64 4801EF                  	add rdi, rbp
  4692 00003A67 488B6D00                	mov rbp, OLD_RDP
  4693 00003A6B BE00000000              	mov rsi, 0
  4694                                  .L_tc_recycle_frame_loop_0fb9:	 ; start recycle frame loop
  4695 00003A70 4883FE06                	cmp rsi, 6
  4696 00003A74 7427                    	je .L_tc_recycle_frame_done_0fb9
  4697 00003A76 B905000000              	mov rcx, 5
  4698 00003A7B 4829F1                  	sub rcx, rsi
  4699 00003A7E 48C1E103                	shl rcx, 3
  4700 00003A82 4801E1                  	add rcx, rsp ; rcx is the address to move
  4701 00003A85 4889F3                  	mov rbx, rsi
  4702 00003A88 48C1E303                	shl rbx, 3
  4703 00003A8C 48F7DB                  	neg rbx
  4704 00003A8F 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4705 00003A92 488B09                  	mov rcx, [rcx]
  4706 00003A95 48890B                  	mov [rbx], rcx
  4707 00003A98 48FFC6                  	inc rsi
  4708 00003A9B EBD3                    	jmp .L_tc_recycle_frame_loop_0fb9
  4709                                  .L_tc_recycle_frame_done_0fb9:	 ; end recycle frame loop
  4710 00003A9D BB05000000              	mov rbx, 5
  4711 00003AA2 48C1E303                	shl rbx, 3
  4712 00003AA6 48F7DB                  	neg rbx
  4713 00003AA9 4801FB                  	add rbx, rdi
  4714 00003AAC 4889DC                  	mov rsp, rbx
  4715 00003AAF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4716 00003AB3 FFE3                    	jmp rbx
  4717 00003AB5 C9                      	leave
  4718 00003AB6 C21800                  	ret AND_KILL_FRAME(1)
  4719                                  .L_lambda_opt_end_03cd:	; new closure is in rax
  4720 00003AB9 C9                      	leave
  4721 00003ABA C21800                  	ret 8 * (2 + 1)
  4722                                  .L_lambda_simple_end_0a3b:	; new closure is in rax
  4723                                  	assert_closure(rax)
    65 00003ABD 803805              <1>  cmp byte [%1], %2
    66 00003AC0 0F8585260000        <1>  jne L_error_incorrect_type
  4724 00003AC6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4725 00003ACA 53                      	push rbx
  4726 00003ACB FF7508                  	push RET_ADDR
  4727 00003ACE 488B7D18                	mov rdi, COUNT
  4728 00003AD2 4883C703                	add rdi, 3
  4729 00003AD6 48C1E703                	shl rdi, 3
  4730 00003ADA 4801EF                  	add rdi, rbp
  4731 00003ADD 488B6D00                	mov rbp, OLD_RDP
  4732 00003AE1 BE00000000              	mov rsi, 0
  4733                                  .L_tc_recycle_frame_loop_0fb1:	 ; start recycle frame loop
  4734 00003AE6 4883FE04                	cmp rsi, 4
  4735 00003AEA 7427                    	je .L_tc_recycle_frame_done_0fb1
  4736 00003AEC B903000000              	mov rcx, 3
  4737 00003AF1 4829F1                  	sub rcx, rsi
  4738 00003AF4 48C1E103                	shl rcx, 3
  4739 00003AF8 4801E1                  	add rcx, rsp ; rcx is the address to move
  4740 00003AFB 4889F3                  	mov rbx, rsi
  4741 00003AFE 48C1E303                	shl rbx, 3
  4742 00003B02 48F7DB                  	neg rbx
  4743 00003B05 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4744 00003B08 488B09                  	mov rcx, [rcx]
  4745 00003B0B 48890B                  	mov [rbx], rcx
  4746 00003B0E 48FFC6                  	inc rsi
  4747 00003B11 EBD3                    	jmp .L_tc_recycle_frame_loop_0fb1
  4748                                  .L_tc_recycle_frame_done_0fb1:	 ; end recycle frame loop
  4749 00003B13 BB03000000              	mov rbx, 3
  4750 00003B18 48C1E303                	shl rbx, 3
  4751 00003B1C 48F7DB                  	neg rbx
  4752 00003B1F 4801FB                  	add rbx, rdi
  4753 00003B22 4889DC                  	mov rsp, rbx
  4754 00003B25 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4755 00003B29 FFE3                    	jmp rbx
  4756 00003B2B C9                      	leave
  4757 00003B2C C21800                  	ret 8 * (2 + 1)
  4758                                  .L_lambda_simple_end_0a39:	; new closure is in rax
  4759                                  	assert_closure(rax)
    65 00003B2F 803805              <1>  cmp byte [%1], %2
    66 00003B32 0F8513260000        <1>  jne L_error_incorrect_type
  4760 00003B38 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4761 00003B3C 53                      	push rbx
  4762 00003B3D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4763 00003B41 FFD3                    	call rbx
  4764 00003B43 48890425[00020000]      	mov qword [free_var_64], rax
  4765 00003B4B 48B8-                   	mov rax, sob_void
  4765 00003B4D [0000000000000000] 
  4766                                  
  4767 00003B55 4889C7                  	mov rdi, rax
  4768 00003B58 E87F0D0000              	call print_sexpr_if_not_void
  4769                                  
  4770 00003B5D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4771 00003B62 E8640D0000              	call malloc
  4772 00003B67 50                      	push rax
  4773 00003B68 BF00000000              	mov rdi, 8 * 0	; new rib
  4774 00003B6D E8590D0000              	call malloc
  4775 00003B72 50                      	push rax
  4776 00003B73 BF08000000              	mov rdi, 8 * 1	; extended env
  4777 00003B78 E84E0D0000              	call malloc
  4778 00003B7D 488B7D10                	mov rdi, ENV
  4779 00003B81 BE00000000              	mov rsi, 0
  4780 00003B86 BA01000000              	mov rdx, 1
  4781                                  .L_lambda_simple_env_loop_0a3c:	; ext_env[i + 1] <-- env[i]
  4782 00003B8B 4883FE00                	cmp rsi, 0
  4783 00003B8F 7410                    	je .L_lambda_simple_env_end_0a3c
  4784 00003B91 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4785 00003B95 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4786 00003B99 48FFC6                  	inc rsi
  4787 00003B9C 48FFC2                  	inc rdx
  4788 00003B9F EBEA                    	jmp .L_lambda_simple_env_loop_0a3c
  4789                                  .L_lambda_simple_env_end_0a3c:
  4790 00003BA1 5B                      	pop rbx
  4791 00003BA2 BE00000000              	mov rsi, 0
  4792                                  .L_lambda_simple_params_loop_0a3c:	; copy params
  4793 00003BA7 4883FE00                	cmp rsi, 0
  4794 00003BAB 740E                    	je .L_lambda_simple_params_end_0a3c
  4795 00003BAD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4796 00003BB2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4797 00003BB6 48FFC6                  	inc rsi
  4798 00003BB9 EBEC                    	jmp .L_lambda_simple_params_loop_0a3c
  4799                                  .L_lambda_simple_params_end_0a3c:
  4800 00003BBB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4801 00003BBE 4889C3                  	mov rbx, rax
  4802 00003BC1 58                      	pop rax
  4803 00003BC2 C60005                  	mov byte [rax], T_closure
  4804 00003BC5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4805 00003BC9 48C74009[D63B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a3c
  4806 00003BD1 E9A5000000              	jmp .L_lambda_simple_end_0a3c
  4807                                  .L_lambda_simple_code_0a3c:	; lambda-simple body
  4808 00003BD6 48837C241000            	cmp qword [rsp + 8 * 2], 0
  4809 00003BDC 740B                    	je .L_lambda_simple_arity_check_ok_0a3c
  4810 00003BDE FF742410                	push qword [rsp + 8 * 2]
  4811 00003BE2 6A00                    	push 0
  4812 00003BE4 E99B0C0000              	jmp L_error_incorrect_arity_simple
  4813                                  .L_lambda_simple_arity_check_ok_0a3c:
  4814 00003BE9 C8000000                	enter 0, 0
  4815 00003BED 488D0425[44000000]      	lea rax, [68 + L_constants]
  4816 00003BF5 50                      	push rax
  4817 00003BF6 488D0425[77000000]      	lea rax, [119 + L_constants]
  4818 00003BFE 50                      	push rax
  4819 00003BFF 6A02                    	push 2
  4820 00003C01 488B0425[30010000]      	mov rax, qword [free_var_38]
  4821                                  	assert_closure(rax)
    65 00003C09 803805              <1>  cmp byte [%1], %2
    66 00003C0C 0F8539250000        <1>  jne L_error_incorrect_type
  4822 00003C12 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4823 00003C16 53                      	push rbx
  4824 00003C17 FF7508                  	push RET_ADDR
  4825 00003C1A 488B7D18                	mov rdi, COUNT
  4826 00003C1E 4883C703                	add rdi, 3
  4827 00003C22 48C1E703                	shl rdi, 3
  4828 00003C26 4801EF                  	add rdi, rbp
  4829 00003C29 488B6D00                	mov rbp, OLD_RDP
  4830 00003C2D BE00000000              	mov rsi, 0
  4831                                  .L_tc_recycle_frame_loop_0fba:	 ; start recycle frame loop
  4832 00003C32 4883FE05                	cmp rsi, 5
  4833 00003C36 7427                    	je .L_tc_recycle_frame_done_0fba
  4834 00003C38 B904000000              	mov rcx, 4
  4835 00003C3D 4829F1                  	sub rcx, rsi
  4836 00003C40 48C1E103                	shl rcx, 3
  4837 00003C44 4801E1                  	add rcx, rsp ; rcx is the address to move
  4838 00003C47 4889F3                  	mov rbx, rsi
  4839 00003C4A 48C1E303                	shl rbx, 3
  4840 00003C4E 48F7DB                  	neg rbx
  4841 00003C51 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4842 00003C54 488B09                  	mov rcx, [rcx]
  4843 00003C57 48890B                  	mov [rbx], rcx
  4844 00003C5A 48FFC6                  	inc rsi
  4845 00003C5D EBD3                    	jmp .L_tc_recycle_frame_loop_0fba
  4846                                  .L_tc_recycle_frame_done_0fba:	 ; end recycle frame loop
  4847 00003C5F BB04000000              	mov rbx, 4
  4848 00003C64 48C1E303                	shl rbx, 3
  4849 00003C68 48F7DB                  	neg rbx
  4850 00003C6B 4801FB                  	add rbx, rdi
  4851 00003C6E 4889DC                  	mov rsp, rbx
  4852 00003C71 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4853 00003C75 FFE3                    	jmp rbx
  4854 00003C77 C9                      	leave
  4855 00003C78 C21000                  	ret 8 * (2 + 0)
  4856                                  .L_lambda_simple_end_0a3c:	; new closure is in rax
  4857 00003C7B 50                      	push rax
  4858 00003C7C 6A01                    	push 1
  4859 00003C7E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4860 00003C83 E8430C0000              	call malloc
  4861 00003C88 50                      	push rax
  4862 00003C89 BF00000000              	mov rdi, 8 * 0	; new rib
  4863 00003C8E E8380C0000              	call malloc
  4864 00003C93 50                      	push rax
  4865 00003C94 BF08000000              	mov rdi, 8 * 1	; extended env
  4866 00003C99 E82D0C0000              	call malloc
  4867 00003C9E 488B7D10                	mov rdi, ENV
  4868 00003CA2 BE00000000              	mov rsi, 0
  4869 00003CA7 BA01000000              	mov rdx, 1
  4870                                  .L_lambda_simple_env_loop_0a3d:	; ext_env[i + 1] <-- env[i]
  4871 00003CAC 4883FE00                	cmp rsi, 0
  4872 00003CB0 7410                    	je .L_lambda_simple_env_end_0a3d
  4873 00003CB2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4874 00003CB6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4875 00003CBA 48FFC6                  	inc rsi
  4876 00003CBD 48FFC2                  	inc rdx
  4877 00003CC0 EBEA                    	jmp .L_lambda_simple_env_loop_0a3d
  4878                                  .L_lambda_simple_env_end_0a3d:
  4879 00003CC2 5B                      	pop rbx
  4880 00003CC3 BE00000000              	mov rsi, 0
  4881                                  .L_lambda_simple_params_loop_0a3d:	; copy params
  4882 00003CC8 4883FE00                	cmp rsi, 0
  4883 00003CCC 740E                    	je .L_lambda_simple_params_end_0a3d
  4884 00003CCE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4885 00003CD3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4886 00003CD7 48FFC6                  	inc rsi
  4887 00003CDA EBEC                    	jmp .L_lambda_simple_params_loop_0a3d
  4888                                  .L_lambda_simple_params_end_0a3d:
  4889 00003CDC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4890 00003CDF 4889C3                  	mov rbx, rax
  4891 00003CE2 58                      	pop rax
  4892 00003CE3 C60005                  	mov byte [rax], T_closure
  4893 00003CE6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4894 00003CEA 48C74009[F73C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a3d
  4895 00003CF2 E98E0A0000              	jmp .L_lambda_simple_end_0a3d
  4896                                  .L_lambda_simple_code_0a3d:	; lambda-simple body
  4897 00003CF7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4898 00003CFD 740B                    	je .L_lambda_simple_arity_check_ok_0a3d
  4899 00003CFF FF742410                	push qword [rsp + 8 * 2]
  4900 00003D03 6A01                    	push 1
  4901 00003D05 E97A0B0000              	jmp L_error_incorrect_arity_simple
  4902                                  .L_lambda_simple_arity_check_ok_0a3d:
  4903 00003D0A C8000000                	enter 0, 0
  4904 00003D0E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4905 00003D13 E8B30B0000              	call malloc
  4906 00003D18 50                      	push rax
  4907 00003D19 BF08000000              	mov rdi, 8 * 1	; new rib
  4908 00003D1E E8A80B0000              	call malloc
  4909 00003D23 50                      	push rax
  4910 00003D24 BF10000000              	mov rdi, 8 * 2	; extended env
  4911 00003D29 E89D0B0000              	call malloc
  4912 00003D2E 488B7D10                	mov rdi, ENV
  4913 00003D32 BE00000000              	mov rsi, 0
  4914 00003D37 BA01000000              	mov rdx, 1
  4915                                  .L_lambda_simple_env_loop_0a3e:	; ext_env[i + 1] <-- env[i]
  4916 00003D3C 4883FE01                	cmp rsi, 1
  4917 00003D40 7410                    	je .L_lambda_simple_env_end_0a3e
  4918 00003D42 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  4919 00003D46 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4920 00003D4A 48FFC6                  	inc rsi
  4921 00003D4D 48FFC2                  	inc rdx
  4922 00003D50 EBEA                    	jmp .L_lambda_simple_env_loop_0a3e
  4923                                  .L_lambda_simple_env_end_0a3e:
  4924 00003D52 5B                      	pop rbx
  4925 00003D53 BE00000000              	mov rsi, 0
  4926                                  .L_lambda_simple_params_loop_0a3e:	; copy params
  4927 00003D58 4883FE01                	cmp rsi, 1
  4928 00003D5C 740E                    	je .L_lambda_simple_params_end_0a3e
  4929 00003D5E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4930 00003D63 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4931 00003D67 48FFC6                  	inc rsi
  4932 00003D6A EBEC                    	jmp .L_lambda_simple_params_loop_0a3e
  4933                                  .L_lambda_simple_params_end_0a3e:
  4934 00003D6C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4935 00003D6F 4889C3                  	mov rbx, rax
  4936 00003D72 58                      	pop rax
  4937 00003D73 C60005                  	mov byte [rax], T_closure
  4938 00003D76 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4939 00003D7A 48C74009[873D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a3e
  4940 00003D82 E9FE040000              	jmp .L_lambda_simple_end_0a3e
  4941                                  .L_lambda_simple_code_0a3e:	; lambda-simple body
  4942 00003D87 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4943 00003D8D 740B                    	je .L_lambda_simple_arity_check_ok_0a3e
  4944 00003D8F FF742410                	push qword [rsp + 8 * 2]
  4945 00003D93 6A02                    	push 2
  4946 00003D95 E9EA0A0000              	jmp L_error_incorrect_arity_simple
  4947                                  .L_lambda_simple_arity_check_ok_0a3e:
  4948 00003D9A C8000000                	enter 0, 0
  4949 00003D9E 488B4520                	mov rax, PARAM(0)
  4950 00003DA2 50                      	push rax
  4951 00003DA3 6A01                    	push 1
  4952 00003DA5 488B0425[48000000]      	mov rax, qword [free_var_9]
  4953                                  	assert_closure(rax)
    65 00003DAD 803805              <1>  cmp byte [%1], %2
    66 00003DB0 0F8595230000        <1>  jne L_error_incorrect_type
  4954 00003DB6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4955 00003DBA 53                      	push rbx
  4956 00003DBB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4957 00003DBF FFD3                    	call rbx
  4958 00003DC1 483D[02000000]          	cmp rax, sob_boolean_false
  4959 00003DC7 0F8407020000            	je .L_if_else_091e
  4960 00003DCD 488B4528                	mov rax, PARAM(1)
  4961 00003DD1 50                      	push rax
  4962 00003DD2 6A01                    	push 1
  4963 00003DD4 488B0425[48000000]      	mov rax, qword [free_var_9]
  4964                                  	assert_closure(rax)
    65 00003DDC 803805              <1>  cmp byte [%1], %2
    66 00003DDF 0F8566230000        <1>  jne L_error_incorrect_type
  4965 00003DE5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4966 00003DE9 53                      	push rbx
  4967 00003DEA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4968 00003DEE FFD3                    	call rbx
  4969 00003DF0 483D[02000000]          	cmp rax, sob_boolean_false
  4970 00003DF6 0F8487000000            	je .L_if_else_091f
  4971 00003DFC 488B4528                	mov rax, PARAM(1)
  4972 00003E00 50                      	push rax
  4973 00003E01 488B4520                	mov rax, PARAM(0)
  4974 00003E05 50                      	push rax
  4975 00003E06 6A02                    	push 2
  4976 00003E08 488B0425[18010000]      	mov rax, qword [free_var_35]
  4977                                  	assert_closure(rax)
    65 00003E10 803805              <1>  cmp byte [%1], %2
    66 00003E13 0F8532230000        <1>  jne L_error_incorrect_type
  4978 00003E19 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4979 00003E1D 53                      	push rbx
  4980 00003E1E FF7508                  	push RET_ADDR
  4981 00003E21 488B7D18                	mov rdi, COUNT
  4982 00003E25 4883C703                	add rdi, 3
  4983 00003E29 48C1E703                	shl rdi, 3
  4984 00003E2D 4801EF                  	add rdi, rbp
  4985 00003E30 488B6D00                	mov rbp, OLD_RDP
  4986 00003E34 BE00000000              	mov rsi, 0
  4987                                  .L_tc_recycle_frame_loop_0fbc:	 ; start recycle frame loop
  4988 00003E39 4883FE05                	cmp rsi, 5
  4989 00003E3D 7427                    	je .L_tc_recycle_frame_done_0fbc
  4990 00003E3F B904000000              	mov rcx, 4
  4991 00003E44 4829F1                  	sub rcx, rsi
  4992 00003E47 48C1E103                	shl rcx, 3
  4993 00003E4B 4801E1                  	add rcx, rsp ; rcx is the address to move
  4994 00003E4E 4889F3                  	mov rbx, rsi
  4995 00003E51 48C1E303                	shl rbx, 3
  4996 00003E55 48F7DB                  	neg rbx
  4997 00003E58 4801FB                  	add rbx, rdi ;rbx is the address to move to
  4998 00003E5B 488B09                  	mov rcx, [rcx]
  4999 00003E5E 48890B                  	mov [rbx], rcx
  5000 00003E61 48FFC6                  	inc rsi
  5001 00003E64 EBD3                    	jmp .L_tc_recycle_frame_loop_0fbc
  5002                                  .L_tc_recycle_frame_done_0fbc:	 ; end recycle frame loop
  5003 00003E66 BB04000000              	mov rbx, 4
  5004 00003E6B 48C1E303                	shl rbx, 3
  5005 00003E6F 48F7DB                  	neg rbx
  5006 00003E72 4801FB                  	add rbx, rdi
  5007 00003E75 4889DC                  	mov rsp, rbx
  5008 00003E78 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5009 00003E7C FFE3                    	jmp rbx
  5010 00003E7E E94C010000              	jmp .L_if_end_091f
  5011                                  	.L_if_else_091f:
  5012 00003E83 488B4528                	mov rax, PARAM(1)
  5013 00003E87 50                      	push rax
  5014 00003E88 6A01                    	push 1
  5015 00003E8A 488B0425[40000000]      	mov rax, qword [free_var_8]
  5016                                  	assert_closure(rax)
    65 00003E92 803805              <1>  cmp byte [%1], %2
    66 00003E95 0F85B0220000        <1>  jne L_error_incorrect_type
  5017 00003E9B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5018 00003E9F 53                      	push rbx
  5019 00003EA0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5020 00003EA4 FFD3                    	call rbx
  5021 00003EA6 483D[02000000]          	cmp rax, sob_boolean_false
  5022 00003EAC 0F84A3000000            	je .L_if_else_0920
  5023 00003EB2 488B4528                	mov rax, PARAM(1)
  5024 00003EB6 50                      	push rax
  5025 00003EB7 488B4520                	mov rax, PARAM(0)
  5026 00003EBB 50                      	push rax
  5027 00003EBC 6A01                    	push 1
  5028 00003EBE 488B0425[B8000000]      	mov rax, qword [free_var_23]
  5029                                  	assert_closure(rax)
    65 00003EC6 803805              <1>  cmp byte [%1], %2
    66 00003EC9 0F857C220000        <1>  jne L_error_incorrect_type
  5030 00003ECF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5031 00003ED3 53                      	push rbx
  5032 00003ED4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5033 00003ED8 FFD3                    	call rbx
  5034 00003EDA 50                      	push rax
  5035 00003EDB 6A02                    	push 2
  5036 00003EDD 488B0425[F8000000]      	mov rax, qword [free_var_31]
  5037                                  	assert_closure(rax)
    65 00003EE5 803805              <1>  cmp byte [%1], %2
    66 00003EE8 0F855D220000        <1>  jne L_error_incorrect_type
  5038 00003EEE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5039 00003EF2 53                      	push rbx
  5040 00003EF3 FF7508                  	push RET_ADDR
  5041 00003EF6 488B7D18                	mov rdi, COUNT
  5042 00003EFA 4883C703                	add rdi, 3
  5043 00003EFE 48C1E703                	shl rdi, 3
  5044 00003F02 4801EF                  	add rdi, rbp
  5045 00003F05 488B6D00                	mov rbp, OLD_RDP
  5046 00003F09 BE00000000              	mov rsi, 0
  5047                                  .L_tc_recycle_frame_loop_0fbd:	 ; start recycle frame loop
  5048 00003F0E 4883FE05                	cmp rsi, 5
  5049 00003F12 7427                    	je .L_tc_recycle_frame_done_0fbd
  5050 00003F14 B904000000              	mov rcx, 4
  5051 00003F19 4829F1                  	sub rcx, rsi
  5052 00003F1C 48C1E103                	shl rcx, 3
  5053 00003F20 4801E1                  	add rcx, rsp ; rcx is the address to move
  5054 00003F23 4889F3                  	mov rbx, rsi
  5055 00003F26 48C1E303                	shl rbx, 3
  5056 00003F2A 48F7DB                  	neg rbx
  5057 00003F2D 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5058 00003F30 488B09                  	mov rcx, [rcx]
  5059 00003F33 48890B                  	mov [rbx], rcx
  5060 00003F36 48FFC6                  	inc rsi
  5061 00003F39 EBD3                    	jmp .L_tc_recycle_frame_loop_0fbd
  5062                                  .L_tc_recycle_frame_done_0fbd:	 ; end recycle frame loop
  5063 00003F3B BB04000000              	mov rbx, 4
  5064 00003F40 48C1E303                	shl rbx, 3
  5065 00003F44 48F7DB                  	neg rbx
  5066 00003F47 4801FB                  	add rbx, rdi
  5067 00003F4A 4889DC                  	mov rsp, rbx
  5068 00003F4D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5069 00003F51 FFE3                    	jmp rbx
  5070 00003F53 EB7A                    	jmp .L_if_end_0920
  5071                                  	.L_if_else_0920:
  5072 00003F55 6A00                    	push 0
  5073 00003F57 488B4510                	mov rax, qword [rbp + 8*2]
  5074 00003F5B 488B00                  	mov rax, qword [rax + 8*0]
  5075 00003F5E 488B00                  	mov rax, qword [rax + 8*0]
  5076                                  	assert_closure(rax)
    65 00003F61 803805              <1>  cmp byte [%1], %2
    66 00003F64 0F85E1210000        <1>  jne L_error_incorrect_type
  5077 00003F6A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5078 00003F6E 53                      	push rbx
  5079 00003F6F FF7508                  	push RET_ADDR
  5080 00003F72 488B7D18                	mov rdi, COUNT
  5081 00003F76 4883C703                	add rdi, 3
  5082 00003F7A 48C1E703                	shl rdi, 3
  5083 00003F7E 4801EF                  	add rdi, rbp
  5084 00003F81 488B6D00                	mov rbp, OLD_RDP
  5085 00003F85 BE00000000              	mov rsi, 0
  5086                                  .L_tc_recycle_frame_loop_0fbe:	 ; start recycle frame loop
  5087 00003F8A 4883FE03                	cmp rsi, 3
  5088 00003F8E 7427                    	je .L_tc_recycle_frame_done_0fbe
  5089 00003F90 B902000000              	mov rcx, 2
  5090 00003F95 4829F1                  	sub rcx, rsi
  5091 00003F98 48C1E103                	shl rcx, 3
  5092 00003F9C 4801E1                  	add rcx, rsp ; rcx is the address to move
  5093 00003F9F 4889F3                  	mov rbx, rsi
  5094 00003FA2 48C1E303                	shl rbx, 3
  5095 00003FA6 48F7DB                  	neg rbx
  5096 00003FA9 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5097 00003FAC 488B09                  	mov rcx, [rcx]
  5098 00003FAF 48890B                  	mov [rbx], rcx
  5099 00003FB2 48FFC6                  	inc rsi
  5100 00003FB5 EBD3                    	jmp .L_tc_recycle_frame_loop_0fbe
  5101                                  .L_tc_recycle_frame_done_0fbe:	 ; end recycle frame loop
  5102 00003FB7 BB02000000              	mov rbx, 2
  5103 00003FBC 48C1E303                	shl rbx, 3
  5104 00003FC0 48F7DB                  	neg rbx
  5105 00003FC3 4801FB                  	add rbx, rdi
  5106 00003FC6 4889DC                  	mov rsp, rbx
  5107 00003FC9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5108 00003FCD FFE3                    	jmp rbx
  5109                                  	.L_if_end_0920:
  5110                                  	.L_if_end_091f:
  5111 00003FCF E9AD020000              	jmp .L_if_end_091e
  5112                                  	.L_if_else_091e:
  5113 00003FD4 488B4520                	mov rax, PARAM(0)
  5114 00003FD8 50                      	push rax
  5115 00003FD9 6A01                    	push 1
  5116 00003FDB 488B0425[40000000]      	mov rax, qword [free_var_8]
  5117                                  	assert_closure(rax)
    65 00003FE3 803805              <1>  cmp byte [%1], %2
    66 00003FE6 0F855F210000        <1>  jne L_error_incorrect_type
  5118 00003FEC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5119 00003FF0 53                      	push rbx
  5120 00003FF1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5121 00003FF5 FFD3                    	call rbx
  5122 00003FF7 483D[02000000]          	cmp rax, sob_boolean_false
  5123 00003FFD 0F8404020000            	je .L_if_else_0921
  5124 00004003 488B4528                	mov rax, PARAM(1)
  5125 00004007 50                      	push rax
  5126 00004008 6A01                    	push 1
  5127 0000400A 488B0425[48000000]      	mov rax, qword [free_var_9]
  5128                                  	assert_closure(rax)
    65 00004012 803805              <1>  cmp byte [%1], %2
    66 00004015 0F8530210000        <1>  jne L_error_incorrect_type
  5129 0000401B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5130 0000401F 53                      	push rbx
  5131 00004020 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5132 00004024 FFD3                    	call rbx
  5133 00004026 483D[02000000]          	cmp rax, sob_boolean_false
  5134 0000402C 0F84A6000000            	je .L_if_else_0922
  5135 00004032 488B4528                	mov rax, PARAM(1)
  5136 00004036 50                      	push rax
  5137 00004037 6A01                    	push 1
  5138 00004039 488B0425[B8000000]      	mov rax, qword [free_var_23]
  5139                                  	assert_closure(rax)
    65 00004041 803805              <1>  cmp byte [%1], %2
    66 00004044 0F8501210000        <1>  jne L_error_incorrect_type
  5140 0000404A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5141 0000404E 53                      	push rbx
  5142 0000404F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5143 00004053 FFD3                    	call rbx
  5144 00004055 50                      	push rax
  5145 00004056 488B4520                	mov rax, PARAM(0)
  5146 0000405A 50                      	push rax
  5147 0000405B 6A02                    	push 2
  5148 0000405D 488B0425[F8000000]      	mov rax, qword [free_var_31]
  5149                                  	assert_closure(rax)
    65 00004065 803805              <1>  cmp byte [%1], %2
    66 00004068 0F85DD200000        <1>  jne L_error_incorrect_type
  5150 0000406E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5151 00004072 53                      	push rbx
  5152 00004073 FF7508                  	push RET_ADDR
  5153 00004076 488B7D18                	mov rdi, COUNT
  5154 0000407A 4883C703                	add rdi, 3
  5155 0000407E 48C1E703                	shl rdi, 3
  5156 00004082 4801EF                  	add rdi, rbp
  5157 00004085 488B6D00                	mov rbp, OLD_RDP
  5158 00004089 BE00000000              	mov rsi, 0
  5159                                  .L_tc_recycle_frame_loop_0fbf:	 ; start recycle frame loop
  5160 0000408E 4883FE05                	cmp rsi, 5
  5161 00004092 7427                    	je .L_tc_recycle_frame_done_0fbf
  5162 00004094 B904000000              	mov rcx, 4
  5163 00004099 4829F1                  	sub rcx, rsi
  5164 0000409C 48C1E103                	shl rcx, 3
  5165 000040A0 4801E1                  	add rcx, rsp ; rcx is the address to move
  5166 000040A3 4889F3                  	mov rbx, rsi
  5167 000040A6 48C1E303                	shl rbx, 3
  5168 000040AA 48F7DB                  	neg rbx
  5169 000040AD 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5170 000040B0 488B09                  	mov rcx, [rcx]
  5171 000040B3 48890B                  	mov [rbx], rcx
  5172 000040B6 48FFC6                  	inc rsi
  5173 000040B9 EBD3                    	jmp .L_tc_recycle_frame_loop_0fbf
  5174                                  .L_tc_recycle_frame_done_0fbf:	 ; end recycle frame loop
  5175 000040BB BB04000000              	mov rbx, 4
  5176 000040C0 48C1E303                	shl rbx, 3
  5177 000040C4 48F7DB                  	neg rbx
  5178 000040C7 4801FB                  	add rbx, rdi
  5179 000040CA 4889DC                  	mov rsp, rbx
  5180 000040CD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5181 000040D1 FFE3                    	jmp rbx
  5182 000040D3 E92D010000              	jmp .L_if_end_0922
  5183                                  	.L_if_else_0922:
  5184 000040D8 488B4528                	mov rax, PARAM(1)
  5185 000040DC 50                      	push rax
  5186 000040DD 6A01                    	push 1
  5187 000040DF 488B0425[40000000]      	mov rax, qword [free_var_8]
  5188                                  	assert_closure(rax)
    65 000040E7 803805              <1>  cmp byte [%1], %2
    66 000040EA 0F855B200000        <1>  jne L_error_incorrect_type
  5189 000040F0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5190 000040F4 53                      	push rbx
  5191 000040F5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5192 000040F9 FFD3                    	call rbx
  5193 000040FB 483D[02000000]          	cmp rax, sob_boolean_false
  5194 00004101 0F8484000000            	je .L_if_else_0923
  5195 00004107 488B4528                	mov rax, PARAM(1)
  5196 0000410B 50                      	push rax
  5197 0000410C 488B4520                	mov rax, PARAM(0)
  5198 00004110 50                      	push rax
  5199 00004111 6A02                    	push 2
  5200 00004113 488B0425[F8000000]      	mov rax, qword [free_var_31]
  5201                                  	assert_closure(rax)
    65 0000411B 803805              <1>  cmp byte [%1], %2
    66 0000411E 0F8527200000        <1>  jne L_error_incorrect_type
  5202 00004124 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5203 00004128 53                      	push rbx
  5204 00004129 FF7508                  	push RET_ADDR
  5205 0000412C 488B7D18                	mov rdi, COUNT
  5206 00004130 4883C703                	add rdi, 3
  5207 00004134 48C1E703                	shl rdi, 3
  5208 00004138 4801EF                  	add rdi, rbp
  5209 0000413B 488B6D00                	mov rbp, OLD_RDP
  5210 0000413F BE00000000              	mov rsi, 0
  5211                                  .L_tc_recycle_frame_loop_0fc0:	 ; start recycle frame loop
  5212 00004144 4883FE05                	cmp rsi, 5
  5213 00004148 7427                    	je .L_tc_recycle_frame_done_0fc0
  5214 0000414A B904000000              	mov rcx, 4
  5215 0000414F 4829F1                  	sub rcx, rsi
  5216 00004152 48C1E103                	shl rcx, 3
  5217 00004156 4801E1                  	add rcx, rsp ; rcx is the address to move
  5218 00004159 4889F3                  	mov rbx, rsi
  5219 0000415C 48C1E303                	shl rbx, 3
  5220 00004160 48F7DB                  	neg rbx
  5221 00004163 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5222 00004166 488B09                  	mov rcx, [rcx]
  5223 00004169 48890B                  	mov [rbx], rcx
  5224 0000416C 48FFC6                  	inc rsi
  5225 0000416F EBD3                    	jmp .L_tc_recycle_frame_loop_0fc0
  5226                                  .L_tc_recycle_frame_done_0fc0:	 ; end recycle frame loop
  5227 00004171 BB04000000              	mov rbx, 4
  5228 00004176 48C1E303                	shl rbx, 3
  5229 0000417A 48F7DB                  	neg rbx
  5230 0000417D 4801FB                  	add rbx, rdi
  5231 00004180 4889DC                  	mov rsp, rbx
  5232 00004183 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5233 00004187 FFE3                    	jmp rbx
  5234 00004189 EB7A                    	jmp .L_if_end_0923
  5235                                  	.L_if_else_0923:
  5236 0000418B 6A00                    	push 0
  5237 0000418D 488B4510                	mov rax, qword [rbp + 8*2]
  5238 00004191 488B00                  	mov rax, qword [rax + 8*0]
  5239 00004194 488B00                  	mov rax, qword [rax + 8*0]
  5240                                  	assert_closure(rax)
    65 00004197 803805              <1>  cmp byte [%1], %2
    66 0000419A 0F85AB1F0000        <1>  jne L_error_incorrect_type
  5241 000041A0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5242 000041A4 53                      	push rbx
  5243 000041A5 FF7508                  	push RET_ADDR
  5244 000041A8 488B7D18                	mov rdi, COUNT
  5245 000041AC 4883C703                	add rdi, 3
  5246 000041B0 48C1E703                	shl rdi, 3
  5247 000041B4 4801EF                  	add rdi, rbp
  5248 000041B7 488B6D00                	mov rbp, OLD_RDP
  5249 000041BB BE00000000              	mov rsi, 0
  5250                                  .L_tc_recycle_frame_loop_0fc1:	 ; start recycle frame loop
  5251 000041C0 4883FE03                	cmp rsi, 3
  5252 000041C4 7427                    	je .L_tc_recycle_frame_done_0fc1
  5253 000041C6 B902000000              	mov rcx, 2
  5254 000041CB 4829F1                  	sub rcx, rsi
  5255 000041CE 48C1E103                	shl rcx, 3
  5256 000041D2 4801E1                  	add rcx, rsp ; rcx is the address to move
  5257 000041D5 4889F3                  	mov rbx, rsi
  5258 000041D8 48C1E303                	shl rbx, 3
  5259 000041DC 48F7DB                  	neg rbx
  5260 000041DF 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5261 000041E2 488B09                  	mov rcx, [rcx]
  5262 000041E5 48890B                  	mov [rbx], rcx
  5263 000041E8 48FFC6                  	inc rsi
  5264 000041EB EBD3                    	jmp .L_tc_recycle_frame_loop_0fc1
  5265                                  .L_tc_recycle_frame_done_0fc1:	 ; end recycle frame loop
  5266 000041ED BB02000000              	mov rbx, 2
  5267 000041F2 48C1E303                	shl rbx, 3
  5268 000041F6 48F7DB                  	neg rbx
  5269 000041F9 4801FB                  	add rbx, rdi
  5270 000041FC 4889DC                  	mov rsp, rbx
  5271 000041FF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5272 00004203 FFE3                    	jmp rbx
  5273                                  	.L_if_end_0923:
  5274                                  	.L_if_end_0922:
  5275 00004205 EB7A                    	jmp .L_if_end_0921
  5276                                  	.L_if_else_0921:
  5277 00004207 6A00                    	push 0
  5278 00004209 488B4510                	mov rax, qword [rbp + 8*2]
  5279 0000420D 488B00                  	mov rax, qword [rax + 8*0]
  5280 00004210 488B00                  	mov rax, qword [rax + 8*0]
  5281                                  	assert_closure(rax)
    65 00004213 803805              <1>  cmp byte [%1], %2
    66 00004216 0F852F1F0000        <1>  jne L_error_incorrect_type
  5282 0000421C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5283 00004220 53                      	push rbx
  5284 00004221 FF7508                  	push RET_ADDR
  5285 00004224 488B7D18                	mov rdi, COUNT
  5286 00004228 4883C703                	add rdi, 3
  5287 0000422C 48C1E703                	shl rdi, 3
  5288 00004230 4801EF                  	add rdi, rbp
  5289 00004233 488B6D00                	mov rbp, OLD_RDP
  5290 00004237 BE00000000              	mov rsi, 0
  5291                                  .L_tc_recycle_frame_loop_0fc2:	 ; start recycle frame loop
  5292 0000423C 4883FE03                	cmp rsi, 3
  5293 00004240 7427                    	je .L_tc_recycle_frame_done_0fc2
  5294 00004242 B902000000              	mov rcx, 2
  5295 00004247 4829F1                  	sub rcx, rsi
  5296 0000424A 48C1E103                	shl rcx, 3
  5297 0000424E 4801E1                  	add rcx, rsp ; rcx is the address to move
  5298 00004251 4889F3                  	mov rbx, rsi
  5299 00004254 48C1E303                	shl rbx, 3
  5300 00004258 48F7DB                  	neg rbx
  5301 0000425B 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5302 0000425E 488B09                  	mov rcx, [rcx]
  5303 00004261 48890B                  	mov [rbx], rcx
  5304 00004264 48FFC6                  	inc rsi
  5305 00004267 EBD3                    	jmp .L_tc_recycle_frame_loop_0fc2
  5306                                  .L_tc_recycle_frame_done_0fc2:	 ; end recycle frame loop
  5307 00004269 BB02000000              	mov rbx, 2
  5308 0000426E 48C1E303                	shl rbx, 3
  5309 00004272 48F7DB                  	neg rbx
  5310 00004275 4801FB                  	add rbx, rdi
  5311 00004278 4889DC                  	mov rsp, rbx
  5312 0000427B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5313 0000427F FFE3                    	jmp rbx
  5314                                  	.L_if_end_0921:
  5315                                  	.L_if_end_091e:
  5316 00004281 C9                      	leave
  5317 00004282 C22000                  	ret 8 * (2 + 2)
  5318                                  .L_lambda_simple_end_0a3e:	; new closure is in rax
  5319 00004285 50                      	push rax
  5320 00004286 6A01                    	push 1
  5321 00004288 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5322 0000428D E839060000              	call malloc
  5323 00004292 50                      	push rax
  5324 00004293 BF08000000              	mov rdi, 8 * 1	; new rib
  5325 00004298 E82E060000              	call malloc
  5326 0000429D 50                      	push rax
  5327 0000429E BF10000000              	mov rdi, 8 * 2	; extended env
  5328 000042A3 E823060000              	call malloc
  5329 000042A8 488B7D10                	mov rdi, ENV
  5330 000042AC BE00000000              	mov rsi, 0
  5331 000042B1 BA01000000              	mov rdx, 1
  5332                                  .L_lambda_simple_env_loop_0a3f:	; ext_env[i + 1] <-- env[i]
  5333 000042B6 4883FE01                	cmp rsi, 1
  5334 000042BA 7410                    	je .L_lambda_simple_env_end_0a3f
  5335 000042BC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  5336 000042C0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5337 000042C4 48FFC6                  	inc rsi
  5338 000042C7 48FFC2                  	inc rdx
  5339 000042CA EBEA                    	jmp .L_lambda_simple_env_loop_0a3f
  5340                                  .L_lambda_simple_env_end_0a3f:
  5341 000042CC 5B                      	pop rbx
  5342 000042CD BE00000000              	mov rsi, 0
  5343                                  .L_lambda_simple_params_loop_0a3f:	; copy params
  5344 000042D2 4883FE01                	cmp rsi, 1
  5345 000042D6 740E                    	je .L_lambda_simple_params_end_0a3f
  5346 000042D8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5347 000042DD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5348 000042E1 48FFC6                  	inc rsi
  5349 000042E4 EBEC                    	jmp .L_lambda_simple_params_loop_0a3f
  5350                                  .L_lambda_simple_params_end_0a3f:
  5351 000042E6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5352 000042E9 4889C3                  	mov rbx, rax
  5353 000042EC 58                      	pop rax
  5354 000042ED C60005                  	mov byte [rax], T_closure
  5355 000042F0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5356 000042F4 48C74009[01430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a3f
  5357 000042FC E912040000              	jmp .L_lambda_simple_end_0a3f
  5358                                  .L_lambda_simple_code_0a3f:	; lambda-simple body
  5359 00004301 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5360 00004307 740B                    	je .L_lambda_simple_arity_check_ok_0a3f
  5361 00004309 FF742410                	push qword [rsp + 8 * 2]
  5362 0000430D 6A01                    	push 1
  5363 0000430F E970050000              	jmp L_error_incorrect_arity_simple
  5364                                  .L_lambda_simple_arity_check_ok_0a3f:
  5365 00004314 C8000000                	enter 0, 0
  5366 00004318 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5367 0000431D E8A9050000              	call malloc
  5368 00004322 50                      	push rax
  5369 00004323 BF08000000              	mov rdi, 8 * 1	; new rib
  5370 00004328 E89E050000              	call malloc
  5371 0000432D 50                      	push rax
  5372 0000432E BF18000000              	mov rdi, 8 * 3	; extended env
  5373 00004333 E893050000              	call malloc
  5374 00004338 488B7D10                	mov rdi, ENV
  5375 0000433C BE00000000              	mov rsi, 0
  5376 00004341 BA01000000              	mov rdx, 1
  5377                                  .L_lambda_opt_env_loop_03ce:	; ext_env[i + 1] <-- env[i]
  5378 00004346 4883FE02                	cmp rsi, 2
  5379 0000434A 7410                    	je .L_lambda_opt_env_end_03ce
  5380 0000434C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  5381 00004350 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5382 00004354 48FFC6                  	inc rsi
  5383 00004357 48FFC2                  	inc rdx
  5384 0000435A EBEA                    	jmp .L_lambda_opt_env_loop_03ce
  5385                                  .L_lambda_opt_env_end_03ce:
  5386 0000435C 5B                      	pop rbx
  5387 0000435D BE00000000              	mov rsi, 0
  5388                                  .L_lambda_opt_params_loop_03ce:	; copy params
  5389 00004362 4883FE01                	cmp rsi, 1
  5390 00004366 740E                    	je .L_lambda_opt_params_end_03ce
  5391 00004368 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5392 0000436D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5393 00004371 48FFC6                  	inc rsi
  5394 00004374 EBEC                    	jmp .L_lambda_opt_params_loop_03ce
  5395                                  .L_lambda_opt_params_end_03ce:
  5396 00004376 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5397 00004379 4889C3                  	mov rbx, rax
  5398 0000437C 58                      	pop rax
  5399 0000437D C60005                  	mov byte [rax], T_closure
  5400 00004380 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5401 00004384 48C74009[91430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_03ce
  5402 0000438C E97E030000              	jmp .L_lambda_opt_end_03ce
  5403                                  .L_lambda_opt_code_03ce:	; lambda-opt body
  5404 00004391 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  5405 00004396 4889FB                  	mov rbx, rdi
  5406 00004399 4883EB01                	sub rbx, 1 ; rbx is the num of extra args
  5407 0000439D 4883FB00                	cmp rbx, 0
  5408 000043A1 7F45                    	jg .L_lambda_opt_arity_check_more_03ce
  5409                                  .L_lambda_opt_arity_check_exact_03ce:	 ; if params in opt is exact
  5410 000043A3 4883EC08                	sub rsp, 8
  5411 000043A7 BE00000000              	mov rsi, 0 ; index
  5412                                  .L_lambda_opt_stack_enlarge_loop_03ce:	 ; stack loop enlarge start
  5413 000043AC 4883FE04                	cmp rsi, 4
  5414 000043B0 741F                    	je .L_lambda_opt_stack_enlarge_loop_exit_03ce
  5415 000043B2 4889F7                  	mov rdi, rsi
  5416 000043B5 48FFC7                  	inc rdi
  5417 000043B8 48C1E703                	shl rdi, 3
  5418 000043BC 4801E7                  	add rdi, rsp
  5419 000043BF 4889FB                  	mov rbx, rdi ; rbx = [rsp + 8 * (rsi + 1)]
  5420 000043C2 4883EB08                	sub rbx, 8
  5421 000043C6 488B3F                  	mov rdi, [rdi]
  5422 000043C9 48893B                  	mov [rbx], rdi ; [rsp + 8 * (rsi)] = [rsp + 8 * (rsi + 1)]
  5423 000043CC 48FFC6                  	inc rsi
  5424 000043CF EBDB                    	jmp .L_lambda_opt_stack_enlarge_loop_03ce
  5425                                  .L_lambda_opt_stack_enlarge_loop_exit_03ce:	 ; end of stack enlarge loop
  5426 000043D1 48C7442420-             	mov qword [rsp + 4*8], sob_nil
  5426 000043D6 [01000000]         
  5427 000043DA 48C744241002000000      	mov qword [rsp + 2*8], 2
  5428 000043E3 E99E000000              	jmp .L_lambda_opt_stack_adjusted_03ce
  5429                                  .L_lambda_opt_arity_check_more_03ce:	 ; if params in opt is more
  5430 000043E8 48B8-                   	mov rax, sob_nil
  5430 000043EA [0100000000000000] 
  5431 000043F2 4889DE                  	mov rsi, rbx ;index. rbx is the num of extra args
  5432 000043F5 48FFCE                  	dec rsi
  5433                                  .L_lambda_opt_list_create_loop_03ce:	; start of list creation loop
  5434 000043F8 4883FEFF                	cmp rsi, -1
  5435 000043FC 7422                    	je .L_lambda_opt_list_create_loop_exit_03ce
  5436 000043FE 488D4E04                	lea rcx, [rsi + (3 + 1)]
  5437 00004402 48C1E103                	shl rcx, 3
  5438 00004406 4801E1                  	add rcx, rsp
  5439 00004409 488B09                  	mov rcx, [rcx]
  5440 0000440C 56                      	push rsi ; save params
  5441 0000440D 53                      	push rbx
  5442                                  
  5443 0000440E 50                      	push rax ; cdr
  5444 0000440F 51                      	push rcx ; car
  5445 00004410 6A02                    	push qword 2 ; push num of args
  5446 00004412 6A01                    	push qword 1 ; push garbage as env
  5447 00004414 E8390E0000              	call L_code_ptr_cons
  5448                                  
  5449 00004419 5B                      	pop rbx ; restore params
  5450 0000441A 5E                      	pop rsi
  5451 0000441B 48FFCE                  	dec rsi
  5452 0000441E EBD8                    	jmp .L_lambda_opt_list_create_loop_03ce
  5453                                  .L_lambda_opt_list_create_loop_exit_03ce:	; end of list creation loop
  5454 00004420 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  5455 00004425 4883C302                	add rbx, 2
  5456 00004429 4889DF                  	mov rdi, rbx
  5457 0000442C 48C1E703                	shl rdi,3
  5458 00004430 4801E7                  	add rdi, rsp
  5459 00004433 488907                  	mov [rdi], rax
  5460 00004436 BE00000000              	mov rsi, 0 ;index
  5461                                  .L_lambda_opt_stack_shrink_loop_03ce:	; start of stack shrink loop
  5462 0000443B 4883FE04                	cmp rsi, 4
  5463 0000443F 742D                    	je .L_lambda_opt_stack_shrink_loop_exit_03ce
  5464 00004441 BF03000000              	mov rdi, 3
  5465 00004446 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  5466 00004449 4889D9                  	mov rcx, rbx
  5467 0000444C 4829F1                  	sub rcx, rsi
  5468 0000444F 48FFC9                  	dec rcx ; the index of the target stack place to put the member
  5469 00004452 4889FA                  	mov rdx, rdi
  5470 00004455 48C1E203                	shl rdx, 3
  5471 00004459 4801E2                  	add rdx, rsp
  5472 0000445C 48C1E103                	shl rcx, 3
  5473 00004460 4801E1                  	add rcx, rsp
  5474 00004463 488B12                  	mov rdx, [rdx]
  5475 00004466 488911                  	mov [rcx], rdx
  5476 00004469 48FFC6                  	inc rsi
  5477 0000446C EBCD                    	jmp .L_lambda_opt_stack_shrink_loop_03ce
  5478                                  .L_lambda_opt_stack_shrink_loop_exit_03ce:	; end of stack shrink loop
  5479 0000446E 4883EB02                	sub rbx, 2 ; rbx has number of args
  5480 00004472 4883EB02                	sub rbx, 2
  5481 00004476 48C1E303                	shl rbx, 3
  5482 0000447A 4801DC                  	add rsp, rbx
  5483 0000447D 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  5484                                  .L_lambda_opt_stack_adjusted_03ce:
  5485 00004486 C8000000                	enter 0, 0
  5486 0000448A 488B4528                	mov rax, PARAM(1)
  5487 0000448E 50                      	push rax
  5488 0000448F 6A01                    	push 1
  5489 00004491 488B0425[00000000]      	mov rax, qword [free_var_0]
  5490                                  	assert_closure(rax)
    65 00004499 803805              <1>  cmp byte [%1], %2
    66 0000449C 0F85A91C0000        <1>  jne L_error_incorrect_type
  5491 000044A2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5492 000044A6 53                      	push rbx
  5493 000044A7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5494 000044AB FFD3                    	call rbx
  5495 000044AD 483D[02000000]          	cmp rax, sob_boolean_false
  5496 000044B3 0F848D000000            	je .L_if_else_0924
  5497 000044B9 488B4520                	mov rax, PARAM(0)
  5498 000044BD 50                      	push rax
  5499 000044BE 488D0425[20000000]      	lea rax, [32 + L_constants]
  5500 000044C6 50                      	push rax
  5501 000044C7 6A02                    	push 2
  5502 000044C9 488B4510                	mov rax, qword [rbp + 8*2]
  5503 000044CD 488B00                  	mov rax, qword [rax + 8*0]
  5504 000044D0 488B00                  	mov rax, qword [rax + 8*0]
  5505                                  	assert_closure(rax)
    65 000044D3 803805              <1>  cmp byte [%1], %2
    66 000044D6 0F856F1C0000        <1>  jne L_error_incorrect_type
  5506 000044DC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5507 000044E0 53                      	push rbx
  5508 000044E1 FF7508                  	push RET_ADDR
  5509 000044E4 488B7D18                	mov rdi, COUNT
  5510 000044E8 4883C703                	add rdi, 3
  5511 000044EC 48C1E703                	shl rdi, 3
  5512 000044F0 4801EF                  	add rdi, rbp
  5513 000044F3 488B6D00                	mov rbp, OLD_RDP
  5514 000044F7 BE00000000              	mov rsi, 0
  5515                                  .L_tc_recycle_frame_loop_0fc3:	 ; start recycle frame loop
  5516 000044FC 4883FE05                	cmp rsi, 5
  5517 00004500 7427                    	je .L_tc_recycle_frame_done_0fc3
  5518 00004502 B904000000              	mov rcx, 4
  5519 00004507 4829F1                  	sub rcx, rsi
  5520 0000450A 48C1E103                	shl rcx, 3
  5521 0000450E 4801E1                  	add rcx, rsp ; rcx is the address to move
  5522 00004511 4889F3                  	mov rbx, rsi
  5523 00004514 48C1E303                	shl rbx, 3
  5524 00004518 48F7DB                  	neg rbx
  5525 0000451B 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5526 0000451E 488B09                  	mov rcx, [rcx]
  5527 00004521 48890B                  	mov [rbx], rcx
  5528 00004524 48FFC6                  	inc rsi
  5529 00004527 EBD3                    	jmp .L_tc_recycle_frame_loop_0fc3
  5530                                  .L_tc_recycle_frame_done_0fc3:	 ; end recycle frame loop
  5531 00004529 BB04000000              	mov rbx, 4
  5532 0000452E 48C1E303                	shl rbx, 3
  5533 00004532 48F7DB                  	neg rbx
  5534 00004535 4801FB                  	add rbx, rdi
  5535 00004538 4889DC                  	mov rsp, rbx
  5536 0000453B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5537 0000453F FFE3                    	jmp rbx
  5538 00004541 E9C5010000              	jmp .L_if_end_0924
  5539                                  	.L_if_else_0924:
  5540 00004546 488B4528                	mov rax, PARAM(1)
  5541 0000454A 50                      	push rax
  5542 0000454B 488D0425[20000000]      	lea rax, [32 + L_constants]
  5543 00004553 50                      	push rax
  5544 00004554 488B0425[00020000]      	mov rax, qword [free_var_64]
  5545 0000455C 50                      	push rax
  5546 0000455D 6A03                    	push 3
  5547 0000455F 488B0425[F0010000]      	mov rax, qword [free_var_62]
  5548                                  	assert_closure(rax)
    65 00004567 803805              <1>  cmp byte [%1], %2
    66 0000456A 0F85DB1B0000        <1>  jne L_error_incorrect_type
  5549 00004570 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5550 00004574 53                      	push rbx
  5551 00004575 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5552 00004579 FFD3                    	call rbx
  5553 0000457B 50                      	push rax
  5554 0000457C 6A01                    	push 1
  5555 0000457E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5556 00004583 E843030000              	call malloc
  5557 00004588 50                      	push rax
  5558 00004589 BF10000000              	mov rdi, 8 * 2	; new rib
  5559 0000458E E838030000              	call malloc
  5560 00004593 50                      	push rax
  5561 00004594 BF20000000              	mov rdi, 8 * 4	; extended env
  5562 00004599 E82D030000              	call malloc
  5563 0000459E 488B7D10                	mov rdi, ENV
  5564 000045A2 BE00000000              	mov rsi, 0
  5565 000045A7 BA01000000              	mov rdx, 1
  5566                                  .L_lambda_simple_env_loop_0a40:	; ext_env[i + 1] <-- env[i]
  5567 000045AC 4883FE03                	cmp rsi, 3
  5568 000045B0 7410                    	je .L_lambda_simple_env_end_0a40
  5569 000045B2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  5570 000045B6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5571 000045BA 48FFC6                  	inc rsi
  5572 000045BD 48FFC2                  	inc rdx
  5573 000045C0 EBEA                    	jmp .L_lambda_simple_env_loop_0a40
  5574                                  .L_lambda_simple_env_end_0a40:
  5575 000045C2 5B                      	pop rbx
  5576 000045C3 BE00000000              	mov rsi, 0
  5577                                  .L_lambda_simple_params_loop_0a40:	; copy params
  5578 000045C8 4883FE02                	cmp rsi, 2
  5579 000045CC 740E                    	je .L_lambda_simple_params_end_0a40
  5580 000045CE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5581 000045D3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5582 000045D7 48FFC6                  	inc rsi
  5583 000045DA EBEC                    	jmp .L_lambda_simple_params_loop_0a40
  5584                                  .L_lambda_simple_params_end_0a40:
  5585 000045DC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5586 000045DF 4889C3                  	mov rbx, rax
  5587 000045E2 58                      	pop rax
  5588 000045E3 C60005                  	mov byte [rax], T_closure
  5589 000045E6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5590 000045EA 48C74009[F7450000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a40
  5591 000045F2 E9A6000000              	jmp .L_lambda_simple_end_0a40
  5592                                  .L_lambda_simple_code_0a40:	; lambda-simple body
  5593 000045F7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5594 000045FD 740B                    	je .L_lambda_simple_arity_check_ok_0a40
  5595 000045FF FF742410                	push qword [rsp + 8 * 2]
  5596 00004603 6A01                    	push 1
  5597 00004605 E97A020000              	jmp L_error_incorrect_arity_simple
  5598                                  .L_lambda_simple_arity_check_ok_0a40:
  5599 0000460A C8000000                	enter 0, 0
  5600 0000460E 488B4520                	mov rax, PARAM(0)
  5601 00004612 50                      	push rax
  5602 00004613 488B4510                	mov rax, qword [rbp + 8*2]
  5603 00004617 488B00                  	mov rax, qword [rax + 8*0]
  5604 0000461A 488B00                  	mov rax, qword [rax + 8*0]
  5605 0000461D 50                      	push rax
  5606 0000461E 6A02                    	push 2
  5607 00004620 488B4510                	mov rax, qword [rbp + 8*2]
  5608 00004624 488B4008                	mov rax, qword [rax + 8*1]
  5609 00004628 488B00                  	mov rax, qword [rax + 8*0]
  5610                                  	assert_closure(rax)
    65 0000462B 803805              <1>  cmp byte [%1], %2
    66 0000462E 0F85171B0000        <1>  jne L_error_incorrect_type
  5611 00004634 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5612 00004638 53                      	push rbx
  5613 00004639 FF7508                  	push RET_ADDR
  5614 0000463C 488B7D18                	mov rdi, COUNT
  5615 00004640 4883C703                	add rdi, 3
  5616 00004644 48C1E703                	shl rdi, 3
  5617 00004648 4801EF                  	add rdi, rbp
  5618 0000464B 488B6D00                	mov rbp, OLD_RDP
  5619 0000464F BE00000000              	mov rsi, 0
  5620                                  .L_tc_recycle_frame_loop_0fc5:	 ; start recycle frame loop
  5621 00004654 4883FE05                	cmp rsi, 5
  5622 00004658 7427                    	je .L_tc_recycle_frame_done_0fc5
  5623 0000465A B904000000              	mov rcx, 4
  5624 0000465F 4829F1                  	sub rcx, rsi
  5625 00004662 48C1E103                	shl rcx, 3
  5626 00004666 4801E1                  	add rcx, rsp ; rcx is the address to move
  5627 00004669 4889F3                  	mov rbx, rsi
  5628 0000466C 48C1E303                	shl rbx, 3
  5629 00004670 48F7DB                  	neg rbx
  5630 00004673 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5631 00004676 488B09                  	mov rcx, [rcx]
  5632 00004679 48890B                  	mov [rbx], rcx
  5633 0000467C 48FFC6                  	inc rsi
  5634 0000467F EBD3                    	jmp .L_tc_recycle_frame_loop_0fc5
  5635                                  .L_tc_recycle_frame_done_0fc5:	 ; end recycle frame loop
  5636 00004681 BB04000000              	mov rbx, 4
  5637 00004686 48C1E303                	shl rbx, 3
  5638 0000468A 48F7DB                  	neg rbx
  5639 0000468D 4801FB                  	add rbx, rdi
  5640 00004690 4889DC                  	mov rsp, rbx
  5641 00004693 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5642 00004697 FFE3                    	jmp rbx
  5643 00004699 C9                      	leave
  5644 0000469A C21800                  	ret 8 * (2 + 1)
  5645                                  .L_lambda_simple_end_0a40:	; new closure is in rax
  5646                                  	assert_closure(rax)
    65 0000469D 803805              <1>  cmp byte [%1], %2
    66 000046A0 0F85A51A0000        <1>  jne L_error_incorrect_type
  5647 000046A6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5648 000046AA 53                      	push rbx
  5649 000046AB FF7508                  	push RET_ADDR
  5650 000046AE 488B7D18                	mov rdi, COUNT
  5651 000046B2 4883C703                	add rdi, 3
  5652 000046B6 48C1E703                	shl rdi, 3
  5653 000046BA 4801EF                  	add rdi, rbp
  5654 000046BD 488B6D00                	mov rbp, OLD_RDP
  5655 000046C1 BE00000000              	mov rsi, 0
  5656                                  .L_tc_recycle_frame_loop_0fc4:	 ; start recycle frame loop
  5657 000046C6 4883FE04                	cmp rsi, 4
  5658 000046CA 7427                    	je .L_tc_recycle_frame_done_0fc4
  5659 000046CC B903000000              	mov rcx, 3
  5660 000046D1 4829F1                  	sub rcx, rsi
  5661 000046D4 48C1E103                	shl rcx, 3
  5662 000046D8 4801E1                  	add rcx, rsp ; rcx is the address to move
  5663 000046DB 4889F3                  	mov rbx, rsi
  5664 000046DE 48C1E303                	shl rbx, 3
  5665 000046E2 48F7DB                  	neg rbx
  5666 000046E5 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5667 000046E8 488B09                  	mov rcx, [rcx]
  5668 000046EB 48890B                  	mov [rbx], rcx
  5669 000046EE 48FFC6                  	inc rsi
  5670 000046F1 EBD3                    	jmp .L_tc_recycle_frame_loop_0fc4
  5671                                  .L_tc_recycle_frame_done_0fc4:	 ; end recycle frame loop
  5672 000046F3 BB03000000              	mov rbx, 3
  5673 000046F8 48C1E303                	shl rbx, 3
  5674 000046FC 48F7DB                  	neg rbx
  5675 000046FF 4801FB                  	add rbx, rdi
  5676 00004702 4889DC                  	mov rsp, rbx
  5677 00004705 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5678 00004709 FFE3                    	jmp rbx
  5679                                  	.L_if_end_0924:
  5680 0000470B C9                      	leave
  5681 0000470C C22000                  	ret AND_KILL_FRAME(2)
  5682                                  .L_lambda_opt_end_03ce:	; new closure is in rax
  5683 0000470F C9                      	leave
  5684 00004710 C21800                  	ret 8 * (2 + 1)
  5685                                  .L_lambda_simple_end_0a3f:	; new closure is in rax
  5686                                  	assert_closure(rax)
    65 00004713 803805              <1>  cmp byte [%1], %2
    66 00004716 0F852F1A0000        <1>  jne L_error_incorrect_type
  5687 0000471C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5688 00004720 53                      	push rbx
  5689 00004721 FF7508                  	push RET_ADDR
  5690 00004724 488B7D18                	mov rdi, COUNT
  5691 00004728 4883C703                	add rdi, 3
  5692 0000472C 48C1E703                	shl rdi, 3
  5693 00004730 4801EF                  	add rdi, rbp
  5694 00004733 488B6D00                	mov rbp, OLD_RDP
  5695 00004737 BE00000000              	mov rsi, 0
  5696                                  .L_tc_recycle_frame_loop_0fbb:	 ; start recycle frame loop
  5697 0000473C 4883FE04                	cmp rsi, 4
  5698 00004740 7427                    	je .L_tc_recycle_frame_done_0fbb
  5699 00004742 B903000000              	mov rcx, 3
  5700 00004747 4829F1                  	sub rcx, rsi
  5701 0000474A 48C1E103                	shl rcx, 3
  5702 0000474E 4801E1                  	add rcx, rsp ; rcx is the address to move
  5703 00004751 4889F3                  	mov rbx, rsi
  5704 00004754 48C1E303                	shl rbx, 3
  5705 00004758 48F7DB                  	neg rbx
  5706 0000475B 4801FB                  	add rbx, rdi ;rbx is the address to move to
  5707 0000475E 488B09                  	mov rcx, [rcx]
  5708 00004761 48890B                  	mov [rbx], rcx
  5709 00004764 48FFC6                  	inc rsi
  5710 00004767 EBD3                    	jmp .L_tc_recycle_frame_loop_0fbb
  5711                                  .L_tc_recycle_frame_done_0fbb:	 ; end recycle frame loop
  5712 00004769 BB03000000              	mov rbx, 3
  5713 0000476E 48C1E303                	shl rbx, 3
  5714 00004772 48F7DB                  	neg rbx
  5715 00004775 4801FB                  	add rbx, rdi
  5716 00004778 4889DC                  	mov rsp, rbx
  5717 0000477B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5718 0000477F FFE3                    	jmp rbx
  5719 00004781 C9                      	leave
  5720 00004782 C21800                  	ret 8 * (2 + 1)
  5721                                  .L_lambda_simple_end_0a3d:	; new closure is in rax
  5722                                  	assert_closure(rax)
    65 00004785 803805              <1>  cmp byte [%1], %2
    66 00004788 0F85BD190000        <1>  jne L_error_incorrect_type
  5723 0000478E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5724 00004792 53                      	push rbx
  5725 00004793 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5726 00004797 FFD3                    	call rbx
  5727 00004799 48890425[08020000]      	mov qword [free_var_65], rax
  5728 000047A1 48B8-                   	mov rax, sob_void
  5728 000047A3 [0000000000000000] 
  5729                                  
  5730 000047AB 4889C7                  	mov rdi, rax
  5731 000047AE E829010000              	call print_sexpr_if_not_void
  5732                                  
  5733 000047B3 488D0425[E6000000]      	lea rax, [230 + L_constants]
  5734 000047BB 50                      	push rax
  5735 000047BC 488D0425[80000000]      	lea rax, [128 + L_constants]
  5736 000047C4 50                      	push rax
  5737 000047C5 488B0425[10020000]      	mov rax, qword [free_var_66]
  5738 000047CD 50                      	push rax
  5739 000047CE 6A03                    	push 3
  5740 000047D0 488B0425[C0010000]      	mov rax, qword [free_var_56]
  5741                                  	assert_closure(rax)
    65 000047D8 803805              <1>  cmp byte [%1], %2
    66 000047DB 0F856A190000        <1>  jne L_error_incorrect_type
  5742 000047E1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5743 000047E5 53                      	push rbx
  5744 000047E6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5745 000047EA FFD3                    	call rbx
  5746                                  
  5747 000047EC 4889C7                  	mov rdi, rax
  5748 000047EF E8E8000000              	call print_sexpr_if_not_void
  5749                                  
  5750 000047F4 48BF-                           mov rdi, fmt_memory_usage
  5750 000047F6 [5601000000000000] 
  5751 000047FE 488B3425[F1010000]              mov rsi, qword [top_of_memory]
  5752 00004806 4881EE[18020000]                sub rsi, memory
  5753 0000480D B800000000                      mov rax, 0
  5754                                  	ENTER
    56 00004812 C8000000            <1>  enter 0, 0
    57 00004816 4883E4F0            <1>  and rsp, ~15
  5755 0000481A E8(00000000)                    call printf
  5756                                  	LEAVE
    61 0000481F C9                  <1>  leave
  5757 00004820 C9                      	leave
  5758 00004821 C3                      	ret
  5759                                  
  5760                                  L_error_non_closure:
  5761 00004822 488B3C25[00000000]              mov rdi, qword [stderr]
  5762 0000482A 48BE-                           mov rsi, fmt_non_closure
  5762 0000482C [8D01000000000000] 
  5763 00004834 B800000000                      mov rax, 0
  5764                                  	ENTER
    56 00004839 C8000000            <1>  enter 0, 0
    57 0000483D 4883E4F0            <1>  and rsp, ~15
  5765 00004841 E8(00000000)                    call fprintf
  5766                                  	LEAVE
    61 00004846 C9                  <1>  leave
  5767 00004847 48C7C0FEFFFFFF                  mov rax, -2
  5768 0000484E E8(00000000)                    call exit
  5769                                  
  5770                                  L_error_improper_list:
  5771 00004853 488B3C25[00000000]      	mov rdi, qword [stderr]
  5772 0000485B 48BE-                   	mov rsi, fmt_error_improper_list
  5772 0000485D [B501000000000000] 
  5773 00004865 B800000000              	mov rax, 0
  5774                                  	ENTER
    56 0000486A C8000000            <1>  enter 0, 0
    57 0000486E 4883E4F0            <1>  and rsp, ~15
  5775 00004872 E8(00000000)            	call fprintf
  5776                                  	LEAVE
    61 00004877 C9                  <1>  leave
  5777 00004878 48C7C0F9FFFFFF          	mov rax, -7
  5778 0000487F E8(00000000)            	call exit
  5779                                  
  5780                                  L_error_incorrect_arity_simple:
  5781 00004884 488B3C25[00000000]              mov rdi, qword [stderr]
  5782 0000488C 48BE-                           mov rsi, fmt_incorrect_arity_simple
  5782 0000488E [F700000000000000] 
  5783 00004896 EB12                            jmp L_error_incorrect_arity_common
  5784                                  L_error_incorrect_arity_opt:
  5785 00004898 488B3C25[00000000]              mov rdi, qword [stderr]
  5786 000048A0 48BE-                           mov rsi, fmt_incorrect_arity_opt
  5786 000048A2 [2201000000000000] 
  5787                                  L_error_incorrect_arity_common:
  5788 000048AA 5A                              pop rdx
  5789 000048AB 59                              pop rcx
  5790 000048AC B800000000                      mov rax, 0
  5791                                  	ENTER
    56 000048B1 C8000000            <1>  enter 0, 0
    57 000048B5 4883E4F0            <1>  and rsp, ~15
  5792 000048B9 E8(00000000)                    call fprintf
  5793                                  	LEAVE
    61 000048BE C9                  <1>  leave
  5794 000048BF 48C7C0FAFFFFFF                  mov rax, -6
  5795 000048C6 E8(00000000)                    call exit
  5796                                  
  5797                                  section .data
  5798                                  fmt_incorrect_arity_simple:
  5799 000000F7 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  5799 00000100 74656420256C642061-
  5799 00000109 7267756D656E74732C-
  5799 00000112 206275742067697665-
  5799 0000011B 6E20256C640A00     
  5800                                  fmt_incorrect_arity_opt:
  5801 00000122 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  5801 0000012B 746564206174206C65-
  5801 00000134 61737420256C642061-
  5801 0000013D 7267756D656E74732C-
  5801 00000146 206275742067697665-
  5801 0000014F 6E20256C640A00     
  5802                                  fmt_memory_usage:
  5803 00000156 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  5803 0000015F 6420256C6420627974-
  5803 00000168 6573206F662064796E-
  5803 00000171 616D6963616C6C792D-
  5803 0000017A 616C6C6F6361746564-
  5803 00000183 206D656D6F72790A0A-
  5803 0000018C 00                 
  5804                                  fmt_non_closure:
  5805 0000018D 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  5805 00000196 7074696E6720746F20-
  5805 0000019F 6170706C792061206E-
  5805 000001A8 6F6E2D636C6F737572-
  5805 000001B1 65210A00           
  5806                                  fmt_error_improper_list:
  5807 000001B5 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  5807 000001BE 7267756D656E742069-
  5807 000001C7 73206E6F7420612070-
  5807 000001D0 726F706572206C6973-
  5807 000001D9 74210A00           
  5808                                  fmt_test:
  5809 000001DD 746573742068657265-             db `test here %d at %d\n\0`
  5809 000001E6 202564206174202564-
  5809 000001EF 0A00               
  5810                                  
  5811                                  section .bss
  5812                                  memory:
  5813 00000218 <res 40000000h>         	resb gbytes(1)
  5814                                  
  5815                                  section .data
  5816                                  top_of_memory:
  5817 000001F1 [1802000000000000]              dq memory
  5818                                  
  5819                                  section .text
  5820                                  malloc:
  5821 000048CB 488B0425[F1010000]              mov rax, qword [top_of_memory]
  5822 000048D3 48013C25[F1010000]              add qword [top_of_memory], rdi
  5823 000048DB C3                              ret
  5824                                          
  5825                                  print_sexpr_if_not_void:
  5826 000048DC 4881FF[00000000]        	cmp rdi, sob_void
  5827 000048E3 7501                    	jne print_sexpr
  5828 000048E5 C3                      	ret
  5829                                  
  5830                                  section .data
  5831                                  fmt_void:
  5832 000001F9 233C766F69643E00        	db `#<void>\0`
  5833                                  fmt_nil:
  5834 00000201 282900                  	db `()\0`
  5835                                  fmt_boolean_false:
  5836 00000204 236600                  	db `#f\0`
  5837                                  fmt_boolean_true:
  5838 00000207 237400                  	db `#t\0`
  5839                                  fmt_char_backslash:
  5840 0000020A 235C5C00                	db `#\\\\\0`
  5841                                  fmt_char_dquote:
  5842 0000020E 235C2200                	db `#\\"\0`
  5843                                  fmt_char_simple:
  5844 00000212 235C256300              	db `#\\%c\0`
  5845                                  fmt_char_null:
  5846 00000217 235C6E756C00            	db `#\\nul\0`
  5847                                  fmt_char_bell:
  5848 0000021D 235C62656C6C00          	db `#\\bell\0`
  5849                                  fmt_char_backspace:
  5850 00000224 235C6261636B737061-     	db `#\\backspace\0`
  5850 0000022D 636500             
  5851                                  fmt_char_tab:
  5852 00000230 235C74616200            	db `#\\tab\0`
  5853                                  fmt_char_newline:
  5854 00000236 235C6E65776C696E65-     	db `#\\newline\0`
  5854 0000023F 00                 
  5855                                  fmt_char_formfeed:
  5856 00000240 235C7061676500          	db `#\\page\0`
  5857                                  fmt_char_return:
  5858 00000247 235C72657475726E00      	db `#\\return\0`
  5859                                  fmt_char_escape:
  5860 00000250 235C65736300            	db `#\\esc\0`
  5861                                  fmt_char_space:
  5862 00000256 235C737061636500        	db `#\\space\0`
  5863                                  fmt_char_hex:
  5864 0000025E 235C782530325800        	db `#\\x%02X\0`
  5865                                  fmt_closure:
  5866 00000266 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  5866 0000026F 206174203078253038-
  5866 00000278 5820656E763D307825-
  5866 00000281 30385820636F64653D-
  5866 0000028A 3078253038583E00   
  5867                                  fmt_lparen:
  5868 00000292 2800                    	db `(\0`
  5869                                  fmt_dotted_pair:
  5870 00000294 202E2000                	db ` . \0`
  5871                                  fmt_rparen:
  5872 00000298 2900                    	db `)\0`
  5873                                  fmt_space:
  5874 0000029A 2000                    	db ` \0`
  5875                                  fmt_empty_vector:
  5876 0000029C 23282900                	db `#()\0`
  5877                                  fmt_vector:
  5878 000002A0 232800                  	db `#(\0`
  5879                                  fmt_real:
  5880 000002A3 256600                  	db `%f\0`
  5881                                  fmt_fraction:
  5882 000002A6 256C642F256C6400        	db `%ld/%ld\0`
  5883                                  fmt_zero:
  5884 000002AE 3000                    	db `0\0`
  5885                                  fmt_int:
  5886 000002B0 256C6400                	db `%ld\0`
  5887                                  fmt_unknown_sexpr_error:
  5888 000002B4 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
  5888 000002BD 6F723A20556E6B6E6F-
  5888 000002C6 776E2074797065206F-
  5888 000002CF 662073657870722028-
  5888 000002D8 3078253032582920   
  5889 000002E0 617420616464726573-     	db `at address 0x%08X\n\n\0`
  5889 000002E9 73203078253038580A-
  5889 000002F2 0A00               
  5890                                  fmt_dquote:
  5891 000002F4 2200                    	db `\"\0`
  5892                                  fmt_string_char:
  5893 000002F6 256300                          db `%c\0`
  5894                                  fmt_string_char_7:
  5895 000002F9 5C6100                          db `\\a\0`
  5896                                  fmt_string_char_8:
  5897 000002FC 5C6200                          db `\\b\0`
  5898                                  fmt_string_char_9:
  5899 000002FF 5C7400                          db `\\t\0`
  5900                                  fmt_string_char_10:
  5901 00000302 5C6E00                          db `\\n\0`
  5902                                  fmt_string_char_11:
  5903 00000305 5C7600                          db `\\v\0`
  5904                                  fmt_string_char_12:
  5905 00000308 5C6600                          db `\\f\0`
  5906                                  fmt_string_char_13:
  5907 0000030B 5C7200                          db `\\r\0`
  5908                                  fmt_string_char_34:
  5909 0000030E 5C2200                          db `\\"\0`
  5910                                  fmt_string_char_92:
  5911 00000311 5C5C00                          db `\\\\\0`
  5912                                  fmt_string_char_hex:
  5913 00000314 5C7825583B00                    db `\\x%X;\0`
  5914                                  
  5915                                  section .text
  5916                                  
  5917                                  print_sexpr:
  5918                                  	ENTER
    56 000048E6 C8000000            <1>  enter 0, 0
    57 000048EA 4883E4F0            <1>  and rsp, ~15
  5919 000048EE 8A07                    	mov al, byte [rdi]
  5920 000048F0 3C00                    	cmp al, T_void
  5921 000048F2 744D                    	je .Lvoid
  5922 000048F4 3C01                    	cmp al, T_nil
  5923 000048F6 7458                    	je .Lnil
  5924 000048F8 3C09                    	cmp al, T_boolean_false
  5925 000048FA 7463                    	je .Lboolean_false
  5926 000048FC 3C0A                    	cmp al, T_boolean_true
  5927 000048FE 746E                    	je .Lboolean_true
  5928 00004900 3C02                    	cmp al, T_char
  5929 00004902 7479                    	je .Lchar
  5930 00004904 3C04                    	cmp al, T_symbol
  5931 00004906 0F84BB010000            	je .Lsymbol
  5932 0000490C 3C21                    	cmp al, T_pair
  5933 0000490E 0F84D6010000            	je .Lpair
  5934 00004914 3C22                    	cmp al, T_vector
  5935 00004916 0F849F020000            	je .Lvector
  5936 0000491C 3C05                    	cmp al, T_closure
  5937 0000491E 0F8489010000            	je .Lclosure
  5938 00004924 3C12                    	cmp al, T_real
  5939 00004926 0F8430030000            	je .Lreal
  5940 0000492C 3C11                    	cmp al, T_rational
  5941 0000492E 0F8456030000            	je .Lrational
  5942 00004934 3C03                    	cmp al, T_string
  5943 00004936 0F848F030000            	je .Lstring
  5944                                  
  5945 0000493C E9C7040000              	jmp .Lunknown_sexpr_type
  5946                                  
  5947                                  .Lvoid:
  5948 00004941 48BF-                   	mov rdi, fmt_void
  5948 00004943 [F901000000000000] 
  5949 0000494B E9F5040000              	jmp .Lemit
  5950                                  
  5951                                  .Lnil:
  5952 00004950 48BF-                   	mov rdi, fmt_nil
  5952 00004952 [0102000000000000] 
  5953 0000495A E9E6040000              	jmp .Lemit
  5954                                  
  5955                                  .Lboolean_false:
  5956 0000495F 48BF-                   	mov rdi, fmt_boolean_false
  5956 00004961 [0402000000000000] 
  5957 00004969 E9D7040000              	jmp .Lemit
  5958                                  
  5959                                  .Lboolean_true:
  5960 0000496E 48BF-                   	mov rdi, fmt_boolean_true
  5960 00004970 [0702000000000000] 
  5961 00004978 E9C8040000              	jmp .Lemit
  5962                                  
  5963                                  .Lchar:
  5964 0000497D 8A4701                  	mov al, byte [rdi + 1]
  5965 00004980 3C20                    	cmp al, ' '
  5966 00004982 7E28                    	jle .Lchar_whitespace
  5967 00004984 3C5C                    	cmp al, 92 		; backslash
  5968 00004986 0F847C000000            	je .Lchar_backslash
  5969 0000498C 3C22                    	cmp al, '"'
  5970 0000498E 0F8483000000            	je .Lchar_dquote
  5971 00004994 4825FF000000            	and rax, 255
  5972 0000499A 48BF-                   	mov rdi, fmt_char_simple
  5972 0000499C [1202000000000000] 
  5973 000049A4 4889C6                  	mov rsi, rax
  5974 000049A7 E999040000              	jmp .Lemit
  5975                                  
  5976                                  .Lchar_whitespace:
  5977 000049AC 3C00                    	cmp al, 0
  5978 000049AE 7476                    	je .Lchar_null
  5979 000049B0 3C07                    	cmp al, 7
  5980 000049B2 0F847D000000            	je .Lchar_bell
  5981 000049B8 3C08                    	cmp al, 8
  5982 000049BA 0F8484000000            	je .Lchar_backspace
  5983 000049C0 3C09                    	cmp al, 9
  5984 000049C2 0F848B000000            	je .Lchar_tab
  5985 000049C8 3C0A                    	cmp al, 10
  5986 000049CA 0F8492000000            	je .Lchar_newline
  5987 000049D0 3C0C                    	cmp al, 12
  5988 000049D2 0F8499000000            	je .Lchar_formfeed
  5989 000049D8 3C0D                    	cmp al, 13
  5990 000049DA 0F84A0000000            	je .Lchar_return
  5991 000049E0 3C1B                    	cmp al, 27
  5992 000049E2 0F84A7000000            	je .Lchar_escape
  5993 000049E8 4825FF000000            	and rax, 255
  5994 000049EE 3C20                    	cmp al, ' '
  5995 000049F0 0F84A8000000            	je .Lchar_space
  5996 000049F6 48BF-                   	mov rdi, fmt_char_hex
  5996 000049F8 [5E02000000000000] 
  5997 00004A00 4889C6                  	mov rsi, rax
  5998 00004A03 E93D040000              	jmp .Lemit	
  5999                                  
  6000                                  .Lchar_backslash:
  6001 00004A08 48BF-                   	mov rdi, fmt_char_backslash
  6001 00004A0A [0A02000000000000] 
  6002 00004A12 E92E040000              	jmp .Lemit
  6003                                  
  6004                                  .Lchar_dquote:
  6005 00004A17 48BF-                   	mov rdi, fmt_char_dquote
  6005 00004A19 [0E02000000000000] 
  6006 00004A21 E91F040000              	jmp .Lemit
  6007                                  
  6008                                  .Lchar_null:
  6009 00004A26 48BF-                   	mov rdi, fmt_char_null
  6009 00004A28 [1702000000000000] 
  6010 00004A30 E910040000              	jmp .Lemit
  6011                                  
  6012                                  .Lchar_bell:
  6013 00004A35 48BF-                   	mov rdi, fmt_char_bell
  6013 00004A37 [1D02000000000000] 
  6014 00004A3F E901040000              	jmp .Lemit
  6015                                  
  6016                                  .Lchar_backspace:
  6017 00004A44 48BF-                   	mov rdi, fmt_char_backspace
  6017 00004A46 [2402000000000000] 
  6018 00004A4E E9F2030000              	jmp .Lemit
  6019                                  
  6020                                  .Lchar_tab:
  6021 00004A53 48BF-                   	mov rdi, fmt_char_tab
  6021 00004A55 [3002000000000000] 
  6022 00004A5D E9E3030000              	jmp .Lemit
  6023                                  
  6024                                  .Lchar_newline:
  6025 00004A62 48BF-                   	mov rdi, fmt_char_newline
  6025 00004A64 [3602000000000000] 
  6026 00004A6C E9D4030000              	jmp .Lemit
  6027                                  
  6028                                  .Lchar_formfeed:
  6029 00004A71 48BF-                   	mov rdi, fmt_char_formfeed
  6029 00004A73 [4002000000000000] 
  6030 00004A7B E9C5030000              	jmp .Lemit
  6031                                  
  6032                                  .Lchar_return:
  6033 00004A80 48BF-                   	mov rdi, fmt_char_return
  6033 00004A82 [4702000000000000] 
  6034 00004A8A E9B6030000              	jmp .Lemit
  6035                                  
  6036                                  .Lchar_escape:
  6037 00004A8F 48BF-                   	mov rdi, fmt_char_escape
  6037 00004A91 [5002000000000000] 
  6038 00004A99 E9A7030000              	jmp .Lemit
  6039                                  
  6040                                  .Lchar_space:
  6041 00004A9E 48BF-                   	mov rdi, fmt_char_space
  6041 00004AA0 [5602000000000000] 
  6042 00004AA8 E998030000              	jmp .Lemit
  6043                                  
  6044                                  .Lclosure:
  6045 00004AAD 4889FE                  	mov rsi, qword rdi
  6046 00004AB0 48BF-                   	mov rdi, fmt_closure
  6046 00004AB2 [6602000000000000] 
  6047 00004ABA 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  6048 00004ABE 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  6049 00004AC2 E97E030000              	jmp .Lemit
  6050                                  
  6051                                  .Lsymbol:
  6052 00004AC7 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  6053 00004ACB BE01000000              	mov rsi, 1		 ; size = 1 byte
  6054 00004AD0 488B5701                	mov rdx, qword [rdi + 1] ; length
  6055 00004AD4 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  6056 00004AD8 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  6057 00004AE0 E8(00000000)            	call fwrite
  6058 00004AE5 E970030000              	jmp .Lend
  6059                                  	
  6060                                  .Lpair:
  6061 00004AEA 57                      	push rdi
  6062 00004AEB 48BF-                   	mov rdi, fmt_lparen
  6062 00004AED [9202000000000000] 
  6063 00004AF5 B800000000              	mov rax, 0
  6064                                          ENTER
    56 00004AFA C8000000            <1>  enter 0, 0
    57 00004AFE 4883E4F0            <1>  and rsp, ~15
  6065 00004B02 E8(00000000)            	call printf
  6066                                          LEAVE
    61 00004B07 C9                  <1>  leave
  6067 00004B08 488B3C24                	mov rdi, qword [rsp] 	; pair
  6068 00004B0C 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  6069 00004B10 E8D1FDFFFF              	call print_sexpr
  6070 00004B15 5F                      	pop rdi 		; pair
  6071 00004B16 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  6072                                  .Lcdr:
  6073 00004B1A 8A07                    	mov al, byte [rdi]
  6074 00004B1C 3C01                    	cmp al, T_nil
  6075 00004B1E 7447                    	je .Lcdr_nil
  6076 00004B20 3C21                    	cmp al, T_pair
  6077 00004B22 7462                    	je .Lcdr_pair
  6078 00004B24 57                      	push rdi
  6079 00004B25 48BF-                   	mov rdi, fmt_dotted_pair
  6079 00004B27 [9402000000000000] 
  6080 00004B2F B800000000              	mov rax, 0
  6081                                  	ENTER
    56 00004B34 C8000000            <1>  enter 0, 0
    57 00004B38 4883E4F0            <1>  and rsp, ~15
  6082 00004B3C E8(00000000)            	call printf
  6083                                  	LEAVE
    61 00004B41 C9                  <1>  leave
  6084 00004B42 5F                      	pop rdi
  6085 00004B43 E89EFDFFFF              	call print_sexpr
  6086 00004B48 48BF-                   	mov rdi, fmt_rparen
  6086 00004B4A [9802000000000000] 
  6087 00004B52 B800000000              	mov rax, 0
  6088                                  	ENTER
    56 00004B57 C8000000            <1>  enter 0, 0
    57 00004B5B 4883E4F0            <1>  and rsp, ~15
  6089 00004B5F E8(00000000)            	call printf
  6090                                  	LEAVE
    61 00004B64 C9                  <1>  leave
  6091                                  	LEAVE
    61 00004B65 C9                  <1>  leave
  6092 00004B66 C3                      	ret
  6093                                  
  6094                                  .Lcdr_nil:
  6095 00004B67 48BF-                   	mov rdi, fmt_rparen
  6095 00004B69 [9802000000000000] 
  6096 00004B71 B800000000              	mov rax, 0
  6097                                  	ENTER
    56 00004B76 C8000000            <1>  enter 0, 0
    57 00004B7A 4883E4F0            <1>  and rsp, ~15
  6098 00004B7E E8(00000000)            	call printf
  6099                                  	LEAVE
    61 00004B83 C9                  <1>  leave
  6100                                  	LEAVE
    61 00004B84 C9                  <1>  leave
  6101 00004B85 C3                      	ret
  6102                                  
  6103                                  .Lcdr_pair:
  6104 00004B86 57                      	push rdi
  6105 00004B87 48BF-                   	mov rdi, fmt_space
  6105 00004B89 [9A02000000000000] 
  6106 00004B91 B800000000              	mov rax, 0
  6107                                  	ENTER
    56 00004B96 C8000000            <1>  enter 0, 0
    57 00004B9A 4883E4F0            <1>  and rsp, ~15
  6108 00004B9E E8(00000000)            	call printf
  6109                                  	LEAVE
    61 00004BA3 C9                  <1>  leave
  6110 00004BA4 488B3C24                	mov rdi, qword [rsp]
  6111 00004BA8 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  6112 00004BAC E835FDFFFF              	call print_sexpr
  6113 00004BB1 5F                      	pop rdi
  6114 00004BB2 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  6115 00004BB6 E95FFFFFFF              	jmp .Lcdr
  6116                                  
  6117                                  .Lvector:
  6118 00004BBB 488B4701                	mov rax, qword [rdi + 1] ; length
  6119 00004BBF 4883F800                	cmp rax, 0
  6120 00004BC3 0F8484000000            	je .Lvector_empty
  6121 00004BC9 57                      	push rdi
  6122 00004BCA 48BF-                   	mov rdi, fmt_vector
  6122 00004BCC [A002000000000000] 
  6123 00004BD4 B800000000              	mov rax, 0
  6124                                  	ENTER
    56 00004BD9 C8000000            <1>  enter 0, 0
    57 00004BDD 4883E4F0            <1>  and rsp, ~15
  6125 00004BE1 E8(00000000)            	call printf
  6126                                  	LEAVE
    61 00004BE6 C9                  <1>  leave
  6127 00004BE7 488B3C24                	mov rdi, qword [rsp]
  6128 00004BEB FF7701                  	push qword [rdi + 1]
  6129 00004BEE 6A01                    	push 1
  6130 00004BF0 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  6131 00004BF4 E8EDFCFFFF              	call print_sexpr
  6132                                  .Lvector_loop:
  6133                                  	; [rsp] index
  6134                                  	; [rsp + 8*1] limit
  6135                                  	; [rsp + 8*2] vector
  6136 00004BF9 488B0424                	mov rax, qword [rsp]
  6137 00004BFD 483B442408              	cmp rax, qword [rsp + 8*1]
  6138 00004C02 7436                    	je .Lvector_end
  6139 00004C04 48BF-                   	mov rdi, fmt_space
  6139 00004C06 [9A02000000000000] 
  6140 00004C0E B800000000              	mov rax, 0
  6141                                  	ENTER
    56 00004C13 C8000000            <1>  enter 0, 0
    57 00004C17 4883E4F0            <1>  and rsp, ~15
  6142 00004C1B E8(00000000)            	call printf
  6143                                  	LEAVE
    61 00004C20 C9                  <1>  leave
  6144 00004C21 488B0424                	mov rax, qword [rsp]
  6145 00004C25 488B5C2410              	mov rbx, qword [rsp + 8*2]
  6146 00004C2A 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  6147 00004C2F E8B2FCFFFF              	call print_sexpr
  6148 00004C34 48FF0424                	inc qword [rsp]
  6149 00004C38 EBBF                    	jmp .Lvector_loop
  6150                                  
  6151                                  .Lvector_end:
  6152 00004C3A 4883C418                	add rsp, 8*3
  6153 00004C3E 48BF-                   	mov rdi, fmt_rparen
  6153 00004C40 [9802000000000000] 
  6154 00004C48 E9F8010000              	jmp .Lemit	
  6155                                  
  6156                                  .Lvector_empty:
  6157 00004C4D 48BF-                   	mov rdi, fmt_empty_vector
  6157 00004C4F [9C02000000000000] 
  6158 00004C57 E9E9010000              	jmp .Lemit
  6159                                  
  6160                                  .Lreal:
  6161 00004C5C FF7701                  	push qword [rdi + 1]
  6162 00004C5F F20F100424              	movsd xmm0, qword [rsp]
  6163 00004C64 4883C408                	add rsp, 8*1
  6164 00004C68 48BF-                   	mov rdi, fmt_real
  6164 00004C6A [A302000000000000] 
  6165 00004C72 B801000000              	mov rax, 1
  6166                                  	ENTER
    56 00004C77 C8000000            <1>  enter 0, 0
    57 00004C7B 4883E4F0            <1>  and rsp, ~15
  6167 00004C7F E8(00000000)            	call printf
  6168                                  	LEAVE
    61 00004C84 C9                  <1>  leave
  6169 00004C85 E9D0010000              	jmp .Lend
  6170                                  
  6171                                  .Lrational:
  6172 00004C8A 488B7701                	mov rsi, qword [rdi + 1]
  6173 00004C8E 488B5709                	mov rdx, qword [rdi + 1 + 8]
  6174 00004C92 4883FE00                	cmp rsi, 0
  6175 00004C96 7415                    	je .Lrat_zero
  6176 00004C98 4883FA01                	cmp rdx, 1
  6177 00004C9C 741E                    	je .Lrat_int
  6178 00004C9E 48BF-                   	mov rdi, fmt_fraction
  6178 00004CA0 [A602000000000000] 
  6179 00004CA8 E998010000              	jmp .Lemit
  6180                                  
  6181                                  .Lrat_zero:
  6182 00004CAD 48BF-                   	mov rdi, fmt_zero
  6182 00004CAF [AE02000000000000] 
  6183 00004CB7 E989010000              	jmp .Lemit
  6184                                  
  6185                                  .Lrat_int:
  6186 00004CBC 48BF-                   	mov rdi, fmt_int
  6186 00004CBE [B002000000000000] 
  6187 00004CC6 E97A010000              	jmp .Lemit
  6188                                  
  6189                                  .Lstring:
  6190 00004CCB 488D4709                	lea rax, [rdi + 1 + 8]
  6191 00004CCF 50                      	push rax
  6192 00004CD0 FF7701                  	push qword [rdi + 1]
  6193 00004CD3 48BF-                   	mov rdi, fmt_dquote
  6193 00004CD5 [F402000000000000] 
  6194 00004CDD B800000000              	mov rax, 0
  6195                                  	ENTER
    56 00004CE2 C8000000            <1>  enter 0, 0
    57 00004CE6 4883E4F0            <1>  and rsp, ~15
  6196 00004CEA E8(00000000)            	call printf
  6197                                  	LEAVE
    61 00004CEF C9                  <1>  leave
  6198                                  .Lstring_loop:
  6199                                  	; qword [rsp]: limit
  6200                                  	; qword [rsp + 8*1]: char *
  6201 00004CF0 48833C2400              	cmp qword [rsp], 0
  6202 00004CF5 0F84FD000000            	je .Lstring_end
  6203 00004CFB 488B442408              	mov rax, qword [rsp + 8*1]
  6204 00004D00 8A00                    	mov al, byte [rax]
  6205 00004D02 4825FF000000            	and rax, 255
  6206 00004D08 3C07                    	cmp al, 7
  6207 00004D0A 7468                            je .Lstring_char_7
  6208 00004D0C 3C08                            cmp al, 8
  6209 00004D0E 7470                            je .Lstring_char_8
  6210 00004D10 3C09                            cmp al, 9
  6211 00004D12 7478                            je .Lstring_char_9
  6212 00004D14 3C0A                            cmp al, 10
  6213 00004D16 0F847C000000                    je .Lstring_char_10
  6214 00004D1C 3C0B                            cmp al, 11
  6215 00004D1E 0F8480000000                    je .Lstring_char_11
  6216 00004D24 3C0C                            cmp al, 12
  6217 00004D26 0F8484000000                    je .Lstring_char_12
  6218 00004D2C 3C0D                            cmp al, 13
  6219 00004D2E 0F8488000000                    je .Lstring_char_13
  6220 00004D34 3C22                            cmp al, 34
  6221 00004D36 0F848C000000                    je .Lstring_char_34
  6222 00004D3C 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  6224 00004D3E 3C20                            cmp al, ' '
  6225 00004D40 0F8CA0000000                    jl .Lstring_char_hex
  6226 00004D46 48BF-                           mov rdi, fmt_string_char
  6226 00004D48 [F602000000000000] 
  6227 00004D50 4889C6                          mov rsi, rax
  6228                                  .Lstring_char_emit:
  6229 00004D53 B800000000                      mov rax, 0
  6230                                          ENTER
    56 00004D58 C8000000            <1>  enter 0, 0
    57 00004D5C 4883E4F0            <1>  and rsp, ~15
  6231 00004D60 E8(00000000)                    call printf
  6232                                          LEAVE
    61 00004D65 C9                  <1>  leave
  6233 00004D66 48FF0C24                        dec qword [rsp]
  6234 00004D6A 48FF442408                      inc qword [rsp + 8*1]
  6235 00004D6F E97CFFFFFF                      jmp .Lstring_loop
  6236                                  
  6237                                  .Lstring_char_7:
  6238 00004D74 48BF-                           mov rdi, fmt_string_char_7
  6238 00004D76 [F902000000000000] 
  6239 00004D7E EBD3                            jmp .Lstring_char_emit
  6240                                  
  6241                                  .Lstring_char_8:
  6242 00004D80 48BF-                           mov rdi, fmt_string_char_8
  6242 00004D82 [FC02000000000000] 
  6243 00004D8A EBC7                            jmp .Lstring_char_emit
  6244                                          
  6245                                  .Lstring_char_9:
  6246 00004D8C 48BF-                           mov rdi, fmt_string_char_9
  6246 00004D8E [FF02000000000000] 
  6247 00004D96 EBBB                            jmp .Lstring_char_emit
  6248                                  
  6249                                  .Lstring_char_10:
  6250 00004D98 48BF-                           mov rdi, fmt_string_char_10
  6250 00004D9A [0203000000000000] 
  6251 00004DA2 EBAF                            jmp .Lstring_char_emit
  6252                                  
  6253                                  .Lstring_char_11:
  6254 00004DA4 48BF-                           mov rdi, fmt_string_char_11
  6254 00004DA6 [0503000000000000] 
  6255 00004DAE EBA3                            jmp .Lstring_char_emit
  6256                                  
  6257                                  .Lstring_char_12:
  6258 00004DB0 48BF-                           mov rdi, fmt_string_char_12
  6258 00004DB2 [0803000000000000] 
  6259 00004DBA EB97                            jmp .Lstring_char_emit
  6260                                  
  6261                                  .Lstring_char_13:
  6262 00004DBC 48BF-                           mov rdi, fmt_string_char_13
  6262 00004DBE [0B03000000000000] 
  6263 00004DC6 EB8B                            jmp .Lstring_char_emit
  6264                                  
  6265                                  .Lstring_char_34:
  6266 00004DC8 48BF-                           mov rdi, fmt_string_char_34
  6266 00004DCA [0E03000000000000] 
  6267 00004DD2 E97CFFFFFF                      jmp .Lstring_char_emit
  6268                                  
  6269                                  .Lstring_char_92:
  6270 00004DD7 48BF-                           mov rdi, fmt_string_char_92
  6270 00004DD9 [1103000000000000] 
  6271 00004DE1 E96DFFFFFF                      jmp .Lstring_char_emit
  6272                                  
  6273                                  .Lstring_char_hex:
  6274 00004DE6 48BF-                           mov rdi, fmt_string_char_hex
  6274 00004DE8 [1403000000000000] 
  6275 00004DF0 4889C6                          mov rsi, rax
  6276 00004DF3 E95BFFFFFF                      jmp .Lstring_char_emit        
  6277                                  
  6278                                  .Lstring_end:
  6279 00004DF8 4883C410                	add rsp, 8 * 2
  6280 00004DFC 48BF-                   	mov rdi, fmt_dquote
  6280 00004DFE [F402000000000000] 
  6281 00004E06 EB3D                    	jmp .Lemit
  6282                                  
  6283                                  .Lunknown_sexpr_type:
  6284 00004E08 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  6284 00004E0A [B402000000000000] 
  6285 00004E12 4825FF000000            	and rax, 255
  6286 00004E18 4889C2                  	mov rdx, rax
  6287 00004E1B 4889F9                  	mov rcx, rdi
  6288 00004E1E 488B3C25[00000000]      	mov rdi, qword [stderr]
  6289 00004E26 B800000000              	mov rax, 0
  6290                                  	ENTER
    56 00004E2B C8000000            <1>  enter 0, 0
    57 00004E2F 4883E4F0            <1>  and rsp, ~15
  6291 00004E33 E8(00000000)            	call fprintf
  6292                                  	LEAVE
    61 00004E38 C9                  <1>  leave
  6293 00004E39 48C7C0FFFFFFFF          	mov rax, -1
  6294 00004E40 E8(00000000)            	call exit
  6295                                  
  6296                                  .Lemit:
  6297 00004E45 B800000000              	mov rax, 0
  6298                                  	ENTER
    56 00004E4A C8000000            <1>  enter 0, 0
    57 00004E4E 4883E4F0            <1>  and rsp, ~15
  6299 00004E52 E8(00000000)            	call printf
  6300                                  	LEAVE
    61 00004E57 C9                  <1>  leave
  6301 00004E58 EB00                    	jmp .Lend
  6302                                  
  6303                                  .Lend:
  6304                                  	LEAVE
    61 00004E5A C9                  <1>  leave
  6305 00004E5B C3                      	ret
  6306                                  
  6307                                  ;;; rdi: address of free variable
  6308                                  ;;; rsi: address of code-pointer
  6309                                  bind_primitive:
  6310                                          ENTER
    56 00004E5C C8000000            <1>  enter 0, 0
    57 00004E60 4883E4F0            <1>  and rsp, ~15
  6311 00004E64 57                              push rdi
  6312 00004E65 BF11000000                      mov rdi, (1 + 8 + 8)
  6313 00004E6A E85CFAFFFF                      call malloc
  6314 00004E6F 5F                              pop rdi
  6315 00004E70 C60005                          mov byte [rax], T_closure
  6316 00004E73 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  6317 00004E7B 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  6318 00004E7F 488907                          mov qword [rdi], rax
  6319                                          LEAVE
    61 00004E82 C9                  <1>  leave
  6320 00004E83 C3                              ret
  6321                                  
  6322                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  6323                                  L_code_ptr_bin_apply:
  6324 00004E84 C8000000                        enter 0,0
  6325                                          ; loop over the list and push all its members
  6326 00004E88 BE00000000                      mov rsi, 0
  6327 00004E8D 488B5D18                        mov rbx, COUNT
  6328 00004E91 48FFCB                          dec rbx
  6329 00004E94 4883C304                        add rbx, 4
  6330 00004E98 48C1E303                        shl rbx, 3
  6331 00004E9C 4801EB                          add rbx, rbp
  6332 00004E9F 488B1B                          mov rbx, [rbx] ; rbx = [rbp + 8 * (4 + (COUNT-1))]
  6333                                  L_bin_apply_list_loop_start: ; start pushing list to stack
  6334 00004EA2 803B01                          cmp byte [rbx], T_nil
  6335 00004EA5 740C                            je L_bin_apply_list_loop_end
  6336 00004EA7 48FFC6                          inc rsi
  6337 00004EAA FF7301                          push SOB_PAIR_CAR(rbx)
  6338 00004EAD 488B5B09                        mov rbx, SOB_PAIR_CDR(rbx)
  6339 00004EB1 EBEF                            jmp L_bin_apply_list_loop_start
  6340                                  L_bin_apply_list_loop_end: ; end pushing list to stack
  6341                                          ; flip the list on the stack
  6342 00004EB3 BB00000000                      mov rbx, 0 ; index
  6343                                  L_bin_apply_list_flip_start:
  6344 00004EB8 4889F1                          mov rcx, rsi
  6345 00004EBB 48FFC9                          dec rcx
  6346 00004EBE 4829D9                          sub rcx, rbx ; rcx is the higher 
  6347 00004EC1 4829D9                          sub rcx, rbx
  6348 00004EC4 4883F900                        cmp rcx, 0
  6349 00004EC8 7E27                            jle L_bin_apply_list_flip_end
  6350 00004ECA 4801D9                          add rcx, rbx ; rcx is the relative higher. rbx is the relative lower
  6351 00004ECD 4889DF                          mov rdi, rbx
  6352 00004ED0 48C1E703                        shl rdi, 3
  6353 00004ED4 4801E7                          add rdi, rsp ; rdi is the absolute higher
  6354 00004ED7 488B07                          mov rax, [rdi] ; rdi = [rsp + 8*rsi] ->  rax is the absolute higher value
  6355 00004EDA 48C1E103                        shl rcx, 3
  6356 00004EDE 4801E1                          add rcx, rsp ; rcx = rsp + 8*(length-1-index) -> rcx is the absolute lower
  6357 00004EE1 53                              push rbx ; save rbx
  6358 00004EE2 488B19                          mov rbx, [rcx]
  6359 00004EE5 48891F                          mov [rdi], rbx ; [rsp + 8*rsi] = [rsp + 8*(length-1-index)]
  6360 00004EE8 488901                          mov [rcx], rax ; [rsp + 8*(length-1-index)] = [rsp + 8*rsi]
  6361 00004EEB 5B                              pop rbx ; restore rbx
  6362 00004EEC 48FFC3                          inc rbx
  6363 00004EEF EBC7                            jmp L_bin_apply_list_flip_start
  6364                                  L_bin_apply_list_flip_end:
  6365                                          ; push all the rest of the arguments
  6366 00004EF1 488B4D18                        mov rcx, COUNT
  6367 00004EF5 4883E902                        sub rcx, 2
  6368                                  L_bin_apply_args_loop_start: ; start pushing the rest of args
  6369 00004EF9 4883F900                        cmp rcx, 0
  6370 00004EFD 741A                            je L_bin_apply_args_loop_end
  6371 00004EFF 48FFC6                          inc rsi ; for counting number of args
  6372 00004F02 4889CB                          mov rbx, rcx
  6373 00004F05 4883C304                        add rbx, 4
  6374 00004F09 48C1E303                        shl rbx, 3
  6375 00004F0D 4801EB                          add rbx, rbp
  6376 00004F10 488B1B                          mov rbx, [rbx] ; rbx = [rbp + 8 * (4 + rcx)]
  6377 00004F13 53                              push rbx
  6378 00004F14 48FFC9                          dec rcx
  6379 00004F17 EBE0                            jmp L_bin_apply_args_loop_start
  6380                                  L_bin_apply_args_loop_end:
  6381                                          ; push number of arguments
  6382 00004F19 56                              push rsi
  6383                                          ; push lex env
  6384 00004F1A 488B4520                        mov rax, PARAM(0)
  6385 00004F1E FF7001                          push SOB_CLOSURE_ENV(rax)
  6386                                          ; push ret add
  6387 00004F21 FF7508                          push RET_ADDR
  6388                                          ; fix the stack
  6389                                          ; loop over the stack and move it to the top of the previos stack
  6390 00004F24 4889F2                          mov rdx, rsi
  6391                                  
  6392 00004F27 488B7D18                        mov rdi, COUNT 
  6393 00004F2B 4883C703                        add rdi, 3 ; rdi = COUNT + 3 = COUNT + (num_of_args, lex, ret)
  6394 00004F2F 48C1E703                        shl rdi, 3
  6395 00004F33 4801EF                          add rdi, rbp
  6396                                  
  6397 00004F36 488B6D00                        mov rbp, OLD_RDP
  6398 00004F3A BE00000000                      mov rsi, 0
  6399                                  L_bin_apply_fix_stack_start:
  6400 00004F3F 4889D1                          mov rcx, rdx
  6401 00004F42 4883C103                        add rcx, 3
  6402 00004F46 4839CE                          cmp rsi, rcx
  6403 00004F49 7429                            je L_bin_apply_fix_stack_end
  6404 00004F4B 4889D1                          mov rcx, rdx 
  6405 00004F4E 4883C102                        add rcx, 2 
  6406 00004F52 4829F1                          sub rcx, rsi 
  6407 00004F55 48C1E103                        shl rcx, 3
  6408 00004F59 4801E1                          add rcx, rsp ; rcx is the address to move.
  6409 00004F5C 4889F3                          mov rbx, rsi
  6410 00004F5F 48C1E303                        shl rbx, 3
  6411 00004F63 48F7DB                          neg rbx
  6412 00004F66 4801FB                          add rbx, rdi ; rbx is the address to move to.
  6413 00004F69 488B09                          mov rcx, [rcx]
  6414 00004F6C 48890B                          mov [rbx], rcx
  6415 00004F6F 48FFC6                          inc rsi
  6416 00004F72 EBCB                            jmp L_bin_apply_fix_stack_start
  6417                                  L_bin_apply_fix_stack_end:
  6418                                          ; fix rsp
  6419 00004F74 4889D3                          mov rbx, rdx
  6420 00004F77 4883C302                        add rbx, 2
  6421 00004F7B 48C1E303                        shl rbx, 3
  6422 00004F7F 48F7DB                          neg rbx
  6423 00004F82 4801FB                          add rbx, rdi
  6424 00004F85 4889DC                          mov rsp, rbx
  6425 00004F88 488B5809                        mov rbx, SOB_CLOSURE_CODE(rax)
  6426 00004F8C FFE3                            jmp rbx
  6427                                  	
  6428                                  L_code_ptr_is_null:
  6429                                          ENTER
    56 00004F8E C8000000            <1>  enter 0, 0
    57 00004F92 4883E4F0            <1>  and rsp, ~15
  6430 00004F96 48837D1801                      cmp COUNT, 1
  6431 00004F9B 0F85A5100000                    jne L_error_arg_count_1
  6432 00004FA1 488B4520                        mov rax, PARAM(0)
  6433 00004FA5 803801                          cmp byte [rax], T_nil
  6434 00004FA8 750C                            jne .L_false
  6435 00004FAA 48B8-                           mov rax, sob_boolean_true
  6435 00004FAC [0300000000000000] 
  6436 00004FB4 EB0A                            jmp .L_end
  6437                                  .L_false:
  6438 00004FB6 48B8-                           mov rax, sob_boolean_false
  6438 00004FB8 [0200000000000000] 
  6439                                  .L_end:
  6440                                          LEAVE
    61 00004FC0 C9                  <1>  leave
  6441 00004FC1 C21800                          ret AND_KILL_FRAME(1)
  6442                                  
  6443                                  L_code_ptr_is_pair:
  6444                                          ENTER
    56 00004FC4 C8000000            <1>  enter 0, 0
    57 00004FC8 4883E4F0            <1>  and rsp, ~15
  6445 00004FCC 48837D1801                      cmp COUNT, 1
  6446 00004FD1 0F856F100000                    jne L_error_arg_count_1
  6447 00004FD7 488B4520                        mov rax, PARAM(0)
  6448 00004FDB 803821                          cmp byte [rax], T_pair
  6449 00004FDE 750C                            jne .L_false
  6450 00004FE0 48B8-                           mov rax, sob_boolean_true
  6450 00004FE2 [0300000000000000] 
  6451 00004FEA EB0A                            jmp .L_end
  6452                                  .L_false:
  6453 00004FEC 48B8-                           mov rax, sob_boolean_false
  6453 00004FEE [0200000000000000] 
  6454                                  .L_end:
  6455                                          LEAVE
    61 00004FF6 C9                  <1>  leave
  6456 00004FF7 C21800                          ret AND_KILL_FRAME(1)
  6457                                          
  6458                                  L_code_ptr_is_void:
  6459                                          ENTER
    56 00004FFA C8000000            <1>  enter 0, 0
    57 00004FFE 4883E4F0            <1>  and rsp, ~15
  6460 00005002 48837D1801                      cmp COUNT, 1
  6461 00005007 0F8539100000                    jne L_error_arg_count_1
  6462 0000500D 488B4520                        mov rax, PARAM(0)
  6463 00005011 803800                          cmp byte [rax], T_void
  6464 00005014 750C                            jne .L_false
  6465 00005016 48B8-                           mov rax, sob_boolean_true
  6465 00005018 [0300000000000000] 
  6466 00005020 EB0A                            jmp .L_end
  6467                                  .L_false:
  6468 00005022 48B8-                           mov rax, sob_boolean_false
  6468 00005024 [0200000000000000] 
  6469                                  .L_end:
  6470                                          LEAVE
    61 0000502C C9                  <1>  leave
  6471 0000502D C21800                          ret AND_KILL_FRAME(1)
  6472                                  
  6473                                  L_code_ptr_is_char:
  6474                                          ENTER
    56 00005030 C8000000            <1>  enter 0, 0
    57 00005034 4883E4F0            <1>  and rsp, ~15
  6475 00005038 48837D1801                      cmp COUNT, 1
  6476 0000503D 0F8503100000                    jne L_error_arg_count_1
  6477 00005043 488B4520                        mov rax, PARAM(0)
  6478 00005047 803802                          cmp byte [rax], T_char
  6479 0000504A 750C                            jne .L_false
  6480 0000504C 48B8-                           mov rax, sob_boolean_true
  6480 0000504E [0300000000000000] 
  6481 00005056 EB0A                            jmp .L_end
  6482                                  .L_false:
  6483 00005058 48B8-                           mov rax, sob_boolean_false
  6483 0000505A [0200000000000000] 
  6484                                  .L_end:
  6485                                          LEAVE
    61 00005062 C9                  <1>  leave
  6486 00005063 C21800                          ret AND_KILL_FRAME(1)
  6487                                  
  6488                                  L_code_ptr_is_string:
  6489                                          ENTER
    56 00005066 C8000000            <1>  enter 0, 0
    57 0000506A 4883E4F0            <1>  and rsp, ~15
  6490 0000506E 48837D1801                      cmp COUNT, 1
  6491 00005073 0F85CD0F0000                    jne L_error_arg_count_1
  6492 00005079 488B4520                        mov rax, PARAM(0)
  6493 0000507D 803803                          cmp byte [rax], T_string
  6494 00005080 750C                            jne .L_false
  6495 00005082 48B8-                           mov rax, sob_boolean_true
  6495 00005084 [0300000000000000] 
  6496 0000508C EB0A                            jmp .L_end
  6497                                  .L_false:
  6498 0000508E 48B8-                           mov rax, sob_boolean_false
  6498 00005090 [0200000000000000] 
  6499                                  .L_end:
  6500                                          LEAVE
    61 00005098 C9                  <1>  leave
  6501 00005099 C21800                          ret AND_KILL_FRAME(1)
  6502                                  
  6503                                  L_code_ptr_is_symbol:
  6504                                          ENTER
    56 0000509C C8000000            <1>  enter 0, 0
    57 000050A0 4883E4F0            <1>  and rsp, ~15
  6505 000050A4 48837D1801                      cmp COUNT, 1
  6506 000050A9 0F85970F0000                    jne L_error_arg_count_1
  6507 000050AF 488B4520                        mov rax, PARAM(0)
  6508 000050B3 803804                          cmp byte [rax], T_symbol
  6509 000050B6 750C                            jne .L_false
  6510 000050B8 48B8-                           mov rax, sob_boolean_true
  6510 000050BA [0300000000000000] 
  6511 000050C2 EB0A                            jmp .L_end
  6512                                  .L_false:
  6513 000050C4 48B8-                           mov rax, sob_boolean_false
  6513 000050C6 [0200000000000000] 
  6514                                  .L_end:
  6515                                          LEAVE
    61 000050CE C9                  <1>  leave
  6516 000050CF C21800                          ret AND_KILL_FRAME(1)
  6517                                  
  6518                                  L_code_ptr_is_vector:
  6519                                          ENTER
    56 000050D2 C8000000            <1>  enter 0, 0
    57 000050D6 4883E4F0            <1>  and rsp, ~15
  6520 000050DA 48837D1801                      cmp COUNT, 1
  6521 000050DF 0F85610F0000                    jne L_error_arg_count_1
  6522 000050E5 488B4520                        mov rax, PARAM(0)
  6523 000050E9 803822                          cmp byte [rax], T_vector
  6524 000050EC 750C                            jne .L_false
  6525 000050EE 48B8-                           mov rax, sob_boolean_true
  6525 000050F0 [0300000000000000] 
  6526 000050F8 EB0A                            jmp .L_end
  6527                                  .L_false:
  6528 000050FA 48B8-                           mov rax, sob_boolean_false
  6528 000050FC [0200000000000000] 
  6529                                  .L_end:
  6530                                          LEAVE
    61 00005104 C9                  <1>  leave
  6531 00005105 C21800                          ret AND_KILL_FRAME(1)
  6532                                  
  6533                                  L_code_ptr_is_closure:
  6534                                          ENTER
    56 00005108 C8000000            <1>  enter 0, 0
    57 0000510C 4883E4F0            <1>  and rsp, ~15
  6535 00005110 48837D1801                      cmp COUNT, 1
  6536 00005115 0F852B0F0000                    jne L_error_arg_count_1
  6537 0000511B 488B4520                        mov rax, PARAM(0)
  6538 0000511F 803805                          cmp byte [rax], T_closure
  6539 00005122 750C                            jne .L_false
  6540 00005124 48B8-                           mov rax, sob_boolean_true
  6540 00005126 [0300000000000000] 
  6541 0000512E EB0A                            jmp .L_end
  6542                                  .L_false:
  6543 00005130 48B8-                           mov rax, sob_boolean_false
  6543 00005132 [0200000000000000] 
  6544                                  .L_end:
  6545                                          LEAVE
    61 0000513A C9                  <1>  leave
  6546 0000513B C21800                          ret AND_KILL_FRAME(1)
  6547                                  
  6548                                  L_code_ptr_is_real:
  6549                                          ENTER
    56 0000513E C8000000            <1>  enter 0, 0
    57 00005142 4883E4F0            <1>  and rsp, ~15
  6550 00005146 48837D1801                      cmp COUNT, 1
  6551 0000514B 0F85F50E0000                    jne L_error_arg_count_1
  6552 00005151 488B4520                        mov rax, PARAM(0)
  6553 00005155 803812                          cmp byte [rax], T_real
  6554 00005158 750C                            jne .L_false
  6555 0000515A 48B8-                           mov rax, sob_boolean_true
  6555 0000515C [0300000000000000] 
  6556 00005164 EB0A                            jmp .L_end
  6557                                  .L_false:
  6558 00005166 48B8-                           mov rax, sob_boolean_false
  6558 00005168 [0200000000000000] 
  6559                                  .L_end:
  6560                                          LEAVE
    61 00005170 C9                  <1>  leave
  6561 00005171 C21800                          ret AND_KILL_FRAME(1)
  6562                                  
  6563                                  L_code_ptr_is_rational:
  6564                                          ENTER
    56 00005174 C8000000            <1>  enter 0, 0
    57 00005178 4883E4F0            <1>  and rsp, ~15
  6565 0000517C 48837D1801                      cmp COUNT, 1
  6566 00005181 0F85BF0E0000                    jne L_error_arg_count_1
  6567 00005187 488B4520                        mov rax, PARAM(0)
  6568 0000518B 803811                          cmp byte [rax], T_rational
  6569 0000518E 750C                            jne .L_false
  6570 00005190 48B8-                           mov rax, sob_boolean_true
  6570 00005192 [0300000000000000] 
  6571 0000519A EB0A                            jmp .L_end
  6572                                  .L_false:
  6573 0000519C 48B8-                           mov rax, sob_boolean_false
  6573 0000519E [0200000000000000] 
  6574                                  .L_end:
  6575                                          LEAVE
    61 000051A6 C9                  <1>  leave
  6576 000051A7 C21800                          ret AND_KILL_FRAME(1)
  6577                                  
  6578                                  L_code_ptr_is_boolean:
  6579                                          ENTER
    56 000051AA C8000000            <1>  enter 0, 0
    57 000051AE 4883E4F0            <1>  and rsp, ~15
  6580 000051B2 48837D1801                      cmp COUNT, 1
  6581 000051B7 0F85890E0000                    jne L_error_arg_count_1
  6582 000051BD 488B4520                        mov rax, PARAM(0)
  6583 000051C1 8A18                            mov bl, byte [rax]
  6584 000051C3 80E308                          and bl, T_boolean
  6585 000051C6 740C                            je .L_false
  6586 000051C8 48B8-                           mov rax, sob_boolean_true
  6586 000051CA [0300000000000000] 
  6587 000051D2 EB0A                            jmp .L_end
  6588                                  .L_false:
  6589 000051D4 48B8-                           mov rax, sob_boolean_false
  6589 000051D6 [0200000000000000] 
  6590                                  .L_end:
  6591                                          LEAVE
    61 000051DE C9                  <1>  leave
  6592 000051DF C21800                          ret AND_KILL_FRAME(1)
  6593                                          
  6594                                  L_code_ptr_is_number:
  6595                                          ENTER
    56 000051E2 C8000000            <1>  enter 0, 0
    57 000051E6 4883E4F0            <1>  and rsp, ~15
  6596 000051EA 48837D1801                      cmp COUNT, 1
  6597 000051EF 0F85510E0000                    jne L_error_arg_count_1
  6598 000051F5 488B4520                        mov rax, PARAM(0)
  6599 000051F9 8A18                            mov bl, byte [rax]
  6600 000051FB 80E310                          and bl, T_number
  6601 000051FE 740C                            je .L_false
  6602 00005200 48B8-                           mov rax, sob_boolean_true
  6602 00005202 [0300000000000000] 
  6603 0000520A EB0A                            jmp .L_end
  6604                                  .L_false:
  6605 0000520C 48B8-                           mov rax, sob_boolean_false
  6605 0000520E [0200000000000000] 
  6606                                  .L_end:
  6607                                          LEAVE
    61 00005216 C9                  <1>  leave
  6608 00005217 C21800                          ret AND_KILL_FRAME(1)
  6609                                          
  6610                                  L_code_ptr_is_collection:
  6611                                          ENTER
    56 0000521A C8000000            <1>  enter 0, 0
    57 0000521E 4883E4F0            <1>  and rsp, ~15
  6612 00005222 48837D1801                      cmp COUNT, 1
  6613 00005227 0F85190E0000                    jne L_error_arg_count_1
  6614 0000522D 488B4520                        mov rax, PARAM(0)
  6615 00005231 8A18                            mov bl, byte [rax]
  6616 00005233 80E320                          and bl, T_collection
  6617 00005236 740C                            je .L_false
  6618 00005238 48B8-                           mov rax, sob_boolean_true
  6618 0000523A [0300000000000000] 
  6619 00005242 EB0A                            jmp .L_end
  6620                                  .L_false:
  6621 00005244 48B8-                           mov rax, sob_boolean_false
  6621 00005246 [0200000000000000] 
  6622                                  .L_end:
  6623                                          LEAVE
    61 0000524E C9                  <1>  leave
  6624 0000524F C21800                          ret AND_KILL_FRAME(1)
  6625                                  
  6626                                  L_code_ptr_cons:
  6627                                          ENTER
    56 00005252 C8000000            <1>  enter 0, 0
    57 00005256 4883E4F0            <1>  and rsp, ~15
  6628 0000525A 48837D1802                      cmp COUNT, 2
  6629 0000525F 0F85160E0000                    jne L_error_arg_count_2
  6630 00005265 BF11000000                      mov rdi, (1 + 8 + 8)
  6631 0000526A E85CF6FFFF                      call malloc
  6632 0000526F C60021                          mov byte [rax], T_pair
  6633 00005272 488B5D20                        mov rbx, PARAM(0)
  6634 00005276 48895801                        mov SOB_PAIR_CAR(rax), rbx
  6635 0000527A 488B5D28                        mov rbx, PARAM(1)
  6636 0000527E 48895809                        mov SOB_PAIR_CDR(rax), rbx
  6637                                          LEAVE
    61 00005282 C9                  <1>  leave
  6638 00005283 C22000                          ret AND_KILL_FRAME(2)
  6639                                  
  6640                                  L_code_ptr_display_sexpr:
  6641                                          ENTER
    56 00005286 C8000000            <1>  enter 0, 0
    57 0000528A 4883E4F0            <1>  and rsp, ~15
  6642 0000528E 48837D1801                      cmp COUNT, 1
  6643 00005293 0F85AD0D0000                    jne L_error_arg_count_1
  6644 00005299 488B7D20                        mov rdi, PARAM(0)
  6645 0000529D E844F6FFFF                      call print_sexpr
  6646 000052A2 48B8-                           mov rax, sob_void
  6646 000052A4 [0000000000000000] 
  6647                                          LEAVE
    61 000052AC C9                  <1>  leave
  6648 000052AD C21800                          ret AND_KILL_FRAME(1)
  6649                                  
  6650                                  L_code_ptr_write_char:
  6651                                          ENTER
    56 000052B0 C8000000            <1>  enter 0, 0
    57 000052B4 4883E4F0            <1>  and rsp, ~15
  6652 000052B8 48837D1801                      cmp COUNT, 1
  6653 000052BD 0F85830D0000                    jne L_error_arg_count_1
  6654 000052C3 488B4520                        mov rax, PARAM(0)
  6655                                          assert_char(rax)
    65 000052C7 803802              <1>  cmp byte [%1], %2
    66 000052CA 0F857B0E0000        <1>  jne L_error_incorrect_type
  6656 000052D0 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  6657 000052D3 4825FF000000                    and rax, 255
  6658 000052D9 48BF-                           mov rdi, fmt_char
  6658 000052DB [1A03000000000000] 
  6659 000052E3 4889C6                          mov rsi, rax
  6660 000052E6 B800000000                      mov rax, 0
  6661                                  	ENTER
    56 000052EB C8000000            <1>  enter 0, 0
    57 000052EF 4883E4F0            <1>  and rsp, ~15
  6662 000052F3 E8(00000000)                    call printf
  6663                                  	LEAVE
    61 000052F8 C9                  <1>  leave
  6664 000052F9 48B8-                           mov rax, sob_void
  6664 000052FB [0000000000000000] 
  6665                                          LEAVE
    61 00005303 C9                  <1>  leave
  6666 00005304 C21800                          ret AND_KILL_FRAME(1)
  6667                                  
  6668                                  L_code_ptr_car:
  6669                                          ENTER
    56 00005307 C8000000            <1>  enter 0, 0
    57 0000530B 4883E4F0            <1>  and rsp, ~15
  6670 0000530F 48837D1801                      cmp COUNT, 1
  6671 00005314 0F852C0D0000                    jne L_error_arg_count_1
  6672 0000531A 488B4520                        mov rax, PARAM(0)
  6673                                          assert_pair(rax)
    65 0000531E 803821              <1>  cmp byte [%1], %2
    66 00005321 0F85240E0000        <1>  jne L_error_incorrect_type
  6674 00005327 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  6675                                          LEAVE
    61 0000532B C9                  <1>  leave
  6676 0000532C C21800                          ret AND_KILL_FRAME(1)
  6677                                          
  6678                                  L_code_ptr_cdr:
  6679                                          ENTER
    56 0000532F C8000000            <1>  enter 0, 0
    57 00005333 4883E4F0            <1>  and rsp, ~15
  6680 00005337 48837D1801                      cmp COUNT, 1
  6681 0000533C 0F85040D0000                    jne L_error_arg_count_1
  6682 00005342 488B4520                        mov rax, PARAM(0)
  6683                                          assert_pair(rax)
    65 00005346 803821              <1>  cmp byte [%1], %2
    66 00005349 0F85FC0D0000        <1>  jne L_error_incorrect_type
  6684 0000534F 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  6685                                          LEAVE
    61 00005353 C9                  <1>  leave
  6686 00005354 C21800                          ret AND_KILL_FRAME(1)
  6687                                          
  6688                                  L_code_ptr_string_length:
  6689                                          ENTER
    56 00005357 C8000000            <1>  enter 0, 0
    57 0000535B 4883E4F0            <1>  and rsp, ~15
  6690 0000535F 48837D1801                      cmp COUNT, 1
  6691 00005364 0F85DC0C0000                    jne L_error_arg_count_1
  6692 0000536A 488B4520                        mov rax, PARAM(0)
  6693                                          assert_string(rax)
    65 0000536E 803803              <1>  cmp byte [%1], %2
    66 00005371 0F85D40D0000        <1>  jne L_error_incorrect_type
  6694 00005377 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  6695 0000537B E83A0C0000                      call make_integer
  6696                                          LEAVE
    61 00005380 C9                  <1>  leave
  6697 00005381 C21800                          ret AND_KILL_FRAME(1)
  6698                                  
  6699                                  L_code_ptr_vector_length:
  6700                                          ENTER
    56 00005384 C8000000            <1>  enter 0, 0
    57 00005388 4883E4F0            <1>  and rsp, ~15
  6701 0000538C 48837D1801                      cmp COUNT, 1
  6702 00005391 0F85AF0C0000                    jne L_error_arg_count_1
  6703 00005397 488B4520                        mov rax, PARAM(0)
  6704                                          assert_vector(rax)
    65 0000539B 803822              <1>  cmp byte [%1], %2
    66 0000539E 0F85A70D0000        <1>  jne L_error_incorrect_type
  6705 000053A4 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  6706 000053A8 E80D0C0000                      call make_integer
  6707                                          LEAVE
    61 000053AD C9                  <1>  leave
  6708 000053AE C21800                          ret AND_KILL_FRAME(1)
  6709                                  
  6710                                  L_code_ptr_real_to_integer:
  6711                                          ENTER
    56 000053B1 C8000000            <1>  enter 0, 0
    57 000053B5 4883E4F0            <1>  and rsp, ~15
  6712 000053B9 48837D1801                      cmp COUNT, 1
  6713 000053BE 0F85820C0000                    jne L_error_arg_count_1
  6714 000053C4 488B5D20                        mov rbx, PARAM(0)
  6715                                          assert_real(rbx)
    65 000053C8 803B12              <1>  cmp byte [%1], %2
    66 000053CB 0F857A0D0000        <1>  jne L_error_incorrect_type
  6716 000053D1 F20F104301                      movsd xmm0, qword [rbx + 1]
  6717 000053D6 F2480F2CF8                      cvttsd2si rdi, xmm0
  6718 000053DB E8DA0B0000                      call make_integer
  6719                                          LEAVE
    61 000053E0 C9                  <1>  leave
  6720 000053E1 C21800                          ret AND_KILL_FRAME(1)
  6721                                  
  6722                                  L_code_ptr_exit:
  6723                                          ENTER
    56 000053E4 C8000000            <1>  enter 0, 0
    57 000053E8 4883E4F0            <1>  and rsp, ~15
  6724 000053EC 48837D1800                      cmp COUNT, 0
  6725 000053F1 0F851A0C0000                    jne L_error_arg_count_0
  6726 000053F7 B800000000                      mov rax, 0
  6727 000053FC E8(00000000)                    call exit
  6728                                  
  6729                                  L_code_ptr_integer_to_real:
  6730                                          ENTER
    56 00005401 C8000000            <1>  enter 0, 0
    57 00005405 4883E4F0            <1>  and rsp, ~15
  6731 00005409 48837D1801                      cmp COUNT, 1
  6732 0000540E 0F85320C0000                    jne L_error_arg_count_1
  6733 00005414 488B4520                        mov rax, PARAM(0)
  6734                                          assert_integer(rax)
    70                              <1>  assert_rational(%1)
    65 00005418 803811              <2>  cmp byte [%1], %2
    66 0000541B 0F852A0D0000        <2>  jne L_error_incorrect_type
    71 00005421 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00005426 0F851F0D0000        <1>  jne L_error_incorrect_type
  6735 0000542C FF7001                          push qword [rax + 1]
  6736 0000542F F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  6737 00005435 E8640B0000                      call make_real
  6738                                          LEAVE
    61 0000543A C9                  <1>  leave
  6739 0000543B C21800                          ret AND_KILL_FRAME(1)
  6740                                  
  6741                                  L_code_ptr_rational_to_real:
  6742                                          ENTER
    56 0000543E C8000000            <1>  enter 0, 0
    57 00005442 4883E4F0            <1>  and rsp, ~15
  6743 00005446 48837D1801                      cmp COUNT, 1
  6744 0000544B 0F85F50B0000                    jne L_error_arg_count_1
  6745 00005451 488B4520                        mov rax, PARAM(0)
  6746                                          assert_rational(rax)
    65 00005455 803811              <1>  cmp byte [%1], %2
    66 00005458 0F85ED0C0000        <1>  jne L_error_incorrect_type
  6747 0000545E FF7001                          push qword [rax + 1]
  6748 00005461 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  6749 00005467 FF7009                          push qword [rax + 1 + 8]
  6750 0000546A F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  6751 00005470 F20F5EC1                        divsd xmm0, xmm1
  6752 00005474 E8250B0000                      call make_real
  6753                                          LEAVE
    61 00005479 C9                  <1>  leave
  6754 0000547A C21800                          ret AND_KILL_FRAME(1)
  6755                                  
  6756                                  L_code_ptr_char_to_integer:
  6757                                          ENTER
    56 0000547D C8000000            <1>  enter 0, 0
    57 00005481 4883E4F0            <1>  and rsp, ~15
  6758 00005485 48837D1801                      cmp COUNT, 1
  6759 0000548A 0F85B60B0000                    jne L_error_arg_count_1
  6760 00005490 488B4520                        mov rax, PARAM(0)
  6761                                          assert_char(rax)
    65 00005494 803802              <1>  cmp byte [%1], %2
    66 00005497 0F85AE0C0000        <1>  jne L_error_incorrect_type
  6762 0000549D 8A4001                          mov al, byte [rax + 1]
  6763 000054A0 4825FF000000                    and rax, 255
  6764 000054A6 4889C7                          mov rdi, rax
  6765 000054A9 E80C0B0000                      call make_integer
  6766                                          LEAVE
    61 000054AE C9                  <1>  leave
  6767 000054AF C21800                          ret AND_KILL_FRAME(1)
  6768                                  
  6769                                  L_code_ptr_integer_to_char:
  6770                                          ENTER
    56 000054B2 C8000000            <1>  enter 0, 0
    57 000054B6 4883E4F0            <1>  and rsp, ~15
  6771 000054BA 48837D1801                      cmp COUNT, 1
  6772 000054BF 0F85810B0000                    jne L_error_arg_count_1
  6773 000054C5 488B4520                        mov rax, PARAM(0)
  6774                                          assert_integer(rax)
    70                              <1>  assert_rational(%1)
    65 000054C9 803811              <2>  cmp byte [%1], %2
    66 000054CC 0F85790C0000        <2>  jne L_error_incorrect_type
    71 000054D2 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    72 000054D7 0F856E0C0000        <1>  jne L_error_incorrect_type
  6775 000054DD 488B5801                        mov rbx, qword [rax + 1]
  6776 000054E1 4883FB00                        cmp rbx, 0
  6777 000054E5 0F8EF50A0000                    jle L_error_integer_range
  6778 000054EB 4881FB00010000                  cmp rbx, 256
  6779 000054F2 0F8DE80A0000                    jge L_error_integer_range
  6780 000054F8 BF02000000                      mov rdi, (1 + 1)
  6781 000054FD E8C9F3FFFF                      call malloc
  6782 00005502 C60002                          mov byte [rax], T_char
  6783 00005505 885801                          mov byte [rax + 1], bl
  6784                                          LEAVE
    61 00005508 C9                  <1>  leave
  6785 00005509 C21800                          ret AND_KILL_FRAME(1)
  6786                                  
  6787                                  L_code_ptr_trng:
  6788                                          ENTER
    56 0000550C C8000000            <1>  enter 0, 0
    57 00005510 4883E4F0            <1>  and rsp, ~15
  6789 00005514 48837D1800                      cmp COUNT, 0
  6790 00005519 0F85F20A0000                    jne L_error_arg_count_0
  6791 0000551F 480FC7F7                        rdrand rdi
  6792 00005523 48D1EF                          shr rdi, 1
  6793 00005526 E88F0A0000                      call make_integer
  6794                                          LEAVE
    61 0000552B C9                  <1>  leave
  6795 0000552C C21000                          ret AND_KILL_FRAME(0)
  6796                                  
  6797                                  L_code_ptr_is_zero:
  6798                                          ENTER
    56 0000552F C8000000            <1>  enter 0, 0
    57 00005533 4883E4F0            <1>  and rsp, ~15
  6799 00005537 48837D1801                      cmp COUNT, 1
  6800 0000553C 0F85040B0000                    jne L_error_arg_count_1
  6801 00005542 488B4520                        mov rax, PARAM(0)
  6802 00005546 803811                          cmp byte [rax], T_rational
  6803 00005549 740A                            je .L_rational
  6804 0000554B 803812                          cmp byte [rax], T_real
  6805 0000554E 740E                            je .L_real
  6806 00005550 E9F60B0000                      jmp L_error_incorrect_type
  6807                                  .L_rational:
  6808 00005555 4883780100                      cmp qword [rax + 1], 0
  6809 0000555A 7420                            je .L_zero
  6810 0000555C EB12                            jmp .L_not_zero
  6811                                  .L_real:
  6812 0000555E 660FEFC0                        pxor xmm0, xmm0
  6813 00005562 FF7001                          push qword [rax + 1]
  6814 00005565 F20F100C24                      movsd xmm1, qword [rsp]
  6815 0000556A 660F2EC1                        ucomisd xmm0, xmm1
  6816 0000556E 740C                            je .L_zero
  6817                                  .L_not_zero:
  6818 00005570 48B8-                           mov rax, sob_boolean_false
  6818 00005572 [0200000000000000] 
  6819 0000557A EB0A                            jmp .L_end
  6820                                  .L_zero:
  6821 0000557C 48B8-                           mov rax, sob_boolean_true
  6821 0000557E [0300000000000000] 
  6822                                  .L_end:
  6823                                          LEAVE
    61 00005586 C9                  <1>  leave
  6824 00005587 C21800                          ret AND_KILL_FRAME(1)
  6825                                  
  6826                                  L_code_ptr_is_integer:
  6827                                          ENTER
    56 0000558A C8000000            <1>  enter 0, 0
    57 0000558E 4883E4F0            <1>  and rsp, ~15
  6828 00005592 48837D1801                      cmp COUNT, 1
  6829 00005597 0F85A90A0000                    jne L_error_arg_count_1
  6830 0000559D 488B4520                        mov rax, PARAM(0)
  6831 000055A1 803811                          cmp byte [rax], T_rational
  6832 000055A4 7513                            jne .L_false
  6833 000055A6 4883780901                      cmp qword [rax + 1 + 8], 1
  6834 000055AB 750C                            jne .L_false
  6835 000055AD 48B8-                           mov rax, sob_boolean_true
  6835 000055AF [0300000000000000] 
  6836 000055B7 EB0A                            jmp .L_exit
  6837                                  .L_false:
  6838 000055B9 48B8-                           mov rax, sob_boolean_false
  6838 000055BB [0200000000000000] 
  6839                                  .L_exit:
  6840                                          LEAVE
    61 000055C3 C9                  <1>  leave
  6841 000055C4 C21800                          ret AND_KILL_FRAME(1)
  6842                                  
  6843                                  L_code_ptr_raw_bin_add_rr:
  6844                                          ENTER
    56 000055C7 C8000000            <1>  enter 0, 0
    57 000055CB 4883E4F0            <1>  and rsp, ~15
  6845 000055CF 48837D1802                      cmp COUNT, 2
  6846 000055D4 0F85A10A0000                    jne L_error_arg_count_2
  6847 000055DA 488B5D20                        mov rbx, PARAM(0)
  6848                                          assert_real(rbx)
    65 000055DE 803B12              <1>  cmp byte [%1], %2
    66 000055E1 0F85640B0000        <1>  jne L_error_incorrect_type
  6849 000055E7 488B4D28                        mov rcx, PARAM(1)
  6850                                          assert_real(rcx)
    65 000055EB 803912              <1>  cmp byte [%1], %2
    66 000055EE 0F85570B0000        <1>  jne L_error_incorrect_type
  6851 000055F4 F20F104301                      movsd xmm0, qword [rbx + 1]
  6852 000055F9 F20F104901                      movsd xmm1, qword [rcx + 1]
  6853 000055FE F20F58C1                        addsd xmm0, xmm1
  6854 00005602 E897090000                      call make_real
  6855                                          LEAVE
    61 00005607 C9                  <1>  leave
  6856 00005608 C22000                          ret AND_KILL_FRAME(2)
  6857                                  
  6858                                  L_code_ptr_raw_bin_sub_rr:
  6859                                          ENTER
    56 0000560B C8000000            <1>  enter 0, 0
    57 0000560F 4883E4F0            <1>  and rsp, ~15
  6860 00005613 48837D1802                      cmp COUNT, 2
  6861 00005618 0F855D0A0000                    jne L_error_arg_count_2
  6862 0000561E 488B5D20                        mov rbx, PARAM(0)
  6863                                          assert_real(rbx)
    65 00005622 803B12              <1>  cmp byte [%1], %2
    66 00005625 0F85200B0000        <1>  jne L_error_incorrect_type
  6864 0000562B 488B4D28                        mov rcx, PARAM(1)
  6865                                          assert_real(rcx)
    65 0000562F 803912              <1>  cmp byte [%1], %2
    66 00005632 0F85130B0000        <1>  jne L_error_incorrect_type
  6866 00005638 F20F104301                      movsd xmm0, qword [rbx + 1]
  6867 0000563D F20F104901                      movsd xmm1, qword [rcx + 1]
  6868 00005642 F20F5CC1                        subsd xmm0, xmm1
  6869 00005646 E853090000                      call make_real
  6870                                          LEAVE
    61 0000564B C9                  <1>  leave
  6871 0000564C C22000                          ret AND_KILL_FRAME(2)
  6872                                  
  6873                                  L_code_ptr_raw_bin_mul_rr:
  6874                                          ENTER
    56 0000564F C8000000            <1>  enter 0, 0
    57 00005653 4883E4F0            <1>  and rsp, ~15
  6875 00005657 48837D1802                      cmp COUNT, 2
  6876 0000565C 0F85190A0000                    jne L_error_arg_count_2
  6877 00005662 488B5D20                        mov rbx, PARAM(0)
  6878                                          assert_real(rbx)
    65 00005666 803B12              <1>  cmp byte [%1], %2
    66 00005669 0F85DC0A0000        <1>  jne L_error_incorrect_type
  6879 0000566F 488B4D28                        mov rcx, PARAM(1)
  6880                                          assert_real(rcx)
    65 00005673 803912              <1>  cmp byte [%1], %2
    66 00005676 0F85CF0A0000        <1>  jne L_error_incorrect_type
  6881 0000567C F20F104301                      movsd xmm0, qword [rbx + 1]
  6882 00005681 F20F104901                      movsd xmm1, qword [rcx + 1]
  6883 00005686 F20F59C1                        mulsd xmm0, xmm1
  6884 0000568A E80F090000                      call make_real
  6885                                          LEAVE
    61 0000568F C9                  <1>  leave
  6886 00005690 C22000                          ret AND_KILL_FRAME(2)
  6887                                  
  6888                                  L_code_ptr_raw_bin_div_rr:
  6889                                          ENTER
    56 00005693 C8000000            <1>  enter 0, 0
    57 00005697 4883E4F0            <1>  and rsp, ~15
  6890 0000569B 48837D1802                      cmp COUNT, 2
  6891 000056A0 0F85D5090000                    jne L_error_arg_count_2
  6892 000056A6 488B5D20                        mov rbx, PARAM(0)
  6893                                          assert_real(rbx)
    65 000056AA 803B12              <1>  cmp byte [%1], %2
    66 000056AD 0F85980A0000        <1>  jne L_error_incorrect_type
  6894 000056B3 488B4D28                        mov rcx, PARAM(1)
  6895                                          assert_real(rcx)
    65 000056B7 803912              <1>  cmp byte [%1], %2
    66 000056BA 0F858B0A0000        <1>  jne L_error_incorrect_type
  6896 000056C0 F20F104301                      movsd xmm0, qword [rbx + 1]
  6897 000056C5 F20F104901                      movsd xmm1, qword [rcx + 1]
  6898 000056CA 660FEFD2                        pxor xmm2, xmm2
  6899 000056CE 660F2ECA                        ucomisd xmm1, xmm2
  6900 000056D2 0F84A40A0000                    je L_error_division_by_zero
  6901 000056D8 F20F5EC1                        divsd xmm0, xmm1
  6902 000056DC E8BD080000                      call make_real
  6903                                          LEAVE
    61 000056E1 C9                  <1>  leave
  6904 000056E2 C22000                          ret AND_KILL_FRAME(2)
  6905                                  
  6906                                  L_code_ptr_raw_bin_add_qq:
  6907                                          ENTER
    56 000056E5 C8000000            <1>  enter 0, 0
    57 000056E9 4883E4F0            <1>  and rsp, ~15
  6908 000056ED 48837D1802                      cmp COUNT, 2
  6909 000056F2 0F8583090000                    jne L_error_arg_count_2
  6910 000056F8 4C8B4520                        mov r8, PARAM(0)
  6911                                          assert_rational(r8)
    65 000056FC 41803811            <1>  cmp byte [%1], %2
    66 00005700 0F85450A0000        <1>  jne L_error_incorrect_type
  6912 00005706 4C8B4D28                        mov r9, PARAM(1)
  6913                                          assert_rational(r9)
    65 0000570A 41803911            <1>  cmp byte [%1], %2
    66 0000570E 0F85370A0000        <1>  jne L_error_incorrect_type
  6914 00005714 498B4001                        mov rax, qword [r8 + 1] ; num1
  6915 00005718 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  6916 0000571C 4899                            cqo
  6917 0000571E 48F7EB                          imul rbx
  6918 00005721 4889C6                          mov rsi, rax
  6919 00005724 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6920 00005728 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  6921 0000572C 4899                            cqo
  6922 0000572E 48F7EB                          imul rbx
  6923 00005731 4801C6                          add rsi, rax
  6924 00005734 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6925 00005738 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  6926 0000573C 4899                            cqo
  6927 0000573E 48F7EB                          imul rbx
  6928 00005741 4889C7                          mov rdi, rax
  6929 00005744 E827010000                      call normalize_rational
  6930                                          LEAVE
    61 00005749 C9                  <1>  leave
  6931 0000574A C22000                          ret AND_KILL_FRAME(2)
  6932                                  
  6933                                  L_code_ptr_raw_bin_sub_qq:
  6934                                          ENTER
    56 0000574D C8000000            <1>  enter 0, 0
    57 00005751 4883E4F0            <1>  and rsp, ~15
  6935 00005755 48837D1802                      cmp COUNT, 2
  6936 0000575A 0F851B090000                    jne L_error_arg_count_2
  6937 00005760 4C8B4520                        mov r8, PARAM(0)
  6938                                          assert_rational(r8)
    65 00005764 41803811            <1>  cmp byte [%1], %2
    66 00005768 0F85DD090000        <1>  jne L_error_incorrect_type
  6939 0000576E 4C8B4D28                        mov r9, PARAM(1)
  6940                                          assert_rational(r9)
    65 00005772 41803911            <1>  cmp byte [%1], %2
    66 00005776 0F85CF090000        <1>  jne L_error_incorrect_type
  6941 0000577C 498B4001                        mov rax, qword [r8 + 1] ; num1
  6942 00005780 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  6943 00005784 4899                            cqo
  6944 00005786 48F7EB                          imul rbx
  6945 00005789 4889C6                          mov rsi, rax
  6946 0000578C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6947 00005790 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  6948 00005794 4899                            cqo
  6949 00005796 48F7EB                          imul rbx
  6950 00005799 4829C6                          sub rsi, rax
  6951 0000579C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6952 000057A0 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  6953 000057A4 4899                            cqo
  6954 000057A6 48F7EB                          imul rbx
  6955 000057A9 4889C7                          mov rdi, rax
  6956 000057AC E8BF000000                      call normalize_rational
  6957                                          LEAVE
    61 000057B1 C9                  <1>  leave
  6958 000057B2 C22000                          ret AND_KILL_FRAME(2)
  6959                                  
  6960                                  L_code_ptr_raw_bin_mul_qq:
  6961                                          ENTER
    56 000057B5 C8000000            <1>  enter 0, 0
    57 000057B9 4883E4F0            <1>  and rsp, ~15
  6962 000057BD 48837D1802                      cmp COUNT, 2
  6963 000057C2 0F85B3080000                    jne L_error_arg_count_2
  6964 000057C8 4C8B4520                        mov r8, PARAM(0)
  6965                                          assert_rational(r8)
    65 000057CC 41803811            <1>  cmp byte [%1], %2
    66 000057D0 0F8575090000        <1>  jne L_error_incorrect_type
  6966 000057D6 4C8B4D28                        mov r9, PARAM(1)
  6967                                          assert_rational(r9)
    65 000057DA 41803911            <1>  cmp byte [%1], %2
    66 000057DE 0F8567090000        <1>  jne L_error_incorrect_type
  6968 000057E4 498B4001                        mov rax, qword [r8 + 1] ; num1
  6969 000057E8 498B5901                        mov rbx, qword [r9 + 1] ; num2
  6970 000057EC 4899                            cqo
  6971 000057EE 48F7EB                          imul rbx
  6972 000057F1 4889C6                          mov rsi, rax
  6973 000057F4 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6974 000057F8 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  6975 000057FC 4899                            cqo
  6976 000057FE 48F7EB                          imul rbx
  6977 00005801 4889C7                          mov rdi, rax
  6978 00005804 E867000000                      call normalize_rational
  6979                                          LEAVE
    61 00005809 C9                  <1>  leave
  6980 0000580A C22000                          ret AND_KILL_FRAME(2)
  6981                                          
  6982                                  L_code_ptr_raw_bin_div_qq:
  6983                                          ENTER
    56 0000580D C8000000            <1>  enter 0, 0
    57 00005811 4883E4F0            <1>  and rsp, ~15
  6984 00005815 48837D1802                      cmp COUNT, 2
  6985 0000581A 0F855B080000                    jne L_error_arg_count_2
  6986 00005820 4C8B4520                        mov r8, PARAM(0)
  6987                                          assert_rational(r8)
    65 00005824 41803811            <1>  cmp byte [%1], %2
    66 00005828 0F851D090000        <1>  jne L_error_incorrect_type
  6988 0000582E 4C8B4D28                        mov r9, PARAM(1)
  6989                                          assert_rational(r9)
    65 00005832 41803911            <1>  cmp byte [%1], %2
    66 00005836 0F850F090000        <1>  jne L_error_incorrect_type
  6990 0000583C 4983790100                      cmp qword [r9 + 1], 0
  6991 00005841 0F8435090000                    je L_error_division_by_zero
  6992 00005847 498B4001                        mov rax, qword [r8 + 1] ; num1
  6993 0000584B 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  6994 0000584F 4899                            cqo
  6995 00005851 48F7EB                          imul rbx
  6996 00005854 4889C6                          mov rsi, rax
  6997 00005857 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6998 0000585B 498B5901                        mov rbx, qword [r9 + 1] ; num2
  6999 0000585F 4899                            cqo
  7000 00005861 48F7EB                          imul rbx
  7001 00005864 4889C7                          mov rdi, rax
  7002 00005867 E804000000                      call normalize_rational
  7003                                          LEAVE
    61 0000586C C9                  <1>  leave
  7004 0000586D C22000                          ret AND_KILL_FRAME(2)
  7005                                          
  7006                                  normalize_rational:
  7007 00005870 56                              push rsi
  7008 00005871 57                              push rdi
  7009 00005872 E839000000                      call gcd
  7010 00005877 4889C3                          mov rbx, rax
  7011 0000587A 58                              pop rax
  7012 0000587B 4899                            cqo
  7013 0000587D 48F7FB                          idiv rbx
  7014 00005880 4989C0                          mov r8, rax
  7015 00005883 58                              pop rax
  7016 00005884 4899                            cqo
  7017 00005886 48F7FB                          idiv rbx
  7018 00005889 4989C1                          mov r9, rax
  7019 0000588C BF11000000                      mov rdi, (1 + 8 + 8)
  7020 00005891 E835F0FFFF                      call malloc
  7021 00005896 C60011                          mov byte [rax], T_rational
  7022 00005899 4C894801                        mov qword [rax + 1], r9
  7023 0000589D 4C894009                        mov qword [rax + 1 + 8], r8
  7024 000058A1 C3                              ret
  7025                                  
  7026                                  iabs:
  7027 000058A2 4889F8                          mov rax, rdi
  7028 000058A5 4883F800                        cmp rax, 0
  7029 000058A9 7C01                            jl .Lneg
  7030 000058AB C3                              ret
  7031                                  .Lneg:
  7032 000058AC 48F7D8                          neg rax
  7033 000058AF C3                              ret
  7034                                  
  7035                                  gcd:
  7036 000058B0 E8EDFFFFFF                      call iabs
  7037 000058B5 4889C3                          mov rbx, rax
  7038 000058B8 4889F7                          mov rdi, rsi
  7039 000058BB E8E2FFFFFF                      call iabs
  7040 000058C0 4883F800                        cmp rax, 0
  7041 000058C4 7502                            jne .L0
  7042 000058C6 4893                            xchg rax, rbx
  7043                                  .L0:
  7044 000058C8 4883FB00                        cmp rbx, 0
  7045 000058CC 740C                            je .L1
  7046 000058CE 4899                            cqo
  7047 000058D0 48F7F3                          div rbx
  7048 000058D3 4889D0                          mov rax, rdx
  7049 000058D6 4893                            xchg rax, rbx
  7050 000058D8 EBEE                            jmp .L0
  7051                                  .L1:
  7052 000058DA C3                              ret
  7053                                  
  7054                                  L_code_ptr_error:
  7055                                          ENTER
    56 000058DB C8000000            <1>  enter 0, 0
    57 000058DF 4883E4F0            <1>  and rsp, ~15
  7056 000058E3 48837D1802                      cmp COUNT, 2
  7057 000058E8 0F858D070000                    jne L_error_arg_count_2
  7058 000058EE 488B7520                        mov rsi, PARAM(0)
  7059                                          assert_symbol(rsi)
    65 000058F2 803E04              <1>  cmp byte [%1], %2
    66 000058F5 0F8550080000        <1>  jne L_error_incorrect_type
  7060 000058FB 488B7528                        mov rsi, PARAM(1)
  7061                                          assert_string(rsi)
    65 000058FF 803E03              <1>  cmp byte [%1], %2
    66 00005902 0F8543080000        <1>  jne L_error_incorrect_type
  7062 00005908 48BF-                           mov rdi, fmt_scheme_error_part_1
  7062 0000590A [8A04000000000000] 
  7063 00005912 B800000000                      mov rax, 0
  7064                                  	ENTER
    56 00005917 C8000000            <1>  enter 0, 0
    57 0000591B 4883E4F0            <1>  and rsp, ~15
  7065 0000591F E8(00000000)                    call printf
  7066                                  	LEAVE
    61 00005924 C9                  <1>  leave
  7067 00005925 488B7D20                        mov rdi, PARAM(0)
  7068 00005929 E8B8EFFFFF                      call print_sexpr
  7069 0000592E 48BF-                           mov rdi, fmt_scheme_error_part_2
  7069 00005930 [9E04000000000000] 
  7070 00005938 B800000000                      mov rax, 0
  7071                                  	ENTER
    56 0000593D C8000000            <1>  enter 0, 0
    57 00005941 4883E4F0            <1>  and rsp, ~15
  7072 00005945 E8(00000000)                    call printf
  7073                                  	LEAVE
    61 0000594A C9                  <1>  leave
  7074 0000594B 488B4528                        mov rax, PARAM(1)       ; sob_string
  7075 0000594F BE01000000                      mov rsi, 1              ; size = 1 byte
  7076 00005954 488B5001                        mov rdx, qword [rax + 1] ; length
  7077 00005958 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  7078 0000595C 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  7079 00005964 E8(00000000)                    call fwrite
  7080 00005969 48BF-                           mov rdi, fmt_scheme_error_part_3
  7080 0000596B [E004000000000000] 
  7081 00005973 B800000000                      mov rax, 0
  7082                                  	ENTER
    56 00005978 C8000000            <1>  enter 0, 0
    57 0000597C 4883E4F0            <1>  and rsp, ~15
  7083 00005980 E8(00000000)                    call printf
  7084                                  	LEAVE
    61 00005985 C9                  <1>  leave
  7085 00005986 48C7C0F7FFFFFF                  mov rax, -9
  7086 0000598D E8(00000000)                    call exit
  7087                                  
  7088                                  L_code_ptr_raw_less_than_rr:
  7089                                          ENTER
    56 00005992 C8000000            <1>  enter 0, 0
    57 00005996 4883E4F0            <1>  and rsp, ~15
  7090 0000599A 48837D1802                      cmp COUNT, 2
  7091 0000599F 0F85D6060000                    jne L_error_arg_count_2
  7092 000059A5 488B7520                        mov rsi, PARAM(0)
  7093                                          assert_real(rsi)
    65 000059A9 803E12              <1>  cmp byte [%1], %2
    66 000059AC 0F8599070000        <1>  jne L_error_incorrect_type
  7094 000059B2 488B7D28                        mov rdi, PARAM(1)
  7095                                          assert_real(rdi)
    65 000059B6 803F12              <1>  cmp byte [%1], %2
    66 000059B9 0F858C070000        <1>  jne L_error_incorrect_type
  7096 000059BF F20F104601                      movsd xmm0, qword [rsi + 1]
  7097 000059C4 F20F104F01                      movsd xmm1, qword [rdi + 1]
  7098 000059C9 660F2FC1                        comisd xmm0, xmm1
  7099 000059CD 730C                            jae .L_false
  7100 000059CF 48B8-                           mov rax, sob_boolean_true
  7100 000059D1 [0300000000000000] 
  7101 000059D9 EB0A                            jmp .L_exit
  7102                                  .L_false:
  7103 000059DB 48B8-                           mov rax, sob_boolean_false
  7103 000059DD [0200000000000000] 
  7104                                  .L_exit:
  7105                                          LEAVE
    61 000059E5 C9                  <1>  leave
  7106 000059E6 C22000                          ret AND_KILL_FRAME(2)
  7107                                          
  7108                                  L_code_ptr_raw_less_than_qq:
  7109                                          ENTER
    56 000059E9 C8000000            <1>  enter 0, 0
    57 000059ED 4883E4F0            <1>  and rsp, ~15
  7110 000059F1 48837D1802                      cmp COUNT, 2
  7111 000059F6 0F857F060000                    jne L_error_arg_count_2
  7112 000059FC 488B7520                        mov rsi, PARAM(0)
  7113                                          assert_rational(rsi)
    65 00005A00 803E11              <1>  cmp byte [%1], %2
    66 00005A03 0F8542070000        <1>  jne L_error_incorrect_type
  7114 00005A09 488B7D28                        mov rdi, PARAM(1)
  7115                                          assert_rational(rdi)
    65 00005A0D 803F11              <1>  cmp byte [%1], %2
    66 00005A10 0F8535070000        <1>  jne L_error_incorrect_type
  7116 00005A16 488B4601                        mov rax, qword [rsi + 1] ; num1
  7117 00005A1A 4899                            cqo
  7118 00005A1C 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  7119 00005A20 4889C1                          mov rcx, rax
  7120 00005A23 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  7121 00005A27 4899                            cqo
  7122 00005A29 48F76F01                        imul qword [rdi + 1]          ; num2
  7123 00005A2D 4829C1                          sub rcx, rax
  7124 00005A30 7D0C                            jge .L_false
  7125 00005A32 48B8-                           mov rax, sob_boolean_true
  7125 00005A34 [0300000000000000] 
  7126 00005A3C EB0A                            jmp .L_exit
  7127                                  .L_false:
  7128 00005A3E 48B8-                           mov rax, sob_boolean_false
  7128 00005A40 [0200000000000000] 
  7129                                  .L_exit:
  7130                                          LEAVE
    61 00005A48 C9                  <1>  leave
  7131 00005A49 C22000                          ret AND_KILL_FRAME(2)
  7132                                  
  7133                                  L_code_ptr_raw_equal_rr:
  7134                                          ENTER
    56 00005A4C C8000000            <1>  enter 0, 0
    57 00005A50 4883E4F0            <1>  and rsp, ~15
  7135 00005A54 48837D1802                      cmp COUNT, 2
  7136 00005A59 0F851C060000                    jne L_error_arg_count_2
  7137 00005A5F 488B7520                        mov rsi, PARAM(0)
  7138                                          assert_real(rsi)
    65 00005A63 803E12              <1>  cmp byte [%1], %2
    66 00005A66 0F85DF060000        <1>  jne L_error_incorrect_type
  7139 00005A6C 488B7D28                        mov rdi, PARAM(1)
  7140                                          assert_real(rdi)
    65 00005A70 803F12              <1>  cmp byte [%1], %2
    66 00005A73 0F85D2060000        <1>  jne L_error_incorrect_type
  7141 00005A79 F20F104601                      movsd xmm0, qword [rsi + 1]
  7142 00005A7E F20F104F01                      movsd xmm1, qword [rdi + 1]
  7143 00005A83 660F2FC1                        comisd xmm0, xmm1
  7144 00005A87 750C                            jne .L_false
  7145 00005A89 48B8-                           mov rax, sob_boolean_true
  7145 00005A8B [0300000000000000] 
  7146 00005A93 EB0A                            jmp .L_exit
  7147                                  .L_false:
  7148 00005A95 48B8-                           mov rax, sob_boolean_false
  7148 00005A97 [0200000000000000] 
  7149                                  .L_exit:
  7150                                          LEAVE
    61 00005A9F C9                  <1>  leave
  7151 00005AA0 C22000                          ret AND_KILL_FRAME(2)
  7152                                          
  7153                                  L_code_ptr_raw_equal_qq:
  7154                                          ENTER
    56 00005AA3 C8000000            <1>  enter 0, 0
    57 00005AA7 4883E4F0            <1>  and rsp, ~15
  7155 00005AAB 48837D1802                      cmp COUNT, 2
  7156 00005AB0 0F85C5050000                    jne L_error_arg_count_2
  7157 00005AB6 488B7520                        mov rsi, PARAM(0)
  7158                                          assert_rational(rsi)
    65 00005ABA 803E11              <1>  cmp byte [%1], %2
    66 00005ABD 0F8588060000        <1>  jne L_error_incorrect_type
  7159 00005AC3 488B7D28                        mov rdi, PARAM(1)
  7160                                          assert_rational(rdi)
    65 00005AC7 803F11              <1>  cmp byte [%1], %2
    66 00005ACA 0F857B060000        <1>  jne L_error_incorrect_type
  7161 00005AD0 488B4601                        mov rax, qword [rsi + 1] ; num1
  7162 00005AD4 4899                            cqo
  7163 00005AD6 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  7164 00005ADA 4889C1                          mov rcx, rax
  7165 00005ADD 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  7166 00005AE1 4899                            cqo
  7167 00005AE3 48F76F01                        imul qword [rdi + 1]          ; num2
  7168 00005AE7 4829C1                          sub rcx, rax
  7169 00005AEA 750C                            jne .L_false
  7170 00005AEC 48B8-                           mov rax, sob_boolean_true
  7170 00005AEE [0300000000000000] 
  7171 00005AF6 EB0A                            jmp .L_exit
  7172                                  .L_false:
  7173 00005AF8 48B8-                           mov rax, sob_boolean_false
  7173 00005AFA [0200000000000000] 
  7174                                  .L_exit:
  7175                                          LEAVE
    61 00005B02 C9                  <1>  leave
  7176 00005B03 C22000                          ret AND_KILL_FRAME(2)
  7177                                  
  7178                                  L_code_ptr_quotient:
  7179                                          ENTER
    56 00005B06 C8000000            <1>  enter 0, 0
    57 00005B0A 4883E4F0            <1>  and rsp, ~15
  7180 00005B0E 48837D1802                      cmp COUNT, 2
  7181 00005B13 0F8562050000                    jne L_error_arg_count_2
  7182 00005B19 488B7520                        mov rsi, PARAM(0)
  7183                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00005B1D 803E11              <2>  cmp byte [%1], %2
    66 00005B20 0F8525060000        <2>  jne L_error_incorrect_type
    71 00005B26 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00005B2B 0F851A060000        <1>  jne L_error_incorrect_type
  7184 00005B31 488B7D28                        mov rdi, PARAM(1)
  7185                                          assert_integer(rdi)
    70                              <1>  assert_rational(%1)
    65 00005B35 803F11              <2>  cmp byte [%1], %2
    66 00005B38 0F850D060000        <2>  jne L_error_incorrect_type
    71 00005B3E 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00005B43 0F8502060000        <1>  jne L_error_incorrect_type
  7186 00005B49 488B4601                        mov rax, qword [rsi + 1]
  7187 00005B4D 488B5F01                        mov rbx, qword [rdi + 1]
  7188 00005B51 4883FB00                        cmp rbx, 0
  7189 00005B55 0F8421060000                    je L_error_division_by_zero
  7190 00005B5B 4899                            cqo
  7191 00005B5D 48F7FB                          idiv rbx
  7192 00005B60 4889C7                          mov rdi, rax
  7193 00005B63 E852040000                      call make_integer
  7194                                          LEAVE
    61 00005B68 C9                  <1>  leave
  7195 00005B69 C22000                          ret AND_KILL_FRAME(2)
  7196                                          
  7197                                  L_code_ptr_remainder:
  7198                                          ENTER
    56 00005B6C C8000000            <1>  enter 0, 0
    57 00005B70 4883E4F0            <1>  and rsp, ~15
  7199 00005B74 48837D1802                      cmp COUNT, 2
  7200 00005B79 0F85FC040000                    jne L_error_arg_count_2
  7201 00005B7F 488B7520                        mov rsi, PARAM(0)
  7202                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00005B83 803E11              <2>  cmp byte [%1], %2
    66 00005B86 0F85BF050000        <2>  jne L_error_incorrect_type
    71 00005B8C 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00005B91 0F85B4050000        <1>  jne L_error_incorrect_type
  7203 00005B97 488B7D28                        mov rdi, PARAM(1)
  7204                                          assert_integer(rdi)
    70                              <1>  assert_rational(%1)
    65 00005B9B 803F11              <2>  cmp byte [%1], %2
    66 00005B9E 0F85A7050000        <2>  jne L_error_incorrect_type
    71 00005BA4 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00005BA9 0F859C050000        <1>  jne L_error_incorrect_type
  7205 00005BAF 488B4601                        mov rax, qword [rsi + 1]
  7206 00005BB3 488B5F01                        mov rbx, qword [rdi + 1]
  7207 00005BB7 4883FB00                        cmp rbx, 0
  7208 00005BBB 0F84BB050000                    je L_error_division_by_zero
  7209 00005BC1 4899                            cqo
  7210 00005BC3 48F7FB                          idiv rbx
  7211 00005BC6 4889D7                          mov rdi, rdx
  7212 00005BC9 E8EC030000                      call make_integer
  7213                                          LEAVE
    61 00005BCE C9                  <1>  leave
  7214 00005BCF C22000                          ret AND_KILL_FRAME(2)
  7215                                  
  7216                                  L_code_ptr_set_car:
  7217                                          ENTER
    56 00005BD2 C8000000            <1>  enter 0, 0
    57 00005BD6 4883E4F0            <1>  and rsp, ~15
  7218 00005BDA 48837D1802                      cmp COUNT, 2
  7219 00005BDF 0F8596040000                    jne L_error_arg_count_2
  7220 00005BE5 488B4520                        mov rax, PARAM(0)
  7221                                          assert_pair(rax)
    65 00005BE9 803821              <1>  cmp byte [%1], %2
    66 00005BEC 0F8559050000        <1>  jne L_error_incorrect_type
  7222 00005BF2 488B5D28                        mov rbx, PARAM(1)
  7223 00005BF6 48895801                        mov SOB_PAIR_CAR(rax), rbx
  7224 00005BFA 48B8-                           mov rax, sob_void
  7224 00005BFC [0000000000000000] 
  7225                                          LEAVE
    61 00005C04 C9                  <1>  leave
  7226 00005C05 C22000                          ret AND_KILL_FRAME(2)
  7227                                  
  7228                                  L_code_ptr_set_cdr:
  7229                                          ENTER
    56 00005C08 C8000000            <1>  enter 0, 0
    57 00005C0C 4883E4F0            <1>  and rsp, ~15
  7230 00005C10 48837D1802                      cmp COUNT, 2
  7231 00005C15 0F8560040000                    jne L_error_arg_count_2
  7232 00005C1B 488B4520                        mov rax, PARAM(0)
  7233                                          assert_pair(rax)
    65 00005C1F 803821              <1>  cmp byte [%1], %2
    66 00005C22 0F8523050000        <1>  jne L_error_incorrect_type
  7234 00005C28 488B5D28                        mov rbx, PARAM(1)
  7235 00005C2C 48895809                        mov SOB_PAIR_CDR(rax), rbx
  7236 00005C30 48B8-                           mov rax, sob_void
  7236 00005C32 [0000000000000000] 
  7237                                          LEAVE
    61 00005C3A C9                  <1>  leave
  7238 00005C3B C22000                          ret AND_KILL_FRAME(2)
  7239                                  
  7240                                  L_code_ptr_string_ref:
  7241                                          ENTER
    56 00005C3E C8000000            <1>  enter 0, 0
    57 00005C42 4883E4F0            <1>  and rsp, ~15
  7242 00005C46 48837D1802                      cmp COUNT, 2
  7243 00005C4B 0F852A040000                    jne L_error_arg_count_2
  7244 00005C51 488B7D20                        mov rdi, PARAM(0)
  7245                                          assert_string(rdi)
    65 00005C55 803F03              <1>  cmp byte [%1], %2
    66 00005C58 0F85ED040000        <1>  jne L_error_incorrect_type
  7246 00005C5E 488B7528                        mov rsi, PARAM(1)
  7247                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00005C62 803E11              <2>  cmp byte [%1], %2
    66 00005C65 0F85E0040000        <2>  jne L_error_incorrect_type
    71 00005C6B 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00005C70 0F85D5040000        <1>  jne L_error_incorrect_type
  7248 00005C76 488B5701                        mov rdx, qword [rdi + 1]
  7249 00005C7A 488B4E01                        mov rcx, qword [rsi + 1]
  7250 00005C7E 4839D1                          cmp rcx, rdx
  7251 00005C81 0F8D59030000                    jge L_error_integer_range
  7252 00005C87 4883F900                        cmp rcx, 0
  7253 00005C8B 0F8C4F030000                    jl L_error_integer_range
  7254 00005C91 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  7255 00005C95 BF02000000                      mov rdi, 2
  7256 00005C9A E82CECFFFF                      call malloc
  7257 00005C9F C60002                          mov byte [rax], T_char
  7258 00005CA2 885801                          mov byte [rax + 1], bl
  7259                                          LEAVE
    61 00005CA5 C9                  <1>  leave
  7260 00005CA6 C22000                          ret AND_KILL_FRAME(2)
  7261                                  
  7262                                  L_code_ptr_vector_ref:
  7263                                          ENTER
    56 00005CA9 C8000000            <1>  enter 0, 0
    57 00005CAD 4883E4F0            <1>  and rsp, ~15
  7264 00005CB1 48837D1802                      cmp COUNT, 2
  7265 00005CB6 0F85BF030000                    jne L_error_arg_count_2
  7266 00005CBC 488B7D20                        mov rdi, PARAM(0)
  7267                                          assert_vector(rdi)
    65 00005CC0 803F22              <1>  cmp byte [%1], %2
    66 00005CC3 0F8582040000        <1>  jne L_error_incorrect_type
  7268 00005CC9 488B7528                        mov rsi, PARAM(1)
  7269                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00005CCD 803E11              <2>  cmp byte [%1], %2
    66 00005CD0 0F8575040000        <2>  jne L_error_incorrect_type
    71 00005CD6 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00005CDB 0F856A040000        <1>  jne L_error_incorrect_type
  7270 00005CE1 488B5701                        mov rdx, qword [rdi + 1]
  7271 00005CE5 488B4E01                        mov rcx, qword [rsi + 1]
  7272 00005CE9 4839D1                          cmp rcx, rdx
  7273 00005CEC 0F8DEE020000                    jge L_error_integer_range
  7274 00005CF2 4883F900                        cmp rcx, 0
  7275 00005CF6 0F8CE4020000                    jl L_error_integer_range
  7276 00005CFC 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  7277                                          LEAVE
    61 00005D01 C9                  <1>  leave
  7278 00005D02 C22000                          ret AND_KILL_FRAME(2)
  7279                                  
  7280                                  L_code_ptr_vector_set:
  7281                                          ENTER
    56 00005D05 C8000000            <1>  enter 0, 0
    57 00005D09 4883E4F0            <1>  and rsp, ~15
  7282 00005D0D 48837D1803                      cmp COUNT, 3
  7283 00005D12 0F85CD030000                    jne L_error_arg_count_3
  7284 00005D18 488B7D20                        mov rdi, PARAM(0)
  7285                                          assert_vector(rdi)
    65 00005D1C 803F22              <1>  cmp byte [%1], %2
    66 00005D1F 0F8526040000        <1>  jne L_error_incorrect_type
  7286 00005D25 488B7528                        mov rsi, PARAM(1)
  7287                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00005D29 803E11              <2>  cmp byte [%1], %2
    66 00005D2C 0F8519040000        <2>  jne L_error_incorrect_type
    71 00005D32 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00005D37 0F850E040000        <1>  jne L_error_incorrect_type
  7288 00005D3D 488B5701                        mov rdx, qword [rdi + 1]
  7289 00005D41 488B4E01                        mov rcx, qword [rsi + 1]
  7290 00005D45 4839D1                          cmp rcx, rdx
  7291 00005D48 0F8D92020000                    jge L_error_integer_range
  7292 00005D4E 4883F900                        cmp rcx, 0
  7293 00005D52 0F8C88020000                    jl L_error_integer_range
  7294 00005D58 488B4530                        mov rax, PARAM(2)
  7295 00005D5C 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  7296 00005D61 48B8-                           mov rax, sob_void
  7296 00005D63 [0000000000000000] 
  7297                                          LEAVE
    61 00005D6B C9                  <1>  leave
  7298 00005D6C C22800                          ret AND_KILL_FRAME(3)
  7299                                  
  7300                                  L_code_ptr_string_set:
  7301                                          ENTER
    56 00005D6F C8000000            <1>  enter 0, 0
    57 00005D73 4883E4F0            <1>  and rsp, ~15
  7302 00005D77 48837D1803                      cmp COUNT, 3
  7303 00005D7C 0F8563030000                    jne L_error_arg_count_3
  7304 00005D82 488B7D20                        mov rdi, PARAM(0)
  7305                                          assert_string(rdi)
    65 00005D86 803F03              <1>  cmp byte [%1], %2
    66 00005D89 0F85BC030000        <1>  jne L_error_incorrect_type
  7306 00005D8F 488B7528                        mov rsi, PARAM(1)
  7307                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00005D93 803E11              <2>  cmp byte [%1], %2
    66 00005D96 0F85AF030000        <2>  jne L_error_incorrect_type
    71 00005D9C 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00005DA1 0F85A4030000        <1>  jne L_error_incorrect_type
  7308 00005DA7 488B5701                        mov rdx, qword [rdi + 1]
  7309 00005DAB 488B4E01                        mov rcx, qword [rsi + 1]
  7310 00005DAF 4839D1                          cmp rcx, rdx
  7311 00005DB2 0F8D28020000                    jge L_error_integer_range
  7312 00005DB8 4883F900                        cmp rcx, 0
  7313 00005DBC 0F8C1E020000                    jl L_error_integer_range
  7314 00005DC2 488B4530                        mov rax, PARAM(2)
  7315                                          assert_char(rax)
    65 00005DC6 803802              <1>  cmp byte [%1], %2
    66 00005DC9 0F857C030000        <1>  jne L_error_incorrect_type
  7316 00005DCF 8A4001                          mov al, byte [rax + 1]
  7317 00005DD2 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  7318 00005DD6 48B8-                           mov rax, sob_void
  7318 00005DD8 [0000000000000000] 
  7319                                          LEAVE
    61 00005DE0 C9                  <1>  leave
  7320 00005DE1 C22800                          ret AND_KILL_FRAME(3)
  7321                                  
  7322                                  L_code_ptr_make_vector:
  7323                                          ENTER
    56 00005DE4 C8000000            <1>  enter 0, 0
    57 00005DE8 4883E4F0            <1>  and rsp, ~15
  7324 00005DEC 48837D1802                      cmp COUNT, 2
  7325 00005DF1 0F8584020000                    jne L_error_arg_count_2
  7326 00005DF7 488B4D20                        mov rcx, PARAM(0)
  7327                                          assert_integer(rcx)
    70                              <1>  assert_rational(%1)
    65 00005DFB 803911              <2>  cmp byte [%1], %2
    66 00005DFE 0F8547030000        <2>  jne L_error_incorrect_type
    71 00005E04 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00005E09 0F853C030000        <1>  jne L_error_incorrect_type
  7328 00005E0F 488B4901                        mov rcx, qword [rcx + 1]
  7329 00005E13 4883F900                        cmp rcx, 0
  7330 00005E17 0F8CC3010000                    jl L_error_integer_range
  7331 00005E1D 488B5528                        mov rdx, PARAM(1)
  7332 00005E21 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  7333 00005E29 E89DEAFFFF                      call malloc
  7334 00005E2E C60022                          mov byte [rax], T_vector
  7335 00005E31 48894801                        mov qword [rax + 1], rcx
  7336 00005E35 41B800000000                    mov r8, 0
  7337                                  .L0:
  7338 00005E3B 4939C8                          cmp r8, rcx
  7339 00005E3E 740A                            je .L1
  7340 00005E40 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  7341 00005E45 49FFC0                          inc r8
  7342 00005E48 EBF1                            jmp .L0
  7343                                  .L1:
  7344                                          LEAVE
    61 00005E4A C9                  <1>  leave
  7345 00005E4B C22000                          ret AND_KILL_FRAME(2)
  7346                                          
  7347                                  L_code_ptr_make_string:
  7348                                          ENTER
    56 00005E4E C8000000            <1>  enter 0, 0
    57 00005E52 4883E4F0            <1>  and rsp, ~15
  7349 00005E56 48837D1802                      cmp COUNT, 2
  7350 00005E5B 0F851A020000                    jne L_error_arg_count_2
  7351 00005E61 488B4D20                        mov rcx, PARAM(0)
  7352                                          assert_integer(rcx)
    70                              <1>  assert_rational(%1)
    65 00005E65 803911              <2>  cmp byte [%1], %2
    66 00005E68 0F85DD020000        <2>  jne L_error_incorrect_type
    71 00005E6E 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00005E73 0F85D2020000        <1>  jne L_error_incorrect_type
  7353 00005E79 488B4901                        mov rcx, qword [rcx + 1]
  7354 00005E7D 4883F900                        cmp rcx, 0
  7355 00005E81 0F8C59010000                    jl L_error_integer_range
  7356 00005E87 488B5528                        mov rdx, PARAM(1)
  7357                                          assert_char(rdx)
    65 00005E8B 803A02              <1>  cmp byte [%1], %2
    66 00005E8E 0F85B7020000        <1>  jne L_error_incorrect_type
  7358 00005E94 8A5201                          mov dl, byte [rdx + 1]
  7359 00005E97 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  7360 00005E9B E82BEAFFFF                      call malloc
  7361 00005EA0 C60003                          mov byte [rax], T_string
  7362 00005EA3 48894801                        mov qword [rax + 1], rcx
  7363 00005EA7 41B800000000                    mov r8, 0
  7364                                  .L0:
  7365 00005EAD 4939C8                          cmp r8, rcx
  7366 00005EB0 740A                            je .L1
  7367 00005EB2 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  7368 00005EB7 49FFC0                          inc r8
  7369 00005EBA EBF1                            jmp .L0
  7370                                  .L1:
  7371                                          LEAVE
    61 00005EBC C9                  <1>  leave
  7372 00005EBD C22000                          ret AND_KILL_FRAME(2)
  7373                                  
  7374                                  L_code_ptr_numerator:
  7375                                          ENTER
    56 00005EC0 C8000000            <1>  enter 0, 0
    57 00005EC4 4883E4F0            <1>  and rsp, ~15
  7376 00005EC8 48837D1801                      cmp COUNT, 1
  7377 00005ECD 0F8573010000                    jne L_error_arg_count_1
  7378 00005ED3 488B4520                        mov rax, PARAM(0)
  7379                                          assert_rational(rax)
    65 00005ED7 803811              <1>  cmp byte [%1], %2
    66 00005EDA 0F856B020000        <1>  jne L_error_incorrect_type
  7380 00005EE0 488B7801                        mov rdi, qword [rax + 1]
  7381 00005EE4 E8D1000000                      call make_integer
  7382                                          LEAVE
    61 00005EE9 C9                  <1>  leave
  7383 00005EEA C21800                          ret AND_KILL_FRAME(1)
  7384                                          
  7385                                  L_code_ptr_denominator:
  7386                                          ENTER
    56 00005EED C8000000            <1>  enter 0, 0
    57 00005EF1 4883E4F0            <1>  and rsp, ~15
  7387 00005EF5 48837D1801                      cmp COUNT, 1
  7388 00005EFA 0F8546010000                    jne L_error_arg_count_1
  7389 00005F00 488B4520                        mov rax, PARAM(0)
  7390                                          assert_rational(rax)
    65 00005F04 803811              <1>  cmp byte [%1], %2
    66 00005F07 0F853E020000        <1>  jne L_error_incorrect_type
  7391 00005F0D 488B7809                        mov rdi, qword [rax + 1 + 8]
  7392 00005F11 E8A4000000                      call make_integer
  7393                                          LEAVE
    61 00005F16 C9                  <1>  leave
  7394 00005F17 C21800                          ret AND_KILL_FRAME(1)
  7395                                  
  7396                                  L_code_ptr_eq:
  7397                                  	ENTER
    56 00005F1A C8000000            <1>  enter 0, 0
    57 00005F1E 4883E4F0            <1>  and rsp, ~15
  7398 00005F22 48837D1802              	cmp COUNT, 2
  7399 00005F27 0F854E010000            	jne L_error_arg_count_2
  7400 00005F2D 488B7D20                	mov rdi, PARAM(0)
  7401 00005F31 488B7528                	mov rsi, PARAM(1)
  7402 00005F35 4839F7                  	cmp rdi, rsi
  7403 00005F38 744A                    	je .L_eq_true
  7404 00005F3A 8A17                    	mov dl, byte [rdi]
  7405 00005F3C 3A16                    	cmp dl, byte [rsi]
  7406 00005F3E 7550                    	jne .L_eq_false
  7407 00005F40 80FA02                  	cmp dl, T_char
  7408 00005F43 7437                    	je .L_char
  7409 00005F45 80FA04                  	cmp dl, T_symbol
  7410 00005F48 742A                    	je .L_symbol
  7411 00005F4A 80FA12                  	cmp dl, T_real
  7412 00005F4D 741D                    	je .L_real
  7413 00005F4F 80FA11                  	cmp dl, T_rational
  7414 00005F52 7402                    	je .L_rational
  7415 00005F54 EB3A                    	jmp .L_eq_false
  7416                                  .L_rational:
  7417 00005F56 488B4601                	mov rax, qword [rsi + 1]
  7418 00005F5A 483B4701                	cmp rax, qword [rdi + 1]
  7419 00005F5E 7530                    	jne .L_eq_false
  7420 00005F60 488B4609                	mov rax, qword [rsi + 1 + 8]
  7421 00005F64 483B4709                	cmp rax, qword [rdi + 1 + 8]
  7422 00005F68 7526                    	jne .L_eq_false
  7423 00005F6A EB18                    	jmp .L_eq_true
  7424                                  .L_real:
  7425 00005F6C 488B4601                	mov rax, qword [rsi + 1]
  7426 00005F70 483B4701                	cmp rax, qword [rdi + 1]
  7427                                  .L_symbol:
  7428                                  	; never reached, because symbols are static!
  7429                                  	; but I'm keeping it in case, I'll ever change
  7430                                  	; the implementation
  7431 00005F74 488B4601                	mov rax, qword [rsi + 1]
  7432 00005F78 483B4701                	cmp rax, qword [rdi + 1]
  7433                                  .L_char:
  7434 00005F7C 8A5E01                  	mov bl, byte [rsi + 1]
  7435 00005F7F 3A5F01                  	cmp bl, byte [rdi + 1]
  7436 00005F82 750C                    	jne .L_eq_false
  7437                                  .L_eq_true:
  7438 00005F84 48B8-                   	mov rax, sob_boolean_true
  7438 00005F86 [0300000000000000] 
  7439 00005F8E EB0A                    	jmp .L_eq_exit
  7440                                  .L_eq_false:
  7441 00005F90 48B8-                   	mov rax, sob_boolean_false
  7441 00005F92 [0200000000000000] 
  7442                                  .L_eq_exit:
  7443                                  	LEAVE
    61 00005F9A C9                  <1>  leave
  7444 00005F9B C22000                  	ret AND_KILL_FRAME(2)
  7445                                  
  7446                                  make_real:
  7447                                          ENTER
    56 00005F9E C8000000            <1>  enter 0, 0
    57 00005FA2 4883E4F0            <1>  and rsp, ~15
  7448 00005FA6 BF09000000                      mov rdi, (1 + 8)
  7449 00005FAB E81BE9FFFF                      call malloc
  7450 00005FB0 C60012                          mov byte [rax], T_real
  7451 00005FB3 F20F114001                      movsd qword [rax + 1], xmm0
  7452                                          LEAVE
    61 00005FB8 C9                  <1>  leave
  7453 00005FB9 C3                              ret
  7454                                          
  7455                                  make_integer:
  7456                                          ENTER
    56 00005FBA C8000000            <1>  enter 0, 0
    57 00005FBE 4883E4F0            <1>  and rsp, ~15
  7457 00005FC2 4889FE                          mov rsi, rdi
  7458 00005FC5 BF11000000                      mov rdi, (1 + 8 + 8)
  7459 00005FCA E8FCE8FFFF                      call malloc
  7460 00005FCF C60011                          mov byte [rax], T_rational
  7461 00005FD2 48897001                        mov qword [rax + 1], rsi
  7462 00005FD6 48C7400901000000                mov qword [rax + 1 + 8], 1
  7463                                          LEAVE
    61 00005FDE C9                  <1>  leave
  7464 00005FDF C3                              ret
  7465                                          
  7466                                  L_error_integer_range:
  7467 00005FE0 488B3C25[00000000]              mov rdi, qword [stderr]
  7468 00005FE8 48BE-                           mov rsi, fmt_integer_range
  7468 00005FEA [5704000000000000] 
  7469 00005FF2 B800000000                      mov rax, 0
  7470                                  	ENTER
    56 00005FF7 C8000000            <1>  enter 0, 0
    57 00005FFB 4883E4F0            <1>  and rsp, ~15
  7471 00005FFF E8(00000000)                    call fprintf
  7472                                  	LEAVE
    61 00006004 C9                  <1>  leave
  7473 00006005 48C7C0FBFFFFFF                  mov rax, -5
  7474 0000600C E8(00000000)                    call exit
  7475                                  
  7476                                  L_error_arg_count_0:
  7477 00006011 488B3C25[00000000]              mov rdi, qword [stderr]
  7478 00006019 48BE-                           mov rsi, fmt_arg_count_0
  7478 0000601B [1D03000000000000] 
  7479 00006023 488B5518                        mov rdx, COUNT
  7480 00006027 B800000000                      mov rax, 0
  7481                                  	ENTER
    56 0000602C C8000000            <1>  enter 0, 0
    57 00006030 4883E4F0            <1>  and rsp, ~15
  7482 00006034 E8(00000000)                    call fprintf
  7483                                  	LEAVE
    61 00006039 C9                  <1>  leave
  7484 0000603A 48C7C0FDFFFFFF                  mov rax, -3
  7485 00006041 E8(00000000)                    call exit
  7486                                  
  7487                                  L_error_arg_count_1:
  7488 00006046 488B3C25[00000000]              mov rdi, qword [stderr]
  7489 0000604E 48BE-                           mov rsi, fmt_arg_count_1
  7489 00006050 [4503000000000000] 
  7490 00006058 488B5518                        mov rdx, COUNT
  7491 0000605C B800000000                      mov rax, 0
  7492                                  	ENTER
    56 00006061 C8000000            <1>  enter 0, 0
    57 00006065 4883E4F0            <1>  and rsp, ~15
  7493 00006069 E8(00000000)                    call fprintf
  7494                                  	LEAVE
    61 0000606E C9                  <1>  leave
  7495 0000606F 48C7C0FDFFFFFF                  mov rax, -3
  7496 00006076 E8(00000000)                    call exit
  7497                                  
  7498                                  L_error_arg_count_2:
  7499 0000607B 488B3C25[00000000]              mov rdi, qword [stderr]
  7500 00006083 48BE-                           mov rsi, fmt_arg_count_2
  7500 00006085 [AB03000000000000] 
  7501 0000608D 488B5518                        mov rdx, COUNT
  7502 00006091 B800000000                      mov rax, 0
  7503                                  	ENTER
    56 00006096 C8000000            <1>  enter 0, 0
    57 0000609A 4883E4F0            <1>  and rsp, ~15
  7504 0000609E E8(00000000)                    call fprintf
  7505                                  	LEAVE
    61 000060A3 C9                  <1>  leave
  7506 000060A4 48C7C0FDFFFFFF                  mov rax, -3
  7507 000060AB E8(00000000)                    call exit
  7508                                  
  7509                                  L_error_arg_count_12:
  7510 000060B0 488B3C25[00000000]              mov rdi, qword [stderr]
  7511 000060B8 48BE-                           mov rsi, fmt_arg_count_12
  7511 000060BA [6B03000000000000] 
  7512 000060C2 488B5518                        mov rdx, COUNT
  7513 000060C6 B800000000                      mov rax, 0
  7514                                  	ENTER
    56 000060CB C8000000            <1>  enter 0, 0
    57 000060CF 4883E4F0            <1>  and rsp, ~15
  7515 000060D3 E8(00000000)                    call fprintf
  7516                                  	LEAVE
    61 000060D8 C9                  <1>  leave
  7517 000060D9 48C7C0FDFFFFFF                  mov rax, -3
  7518 000060E0 E8(00000000)                    call exit
  7519                                  
  7520                                  L_error_arg_count_3:
  7521 000060E5 488B3C25[00000000]              mov rdi, qword [stderr]
  7522 000060ED 48BE-                           mov rsi, fmt_arg_count_3
  7522 000060EF [D203000000000000] 
  7523 000060F7 488B5518                        mov rdx, COUNT
  7524 000060FB B800000000                      mov rax, 0
  7525                                  	ENTER
    56 00006100 C8000000            <1>  enter 0, 0
    57 00006104 4883E4F0            <1>  and rsp, ~15
  7526 00006108 E8(00000000)                    call fprintf
  7527                                  	LEAVE
    61 0000610D C9                  <1>  leave
  7528 0000610E 48C7C0FDFFFFFF                  mov rax, -3
  7529 00006115 E8(00000000)                    call exit
  7530                                  
  7531                                  L_error_arg_apply_no_list:
  7532 0000611A 488B3C25[00000000]              mov rdi, qword [stderr]
  7533 00006122 48BE-                           mov rsi, fmt_arg_apply_no_list
  7533 00006124 [FB03000000000000] 
  7534 0000612C B800000000                      mov rax, 0
  7535                                  	ENTER
    56 00006131 C8000000            <1>  enter 0, 0
    57 00006135 4883E4F0            <1>  and rsp, ~15
  7536 00006139 E8(00000000)                    call fprintf
  7537                                  	LEAVE
    61 0000613E C9                  <1>  leave
  7538 0000613F 48C7C0FCFFFFFF                  mov rax, -4
  7539 00006146 E8(00000000)                    call exit  
  7540                                  
  7541                                  L_error_incorrect_type:
  7542 0000614B 488B3C25[00000000]              mov rdi, qword [stderr]
  7543 00006153 48BE-                           mov rsi, fmt_type
  7543 00006155 [3304000000000000] 
  7544 0000615D B800000000                      mov rax, 0
  7545                                  	ENTER
    56 00006162 C8000000            <1>  enter 0, 0
    57 00006166 4883E4F0            <1>  and rsp, ~15
  7546 0000616A E8(00000000)                    call fprintf
  7547                                  	LEAVE
    61 0000616F C9                  <1>  leave
  7548 00006170 48C7C0FCFFFFFF                  mov rax, -4
  7549 00006177 E8(00000000)                    call exit
  7550                                  
  7551                                  L_error_division_by_zero:
  7552 0000617C 488B3C25[00000000]              mov rdi, qword [stderr]
  7553 00006184 48BE-                           mov rsi, fmt_division_by_zero
  7553 00006186 [7404000000000000] 
  7554 0000618E B800000000                      mov rax, 0
  7555                                  	ENTER
    56 00006193 C8000000            <1>  enter 0, 0
    57 00006197 4883E4F0            <1>  and rsp, ~15
  7556 0000619B E8(00000000)                    call fprintf
  7557                                  	LEAVE
    61 000061A0 C9                  <1>  leave
  7558 000061A1 48C7C0F8FFFFFF                  mov rax, -8
  7559 000061A8 E8(00000000)                    call exit
  7560                                  
  7561                                  section .data
  7562                                  fmt_char:
  7563 0000031A 256300                          db `%c\0`
  7564                                  fmt_arg_count_0:
  7565 0000031D 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  7565 00000326 74696E67207A65726F-
  7565 0000032F 20617267756D656E74-
  7565 00000338 732E20466F756E6420-
  7565 00000341 25640A00           
  7566                                  fmt_arg_count_1:
  7567 00000345 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  7567 0000034E 74696E67206F6E6520-
  7567 00000357 617267756D656E742E-
  7567 00000360 20466F756E64202564-
  7567 00000369 0A00               
  7568                                  fmt_arg_count_12:
  7569 0000036B 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  7569 00000374 74696E67206F6E6520-
  7569 0000037D 726571756972656420-
  7569 00000386 616E64206F6E65206F-
  7569 0000038F 7074696F6E616C2061-
  7569 00000398 7267756D656E742E20-
  7569 000003A1 466F756E642025640A-
  7569 000003AA 00                 
  7570                                  fmt_arg_count_2:
  7571 000003AB 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  7571 000003B4 74696E672074776F20-
  7571 000003BD 617267756D656E7473-
  7571 000003C6 2E20466F756E642025-
  7571 000003CF 640A00             
  7572                                  fmt_arg_count_3:
  7573 000003D2 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  7573 000003DB 74696E672074687265-
  7573 000003E4 6520617267756D656E-
  7573 000003ED 74732E20466F756E64-
  7573 000003F6 2025640A00         
  7574                                  fmt_arg_apply_no_list:
  7575 000003FB 21212120546865206C-             db `!!! The last argument in apply should be a proper list\n\0`
  7575 00000404 61737420617267756D-
  7575 0000040D 656E7420696E206170-
  7575 00000416 706C792073686F756C-
  7575 0000041F 642062652061207072-
  7575 00000428 6F706572206C697374-
  7575 00000431 0A00               
  7576                                  fmt_type:
  7577 00000433 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  7577 0000043C 696F6E207061737365-
  7577 00000445 6420696E636F727265-
  7577 0000044E 637420747970650A00 
  7578                                  fmt_integer_range:
  7579 00000457 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  7579 00000460 7265637420696E7465-
  7579 00000469 6765722072616E6765-
  7579 00000472 0A00               
  7580                                  fmt_division_by_zero:
  7581 00000474 212121204469766973-             db `!!! Division by zero\n\0`
  7581 0000047D 696F6E206279207A65-
  7581 00000486 726F0A00           
  7582                                  fmt_scheme_error_part_1:
  7583 0000048A 0A2121212054686520-             db `\n!!! The procedure \0`
  7583 00000493 70726F636564757265-
  7583 0000049C 2000               
  7584                                  fmt_scheme_error_part_2:
  7585 0000049E 2061736B656420746F-             db ` asked to terminate the program\n`
  7585 000004A7 207465726D696E6174-
  7585 000004B0 65207468652070726F-
  7585 000004B9 6772616D0A         
  7586 000004BE 202020207769746820-             db `    with the following message:\n\n\0`
  7586 000004C7 74686520666F6C6C6F-
  7586 000004D0 77696E67206D657373-
  7586 000004D9 6167653A0A0A00     
  7587                                  fmt_scheme_error_part_3:
  7588 000004E0 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  7588 000004E9 210A0A00           
