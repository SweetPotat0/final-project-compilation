     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %macro PRINT_TEST 2
    18                                          push rax
    19                                          push rbx
    20                                          push rcx
    21                                          push rdx
    22                                          push rdi
    23                                          push rsi
    24                                          mov rdi, qword [stderr]
    25                                          mov rsi, fmt_test
    26                                          mov rdx, %1
    27                                          mov rcx, %2
    28                                          mov rax, 0
    29                                          ENTER
    30                                          call fprintf
    31                                          LEAVE
    32                                          pop rsi
    33                                          pop rdi
    34                                          pop rdx
    35                                          pop rcx
    36                                          pop rbx
    37                                          pop rax
    38                                  %endmacro
    39                                  
    40                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    41                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    42                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    43                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    44                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    45                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    46                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    47                                  
    48                                  %define OLD_RDP 			qword [rbp]
    49                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    50                                  %define ENV 				qword [rbp + 8 * 2]
    51                                  %define COUNT 				qword [rbp + 8 * 3]
    52                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    53                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    54                                  
    55                                  %macro ENTER 0
    56                                  	enter 0, 0
    57                                  	and rsp, ~15
    58                                  %endmacro
    59                                  
    60                                  %macro LEAVE 0
    61                                  	leave
    62                                  %endmacro
    63                                  
    64                                  %macro assert_type 2
    65                                          cmp byte [%1], %2
    66                                          jne L_error_incorrect_type
    67                                  %endmacro
    68                                  
    69                                  %macro assert_type_integer 1
    70                                          assert_rational(%1)
    71                                          cmp qword [%1 + 1 + 8], 1
    72                                          jne L_error_incorrect_type
    73                                  %endmacro
    74                                  
    75                                  %define assert_void(reg)		assert_type reg, T_void
    76                                  %define assert_nil(reg)			assert_type reg, T_nil
    77                                  %define assert_char(reg)		assert_type reg, T_char
    78                                  %define assert_string(reg)		assert_type reg, T_string
    79                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    80                                  %define assert_closure(reg)		assert_type reg, T_closure
    81                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    82                                  %define assert_rational(reg)		assert_type reg, T_rational
    83                                  %define assert_integer(reg)		assert_type_integer reg
    84                                  %define assert_real(reg)		assert_type reg, T_real
    85                                  %define assert_pair(reg)		assert_type reg, T_pair
    86                                  %define assert_vector(reg)		assert_type reg, T_vector
    87                                  
    88                                  %define sob_void			(L_constants + 0)
    89                                  %define sob_nil				(L_constants + 1)
    90                                  %define sob_boolean_false		(L_constants + 2)
    91                                  %define sob_boolean_true		(L_constants + 3)
    92                                  %define sob_char_nul			(L_constants + 4)
    93                                  
    94                                  %define bytes(n)			(n)
    95                                  %define kbytes(n) 			(bytes(n) << 10)
    96                                  %define mbytes(n) 			(kbytes(n) << 10)
    97                                  %define gbytes(n) 			(mbytes(n) << 10)
    98                                  
    99                                  section .data
   100                                  L_constants:
   101 00000000 00                      	db T_void
   102 00000001 01                      	db T_nil
   103 00000002 09                      	db T_boolean_false
   104 00000003 0A                      	db T_boolean_true
   105 00000004 0200                    	db T_char, 0x00	; #\x0
   106 00000006 11                      	db T_rational	; 1001
   107 00000007 E90300000000000001-     	dq 1001, 1
   107 00000010 00000000000000     
   108 00000017 11                      	db T_rational	; 1002
   109 00000018 EA0300000000000001-     	dq 1002, 1
   109 00000021 00000000000000     
   110 00000028 11                      	db T_rational	; 1003
   111 00000029 EB0300000000000001-     	dq 1003, 1
   111 00000032 00000000000000     
   112 00000039 11                      	db T_rational	; 1004
   113 0000003A EC0300000000000001-     	dq 1004, 1
   113 00000043 00000000000000     
   114 0000004A 11                      	db T_rational	; 1005
   115 0000004B ED0300000000000001-     	dq 1005, 1
   115 00000054 00000000000000     
   116 0000005B 11                      	db T_rational	; 101
   117 0000005C 650000000000000001-     	dq 101, 1
   117 00000065 00000000000000     
   118 0000006C 11                      	db T_rational	; 102
   119 0000006D 660000000000000001-     	dq 102, 1
   119 00000076 00000000000000     
   120 0000007D 11                      	db T_rational	; 103
   121 0000007E 670000000000000001-     	dq 103, 1
   121 00000087 00000000000000     
   122 0000008E 11                      	db T_rational	; 104
   123 0000008F 680000000000000001-     	dq 104, 1
   123 00000098 00000000000000     
   124 0000009F 11                      	db T_rational	; 105
   125 000000A0 690000000000000001-     	dq 105, 1
   125 000000A9 00000000000000     
   126 000000B0 11                      	db T_rational	; 11
   127 000000B1 0B0000000000000001-     	dq 11, 1
   127 000000BA 00000000000000     
   128 000000C1 11                      	db T_rational	; 12
   129 000000C2 0C0000000000000001-     	dq 12, 1
   129 000000CB 00000000000000     
   130 000000D2 11                      	db T_rational	; 13
   131 000000D3 0D0000000000000001-     	dq 13, 1
   131 000000DC 00000000000000     
   132 000000E3 11                      	db T_rational	; 14
   133 000000E4 0E0000000000000001-     	dq 14, 1
   133 000000ED 00000000000000     
   134 000000F4 11                      	db T_rational	; 15
   135 000000F5 0F0000000000000001-     	dq 15, 1
   135 000000FE 00000000000000     
   136 00000105 11                      	db T_rational	; 1
   137 00000106 010000000000000001-     	dq 1, 1
   137 0000010F 00000000000000     
   138 00000116 11                      	db T_rational	; 2
   139 00000117 020000000000000001-     	dq 2, 1
   139 00000120 00000000000000     
   140 00000127 11                      	db T_rational	; 3
   141 00000128 030000000000000001-     	dq 3, 1
   141 00000131 00000000000000     
   142 00000138 11                      	db T_rational	; 4
   143 00000139 040000000000000001-     	dq 4, 1
   143 00000142 00000000000000     
   144 00000149 11                      	db T_rational	; 5
   145 0000014A 050000000000000001-     	dq 5, 1
   145 00000153 00000000000000     
   146                                  
   147                                  section .bss
   148                                  free_var_0:	; location of null?
   149 00000000 ????????????????        	resq 1
   150                                  free_var_1:	; location of pair?
   151 00000008 ????????????????        	resq 1
   152                                  free_var_2:	; location of void?
   153 00000010 ????????????????        	resq 1
   154                                  free_var_3:	; location of char?
   155 00000018 ????????????????        	resq 1
   156                                  free_var_4:	; location of string?
   157 00000020 ????????????????        	resq 1
   158                                  free_var_5:	; location of symbol?
   159 00000028 ????????????????        	resq 1
   160                                  free_var_6:	; location of vector?
   161 00000030 ????????????????        	resq 1
   162                                  free_var_7:	; location of procedure?
   163 00000038 ????????????????        	resq 1
   164                                  free_var_8:	; location of real?
   165 00000040 ????????????????        	resq 1
   166                                  free_var_9:	; location of rational?
   167 00000048 ????????????????        	resq 1
   168                                  free_var_10:	; location of boolean?
   169 00000050 ????????????????        	resq 1
   170                                  free_var_11:	; location of number?
   171 00000058 ????????????????        	resq 1
   172                                  free_var_12:	; location of collection?
   173 00000060 ????????????????        	resq 1
   174                                  free_var_13:	; location of cons
   175 00000068 ????????????????        	resq 1
   176                                  free_var_14:	; location of display-sexpr
   177 00000070 ????????????????        	resq 1
   178                                  free_var_15:	; location of write-char
   179 00000078 ????????????????        	resq 1
   180                                  free_var_16:	; location of car
   181 00000080 ????????????????        	resq 1
   182                                  free_var_17:	; location of cdr
   183 00000088 ????????????????        	resq 1
   184                                  free_var_18:	; location of string-length
   185 00000090 ????????????????        	resq 1
   186                                  free_var_19:	; location of vector-length
   187 00000098 ????????????????        	resq 1
   188                                  free_var_20:	; location of real->integer
   189 000000A0 ????????????????        	resq 1
   190                                  free_var_21:	; location of exit
   191 000000A8 ????????????????        	resq 1
   192                                  free_var_22:	; location of integer->real
   193 000000B0 ????????????????        	resq 1
   194                                  free_var_23:	; location of rational->real
   195 000000B8 ????????????????        	resq 1
   196                                  free_var_24:	; location of char->integer
   197 000000C0 ????????????????        	resq 1
   198                                  free_var_25:	; location of integer->char
   199 000000C8 ????????????????        	resq 1
   200                                  free_var_26:	; location of trng
   201 000000D0 ????????????????        	resq 1
   202                                  free_var_27:	; location of zero?
   203 000000D8 ????????????????        	resq 1
   204                                  free_var_28:	; location of integer?
   205 000000E0 ????????????????        	resq 1
   206                                  free_var_29:	; location of __bin-apply
   207 000000E8 ????????????????        	resq 1
   208                                  free_var_30:	; location of __bin-add-rr
   209 000000F0 ????????????????        	resq 1
   210                                  free_var_31:	; location of __bin-sub-rr
   211 000000F8 ????????????????        	resq 1
   212                                  free_var_32:	; location of __bin-mul-rr
   213 00000100 ????????????????        	resq 1
   214                                  free_var_33:	; location of __bin-div-rr
   215 00000108 ????????????????        	resq 1
   216                                  free_var_34:	; location of __bin-add-qq
   217 00000110 ????????????????        	resq 1
   218                                  free_var_35:	; location of __bin-sub-qq
   219 00000118 ????????????????        	resq 1
   220                                  free_var_36:	; location of __bin-mul-qq
   221 00000120 ????????????????        	resq 1
   222                                  free_var_37:	; location of __bin-div-qq
   223 00000128 ????????????????        	resq 1
   224                                  free_var_38:	; location of error
   225 00000130 ????????????????        	resq 1
   226                                  free_var_39:	; location of __bin-less-than-rr
   227 00000138 ????????????????        	resq 1
   228                                  free_var_40:	; location of __bin-less-than-qq
   229 00000140 ????????????????        	resq 1
   230                                  free_var_41:	; location of __bin-equal-rr
   231 00000148 ????????????????        	resq 1
   232                                  free_var_42:	; location of __bin-equal-qq
   233 00000150 ????????????????        	resq 1
   234                                  free_var_43:	; location of quotient
   235 00000158 ????????????????        	resq 1
   236                                  free_var_44:	; location of remainder
   237 00000160 ????????????????        	resq 1
   238                                  free_var_45:	; location of set-car!
   239 00000168 ????????????????        	resq 1
   240                                  free_var_46:	; location of set-cdr!
   241 00000170 ????????????????        	resq 1
   242                                  free_var_47:	; location of string-ref
   243 00000178 ????????????????        	resq 1
   244                                  free_var_48:	; location of vector-ref
   245 00000180 ????????????????        	resq 1
   246                                  free_var_49:	; location of vector-set!
   247 00000188 ????????????????        	resq 1
   248                                  free_var_50:	; location of string-set!
   249 00000190 ????????????????        	resq 1
   250                                  free_var_51:	; location of make-vector
   251 00000198 ????????????????        	resq 1
   252                                  free_var_52:	; location of make-string
   253 000001A0 ????????????????        	resq 1
   254                                  free_var_53:	; location of numerator
   255 000001A8 ????????????????        	resq 1
   256                                  free_var_54:	; location of denominator
   257 000001B0 ????????????????        	resq 1
   258                                  free_var_55:	; location of eq?
   259 000001B8 ????????????????        	resq 1
   260                                  free_var_56:	; location of list
   261 000001C0 ????????????????        	resq 1
   262                                  
   263                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   264                                  global main
   265                                  section .text
   266                                  main:
   267 00000000 C8000000                        enter 0, 0
   268                                          
   269                                  	; building closure for null?
   270 00000004 48BF-                   	mov rdi, free_var_0
   270 00000006 [0000000000000000] 
   271 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   271 00000010 [B719000000000000] 
   272 00000018 E872180000              	call bind_primitive
   273                                  
   274                                  	; building closure for pair?
   275 0000001D 48BF-                   	mov rdi, free_var_1
   275 0000001F [0800000000000000] 
   276 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   276 00000029 [ED19000000000000] 
   277 00000031 E859180000              	call bind_primitive
   278                                  
   279                                  	; building closure for void?
   280 00000036 48BF-                   	mov rdi, free_var_2
   280 00000038 [1000000000000000] 
   281 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   281 00000042 [231A000000000000] 
   282 0000004A E840180000              	call bind_primitive
   283                                  
   284                                  	; building closure for char?
   285 0000004F 48BF-                   	mov rdi, free_var_3
   285 00000051 [1800000000000000] 
   286 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   286 0000005B [591A000000000000] 
   287 00000063 E827180000              	call bind_primitive
   288                                  
   289                                  	; building closure for string?
   290 00000068 48BF-                   	mov rdi, free_var_4
   290 0000006A [2000000000000000] 
   291 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   291 00000074 [8F1A000000000000] 
   292 0000007C E80E180000              	call bind_primitive
   293                                  
   294                                  	; building closure for symbol?
   295 00000081 48BF-                   	mov rdi, free_var_5
   295 00000083 [2800000000000000] 
   296 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   296 0000008D [C51A000000000000] 
   297 00000095 E8F5170000              	call bind_primitive
   298                                  
   299                                  	; building closure for vector?
   300 0000009A 48BF-                   	mov rdi, free_var_6
   300 0000009C [3000000000000000] 
   301 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   301 000000A6 [FB1A000000000000] 
   302 000000AE E8DC170000              	call bind_primitive
   303                                  
   304                                  	; building closure for procedure?
   305 000000B3 48BF-                   	mov rdi, free_var_7
   305 000000B5 [3800000000000000] 
   306 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   306 000000BF [311B000000000000] 
   307 000000C7 E8C3170000              	call bind_primitive
   308                                  
   309                                  	; building closure for real?
   310 000000CC 48BF-                   	mov rdi, free_var_8
   310 000000CE [4000000000000000] 
   311 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   311 000000D8 [671B000000000000] 
   312 000000E0 E8AA170000              	call bind_primitive
   313                                  
   314                                  	; building closure for rational?
   315 000000E5 48BF-                   	mov rdi, free_var_9
   315 000000E7 [4800000000000000] 
   316 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   316 000000F1 [9D1B000000000000] 
   317 000000F9 E891170000              	call bind_primitive
   318                                  
   319                                  	; building closure for boolean?
   320 000000FE 48BF-                   	mov rdi, free_var_10
   320 00000100 [5000000000000000] 
   321 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   321 0000010A [D31B000000000000] 
   322 00000112 E878170000              	call bind_primitive
   323                                  
   324                                  	; building closure for number?
   325 00000117 48BF-                   	mov rdi, free_var_11
   325 00000119 [5800000000000000] 
   326 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   326 00000123 [0B1C000000000000] 
   327 0000012B E85F170000              	call bind_primitive
   328                                  
   329                                  	; building closure for collection?
   330 00000130 48BF-                   	mov rdi, free_var_12
   330 00000132 [6000000000000000] 
   331 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   331 0000013C [431C000000000000] 
   332 00000144 E846170000              	call bind_primitive
   333                                  
   334                                  	; building closure for cons
   335 00000149 48BF-                   	mov rdi, free_var_13
   335 0000014B [6800000000000000] 
   336 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   336 00000155 [7B1C000000000000] 
   337 0000015D E82D170000              	call bind_primitive
   338                                  
   339                                  	; building closure for display-sexpr
   340 00000162 48BF-                   	mov rdi, free_var_14
   340 00000164 [7000000000000000] 
   341 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   341 0000016E [AF1C000000000000] 
   342 00000176 E814170000              	call bind_primitive
   343                                  
   344                                  	; building closure for write-char
   345 0000017B 48BF-                   	mov rdi, free_var_15
   345 0000017D [7800000000000000] 
   346 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   346 00000187 [D91C000000000000] 
   347 0000018F E8FB160000              	call bind_primitive
   348                                  
   349                                  	; building closure for car
   350 00000194 48BF-                   	mov rdi, free_var_16
   350 00000196 [8000000000000000] 
   351 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   351 000001A0 [301D000000000000] 
   352 000001A8 E8E2160000              	call bind_primitive
   353                                  
   354                                  	; building closure for cdr
   355 000001AD 48BF-                   	mov rdi, free_var_17
   355 000001AF [8800000000000000] 
   356 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   356 000001B9 [581D000000000000] 
   357 000001C1 E8C9160000              	call bind_primitive
   358                                  
   359                                  	; building closure for string-length
   360 000001C6 48BF-                   	mov rdi, free_var_18
   360 000001C8 [9000000000000000] 
   361 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   361 000001D2 [801D000000000000] 
   362 000001DA E8B0160000              	call bind_primitive
   363                                  
   364                                  	; building closure for vector-length
   365 000001DF 48BF-                   	mov rdi, free_var_19
   365 000001E1 [9800000000000000] 
   366 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   366 000001EB [AD1D000000000000] 
   367 000001F3 E897160000              	call bind_primitive
   368                                  
   369                                  	; building closure for real->integer
   370 000001F8 48BF-                   	mov rdi, free_var_20
   370 000001FA [A000000000000000] 
   371 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   371 00000204 [DA1D000000000000] 
   372 0000020C E87E160000              	call bind_primitive
   373                                  
   374                                  	; building closure for exit
   375 00000211 48BF-                   	mov rdi, free_var_21
   375 00000213 [A800000000000000] 
   376 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   376 0000021D [0D1E000000000000] 
   377 00000225 E865160000              	call bind_primitive
   378                                  
   379                                  	; building closure for integer->real
   380 0000022A 48BF-                   	mov rdi, free_var_22
   380 0000022C [B000000000000000] 
   381 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   381 00000236 [2A1E000000000000] 
   382 0000023E E84C160000              	call bind_primitive
   383                                  
   384                                  	; building closure for rational->real
   385 00000243 48BF-                   	mov rdi, free_var_23
   385 00000245 [B800000000000000] 
   386 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   386 0000024F [671E000000000000] 
   387 00000257 E833160000              	call bind_primitive
   388                                  
   389                                  	; building closure for char->integer
   390 0000025C 48BF-                   	mov rdi, free_var_24
   390 0000025E [C000000000000000] 
   391 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   391 00000268 [A61E000000000000] 
   392 00000270 E81A160000              	call bind_primitive
   393                                  
   394                                  	; building closure for integer->char
   395 00000275 48BF-                   	mov rdi, free_var_25
   395 00000277 [C800000000000000] 
   396 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   396 00000281 [DB1E000000000000] 
   397 00000289 E801160000              	call bind_primitive
   398                                  
   399                                  	; building closure for trng
   400 0000028E 48BF-                   	mov rdi, free_var_26
   400 00000290 [D000000000000000] 
   401 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   401 0000029A [351F000000000000] 
   402 000002A2 E8E8150000              	call bind_primitive
   403                                  
   404                                  	; building closure for zero?
   405 000002A7 48BF-                   	mov rdi, free_var_27
   405 000002A9 [D800000000000000] 
   406 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   406 000002B3 [581F000000000000] 
   407 000002BB E8CF150000              	call bind_primitive
   408                                  
   409                                  	; building closure for integer?
   410 000002C0 48BF-                   	mov rdi, free_var_28
   410 000002C2 [E000000000000000] 
   411 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   411 000002CC [B31F000000000000] 
   412 000002D4 E8B6150000              	call bind_primitive
   413                                  
   414                                  	; building closure for __bin-apply
   415 000002D9 48BF-                   	mov rdi, free_var_29
   415 000002DB [E800000000000000] 
   416 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   416 000002E5 [B718000000000000] 
   417 000002ED E89D150000              	call bind_primitive
   418                                  
   419                                  	; building closure for __bin-add-rr
   420 000002F2 48BF-                   	mov rdi, free_var_30
   420 000002F4 [F000000000000000] 
   421 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   421 000002FE [F01F000000000000] 
   422 00000306 E884150000              	call bind_primitive
   423                                  
   424                                  	; building closure for __bin-sub-rr
   425 0000030B 48BF-                   	mov rdi, free_var_31
   425 0000030D [F800000000000000] 
   426 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   426 00000317 [3420000000000000] 
   427 0000031F E86B150000              	call bind_primitive
   428                                  
   429                                  	; building closure for __bin-mul-rr
   430 00000324 48BF-                   	mov rdi, free_var_32
   430 00000326 [0001000000000000] 
   431 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   431 00000330 [7820000000000000] 
   432 00000338 E852150000              	call bind_primitive
   433                                  
   434                                  	; building closure for __bin-div-rr
   435 0000033D 48BF-                   	mov rdi, free_var_33
   435 0000033F [0801000000000000] 
   436 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   436 00000349 [BC20000000000000] 
   437 00000351 E839150000              	call bind_primitive
   438                                  
   439                                  	; building closure for __bin-add-qq
   440 00000356 48BF-                   	mov rdi, free_var_34
   440 00000358 [1001000000000000] 
   441 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   441 00000362 [0E21000000000000] 
   442 0000036A E820150000              	call bind_primitive
   443                                  
   444                                  	; building closure for __bin-sub-qq
   445 0000036F 48BF-                   	mov rdi, free_var_35
   445 00000371 [1801000000000000] 
   446 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   446 0000037B [7621000000000000] 
   447 00000383 E807150000              	call bind_primitive
   448                                  
   449                                  	; building closure for __bin-mul-qq
   450 00000388 48BF-                   	mov rdi, free_var_36
   450 0000038A [2001000000000000] 
   451 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   451 00000394 [DE21000000000000] 
   452 0000039C E8EE140000              	call bind_primitive
   453                                  
   454                                  	; building closure for __bin-div-qq
   455 000003A1 48BF-                   	mov rdi, free_var_37
   455 000003A3 [2801000000000000] 
   456 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   456 000003AD [3622000000000000] 
   457 000003B5 E8D5140000              	call bind_primitive
   458                                  
   459                                  	; building closure for error
   460 000003BA 48BF-                   	mov rdi, free_var_38
   460 000003BC [3001000000000000] 
   461 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   461 000003C6 [0423000000000000] 
   462 000003CE E8BC140000              	call bind_primitive
   463                                  
   464                                  	; building closure for __bin-less-than-rr
   465 000003D3 48BF-                   	mov rdi, free_var_39
   465 000003D5 [3801000000000000] 
   466 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   466 000003DF [BB23000000000000] 
   467 000003E7 E8A3140000              	call bind_primitive
   468                                  
   469                                  	; building closure for __bin-less-than-qq
   470 000003EC 48BF-                   	mov rdi, free_var_40
   470 000003EE [4001000000000000] 
   471 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   471 000003F8 [1224000000000000] 
   472 00000400 E88A140000              	call bind_primitive
   473                                  
   474                                  	; building closure for __bin-equal-rr
   475 00000405 48BF-                   	mov rdi, free_var_41
   475 00000407 [4801000000000000] 
   476 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   476 00000411 [7524000000000000] 
   477 00000419 E871140000              	call bind_primitive
   478                                  
   479                                  	; building closure for __bin-equal-qq
   480 0000041E 48BF-                   	mov rdi, free_var_42
   480 00000420 [5001000000000000] 
   481 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   481 0000042A [CC24000000000000] 
   482 00000432 E858140000              	call bind_primitive
   483                                  
   484                                  	; building closure for quotient
   485 00000437 48BF-                   	mov rdi, free_var_43
   485 00000439 [5801000000000000] 
   486 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   486 00000443 [2F25000000000000] 
   487 0000044B E83F140000              	call bind_primitive
   488                                  
   489                                  	; building closure for remainder
   490 00000450 48BF-                   	mov rdi, free_var_44
   490 00000452 [6001000000000000] 
   491 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   491 0000045C [9525000000000000] 
   492 00000464 E826140000              	call bind_primitive
   493                                  
   494                                  	; building closure for set-car!
   495 00000469 48BF-                   	mov rdi, free_var_45
   495 0000046B [6801000000000000] 
   496 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   496 00000475 [FB25000000000000] 
   497 0000047D E80D140000              	call bind_primitive
   498                                  
   499                                  	; building closure for set-cdr!
   500 00000482 48BF-                   	mov rdi, free_var_46
   500 00000484 [7001000000000000] 
   501 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   501 0000048E [3126000000000000] 
   502 00000496 E8F4130000              	call bind_primitive
   503                                  
   504                                  	; building closure for string-ref
   505 0000049B 48BF-                   	mov rdi, free_var_47
   505 0000049D [7801000000000000] 
   506 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   506 000004A7 [6726000000000000] 
   507 000004AF E8DB130000              	call bind_primitive
   508                                  
   509                                  	; building closure for vector-ref
   510 000004B4 48BF-                   	mov rdi, free_var_48
   510 000004B6 [8001000000000000] 
   511 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   511 000004C0 [D226000000000000] 
   512 000004C8 E8C2130000              	call bind_primitive
   513                                  
   514                                  	; building closure for vector-set!
   515 000004CD 48BF-                   	mov rdi, free_var_49
   515 000004CF [8801000000000000] 
   516 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   516 000004D9 [2E27000000000000] 
   517 000004E1 E8A9130000              	call bind_primitive
   518                                  
   519                                  	; building closure for string-set!
   520 000004E6 48BF-                   	mov rdi, free_var_50
   520 000004E8 [9001000000000000] 
   521 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   521 000004F2 [9827000000000000] 
   522 000004FA E890130000              	call bind_primitive
   523                                  
   524                                  	; building closure for make-vector
   525 000004FF 48BF-                   	mov rdi, free_var_51
   525 00000501 [9801000000000000] 
   526 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   526 0000050B [0D28000000000000] 
   527 00000513 E877130000              	call bind_primitive
   528                                  
   529                                  	; building closure for make-string
   530 00000518 48BF-                   	mov rdi, free_var_52
   530 0000051A [A001000000000000] 
   531 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   531 00000524 [7728000000000000] 
   532 0000052C E85E130000              	call bind_primitive
   533                                  
   534                                  	; building closure for numerator
   535 00000531 48BF-                   	mov rdi, free_var_53
   535 00000533 [A801000000000000] 
   536 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   536 0000053D [E928000000000000] 
   537 00000545 E845130000              	call bind_primitive
   538                                  
   539                                  	; building closure for denominator
   540 0000054A 48BF-                   	mov rdi, free_var_54
   540 0000054C [B001000000000000] 
   541 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   541 00000556 [1629000000000000] 
   542 0000055E E82C130000              	call bind_primitive
   543                                  
   544                                  	; building closure for eq?
   545 00000563 48BF-                   	mov rdi, free_var_55
   545 00000565 [B801000000000000] 
   546 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   546 0000056F [4329000000000000] 
   547 00000577 E813130000              	call bind_primitive
   548                                  
   549 0000057C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   550 00000581 E8780D0000              	call malloc
   551 00000586 50                      	push rax
   552 00000587 BF00000000              	mov rdi, 8 * 0	; new rib
   553 0000058C E86D0D0000              	call malloc
   554 00000591 50                      	push rax
   555 00000592 BF08000000              	mov rdi, 8 * 1	; extended env
   556 00000597 E8620D0000              	call malloc
   557 0000059C 488B7D10                	mov rdi, ENV
   558 000005A0 BE00000000              	mov rsi, 0
   559 000005A5 BA01000000              	mov rdx, 1
   560                                  .L_lambda_opt_env_loop_004f:	; ext_env[i + 1] <-- env[i]
   561 000005AA 4883FE00                	cmp rsi, 0
   562 000005AE 7410                    	je .L_lambda_opt_env_end_004f
   563 000005B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
   564 000005B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
   565 000005B8 48FFC6                  	inc rsi
   566 000005BB 48FFC2                  	inc rdx
   567 000005BE EBEA                    	jmp .L_lambda_opt_env_loop_004f
   568                                  .L_lambda_opt_env_end_004f:
   569 000005C0 5B                      	pop rbx
   570 000005C1 BE00000000              	mov rsi, 0
   571                                  .L_lambda_opt_params_loop_004f:	; copy params
   572 000005C6 4883FE00                	cmp rsi, 0
   573 000005CA 740E                    	je .L_lambda_opt_params_end_004f
   574 000005CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   575 000005D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
   576 000005D5 48FFC6                  	inc rsi
   577 000005D8 EBEC                    	jmp .L_lambda_opt_params_loop_004f
   578                                  .L_lambda_opt_params_end_004f:
   579 000005DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   580 000005DD 4889C3                  	mov rbx, rax
   581 000005E0 58                      	pop rax
   582 000005E1 C60005                  	mov byte [rax], T_closure
   583 000005E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   584 000005E8 48C74009[F5050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_004f
   585 000005F0 E9FF000000              	jmp .L_lambda_opt_end_004f
   586                                  .L_lambda_opt_code_004f:	; lambda-simple body
   587 000005F5 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
   588 000005FA 4889FB                  	mov rbx, rdi
   589 000005FD 4883EB00                	sub rbx, 0
   590 00000601 7F46                    	jg .L_lambda_opt_arity_check_more_004f
   591                                  .L_lambda_opt_arity_check_exact_004f:	 ; if params in opt is exact
   592 00000603 4883EC08                	sub rsp, 8
   593 00000607 BE00000000              	mov rsi, 0 ; index
   594                                  .L_lambda_opt_stack_enlarge_loop_004f:	 ; stack loop enlarge start
   595 0000060C 4883FE03                	cmp rsi, 3
   596 00000610 7420                    	je .L_lambda_opt_stack_enlarge_loop_exit_004f
   597 00000612 4889F7                  	mov rdi, rsi
   598 00000615 48C1E703                	shl rdi, 3
   599 00000619 4801E7                  	add rdi, rsp
   600 0000061C 4883C708                	add rdi, 8
   601 00000620 4889FB                  	mov rbx, rdi
   602 00000623 4883EB08                	sub rbx, 8
   603 00000627 488B3F                  	mov rdi, [rdi]
   604 0000062A 48893B                  	mov [rbx], rdi
   605 0000062D 48FFC6                  	inc rsi
   606 00000630 EBDA                    	jmp .L_lambda_opt_stack_enlarge_loop_004f
   607                                  .L_lambda_opt_stack_enlarge_loop_exit_004f:	 ; end of stack enlarge loop
   608 00000632 48C7442418-             	mov qword [rsp + 3*8], sob_nil
   608 00000637 [01000000]         
   609 0000063B 48C744241001000000      	mov qword [rsp + 2*8], 1
   610 00000644 E99F000000              	jmp .L_lambda_opt_stack_adjusted_004f
   611                                  .L_lambda_opt_arity_check_more_004f:	 ; if params in opt is more
   612 00000649 48B8-                   	mov rax, sob_nil
   612 0000064B [0100000000000000] 
   613 00000653 4889DE                  	mov rsi, rbx ;index
   614 00000656 48FFCE                  	dec rsi
   615                                  .L_lambda_opt_list_create_loop_004f:	; start of list creation loop
   616 00000659 4883FEFF                	cmp rsi, -1
   617 0000065D 7422                    	je .L_lambda_opt_list_create_loop_exit_004f
   618 0000065F 488D4E03                	lea rcx, [rsi + (3 + 0)]
   619 00000663 48C1E103                	shl rcx, 3
   620 00000667 4801E1                  	add rcx, rsp
   621 0000066A 488B09                  	mov rcx, [rcx]
   622 0000066D 56                      	push rsi
   623 0000066E 53                      	push rbx
   624 0000066F 50                      	push rax
   625 00000670 51                      	push rcx
   626 00000671 6A02                    	push qword 2 ; push num of args
   627 00000673 6A01                    	push qword 1 ; push garbage
   628 00000675 E801160000              	call L_code_ptr_cons
   629 0000067A 5B                      	pop rbx
   630 0000067B 5E                      	pop rsi
   631 0000067C 48FFCE                  	dec rsi
   632 0000067F EBD8                    	jmp .L_lambda_opt_list_create_loop_004f
   633                                  .L_lambda_opt_list_create_loop_exit_004f:	; end of list creation loop
   634 00000681 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
   635 00000686 4883C302                	add rbx, 2
   636 0000068A 4889DF                  	mov rdi, rbx
   637 0000068D 48C1E703                	shl rdi,3
   638 00000691 4801E7                  	add rdi, rsp
   639 00000694 488907                  	mov [rdi], rax
   640 00000697 BE00000000              	mov rsi, 0 ;index
   641                                  .L_lambda_opt_stack_shrink_loop_004f:	; start of stack shrink loop
   642 0000069C 4883FE03                	cmp rsi, 3
   643 000006A0 742E                    	je .L_lambda_opt_stack_shrink_loop_exit_004f
   644 000006A2 BF02000000              	mov rdi, 2
   645 000006A7 4829F7                  	sub rdi, rsi; the index of the current stack member to move
   646 000006AA 4889D9                  	mov rcx, rbx
   647 000006AD 4829F1                  	sub rcx, rsi
   648 000006B0 4883E901                	sub rcx, 1; the index of the target stack place to put the member
   649 000006B4 4889FA                  	mov rdx, rdi
   650 000006B7 48C1E203                	shl rdx, 3
   651 000006BB 4801E2                  	add rdx, rsp
   652 000006BE 48C1E103                	shl rcx, 3
   653 000006C2 4801E1                  	add rcx, rsp
   654 000006C5 488B12                  	mov rdx, [rdx]
   655 000006C8 488911                  	mov [rcx], rdx
   656 000006CB 48FFC6                  	inc rsi
   657 000006CE EBCC                    	jmp .L_lambda_opt_stack_shrink_loop_004f
   658                                  .L_lambda_opt_stack_shrink_loop_exit_004f:	; end of stack shrink loop
   659 000006D0 4883EB02                	sub rbx, 2 ; rbx has number of args
   660 000006D4 4883EB01                	sub rbx, 1
   661 000006D8 48C1E303                	shl rbx, 3
   662 000006DC 4801DC                  	add rsp, rbx
   663 000006DF 48C744241001000000      	mov qword [rsp + 8 * 2], 1
   664                                  .L_lambda_opt_stack_adjusted_004f:
   665 000006E8 55                      	push rbp
   666 000006E9 4889E5                  	mov rbp, rsp
   667 000006EC 488B4520                	mov rax, PARAM(0)
   668 000006F0 C9                      	leave
   669 000006F1 C21800                  	ret AND_KILL_FRAME(1)
   670                                  .L_lambda_opt_end_004f:	; new closure is in rax
   671 000006F4 48890425[C0010000]      	mov qword [free_var_56], rax
   672 000006FC 48B8-                   	mov rax, sob_void
   672 000006FE [0000000000000000] 
   673                                  
   674 00000706 4889C7                  	mov rdi, rax
   675 00000709 E8010C0000              	call print_sexpr_if_not_void
   676                                  
   677 0000070E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   678 00000713 E8E60B0000              	call malloc
   679 00000718 50                      	push rax
   680 00000719 BF00000000              	mov rdi, 8 * 0	; new rib
   681 0000071E E8DB0B0000              	call malloc
   682 00000723 50                      	push rax
   683 00000724 BF08000000              	mov rdi, 8 * 1	; extended env
   684 00000729 E8D00B0000              	call malloc
   685 0000072E 488B7D10                	mov rdi, ENV
   686 00000732 BE00000000              	mov rsi, 0
   687 00000737 BA01000000              	mov rdx, 1
   688                                  .L_lambda_opt_env_loop_0050:	; ext_env[i + 1] <-- env[i]
   689 0000073C 4883FE00                	cmp rsi, 0
   690 00000740 7410                    	je .L_lambda_opt_env_end_0050
   691 00000742 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
   692 00000746 48890CD0                	mov qword [rax + 8 * rdx], rcx
   693 0000074A 48FFC6                  	inc rsi
   694 0000074D 48FFC2                  	inc rdx
   695 00000750 EBEA                    	jmp .L_lambda_opt_env_loop_0050
   696                                  .L_lambda_opt_env_end_0050:
   697 00000752 5B                      	pop rbx
   698 00000753 BE00000000              	mov rsi, 0
   699                                  .L_lambda_opt_params_loop_0050:	; copy params
   700 00000758 4883FE00                	cmp rsi, 0
   701 0000075C 740E                    	je .L_lambda_opt_params_end_0050
   702 0000075E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   703 00000763 488914F3                	mov qword [rbx + 8 * rsi], rdx
   704 00000767 48FFC6                  	inc rsi
   705 0000076A EBEC                    	jmp .L_lambda_opt_params_loop_0050
   706                                  .L_lambda_opt_params_end_0050:
   707 0000076C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   708 0000076F 4889C3                  	mov rbx, rax
   709 00000772 58                      	pop rax
   710 00000773 C60005                  	mov byte [rax], T_closure
   711 00000776 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   712 0000077A 48C74009[87070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0050
   713 00000782 E9FF000000              	jmp .L_lambda_opt_end_0050
   714                                  .L_lambda_opt_code_0050:	; lambda-simple body
   715 00000787 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
   716 0000078C 4889FB                  	mov rbx, rdi
   717 0000078F 4883EB00                	sub rbx, 0
   718 00000793 7F46                    	jg .L_lambda_opt_arity_check_more_0050
   719                                  .L_lambda_opt_arity_check_exact_0050:	 ; if params in opt is exact
   720 00000795 4883EC08                	sub rsp, 8
   721 00000799 BE00000000              	mov rsi, 0 ; index
   722                                  .L_lambda_opt_stack_enlarge_loop_0050:	 ; stack loop enlarge start
   723 0000079E 4883FE03                	cmp rsi, 3
   724 000007A2 7420                    	je .L_lambda_opt_stack_enlarge_loop_exit_0050
   725 000007A4 4889F7                  	mov rdi, rsi
   726 000007A7 48C1E703                	shl rdi, 3
   727 000007AB 4801E7                  	add rdi, rsp
   728 000007AE 4883C708                	add rdi, 8
   729 000007B2 4889FB                  	mov rbx, rdi
   730 000007B5 4883EB08                	sub rbx, 8
   731 000007B9 488B3F                  	mov rdi, [rdi]
   732 000007BC 48893B                  	mov [rbx], rdi
   733 000007BF 48FFC6                  	inc rsi
   734 000007C2 EBDA                    	jmp .L_lambda_opt_stack_enlarge_loop_0050
   735                                  .L_lambda_opt_stack_enlarge_loop_exit_0050:	 ; end of stack enlarge loop
   736 000007C4 48C7442418-             	mov qword [rsp + 3*8], sob_nil
   736 000007C9 [01000000]         
   737 000007CD 48C744241001000000      	mov qword [rsp + 2*8], 1
   738 000007D6 E99F000000              	jmp .L_lambda_opt_stack_adjusted_0050
   739                                  .L_lambda_opt_arity_check_more_0050:	 ; if params in opt is more
   740 000007DB 48B8-                   	mov rax, sob_nil
   740 000007DD [0100000000000000] 
   741 000007E5 4889DE                  	mov rsi, rbx ;index
   742 000007E8 48FFCE                  	dec rsi
   743                                  .L_lambda_opt_list_create_loop_0050:	; start of list creation loop
   744 000007EB 4883FEFF                	cmp rsi, -1
   745 000007EF 7422                    	je .L_lambda_opt_list_create_loop_exit_0050
   746 000007F1 488D4E03                	lea rcx, [rsi + (3 + 0)]
   747 000007F5 48C1E103                	shl rcx, 3
   748 000007F9 4801E1                  	add rcx, rsp
   749 000007FC 488B09                  	mov rcx, [rcx]
   750 000007FF 56                      	push rsi
   751 00000800 53                      	push rbx
   752 00000801 50                      	push rax
   753 00000802 51                      	push rcx
   754 00000803 6A02                    	push qword 2 ; push num of args
   755 00000805 6A01                    	push qword 1 ; push garbage
   756 00000807 E86F140000              	call L_code_ptr_cons
   757 0000080C 5B                      	pop rbx
   758 0000080D 5E                      	pop rsi
   759 0000080E 48FFCE                  	dec rsi
   760 00000811 EBD8                    	jmp .L_lambda_opt_list_create_loop_0050
   761                                  .L_lambda_opt_list_create_loop_exit_0050:	; end of list creation loop
   762 00000813 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
   763 00000818 4883C302                	add rbx, 2
   764 0000081C 4889DF                  	mov rdi, rbx
   765 0000081F 48C1E703                	shl rdi,3
   766 00000823 4801E7                  	add rdi, rsp
   767 00000826 488907                  	mov [rdi], rax
   768 00000829 BE00000000              	mov rsi, 0 ;index
   769                                  .L_lambda_opt_stack_shrink_loop_0050:	; start of stack shrink loop
   770 0000082E 4883FE03                	cmp rsi, 3
   771 00000832 742E                    	je .L_lambda_opt_stack_shrink_loop_exit_0050
   772 00000834 BF02000000              	mov rdi, 2
   773 00000839 4829F7                  	sub rdi, rsi; the index of the current stack member to move
   774 0000083C 4889D9                  	mov rcx, rbx
   775 0000083F 4829F1                  	sub rcx, rsi
   776 00000842 4883E901                	sub rcx, 1; the index of the target stack place to put the member
   777 00000846 4889FA                  	mov rdx, rdi
   778 00000849 48C1E203                	shl rdx, 3
   779 0000084D 4801E2                  	add rdx, rsp
   780 00000850 48C1E103                	shl rcx, 3
   781 00000854 4801E1                  	add rcx, rsp
   782 00000857 488B12                  	mov rdx, [rdx]
   783 0000085A 488911                  	mov [rcx], rdx
   784 0000085D 48FFC6                  	inc rsi
   785 00000860 EBCC                    	jmp .L_lambda_opt_stack_shrink_loop_0050
   786                                  .L_lambda_opt_stack_shrink_loop_exit_0050:	; end of stack shrink loop
   787 00000862 4883EB02                	sub rbx, 2 ; rbx has number of args
   788 00000866 4883EB01                	sub rbx, 1
   789 0000086A 48C1E303                	shl rbx, 3
   790 0000086E 4801DC                  	add rsp, rbx
   791 00000871 48C744241001000000      	mov qword [rsp + 8 * 2], 1
   792                                  .L_lambda_opt_stack_adjusted_0050:
   793 0000087A 55                      	push rbp
   794 0000087B 4889E5                  	mov rbp, rsp
   795 0000087E 488B4520                	mov rax, PARAM(0)
   796 00000882 C9                      	leave
   797 00000883 C21800                  	ret AND_KILL_FRAME(1)
   798                                  .L_lambda_opt_end_0050:	; new closure is in rax
   799 00000886 50                      	push rax
   800 00000887 6A01                    	push 1
   801 00000889 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   802 0000088E E86B0A0000              	call malloc
   803 00000893 50                      	push rax
   804 00000894 BF00000000              	mov rdi, 8 * 0	; new rib
   805 00000899 E8600A0000              	call malloc
   806 0000089E 50                      	push rax
   807 0000089F BF08000000              	mov rdi, 8 * 1	; extended env
   808 000008A4 E8550A0000              	call malloc
   809 000008A9 488B7D10                	mov rdi, ENV
   810 000008AD BE00000000              	mov rsi, 0
   811 000008B2 BA01000000              	mov rdx, 1
   812                                  .L_lambda_simple_env_loop_0012:	; ext_env[i + 1] <-- env[i]
   813 000008B7 4883FE00                	cmp rsi, 0
   814 000008BB 7410                    	je .L_lambda_simple_env_end_0012
   815 000008BD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
   816 000008C1 48890CD0                	mov qword [rax + 8 * rdx], rcx
   817 000008C5 48FFC6                  	inc rsi
   818 000008C8 48FFC2                  	inc rdx
   819 000008CB EBEA                    	jmp .L_lambda_simple_env_loop_0012
   820                                  .L_lambda_simple_env_end_0012:
   821 000008CD 5B                      	pop rbx
   822 000008CE BE00000000              	mov rsi, 0
   823                                  .L_lambda_simple_params_loop_0012:	; copy params
   824 000008D3 4883FE00                	cmp rsi, 0
   825 000008D7 740E                    	je .L_lambda_simple_params_end_0012
   826 000008D9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   827 000008DE 488914F3                	mov qword [rbx + 8 * rsi], rdx
   828 000008E2 48FFC6                  	inc rsi
   829 000008E5 EBEC                    	jmp .L_lambda_simple_params_loop_0012
   830                                  .L_lambda_simple_params_end_0012:
   831 000008E7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   832 000008EA 4889C3                  	mov rbx, rax
   833 000008ED 58                      	pop rax
   834 000008EE C60005                  	mov byte [rax], T_closure
   835 000008F1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   836 000008F5 48C74009[02090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0012
   837 000008FD E909090000              	jmp .L_lambda_simple_end_0012
   838                                  .L_lambda_simple_code_0012:	; lambda-simple body
   839 00000902 48837C241001            	cmp qword [rsp + 8 * 2], 1
   840 00000908 740B                    	je .L_lambda_simple_arity_check_ok_0012
   841 0000090A FF742410                	push qword [rsp + 8 * 2]
   842 0000090E 6A01                    	push 1
   843 00000910 E9A2090000              	jmp L_error_incorrect_arity_simple
   844                                  .L_lambda_simple_arity_check_ok_0012:
   845 00000915 C8000000                	enter 0, 0
   846 00000919 488D0425[49010000]      	lea rax, [329 + L_constants]
   847 00000921 50                      	push rax
   848 00000922 488D0425[38010000]      	lea rax, [312 + L_constants]
   849 0000092A 50                      	push rax
   850 0000092B 488D0425[27010000]      	lea rax, [295 + L_constants]
   851 00000933 50                      	push rax
   852 00000934 488D0425[16010000]      	lea rax, [278 + L_constants]
   853 0000093C 50                      	push rax
   854 0000093D 488D0425[05010000]      	lea rax, [261 + L_constants]
   855 00000945 50                      	push rax
   856 00000946 6A05                    	push 5
   857 00000948 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   858 0000094D E8AC090000              	call malloc
   859 00000952 50                      	push rax
   860 00000953 BF08000000              	mov rdi, 8 * 1	; new rib
   861 00000958 E8A1090000              	call malloc
   862 0000095D 50                      	push rax
   863 0000095E BF10000000              	mov rdi, 8 * 2	; extended env
   864 00000963 E896090000              	call malloc
   865 00000968 488B7D10                	mov rdi, ENV
   866 0000096C BE00000000              	mov rsi, 0
   867 00000971 BA01000000              	mov rdx, 1
   868                                  .L_lambda_opt_env_loop_0051:	; ext_env[i + 1] <-- env[i]
   869 00000976 4883FE01                	cmp rsi, 1
   870 0000097A 7410                    	je .L_lambda_opt_env_end_0051
   871 0000097C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
   872 00000980 48890CD0                	mov qword [rax + 8 * rdx], rcx
   873 00000984 48FFC6                  	inc rsi
   874 00000987 48FFC2                  	inc rdx
   875 0000098A EBEA                    	jmp .L_lambda_opt_env_loop_0051
   876                                  .L_lambda_opt_env_end_0051:
   877 0000098C 5B                      	pop rbx
   878 0000098D BE00000000              	mov rsi, 0
   879                                  .L_lambda_opt_params_loop_0051:	; copy params
   880 00000992 4883FE01                	cmp rsi, 1
   881 00000996 740E                    	je .L_lambda_opt_params_end_0051
   882 00000998 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   883 0000099D 488914F3                	mov qword [rbx + 8 * rsi], rdx
   884 000009A1 48FFC6                  	inc rsi
   885 000009A4 EBEC                    	jmp .L_lambda_opt_params_loop_0051
   886                                  .L_lambda_opt_params_end_0051:
   887 000009A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   888 000009A9 4889C3                  	mov rbx, rax
   889 000009AC 58                      	pop rax
   890 000009AD C60005                  	mov byte [rax], T_closure
   891 000009B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   892 000009B4 48C74009[C1090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0051
   893 000009BC E9E7070000              	jmp .L_lambda_opt_end_0051
   894                                  .L_lambda_opt_code_0051:	; lambda-simple body
   895 000009C1 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
   896 000009C6 4889FB                  	mov rbx, rdi
   897 000009C9 4883EB01                	sub rbx, 1
   898 000009CD 7F46                    	jg .L_lambda_opt_arity_check_more_0051
   899                                  .L_lambda_opt_arity_check_exact_0051:	 ; if params in opt is exact
   900 000009CF 4883EC08                	sub rsp, 8
   901 000009D3 BE00000000              	mov rsi, 0 ; index
   902                                  .L_lambda_opt_stack_enlarge_loop_0051:	 ; stack loop enlarge start
   903 000009D8 4883FE04                	cmp rsi, 4
   904 000009DC 7420                    	je .L_lambda_opt_stack_enlarge_loop_exit_0051
   905 000009DE 4889F7                  	mov rdi, rsi
   906 000009E1 48C1E703                	shl rdi, 3
   907 000009E5 4801E7                  	add rdi, rsp
   908 000009E8 4883C708                	add rdi, 8
   909 000009EC 4889FB                  	mov rbx, rdi
   910 000009EF 4883EB08                	sub rbx, 8
   911 000009F3 488B3F                  	mov rdi, [rdi]
   912 000009F6 48893B                  	mov [rbx], rdi
   913 000009F9 48FFC6                  	inc rsi
   914 000009FC EBDA                    	jmp .L_lambda_opt_stack_enlarge_loop_0051
   915                                  .L_lambda_opt_stack_enlarge_loop_exit_0051:	 ; end of stack enlarge loop
   916 000009FE 48C7442420-             	mov qword [rsp + 4*8], sob_nil
   916 00000A03 [01000000]         
   917 00000A07 48C744241002000000      	mov qword [rsp + 2*8], 2
   918 00000A10 E99F000000              	jmp .L_lambda_opt_stack_adjusted_0051
   919                                  .L_lambda_opt_arity_check_more_0051:	 ; if params in opt is more
   920 00000A15 48B8-                   	mov rax, sob_nil
   920 00000A17 [0100000000000000] 
   921 00000A1F 4889DE                  	mov rsi, rbx ;index
   922 00000A22 48FFCE                  	dec rsi
   923                                  .L_lambda_opt_list_create_loop_0051:	; start of list creation loop
   924 00000A25 4883FEFF                	cmp rsi, -1
   925 00000A29 7422                    	je .L_lambda_opt_list_create_loop_exit_0051
   926 00000A2B 488D4E04                	lea rcx, [rsi + (3 + 1)]
   927 00000A2F 48C1E103                	shl rcx, 3
   928 00000A33 4801E1                  	add rcx, rsp
   929 00000A36 488B09                  	mov rcx, [rcx]
   930 00000A39 56                      	push rsi
   931 00000A3A 53                      	push rbx
   932 00000A3B 50                      	push rax
   933 00000A3C 51                      	push rcx
   934 00000A3D 6A02                    	push qword 2 ; push num of args
   935 00000A3F 6A01                    	push qword 1 ; push garbage
   936 00000A41 E835120000              	call L_code_ptr_cons
   937 00000A46 5B                      	pop rbx
   938 00000A47 5E                      	pop rsi
   939 00000A48 48FFCE                  	dec rsi
   940 00000A4B EBD8                    	jmp .L_lambda_opt_list_create_loop_0051
   941                                  .L_lambda_opt_list_create_loop_exit_0051:	; end of list creation loop
   942 00000A4D 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
   943 00000A52 4883C302                	add rbx, 2
   944 00000A56 4889DF                  	mov rdi, rbx
   945 00000A59 48C1E703                	shl rdi,3
   946 00000A5D 4801E7                  	add rdi, rsp
   947 00000A60 488907                  	mov [rdi], rax
   948 00000A63 BE00000000              	mov rsi, 0 ;index
   949                                  .L_lambda_opt_stack_shrink_loop_0051:	; start of stack shrink loop
   950 00000A68 4883FE04                	cmp rsi, 4
   951 00000A6C 742E                    	je .L_lambda_opt_stack_shrink_loop_exit_0051
   952 00000A6E BF03000000              	mov rdi, 3
   953 00000A73 4829F7                  	sub rdi, rsi; the index of the current stack member to move
   954 00000A76 4889D9                  	mov rcx, rbx
   955 00000A79 4829F1                  	sub rcx, rsi
   956 00000A7C 4883E901                	sub rcx, 1; the index of the target stack place to put the member
   957 00000A80 4889FA                  	mov rdx, rdi
   958 00000A83 48C1E203                	shl rdx, 3
   959 00000A87 4801E2                  	add rdx, rsp
   960 00000A8A 48C1E103                	shl rcx, 3
   961 00000A8E 4801E1                  	add rcx, rsp
   962 00000A91 488B12                  	mov rdx, [rdx]
   963 00000A94 488911                  	mov [rcx], rdx
   964 00000A97 48FFC6                  	inc rsi
   965 00000A9A EBCC                    	jmp .L_lambda_opt_stack_shrink_loop_0051
   966                                  .L_lambda_opt_stack_shrink_loop_exit_0051:	; end of stack shrink loop
   967 00000A9C 4883EB02                	sub rbx, 2 ; rbx has number of args
   968 00000AA0 4883EB02                	sub rbx, 2
   969 00000AA4 48C1E303                	shl rbx, 3
   970 00000AA8 4801DC                  	add rsp, rbx
   971 00000AAB 48C744241002000000      	mov qword [rsp + 8 * 2], 2
   972                                  .L_lambda_opt_stack_adjusted_0051:
   973 00000AB4 55                      	push rbp
   974 00000AB5 4889E5                  	mov rbp, rsp
   975 00000AB8 488D0425[F4000000]      	lea rax, [244 + L_constants]
   976 00000AC0 50                      	push rax
   977 00000AC1 488D0425[E3000000]      	lea rax, [227 + L_constants]
   978 00000AC9 50                      	push rax
   979 00000ACA 488D0425[D2000000]      	lea rax, [210 + L_constants]
   980 00000AD2 50                      	push rax
   981 00000AD3 488D0425[C1000000]      	lea rax, [193 + L_constants]
   982 00000ADB 50                      	push rax
   983 00000ADC 488D0425[B0000000]      	lea rax, [176 + L_constants]
   984 00000AE4 50                      	push rax
   985 00000AE5 6A05                    	push 5
   986 00000AE7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   987 00000AEC E80D080000              	call malloc
   988 00000AF1 50                      	push rax
   989 00000AF2 BF10000000              	mov rdi, 8 * 2	; new rib
   990 00000AF7 E802080000              	call malloc
   991 00000AFC 50                      	push rax
   992 00000AFD BF18000000              	mov rdi, 8 * 3	; extended env
   993 00000B02 E8F7070000              	call malloc
   994 00000B07 488B7D10                	mov rdi, ENV
   995 00000B0B BE00000000              	mov rsi, 0
   996 00000B10 BA01000000              	mov rdx, 1
   997                                  .L_lambda_opt_env_loop_0052:	; ext_env[i + 1] <-- env[i]
   998 00000B15 4883FE02                	cmp rsi, 2
   999 00000B19 7410                    	je .L_lambda_opt_env_end_0052
  1000 00000B1B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1001 00000B1F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1002 00000B23 48FFC6                  	inc rsi
  1003 00000B26 48FFC2                  	inc rdx
  1004 00000B29 EBEA                    	jmp .L_lambda_opt_env_loop_0052
  1005                                  .L_lambda_opt_env_end_0052:
  1006 00000B2B 5B                      	pop rbx
  1007 00000B2C BE00000000              	mov rsi, 0
  1008                                  .L_lambda_opt_params_loop_0052:	; copy params
  1009 00000B31 4883FE02                	cmp rsi, 2
  1010 00000B35 740E                    	je .L_lambda_opt_params_end_0052
  1011 00000B37 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1012 00000B3C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1013 00000B40 48FFC6                  	inc rsi
  1014 00000B43 EBEC                    	jmp .L_lambda_opt_params_loop_0052
  1015                                  .L_lambda_opt_params_end_0052:
  1016 00000B45 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1017 00000B48 4889C3                  	mov rbx, rax
  1018 00000B4B 58                      	pop rax
  1019 00000B4C C60005                  	mov byte [rax], T_closure
  1020 00000B4F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1021 00000B53 48C74009[600B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0052
  1022 00000B5B E9BA050000              	jmp .L_lambda_opt_end_0052
  1023                                  .L_lambda_opt_code_0052:	; lambda-simple body
  1024 00000B60 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  1025 00000B65 4889FB                  	mov rbx, rdi
  1026 00000B68 4883EB02                	sub rbx, 2
  1027 00000B6C 7F46                    	jg .L_lambda_opt_arity_check_more_0052
  1028                                  .L_lambda_opt_arity_check_exact_0052:	 ; if params in opt is exact
  1029 00000B6E 4883EC08                	sub rsp, 8
  1030 00000B72 BE00000000              	mov rsi, 0 ; index
  1031                                  .L_lambda_opt_stack_enlarge_loop_0052:	 ; stack loop enlarge start
  1032 00000B77 4883FE05                	cmp rsi, 5
  1033 00000B7B 7420                    	je .L_lambda_opt_stack_enlarge_loop_exit_0052
  1034 00000B7D 4889F7                  	mov rdi, rsi
  1035 00000B80 48C1E703                	shl rdi, 3
  1036 00000B84 4801E7                  	add rdi, rsp
  1037 00000B87 4883C708                	add rdi, 8
  1038 00000B8B 4889FB                  	mov rbx, rdi
  1039 00000B8E 4883EB08                	sub rbx, 8
  1040 00000B92 488B3F                  	mov rdi, [rdi]
  1041 00000B95 48893B                  	mov [rbx], rdi
  1042 00000B98 48FFC6                  	inc rsi
  1043 00000B9B EBDA                    	jmp .L_lambda_opt_stack_enlarge_loop_0052
  1044                                  .L_lambda_opt_stack_enlarge_loop_exit_0052:	 ; end of stack enlarge loop
  1045 00000B9D 48C7442428-             	mov qword [rsp + 5*8], sob_nil
  1045 00000BA2 [01000000]         
  1046 00000BA6 48C744241003000000      	mov qword [rsp + 2*8], 3
  1047 00000BAF E99F000000              	jmp .L_lambda_opt_stack_adjusted_0052
  1048                                  .L_lambda_opt_arity_check_more_0052:	 ; if params in opt is more
  1049 00000BB4 48B8-                   	mov rax, sob_nil
  1049 00000BB6 [0100000000000000] 
  1050 00000BBE 4889DE                  	mov rsi, rbx ;index
  1051 00000BC1 48FFCE                  	dec rsi
  1052                                  .L_lambda_opt_list_create_loop_0052:	; start of list creation loop
  1053 00000BC4 4883FEFF                	cmp rsi, -1
  1054 00000BC8 7422                    	je .L_lambda_opt_list_create_loop_exit_0052
  1055 00000BCA 488D4E05                	lea rcx, [rsi + (3 + 2)]
  1056 00000BCE 48C1E103                	shl rcx, 3
  1057 00000BD2 4801E1                  	add rcx, rsp
  1058 00000BD5 488B09                  	mov rcx, [rcx]
  1059 00000BD8 56                      	push rsi
  1060 00000BD9 53                      	push rbx
  1061 00000BDA 50                      	push rax
  1062 00000BDB 51                      	push rcx
  1063 00000BDC 6A02                    	push qword 2 ; push num of args
  1064 00000BDE 6A01                    	push qword 1 ; push garbage
  1065 00000BE0 E896100000              	call L_code_ptr_cons
  1066 00000BE5 5B                      	pop rbx
  1067 00000BE6 5E                      	pop rsi
  1068 00000BE7 48FFCE                  	dec rsi
  1069 00000BEA EBD8                    	jmp .L_lambda_opt_list_create_loop_0052
  1070                                  .L_lambda_opt_list_create_loop_exit_0052:	; end of list creation loop
  1071 00000BEC 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  1072 00000BF1 4883C302                	add rbx, 2
  1073 00000BF5 4889DF                  	mov rdi, rbx
  1074 00000BF8 48C1E703                	shl rdi,3
  1075 00000BFC 4801E7                  	add rdi, rsp
  1076 00000BFF 488907                  	mov [rdi], rax
  1077 00000C02 BE00000000              	mov rsi, 0 ;index
  1078                                  .L_lambda_opt_stack_shrink_loop_0052:	; start of stack shrink loop
  1079 00000C07 4883FE05                	cmp rsi, 5
  1080 00000C0B 742E                    	je .L_lambda_opt_stack_shrink_loop_exit_0052
  1081 00000C0D BF04000000              	mov rdi, 4
  1082 00000C12 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  1083 00000C15 4889D9                  	mov rcx, rbx
  1084 00000C18 4829F1                  	sub rcx, rsi
  1085 00000C1B 4883E901                	sub rcx, 1; the index of the target stack place to put the member
  1086 00000C1F 4889FA                  	mov rdx, rdi
  1087 00000C22 48C1E203                	shl rdx, 3
  1088 00000C26 4801E2                  	add rdx, rsp
  1089 00000C29 48C1E103                	shl rcx, 3
  1090 00000C2D 4801E1                  	add rcx, rsp
  1091 00000C30 488B12                  	mov rdx, [rdx]
  1092 00000C33 488911                  	mov [rcx], rdx
  1093 00000C36 48FFC6                  	inc rsi
  1094 00000C39 EBCC                    	jmp .L_lambda_opt_stack_shrink_loop_0052
  1095                                  .L_lambda_opt_stack_shrink_loop_exit_0052:	; end of stack shrink loop
  1096 00000C3B 4883EB02                	sub rbx, 2 ; rbx has number of args
  1097 00000C3F 4883EB03                	sub rbx, 3
  1098 00000C43 48C1E303                	shl rbx, 3
  1099 00000C47 4801DC                  	add rsp, rbx
  1100 00000C4A 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  1101                                  .L_lambda_opt_stack_adjusted_0052:
  1102 00000C53 55                      	push rbp
  1103 00000C54 4889E5                  	mov rbp, rsp
  1104 00000C57 488D0425[9F000000]      	lea rax, [159 + L_constants]
  1105 00000C5F 50                      	push rax
  1106 00000C60 488D0425[8E000000]      	lea rax, [142 + L_constants]
  1107 00000C68 50                      	push rax
  1108 00000C69 488D0425[7D000000]      	lea rax, [125 + L_constants]
  1109 00000C71 50                      	push rax
  1110 00000C72 488D0425[6C000000]      	lea rax, [108 + L_constants]
  1111 00000C7A 50                      	push rax
  1112 00000C7B 488D0425[5B000000]      	lea rax, [91 + L_constants]
  1113 00000C83 50                      	push rax
  1114 00000C84 6A05                    	push 5
  1115 00000C86 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1116 00000C8B E86E060000              	call malloc
  1117 00000C90 50                      	push rax
  1118 00000C91 BF18000000              	mov rdi, 8 * 3	; new rib
  1119 00000C96 E863060000              	call malloc
  1120 00000C9B 50                      	push rax
  1121 00000C9C BF20000000              	mov rdi, 8 * 4	; extended env
  1122 00000CA1 E858060000              	call malloc
  1123 00000CA6 488B7D10                	mov rdi, ENV
  1124 00000CAA BE00000000              	mov rsi, 0
  1125 00000CAF BA01000000              	mov rdx, 1
  1126                                  .L_lambda_opt_env_loop_0053:	; ext_env[i + 1] <-- env[i]
  1127 00000CB4 4883FE03                	cmp rsi, 3
  1128 00000CB8 7410                    	je .L_lambda_opt_env_end_0053
  1129 00000CBA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1130 00000CBE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1131 00000CC2 48FFC6                  	inc rsi
  1132 00000CC5 48FFC2                  	inc rdx
  1133 00000CC8 EBEA                    	jmp .L_lambda_opt_env_loop_0053
  1134                                  .L_lambda_opt_env_end_0053:
  1135 00000CCA 5B                      	pop rbx
  1136 00000CCB BE00000000              	mov rsi, 0
  1137                                  .L_lambda_opt_params_loop_0053:	; copy params
  1138 00000CD0 4883FE03                	cmp rsi, 3
  1139 00000CD4 740E                    	je .L_lambda_opt_params_end_0053
  1140 00000CD6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1141 00000CDB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1142 00000CDF 48FFC6                  	inc rsi
  1143 00000CE2 EBEC                    	jmp .L_lambda_opt_params_loop_0053
  1144                                  .L_lambda_opt_params_end_0053:
  1145 00000CE4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1146 00000CE7 4889C3                  	mov rbx, rax
  1147 00000CEA 58                      	pop rax
  1148 00000CEB C60005                  	mov byte [rax], T_closure
  1149 00000CEE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1150 00000CF2 48C74009[FF0C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0053
  1151 00000CFA E9B8030000              	jmp .L_lambda_opt_end_0053
  1152                                  .L_lambda_opt_code_0053:	; lambda-simple body
  1153 00000CFF 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  1154 00000D04 4889FB                  	mov rbx, rdi
  1155 00000D07 4883EB03                	sub rbx, 3
  1156 00000D0B 7F46                    	jg .L_lambda_opt_arity_check_more_0053
  1157                                  .L_lambda_opt_arity_check_exact_0053:	 ; if params in opt is exact
  1158 00000D0D 4883EC08                	sub rsp, 8
  1159 00000D11 BE00000000              	mov rsi, 0 ; index
  1160                                  .L_lambda_opt_stack_enlarge_loop_0053:	 ; stack loop enlarge start
  1161 00000D16 4883FE06                	cmp rsi, 6
  1162 00000D1A 7420                    	je .L_lambda_opt_stack_enlarge_loop_exit_0053
  1163 00000D1C 4889F7                  	mov rdi, rsi
  1164 00000D1F 48C1E703                	shl rdi, 3
  1165 00000D23 4801E7                  	add rdi, rsp
  1166 00000D26 4883C708                	add rdi, 8
  1167 00000D2A 4889FB                  	mov rbx, rdi
  1168 00000D2D 4883EB08                	sub rbx, 8
  1169 00000D31 488B3F                  	mov rdi, [rdi]
  1170 00000D34 48893B                  	mov [rbx], rdi
  1171 00000D37 48FFC6                  	inc rsi
  1172 00000D3A EBDA                    	jmp .L_lambda_opt_stack_enlarge_loop_0053
  1173                                  .L_lambda_opt_stack_enlarge_loop_exit_0053:	 ; end of stack enlarge loop
  1174 00000D3C 48C7442430-             	mov qword [rsp + 6*8], sob_nil
  1174 00000D41 [01000000]         
  1175 00000D45 48C744241004000000      	mov qword [rsp + 2*8], 4
  1176 00000D4E E99F000000              	jmp .L_lambda_opt_stack_adjusted_0053
  1177                                  .L_lambda_opt_arity_check_more_0053:	 ; if params in opt is more
  1178 00000D53 48B8-                   	mov rax, sob_nil
  1178 00000D55 [0100000000000000] 
  1179 00000D5D 4889DE                  	mov rsi, rbx ;index
  1180 00000D60 48FFCE                  	dec rsi
  1181                                  .L_lambda_opt_list_create_loop_0053:	; start of list creation loop
  1182 00000D63 4883FEFF                	cmp rsi, -1
  1183 00000D67 7422                    	je .L_lambda_opt_list_create_loop_exit_0053
  1184 00000D69 488D4E06                	lea rcx, [rsi + (3 + 3)]
  1185 00000D6D 48C1E103                	shl rcx, 3
  1186 00000D71 4801E1                  	add rcx, rsp
  1187 00000D74 488B09                  	mov rcx, [rcx]
  1188 00000D77 56                      	push rsi
  1189 00000D78 53                      	push rbx
  1190 00000D79 50                      	push rax
  1191 00000D7A 51                      	push rcx
  1192 00000D7B 6A02                    	push qword 2 ; push num of args
  1193 00000D7D 6A01                    	push qword 1 ; push garbage
  1194 00000D7F E8F70E0000              	call L_code_ptr_cons
  1195 00000D84 5B                      	pop rbx
  1196 00000D85 5E                      	pop rsi
  1197 00000D86 48FFCE                  	dec rsi
  1198 00000D89 EBD8                    	jmp .L_lambda_opt_list_create_loop_0053
  1199                                  .L_lambda_opt_list_create_loop_exit_0053:	; end of list creation loop
  1200 00000D8B 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  1201 00000D90 4883C302                	add rbx, 2
  1202 00000D94 4889DF                  	mov rdi, rbx
  1203 00000D97 48C1E703                	shl rdi,3
  1204 00000D9B 4801E7                  	add rdi, rsp
  1205 00000D9E 488907                  	mov [rdi], rax
  1206 00000DA1 BE00000000              	mov rsi, 0 ;index
  1207                                  .L_lambda_opt_stack_shrink_loop_0053:	; start of stack shrink loop
  1208 00000DA6 4883FE06                	cmp rsi, 6
  1209 00000DAA 742E                    	je .L_lambda_opt_stack_shrink_loop_exit_0053
  1210 00000DAC BF05000000              	mov rdi, 5
  1211 00000DB1 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  1212 00000DB4 4889D9                  	mov rcx, rbx
  1213 00000DB7 4829F1                  	sub rcx, rsi
  1214 00000DBA 4883E901                	sub rcx, 1; the index of the target stack place to put the member
  1215 00000DBE 4889FA                  	mov rdx, rdi
  1216 00000DC1 48C1E203                	shl rdx, 3
  1217 00000DC5 4801E2                  	add rdx, rsp
  1218 00000DC8 48C1E103                	shl rcx, 3
  1219 00000DCC 4801E1                  	add rcx, rsp
  1220 00000DCF 488B12                  	mov rdx, [rdx]
  1221 00000DD2 488911                  	mov [rcx], rdx
  1222 00000DD5 48FFC6                  	inc rsi
  1223 00000DD8 EBCC                    	jmp .L_lambda_opt_stack_shrink_loop_0053
  1224                                  .L_lambda_opt_stack_shrink_loop_exit_0053:	; end of stack shrink loop
  1225 00000DDA 4883EB02                	sub rbx, 2 ; rbx has number of args
  1226 00000DDE 4883EB04                	sub rbx, 4
  1227 00000DE2 48C1E303                	shl rbx, 3
  1228 00000DE6 4801DC                  	add rsp, rbx
  1229 00000DE9 48C744241004000000      	mov qword [rsp + 8 * 2], 4
  1230                                  .L_lambda_opt_stack_adjusted_0053:
  1231 00000DF2 55                      	push rbp
  1232 00000DF3 4889E5                  	mov rbp, rsp
  1233 00000DF6 488D0425[4A000000]      	lea rax, [74 + L_constants]
  1234 00000DFE 50                      	push rax
  1235 00000DFF 488D0425[39000000]      	lea rax, [57 + L_constants]
  1236 00000E07 50                      	push rax
  1237 00000E08 488D0425[28000000]      	lea rax, [40 + L_constants]
  1238 00000E10 50                      	push rax
  1239 00000E11 488D0425[17000000]      	lea rax, [23 + L_constants]
  1240 00000E19 50                      	push rax
  1241 00000E1A 488D0425[06000000]      	lea rax, [6 + L_constants]
  1242 00000E22 50                      	push rax
  1243 00000E23 6A05                    	push 5
  1244 00000E25 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1245 00000E2A E8CF040000              	call malloc
  1246 00000E2F 50                      	push rax
  1247 00000E30 BF20000000              	mov rdi, 8 * 4	; new rib
  1248 00000E35 E8C4040000              	call malloc
  1249 00000E3A 50                      	push rax
  1250 00000E3B BF28000000              	mov rdi, 8 * 5	; extended env
  1251 00000E40 E8B9040000              	call malloc
  1252 00000E45 488B7D10                	mov rdi, ENV
  1253 00000E49 BE00000000              	mov rsi, 0
  1254 00000E4E BA01000000              	mov rdx, 1
  1255                                  .L_lambda_opt_env_loop_0054:	; ext_env[i + 1] <-- env[i]
  1256 00000E53 4883FE04                	cmp rsi, 4
  1257 00000E57 7410                    	je .L_lambda_opt_env_end_0054
  1258 00000E59 488B0CF7                	mov rcx, qword [rdi + 8 * rsi] ; Problem is here!!
  1259 00000E5D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1260 00000E61 48FFC6                  	inc rsi
  1261 00000E64 48FFC2                  	inc rdx
  1262 00000E67 EBEA                    	jmp .L_lambda_opt_env_loop_0054
  1263                                  .L_lambda_opt_env_end_0054:
  1264 00000E69 5B                      	pop rbx
  1265 00000E6A BE00000000              	mov rsi, 0
  1266                                  .L_lambda_opt_params_loop_0054:	; copy params
  1267 00000E6F 4883FE04                	cmp rsi, 4
  1268 00000E73 740E                    	je .L_lambda_opt_params_end_0054
  1269 00000E75 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1270 00000E7A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1271 00000E7E 48FFC6                  	inc rsi
  1272 00000E81 EBEC                    	jmp .L_lambda_opt_params_loop_0054
  1273                                  .L_lambda_opt_params_end_0054:
  1274 00000E83 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1275 00000E86 4889C3                  	mov rbx, rax
  1276 00000E89 58                      	pop rax
  1277 00000E8A C60005                  	mov byte [rax], T_closure
  1278 00000E8D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1279 00000E91 48C74009[9E0E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0054
  1280 00000E99 E980010000              	jmp .L_lambda_opt_end_0054
  1281                                  .L_lambda_opt_code_0054:	; lambda-simple body
  1282 00000E9E 488B7C2410              	mov rdi, qword [rsp + 8 * 2]
  1283 00000EA3 4889FB                  	mov rbx, rdi
  1284 00000EA6 4883EB04                	sub rbx, 4
  1285 00000EAA 7F46                    	jg .L_lambda_opt_arity_check_more_0054
  1286                                  .L_lambda_opt_arity_check_exact_0054:	 ; if params in opt is exact
  1287 00000EAC 4883EC08                	sub rsp, 8
  1288 00000EB0 BE00000000              	mov rsi, 0 ; index
  1289                                  .L_lambda_opt_stack_enlarge_loop_0054:	 ; stack loop enlarge start
  1290 00000EB5 4883FE07                	cmp rsi, 7
  1291 00000EB9 7420                    	je .L_lambda_opt_stack_enlarge_loop_exit_0054
  1292 00000EBB 4889F7                  	mov rdi, rsi
  1293 00000EBE 48C1E703                	shl rdi, 3
  1294 00000EC2 4801E7                  	add rdi, rsp
  1295 00000EC5 4883C708                	add rdi, 8
  1296 00000EC9 4889FB                  	mov rbx, rdi
  1297 00000ECC 4883EB08                	sub rbx, 8
  1298 00000ED0 488B3F                  	mov rdi, [rdi]
  1299 00000ED3 48893B                  	mov [rbx], rdi
  1300 00000ED6 48FFC6                  	inc rsi
  1301 00000ED9 EBDA                    	jmp .L_lambda_opt_stack_enlarge_loop_0054
  1302                                  .L_lambda_opt_stack_enlarge_loop_exit_0054:	 ; end of stack enlarge loop
  1303 00000EDB 48C7442438-             	mov qword [rsp + 7*8], sob_nil
  1303 00000EE0 [01000000]         
  1304 00000EE4 48C744241005000000      	mov qword [rsp + 2*8], 5
  1305 00000EED E99F000000              	jmp .L_lambda_opt_stack_adjusted_0054
  1306                                  .L_lambda_opt_arity_check_more_0054:	 ; if params in opt is more
  1307 00000EF2 48B8-                   	mov rax, sob_nil
  1307 00000EF4 [0100000000000000] 
  1308 00000EFC 4889DE                  	mov rsi, rbx ;index
  1309 00000EFF 48FFCE                  	dec rsi
  1310                                  .L_lambda_opt_list_create_loop_0054:	; start of list creation loop
  1311 00000F02 4883FEFF                	cmp rsi, -1
  1312 00000F06 7422                    	je .L_lambda_opt_list_create_loop_exit_0054
  1313 00000F08 488D4E07                	lea rcx, [rsi + (3 + 4)]
  1314 00000F0C 48C1E103                	shl rcx, 3
  1315 00000F10 4801E1                  	add rcx, rsp
  1316 00000F13 488B09                  	mov rcx, [rcx]
  1317 00000F16 56                      	push rsi
  1318 00000F17 53                      	push rbx
  1319 00000F18 50                      	push rax
  1320 00000F19 51                      	push rcx
  1321 00000F1A 6A02                    	push qword 2 ; push num of args
  1322 00000F1C 6A01                    	push qword 1 ; push garbage
  1323 00000F1E E8580D0000              	call L_code_ptr_cons
  1324 00000F23 5B                      	pop rbx
  1325 00000F24 5E                      	pop rsi
  1326 00000F25 48FFCE                  	dec rsi
  1327 00000F28 EBD8                    	jmp .L_lambda_opt_list_create_loop_0054
  1328                                  .L_lambda_opt_list_create_loop_exit_0054:	; end of list creation loop
  1329 00000F2A 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  1330 00000F2F 4883C302                	add rbx, 2
  1331 00000F33 4889DF                  	mov rdi, rbx
  1332 00000F36 48C1E703                	shl rdi,3
  1333 00000F3A 4801E7                  	add rdi, rsp
  1334 00000F3D 488907                  	mov [rdi], rax
  1335 00000F40 BE00000000              	mov rsi, 0 ;index
  1336                                  .L_lambda_opt_stack_shrink_loop_0054:	; start of stack shrink loop
  1337 00000F45 4883FE07                	cmp rsi, 7
  1338 00000F49 742E                    	je .L_lambda_opt_stack_shrink_loop_exit_0054
  1339 00000F4B BF06000000              	mov rdi, 6
  1340 00000F50 4829F7                  	sub rdi, rsi; the index of the current stack member to move
  1341 00000F53 4889D9                  	mov rcx, rbx
  1342 00000F56 4829F1                  	sub rcx, rsi
  1343 00000F59 4883E901                	sub rcx, 1; the index of the target stack place to put the member
  1344 00000F5D 4889FA                  	mov rdx, rdi
  1345 00000F60 48C1E203                	shl rdx, 3
  1346 00000F64 4801E2                  	add rdx, rsp
  1347 00000F67 48C1E103                	shl rcx, 3
  1348 00000F6B 4801E1                  	add rcx, rsp
  1349 00000F6E 488B12                  	mov rdx, [rdx]
  1350 00000F71 488911                  	mov [rcx], rdx
  1351 00000F74 48FFC6                  	inc rsi
  1352 00000F77 EBCC                    	jmp .L_lambda_opt_stack_shrink_loop_0054
  1353                                  .L_lambda_opt_stack_shrink_loop_exit_0054:	; end of stack shrink loop
  1354 00000F79 4883EB02                	sub rbx, 2 ; rbx has number of args
  1355 00000F7D 4883EB05                	sub rbx, 5
  1356 00000F81 48C1E303                	shl rbx, 3
  1357 00000F85 4801DC                  	add rsp, rbx
  1358 00000F88 48C744241005000000      	mov qword [rsp + 8 * 2], 5
  1359                                  .L_lambda_opt_stack_adjusted_0054:
  1360 00000F91 55                      	push rbp
  1361 00000F92 4889E5                  	mov rbp, rsp
  1362 00000F95 488B4540                	mov rax, PARAM(4)
  1363 00000F99 50                      	push rax
  1364 00000F9A 488B4538                	mov rax, PARAM(3)
  1365 00000F9E 50                      	push rax
  1366 00000F9F 488B4530                	mov rax, PARAM(2)
  1367 00000FA3 50                      	push rax
  1368 00000FA4 488B4528                	mov rax, PARAM(1)
  1369 00000FA8 50                      	push rax
  1370 00000FA9 488B4520                	mov rax, PARAM(0)
  1371 00000FAD 50                      	push rax
  1372 00000FAE 6A05                    	push 5
  1373 00000FB0 488B4510                	mov rax, qword [rbp + 8*2]
  1374 00000FB4 488B4018                	mov rax, qword [rax + 8*3]
  1375 00000FB8 488B00                  	mov rax, qword [rax + 8*0]
  1376                                  	assert_closure(rax)
    65 00000FBB 803805              <1>  cmp byte [%1], %2
    66 00000FBE 0F85B01B0000        <1>  jne L_error_incorrect_type
  1377 00000FC4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1378 00000FC8 53                      	push rbx
  1379 00000FC9 FF7508                  	push RET_ADDR
  1380 00000FCC 488B6D00                	mov rbp, OLD_RDP
  1381 00000FD0 BE00000000              	mov rsi, 0
  1382                                  .L_tc_recycle_frame_loop_000e:	 ; start recycle frame loop
  1383 00000FD5 4883FE08                	cmp rsi, 8
  1384 00000FD9 7427                    	je .L_tc_recycle_frame_done_000e
  1385 00000FDB B907000000              	mov rcx, 7
  1386 00000FE0 4829F1                  	sub rcx, rsi
  1387 00000FE3 48C1E103                	shl rcx, 3
  1388 00000FE7 4801E1                  	add rcx, rsp ; rcx is the index to move
  1389 00000FEA 4889F3                  	mov rbx, rsi
  1390 00000FED 48C1E303                	shl rbx, 3
  1391 00000FF1 48F7DB                  	neg rbx
  1392 00000FF4 4801EB                  	add rbx, rbp ; rbx is the index to move to
  1393 00000FF7 488B09                  	mov rcx, [rcx]
  1394 00000FFA 48890B                  	mov [rbx], rcx
  1395 00000FFD 48FFC6                  	inc rsi
  1396 00001000 EBD3                    	jmp .L_tc_recycle_frame_loop_000e
  1397                                  .L_tc_recycle_frame_done_000e:	 ; end recycle frame loop
  1398 00001002 BB07000000              	mov rbx, 7
  1399 00001007 48C1E303                	shl rbx, 3
  1400 0000100B 48F7DB                  	neg rbx
  1401 0000100E 4801EB                  	add rbx, rbp
  1402 00001011 4889DC                  	mov rsp, rbx
  1403 00001014 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1404 00001018 FFE3                    	jmp rbx
  1405 0000101A C9                      	leave
  1406 0000101B C23800                  	ret AND_KILL_FRAME(5)
  1407                                  .L_lambda_opt_end_0054:	; new closure is in rax
  1408                                  	assert_closure(rax)
    65 0000101E 803805              <1>  cmp byte [%1], %2
    66 00001021 0F854D1B0000        <1>  jne L_error_incorrect_type
  1409 00001027 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1410 0000102B 53                      	push rbx
  1411 0000102C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1412 00001030 FFD3                    	call rbx
  1413 00001032 50                      	push rax
  1414 00001033 488B4538                	mov rax, PARAM(3)
  1415 00001037 50                      	push rax
  1416 00001038 488B4530                	mov rax, PARAM(2)
  1417 0000103C 50                      	push rax
  1418 0000103D 488B4528                	mov rax, PARAM(1)
  1419 00001041 50                      	push rax
  1420 00001042 488B4520                	mov rax, PARAM(0)
  1421 00001046 50                      	push rax
  1422 00001047 6A05                    	push 5
  1423 00001049 488B4510                	mov rax, qword [rbp + 8*2]
  1424 0000104D 488B4010                	mov rax, qword [rax + 8*2]
  1425 00001051 488B00                  	mov rax, qword [rax + 8*0]
  1426                                  	assert_closure(rax)
    65 00001054 803805              <1>  cmp byte [%1], %2
    66 00001057 0F85171B0000        <1>  jne L_error_incorrect_type
  1427 0000105D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1428 00001061 53                      	push rbx
  1429 00001062 FF7508                  	push RET_ADDR
  1430 00001065 488B6D00                	mov rbp, OLD_RDP
  1431 00001069 BE00000000              	mov rsi, 0
  1432                                  .L_tc_recycle_frame_loop_000d:	 ; start recycle frame loop
  1433 0000106E 4883FE08                	cmp rsi, 8
  1434 00001072 7427                    	je .L_tc_recycle_frame_done_000d
  1435 00001074 B907000000              	mov rcx, 7
  1436 00001079 4829F1                  	sub rcx, rsi
  1437 0000107C 48C1E103                	shl rcx, 3
  1438 00001080 4801E1                  	add rcx, rsp ; rcx is the index to move
  1439 00001083 4889F3                  	mov rbx, rsi
  1440 00001086 48C1E303                	shl rbx, 3
  1441 0000108A 48F7DB                  	neg rbx
  1442 0000108D 4801EB                  	add rbx, rbp ; rbx is the index to move to
  1443 00001090 488B09                  	mov rcx, [rcx]
  1444 00001093 48890B                  	mov [rbx], rcx
  1445 00001096 48FFC6                  	inc rsi
  1446 00001099 EBD3                    	jmp .L_tc_recycle_frame_loop_000d
  1447                                  .L_tc_recycle_frame_done_000d:	 ; end recycle frame loop
  1448 0000109B BB07000000              	mov rbx, 7
  1449 000010A0 48C1E303                	shl rbx, 3
  1450 000010A4 48F7DB                  	neg rbx
  1451 000010A7 4801EB                  	add rbx, rbp
  1452 000010AA 4889DC                  	mov rsp, rbx
  1453 000010AD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1454 000010B1 FFE3                    	jmp rbx
  1455 000010B3 C9                      	leave
  1456 000010B4 C23000                  	ret AND_KILL_FRAME(4)
  1457                                  .L_lambda_opt_end_0053:	; new closure is in rax
  1458                                  	assert_closure(rax)
    65 000010B7 803805              <1>  cmp byte [%1], %2
    66 000010BA 0F85B41A0000        <1>  jne L_error_incorrect_type
  1459 000010C0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1460 000010C4 53                      	push rbx
  1461 000010C5 FF7508                  	push RET_ADDR
  1462 000010C8 488B6D00                	mov rbp, OLD_RDP
  1463 000010CC BE00000000              	mov rsi, 0
  1464                                  .L_tc_recycle_frame_loop_000c:	 ; start recycle frame loop
  1465 000010D1 4883FE08                	cmp rsi, 8
  1466 000010D5 7427                    	je .L_tc_recycle_frame_done_000c
  1467 000010D7 B907000000              	mov rcx, 7
  1468 000010DC 4829F1                  	sub rcx, rsi
  1469 000010DF 48C1E103                	shl rcx, 3
  1470 000010E3 4801E1                  	add rcx, rsp ; rcx is the index to move
  1471 000010E6 4889F3                  	mov rbx, rsi
  1472 000010E9 48C1E303                	shl rbx, 3
  1473 000010ED 48F7DB                  	neg rbx
  1474 000010F0 4801EB                  	add rbx, rbp ; rbx is the index to move to
  1475 000010F3 488B09                  	mov rcx, [rcx]
  1476 000010F6 48890B                  	mov [rbx], rcx
  1477 000010F9 48FFC6                  	inc rsi
  1478 000010FC EBD3                    	jmp .L_tc_recycle_frame_loop_000c
  1479                                  .L_tc_recycle_frame_done_000c:	 ; end recycle frame loop
  1480 000010FE BB07000000              	mov rbx, 7
  1481 00001103 48C1E303                	shl rbx, 3
  1482 00001107 48F7DB                  	neg rbx
  1483 0000110A 4801EB                  	add rbx, rbp
  1484 0000110D 4889DC                  	mov rsp, rbx
  1485 00001110 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1486 00001114 FFE3                    	jmp rbx
  1487 00001116 C9                      	leave
  1488 00001117 C22800                  	ret AND_KILL_FRAME(3)
  1489                                  .L_lambda_opt_end_0052:	; new closure is in rax
  1490                                  	assert_closure(rax)
    65 0000111A 803805              <1>  cmp byte [%1], %2
    66 0000111D 0F85511A0000        <1>  jne L_error_incorrect_type
  1491 00001123 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1492 00001127 53                      	push rbx
  1493 00001128 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1494 0000112C FFD3                    	call rbx
  1495 0000112E 50                      	push rax
  1496 0000112F 488B4528                	mov rax, PARAM(1)
  1497 00001133 50                      	push rax
  1498 00001134 488B4520                	mov rax, PARAM(0)
  1499 00001138 50                      	push rax
  1500 00001139 6A03                    	push 3
  1501 0000113B 488B4510                	mov rax, qword [rbp + 8*2]
  1502 0000113F 488B00                  	mov rax, qword [rax + 8*0]
  1503 00001142 488B00                  	mov rax, qword [rax + 8*0]
  1504                                  	assert_closure(rax)
    65 00001145 803805              <1>  cmp byte [%1], %2
    66 00001148 0F85261A0000        <1>  jne L_error_incorrect_type
  1505 0000114E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1506 00001152 53                      	push rbx
  1507 00001153 FF7508                  	push RET_ADDR
  1508 00001156 488B6D00                	mov rbp, OLD_RDP
  1509 0000115A BE00000000              	mov rsi, 0
  1510                                  .L_tc_recycle_frame_loop_000b:	 ; start recycle frame loop
  1511 0000115F 4883FE06                	cmp rsi, 6
  1512 00001163 7427                    	je .L_tc_recycle_frame_done_000b
  1513 00001165 B905000000              	mov rcx, 5
  1514 0000116A 4829F1                  	sub rcx, rsi
  1515 0000116D 48C1E103                	shl rcx, 3
  1516 00001171 4801E1                  	add rcx, rsp ; rcx is the index to move
  1517 00001174 4889F3                  	mov rbx, rsi
  1518 00001177 48C1E303                	shl rbx, 3
  1519 0000117B 48F7DB                  	neg rbx
  1520 0000117E 4801EB                  	add rbx, rbp ; rbx is the index to move to
  1521 00001181 488B09                  	mov rcx, [rcx]
  1522 00001184 48890B                  	mov [rbx], rcx
  1523 00001187 48FFC6                  	inc rsi
  1524 0000118A EBD3                    	jmp .L_tc_recycle_frame_loop_000b
  1525                                  .L_tc_recycle_frame_done_000b:	 ; end recycle frame loop
  1526 0000118C BB05000000              	mov rbx, 5
  1527 00001191 48C1E303                	shl rbx, 3
  1528 00001195 48F7DB                  	neg rbx
  1529 00001198 4801EB                  	add rbx, rbp
  1530 0000119B 4889DC                  	mov rsp, rbx
  1531 0000119E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1532 000011A2 FFE3                    	jmp rbx
  1533 000011A4 C9                      	leave
  1534 000011A5 C22000                  	ret AND_KILL_FRAME(2)
  1535                                  .L_lambda_opt_end_0051:	; new closure is in rax
  1536                                  	assert_closure(rax)
    65 000011A8 803805              <1>  cmp byte [%1], %2
    66 000011AB 0F85C3190000        <1>  jne L_error_incorrect_type
  1537 000011B1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1538 000011B5 53                      	push rbx
  1539 000011B6 FF7508                  	push RET_ADDR
  1540 000011B9 488B6D00                	mov rbp, OLD_RDP
  1541 000011BD BE00000000              	mov rsi, 0
  1542                                  .L_tc_recycle_frame_loop_000a:	 ; start recycle frame loop
  1543 000011C2 4883FE08                	cmp rsi, 8
  1544 000011C6 7427                    	je .L_tc_recycle_frame_done_000a
  1545 000011C8 B907000000              	mov rcx, 7
  1546 000011CD 4829F1                  	sub rcx, rsi
  1547 000011D0 48C1E103                	shl rcx, 3
  1548 000011D4 4801E1                  	add rcx, rsp ; rcx is the index to move
  1549 000011D7 4889F3                  	mov rbx, rsi
  1550 000011DA 48C1E303                	shl rbx, 3
  1551 000011DE 48F7DB                  	neg rbx
  1552 000011E1 4801EB                  	add rbx, rbp ; rbx is the index to move to
  1553 000011E4 488B09                  	mov rcx, [rcx]
  1554 000011E7 48890B                  	mov [rbx], rcx
  1555 000011EA 48FFC6                  	inc rsi
  1556 000011ED EBD3                    	jmp .L_tc_recycle_frame_loop_000a
  1557                                  .L_tc_recycle_frame_done_000a:	 ; end recycle frame loop
  1558 000011EF BB07000000              	mov rbx, 7
  1559 000011F4 48C1E303                	shl rbx, 3
  1560 000011F8 48F7DB                  	neg rbx
  1561 000011FB 4801EB                  	add rbx, rbp
  1562 000011FE 4889DC                  	mov rsp, rbx
  1563 00001201 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1564 00001205 FFE3                    	jmp rbx
  1565 00001207 C9                      	leave
  1566 00001208 C21800                  	ret 8 * (2 + 1)
  1567                                  .L_lambda_simple_end_0012:	; new closure is in rax
  1568                                  	assert_closure(rax)
    65 0000120B 803805              <1>  cmp byte [%1], %2
    66 0000120E 0F8560190000        <1>  jne L_error_incorrect_type
  1569 00001214 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1570 00001218 53                      	push rbx
  1571 00001219 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1572 0000121D FFD3                    	call rbx
  1573                                  
  1574 0000121F 4889C7                  	mov rdi, rax
  1575 00001222 E8E8000000              	call print_sexpr_if_not_void
  1576                                  
  1577 00001227 48BF-                           mov rdi, fmt_memory_usage
  1577 00001229 [B901000000000000] 
  1578 00001231 488B3425[54020000]              mov rsi, qword [top_of_memory]
  1579 00001239 4881EE[C8010000]                sub rsi, memory
  1580 00001240 B800000000                      mov rax, 0
  1581                                  	ENTER
    56 00001245 C8000000            <1>  enter 0, 0
    57 00001249 4883E4F0            <1>  and rsp, ~15
  1582 0000124D E8(00000000)                    call printf
  1583                                  	LEAVE
    61 00001252 C9                  <1>  leave
  1584 00001253 C9                      	leave
  1585 00001254 C3                      	ret
  1586                                  
  1587                                  L_error_non_closure:
  1588 00001255 488B3C25[00000000]              mov rdi, qword [stderr]
  1589 0000125D 48BE-                           mov rsi, fmt_non_closure
  1589 0000125F [F001000000000000] 
  1590 00001267 B800000000                      mov rax, 0
  1591                                  	ENTER
    56 0000126C C8000000            <1>  enter 0, 0
    57 00001270 4883E4F0            <1>  and rsp, ~15
  1592 00001274 E8(00000000)                    call fprintf
  1593                                  	LEAVE
    61 00001279 C9                  <1>  leave
  1594 0000127A 48C7C0FEFFFFFF                  mov rax, -2
  1595 00001281 E8(00000000)                    call exit
  1596                                  
  1597                                  L_error_improper_list:
  1598 00001286 488B3C25[00000000]      	mov rdi, qword [stderr]
  1599 0000128E 48BE-                   	mov rsi, fmt_error_improper_list
  1599 00001290 [1802000000000000] 
  1600 00001298 B800000000              	mov rax, 0
  1601                                  	ENTER
    56 0000129D C8000000            <1>  enter 0, 0
    57 000012A1 4883E4F0            <1>  and rsp, ~15
  1602 000012A5 E8(00000000)            	call fprintf
  1603                                  	LEAVE
    61 000012AA C9                  <1>  leave
  1604 000012AB 48C7C0F9FFFFFF          	mov rax, -7
  1605 000012B2 E8(00000000)            	call exit
  1606                                  
  1607                                  L_error_incorrect_arity_simple:
  1608 000012B7 488B3C25[00000000]              mov rdi, qword [stderr]
  1609 000012BF 48BE-                           mov rsi, fmt_incorrect_arity_simple
  1609 000012C1 [5A01000000000000] 
  1610 000012C9 EB12                            jmp L_error_incorrect_arity_common
  1611                                  L_error_incorrect_arity_opt:
  1612 000012CB 488B3C25[00000000]              mov rdi, qword [stderr]
  1613 000012D3 48BE-                           mov rsi, fmt_incorrect_arity_opt
  1613 000012D5 [8501000000000000] 
  1614                                  L_error_incorrect_arity_common:
  1615 000012DD 5A                              pop rdx
  1616 000012DE 59                              pop rcx
  1617 000012DF B800000000                      mov rax, 0
  1618                                  	ENTER
    56 000012E4 C8000000            <1>  enter 0, 0
    57 000012E8 4883E4F0            <1>  and rsp, ~15
  1619 000012EC E8(00000000)                    call fprintf
  1620                                  	LEAVE
    61 000012F1 C9                  <1>  leave
  1621 000012F2 48C7C0FAFFFFFF                  mov rax, -6
  1622 000012F9 E8(00000000)                    call exit
  1623                                  
  1624                                  section .data
  1625                                  fmt_incorrect_arity_simple:
  1626 0000015A 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  1626 00000163 74656420256C642061-
  1626 0000016C 7267756D656E74732C-
  1626 00000175 206275742067697665-
  1626 0000017E 6E20256C640A00     
  1627                                  fmt_incorrect_arity_opt:
  1628 00000185 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  1628 0000018E 746564206174206C65-
  1628 00000197 61737420256C642061-
  1628 000001A0 7267756D656E74732C-
  1628 000001A9 206275742067697665-
  1628 000001B2 6E20256C640A00     
  1629                                  fmt_memory_usage:
  1630 000001B9 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  1630 000001C2 6420256C6420627974-
  1630 000001CB 6573206F662064796E-
  1630 000001D4 616D6963616C6C792D-
  1630 000001DD 616C6C6F6361746564-
  1630 000001E6 206D656D6F72790A0A-
  1630 000001EF 00                 
  1631                                  fmt_non_closure:
  1632 000001F0 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  1632 000001F9 7074696E6720746F20-
  1632 00000202 6170706C792061206E-
  1632 0000020B 6F6E2D636C6F737572-
  1632 00000214 65210A00           
  1633                                  fmt_error_improper_list:
  1634 00000218 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  1634 00000221 7267756D656E742069-
  1634 0000022A 73206E6F7420612070-
  1634 00000233 726F706572206C6973-
  1634 0000023C 74210A00           
  1635                                  fmt_test:
  1636 00000240 746573742068657265-             db `test here %d at %d\n\0`
  1636 00000249 202564206174202564-
  1636 00000252 0A00               
  1637                                  
  1638                                  section .bss
  1639                                  memory:
  1640 000001C8 <res 40000000h>         	resb gbytes(1)
  1641                                  
  1642                                  section .data
  1643                                  top_of_memory:
  1644 00000254 [C801000000000000]              dq memory
  1645                                  
  1646                                  section .text
  1647                                  malloc:
  1648 000012FE 488B0425[54020000]              mov rax, qword [top_of_memory]
  1649 00001306 48013C25[54020000]              add qword [top_of_memory], rdi
  1650 0000130E C3                              ret
  1651                                          
  1652                                  print_sexpr_if_not_void:
  1653 0000130F 4881FF[00000000]        	cmp rdi, sob_void
  1654 00001316 7501                    	jne print_sexpr
  1655 00001318 C3                      	ret
  1656                                  
  1657                                  section .data
  1658                                  fmt_void:
  1659 0000025C 233C766F69643E00        	db `#<void>\0`
  1660                                  fmt_nil:
  1661 00000264 282900                  	db `()\0`
  1662                                  fmt_boolean_false:
  1663 00000267 236600                  	db `#f\0`
  1664                                  fmt_boolean_true:
  1665 0000026A 237400                  	db `#t\0`
  1666                                  fmt_char_backslash:
  1667 0000026D 235C5C00                	db `#\\\\\0`
  1668                                  fmt_char_dquote:
  1669 00000271 235C2200                	db `#\\"\0`
  1670                                  fmt_char_simple:
  1671 00000275 235C256300              	db `#\\%c\0`
  1672                                  fmt_char_null:
  1673 0000027A 235C6E756C00            	db `#\\nul\0`
  1674                                  fmt_char_bell:
  1675 00000280 235C62656C6C00          	db `#\\bell\0`
  1676                                  fmt_char_backspace:
  1677 00000287 235C6261636B737061-     	db `#\\backspace\0`
  1677 00000290 636500             
  1678                                  fmt_char_tab:
  1679 00000293 235C74616200            	db `#\\tab\0`
  1680                                  fmt_char_newline:
  1681 00000299 235C6E65776C696E65-     	db `#\\newline\0`
  1681 000002A2 00                 
  1682                                  fmt_char_formfeed:
  1683 000002A3 235C7061676500          	db `#\\page\0`
  1684                                  fmt_char_return:
  1685 000002AA 235C72657475726E00      	db `#\\return\0`
  1686                                  fmt_char_escape:
  1687 000002B3 235C65736300            	db `#\\esc\0`
  1688                                  fmt_char_space:
  1689 000002B9 235C737061636500        	db `#\\space\0`
  1690                                  fmt_char_hex:
  1691 000002C1 235C782530325800        	db `#\\x%02X\0`
  1692                                  fmt_closure:
  1693 000002C9 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  1693 000002D2 206174203078253038-
  1693 000002DB 5820656E763D307825-
  1693 000002E4 30385820636F64653D-
  1693 000002ED 3078253038583E00   
  1694                                  fmt_lparen:
  1695 000002F5 2800                    	db `(\0`
  1696                                  fmt_dotted_pair:
  1697 000002F7 202E2000                	db ` . \0`
  1698                                  fmt_rparen:
  1699 000002FB 2900                    	db `)\0`
  1700                                  fmt_space:
  1701 000002FD 2000                    	db ` \0`
  1702                                  fmt_empty_vector:
  1703 000002FF 23282900                	db `#()\0`
  1704                                  fmt_vector:
  1705 00000303 232800                  	db `#(\0`
  1706                                  fmt_real:
  1707 00000306 256600                  	db `%f\0`
  1708                                  fmt_fraction:
  1709 00000309 256C642F256C6400        	db `%ld/%ld\0`
  1710                                  fmt_zero:
  1711 00000311 3000                    	db `0\0`
  1712                                  fmt_int:
  1713 00000313 256C6400                	db `%ld\0`
  1714                                  fmt_unknown_sexpr_error:
  1715 00000317 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
  1715 00000320 6F723A20556E6B6E6F-
  1715 00000329 776E2074797065206F-
  1715 00000332 662073657870722028-
  1715 0000033B 3078253032582920   
  1716 00000343 617420616464726573-     	db `at address 0x%08X\n\n\0`
  1716 0000034C 73203078253038580A-
  1716 00000355 0A00               
  1717                                  fmt_dquote:
  1718 00000357 2200                    	db `\"\0`
  1719                                  fmt_string_char:
  1720 00000359 256300                          db `%c\0`
  1721                                  fmt_string_char_7:
  1722 0000035C 5C6100                          db `\\a\0`
  1723                                  fmt_string_char_8:
  1724 0000035F 5C6200                          db `\\b\0`
  1725                                  fmt_string_char_9:
  1726 00000362 5C7400                          db `\\t\0`
  1727                                  fmt_string_char_10:
  1728 00000365 5C6E00                          db `\\n\0`
  1729                                  fmt_string_char_11:
  1730 00000368 5C7600                          db `\\v\0`
  1731                                  fmt_string_char_12:
  1732 0000036B 5C6600                          db `\\f\0`
  1733                                  fmt_string_char_13:
  1734 0000036E 5C7200                          db `\\r\0`
  1735                                  fmt_string_char_34:
  1736 00000371 5C2200                          db `\\"\0`
  1737                                  fmt_string_char_92:
  1738 00000374 5C5C00                          db `\\\\\0`
  1739                                  fmt_string_char_hex:
  1740 00000377 5C7825583B00                    db `\\x%X;\0`
  1741                                  
  1742                                  section .text
  1743                                  
  1744                                  print_sexpr:
  1745                                  	ENTER
    56 00001319 C8000000            <1>  enter 0, 0
    57 0000131D 4883E4F0            <1>  and rsp, ~15
  1746 00001321 8A07                    	mov al, byte [rdi]
  1747 00001323 3C00                    	cmp al, T_void
  1748 00001325 744D                    	je .Lvoid
  1749 00001327 3C01                    	cmp al, T_nil
  1750 00001329 7458                    	je .Lnil
  1751 0000132B 3C09                    	cmp al, T_boolean_false
  1752 0000132D 7463                    	je .Lboolean_false
  1753 0000132F 3C0A                    	cmp al, T_boolean_true
  1754 00001331 746E                    	je .Lboolean_true
  1755 00001333 3C02                    	cmp al, T_char
  1756 00001335 7479                    	je .Lchar
  1757 00001337 3C04                    	cmp al, T_symbol
  1758 00001339 0F84BB010000            	je .Lsymbol
  1759 0000133F 3C21                    	cmp al, T_pair
  1760 00001341 0F84D6010000            	je .Lpair
  1761 00001347 3C22                    	cmp al, T_vector
  1762 00001349 0F849F020000            	je .Lvector
  1763 0000134F 3C05                    	cmp al, T_closure
  1764 00001351 0F8489010000            	je .Lclosure
  1765 00001357 3C12                    	cmp al, T_real
  1766 00001359 0F8430030000            	je .Lreal
  1767 0000135F 3C11                    	cmp al, T_rational
  1768 00001361 0F8456030000            	je .Lrational
  1769 00001367 3C03                    	cmp al, T_string
  1770 00001369 0F848F030000            	je .Lstring
  1771                                  
  1772 0000136F E9C7040000              	jmp .Lunknown_sexpr_type
  1773                                  
  1774                                  .Lvoid:
  1775 00001374 48BF-                   	mov rdi, fmt_void
  1775 00001376 [5C02000000000000] 
  1776 0000137E E9F5040000              	jmp .Lemit
  1777                                  
  1778                                  .Lnil:
  1779 00001383 48BF-                   	mov rdi, fmt_nil
  1779 00001385 [6402000000000000] 
  1780 0000138D E9E6040000              	jmp .Lemit
  1781                                  
  1782                                  .Lboolean_false:
  1783 00001392 48BF-                   	mov rdi, fmt_boolean_false
  1783 00001394 [6702000000000000] 
  1784 0000139C E9D7040000              	jmp .Lemit
  1785                                  
  1786                                  .Lboolean_true:
  1787 000013A1 48BF-                   	mov rdi, fmt_boolean_true
  1787 000013A3 [6A02000000000000] 
  1788 000013AB E9C8040000              	jmp .Lemit
  1789                                  
  1790                                  .Lchar:
  1791 000013B0 8A4701                  	mov al, byte [rdi + 1]
  1792 000013B3 3C20                    	cmp al, ' '
  1793 000013B5 7E28                    	jle .Lchar_whitespace
  1794 000013B7 3C5C                    	cmp al, 92 		; backslash
  1795 000013B9 0F847C000000            	je .Lchar_backslash
  1796 000013BF 3C22                    	cmp al, '"'
  1797 000013C1 0F8483000000            	je .Lchar_dquote
  1798 000013C7 4825FF000000            	and rax, 255
  1799 000013CD 48BF-                   	mov rdi, fmt_char_simple
  1799 000013CF [7502000000000000] 
  1800 000013D7 4889C6                  	mov rsi, rax
  1801 000013DA E999040000              	jmp .Lemit
  1802                                  
  1803                                  .Lchar_whitespace:
  1804 000013DF 3C00                    	cmp al, 0
  1805 000013E1 7476                    	je .Lchar_null
  1806 000013E3 3C07                    	cmp al, 7
  1807 000013E5 0F847D000000            	je .Lchar_bell
  1808 000013EB 3C08                    	cmp al, 8
  1809 000013ED 0F8484000000            	je .Lchar_backspace
  1810 000013F3 3C09                    	cmp al, 9
  1811 000013F5 0F848B000000            	je .Lchar_tab
  1812 000013FB 3C0A                    	cmp al, 10
  1813 000013FD 0F8492000000            	je .Lchar_newline
  1814 00001403 3C0C                    	cmp al, 12
  1815 00001405 0F8499000000            	je .Lchar_formfeed
  1816 0000140B 3C0D                    	cmp al, 13
  1817 0000140D 0F84A0000000            	je .Lchar_return
  1818 00001413 3C1B                    	cmp al, 27
  1819 00001415 0F84A7000000            	je .Lchar_escape
  1820 0000141B 4825FF000000            	and rax, 255
  1821 00001421 3C20                    	cmp al, ' '
  1822 00001423 0F84A8000000            	je .Lchar_space
  1823 00001429 48BF-                   	mov rdi, fmt_char_hex
  1823 0000142B [C102000000000000] 
  1824 00001433 4889C6                  	mov rsi, rax
  1825 00001436 E93D040000              	jmp .Lemit	
  1826                                  
  1827                                  .Lchar_backslash:
  1828 0000143B 48BF-                   	mov rdi, fmt_char_backslash
  1828 0000143D [6D02000000000000] 
  1829 00001445 E92E040000              	jmp .Lemit
  1830                                  
  1831                                  .Lchar_dquote:
  1832 0000144A 48BF-                   	mov rdi, fmt_char_dquote
  1832 0000144C [7102000000000000] 
  1833 00001454 E91F040000              	jmp .Lemit
  1834                                  
  1835                                  .Lchar_null:
  1836 00001459 48BF-                   	mov rdi, fmt_char_null
  1836 0000145B [7A02000000000000] 
  1837 00001463 E910040000              	jmp .Lemit
  1838                                  
  1839                                  .Lchar_bell:
  1840 00001468 48BF-                   	mov rdi, fmt_char_bell
  1840 0000146A [8002000000000000] 
  1841 00001472 E901040000              	jmp .Lemit
  1842                                  
  1843                                  .Lchar_backspace:
  1844 00001477 48BF-                   	mov rdi, fmt_char_backspace
  1844 00001479 [8702000000000000] 
  1845 00001481 E9F2030000              	jmp .Lemit
  1846                                  
  1847                                  .Lchar_tab:
  1848 00001486 48BF-                   	mov rdi, fmt_char_tab
  1848 00001488 [9302000000000000] 
  1849 00001490 E9E3030000              	jmp .Lemit
  1850                                  
  1851                                  .Lchar_newline:
  1852 00001495 48BF-                   	mov rdi, fmt_char_newline
  1852 00001497 [9902000000000000] 
  1853 0000149F E9D4030000              	jmp .Lemit
  1854                                  
  1855                                  .Lchar_formfeed:
  1856 000014A4 48BF-                   	mov rdi, fmt_char_formfeed
  1856 000014A6 [A302000000000000] 
  1857 000014AE E9C5030000              	jmp .Lemit
  1858                                  
  1859                                  .Lchar_return:
  1860 000014B3 48BF-                   	mov rdi, fmt_char_return
  1860 000014B5 [AA02000000000000] 
  1861 000014BD E9B6030000              	jmp .Lemit
  1862                                  
  1863                                  .Lchar_escape:
  1864 000014C2 48BF-                   	mov rdi, fmt_char_escape
  1864 000014C4 [B302000000000000] 
  1865 000014CC E9A7030000              	jmp .Lemit
  1866                                  
  1867                                  .Lchar_space:
  1868 000014D1 48BF-                   	mov rdi, fmt_char_space
  1868 000014D3 [B902000000000000] 
  1869 000014DB E998030000              	jmp .Lemit
  1870                                  
  1871                                  .Lclosure:
  1872 000014E0 4889FE                  	mov rsi, qword rdi
  1873 000014E3 48BF-                   	mov rdi, fmt_closure
  1873 000014E5 [C902000000000000] 
  1874 000014ED 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1875 000014F1 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1876 000014F5 E97E030000              	jmp .Lemit
  1877                                  
  1878                                  .Lsymbol:
  1879 000014FA 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1880 000014FE BE01000000              	mov rsi, 1		 ; size = 1 byte
  1881 00001503 488B5701                	mov rdx, qword [rdi + 1] ; length
  1882 00001507 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1883 0000150B 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1884 00001513 E8(00000000)            	call fwrite
  1885 00001518 E970030000              	jmp .Lend
  1886                                  	
  1887                                  .Lpair:
  1888 0000151D 57                      	push rdi
  1889 0000151E 48BF-                   	mov rdi, fmt_lparen
  1889 00001520 [F502000000000000] 
  1890 00001528 B800000000              	mov rax, 0
  1891                                          ENTER
    56 0000152D C8000000            <1>  enter 0, 0
    57 00001531 4883E4F0            <1>  and rsp, ~15
  1892 00001535 E8(00000000)            	call printf
  1893                                          LEAVE
    61 0000153A C9                  <1>  leave
  1894 0000153B 488B3C24                	mov rdi, qword [rsp] 	; pair
  1895 0000153F 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1896 00001543 E8D1FDFFFF              	call print_sexpr
  1897 00001548 5F                      	pop rdi 		; pair
  1898 00001549 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1899                                  .Lcdr:
  1900 0000154D 8A07                    	mov al, byte [rdi]
  1901 0000154F 3C01                    	cmp al, T_nil
  1902 00001551 7447                    	je .Lcdr_nil
  1903 00001553 3C21                    	cmp al, T_pair
  1904 00001555 7462                    	je .Lcdr_pair
  1905 00001557 57                      	push rdi
  1906 00001558 48BF-                   	mov rdi, fmt_dotted_pair
  1906 0000155A [F702000000000000] 
  1907 00001562 B800000000              	mov rax, 0
  1908                                  	ENTER
    56 00001567 C8000000            <1>  enter 0, 0
    57 0000156B 4883E4F0            <1>  and rsp, ~15
  1909 0000156F E8(00000000)            	call printf
  1910                                  	LEAVE
    61 00001574 C9                  <1>  leave
  1911 00001575 5F                      	pop rdi
  1912 00001576 E89EFDFFFF              	call print_sexpr
  1913 0000157B 48BF-                   	mov rdi, fmt_rparen
  1913 0000157D [FB02000000000000] 
  1914 00001585 B800000000              	mov rax, 0
  1915                                  	ENTER
    56 0000158A C8000000            <1>  enter 0, 0
    57 0000158E 4883E4F0            <1>  and rsp, ~15
  1916 00001592 E8(00000000)            	call printf
  1917                                  	LEAVE
    61 00001597 C9                  <1>  leave
  1918                                  	LEAVE
    61 00001598 C9                  <1>  leave
  1919 00001599 C3                      	ret
  1920                                  
  1921                                  .Lcdr_nil:
  1922 0000159A 48BF-                   	mov rdi, fmt_rparen
  1922 0000159C [FB02000000000000] 
  1923 000015A4 B800000000              	mov rax, 0
  1924                                  	ENTER
    56 000015A9 C8000000            <1>  enter 0, 0
    57 000015AD 4883E4F0            <1>  and rsp, ~15
  1925 000015B1 E8(00000000)            	call printf
  1926                                  	LEAVE
    61 000015B6 C9                  <1>  leave
  1927                                  	LEAVE
    61 000015B7 C9                  <1>  leave
  1928 000015B8 C3                      	ret
  1929                                  
  1930                                  .Lcdr_pair:
  1931 000015B9 57                      	push rdi
  1932 000015BA 48BF-                   	mov rdi, fmt_space
  1932 000015BC [FD02000000000000] 
  1933 000015C4 B800000000              	mov rax, 0
  1934                                  	ENTER
    56 000015C9 C8000000            <1>  enter 0, 0
    57 000015CD 4883E4F0            <1>  and rsp, ~15
  1935 000015D1 E8(00000000)            	call printf
  1936                                  	LEAVE
    61 000015D6 C9                  <1>  leave
  1937 000015D7 488B3C24                	mov rdi, qword [rsp]
  1938 000015DB 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1939 000015DF E835FDFFFF              	call print_sexpr
  1940 000015E4 5F                      	pop rdi
  1941 000015E5 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1942 000015E9 E95FFFFFFF              	jmp .Lcdr
  1943                                  
  1944                                  .Lvector:
  1945 000015EE 488B4701                	mov rax, qword [rdi + 1] ; length
  1946 000015F2 4883F800                	cmp rax, 0
  1947 000015F6 0F8484000000            	je .Lvector_empty
  1948 000015FC 57                      	push rdi
  1949 000015FD 48BF-                   	mov rdi, fmt_vector
  1949 000015FF [0303000000000000] 
  1950 00001607 B800000000              	mov rax, 0
  1951                                  	ENTER
    56 0000160C C8000000            <1>  enter 0, 0
    57 00001610 4883E4F0            <1>  and rsp, ~15
  1952 00001614 E8(00000000)            	call printf
  1953                                  	LEAVE
    61 00001619 C9                  <1>  leave
  1954 0000161A 488B3C24                	mov rdi, qword [rsp]
  1955 0000161E FF7701                  	push qword [rdi + 1]
  1956 00001621 6A01                    	push 1
  1957 00001623 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1958 00001627 E8EDFCFFFF              	call print_sexpr
  1959                                  .Lvector_loop:
  1960                                  	; [rsp] index
  1961                                  	; [rsp + 8*1] limit
  1962                                  	; [rsp + 8*2] vector
  1963 0000162C 488B0424                	mov rax, qword [rsp]
  1964 00001630 483B442408              	cmp rax, qword [rsp + 8*1]
  1965 00001635 7436                    	je .Lvector_end
  1966 00001637 48BF-                   	mov rdi, fmt_space
  1966 00001639 [FD02000000000000] 
  1967 00001641 B800000000              	mov rax, 0
  1968                                  	ENTER
    56 00001646 C8000000            <1>  enter 0, 0
    57 0000164A 4883E4F0            <1>  and rsp, ~15
  1969 0000164E E8(00000000)            	call printf
  1970                                  	LEAVE
    61 00001653 C9                  <1>  leave
  1971 00001654 488B0424                	mov rax, qword [rsp]
  1972 00001658 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1973 0000165D 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1974 00001662 E8B2FCFFFF              	call print_sexpr
  1975 00001667 48FF0424                	inc qword [rsp]
  1976 0000166B EBBF                    	jmp .Lvector_loop
  1977                                  
  1978                                  .Lvector_end:
  1979 0000166D 4883C418                	add rsp, 8*3
  1980 00001671 48BF-                   	mov rdi, fmt_rparen
  1980 00001673 [FB02000000000000] 
  1981 0000167B E9F8010000              	jmp .Lemit	
  1982                                  
  1983                                  .Lvector_empty:
  1984 00001680 48BF-                   	mov rdi, fmt_empty_vector
  1984 00001682 [FF02000000000000] 
  1985 0000168A E9E9010000              	jmp .Lemit
  1986                                  
  1987                                  .Lreal:
  1988 0000168F FF7701                  	push qword [rdi + 1]
  1989 00001692 F20F100424              	movsd xmm0, qword [rsp]
  1990 00001697 4883C408                	add rsp, 8*1
  1991 0000169B 48BF-                   	mov rdi, fmt_real
  1991 0000169D [0603000000000000] 
  1992 000016A5 B801000000              	mov rax, 1
  1993                                  	ENTER
    56 000016AA C8000000            <1>  enter 0, 0
    57 000016AE 4883E4F0            <1>  and rsp, ~15
  1994 000016B2 E8(00000000)            	call printf
  1995                                  	LEAVE
    61 000016B7 C9                  <1>  leave
  1996 000016B8 E9D0010000              	jmp .Lend
  1997                                  
  1998                                  .Lrational:
  1999 000016BD 488B7701                	mov rsi, qword [rdi + 1]
  2000 000016C1 488B5709                	mov rdx, qword [rdi + 1 + 8]
  2001 000016C5 4883FE00                	cmp rsi, 0
  2002 000016C9 7415                    	je .Lrat_zero
  2003 000016CB 4883FA01                	cmp rdx, 1
  2004 000016CF 741E                    	je .Lrat_int
  2005 000016D1 48BF-                   	mov rdi, fmt_fraction
  2005 000016D3 [0903000000000000] 
  2006 000016DB E998010000              	jmp .Lemit
  2007                                  
  2008                                  .Lrat_zero:
  2009 000016E0 48BF-                   	mov rdi, fmt_zero
  2009 000016E2 [1103000000000000] 
  2010 000016EA E989010000              	jmp .Lemit
  2011                                  
  2012                                  .Lrat_int:
  2013 000016EF 48BF-                   	mov rdi, fmt_int
  2013 000016F1 [1303000000000000] 
  2014 000016F9 E97A010000              	jmp .Lemit
  2015                                  
  2016                                  .Lstring:
  2017 000016FE 488D4709                	lea rax, [rdi + 1 + 8]
  2018 00001702 50                      	push rax
  2019 00001703 FF7701                  	push qword [rdi + 1]
  2020 00001706 48BF-                   	mov rdi, fmt_dquote
  2020 00001708 [5703000000000000] 
  2021 00001710 B800000000              	mov rax, 0
  2022                                  	ENTER
    56 00001715 C8000000            <1>  enter 0, 0
    57 00001719 4883E4F0            <1>  and rsp, ~15
  2023 0000171D E8(00000000)            	call printf
  2024                                  	LEAVE
    61 00001722 C9                  <1>  leave
  2025                                  .Lstring_loop:
  2026                                  	; qword [rsp]: limit
  2027                                  	; qword [rsp + 8*1]: char *
  2028 00001723 48833C2400              	cmp qword [rsp], 0
  2029 00001728 0F84FD000000            	je .Lstring_end
  2030 0000172E 488B442408              	mov rax, qword [rsp + 8*1]
  2031 00001733 8A00                    	mov al, byte [rax]
  2032 00001735 4825FF000000            	and rax, 255
  2033 0000173B 3C07                    	cmp al, 7
  2034 0000173D 7468                            je .Lstring_char_7
  2035 0000173F 3C08                            cmp al, 8
  2036 00001741 7470                            je .Lstring_char_8
  2037 00001743 3C09                            cmp al, 9
  2038 00001745 7478                            je .Lstring_char_9
  2039 00001747 3C0A                            cmp al, 10
  2040 00001749 0F847C000000                    je .Lstring_char_10
  2041 0000174F 3C0B                            cmp al, 11
  2042 00001751 0F8480000000                    je .Lstring_char_11
  2043 00001757 3C0C                            cmp al, 12
  2044 00001759 0F8484000000                    je .Lstring_char_12
  2045 0000175F 3C0D                            cmp al, 13
  2046 00001761 0F8488000000                    je .Lstring_char_13
  2047 00001767 3C22                            cmp al, 34
  2048 00001769 0F848C000000                    je .Lstring_char_34
  2049 0000176F 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  2051 00001771 3C20                            cmp al, ' '
  2052 00001773 0F8CA0000000                    jl .Lstring_char_hex
  2053 00001779 48BF-                           mov rdi, fmt_string_char
  2053 0000177B [5903000000000000] 
  2054 00001783 4889C6                          mov rsi, rax
  2055                                  .Lstring_char_emit:
  2056 00001786 B800000000                      mov rax, 0
  2057                                          ENTER
    56 0000178B C8000000            <1>  enter 0, 0
    57 0000178F 4883E4F0            <1>  and rsp, ~15
  2058 00001793 E8(00000000)                    call printf
  2059                                          LEAVE
    61 00001798 C9                  <1>  leave
  2060 00001799 48FF0C24                        dec qword [rsp]
  2061 0000179D 48FF442408                      inc qword [rsp + 8*1]
  2062 000017A2 E97CFFFFFF                      jmp .Lstring_loop
  2063                                  
  2064                                  .Lstring_char_7:
  2065 000017A7 48BF-                           mov rdi, fmt_string_char_7
  2065 000017A9 [5C03000000000000] 
  2066 000017B1 EBD3                            jmp .Lstring_char_emit
  2067                                  
  2068                                  .Lstring_char_8:
  2069 000017B3 48BF-                           mov rdi, fmt_string_char_8
  2069 000017B5 [5F03000000000000] 
  2070 000017BD EBC7                            jmp .Lstring_char_emit
  2071                                          
  2072                                  .Lstring_char_9:
  2073 000017BF 48BF-                           mov rdi, fmt_string_char_9
  2073 000017C1 [6203000000000000] 
  2074 000017C9 EBBB                            jmp .Lstring_char_emit
  2075                                  
  2076                                  .Lstring_char_10:
  2077 000017CB 48BF-                           mov rdi, fmt_string_char_10
  2077 000017CD [6503000000000000] 
  2078 000017D5 EBAF                            jmp .Lstring_char_emit
  2079                                  
  2080                                  .Lstring_char_11:
  2081 000017D7 48BF-                           mov rdi, fmt_string_char_11
  2081 000017D9 [6803000000000000] 
  2082 000017E1 EBA3                            jmp .Lstring_char_emit
  2083                                  
  2084                                  .Lstring_char_12:
  2085 000017E3 48BF-                           mov rdi, fmt_string_char_12
  2085 000017E5 [6B03000000000000] 
  2086 000017ED EB97                            jmp .Lstring_char_emit
  2087                                  
  2088                                  .Lstring_char_13:
  2089 000017EF 48BF-                           mov rdi, fmt_string_char_13
  2089 000017F1 [6E03000000000000] 
  2090 000017F9 EB8B                            jmp .Lstring_char_emit
  2091                                  
  2092                                  .Lstring_char_34:
  2093 000017FB 48BF-                           mov rdi, fmt_string_char_34
  2093 000017FD [7103000000000000] 
  2094 00001805 E97CFFFFFF                      jmp .Lstring_char_emit
  2095                                  
  2096                                  .Lstring_char_92:
  2097 0000180A 48BF-                           mov rdi, fmt_string_char_92
  2097 0000180C [7403000000000000] 
  2098 00001814 E96DFFFFFF                      jmp .Lstring_char_emit
  2099                                  
  2100                                  .Lstring_char_hex:
  2101 00001819 48BF-                           mov rdi, fmt_string_char_hex
  2101 0000181B [7703000000000000] 
  2102 00001823 4889C6                          mov rsi, rax
  2103 00001826 E95BFFFFFF                      jmp .Lstring_char_emit        
  2104                                  
  2105                                  .Lstring_end:
  2106 0000182B 4883C410                	add rsp, 8 * 2
  2107 0000182F 48BF-                   	mov rdi, fmt_dquote
  2107 00001831 [5703000000000000] 
  2108 00001839 EB3D                    	jmp .Lemit
  2109                                  
  2110                                  .Lunknown_sexpr_type:
  2111 0000183B 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  2111 0000183D [1703000000000000] 
  2112 00001845 4825FF000000            	and rax, 255
  2113 0000184B 4889C2                  	mov rdx, rax
  2114 0000184E 4889F9                  	mov rcx, rdi
  2115 00001851 488B3C25[00000000]      	mov rdi, qword [stderr]
  2116 00001859 B800000000              	mov rax, 0
  2117                                  	ENTER
    56 0000185E C8000000            <1>  enter 0, 0
    57 00001862 4883E4F0            <1>  and rsp, ~15
  2118 00001866 E8(00000000)            	call fprintf
  2119                                  	LEAVE
    61 0000186B C9                  <1>  leave
  2120 0000186C 48C7C0FFFFFFFF          	mov rax, -1
  2121 00001873 E8(00000000)            	call exit
  2122                                  
  2123                                  .Lemit:
  2124 00001878 B800000000              	mov rax, 0
  2125                                  	ENTER
    56 0000187D C8000000            <1>  enter 0, 0
    57 00001881 4883E4F0            <1>  and rsp, ~15
  2126 00001885 E8(00000000)            	call printf
  2127                                  	LEAVE
    61 0000188A C9                  <1>  leave
  2128 0000188B EB00                    	jmp .Lend
  2129                                  
  2130                                  .Lend:
  2131                                  	LEAVE
    61 0000188D C9                  <1>  leave
  2132 0000188E C3                      	ret
  2133                                  
  2134                                  ;;; rdi: address of free variable
  2135                                  ;;; rsi: address of code-pointer
  2136                                  bind_primitive:
  2137                                          ENTER
    56 0000188F C8000000            <1>  enter 0, 0
    57 00001893 4883E4F0            <1>  and rsp, ~15
  2138 00001897 57                              push rdi
  2139 00001898 BF11000000                      mov rdi, (1 + 8 + 8)
  2140 0000189D E85CFAFFFF                      call malloc
  2141 000018A2 5F                              pop rdi
  2142 000018A3 C60005                          mov byte [rax], T_closure
  2143 000018A6 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  2144 000018AE 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  2145 000018B2 488907                          mov qword [rdi], rax
  2146                                          LEAVE
    61 000018B5 C9                  <1>  leave
  2147 000018B6 C3                              ret
  2148                                  
  2149                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  2150                                  L_code_ptr_bin_apply:
  2151                                          ENTER
    56 000018B7 C8000000            <1>  enter 0, 0
    57 000018BB 4883E4F0            <1>  and rsp, ~15
  2152                                          ; loop over the list and push all its members
  2153 000018BF BE00000000                      mov rsi, 0
  2154 000018C4 488B5D18                        mov rbx, COUNT
  2155 000018C8 48FFCB                          dec rbx
  2156 000018CB 4883C304                        add rbx, 4
  2157 000018CF 48C1E303                        shl rbx, 3
  2158 000018D3 4801EB                          add rbx, rbp
  2159 000018D6 488B1B                          mov rbx, [rbx] ; rbx = [rbp + 8 * (4 + (COUNT-1))]
  2160                                  L_bin_apply_list_loop_start: ; start pushing list to stack
  2161 000018D9 803B01                          cmp byte [rbx], T_nil
  2162 000018DC 740C                            je L_bin_apply_list_loop_end
  2163 000018DE 48FFC6                          inc rsi
  2164 000018E1 FF7301                          push SOB_PAIR_CAR(rbx)
  2165 000018E4 488B5B09                        mov rbx, SOB_PAIR_CDR(rbx)
  2166 000018E8 EBEF                            jmp L_bin_apply_list_loop_start
  2167                                  L_bin_apply_list_loop_end: ; end pushing list to stack
  2168                                          ; flip the list on the stack
  2169 000018EA BB00000000                      mov rbx, 0 ; index
  2170                                  L_bin_apply_list_flip_start:
  2171 000018EF 4889F1                          mov rcx, rsi
  2172 000018F2 48FFC9                          dec rcx
  2173 000018F5 4829D9                          sub rcx, rbx ; rcx is the higher 
  2174 000018F8 4829D9                          sub rcx, rbx
  2175 000018FB 4883F900                        cmp rcx, 0
  2176 000018FF 7E27                            jle L_bin_apply_list_flip_end
  2177 00001901 4801D9                          add rcx, rbx ; rcx is the relative higher. rbx is the relative lower
  2178 00001904 4889DF                          mov rdi, rbx
  2179 00001907 48C1E703                        shl rdi, 3
  2180 0000190B 4801E7                          add rdi, rsp ; rdi is the absolute higher
  2181 0000190E 488B07                          mov rax, [rdi] ; rdi = [rsp + 8*rsi] ->  rax is the absolute higher value
  2182 00001911 48C1E103                        shl rcx, 3
  2183 00001915 4801E1                          add rcx, rsp ; rcx = rsp + 8*(length-1-index) -> rcx is the absolute lower
  2184 00001918 53                              push rbx ; save rbx
  2185 00001919 488B19                          mov rbx, [rcx]
  2186 0000191C 48891F                          mov [rdi], rbx ; [rsp + 8*rsi] = [rsp + 8*(length-1-index)]
  2187 0000191F 488901                          mov [rcx], rax ; [rsp + 8*(length-1-index)] = [rsp + 8*rsi]
  2188 00001922 5B                              pop rbx ; restore rbx
  2189 00001923 48FFC3                          inc rbx
  2190 00001926 EBC7                            jmp L_bin_apply_list_flip_start
  2191                                  L_bin_apply_list_flip_end:
  2192                                          ; push all the rest of the arguments
  2193 00001928 488B4D18                        mov rcx, COUNT
  2194 0000192C 4883E902                        sub rcx, 2
  2195                                  L_bin_apply_args_loop_start: ; start pushing the rest of args
  2196 00001930 4883F900                        cmp rcx, 0
  2197 00001934 741A                            je L_bin_apply_args_loop_end
  2198 00001936 48FFC6                          inc rsi ; for counting number of args
  2199 00001939 4889CB                          mov rbx, rcx
  2200 0000193C 4883C304                        add rbx, 4
  2201 00001940 48C1E303                        shl rbx, 3
  2202 00001944 4801EB                          add rbx, rbp
  2203 00001947 488B1B                          mov rbx, [rbx] ; rbx = [rbp + 8 * (4 + rcx)]
  2204 0000194A 53                              push rbx
  2205 0000194B 48FFC9                          dec rcx
  2206 0000194E EBE0                            jmp L_bin_apply_args_loop_start
  2207                                  L_bin_apply_args_loop_end:
  2208                                          ; push number of arguments
  2209 00001950 56                              push rsi
  2210                                          ; push lex env
  2211 00001951 488B4520                        mov rax, PARAM(0)
  2212 00001955 FF7001                          push SOB_CLOSURE_ENV(rax)
  2213                                          ; push ret add
  2214 00001958 FF7508                          push RET_ADDR
  2215                                          ; fix the stack
  2216                                          ; loop over the stack and move it to the top of the previos stack
  2217 0000195B 4889F2                          mov rdx, rsi
  2218 0000195E 488B6D00                        mov rbp, OLD_RDP
  2219 00001962 BE00000000                      mov rsi, 0
  2220                                  L_bin_apply_fix_stack_start:
  2221 00001967 4889D1                          mov rcx, rdx
  2222 0000196A 4883C103                        add rcx, 3
  2223 0000196E 4839CE                          cmp rsi, rcx
  2224 00001971 7429                            je L_bin_apply_fix_stack_end
  2225 00001973 4889D1                          mov rcx, rdx
  2226 00001976 4883C102                        add rcx, 2
  2227 0000197A 4829F1                          sub rcx, rsi
  2228 0000197D 48C1E103                        shl rcx, 3
  2229 00001981 4801E1                          add rcx, rsp ; rcx is the index to move
  2230 00001984 4889F3                          mov rbx, rsi
  2231 00001987 48C1E303                        shl rbx, 3
  2232 0000198B 48F7DB                          neg rbx
  2233 0000198E 4801EB                          add rbx, rbp ; rbx is the index to move to
  2234 00001991 488B09                          mov rcx, [rcx]
  2235 00001994 48890B                          mov [rbx], rcx
  2236 00001997 48FFC6                          inc rsi
  2237 0000199A EBCB                            jmp L_bin_apply_fix_stack_start
  2238                                  L_bin_apply_fix_stack_end:
  2239                                          ; fix rsp
  2240 0000199C 4889D3                          mov rbx, rdx
  2241 0000199F 4883C302                        add rbx, 2
  2242 000019A3 48C1E303                        shl rbx, 3
  2243 000019A7 48F7DB                          neg rbx
  2244 000019AA 4801EB                          add rbx, rbp
  2245 000019AD 4889DC                          mov rsp, rbx
  2246 000019B0 488B5809                        mov rbx, SOB_CLOSURE_CODE(rax)
  2247 000019B4 FFE3                            jmp rbx
  2248                                          LEAVE
    61 000019B6 C9                  <1>  leave
  2249                                  	
  2250                                  L_code_ptr_is_null:
  2251                                          ENTER
    56 000019B7 C8000000            <1>  enter 0, 0
    57 000019BB 4883E4F0            <1>  and rsp, ~15
  2252 000019BF 48837D1801                      cmp COUNT, 1
  2253 000019C4 0F85A5100000                    jne L_error_arg_count_1
  2254 000019CA 488B4520                        mov rax, PARAM(0)
  2255 000019CE 803801                          cmp byte [rax], T_nil
  2256 000019D1 750C                            jne .L_false
  2257 000019D3 48B8-                           mov rax, sob_boolean_true
  2257 000019D5 [0300000000000000] 
  2258 000019DD EB0A                            jmp .L_end
  2259                                  .L_false:
  2260 000019DF 48B8-                           mov rax, sob_boolean_false
  2260 000019E1 [0200000000000000] 
  2261                                  .L_end:
  2262                                          LEAVE
    61 000019E9 C9                  <1>  leave
  2263 000019EA C21800                          ret AND_KILL_FRAME(1)
  2264                                  
  2265                                  L_code_ptr_is_pair:
  2266                                          ENTER
    56 000019ED C8000000            <1>  enter 0, 0
    57 000019F1 4883E4F0            <1>  and rsp, ~15
  2267 000019F5 48837D1801                      cmp COUNT, 1
  2268 000019FA 0F856F100000                    jne L_error_arg_count_1
  2269 00001A00 488B4520                        mov rax, PARAM(0)
  2270 00001A04 803821                          cmp byte [rax], T_pair
  2271 00001A07 750C                            jne .L_false
  2272 00001A09 48B8-                           mov rax, sob_boolean_true
  2272 00001A0B [0300000000000000] 
  2273 00001A13 EB0A                            jmp .L_end
  2274                                  .L_false:
  2275 00001A15 48B8-                           mov rax, sob_boolean_false
  2275 00001A17 [0200000000000000] 
  2276                                  .L_end:
  2277                                          LEAVE
    61 00001A1F C9                  <1>  leave
  2278 00001A20 C21800                          ret AND_KILL_FRAME(1)
  2279                                          
  2280                                  L_code_ptr_is_void:
  2281                                          ENTER
    56 00001A23 C8000000            <1>  enter 0, 0
    57 00001A27 4883E4F0            <1>  and rsp, ~15
  2282 00001A2B 48837D1801                      cmp COUNT, 1
  2283 00001A30 0F8539100000                    jne L_error_arg_count_1
  2284 00001A36 488B4520                        mov rax, PARAM(0)
  2285 00001A3A 803800                          cmp byte [rax], T_void
  2286 00001A3D 750C                            jne .L_false
  2287 00001A3F 48B8-                           mov rax, sob_boolean_true
  2287 00001A41 [0300000000000000] 
  2288 00001A49 EB0A                            jmp .L_end
  2289                                  .L_false:
  2290 00001A4B 48B8-                           mov rax, sob_boolean_false
  2290 00001A4D [0200000000000000] 
  2291                                  .L_end:
  2292                                          LEAVE
    61 00001A55 C9                  <1>  leave
  2293 00001A56 C21800                          ret AND_KILL_FRAME(1)
  2294                                  
  2295                                  L_code_ptr_is_char:
  2296                                          ENTER
    56 00001A59 C8000000            <1>  enter 0, 0
    57 00001A5D 4883E4F0            <1>  and rsp, ~15
  2297 00001A61 48837D1801                      cmp COUNT, 1
  2298 00001A66 0F8503100000                    jne L_error_arg_count_1
  2299 00001A6C 488B4520                        mov rax, PARAM(0)
  2300 00001A70 803802                          cmp byte [rax], T_char
  2301 00001A73 750C                            jne .L_false
  2302 00001A75 48B8-                           mov rax, sob_boolean_true
  2302 00001A77 [0300000000000000] 
  2303 00001A7F EB0A                            jmp .L_end
  2304                                  .L_false:
  2305 00001A81 48B8-                           mov rax, sob_boolean_false
  2305 00001A83 [0200000000000000] 
  2306                                  .L_end:
  2307                                          LEAVE
    61 00001A8B C9                  <1>  leave
  2308 00001A8C C21800                          ret AND_KILL_FRAME(1)
  2309                                  
  2310                                  L_code_ptr_is_string:
  2311                                          ENTER
    56 00001A8F C8000000            <1>  enter 0, 0
    57 00001A93 4883E4F0            <1>  and rsp, ~15
  2312 00001A97 48837D1801                      cmp COUNT, 1
  2313 00001A9C 0F85CD0F0000                    jne L_error_arg_count_1
  2314 00001AA2 488B4520                        mov rax, PARAM(0)
  2315 00001AA6 803803                          cmp byte [rax], T_string
  2316 00001AA9 750C                            jne .L_false
  2317 00001AAB 48B8-                           mov rax, sob_boolean_true
  2317 00001AAD [0300000000000000] 
  2318 00001AB5 EB0A                            jmp .L_end
  2319                                  .L_false:
  2320 00001AB7 48B8-                           mov rax, sob_boolean_false
  2320 00001AB9 [0200000000000000] 
  2321                                  .L_end:
  2322                                          LEAVE
    61 00001AC1 C9                  <1>  leave
  2323 00001AC2 C21800                          ret AND_KILL_FRAME(1)
  2324                                  
  2325                                  L_code_ptr_is_symbol:
  2326                                          ENTER
    56 00001AC5 C8000000            <1>  enter 0, 0
    57 00001AC9 4883E4F0            <1>  and rsp, ~15
  2327 00001ACD 48837D1801                      cmp COUNT, 1
  2328 00001AD2 0F85970F0000                    jne L_error_arg_count_1
  2329 00001AD8 488B4520                        mov rax, PARAM(0)
  2330 00001ADC 803804                          cmp byte [rax], T_symbol
  2331 00001ADF 750C                            jne .L_false
  2332 00001AE1 48B8-                           mov rax, sob_boolean_true
  2332 00001AE3 [0300000000000000] 
  2333 00001AEB EB0A                            jmp .L_end
  2334                                  .L_false:
  2335 00001AED 48B8-                           mov rax, sob_boolean_false
  2335 00001AEF [0200000000000000] 
  2336                                  .L_end:
  2337                                          LEAVE
    61 00001AF7 C9                  <1>  leave
  2338 00001AF8 C21800                          ret AND_KILL_FRAME(1)
  2339                                  
  2340                                  L_code_ptr_is_vector:
  2341                                          ENTER
    56 00001AFB C8000000            <1>  enter 0, 0
    57 00001AFF 4883E4F0            <1>  and rsp, ~15
  2342 00001B03 48837D1801                      cmp COUNT, 1
  2343 00001B08 0F85610F0000                    jne L_error_arg_count_1
  2344 00001B0E 488B4520                        mov rax, PARAM(0)
  2345 00001B12 803822                          cmp byte [rax], T_vector
  2346 00001B15 750C                            jne .L_false
  2347 00001B17 48B8-                           mov rax, sob_boolean_true
  2347 00001B19 [0300000000000000] 
  2348 00001B21 EB0A                            jmp .L_end
  2349                                  .L_false:
  2350 00001B23 48B8-                           mov rax, sob_boolean_false
  2350 00001B25 [0200000000000000] 
  2351                                  .L_end:
  2352                                          LEAVE
    61 00001B2D C9                  <1>  leave
  2353 00001B2E C21800                          ret AND_KILL_FRAME(1)
  2354                                  
  2355                                  L_code_ptr_is_closure:
  2356                                          ENTER
    56 00001B31 C8000000            <1>  enter 0, 0
    57 00001B35 4883E4F0            <1>  and rsp, ~15
  2357 00001B39 48837D1801                      cmp COUNT, 1
  2358 00001B3E 0F852B0F0000                    jne L_error_arg_count_1
  2359 00001B44 488B4520                        mov rax, PARAM(0)
  2360 00001B48 803805                          cmp byte [rax], T_closure
  2361 00001B4B 750C                            jne .L_false
  2362 00001B4D 48B8-                           mov rax, sob_boolean_true
  2362 00001B4F [0300000000000000] 
  2363 00001B57 EB0A                            jmp .L_end
  2364                                  .L_false:
  2365 00001B59 48B8-                           mov rax, sob_boolean_false
  2365 00001B5B [0200000000000000] 
  2366                                  .L_end:
  2367                                          LEAVE
    61 00001B63 C9                  <1>  leave
  2368 00001B64 C21800                          ret AND_KILL_FRAME(1)
  2369                                  
  2370                                  L_code_ptr_is_real:
  2371                                          ENTER
    56 00001B67 C8000000            <1>  enter 0, 0
    57 00001B6B 4883E4F0            <1>  and rsp, ~15
  2372 00001B6F 48837D1801                      cmp COUNT, 1
  2373 00001B74 0F85F50E0000                    jne L_error_arg_count_1
  2374 00001B7A 488B4520                        mov rax, PARAM(0)
  2375 00001B7E 803812                          cmp byte [rax], T_real
  2376 00001B81 750C                            jne .L_false
  2377 00001B83 48B8-                           mov rax, sob_boolean_true
  2377 00001B85 [0300000000000000] 
  2378 00001B8D EB0A                            jmp .L_end
  2379                                  .L_false:
  2380 00001B8F 48B8-                           mov rax, sob_boolean_false
  2380 00001B91 [0200000000000000] 
  2381                                  .L_end:
  2382                                          LEAVE
    61 00001B99 C9                  <1>  leave
  2383 00001B9A C21800                          ret AND_KILL_FRAME(1)
  2384                                  
  2385                                  L_code_ptr_is_rational:
  2386                                          ENTER
    56 00001B9D C8000000            <1>  enter 0, 0
    57 00001BA1 4883E4F0            <1>  and rsp, ~15
  2387 00001BA5 48837D1801                      cmp COUNT, 1
  2388 00001BAA 0F85BF0E0000                    jne L_error_arg_count_1
  2389 00001BB0 488B4520                        mov rax, PARAM(0)
  2390 00001BB4 803811                          cmp byte [rax], T_rational
  2391 00001BB7 750C                            jne .L_false
  2392 00001BB9 48B8-                           mov rax, sob_boolean_true
  2392 00001BBB [0300000000000000] 
  2393 00001BC3 EB0A                            jmp .L_end
  2394                                  .L_false:
  2395 00001BC5 48B8-                           mov rax, sob_boolean_false
  2395 00001BC7 [0200000000000000] 
  2396                                  .L_end:
  2397                                          LEAVE
    61 00001BCF C9                  <1>  leave
  2398 00001BD0 C21800                          ret AND_KILL_FRAME(1)
  2399                                  
  2400                                  L_code_ptr_is_boolean:
  2401                                          ENTER
    56 00001BD3 C8000000            <1>  enter 0, 0
    57 00001BD7 4883E4F0            <1>  and rsp, ~15
  2402 00001BDB 48837D1801                      cmp COUNT, 1
  2403 00001BE0 0F85890E0000                    jne L_error_arg_count_1
  2404 00001BE6 488B4520                        mov rax, PARAM(0)
  2405 00001BEA 8A18                            mov bl, byte [rax]
  2406 00001BEC 80E308                          and bl, T_boolean
  2407 00001BEF 740C                            je .L_false
  2408 00001BF1 48B8-                           mov rax, sob_boolean_true
  2408 00001BF3 [0300000000000000] 
  2409 00001BFB EB0A                            jmp .L_end
  2410                                  .L_false:
  2411 00001BFD 48B8-                           mov rax, sob_boolean_false
  2411 00001BFF [0200000000000000] 
  2412                                  .L_end:
  2413                                          LEAVE
    61 00001C07 C9                  <1>  leave
  2414 00001C08 C21800                          ret AND_KILL_FRAME(1)
  2415                                          
  2416                                  L_code_ptr_is_number:
  2417                                          ENTER
    56 00001C0B C8000000            <1>  enter 0, 0
    57 00001C0F 4883E4F0            <1>  and rsp, ~15
  2418 00001C13 48837D1801                      cmp COUNT, 1
  2419 00001C18 0F85510E0000                    jne L_error_arg_count_1
  2420 00001C1E 488B4520                        mov rax, PARAM(0)
  2421 00001C22 8A18                            mov bl, byte [rax]
  2422 00001C24 80E310                          and bl, T_number
  2423 00001C27 740C                            je .L_false
  2424 00001C29 48B8-                           mov rax, sob_boolean_true
  2424 00001C2B [0300000000000000] 
  2425 00001C33 EB0A                            jmp .L_end
  2426                                  .L_false:
  2427 00001C35 48B8-                           mov rax, sob_boolean_false
  2427 00001C37 [0200000000000000] 
  2428                                  .L_end:
  2429                                          LEAVE
    61 00001C3F C9                  <1>  leave
  2430 00001C40 C21800                          ret AND_KILL_FRAME(1)
  2431                                          
  2432                                  L_code_ptr_is_collection:
  2433                                          ENTER
    56 00001C43 C8000000            <1>  enter 0, 0
    57 00001C47 4883E4F0            <1>  and rsp, ~15
  2434 00001C4B 48837D1801                      cmp COUNT, 1
  2435 00001C50 0F85190E0000                    jne L_error_arg_count_1
  2436 00001C56 488B4520                        mov rax, PARAM(0)
  2437 00001C5A 8A18                            mov bl, byte [rax]
  2438 00001C5C 80E320                          and bl, T_collection
  2439 00001C5F 740C                            je .L_false
  2440 00001C61 48B8-                           mov rax, sob_boolean_true
  2440 00001C63 [0300000000000000] 
  2441 00001C6B EB0A                            jmp .L_end
  2442                                  .L_false:
  2443 00001C6D 48B8-                           mov rax, sob_boolean_false
  2443 00001C6F [0200000000000000] 
  2444                                  .L_end:
  2445                                          LEAVE
    61 00001C77 C9                  <1>  leave
  2446 00001C78 C21800                          ret AND_KILL_FRAME(1)
  2447                                  
  2448                                  L_code_ptr_cons:
  2449                                          ENTER
    56 00001C7B C8000000            <1>  enter 0, 0
    57 00001C7F 4883E4F0            <1>  and rsp, ~15
  2450 00001C83 48837D1802                      cmp COUNT, 2
  2451 00001C88 0F85160E0000                    jne L_error_arg_count_2
  2452 00001C8E BF11000000                      mov rdi, (1 + 8 + 8)
  2453 00001C93 E866F6FFFF                      call malloc
  2454 00001C98 C60021                          mov byte [rax], T_pair
  2455 00001C9B 488B5D20                        mov rbx, PARAM(0)
  2456 00001C9F 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2457 00001CA3 488B5D28                        mov rbx, PARAM(1)
  2458 00001CA7 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2459                                          LEAVE
    61 00001CAB C9                  <1>  leave
  2460 00001CAC C22000                          ret AND_KILL_FRAME(2)
  2461                                  
  2462                                  L_code_ptr_display_sexpr:
  2463                                          ENTER
    56 00001CAF C8000000            <1>  enter 0, 0
    57 00001CB3 4883E4F0            <1>  and rsp, ~15
  2464 00001CB7 48837D1801                      cmp COUNT, 1
  2465 00001CBC 0F85AD0D0000                    jne L_error_arg_count_1
  2466 00001CC2 488B7D20                        mov rdi, PARAM(0)
  2467 00001CC6 E84EF6FFFF                      call print_sexpr
  2468 00001CCB 48B8-                           mov rax, sob_void
  2468 00001CCD [0000000000000000] 
  2469                                          LEAVE
    61 00001CD5 C9                  <1>  leave
  2470 00001CD6 C21800                          ret AND_KILL_FRAME(1)
  2471                                  
  2472                                  L_code_ptr_write_char:
  2473                                          ENTER
    56 00001CD9 C8000000            <1>  enter 0, 0
    57 00001CDD 4883E4F0            <1>  and rsp, ~15
  2474 00001CE1 48837D1801                      cmp COUNT, 1
  2475 00001CE6 0F85830D0000                    jne L_error_arg_count_1
  2476 00001CEC 488B4520                        mov rax, PARAM(0)
  2477                                          assert_char(rax)
    65 00001CF0 803802              <1>  cmp byte [%1], %2
    66 00001CF3 0F857B0E0000        <1>  jne L_error_incorrect_type
  2478 00001CF9 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  2479 00001CFC 4825FF000000                    and rax, 255
  2480 00001D02 48BF-                           mov rdi, fmt_char
  2480 00001D04 [7D03000000000000] 
  2481 00001D0C 4889C6                          mov rsi, rax
  2482 00001D0F B800000000                      mov rax, 0
  2483                                  	ENTER
    56 00001D14 C8000000            <1>  enter 0, 0
    57 00001D18 4883E4F0            <1>  and rsp, ~15
  2484 00001D1C E8(00000000)                    call printf
  2485                                  	LEAVE
    61 00001D21 C9                  <1>  leave
  2486 00001D22 48B8-                           mov rax, sob_void
  2486 00001D24 [0000000000000000] 
  2487                                          LEAVE
    61 00001D2C C9                  <1>  leave
  2488 00001D2D C21800                          ret AND_KILL_FRAME(1)
  2489                                  
  2490                                  L_code_ptr_car:
  2491                                          ENTER
    56 00001D30 C8000000            <1>  enter 0, 0
    57 00001D34 4883E4F0            <1>  and rsp, ~15
  2492 00001D38 48837D1801                      cmp COUNT, 1
  2493 00001D3D 0F852C0D0000                    jne L_error_arg_count_1
  2494 00001D43 488B4520                        mov rax, PARAM(0)
  2495                                          assert_pair(rax)
    65 00001D47 803821              <1>  cmp byte [%1], %2
    66 00001D4A 0F85240E0000        <1>  jne L_error_incorrect_type
  2496 00001D50 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  2497                                          LEAVE
    61 00001D54 C9                  <1>  leave
  2498 00001D55 C21800                          ret AND_KILL_FRAME(1)
  2499                                          
  2500                                  L_code_ptr_cdr:
  2501                                          ENTER
    56 00001D58 C8000000            <1>  enter 0, 0
    57 00001D5C 4883E4F0            <1>  and rsp, ~15
  2502 00001D60 48837D1801                      cmp COUNT, 1
  2503 00001D65 0F85040D0000                    jne L_error_arg_count_1
  2504 00001D6B 488B4520                        mov rax, PARAM(0)
  2505                                          assert_pair(rax)
    65 00001D6F 803821              <1>  cmp byte [%1], %2
    66 00001D72 0F85FC0D0000        <1>  jne L_error_incorrect_type
  2506 00001D78 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  2507                                          LEAVE
    61 00001D7C C9                  <1>  leave
  2508 00001D7D C21800                          ret AND_KILL_FRAME(1)
  2509                                          
  2510                                  L_code_ptr_string_length:
  2511                                          ENTER
    56 00001D80 C8000000            <1>  enter 0, 0
    57 00001D84 4883E4F0            <1>  and rsp, ~15
  2512 00001D88 48837D1801                      cmp COUNT, 1
  2513 00001D8D 0F85DC0C0000                    jne L_error_arg_count_1
  2514 00001D93 488B4520                        mov rax, PARAM(0)
  2515                                          assert_string(rax)
    65 00001D97 803803              <1>  cmp byte [%1], %2
    66 00001D9A 0F85D40D0000        <1>  jne L_error_incorrect_type
  2516 00001DA0 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  2517 00001DA4 E83A0C0000                      call make_integer
  2518                                          LEAVE
    61 00001DA9 C9                  <1>  leave
  2519 00001DAA C21800                          ret AND_KILL_FRAME(1)
  2520                                  
  2521                                  L_code_ptr_vector_length:
  2522                                          ENTER
    56 00001DAD C8000000            <1>  enter 0, 0
    57 00001DB1 4883E4F0            <1>  and rsp, ~15
  2523 00001DB5 48837D1801                      cmp COUNT, 1
  2524 00001DBA 0F85AF0C0000                    jne L_error_arg_count_1
  2525 00001DC0 488B4520                        mov rax, PARAM(0)
  2526                                          assert_vector(rax)
    65 00001DC4 803822              <1>  cmp byte [%1], %2
    66 00001DC7 0F85A70D0000        <1>  jne L_error_incorrect_type
  2527 00001DCD 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  2528 00001DD1 E80D0C0000                      call make_integer
  2529                                          LEAVE
    61 00001DD6 C9                  <1>  leave
  2530 00001DD7 C21800                          ret AND_KILL_FRAME(1)
  2531                                  
  2532                                  L_code_ptr_real_to_integer:
  2533                                          ENTER
    56 00001DDA C8000000            <1>  enter 0, 0
    57 00001DDE 4883E4F0            <1>  and rsp, ~15
  2534 00001DE2 48837D1801                      cmp COUNT, 1
  2535 00001DE7 0F85820C0000                    jne L_error_arg_count_1
  2536 00001DED 488B5D20                        mov rbx, PARAM(0)
  2537                                          assert_real(rbx)
    65 00001DF1 803B12              <1>  cmp byte [%1], %2
    66 00001DF4 0F857A0D0000        <1>  jne L_error_incorrect_type
  2538 00001DFA F20F104301                      movsd xmm0, qword [rbx + 1]
  2539 00001DFF F2480F2CF8                      cvttsd2si rdi, xmm0
  2540 00001E04 E8DA0B0000                      call make_integer
  2541                                          LEAVE
    61 00001E09 C9                  <1>  leave
  2542 00001E0A C21800                          ret AND_KILL_FRAME(1)
  2543                                  
  2544                                  L_code_ptr_exit:
  2545                                          ENTER
    56 00001E0D C8000000            <1>  enter 0, 0
    57 00001E11 4883E4F0            <1>  and rsp, ~15
  2546 00001E15 48837D1800                      cmp COUNT, 0
  2547 00001E1A 0F851A0C0000                    jne L_error_arg_count_0
  2548 00001E20 B800000000                      mov rax, 0
  2549 00001E25 E8(00000000)                    call exit
  2550                                  
  2551                                  L_code_ptr_integer_to_real:
  2552                                          ENTER
    56 00001E2A C8000000            <1>  enter 0, 0
    57 00001E2E 4883E4F0            <1>  and rsp, ~15
  2553 00001E32 48837D1801                      cmp COUNT, 1
  2554 00001E37 0F85320C0000                    jne L_error_arg_count_1
  2555 00001E3D 488B4520                        mov rax, PARAM(0)
  2556                                          assert_integer(rax)
    70                              <1>  assert_rational(%1)
    65 00001E41 803811              <2>  cmp byte [%1], %2
    66 00001E44 0F852A0D0000        <2>  jne L_error_incorrect_type
    71 00001E4A 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00001E4F 0F851F0D0000        <1>  jne L_error_incorrect_type
  2557 00001E55 FF7001                          push qword [rax + 1]
  2558 00001E58 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  2559 00001E5E E8640B0000                      call make_real
  2560                                          LEAVE
    61 00001E63 C9                  <1>  leave
  2561 00001E64 C21800                          ret AND_KILL_FRAME(1)
  2562                                  
  2563                                  L_code_ptr_rational_to_real:
  2564                                          ENTER
    56 00001E67 C8000000            <1>  enter 0, 0
    57 00001E6B 4883E4F0            <1>  and rsp, ~15
  2565 00001E6F 48837D1801                      cmp COUNT, 1
  2566 00001E74 0F85F50B0000                    jne L_error_arg_count_1
  2567 00001E7A 488B4520                        mov rax, PARAM(0)
  2568                                          assert_rational(rax)
    65 00001E7E 803811              <1>  cmp byte [%1], %2
    66 00001E81 0F85ED0C0000        <1>  jne L_error_incorrect_type
  2569 00001E87 FF7001                          push qword [rax + 1]
  2570 00001E8A F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  2571 00001E90 FF7009                          push qword [rax + 1 + 8]
  2572 00001E93 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  2573 00001E99 F20F5EC1                        divsd xmm0, xmm1
  2574 00001E9D E8250B0000                      call make_real
  2575                                          LEAVE
    61 00001EA2 C9                  <1>  leave
  2576 00001EA3 C21800                          ret AND_KILL_FRAME(1)
  2577                                  
  2578                                  L_code_ptr_char_to_integer:
  2579                                          ENTER
    56 00001EA6 C8000000            <1>  enter 0, 0
    57 00001EAA 4883E4F0            <1>  and rsp, ~15
  2580 00001EAE 48837D1801                      cmp COUNT, 1
  2581 00001EB3 0F85B60B0000                    jne L_error_arg_count_1
  2582 00001EB9 488B4520                        mov rax, PARAM(0)
  2583                                          assert_char(rax)
    65 00001EBD 803802              <1>  cmp byte [%1], %2
    66 00001EC0 0F85AE0C0000        <1>  jne L_error_incorrect_type
  2584 00001EC6 8A4001                          mov al, byte [rax + 1]
  2585 00001EC9 4825FF000000                    and rax, 255
  2586 00001ECF 4889C7                          mov rdi, rax
  2587 00001ED2 E80C0B0000                      call make_integer
  2588                                          LEAVE
    61 00001ED7 C9                  <1>  leave
  2589 00001ED8 C21800                          ret AND_KILL_FRAME(1)
  2590                                  
  2591                                  L_code_ptr_integer_to_char:
  2592                                          ENTER
    56 00001EDB C8000000            <1>  enter 0, 0
    57 00001EDF 4883E4F0            <1>  and rsp, ~15
  2593 00001EE3 48837D1801                      cmp COUNT, 1
  2594 00001EE8 0F85810B0000                    jne L_error_arg_count_1
  2595 00001EEE 488B4520                        mov rax, PARAM(0)
  2596                                          assert_integer(rax)
    70                              <1>  assert_rational(%1)
    65 00001EF2 803811              <2>  cmp byte [%1], %2
    66 00001EF5 0F85790C0000        <2>  jne L_error_incorrect_type
    71 00001EFB 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00001F00 0F856E0C0000        <1>  jne L_error_incorrect_type
  2597 00001F06 488B5801                        mov rbx, qword [rax + 1]
  2598 00001F0A 4883FB00                        cmp rbx, 0
  2599 00001F0E 0F8EF50A0000                    jle L_error_integer_range
  2600 00001F14 4881FB00010000                  cmp rbx, 256
  2601 00001F1B 0F8DE80A0000                    jge L_error_integer_range
  2602 00001F21 BF02000000                      mov rdi, (1 + 1)
  2603 00001F26 E8D3F3FFFF                      call malloc
  2604 00001F2B C60002                          mov byte [rax], T_char
  2605 00001F2E 885801                          mov byte [rax + 1], bl
  2606                                          LEAVE
    61 00001F31 C9                  <1>  leave
  2607 00001F32 C21800                          ret AND_KILL_FRAME(1)
  2608                                  
  2609                                  L_code_ptr_trng:
  2610                                          ENTER
    56 00001F35 C8000000            <1>  enter 0, 0
    57 00001F39 4883E4F0            <1>  and rsp, ~15
  2611 00001F3D 48837D1800                      cmp COUNT, 0
  2612 00001F42 0F85F20A0000                    jne L_error_arg_count_0
  2613 00001F48 480FC7F7                        rdrand rdi
  2614 00001F4C 48D1EF                          shr rdi, 1
  2615 00001F4F E88F0A0000                      call make_integer
  2616                                          LEAVE
    61 00001F54 C9                  <1>  leave
  2617 00001F55 C21000                          ret AND_KILL_FRAME(0)
  2618                                  
  2619                                  L_code_ptr_is_zero:
  2620                                          ENTER
    56 00001F58 C8000000            <1>  enter 0, 0
    57 00001F5C 4883E4F0            <1>  and rsp, ~15
  2621 00001F60 48837D1801                      cmp COUNT, 1
  2622 00001F65 0F85040B0000                    jne L_error_arg_count_1
  2623 00001F6B 488B4520                        mov rax, PARAM(0)
  2624 00001F6F 803811                          cmp byte [rax], T_rational
  2625 00001F72 740A                            je .L_rational
  2626 00001F74 803812                          cmp byte [rax], T_real
  2627 00001F77 740E                            je .L_real
  2628 00001F79 E9F60B0000                      jmp L_error_incorrect_type
  2629                                  .L_rational:
  2630 00001F7E 4883780100                      cmp qword [rax + 1], 0
  2631 00001F83 7420                            je .L_zero
  2632 00001F85 EB12                            jmp .L_not_zero
  2633                                  .L_real:
  2634 00001F87 660FEFC0                        pxor xmm0, xmm0
  2635 00001F8B FF7001                          push qword [rax + 1]
  2636 00001F8E F20F100C24                      movsd xmm1, qword [rsp]
  2637 00001F93 660F2EC1                        ucomisd xmm0, xmm1
  2638 00001F97 740C                            je .L_zero
  2639                                  .L_not_zero:
  2640 00001F99 48B8-                           mov rax, sob_boolean_false
  2640 00001F9B [0200000000000000] 
  2641 00001FA3 EB0A                            jmp .L_end
  2642                                  .L_zero:
  2643 00001FA5 48B8-                           mov rax, sob_boolean_true
  2643 00001FA7 [0300000000000000] 
  2644                                  .L_end:
  2645                                          LEAVE
    61 00001FAF C9                  <1>  leave
  2646 00001FB0 C21800                          ret AND_KILL_FRAME(1)
  2647                                  
  2648                                  L_code_ptr_is_integer:
  2649                                          ENTER
    56 00001FB3 C8000000            <1>  enter 0, 0
    57 00001FB7 4883E4F0            <1>  and rsp, ~15
  2650 00001FBB 48837D1801                      cmp COUNT, 1
  2651 00001FC0 0F85A90A0000                    jne L_error_arg_count_1
  2652 00001FC6 488B4520                        mov rax, PARAM(0)
  2653 00001FCA 803811                          cmp byte [rax], T_rational
  2654 00001FCD 7513                            jne .L_false
  2655 00001FCF 4883780901                      cmp qword [rax + 1 + 8], 1
  2656 00001FD4 750C                            jne .L_false
  2657 00001FD6 48B8-                           mov rax, sob_boolean_true
  2657 00001FD8 [0300000000000000] 
  2658 00001FE0 EB0A                            jmp .L_exit
  2659                                  .L_false:
  2660 00001FE2 48B8-                           mov rax, sob_boolean_false
  2660 00001FE4 [0200000000000000] 
  2661                                  .L_exit:
  2662                                          LEAVE
    61 00001FEC C9                  <1>  leave
  2663 00001FED C21800                          ret AND_KILL_FRAME(1)
  2664                                  
  2665                                  L_code_ptr_raw_bin_add_rr:
  2666                                          ENTER
    56 00001FF0 C8000000            <1>  enter 0, 0
    57 00001FF4 4883E4F0            <1>  and rsp, ~15
  2667 00001FF8 48837D1802                      cmp COUNT, 2
  2668 00001FFD 0F85A10A0000                    jne L_error_arg_count_2
  2669 00002003 488B5D20                        mov rbx, PARAM(0)
  2670                                          assert_real(rbx)
    65 00002007 803B12              <1>  cmp byte [%1], %2
    66 0000200A 0F85640B0000        <1>  jne L_error_incorrect_type
  2671 00002010 488B4D28                        mov rcx, PARAM(1)
  2672                                          assert_real(rcx)
    65 00002014 803912              <1>  cmp byte [%1], %2
    66 00002017 0F85570B0000        <1>  jne L_error_incorrect_type
  2673 0000201D F20F104301                      movsd xmm0, qword [rbx + 1]
  2674 00002022 F20F104901                      movsd xmm1, qword [rcx + 1]
  2675 00002027 F20F58C1                        addsd xmm0, xmm1
  2676 0000202B E897090000                      call make_real
  2677                                          LEAVE
    61 00002030 C9                  <1>  leave
  2678 00002031 C22000                          ret AND_KILL_FRAME(2)
  2679                                  
  2680                                  L_code_ptr_raw_bin_sub_rr:
  2681                                          ENTER
    56 00002034 C8000000            <1>  enter 0, 0
    57 00002038 4883E4F0            <1>  and rsp, ~15
  2682 0000203C 48837D1802                      cmp COUNT, 2
  2683 00002041 0F855D0A0000                    jne L_error_arg_count_2
  2684 00002047 488B5D20                        mov rbx, PARAM(0)
  2685                                          assert_real(rbx)
    65 0000204B 803B12              <1>  cmp byte [%1], %2
    66 0000204E 0F85200B0000        <1>  jne L_error_incorrect_type
  2686 00002054 488B4D28                        mov rcx, PARAM(1)
  2687                                          assert_real(rcx)
    65 00002058 803912              <1>  cmp byte [%1], %2
    66 0000205B 0F85130B0000        <1>  jne L_error_incorrect_type
  2688 00002061 F20F104301                      movsd xmm0, qword [rbx + 1]
  2689 00002066 F20F104901                      movsd xmm1, qword [rcx + 1]
  2690 0000206B F20F5CC1                        subsd xmm0, xmm1
  2691 0000206F E853090000                      call make_real
  2692                                          LEAVE
    61 00002074 C9                  <1>  leave
  2693 00002075 C22000                          ret AND_KILL_FRAME(2)
  2694                                  
  2695                                  L_code_ptr_raw_bin_mul_rr:
  2696                                          ENTER
    56 00002078 C8000000            <1>  enter 0, 0
    57 0000207C 4883E4F0            <1>  and rsp, ~15
  2697 00002080 48837D1802                      cmp COUNT, 2
  2698 00002085 0F85190A0000                    jne L_error_arg_count_2
  2699 0000208B 488B5D20                        mov rbx, PARAM(0)
  2700                                          assert_real(rbx)
    65 0000208F 803B12              <1>  cmp byte [%1], %2
    66 00002092 0F85DC0A0000        <1>  jne L_error_incorrect_type
  2701 00002098 488B4D28                        mov rcx, PARAM(1)
  2702                                          assert_real(rcx)
    65 0000209C 803912              <1>  cmp byte [%1], %2
    66 0000209F 0F85CF0A0000        <1>  jne L_error_incorrect_type
  2703 000020A5 F20F104301                      movsd xmm0, qword [rbx + 1]
  2704 000020AA F20F104901                      movsd xmm1, qword [rcx + 1]
  2705 000020AF F20F59C1                        mulsd xmm0, xmm1
  2706 000020B3 E80F090000                      call make_real
  2707                                          LEAVE
    61 000020B8 C9                  <1>  leave
  2708 000020B9 C22000                          ret AND_KILL_FRAME(2)
  2709                                  
  2710                                  L_code_ptr_raw_bin_div_rr:
  2711                                          ENTER
    56 000020BC C8000000            <1>  enter 0, 0
    57 000020C0 4883E4F0            <1>  and rsp, ~15
  2712 000020C4 48837D1802                      cmp COUNT, 2
  2713 000020C9 0F85D5090000                    jne L_error_arg_count_2
  2714 000020CF 488B5D20                        mov rbx, PARAM(0)
  2715                                          assert_real(rbx)
    65 000020D3 803B12              <1>  cmp byte [%1], %2
    66 000020D6 0F85980A0000        <1>  jne L_error_incorrect_type
  2716 000020DC 488B4D28                        mov rcx, PARAM(1)
  2717                                          assert_real(rcx)
    65 000020E0 803912              <1>  cmp byte [%1], %2
    66 000020E3 0F858B0A0000        <1>  jne L_error_incorrect_type
  2718 000020E9 F20F104301                      movsd xmm0, qword [rbx + 1]
  2719 000020EE F20F104901                      movsd xmm1, qword [rcx + 1]
  2720 000020F3 660FEFD2                        pxor xmm2, xmm2
  2721 000020F7 660F2ECA                        ucomisd xmm1, xmm2
  2722 000020FB 0F84A40A0000                    je L_error_division_by_zero
  2723 00002101 F20F5EC1                        divsd xmm0, xmm1
  2724 00002105 E8BD080000                      call make_real
  2725                                          LEAVE
    61 0000210A C9                  <1>  leave
  2726 0000210B C22000                          ret AND_KILL_FRAME(2)
  2727                                  
  2728                                  L_code_ptr_raw_bin_add_qq:
  2729                                          ENTER
    56 0000210E C8000000            <1>  enter 0, 0
    57 00002112 4883E4F0            <1>  and rsp, ~15
  2730 00002116 48837D1802                      cmp COUNT, 2
  2731 0000211B 0F8583090000                    jne L_error_arg_count_2
  2732 00002121 4C8B4520                        mov r8, PARAM(0)
  2733                                          assert_rational(r8)
    65 00002125 41803811            <1>  cmp byte [%1], %2
    66 00002129 0F85450A0000        <1>  jne L_error_incorrect_type
  2734 0000212F 4C8B4D28                        mov r9, PARAM(1)
  2735                                          assert_rational(r9)
    65 00002133 41803911            <1>  cmp byte [%1], %2
    66 00002137 0F85370A0000        <1>  jne L_error_incorrect_type
  2736 0000213D 498B4001                        mov rax, qword [r8 + 1] ; num1
  2737 00002141 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2738 00002145 4899                            cqo
  2739 00002147 48F7EB                          imul rbx
  2740 0000214A 4889C6                          mov rsi, rax
  2741 0000214D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2742 00002151 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2743 00002155 4899                            cqo
  2744 00002157 48F7EB                          imul rbx
  2745 0000215A 4801C6                          add rsi, rax
  2746 0000215D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2747 00002161 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2748 00002165 4899                            cqo
  2749 00002167 48F7EB                          imul rbx
  2750 0000216A 4889C7                          mov rdi, rax
  2751 0000216D E827010000                      call normalize_rational
  2752                                          LEAVE
    61 00002172 C9                  <1>  leave
  2753 00002173 C22000                          ret AND_KILL_FRAME(2)
  2754                                  
  2755                                  L_code_ptr_raw_bin_sub_qq:
  2756                                          ENTER
    56 00002176 C8000000            <1>  enter 0, 0
    57 0000217A 4883E4F0            <1>  and rsp, ~15
  2757 0000217E 48837D1802                      cmp COUNT, 2
  2758 00002183 0F851B090000                    jne L_error_arg_count_2
  2759 00002189 4C8B4520                        mov r8, PARAM(0)
  2760                                          assert_rational(r8)
    65 0000218D 41803811            <1>  cmp byte [%1], %2
    66 00002191 0F85DD090000        <1>  jne L_error_incorrect_type
  2761 00002197 4C8B4D28                        mov r9, PARAM(1)
  2762                                          assert_rational(r9)
    65 0000219B 41803911            <1>  cmp byte [%1], %2
    66 0000219F 0F85CF090000        <1>  jne L_error_incorrect_type
  2763 000021A5 498B4001                        mov rax, qword [r8 + 1] ; num1
  2764 000021A9 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2765 000021AD 4899                            cqo
  2766 000021AF 48F7EB                          imul rbx
  2767 000021B2 4889C6                          mov rsi, rax
  2768 000021B5 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2769 000021B9 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2770 000021BD 4899                            cqo
  2771 000021BF 48F7EB                          imul rbx
  2772 000021C2 4829C6                          sub rsi, rax
  2773 000021C5 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2774 000021C9 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2775 000021CD 4899                            cqo
  2776 000021CF 48F7EB                          imul rbx
  2777 000021D2 4889C7                          mov rdi, rax
  2778 000021D5 E8BF000000                      call normalize_rational
  2779                                          LEAVE
    61 000021DA C9                  <1>  leave
  2780 000021DB C22000                          ret AND_KILL_FRAME(2)
  2781                                  
  2782                                  L_code_ptr_raw_bin_mul_qq:
  2783                                          ENTER
    56 000021DE C8000000            <1>  enter 0, 0
    57 000021E2 4883E4F0            <1>  and rsp, ~15
  2784 000021E6 48837D1802                      cmp COUNT, 2
  2785 000021EB 0F85B3080000                    jne L_error_arg_count_2
  2786 000021F1 4C8B4520                        mov r8, PARAM(0)
  2787                                          assert_rational(r8)
    65 000021F5 41803811            <1>  cmp byte [%1], %2
    66 000021F9 0F8575090000        <1>  jne L_error_incorrect_type
  2788 000021FF 4C8B4D28                        mov r9, PARAM(1)
  2789                                          assert_rational(r9)
    65 00002203 41803911            <1>  cmp byte [%1], %2
    66 00002207 0F8567090000        <1>  jne L_error_incorrect_type
  2790 0000220D 498B4001                        mov rax, qword [r8 + 1] ; num1
  2791 00002211 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2792 00002215 4899                            cqo
  2793 00002217 48F7EB                          imul rbx
  2794 0000221A 4889C6                          mov rsi, rax
  2795 0000221D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2796 00002221 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2797 00002225 4899                            cqo
  2798 00002227 48F7EB                          imul rbx
  2799 0000222A 4889C7                          mov rdi, rax
  2800 0000222D E867000000                      call normalize_rational
  2801                                          LEAVE
    61 00002232 C9                  <1>  leave
  2802 00002233 C22000                          ret AND_KILL_FRAME(2)
  2803                                          
  2804                                  L_code_ptr_raw_bin_div_qq:
  2805                                          ENTER
    56 00002236 C8000000            <1>  enter 0, 0
    57 0000223A 4883E4F0            <1>  and rsp, ~15
  2806 0000223E 48837D1802                      cmp COUNT, 2
  2807 00002243 0F855B080000                    jne L_error_arg_count_2
  2808 00002249 4C8B4520                        mov r8, PARAM(0)
  2809                                          assert_rational(r8)
    65 0000224D 41803811            <1>  cmp byte [%1], %2
    66 00002251 0F851D090000        <1>  jne L_error_incorrect_type
  2810 00002257 4C8B4D28                        mov r9, PARAM(1)
  2811                                          assert_rational(r9)
    65 0000225B 41803911            <1>  cmp byte [%1], %2
    66 0000225F 0F850F090000        <1>  jne L_error_incorrect_type
  2812 00002265 4983790100                      cmp qword [r9 + 1], 0
  2813 0000226A 0F8435090000                    je L_error_division_by_zero
  2814 00002270 498B4001                        mov rax, qword [r8 + 1] ; num1
  2815 00002274 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2816 00002278 4899                            cqo
  2817 0000227A 48F7EB                          imul rbx
  2818 0000227D 4889C6                          mov rsi, rax
  2819 00002280 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2820 00002284 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2821 00002288 4899                            cqo
  2822 0000228A 48F7EB                          imul rbx
  2823 0000228D 4889C7                          mov rdi, rax
  2824 00002290 E804000000                      call normalize_rational
  2825                                          LEAVE
    61 00002295 C9                  <1>  leave
  2826 00002296 C22000                          ret AND_KILL_FRAME(2)
  2827                                          
  2828                                  normalize_rational:
  2829 00002299 56                              push rsi
  2830 0000229A 57                              push rdi
  2831 0000229B E839000000                      call gcd
  2832 000022A0 4889C3                          mov rbx, rax
  2833 000022A3 58                              pop rax
  2834 000022A4 4899                            cqo
  2835 000022A6 48F7FB                          idiv rbx
  2836 000022A9 4989C0                          mov r8, rax
  2837 000022AC 58                              pop rax
  2838 000022AD 4899                            cqo
  2839 000022AF 48F7FB                          idiv rbx
  2840 000022B2 4989C1                          mov r9, rax
  2841 000022B5 BF11000000                      mov rdi, (1 + 8 + 8)
  2842 000022BA E83FF0FFFF                      call malloc
  2843 000022BF C60011                          mov byte [rax], T_rational
  2844 000022C2 4C894801                        mov qword [rax + 1], r9
  2845 000022C6 4C894009                        mov qword [rax + 1 + 8], r8
  2846 000022CA C3                              ret
  2847                                  
  2848                                  iabs:
  2849 000022CB 4889F8                          mov rax, rdi
  2850 000022CE 4883F800                        cmp rax, 0
  2851 000022D2 7C01                            jl .Lneg
  2852 000022D4 C3                              ret
  2853                                  .Lneg:
  2854 000022D5 48F7D8                          neg rax
  2855 000022D8 C3                              ret
  2856                                  
  2857                                  gcd:
  2858 000022D9 E8EDFFFFFF                      call iabs
  2859 000022DE 4889C3                          mov rbx, rax
  2860 000022E1 4889F7                          mov rdi, rsi
  2861 000022E4 E8E2FFFFFF                      call iabs
  2862 000022E9 4883F800                        cmp rax, 0
  2863 000022ED 7502                            jne .L0
  2864 000022EF 4893                            xchg rax, rbx
  2865                                  .L0:
  2866 000022F1 4883FB00                        cmp rbx, 0
  2867 000022F5 740C                            je .L1
  2868 000022F7 4899                            cqo
  2869 000022F9 48F7F3                          div rbx
  2870 000022FC 4889D0                          mov rax, rdx
  2871 000022FF 4893                            xchg rax, rbx
  2872 00002301 EBEE                            jmp .L0
  2873                                  .L1:
  2874 00002303 C3                              ret
  2875                                  
  2876                                  L_code_ptr_error:
  2877                                          ENTER
    56 00002304 C8000000            <1>  enter 0, 0
    57 00002308 4883E4F0            <1>  and rsp, ~15
  2878 0000230C 48837D1802                      cmp COUNT, 2
  2879 00002311 0F858D070000                    jne L_error_arg_count_2
  2880 00002317 488B7520                        mov rsi, PARAM(0)
  2881                                          assert_symbol(rsi)
    65 0000231B 803E04              <1>  cmp byte [%1], %2
    66 0000231E 0F8550080000        <1>  jne L_error_incorrect_type
  2882 00002324 488B7528                        mov rsi, PARAM(1)
  2883                                          assert_string(rsi)
    65 00002328 803E03              <1>  cmp byte [%1], %2
    66 0000232B 0F8543080000        <1>  jne L_error_incorrect_type
  2884 00002331 48BF-                           mov rdi, fmt_scheme_error_part_1
  2884 00002333 [ED04000000000000] 
  2885 0000233B B800000000                      mov rax, 0
  2886                                  	ENTER
    56 00002340 C8000000            <1>  enter 0, 0
    57 00002344 4883E4F0            <1>  and rsp, ~15
  2887 00002348 E8(00000000)                    call printf
  2888                                  	LEAVE
    61 0000234D C9                  <1>  leave
  2889 0000234E 488B7D20                        mov rdi, PARAM(0)
  2890 00002352 E8C2EFFFFF                      call print_sexpr
  2891 00002357 48BF-                           mov rdi, fmt_scheme_error_part_2
  2891 00002359 [0105000000000000] 
  2892 00002361 B800000000                      mov rax, 0
  2893                                  	ENTER
    56 00002366 C8000000            <1>  enter 0, 0
    57 0000236A 4883E4F0            <1>  and rsp, ~15
  2894 0000236E E8(00000000)                    call printf
  2895                                  	LEAVE
    61 00002373 C9                  <1>  leave
  2896 00002374 488B4528                        mov rax, PARAM(1)       ; sob_string
  2897 00002378 BE01000000                      mov rsi, 1              ; size = 1 byte
  2898 0000237D 488B5001                        mov rdx, qword [rax + 1] ; length
  2899 00002381 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2900 00002385 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2901 0000238D E8(00000000)                    call fwrite
  2902 00002392 48BF-                           mov rdi, fmt_scheme_error_part_3
  2902 00002394 [4305000000000000] 
  2903 0000239C B800000000                      mov rax, 0
  2904                                  	ENTER
    56 000023A1 C8000000            <1>  enter 0, 0
    57 000023A5 4883E4F0            <1>  and rsp, ~15
  2905 000023A9 E8(00000000)                    call printf
  2906                                  	LEAVE
    61 000023AE C9                  <1>  leave
  2907 000023AF 48C7C0F7FFFFFF                  mov rax, -9
  2908 000023B6 E8(00000000)                    call exit
  2909                                  
  2910                                  L_code_ptr_raw_less_than_rr:
  2911                                          ENTER
    56 000023BB C8000000            <1>  enter 0, 0
    57 000023BF 4883E4F0            <1>  and rsp, ~15
  2912 000023C3 48837D1802                      cmp COUNT, 2
  2913 000023C8 0F85D6060000                    jne L_error_arg_count_2
  2914 000023CE 488B7520                        mov rsi, PARAM(0)
  2915                                          assert_real(rsi)
    65 000023D2 803E12              <1>  cmp byte [%1], %2
    66 000023D5 0F8599070000        <1>  jne L_error_incorrect_type
  2916 000023DB 488B7D28                        mov rdi, PARAM(1)
  2917                                          assert_real(rdi)
    65 000023DF 803F12              <1>  cmp byte [%1], %2
    66 000023E2 0F858C070000        <1>  jne L_error_incorrect_type
  2918 000023E8 F20F104601                      movsd xmm0, qword [rsi + 1]
  2919 000023ED F20F104F01                      movsd xmm1, qword [rdi + 1]
  2920 000023F2 660F2FC1                        comisd xmm0, xmm1
  2921 000023F6 730C                            jae .L_false
  2922 000023F8 48B8-                           mov rax, sob_boolean_true
  2922 000023FA [0300000000000000] 
  2923 00002402 EB0A                            jmp .L_exit
  2924                                  .L_false:
  2925 00002404 48B8-                           mov rax, sob_boolean_false
  2925 00002406 [0200000000000000] 
  2926                                  .L_exit:
  2927                                          LEAVE
    61 0000240E C9                  <1>  leave
  2928 0000240F C22000                          ret AND_KILL_FRAME(2)
  2929                                          
  2930                                  L_code_ptr_raw_less_than_qq:
  2931                                          ENTER
    56 00002412 C8000000            <1>  enter 0, 0
    57 00002416 4883E4F0            <1>  and rsp, ~15
  2932 0000241A 48837D1802                      cmp COUNT, 2
  2933 0000241F 0F857F060000                    jne L_error_arg_count_2
  2934 00002425 488B7520                        mov rsi, PARAM(0)
  2935                                          assert_rational(rsi)
    65 00002429 803E11              <1>  cmp byte [%1], %2
    66 0000242C 0F8542070000        <1>  jne L_error_incorrect_type
  2936 00002432 488B7D28                        mov rdi, PARAM(1)
  2937                                          assert_rational(rdi)
    65 00002436 803F11              <1>  cmp byte [%1], %2
    66 00002439 0F8535070000        <1>  jne L_error_incorrect_type
  2938 0000243F 488B4601                        mov rax, qword [rsi + 1] ; num1
  2939 00002443 4899                            cqo
  2940 00002445 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2941 00002449 4889C1                          mov rcx, rax
  2942 0000244C 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2943 00002450 4899                            cqo
  2944 00002452 48F76F01                        imul qword [rdi + 1]          ; num2
  2945 00002456 4829C1                          sub rcx, rax
  2946 00002459 7D0C                            jge .L_false
  2947 0000245B 48B8-                           mov rax, sob_boolean_true
  2947 0000245D [0300000000000000] 
  2948 00002465 EB0A                            jmp .L_exit
  2949                                  .L_false:
  2950 00002467 48B8-                           mov rax, sob_boolean_false
  2950 00002469 [0200000000000000] 
  2951                                  .L_exit:
  2952                                          LEAVE
    61 00002471 C9                  <1>  leave
  2953 00002472 C22000                          ret AND_KILL_FRAME(2)
  2954                                  
  2955                                  L_code_ptr_raw_equal_rr:
  2956                                          ENTER
    56 00002475 C8000000            <1>  enter 0, 0
    57 00002479 4883E4F0            <1>  and rsp, ~15
  2957 0000247D 48837D1802                      cmp COUNT, 2
  2958 00002482 0F851C060000                    jne L_error_arg_count_2
  2959 00002488 488B7520                        mov rsi, PARAM(0)
  2960                                          assert_real(rsi)
    65 0000248C 803E12              <1>  cmp byte [%1], %2
    66 0000248F 0F85DF060000        <1>  jne L_error_incorrect_type
  2961 00002495 488B7D28                        mov rdi, PARAM(1)
  2962                                          assert_real(rdi)
    65 00002499 803F12              <1>  cmp byte [%1], %2
    66 0000249C 0F85D2060000        <1>  jne L_error_incorrect_type
  2963 000024A2 F20F104601                      movsd xmm0, qword [rsi + 1]
  2964 000024A7 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2965 000024AC 660F2FC1                        comisd xmm0, xmm1
  2966 000024B0 750C                            jne .L_false
  2967 000024B2 48B8-                           mov rax, sob_boolean_true
  2967 000024B4 [0300000000000000] 
  2968 000024BC EB0A                            jmp .L_exit
  2969                                  .L_false:
  2970 000024BE 48B8-                           mov rax, sob_boolean_false
  2970 000024C0 [0200000000000000] 
  2971                                  .L_exit:
  2972                                          LEAVE
    61 000024C8 C9                  <1>  leave
  2973 000024C9 C22000                          ret AND_KILL_FRAME(2)
  2974                                          
  2975                                  L_code_ptr_raw_equal_qq:
  2976                                          ENTER
    56 000024CC C8000000            <1>  enter 0, 0
    57 000024D0 4883E4F0            <1>  and rsp, ~15
  2977 000024D4 48837D1802                      cmp COUNT, 2
  2978 000024D9 0F85C5050000                    jne L_error_arg_count_2
  2979 000024DF 488B7520                        mov rsi, PARAM(0)
  2980                                          assert_rational(rsi)
    65 000024E3 803E11              <1>  cmp byte [%1], %2
    66 000024E6 0F8588060000        <1>  jne L_error_incorrect_type
  2981 000024EC 488B7D28                        mov rdi, PARAM(1)
  2982                                          assert_rational(rdi)
    65 000024F0 803F11              <1>  cmp byte [%1], %2
    66 000024F3 0F857B060000        <1>  jne L_error_incorrect_type
  2983 000024F9 488B4601                        mov rax, qword [rsi + 1] ; num1
  2984 000024FD 4899                            cqo
  2985 000024FF 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2986 00002503 4889C1                          mov rcx, rax
  2987 00002506 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2988 0000250A 4899                            cqo
  2989 0000250C 48F76F01                        imul qword [rdi + 1]          ; num2
  2990 00002510 4829C1                          sub rcx, rax
  2991 00002513 750C                            jne .L_false
  2992 00002515 48B8-                           mov rax, sob_boolean_true
  2992 00002517 [0300000000000000] 
  2993 0000251F EB0A                            jmp .L_exit
  2994                                  .L_false:
  2995 00002521 48B8-                           mov rax, sob_boolean_false
  2995 00002523 [0200000000000000] 
  2996                                  .L_exit:
  2997                                          LEAVE
    61 0000252B C9                  <1>  leave
  2998 0000252C C22000                          ret AND_KILL_FRAME(2)
  2999                                  
  3000                                  L_code_ptr_quotient:
  3001                                          ENTER
    56 0000252F C8000000            <1>  enter 0, 0
    57 00002533 4883E4F0            <1>  and rsp, ~15
  3002 00002537 48837D1802                      cmp COUNT, 2
  3003 0000253C 0F8562050000                    jne L_error_arg_count_2
  3004 00002542 488B7520                        mov rsi, PARAM(0)
  3005                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00002546 803E11              <2>  cmp byte [%1], %2
    66 00002549 0F8525060000        <2>  jne L_error_incorrect_type
    71 0000254F 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00002554 0F851A060000        <1>  jne L_error_incorrect_type
  3006 0000255A 488B7D28                        mov rdi, PARAM(1)
  3007                                          assert_integer(rdi)
    70                              <1>  assert_rational(%1)
    65 0000255E 803F11              <2>  cmp byte [%1], %2
    66 00002561 0F850D060000        <2>  jne L_error_incorrect_type
    71 00002567 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 0000256C 0F8502060000        <1>  jne L_error_incorrect_type
  3008 00002572 488B4601                        mov rax, qword [rsi + 1]
  3009 00002576 488B5F01                        mov rbx, qword [rdi + 1]
  3010 0000257A 4883FB00                        cmp rbx, 0
  3011 0000257E 0F8421060000                    je L_error_division_by_zero
  3012 00002584 4899                            cqo
  3013 00002586 48F7FB                          idiv rbx
  3014 00002589 4889C7                          mov rdi, rax
  3015 0000258C E852040000                      call make_integer
  3016                                          LEAVE
    61 00002591 C9                  <1>  leave
  3017 00002592 C22000                          ret AND_KILL_FRAME(2)
  3018                                          
  3019                                  L_code_ptr_remainder:
  3020                                          ENTER
    56 00002595 C8000000            <1>  enter 0, 0
    57 00002599 4883E4F0            <1>  and rsp, ~15
  3021 0000259D 48837D1802                      cmp COUNT, 2
  3022 000025A2 0F85FC040000                    jne L_error_arg_count_2
  3023 000025A8 488B7520                        mov rsi, PARAM(0)
  3024                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 000025AC 803E11              <2>  cmp byte [%1], %2
    66 000025AF 0F85BF050000        <2>  jne L_error_incorrect_type
    71 000025B5 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 000025BA 0F85B4050000        <1>  jne L_error_incorrect_type
  3025 000025C0 488B7D28                        mov rdi, PARAM(1)
  3026                                          assert_integer(rdi)
    70                              <1>  assert_rational(%1)
    65 000025C4 803F11              <2>  cmp byte [%1], %2
    66 000025C7 0F85A7050000        <2>  jne L_error_incorrect_type
    71 000025CD 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 000025D2 0F859C050000        <1>  jne L_error_incorrect_type
  3027 000025D8 488B4601                        mov rax, qword [rsi + 1]
  3028 000025DC 488B5F01                        mov rbx, qword [rdi + 1]
  3029 000025E0 4883FB00                        cmp rbx, 0
  3030 000025E4 0F84BB050000                    je L_error_division_by_zero
  3031 000025EA 4899                            cqo
  3032 000025EC 48F7FB                          idiv rbx
  3033 000025EF 4889D7                          mov rdi, rdx
  3034 000025F2 E8EC030000                      call make_integer
  3035                                          LEAVE
    61 000025F7 C9                  <1>  leave
  3036 000025F8 C22000                          ret AND_KILL_FRAME(2)
  3037                                  
  3038                                  L_code_ptr_set_car:
  3039                                          ENTER
    56 000025FB C8000000            <1>  enter 0, 0
    57 000025FF 4883E4F0            <1>  and rsp, ~15
  3040 00002603 48837D1802                      cmp COUNT, 2
  3041 00002608 0F8596040000                    jne L_error_arg_count_2
  3042 0000260E 488B4520                        mov rax, PARAM(0)
  3043                                          assert_pair(rax)
    65 00002612 803821              <1>  cmp byte [%1], %2
    66 00002615 0F8559050000        <1>  jne L_error_incorrect_type
  3044 0000261B 488B5D28                        mov rbx, PARAM(1)
  3045 0000261F 48895801                        mov SOB_PAIR_CAR(rax), rbx
  3046 00002623 48B8-                           mov rax, sob_void
  3046 00002625 [0000000000000000] 
  3047                                          LEAVE
    61 0000262D C9                  <1>  leave
  3048 0000262E C22000                          ret AND_KILL_FRAME(2)
  3049                                  
  3050                                  L_code_ptr_set_cdr:
  3051                                          ENTER
    56 00002631 C8000000            <1>  enter 0, 0
    57 00002635 4883E4F0            <1>  and rsp, ~15
  3052 00002639 48837D1802                      cmp COUNT, 2
  3053 0000263E 0F8560040000                    jne L_error_arg_count_2
  3054 00002644 488B4520                        mov rax, PARAM(0)
  3055                                          assert_pair(rax)
    65 00002648 803821              <1>  cmp byte [%1], %2
    66 0000264B 0F8523050000        <1>  jne L_error_incorrect_type
  3056 00002651 488B5D28                        mov rbx, PARAM(1)
  3057 00002655 48895809                        mov SOB_PAIR_CDR(rax), rbx
  3058 00002659 48B8-                           mov rax, sob_void
  3058 0000265B [0000000000000000] 
  3059                                          LEAVE
    61 00002663 C9                  <1>  leave
  3060 00002664 C22000                          ret AND_KILL_FRAME(2)
  3061                                  
  3062                                  L_code_ptr_string_ref:
  3063                                          ENTER
    56 00002667 C8000000            <1>  enter 0, 0
    57 0000266B 4883E4F0            <1>  and rsp, ~15
  3064 0000266F 48837D1802                      cmp COUNT, 2
  3065 00002674 0F852A040000                    jne L_error_arg_count_2
  3066 0000267A 488B7D20                        mov rdi, PARAM(0)
  3067                                          assert_string(rdi)
    65 0000267E 803F03              <1>  cmp byte [%1], %2
    66 00002681 0F85ED040000        <1>  jne L_error_incorrect_type
  3068 00002687 488B7528                        mov rsi, PARAM(1)
  3069                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 0000268B 803E11              <2>  cmp byte [%1], %2
    66 0000268E 0F85E0040000        <2>  jne L_error_incorrect_type
    71 00002694 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00002699 0F85D5040000        <1>  jne L_error_incorrect_type
  3070 0000269F 488B5701                        mov rdx, qword [rdi + 1]
  3071 000026A3 488B4E01                        mov rcx, qword [rsi + 1]
  3072 000026A7 4839D1                          cmp rcx, rdx
  3073 000026AA 0F8D59030000                    jge L_error_integer_range
  3074 000026B0 4883F900                        cmp rcx, 0
  3075 000026B4 0F8C4F030000                    jl L_error_integer_range
  3076 000026BA 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  3077 000026BE BF02000000                      mov rdi, 2
  3078 000026C3 E836ECFFFF                      call malloc
  3079 000026C8 C60002                          mov byte [rax], T_char
  3080 000026CB 885801                          mov byte [rax + 1], bl
  3081                                          LEAVE
    61 000026CE C9                  <1>  leave
  3082 000026CF C22000                          ret AND_KILL_FRAME(2)
  3083                                  
  3084                                  L_code_ptr_vector_ref:
  3085                                          ENTER
    56 000026D2 C8000000            <1>  enter 0, 0
    57 000026D6 4883E4F0            <1>  and rsp, ~15
  3086 000026DA 48837D1802                      cmp COUNT, 2
  3087 000026DF 0F85BF030000                    jne L_error_arg_count_2
  3088 000026E5 488B7D20                        mov rdi, PARAM(0)
  3089                                          assert_vector(rdi)
    65 000026E9 803F22              <1>  cmp byte [%1], %2
    66 000026EC 0F8582040000        <1>  jne L_error_incorrect_type
  3090 000026F2 488B7528                        mov rsi, PARAM(1)
  3091                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 000026F6 803E11              <2>  cmp byte [%1], %2
    66 000026F9 0F8575040000        <2>  jne L_error_incorrect_type
    71 000026FF 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00002704 0F856A040000        <1>  jne L_error_incorrect_type
  3092 0000270A 488B5701                        mov rdx, qword [rdi + 1]
  3093 0000270E 488B4E01                        mov rcx, qword [rsi + 1]
  3094 00002712 4839D1                          cmp rcx, rdx
  3095 00002715 0F8DEE020000                    jge L_error_integer_range
  3096 0000271B 4883F900                        cmp rcx, 0
  3097 0000271F 0F8CE4020000                    jl L_error_integer_range
  3098 00002725 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  3099                                          LEAVE
    61 0000272A C9                  <1>  leave
  3100 0000272B C22000                          ret AND_KILL_FRAME(2)
  3101                                  
  3102                                  L_code_ptr_vector_set:
  3103                                          ENTER
    56 0000272E C8000000            <1>  enter 0, 0
    57 00002732 4883E4F0            <1>  and rsp, ~15
  3104 00002736 48837D1803                      cmp COUNT, 3
  3105 0000273B 0F85CD030000                    jne L_error_arg_count_3
  3106 00002741 488B7D20                        mov rdi, PARAM(0)
  3107                                          assert_vector(rdi)
    65 00002745 803F22              <1>  cmp byte [%1], %2
    66 00002748 0F8526040000        <1>  jne L_error_incorrect_type
  3108 0000274E 488B7528                        mov rsi, PARAM(1)
  3109                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 00002752 803E11              <2>  cmp byte [%1], %2
    66 00002755 0F8519040000        <2>  jne L_error_incorrect_type
    71 0000275B 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00002760 0F850E040000        <1>  jne L_error_incorrect_type
  3110 00002766 488B5701                        mov rdx, qword [rdi + 1]
  3111 0000276A 488B4E01                        mov rcx, qword [rsi + 1]
  3112 0000276E 4839D1                          cmp rcx, rdx
  3113 00002771 0F8D92020000                    jge L_error_integer_range
  3114 00002777 4883F900                        cmp rcx, 0
  3115 0000277B 0F8C88020000                    jl L_error_integer_range
  3116 00002781 488B4530                        mov rax, PARAM(2)
  3117 00002785 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  3118 0000278A 48B8-                           mov rax, sob_void
  3118 0000278C [0000000000000000] 
  3119                                          LEAVE
    61 00002794 C9                  <1>  leave
  3120 00002795 C22800                          ret AND_KILL_FRAME(3)
  3121                                  
  3122                                  L_code_ptr_string_set:
  3123                                          ENTER
    56 00002798 C8000000            <1>  enter 0, 0
    57 0000279C 4883E4F0            <1>  and rsp, ~15
  3124 000027A0 48837D1803                      cmp COUNT, 3
  3125 000027A5 0F8563030000                    jne L_error_arg_count_3
  3126 000027AB 488B7D20                        mov rdi, PARAM(0)
  3127                                          assert_string(rdi)
    65 000027AF 803F03              <1>  cmp byte [%1], %2
    66 000027B2 0F85BC030000        <1>  jne L_error_incorrect_type
  3128 000027B8 488B7528                        mov rsi, PARAM(1)
  3129                                          assert_integer(rsi)
    70                              <1>  assert_rational(%1)
    65 000027BC 803E11              <2>  cmp byte [%1], %2
    66 000027BF 0F85AF030000        <2>  jne L_error_incorrect_type
    71 000027C5 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    72 000027CA 0F85A4030000        <1>  jne L_error_incorrect_type
  3130 000027D0 488B5701                        mov rdx, qword [rdi + 1]
  3131 000027D4 488B4E01                        mov rcx, qword [rsi + 1]
  3132 000027D8 4839D1                          cmp rcx, rdx
  3133 000027DB 0F8D28020000                    jge L_error_integer_range
  3134 000027E1 4883F900                        cmp rcx, 0
  3135 000027E5 0F8C1E020000                    jl L_error_integer_range
  3136 000027EB 488B4530                        mov rax, PARAM(2)
  3137                                          assert_char(rax)
    65 000027EF 803802              <1>  cmp byte [%1], %2
    66 000027F2 0F857C030000        <1>  jne L_error_incorrect_type
  3138 000027F8 8A4001                          mov al, byte [rax + 1]
  3139 000027FB 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  3140 000027FF 48B8-                           mov rax, sob_void
  3140 00002801 [0000000000000000] 
  3141                                          LEAVE
    61 00002809 C9                  <1>  leave
  3142 0000280A C22800                          ret AND_KILL_FRAME(3)
  3143                                  
  3144                                  L_code_ptr_make_vector:
  3145                                          ENTER
    56 0000280D C8000000            <1>  enter 0, 0
    57 00002811 4883E4F0            <1>  and rsp, ~15
  3146 00002815 48837D1802                      cmp COUNT, 2
  3147 0000281A 0F8584020000                    jne L_error_arg_count_2
  3148 00002820 488B4D20                        mov rcx, PARAM(0)
  3149                                          assert_integer(rcx)
    70                              <1>  assert_rational(%1)
    65 00002824 803911              <2>  cmp byte [%1], %2
    66 00002827 0F8547030000        <2>  jne L_error_incorrect_type
    71 0000282D 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    72 00002832 0F853C030000        <1>  jne L_error_incorrect_type
  3150 00002838 488B4901                        mov rcx, qword [rcx + 1]
  3151 0000283C 4883F900                        cmp rcx, 0
  3152 00002840 0F8CC3010000                    jl L_error_integer_range
  3153 00002846 488B5528                        mov rdx, PARAM(1)
  3154 0000284A 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  3155 00002852 E8A7EAFFFF                      call malloc
  3156 00002857 C60022                          mov byte [rax], T_vector
  3157 0000285A 48894801                        mov qword [rax + 1], rcx
  3158 0000285E 41B800000000                    mov r8, 0
  3159                                  .L0:
  3160 00002864 4939C8                          cmp r8, rcx
  3161 00002867 740A                            je .L1
  3162 00002869 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  3163 0000286E 49FFC0                          inc r8
  3164 00002871 EBF1                            jmp .L0
  3165                                  .L1:
  3166                                          LEAVE
    61 00002873 C9                  <1>  leave
  3167 00002874 C22000                          ret AND_KILL_FRAME(2)
  3168                                          
  3169                                  L_code_ptr_make_string:
  3170                                          ENTER
    56 00002877 C8000000            <1>  enter 0, 0
    57 0000287B 4883E4F0            <1>  and rsp, ~15
  3171 0000287F 48837D1802                      cmp COUNT, 2
  3172 00002884 0F851A020000                    jne L_error_arg_count_2
  3173 0000288A 488B4D20                        mov rcx, PARAM(0)
  3174                                          assert_integer(rcx)
    70                              <1>  assert_rational(%1)
    65 0000288E 803911              <2>  cmp byte [%1], %2
    66 00002891 0F85DD020000        <2>  jne L_error_incorrect_type
    71 00002897 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    72 0000289C 0F85D2020000        <1>  jne L_error_incorrect_type
  3175 000028A2 488B4901                        mov rcx, qword [rcx + 1]
  3176 000028A6 4883F900                        cmp rcx, 0
  3177 000028AA 0F8C59010000                    jl L_error_integer_range
  3178 000028B0 488B5528                        mov rdx, PARAM(1)
  3179                                          assert_char(rdx)
    65 000028B4 803A02              <1>  cmp byte [%1], %2
    66 000028B7 0F85B7020000        <1>  jne L_error_incorrect_type
  3180 000028BD 8A5201                          mov dl, byte [rdx + 1]
  3181 000028C0 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  3182 000028C4 E835EAFFFF                      call malloc
  3183 000028C9 C60003                          mov byte [rax], T_string
  3184 000028CC 48894801                        mov qword [rax + 1], rcx
  3185 000028D0 41B800000000                    mov r8, 0
  3186                                  .L0:
  3187 000028D6 4939C8                          cmp r8, rcx
  3188 000028D9 740A                            je .L1
  3189 000028DB 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  3190 000028E0 49FFC0                          inc r8
  3191 000028E3 EBF1                            jmp .L0
  3192                                  .L1:
  3193                                          LEAVE
    61 000028E5 C9                  <1>  leave
  3194 000028E6 C22000                          ret AND_KILL_FRAME(2)
  3195                                  
  3196                                  L_code_ptr_numerator:
  3197                                          ENTER
    56 000028E9 C8000000            <1>  enter 0, 0
    57 000028ED 4883E4F0            <1>  and rsp, ~15
  3198 000028F1 48837D1801                      cmp COUNT, 1
  3199 000028F6 0F8573010000                    jne L_error_arg_count_1
  3200 000028FC 488B4520                        mov rax, PARAM(0)
  3201                                          assert_rational(rax)
    65 00002900 803811              <1>  cmp byte [%1], %2
    66 00002903 0F856B020000        <1>  jne L_error_incorrect_type
  3202 00002909 488B7801                        mov rdi, qword [rax + 1]
  3203 0000290D E8D1000000                      call make_integer
  3204                                          LEAVE
    61 00002912 C9                  <1>  leave
  3205 00002913 C21800                          ret AND_KILL_FRAME(1)
  3206                                          
  3207                                  L_code_ptr_denominator:
  3208                                          ENTER
    56 00002916 C8000000            <1>  enter 0, 0
    57 0000291A 4883E4F0            <1>  and rsp, ~15
  3209 0000291E 48837D1801                      cmp COUNT, 1
  3210 00002923 0F8546010000                    jne L_error_arg_count_1
  3211 00002929 488B4520                        mov rax, PARAM(0)
  3212                                          assert_rational(rax)
    65 0000292D 803811              <1>  cmp byte [%1], %2
    66 00002930 0F853E020000        <1>  jne L_error_incorrect_type
  3213 00002936 488B7809                        mov rdi, qword [rax + 1 + 8]
  3214 0000293A E8A4000000                      call make_integer
  3215                                          LEAVE
    61 0000293F C9                  <1>  leave
  3216 00002940 C21800                          ret AND_KILL_FRAME(1)
  3217                                  
  3218                                  L_code_ptr_eq:
  3219                                  	ENTER
    56 00002943 C8000000            <1>  enter 0, 0
    57 00002947 4883E4F0            <1>  and rsp, ~15
  3220 0000294B 48837D1802              	cmp COUNT, 2
  3221 00002950 0F854E010000            	jne L_error_arg_count_2
  3222 00002956 488B7D20                	mov rdi, PARAM(0)
  3223 0000295A 488B7528                	mov rsi, PARAM(1)
  3224 0000295E 4839F7                  	cmp rdi, rsi
  3225 00002961 744A                    	je .L_eq_true
  3226 00002963 8A17                    	mov dl, byte [rdi]
  3227 00002965 3A16                    	cmp dl, byte [rsi]
  3228 00002967 7550                    	jne .L_eq_false
  3229 00002969 80FA02                  	cmp dl, T_char
  3230 0000296C 7437                    	je .L_char
  3231 0000296E 80FA04                  	cmp dl, T_symbol
  3232 00002971 742A                    	je .L_symbol
  3233 00002973 80FA12                  	cmp dl, T_real
  3234 00002976 741D                    	je .L_real
  3235 00002978 80FA11                  	cmp dl, T_rational
  3236 0000297B 7402                    	je .L_rational
  3237 0000297D EB3A                    	jmp .L_eq_false
  3238                                  .L_rational:
  3239 0000297F 488B4601                	mov rax, qword [rsi + 1]
  3240 00002983 483B4701                	cmp rax, qword [rdi + 1]
  3241 00002987 7530                    	jne .L_eq_false
  3242 00002989 488B4609                	mov rax, qword [rsi + 1 + 8]
  3243 0000298D 483B4709                	cmp rax, qword [rdi + 1 + 8]
  3244 00002991 7526                    	jne .L_eq_false
  3245 00002993 EB18                    	jmp .L_eq_true
  3246                                  .L_real:
  3247 00002995 488B4601                	mov rax, qword [rsi + 1]
  3248 00002999 483B4701                	cmp rax, qword [rdi + 1]
  3249                                  .L_symbol:
  3250                                  	; never reached, because symbols are static!
  3251                                  	; but I'm keeping it in case, I'll ever change
  3252                                  	; the implementation
  3253 0000299D 488B4601                	mov rax, qword [rsi + 1]
  3254 000029A1 483B4701                	cmp rax, qword [rdi + 1]
  3255                                  .L_char:
  3256 000029A5 8A5E01                  	mov bl, byte [rsi + 1]
  3257 000029A8 3A5F01                  	cmp bl, byte [rdi + 1]
  3258 000029AB 750C                    	jne .L_eq_false
  3259                                  .L_eq_true:
  3260 000029AD 48B8-                   	mov rax, sob_boolean_true
  3260 000029AF [0300000000000000] 
  3261 000029B7 EB0A                    	jmp .L_eq_exit
  3262                                  .L_eq_false:
  3263 000029B9 48B8-                   	mov rax, sob_boolean_false
  3263 000029BB [0200000000000000] 
  3264                                  .L_eq_exit:
  3265                                  	LEAVE
    61 000029C3 C9                  <1>  leave
  3266 000029C4 C22000                  	ret AND_KILL_FRAME(2)
  3267                                  
  3268                                  make_real:
  3269                                          ENTER
    56 000029C7 C8000000            <1>  enter 0, 0
    57 000029CB 4883E4F0            <1>  and rsp, ~15
  3270 000029CF BF09000000                      mov rdi, (1 + 8)
  3271 000029D4 E825E9FFFF                      call malloc
  3272 000029D9 C60012                          mov byte [rax], T_real
  3273 000029DC F20F114001                      movsd qword [rax + 1], xmm0
  3274                                          LEAVE
    61 000029E1 C9                  <1>  leave
  3275 000029E2 C3                              ret
  3276                                          
  3277                                  make_integer:
  3278                                          ENTER
    56 000029E3 C8000000            <1>  enter 0, 0
    57 000029E7 4883E4F0            <1>  and rsp, ~15
  3279 000029EB 4889FE                          mov rsi, rdi
  3280 000029EE BF11000000                      mov rdi, (1 + 8 + 8)
  3281 000029F3 E806E9FFFF                      call malloc
  3282 000029F8 C60011                          mov byte [rax], T_rational
  3283 000029FB 48897001                        mov qword [rax + 1], rsi
  3284 000029FF 48C7400901000000                mov qword [rax + 1 + 8], 1
  3285                                          LEAVE
    61 00002A07 C9                  <1>  leave
  3286 00002A08 C3                              ret
  3287                                          
  3288                                  L_error_integer_range:
  3289 00002A09 488B3C25[00000000]              mov rdi, qword [stderr]
  3290 00002A11 48BE-                           mov rsi, fmt_integer_range
  3290 00002A13 [BA04000000000000] 
  3291 00002A1B B800000000                      mov rax, 0
  3292                                  	ENTER
    56 00002A20 C8000000            <1>  enter 0, 0
    57 00002A24 4883E4F0            <1>  and rsp, ~15
  3293 00002A28 E8(00000000)                    call fprintf
  3294                                  	LEAVE
    61 00002A2D C9                  <1>  leave
  3295 00002A2E 48C7C0FBFFFFFF                  mov rax, -5
  3296 00002A35 E8(00000000)                    call exit
  3297                                  
  3298                                  L_error_arg_count_0:
  3299 00002A3A 488B3C25[00000000]              mov rdi, qword [stderr]
  3300 00002A42 48BE-                           mov rsi, fmt_arg_count_0
  3300 00002A44 [8003000000000000] 
  3301 00002A4C 488B5518                        mov rdx, COUNT
  3302 00002A50 B800000000                      mov rax, 0
  3303                                  	ENTER
    56 00002A55 C8000000            <1>  enter 0, 0
    57 00002A59 4883E4F0            <1>  and rsp, ~15
  3304 00002A5D E8(00000000)                    call fprintf
  3305                                  	LEAVE
    61 00002A62 C9                  <1>  leave
  3306 00002A63 48C7C0FDFFFFFF                  mov rax, -3
  3307 00002A6A E8(00000000)                    call exit
  3308                                  
  3309                                  L_error_arg_count_1:
  3310 00002A6F 488B3C25[00000000]              mov rdi, qword [stderr]
  3311 00002A77 48BE-                           mov rsi, fmt_arg_count_1
  3311 00002A79 [A803000000000000] 
  3312 00002A81 488B5518                        mov rdx, COUNT
  3313 00002A85 B800000000                      mov rax, 0
  3314                                  	ENTER
    56 00002A8A C8000000            <1>  enter 0, 0
    57 00002A8E 4883E4F0            <1>  and rsp, ~15
  3315 00002A92 E8(00000000)                    call fprintf
  3316                                  	LEAVE
    61 00002A97 C9                  <1>  leave
  3317 00002A98 48C7C0FDFFFFFF                  mov rax, -3
  3318 00002A9F E8(00000000)                    call exit
  3319                                  
  3320                                  L_error_arg_count_2:
  3321 00002AA4 488B3C25[00000000]              mov rdi, qword [stderr]
  3322 00002AAC 48BE-                           mov rsi, fmt_arg_count_2
  3322 00002AAE [0E04000000000000] 
  3323 00002AB6 488B5518                        mov rdx, COUNT
  3324 00002ABA B800000000                      mov rax, 0
  3325                                  	ENTER
    56 00002ABF C8000000            <1>  enter 0, 0
    57 00002AC3 4883E4F0            <1>  and rsp, ~15
  3326 00002AC7 E8(00000000)                    call fprintf
  3327                                  	LEAVE
    61 00002ACC C9                  <1>  leave
  3328 00002ACD 48C7C0FDFFFFFF                  mov rax, -3
  3329 00002AD4 E8(00000000)                    call exit
  3330                                  
  3331                                  L_error_arg_count_12:
  3332 00002AD9 488B3C25[00000000]              mov rdi, qword [stderr]
  3333 00002AE1 48BE-                           mov rsi, fmt_arg_count_12
  3333 00002AE3 [CE03000000000000] 
  3334 00002AEB 488B5518                        mov rdx, COUNT
  3335 00002AEF B800000000                      mov rax, 0
  3336                                  	ENTER
    56 00002AF4 C8000000            <1>  enter 0, 0
    57 00002AF8 4883E4F0            <1>  and rsp, ~15
  3337 00002AFC E8(00000000)                    call fprintf
  3338                                  	LEAVE
    61 00002B01 C9                  <1>  leave
  3339 00002B02 48C7C0FDFFFFFF                  mov rax, -3
  3340 00002B09 E8(00000000)                    call exit
  3341                                  
  3342                                  L_error_arg_count_3:
  3343 00002B0E 488B3C25[00000000]              mov rdi, qword [stderr]
  3344 00002B16 48BE-                           mov rsi, fmt_arg_count_3
  3344 00002B18 [3504000000000000] 
  3345 00002B20 488B5518                        mov rdx, COUNT
  3346 00002B24 B800000000                      mov rax, 0
  3347                                  	ENTER
    56 00002B29 C8000000            <1>  enter 0, 0
    57 00002B2D 4883E4F0            <1>  and rsp, ~15
  3348 00002B31 E8(00000000)                    call fprintf
  3349                                  	LEAVE
    61 00002B36 C9                  <1>  leave
  3350 00002B37 48C7C0FDFFFFFF                  mov rax, -3
  3351 00002B3E E8(00000000)                    call exit
  3352                                  
  3353                                  L_error_arg_apply_no_list:
  3354 00002B43 488B3C25[00000000]              mov rdi, qword [stderr]
  3355 00002B4B 48BE-                           mov rsi, fmt_arg_apply_no_list
  3355 00002B4D [5E04000000000000] 
  3356 00002B55 B800000000                      mov rax, 0
  3357                                  	ENTER
    56 00002B5A C8000000            <1>  enter 0, 0
    57 00002B5E 4883E4F0            <1>  and rsp, ~15
  3358 00002B62 E8(00000000)                    call fprintf
  3359                                  	LEAVE
    61 00002B67 C9                  <1>  leave
  3360 00002B68 48C7C0FCFFFFFF                  mov rax, -4
  3361 00002B6F E8(00000000)                    call exit  
  3362                                  
  3363                                  L_error_incorrect_type:
  3364 00002B74 488B3C25[00000000]              mov rdi, qword [stderr]
  3365 00002B7C 48BE-                           mov rsi, fmt_type
  3365 00002B7E [9604000000000000] 
  3366 00002B86 B800000000                      mov rax, 0
  3367                                  	ENTER
    56 00002B8B C8000000            <1>  enter 0, 0
    57 00002B8F 4883E4F0            <1>  and rsp, ~15
  3368 00002B93 E8(00000000)                    call fprintf
  3369                                  	LEAVE
    61 00002B98 C9                  <1>  leave
  3370 00002B99 48C7C0FCFFFFFF                  mov rax, -4
  3371 00002BA0 E8(00000000)                    call exit
  3372                                  
  3373                                  L_error_division_by_zero:
  3374 00002BA5 488B3C25[00000000]              mov rdi, qword [stderr]
  3375 00002BAD 48BE-                           mov rsi, fmt_division_by_zero
  3375 00002BAF [D704000000000000] 
  3376 00002BB7 B800000000                      mov rax, 0
  3377                                  	ENTER
    56 00002BBC C8000000            <1>  enter 0, 0
    57 00002BC0 4883E4F0            <1>  and rsp, ~15
  3378 00002BC4 E8(00000000)                    call fprintf
  3379                                  	LEAVE
    61 00002BC9 C9                  <1>  leave
  3380 00002BCA 48C7C0F8FFFFFF                  mov rax, -8
  3381 00002BD1 E8(00000000)                    call exit
  3382                                  
  3383                                  section .data
  3384                                  fmt_char:
  3385 0000037D 256300                          db `%c\0`
  3386                                  fmt_arg_count_0:
  3387 00000380 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  3387 00000389 74696E67207A65726F-
  3387 00000392 20617267756D656E74-
  3387 0000039B 732E20466F756E6420-
  3387 000003A4 25640A00           
  3388                                  fmt_arg_count_1:
  3389 000003A8 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  3389 000003B1 74696E67206F6E6520-
  3389 000003BA 617267756D656E742E-
  3389 000003C3 20466F756E64202564-
  3389 000003CC 0A00               
  3390                                  fmt_arg_count_12:
  3391 000003CE 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  3391 000003D7 74696E67206F6E6520-
  3391 000003E0 726571756972656420-
  3391 000003E9 616E64206F6E65206F-
  3391 000003F2 7074696F6E616C2061-
  3391 000003FB 7267756D656E742E20-
  3391 00000404 466F756E642025640A-
  3391 0000040D 00                 
  3392                                  fmt_arg_count_2:
  3393 0000040E 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  3393 00000417 74696E672074776F20-
  3393 00000420 617267756D656E7473-
  3393 00000429 2E20466F756E642025-
  3393 00000432 640A00             
  3394                                  fmt_arg_count_3:
  3395 00000435 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  3395 0000043E 74696E672074687265-
  3395 00000447 6520617267756D656E-
  3395 00000450 74732E20466F756E64-
  3395 00000459 2025640A00         
  3396                                  fmt_arg_apply_no_list:
  3397 0000045E 21212120546865206C-             db `!!! The last argument in apply should be a proper list\n\0`
  3397 00000467 61737420617267756D-
  3397 00000470 656E7420696E206170-
  3397 00000479 706C792073686F756C-
  3397 00000482 642062652061207072-
  3397 0000048B 6F706572206C697374-
  3397 00000494 0A00               
  3398                                  fmt_type:
  3399 00000496 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  3399 0000049F 696F6E207061737365-
  3399 000004A8 6420696E636F727265-
  3399 000004B1 637420747970650A00 
  3400                                  fmt_integer_range:
  3401 000004BA 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  3401 000004C3 7265637420696E7465-
  3401 000004CC 6765722072616E6765-
  3401 000004D5 0A00               
  3402                                  fmt_division_by_zero:
  3403 000004D7 212121204469766973-             db `!!! Division by zero\n\0`
  3403 000004E0 696F6E206279207A65-
  3403 000004E9 726F0A00           
  3404                                  fmt_scheme_error_part_1:
  3405 000004ED 0A2121212054686520-             db `\n!!! The procedure \0`
  3405 000004F6 70726F636564757265-
  3405 000004FF 2000               
  3406                                  fmt_scheme_error_part_2:
  3407 00000501 2061736B656420746F-             db ` asked to terminate the program\n`
  3407 0000050A 207465726D696E6174-
  3407 00000513 65207468652070726F-
  3407 0000051C 6772616D0A         
  3408 00000521 202020207769746820-             db `    with the following message:\n\n\0`
  3408 0000052A 74686520666F6C6C6F-
  3408 00000533 77696E67206D657373-
  3408 0000053C 6167653A0A0A00     
  3409                                  fmt_scheme_error_part_3:
  3410 00000543 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  3410 0000054C 210A0A00           
